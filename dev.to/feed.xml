<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How I went from newbie to dream role in 225 days...</title>
      <author>lauracharvey</author>
      <pubDate>Fri, 15 Jan 2021 15:27:16 +0000</pubDate>
      <link>https://dev.to/lauracharvey/how-i-went-from-newbie-to-dream-role-in-225-days-2lal</link>
      <guid>https://dev.to/lauracharvey/how-i-went-from-newbie-to-dream-role-in-225-days-2lal</guid>
      <description>&lt;p&gt;Ahh it‚Äôs been too long since I sat down to write, I am so, so, so excited to bring you this latest instalment! &lt;/p&gt;

&lt;p&gt;As you may or may not know, I GOT MY FIRST TECH JOB ü•≥&lt;/p&gt;

&lt;p&gt;225 days after starting my learning journey, I accepted a role as Developer Relations (DevRel) for Veeqo starting Monday 18th January 2021.&lt;/p&gt;

&lt;p&gt;This article follows on from my last post:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/lauracharvey" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X7f_W5vE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5UH3XW3a--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/398346/b5f9b419-8ded-4c41-96d9-8095d5d772d0.jpg" alt="lauracharvey image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/lauracharvey/my-journey-through-space-time-and-tech-so-far-248a" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;My journey through space, time and tech (so far).&lt;/h2&gt;
      &lt;h3&gt;lauracharvey „Éª Aug 19 '20 „Éª 15 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;And will cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what I did next&lt;/li&gt;
&lt;li&gt;a bit about bootcamp&lt;/li&gt;
&lt;li&gt;what my job application process was like&lt;/li&gt;
&lt;li&gt;how I got my job&lt;/li&gt;
&lt;li&gt;job application tips&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;...and of course, the burning question that you‚Äôve just thought of, what on earth is DevRel?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-we-left-off" class="anchor"&gt;
  &lt;/a&gt;
  Where we left off
&lt;/h2&gt;

&lt;p&gt;On the 19th August 2020 I told you all I was going to carry on self-teaching, but if I‚Äôm being honest readers, it was only because I had a not so supportive partner (with no tech experience) who had told me that bootcamp was a load of &lt;strong&gt;hoo haa&lt;/strong&gt; and he wasn't prepared to support me through it.&lt;/p&gt;

&lt;p&gt;By the end of August, I had decided a career in tech was more important to me than an unsupportive partner, so I left and decided to pursue my dream alone!&lt;/p&gt;

&lt;p&gt;I passed my entry challenges and enrolled in the General Assembly &lt;a href="https://generalassemb.ly/education/software-engineering-immersive/london"&gt;Software Engineering Immersive course&lt;/a&gt; within a week and signed up for the cohort starting 21st September 2020.&lt;/p&gt;

&lt;p&gt;Turns out, when you least expect it and you‚Äôve resigned yourself to being a lonely old spinster with 10,000 dogs, someone comes along and ruins your well-made plans‚Ä¶&lt;/p&gt;

&lt;p&gt;Cue Ant ü•∞&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hdQebVDx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/Ei89kahXsAIbF4B.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OSL7gOGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1339909309153636353/BgImwt-m_normal.jpg" alt="Laura Harvey üßú‚Äç‚ôÄÔ∏èüíª profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Laura Harvey üßú‚Äç‚ôÄÔ∏èüíª
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/lauracharvey"&gt;@lauracharvey&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I rarely post things about my personal life but I‚Äôm too happy not to share üß°&lt;br&gt;&lt;br&gt;World, meet Ant, my biggest supporter and the reason my Twitter engagement is now through the floor üòÇüòò‚ô•Ô∏è 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      21:41 PM - 27 Sep 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1310333732864372737" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-reply-action.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1310333732864372737" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-retweet-action.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      2
      &lt;a href="https://twitter.com/intent/like?tweet_id=1310333732864372737" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-like-action.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
      208
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#laura-im-here-for-the-tech-stuff-not-your-love-life-tell-me-about-the-bootcamp" class="anchor"&gt;
  &lt;/a&gt;
  Laura, I‚Äôm here for the tech stuff, not your love life, tell me about the bootcamp‚Ä¶
&lt;/h2&gt;

&lt;p&gt;I wrote about the bootcamp application process here:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/lauracharvey" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X7f_W5vE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5UH3XW3a--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/398346/b5f9b419-8ded-4c41-96d9-8095d5d772d0.jpg" alt="lauracharvey image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/lauracharvey/the-no-jargon-guide-bootcamp-edition-entry-challenges-2nkl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The No Jargon Guide - Bootcamp Edition - Entry Challenges&lt;/h2&gt;
      &lt;h3&gt;lauracharvey „Éª Sep 19 '20 „Éª 11 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;My course was fully remote due to COVID-19 (for anyone reading this in the future who doesn‚Äôt know, COVID-19 was like a sort of apocalypse over 2020-2021 similar to the movie Contagion where no one was allowed out of the house and people busied themselves by stockpiling toilet paper).&lt;/p&gt;

&lt;p&gt;My classes were held on Zoom with 1 tutor, 2 teaching assistants and a cohort of 23 students. We would log into class from 9:30am until around 4:30pm with a 1-hour lunch, except on project weeks where you were gifted a lay-in and didn‚Äôt have to log in until 10am!&lt;/p&gt;

&lt;p&gt;Our course was 12-weeks long and the syllabus covered:&lt;/p&gt;

&lt;p&gt;HTML&lt;br&gt;
CSS&lt;br&gt;
React.js&lt;br&gt;
Express.js&lt;br&gt;
Node.js&lt;br&gt;
MongoDB (&amp;amp; Mongoose)&lt;br&gt;
Python&lt;br&gt;
Flask&lt;br&gt;
PostgreSQL&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here‚Äôs a breakdown of the timescales:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u4SAnpJJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ouXWE5e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4SAnpJJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ouXWE5e.png" alt="table showing breakdown of bootcamp timescales"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-was-the-teaching-like" class="anchor"&gt;
  &lt;/a&gt;
  What was the teaching like?
&lt;/h2&gt;

&lt;p&gt;Class was a mix of sessions and ‚Äúlabs‚Äù, the sessions were 45 minutes or more and then the labs were mini practical exercises done in groups or alone to break up the learning. During labs we would often be put in breakout rooms on Zoom which would be a smaller group that you could chat to or solve problems with.&lt;/p&gt;

&lt;p&gt;Homework was set at the end of each day and varied in length and complexity. In the first few weeks it was going over concepts we‚Äôd learnt that day, from week-7 onwards it was replicating a full stack application that the teacher had built, adding to it each day with the things we‚Äôd learnt in class. &lt;/p&gt;

&lt;p&gt;I work better in the mornings so I would get up early and work for 2-3 hours before class, but I know most people in my cohort did theirs as soon as class was over for the day.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#go-on-how-much-did-it-cost" class="anchor"&gt;
  &lt;/a&gt;
  Go on, how much did it cost?
&lt;/h2&gt;

&lt;p&gt;It definitely wasn‚Äôt cheap.&lt;/p&gt;

&lt;p&gt;The General Assembly Software Engineering Immersive costs ¬£9,000 if you‚Äôre a boy, unlucky. However, if you are female or identify as female you get a discount of around ¬£1,500.&lt;/p&gt;

&lt;p&gt;BUT and this is a massive but, you HAVE to have a Mac which is obviously a huge outlay on top of the course fees.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-did-you-make-it-work" class="anchor"&gt;
  &lt;/a&gt;
  How did you make it work?
&lt;/h2&gt;

&lt;p&gt;I chose to fund the course fees from savings.&lt;/p&gt;

&lt;p&gt;I got the Mac on credit card (eeek üò¨)&lt;/p&gt;

&lt;p&gt;And I‚Äôm extremely blessed to have parents who are able to help me out. Although somewhat begrudgingly, they paid me monthly ‚Äúpocket money‚Äù so I could pay my bills and afford to feed myself.&lt;/p&gt;

&lt;p&gt;All I will say on this, it‚Äôs best to be prepared financially for bootcamp, it‚Äôs stressful enough without adding money worries in the mix. There are part time options which although cost around the same, you can fit them around a job so at least you don‚Äôt have to stop earning.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#is-bootcamp-worth-it" class="anchor"&gt;
  &lt;/a&gt;
  Is bootcamp worth it?
&lt;/h2&gt;

&lt;p&gt;I think this is a really personal question‚Ä¶what do you want to achieve and why?&lt;/p&gt;

&lt;p&gt;For me I was making slow progress with JavaScript and I wanted to go quicker, I felt like I‚Äôd put life on hold enough in the past so I wanted to do something that could help me achieve my goal of being a developer as quickly as possible.&lt;/p&gt;

&lt;p&gt;Also, after trying university before I knew that style of learning wasn‚Äôt for me.&lt;/p&gt;

&lt;p&gt;It is true that you can learn everything I learnt at bootcamp for free online, but I felt I needed the support and community learning that bootcamp brings. I loved having people to ask questions, chat with about code, check understandings and also the solidarity when thinking ‚ÄúI don‚Äôt get this at all‚Ä¶‚Äù.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-are-some-things-to-bear-in-mind" class="anchor"&gt;
  &lt;/a&gt;
  What are some things to bear in mind?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;It‚Äôs like a massive information dump for 3 months&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you don‚Äôt get something, the next day you‚Äôre onto a new topic and you have homework so it can be difficult to go back over material during the course.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It‚Äôs really intense (no, really)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I was totally unprepared for how intense bootcamp was, its 7 hours per day, 5 days a week. You have homework and you‚Äôre learning masses of information each day.&lt;/p&gt;

&lt;p&gt;The GA course also has built-in career support called ‚Äúoutcomes‚Äù. The outcomes team set homework and arrange networking sessions in the evenings a few times throughout the course. Once you finish the 12 weeks teaching you go straight into 2 weeks outcomes work which include work to get you job ready ‚Äì CV/Resume, cover letters, LinkedIn, portfolio, READMEs and a job tracker.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No one gets you a job&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are hoping going to bootcamp will magically get you job offers left, right and center and you'll be alright because bootcamps have affiliated employers, unfortunately you‚Äôre wrong. You have to put in all the work on your deliverables yourself, approach employers yourself and prepare for those technical interviews yourself.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#ok-enough-about-bootcamp-tell-me-how-did-you-get-a-job" class="anchor"&gt;
  &lt;/a&gt;
  Ok, enough about bootcamp, tell me, how did you get a job???
&lt;/h2&gt;

&lt;p&gt;I think my job search journey is a little bit unusual, so I‚Äôll tell you, but I‚Äôll also give you some tips for a more traditional job search.&lt;/p&gt;

&lt;p&gt;As some of you might know since starting to learn to code, I have built a Twitter following (I don‚Äôt have the secrets as to how, but I‚Äôll do my best to share some tips in a thread another day). &lt;/p&gt;

&lt;p&gt;On the 19th December 2020, I posted my new portfolio letting everyone know I was looking for work.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uLJR3B7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1340369515243327494/pu/img/sIDXh0a5iX-Z2UiA.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OSL7gOGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1339909309153636353/BgImwt-m_normal.jpg" alt="Laura Harvey üßú‚Äç‚ôÄÔ∏èüíª profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Laura Harvey üßú‚Äç‚ôÄÔ∏èüíª
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/lauracharvey"&gt;@lauracharvey&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      NEW PORTFOLIO!!!!!!!!! ü•≥‚ò∫Ô∏è&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/arpKBlE7nd"&gt;lauracharvey.dev&lt;/a&gt;&lt;br&gt;&lt;br&gt;Built with &lt;a href="https://twitter.com/hashtag/reactjs"&gt;#reactjs&lt;/a&gt; (my new love üòç)&lt;br&gt;&lt;br&gt;I am looking for work üëÄ so I'd really appreciate a retweet and if you're hiring or know of any roles going, give me a shout!&lt;br&gt;&lt;br&gt;TIA ü•∞ 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:11 PM - 19 Dec 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1340374223378931718" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-reply-action.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1340374223378931718" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-retweet-action.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      358
      &lt;a href="https://twitter.com/intent/like?tweet_id=1340374223378931718" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-like-action.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
      2071
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;I had a few people direct message me and one of them was the CEO of Veeqo who said he thought I might be a good fit for the Developer Relations role they had advertised with a link to the role.&lt;/p&gt;

&lt;p&gt;DevRel was something I knew I wanted to get into but never dreamed I could do as a junior so I jumped at the opportunity.&lt;/p&gt;

&lt;p&gt;The application was very simple, upload your CV, add a cover letter and answer a question - which CTO do you find most inspirational and why?&lt;/p&gt;

&lt;p&gt;I chose Gerri Martin-Flickinger because she's female and was the first ever CTO at Starbucks and I think her vision for technologically connected coffee shops is pretty cool üòé&lt;/p&gt;

&lt;p&gt;I was so glad to be shortlisted and the interview process was then done in 3 stages:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interview 1&lt;/strong&gt; - 15-30 minutes&lt;/p&gt;

&lt;p&gt;Chat with their Head of People about the role, Veeqo as a company, their culture and the sort of thing I was looking for to check it was a match.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interview 2&lt;/strong&gt; - 30-45 minutes&lt;/p&gt;

&lt;p&gt;Chat with the hiring manager about the role and my experience in more detail.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interview 3&lt;/strong&gt; - 45-60 minutes&lt;/p&gt;

&lt;p&gt;I was asked to give a 15-minute presentation on their API, how it works and its benefits.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-other-tech-interviews-like" class="anchor"&gt;
  &lt;/a&gt;
  What are other tech interviews like?
&lt;/h2&gt;

&lt;p&gt;I got a job quite early on in my search, but I interviewed at 4 other companies, I won‚Äôt disclose who, but I‚Äôll give you an overview of the role, the type of business and the interview process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Full Stack Developer&lt;/strong&gt;&lt;br&gt;
Digital Agency&lt;/p&gt;

&lt;p&gt;About 3-4 weeks into bootcamp, chat about the role, my journey, the tech I was familiar with and transferable skills&lt;/p&gt;

&lt;p&gt;Outcome: Rejected&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Frontend Developer (React)&lt;/strong&gt;&lt;br&gt;
Start Up&lt;/p&gt;

&lt;p&gt;Chat about the role, my journey, the tech I was familiar with, the type of role I was looking for, transferable skills and my learning style&lt;/p&gt;

&lt;p&gt;Outcome: Withdrew&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Frontend Developer (React)&lt;/strong&gt;&lt;br&gt;
Start Up&lt;/p&gt;

&lt;p&gt;Interview 1&lt;br&gt;
Chat with the CEO&lt;/p&gt;

&lt;p&gt;Interview 2&lt;br&gt;
Chat with the CEO and backend developer&lt;/p&gt;

&lt;p&gt;Outcome: Offer Declined&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Junior Software Engineer&lt;/strong&gt;&lt;br&gt;
Start Up&lt;/p&gt;

&lt;p&gt;Interview 1&lt;br&gt;
Chat with hiring manager and technical test ‚Äì create a function in any language to convert a serial number and letters in certain numerical values to find an overall check digit and check the authenticity of the serial number&lt;/p&gt;

&lt;p&gt;Interview 2&lt;br&gt;
One and a half hour pair programming session in React&lt;/p&gt;

&lt;p&gt;Outcome: Withdrew&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-did-you-find-all-these-roles" class="anchor"&gt;
  &lt;/a&gt;
  Where did you find all these roles?
&lt;/h2&gt;

&lt;p&gt;Twitter &amp;amp; LinkedIn&lt;/p&gt;

&lt;p&gt;There‚Äôs no magic trick to it unfortunately, you just have to sift through lots of roles however networking can really help bring the roles to you rather than you going looking for them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-have-like-1-twitter-follower-will-i-ever-get-a-job" class="anchor"&gt;
  &lt;/a&gt;
  I have like 1 Twitter follower, will I ever get a job?
&lt;/h2&gt;

&lt;p&gt;Everyone has to start somewhere and you definitely don‚Äôt need to have followers on social media to get a job in tech.&lt;/p&gt;

&lt;p&gt;Here are some practical tips for you if you‚Äôre currently searching:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Show some personality&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Job applications don‚Äôt need to be boring, you‚Äôre not a tech savvy robot, you‚Äôre a person and that is the person the hiring manager is going to have to work with on the daily should you be successful.&lt;/p&gt;

&lt;p&gt;Are you a loud or funny person? Show it!&lt;br&gt;
Are you a Warhammer enthusiast? Show it!&lt;br&gt;
Are you a dog lover? Show it! &lt;/p&gt;

&lt;p&gt;You can check my personal statement on my portfolio if you‚Äôre struggling to get started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Show you are passionate about tech/development&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I‚Äôve spoken to a couple of recruiters and one thing they both said was that COVID has caused a massive influx of junior developers in the market and not all of them care as much about development as you do, and it shows!&lt;/p&gt;

&lt;p&gt;Set yourself apart from other candidates by showing your passion and commitment to the developer community. Share your wins, your losses, create content and build, build, build.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Build projects without following a tutorial&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Show your creativity and willingness to strike off on your own, by all means replicate something that has been built 1000 times before but do it in your own way without copying the code line-by-line.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Have a portfolio or at least a GitHub or CodePen to showcase your work&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once you‚Äôve built those projects find some way to showcase them, don‚Äôt worry about someone digging around in your code, firstly, you might learn something and secondly, it shows your progress from project to project&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Get your CV/resume in check&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Make sure your message is consistent across all of your platforms, don‚Äôt call yourself a Frontend dev on LinkedIn and then a Full Stack developer on your CV.&lt;/p&gt;

&lt;p&gt;For the UK market your CV should be no more than 2-pages including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your name&lt;/li&gt;
&lt;li&gt;Your current job title or job title you are hoping to achieve&lt;/li&gt;
&lt;li&gt;Your contact details&lt;/li&gt;
&lt;li&gt;Links to your other platforms i.e. Twitter, GitHub, Dev.to&lt;/li&gt;
&lt;li&gt;A personal statement&lt;/li&gt;
&lt;li&gt;Summary of your technical skills&lt;/li&gt;
&lt;li&gt;Experience including dates, projects/content created whilst in that role and a description of the role/responsibilities&lt;/li&gt;
&lt;li&gt;Education&lt;/li&gt;
&lt;li&gt;Achievements (these don't have to be tech or even job related)&lt;/li&gt;
&lt;li&gt;Hobbies and Interests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;6. Use your LinkedIn to supplement your CV and actually make an effort with your LI&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Can‚Äôt fit all your awesomeness on 2 pages?! Me either...add a little note on the bottom of your CV ‚Äúfor my full career history, please check my LinkedIn‚Äù&lt;/p&gt;

&lt;p&gt;Make sure your LinkedIn is up to date and consistent with your CV. Sharing on Twitter? Cross post to LI too, that way you have the chance of reaching hiring managers or decision makers on either platform.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/DThompsonDev"&gt;@DThompsonDev&lt;/a&gt; has a great guide on updating your LinkedIn, here's one to get you started...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Fv4eXWDUOYQ"&gt;HOW TO USE LINKEDIN PROFILES TO GET JOBS! Stand out where the hiring managers hang out!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Cover letters are still necessary, unfortunately&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your cover letter should be tailored to each job, it doesn‚Äôt need to be an essay, all you need is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;One paragraph about why they are the best company ever and why you want to work there&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One paragraph about what you could offer them, don‚Äôt big yourself up using statements like ‚ÄúI‚Äôm the best candidate‚Äù, ‚ÄúI‚Äôm exceptional with Python‚Äù just talk about practical skills you have and how they match the role on offer:&lt;br&gt;
‚ÄúI really like working with JavaScript and particularly enjoy using different array methods‚Ä¶‚Äù &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One final paragraph to summarise:&lt;br&gt;
‚ÄúI‚Äôve attached my CV and would love the opportunity to talk you through my work and discuss the role you have available‚Ä¶‚Äù&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;8. Speculative applications might open up your options&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Found a company that you‚Äôd really love to work for, but they don‚Äôt have any open position? Apply anyway.&lt;/p&gt;

&lt;p&gt;Send a cover letter or cover note on LinkedIn and ask if they have any positions coming up or could they please consider you for any future openings.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. Network, network, network&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It‚Äôs estimated that 85% of job roles are filled by networking alone so get out there talk to people and start making friends in your industry&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. Put a post out on social media&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You never know that 1 follower could have your hiring manager in their contacts, what have you got to lose? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ok-last-question-what-on-earth-is-developer-relations" class="anchor"&gt;
  &lt;/a&gt;
  Ok, last question, what on earth is Developer Relations?!
&lt;/h2&gt;

&lt;p&gt;Developer Relations aka. Developer Advocacy is a growing specialism, it‚Äôs a bit of hybrid role that is different from organisation to organisation but generally you split your time between development and building a developer community around your companies‚Äô product(s).&lt;/p&gt;

&lt;p&gt;So, Veeqo, is an inventory and shipping platform for ecommerce retailers, they can do things like stock control, picking, packing, shipping, purchasing and financial reporting all in one spot however, some retailers want to build their own bespoke app so, Veeqo has a public API that can be used in the building of apps.&lt;/p&gt;

&lt;p&gt;My new role will be looking after that API, making the API and its documentation as user friendly as possible. I will also be the go between for developers using it, getting their feedback and supporting them with any issues to make developer experience the very best.&lt;/p&gt;

&lt;p&gt;I will also support the community by creating helpful content and speaking at conferences and other events.&lt;/p&gt;

&lt;p&gt;This article from &lt;a href="https://twitter.com/lynnetye"&gt;@lynnetye&lt;/a&gt; is a really great way to learn more about more about DevRel, she chatted to 15 Developer Advocates or Dev Avocados as they lovingly call themselves, about what they do day to day.&lt;/p&gt;

&lt;p&gt;My role is being built from the ground up so I‚Äôm really excited to see where it goes, as always, I‚Äôll keep you updated!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-little-note-from-me" class="anchor"&gt;
  &lt;/a&gt;
  A little note from me
&lt;/h3&gt;

&lt;p&gt;If you‚Äôre reading this, I assume you‚Äôre learning and/or looking to get into a tech so a massive GOOD LUCK on your journey! I love hearing from you so please feel free to reach out if you have any questions!&lt;/p&gt;

&lt;p&gt;Thanks for reading üòé&lt;/p&gt;

</description>
      <category>career</category>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The Ultimate Guide to MERN Stack</title>
      <author>Nitin Ranganath</author>
      <pubDate>Fri, 15 Jan 2021 09:05:35 +0000</pubDate>
      <link>https://dev.to/itsnitinr/the-ultimate-guide-to-mern-stack-1051</link>
      <guid>https://dev.to/itsnitinr/the-ultimate-guide-to-mern-stack-1051</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-modern-web" class="anchor"&gt;
  &lt;/a&gt;
  The Modern Web
&lt;/h2&gt;

&lt;p&gt;Websites have come a long way from what they used to be a decade ago. We started with plain HTML and CSS websites. Then came JavaScript and revolutionized the way the web works. From that point onward, web technologies have made significant strides, owing to JavaScript frameworks, which made single-page applications or SPAs a thing. Today, we're able to build websites that fetch the code files from the server once and never reload again, even while visiting other pages. How does this work?&lt;/p&gt;

&lt;p&gt;If you've ever wanted to become a full-stack web developer, the chances are that you came across the term &lt;strong&gt;MERN Stack&lt;/strong&gt;. Worry not if you haven't, though. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is it?&lt;/li&gt;
&lt;li&gt;what does it stand for&lt;/li&gt;
&lt;li&gt;How can you become a MERN stack developer? &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm here to demystify it and introduce you to one of the trendiest web development tech stacks while providing you a proper roadmap as well as resources alongside.  Are you excited? Let's dive right into it and begin with understanding the core concepts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#chapter-1"&gt;What is the MERN Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-2"&gt;MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-3"&gt;ExpressJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-4"&gt;ReactJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-5"&gt;NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-6"&gt;Combining The Technologies &amp;amp; Exploring How It Works Together&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-7"&gt;How To Become a MERN Stack Developer?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-8"&gt;Resources &amp;amp; Tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-9"&gt;Let's Look at the Alternatives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-10"&gt;Final Words&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#what-is-the-mern-stack" class="anchor"&gt;
  &lt;/a&gt;
  What is the MERN Stack &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The MERN stack is a web development tech stack consisting of &lt;strong&gt;M&lt;/strong&gt;ongoDB, &lt;strong&gt;E&lt;/strong&gt;xpressJS, &lt;strong&gt;R&lt;/strong&gt;eactJS &lt;strong&gt;N&lt;/strong&gt;odeJS and enables you to build feature-rich single page web applications using a single programming language, JavaScript. Some developers consider this to one of the key reasons why the MERN stack is so popular. You can use your proficiency in a single language to manage both the front and back of your web application.&lt;/p&gt;

&lt;p&gt;Now that we have a basic understanding of the MERN stack let's dive deeper into the technologies it consists of, starting with MongoDB.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#mongodb" class="anchor"&gt;
  &lt;/a&gt;
  MongoDB &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xAna914u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dh8m4lgft/image/upload/v1610648991/website-images/4j6jlxy_dejjle.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xAna914u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dh8m4lgft/image/upload/v1610648991/website-images/4j6jlxy_dejjle.png" alt="MongoDB Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.mongodb.com"&gt;MongoDB&lt;/a&gt; is a NoSQL database in which data is stored in documents that comprise key-value pairs, sharing a lot of resemblance to JSON or JavaScript Object Notation. Woah, Woah, too much jargon? Don't worry! Let's break the above sentence into smaller chunks. &lt;/p&gt;

&lt;p&gt;I am beginning with SQL vs. NoSQL. In SQL databases, data is stored in tables. Tables are just a collection of data in tabular form through rows and columns. Time for some visual representation!&lt;/p&gt;

&lt;p&gt;Here's how the data stored in MongoDB looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;5fdf7cd797334f00175e956c&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nitin Ranganath&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nitinranganath@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;itsasecret!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="nx"&gt;createdAt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2020&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="nx"&gt;T16&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;27.667&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;
    &lt;span class="nx"&gt;updatedAt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="nx"&gt;T08&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;06&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;15.269&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;
    &lt;span class="nx"&gt;__v&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And here's out the data stored in MySQL, a SQL-based database looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| id |    name    |            email            |  password   |
|  1 |    Nitin   |   nitinranganath@gmail.com  | itsasecret! |
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;MongoDB is excellent in so many aspects, making it a terrific choice for your upcoming projects. Some of these are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;High performance through indexing&lt;/li&gt;
&lt;li&gt;Dynamic schemas for models&lt;/li&gt;
&lt;li&gt;High scalability through distributing data on multiple servers&lt;/li&gt;
&lt;li&gt;Ability to store geospatial data through GeoJSON&lt;/li&gt;
&lt;li&gt;Auto replication&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And a lot more!&lt;/p&gt;

&lt;p&gt;Alright, but how exactly shall we use MongoDB to store our data in a  MERN stack web application? While we can use the &lt;code&gt;mongodb&lt;/code&gt; npm package, it is more convenient to use an ODM or Object Data Modelling library such as &lt;code&gt;mongoose&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;If I were to prepare a checklist of stuff you learn regarding MongoDB for building full stack web applications, it would consist of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Setting up local MongoDB or cloud MongoDB Atlas database&lt;/li&gt;
&lt;li&gt;Creating models and schemas&lt;/li&gt;
&lt;li&gt;Perform CRUD (Create, Read, Update &amp;amp; Delete) operations on the database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bonus points for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Linking two related models using &lt;code&gt;ref&lt;/code&gt;s&lt;/li&gt;
&lt;li&gt;Understanding mongoose &lt;code&gt;pre&lt;/code&gt; and &lt;code&gt;post&lt;/code&gt; hooks&lt;/li&gt;
&lt;li&gt;Mongoose data validation&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#expressjs" class="anchor"&gt;
  &lt;/a&gt;
  ExpressJS &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gEpre2vI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dh8m4lgft/image/upload/v1610649005/website-images/sBx5Y16_fiv15j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gEpre2vI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dh8m4lgft/image/upload/v1610649005/website-images/sBx5Y16_fiv15j.png" alt="Express Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Moving on to &lt;a href="https://expressjs.com/"&gt;ExpressJS&lt;/a&gt;, let's first try to understand what it exactly is, why do we use it, and do we need it (spoiler alert, it's not!). Express is the most popular web application framework which uses NodeJS. In MERN stack applications, Express's role is to manage our backend API server, the one from which we will be fetching data from a database via our React frontend.&lt;/p&gt;

&lt;p&gt;Express is used to listen to a particular port of our server for requests from the user or frontend in simpler terms. We can create different routes for each endpoint which the user accesses. Here's an example to make it clear what I'm talking about:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET https://ourwebsite.com/products     -&amp;gt; Fetches all products
GET https://ourwebsite.com/products/1   -&amp;gt; Fetches the product with ID of 1
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As the programmer, we design and build the routes to get the appropriate data from the right endpoint. That's what Express allows us to do quickly. Remember when I said Express is not precisely required? That's because we can use the core &lt;code&gt;http&lt;/code&gt; module that NodeJS provides us to create the routes that I mentioned above. Then why don't we use that? Because Express makes the whole developer experience much better.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Using http&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/products&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server running on port 5000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// Using express&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server running on port 5000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This was just an example, quite a simple one too. Express code is much more cleaner to read as well as write. Now, coming to things that you should learn concerning Express, as a MERN stack developer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Setting up an express server and listening on the desired port&lt;/li&gt;
&lt;li&gt;Create routes/endpoints for data CRUD operations through GET, POST, PUT, and DELETE&lt;/li&gt;
&lt;li&gt;Reading JSON form data sent from frontend via express.json() middleware&lt;/li&gt;
&lt;li&gt;Setting up an ODM like mongoose with Express&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bonus point for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Separating the logic in different files such as controllers, routes, and models&lt;/li&gt;
&lt;li&gt;Creating custom middlewares to handle errors and more&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#reactjs" class="anchor"&gt;
  &lt;/a&gt;
  ReactJS &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eg5C1aG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dh8m4lgft/image/upload/v1610649082/website-images/hdvjf63_hpkxyl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eg5C1aG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dh8m4lgft/image/upload/v1610649082/website-images/hdvjf63_hpkxyl.png" alt="ReactJS Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to become a frontend or a full stack web developer, the chances are that you've heard about JavaScript frameworks such as &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;, &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt;, or &lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt;. For now, let's focus on React: undeniably, the most popular JavaScript frontend library. We'll be having a brief look at Vue and Angular to discuss the MEVN and MEAN stack. But let's learn more about React for now.&lt;/p&gt;

&lt;p&gt;As mentioned above, it is a library created by Facebook that allows us to develop dynamic and interactive user interfaces on our websites efficiently. It offers dynamic interfaces using props (short for properties) and state in our web application. Moreover, it provides us with the ability to break down our code into smaller chunks, known as components, which make them more versatile. Components can be imported and used in multiple places in our web application, saving us time and energy to avoid rewriting the code with minor changes and keep our codebase DRY (don't repeat yourself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j-GpySHU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dh8m4lgft/image/upload/v1610649091/website-images/NNa3Zdp_yuvrld.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j-GpySHU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dh8m4lgft/image/upload/v1610649091/website-images/NNa3Zdp_yuvrld.png" alt="Components"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the best things about React is that you can use it to create single-page applications or SPAs for short. What's unique about SPAs is that we only have to load all our static assets like HTML, CSS, and JavaScript only once compared to traditional websites that reload and fetch new assets every time you visit a new page of a website. For routing, &lt;code&gt;react-router-dom&lt;/code&gt; is one of the most popular ways to do so. In a nutshell, load once and access the full website without ever reloading, unless you manually reload, duh!&lt;/p&gt;

&lt;p&gt;We can have a whole separate article to discuss React and what makes it so great. Since this is more of an overview of the MERN stack and not just React, I'll list down some of the features of React which you'll be using while developing web applications, and you should definitely learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating appropriate components and using props &lt;/li&gt;
&lt;li&gt;Write functional React code&lt;/li&gt;
&lt;li&gt;Commonly used &lt;a href="https://thesmartcoder.dev/awesome-react-hooks/"&gt;React hooks&lt;/a&gt; such as &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useEffect&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Managing props in a component through the &lt;code&gt;useState&lt;/code&gt; hook&lt;/li&gt;
&lt;li&gt;Conditional rendering&lt;/li&gt;
&lt;li&gt;Making API calls from the &lt;code&gt;useEffect&lt;/code&gt; hook to get data from the backend&lt;/li&gt;
&lt;li&gt;Making form inputs controlled and handling form submits&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, you sharpen your &lt;a href="https://thesmartcoder.dev/10-tips-and-tricks-that-will-make-you-a-better-reactjs-dev/"&gt;React skills&lt;/a&gt; with the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Managing  global state through Context API or Redux&lt;/li&gt;
&lt;li&gt;Learning the use cases of less common React hooks like &lt;code&gt;useRef&lt;/code&gt;, &lt;code&gt;useMemo&lt;/code&gt;, and more&lt;/li&gt;
&lt;li&gt;Using styled-components or other CSS in JS methods &lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#nodejs" class="anchor"&gt;
  &lt;/a&gt;
  NodeJS &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KaFnY9Go--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dh8m4lgft/image/upload/v1610649102/website-images/ySNPrgc_uaqeav.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KaFnY9Go--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dh8m4lgft/image/upload/v1610649102/website-images/ySNPrgc_uaqeav.png" alt="NodeJS Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, we complete the overview of the technologies that make up the MERN stack by exploring &lt;a href="https://nodejs.org/"&gt;NodeJS&lt;/a&gt;. First things first, what is NodeJS, and how is it different from JavaScript? Is it something different altogether; why do we use it in the first place; can't we use JavaScript instead? I'll try answering all these common questions in the upcoming paragraphs. But first, let's see what NodeJS is.&lt;/p&gt;

&lt;p&gt;NodeJS is a cross-platform JavaScript runtime environment that uses Google's V8 engine to run JavaScript code outside the browser. JavaScript intends to run on browsers, but we don't have browsers on our backend, do we? This is where NodeJS shines. It enables us to write JavaScript, which can run on our backend servers. But how does it achieve this? It uses something known as the V8 engine and libuv, a whole other topic.  Here's a visual representation of how the NodeJS architecture works in a nutshell:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9SfPa1dz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dh8m4lgft/image/upload/v1610649111/website-images/QRePV_pafdq1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9SfPa1dz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dh8m4lgft/image/upload/v1610649111/website-images/QRePV_pafdq1.jpg" alt="NodeJS Architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're interested in knowing more about the internal working of NodeJS, such as event loop and more, &lt;a href="https://www.youtube.com/watch?v=qG-PLm3APSs"&gt;here's&lt;/a&gt; an excellent video to get you started with.&lt;/p&gt;

&lt;p&gt;Coming back to the MERN stack, the purpose of NodeJS is simple. Allow us to write our backend in JavaScript, saving us the trouble of learning a new programming language capable of running the backend. It's an event-driven, non-blocking I/O model moreover. While there's not much specific to NodeJS that you have to learn to build a MERN stack application, here are some related things you should take a look at:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Initialising a npm package&lt;/li&gt;
&lt;li&gt;Installing npm packages through &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Importing and exports modules using commonJS &lt;/li&gt;
&lt;li&gt;Understanding the &lt;code&gt;package.json&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bonus points for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Accessing the filesystem using inbuilt &lt;code&gt;fs&lt;/code&gt; package&lt;/li&gt;
&lt;li&gt;Setting up a server with an inbuilt &lt;code&gt;http&lt;/code&gt; package (not required if using express)&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#combining-the-technologies-amp-exploring-how-it-works-together" class="anchor"&gt;
  &lt;/a&gt;
  Combining The Technologies &amp;amp; Exploring How It Works Together &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mIflcl1h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dh8m4lgft/image/upload/v1610649121/website-images/iLcOFkj_ficp97.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mIflcl1h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dh8m4lgft/image/upload/v1610649121/website-images/iLcOFkj_ficp97.png" alt="How It Works Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the previous section, we had a look at all the four technologies which constituted the MERN stack. While each one of them is fantastic to work with individually, combining these technologies working together like clockwork results in an excellent web application. That's what we're going to learn about in this section. Knowing each technology is half the skill, while the other half is to piece them together into something meaningful. What could be better than another visual representation of a MERN stack web application, where the user is interacting with the frontend, which in turn is accessing the backend and the database. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6dhuih8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dh8m4lgft/image/upload/v1610649351/website-images/Uowd7nz_dpyzws.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6dhuih8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dh8m4lgft/image/upload/v1610649351/website-images/Uowd7nz_dpyzws.png" alt="Block Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's understand the whole mechanism by taking an example. Assume that we have built a great e-commerce web application that sells apparel. We have a customer who is currently visiting our website to shop for some sneakers. We have a link on the landing page that takes the user to the sneakers page. So how do we get the data from the backend? Let's take it one step at a time.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;User visits our website's landing page built using React.&lt;/li&gt;
&lt;li&gt;User clicks on the link to shop for sneakers. We render the sneakers page without reloading the page since we have built a single page application.&lt;/li&gt;
&lt;li&gt;We do not have the sneakers data at this point, i.e., the state is empty. Therefore, we make an API call to our backend to fetch the data.&lt;/li&gt;
&lt;li&gt;Since the process of fetching the data from our database is asynchronous, meaning that it will take some amount of time for it to finish executing, we show the user a loading GIF while sneakers data is being retrieved.&lt;/li&gt;
&lt;li&gt;In our backend, ExpressJS looks at the endpoint (route) we've hit and executed the appropriate controller function, which is used to retrieve sneakers data. &lt;/li&gt;
&lt;li&gt;Inside this controller function, we use &lt;code&gt;mongoose&lt;/code&gt; to query our database and get the data and return it in the form of JSON (JavaScript Object Notation).&lt;/li&gt;
&lt;li&gt;This JSON data is sent back to our React frontend, where we can update the state with our newly fetched data.&lt;/li&gt;
&lt;li&gt;Since our state got updated, React will re-render the components which depend on it, and subsequently, we replace our loading GIF with the sneakers information.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And that's how all the technologies work together. Do not fret if you did not understand it entirely just yet. Since this mechanism is so commonly used, you will eventually understand and master it. Let us now talk about some things we are yet to cover, such as authentication, authorization, and state management.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Authentication&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most of the websites nowadays allow you to create a user account for yourself through sign-up and sign-in procedures. We want this functionality in our web application, don't we? Even the simplest of applications such as a to-do list can be made interesting if we can associate each to-do with the user who created it. So how do we authenticate a user? &lt;/p&gt;

&lt;p&gt;While signing up to a website, we essentially create a user with email and password fields and store them into our database. But here's a catch. It is a bad practice to store the user passwords in plaintext or as it is due to security reasons. To overcome this, we can hash the user passwords using some strong hashing algorithm to secure them. I use the &lt;code&gt;bcryptjs&lt;/code&gt; package from npm for this purpose.&lt;/p&gt;

&lt;p&gt;Another option is to use OAuth, such as Google OAuth, to sign up the user to our website using his/her Google account. This saves us the hassle of manually taking care of all the security measures but adds complexity to the project due to handling API keys for OAuth with care.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Authorization&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the simplest terms, authorization is to restrict some routes to only specific types of users. For example, we do not want a user who's not logged in to place an order since we need to bind the user to each order. Similarly, we do not wish for any random user to delete someone else's account. Such functionality should be only restricted to admins. And that is why we need authorization.&lt;/p&gt;

&lt;p&gt;We can restrict access to our backend API using some conditions to prevent misuse through authorization. One of the most popular ways to implement authorization is to use JSON Web Tokens, or JWT for short. Whenever a user registers or logs in, we send back a token to the user. With this token being passed into headers during future API calls, we can uniquely identify the user by encoding the user ID in the payload. This can help us check whether the user is logged in, is an admin, and determine which user is accessing the routes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;State Management&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As your website grows, it is problematic to manage your global state. The user who is logged in can be an example of global state. Why? Because this information or state might be needed in multiple components, such as a navigation bar, profile card, and much more. Since we need to keep our shared state consistent across all the components which use it, having component level state with &lt;code&gt;useState&lt;/code&gt; will not be feasible.&lt;/p&gt;

&lt;p&gt;Another solution might be to store the state in the top-most component and pass it to other components that require it as props. Even this approach is not recommended as you might have to pass the state as props to multiple components and multiple levels, even to the components that do not require the state to pass the state from top-level component to bottom-level components. &lt;/p&gt;

&lt;p&gt;This is why we can use Context API or Redux to maintain a global store of state from which we can access the state in all the components we require, without passing it as props. While some argue that Redux is not needed ever since Context API came out, I still find lots of codebases using it, and it might be a good idea to learn it.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-become-a-mern-stack-developer" class="anchor"&gt;
  &lt;/a&gt;
  How To Become a MERN Stack Developer? &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Phew! That was a lot to take in. But the good thing is that you don't need to memorize any of it. Developers learn by doing, not memorizing! With that being said, you must be wondering how to become a MERN stack developer. That will be the prime focus of this section, where I'll be providing you with my own roadmap that you can take inspiration from and start your journey, whether you are new to web development or just exploring other tech stacks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;New to Web Development:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you're new to web development or even programming in general, I would highly recommend giving yourself enough time and learning the basics first. This includes how the web works, HTML, CSS, and JavaScript at first. Once you're comfortable building static websites with them, you can either choose to learn a JavaScript framework like React or explore the backend path with NodeJS. The way you choose is up to you, but ultimately, you'll have to learn both of them. A fantastic way to sharpen your skills is by making &lt;a href="https://thesmartcoder.dev/9-awesome-projects-you-can-build-with-vanilla-javascript/"&gt;javascript projects for beginners&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My recommended learning path would be:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MmKoPoIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dh8m4lgft/image/upload/v1610649379/website-images/R4cjez6_t5kynm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MmKoPoIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dh8m4lgft/image/upload/v1610649379/website-images/R4cjez6_t5kynm.png" alt="Beginner Roadmap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we start with the basics, understanding the web, and delving into the frontend world, and starting with HTML, CSS and JavaScript so that you can build some awesome static websites such as landing pages with responsive design. Using a version control system like Git is pretty crucial since you'll be using it quite a lot in the future. Guess what? You're already good enough to look for some freelance work. &lt;/p&gt;

&lt;p&gt;Before writing some backend code, you should understand HTTP and the HTTP methods such as GET and POST. For the MERN stack, you'll use NodeJS in combination with ExpressJS to layout your backend. For interacting with your MongoDB database, you can use mongoose. Add a bit of authentication and authorization skills, and you're ready to build a full-stack web application. &lt;/p&gt;

&lt;p&gt;Finally, we return to the frontend and get our hands on React, a framework (technically, a library) that will take your websites and developer experience to the next level. You can see yourself building social network web apps, e-commerce web apps, and virtually any web app you want with the help of whatever you've learned so far. Exciting!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Experienced Developers Switching Tech Stack:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While the roadmap remains the same for even experienced developers, you can skip the HTML, CSS, and JavaScript parts. You may already be familiar with it and focus on grasping a good understanding of NodeJS how it works. Due to your previous knowledge of a different tech stack, I'm confident that you'll be able to adapt NodeJS pretty soon. Making careful decisions on how to better architecture your web app, optimizing it, and writing clean code will definitely give you an advantage over others. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#resources-amp-tools" class="anchor"&gt;
  &lt;/a&gt;
  Resources &amp;amp; Tools &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;A quick note&lt;/strong&gt;: You certainly do not watch each of these resources. Pick whatever you like the go with it. One of the mistakes that I made was that I kept switching between multiple resources due to the fear of missing out. Trust me, and you'll be fine. All of these resources are amazing and equally good. And you don't necessarily have to pick from just this list. A quick YouTube or Google search will also do.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Free Courses&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UC8butISFwT-Wl7EV0hUK0BQ"&gt;FreeCodeCamp YouTube Channel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;HTML, CSS and JavaScript:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=UB1O30fR-EE&amp;amp;list=PLillGF-RfqbZTASqIqdvm1R5mLrQq79CU"&gt;HTML &amp;amp; CSS Playlist by Brad Traversy&lt;/a&gt; - Crash courses &amp;amp; tons of awesome projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Xm4BObh4MhI"&gt;12HR+ YouTube Coding Bootcamp 2021! by Ania Kubow&lt;/a&gt; - Learn HTML, CSS and JavaScript in a single video.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=hu-q2zYwEYs&amp;amp;list=PL4cUxeGkcC9ivBf_eKCPIAYXWzLlPAm6G"&gt;HTML &amp;amp; CSS Playlist by The Net Ninja&lt;/a&gt; - Byte sized videos to keep your interested.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=hdI2bqOjy3c&amp;amp;list=PLillGF-RfqbbnEGy3ROiLWk7JMCuSyQtX"&gt;Vanilla JavaScript Playlist by Brad Traversy&lt;/a&gt; - Solidify your JavaScript knowledge with lots of projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=iWOYAxlnaww&amp;amp;list=PL4cUxeGkcC9haFPT7J25Q9GRB_ZkFrQAc"&gt;Modern JavaScript Playlist by The Net Ninja&lt;/a&gt; - Learn modern JavaScript including ES6&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=x2RNw4M6cME"&gt;JavaScript for Beginners Course (2020) by Colt Steele&lt;/a&gt; - Get yourself started with JavaScript in a couple of hours.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NodeJS, ExpressJS &amp;amp; MongoDB:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=fBNz5xF-Kx4&amp;amp;list=PLillGF-RfqbZ2ybcoD2OaabW2P7Ws8CWu"&gt;NodeJS Playlist by Brad Traversy&lt;/a&gt; - Gem of a resource for all things NodeJS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=zQRrXTSkvfw"&gt;NodeJS Crash Course by Dev Ed&lt;/a&gt; - Make learning NodeJS fun &lt;/p&gt;

&lt;p&gt;&lt;a href="//youtube.com/watch?v=vjf774RKrLc"&gt;Building a RESTful API with Express &amp;amp; MongoDB by Dev Ed&lt;/a&gt; - Learn to build a REST API &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=2jqok-WgelI"&gt;NodeJS Authentication with JWT by Dev Ed&lt;/a&gt; - Explore authentication and authorization&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=VELru-FCWDM"&gt;Introduction to MongoDB by Academind&lt;/a&gt; - Get yourself familiar with MongoDB&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=5QEwqX5U_2M"&gt;MongoDB + Mongoose + Node.js Crash Course by Codedamn&lt;/a&gt; - Teach yourself backend in an hour&lt;/p&gt;

&lt;p&gt;&lt;em&gt;React &amp;amp; Redux:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=j942wKiXFu8&amp;amp;list=PL4cUxeGkcC9gZD-Tvwfod2gaISzfRiP9d"&gt;Modern React Playlist by The Net Ninja&lt;/a&gt; - Byte sized, up to date React tutorials&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=O6P86uwfdR0&amp;amp;list=PLZlA0Gpn_vH8EtggFGERCwMY5u5hOjf-h"&gt;React Hooks Playlist by Web Dev Simplified&lt;/a&gt; - Learn all about React Hooks in a single playlist&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=15YB__vYpuA"&gt;React Crash Course 2020 by Codedamn&lt;/a&gt; - Understand React by building a big project&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=XuFDcZABiDQ&amp;amp;list=PLillGF-RfqbY3c2r0htQyVbDJJoBFE6Rb"&gt;React Projects Playlist by Traversy Media&lt;/a&gt; - Build amazing React projects&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=CVpUuw9XSjY"&gt;Redux for Beginners for Dev Ed&lt;/a&gt; - Get to know about Redux in a fun way&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=3sjMRS1gJys"&gt;Redux Explanation by Stephen Grider&lt;/a&gt; - One of the best explanations of Redux&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tools To Use&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://code.visualstudio.com/download"&gt;Visual Studio Code&lt;/a&gt; - Free, open source and one of the best text editors&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.figma.com/downloads/"&gt;Figma&lt;/a&gt; - The collaborative interface design tool&lt;/p&gt;

&lt;p&gt;&lt;a href="https://desktop.github.com/"&gt;GitHub Desktop&lt;/a&gt; - Desktop client for GitHub&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developers.google.com/web/tools/lighthouse"&gt;Google Lighthouse&lt;/a&gt; - Test your website's performance and SEO&lt;/p&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en"&gt;React Developer Tools&lt;/a&gt; - Chrome extension for testing React websites&lt;/p&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en"&gt;Redux DevTools&lt;/a&gt; - Chrome extension for testing Redux&lt;/p&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh?hl=en"&gt;JSON Viewer&lt;/a&gt; - Chrome extension for display JSON in a much more readable manner&lt;/p&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/whatruns/cmkdbmfndkfgebldhnkbfhlneefdaaip?hl=en"&gt;WhatRuns&lt;/a&gt; - Check what tech stack your favorite website uses&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt; - Test your APIs&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Design Resources&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bradtraversy/design-resources-for-developers"&gt;Design Resources for Developers&lt;/a&gt; - A repo full of tons of design resources&lt;/p&gt;

&lt;p&gt;&lt;a href="https://coolors.co/"&gt;Coolors&lt;/a&gt; - Generate color schemes with ease&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.grabient.com/"&gt;Grabient&lt;/a&gt; - Awesome gradient colors&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fonts.google.com/"&gt;Google Fonts&lt;/a&gt; - Fonts to use in your websites&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fontawesome.com/"&gt;FontAwesome&lt;/a&gt; - Collections of icon fonts&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#lets-look-at-the-alternatives" class="anchor"&gt;
  &lt;/a&gt;
  Let's Look at the Alternatives &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;There are many ways to achieve the same result when it comes to programming. Web development is no exception. Let's look at some popular alternatives to the MERN stack.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The MEVN Stack&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The MEVN stack uses Vue instead of React in the frontend. VueJS is an open-source JavaScript framework with over 175k+ stars on GitHub and is undoubtedly a popular choice. It is considered to be easier to learn than React, but since it falls behind a bit when it comes to the number of jobs available for Vue developers comparatively. However, the framework itself is incredible and worth trying. It's also not backed by any corporations, unlike React and Angular.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The MEAN Stack&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Talking of Angular, it is also a frontend framework that uses TypeScript instead of JavaScript to build web applications. It is arguably the hardest to learn compared to React and Vue but also used by lots of enterprises. It is developed by Google and focuses on high performance and MVC architecture.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#final-words" class="anchor"&gt;
  &lt;/a&gt;
  Final Words &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Being a developer is not easy. There are a lot of new advancements, frameworks, and technologies that keep coming out, and staying up to date is hard. Do not give in to the shiny object syndrome and believe in the process. Allow yourself to take time and make mistakes. We all learn from that. I hope this guide helped you to get started with the MERN stack. Good luck ahead!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to create a Jamstack pet store app using Stripe, Gatsbyjs, and Netlify functions</title>
      <author>Tapas Adhikary</author>
      <pubDate>Fri, 15 Jan 2021 05:58:23 +0000</pubDate>
      <link>https://dev.to/atapas/how-to-create-a-jamstack-pet-store-app-using-stripe-gatsbyjs-and-netlify-functions-1jfh</link>
      <guid>https://dev.to/atapas/how-to-create-a-jamstack-pet-store-app-using-stripe-gatsbyjs-and-netlify-functions-1jfh</guid>
      <description>&lt;p&gt;&lt;code&gt;Jamstack&lt;/code&gt; is a modern web development architecture based on client-side JavaScript, reusable APIs, and prebuilt Markup. One of the aspects of Jamstack is, it is practically serverless. To put it more clearly, we do not maintain any server-side applications. Rather, sites use existing services (like email, media, payment platform, search, and so on).&lt;/p&gt;

&lt;p&gt;Did you know, 70% - 80% of the features that once required a custom back-end can now be done entirely without it? In this article, we will learn to build a Jamstack e-commerce application that includes,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://stripe.com/docs/api"&gt;Stripe&lt;/a&gt;: A complete payment platform with rich APIs to integrate with.&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.netlify.com/products/functions/"&gt;Netlify Serverless Lambda Function&lt;/a&gt;: Run serverless lambda functions to create awesome APIs.&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.gatsbyjs.com/"&gt;Gatsbyjs&lt;/a&gt;: A React-based framework for creating prebuilt Markups.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-are-we-building-today" class="anchor"&gt;
  &lt;/a&gt;
  What are we building today?
&lt;/h1&gt;

&lt;p&gt;I love Cats üêà. We will build a pet store app called &lt;code&gt;Happy Paws&lt;/code&gt; for our customers to purchase some adorable Cats. Customers can buy cats by adding their details to the cart üõí and then finally checkout by completing the payment process üí≥.&lt;/p&gt;

&lt;p&gt;Here is a quick glimpse of the app we intend to build(This is my first ever youtube video with voice. üòç)&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/cpA43AVPesY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tldr" class="anchor"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h1&gt;

&lt;p&gt;In case you want to look into the code or try out the demo in advance, please find them here,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://github.com/atapas/catstore"&gt;GitHub Repository =&amp;gt; Source Code&lt;/a&gt;. Don't forget to give it a star if you find it useful.&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://happy-paws.netlify.app/"&gt;Demo&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Please note, Stripe is NOT available in all countries. Please check if &lt;a href="https://stripe.com/global"&gt;Stripe is available in your country&lt;/a&gt;. The Demo setup uses a test Stripe account created from the India region. Hence, it is guaranteed to work when accessed from India, and I hope it works elsewhere. However, that doesn't stop you from following the rest of the tutorial.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#create-the-project-structure" class="anchor"&gt;
  &lt;/a&gt;
  Create the Project Structure
&lt;/h1&gt;

&lt;p&gt;We will use a Gatsby starter to create the initial project structure. First, we need to install the Gatsby CLI globally. Open a command prompt and run this command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; gatsby-cli
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After this, use this command to create a gatsby project structure,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gatsby new happy-paws https://github.com/gatsbyjs/gatsby-starter-default
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once done, you will see a project folder called happy-paws has been created. Try these commands next,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;happy-paws
gatsby develop
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You should be able to access the interface using &lt;a href="http://localhost:8000/"&gt;http://localhost:8000/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lsv7lbtV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610350764226/JtAfU1l1j.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lsv7lbtV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610350764226/JtAfU1l1j.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="Gatsby Default Starter.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setup-netlify-functions" class="anchor"&gt;
  &lt;/a&gt;
  Setup Netlify Functions
&lt;/h1&gt;

&lt;p&gt;To set up netlify functions, stop the gatsby develop command if running. Install the &lt;code&gt;netlify-cli&lt;/code&gt; tool to run these functions locally.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; netlify-cli
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Create a file called &lt;code&gt;netlify.toml&lt;/code&gt; at the root of the project folder with the following content,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;build]
    functions &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"functions"&lt;/span&gt;

 &lt;span class="o"&gt;[[&lt;/span&gt;redirects]]
   from &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"/api/*"&lt;/span&gt;
   to &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"/.netlify/functions/:splat"&lt;/span&gt;
   status &lt;span class="o"&gt;=&lt;/span&gt; 200
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The above file will tell the &lt;a href="https://docs.netlify.com/routing/redirects/redirect-options/#splats"&gt;Netlify&lt;/a&gt; tool to pick up the functions from the &lt;code&gt;functions&lt;/code&gt; folder at the build time. By default, netlify functions will be available as an API and accessible using a URL prefix, &lt;code&gt;/.netlify/functions&lt;/code&gt;. This may not be very user friendly. Hence we want to use a redirect URL as, &lt;code&gt;/api/*&lt;/code&gt;. It means, a URL like  &lt;code&gt;/.netlify/functions/getProducts&lt;/code&gt; can now be accessed like, &lt;code&gt;/api/getProducts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, create a folder called &lt;code&gt;functions&lt;/code&gt; at the root of the project folder and create a &lt;code&gt;data&lt;/code&gt; folder inside it. Create a file called &lt;code&gt;products.json&lt;/code&gt; inside the &lt;code&gt;data&lt;/code&gt; folder with the following content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sku&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;001&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Brownie&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;She is adorable, child like. The cover photo is by Dorota Dylka from Unsplash.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://res.cloudinary.com/atapas/image/upload/v1604912361/cats/dorota-dylka-_VX-6amHgDY-unsplash_th9hg9.jpg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;key&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;brownie.jpg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;amount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;currency&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;USD&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sku&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;002&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Flur&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Flur is a Queen. The cover photo is by Milada Vigerova from Unsplash.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://res.cloudinary.com/atapas/image/upload/v1604829841/cats/milada-vigerova-7E9qvMOsZEM-unsplash_etgmbe.jpg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;key&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flur.jpg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;amount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;currency&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;USD&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we have added information about two pet cats. You can add as many as you want. Each of the cats is a product for us to sell. It contains information like SKU(a unique identifier common for product inventory management), name, description, image, amount, and the currency.&lt;/p&gt;

&lt;p&gt;Next, create a file called, &lt;code&gt;get-products.js&lt;/code&gt; inside the &lt;code&gt;functions&lt;/code&gt; folder with the following content,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./data/products.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is our first Netlify Serverless function. It is importing the products from the &lt;code&gt;products.json&lt;/code&gt; file and returning a JSON response. This function will be available as API and accessible using &lt;code&gt;/api/get-products&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Execute these commands from the root of the project to access this function,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;netlify login
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will open a browser tab to help you create an account with Netlify and log in using the credentials.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;netlify dev
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To run netlify locally on port &lt;code&gt;8888&lt;/code&gt; by default. Now the API will be accessible at &lt;a href="http://localhost:8888/api/get-products"&gt;http://localhost:8888/api/get-products&lt;/a&gt;. Open a browser and try this URL.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4KoT7An7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610351273712/68uOzRJeH.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4KoT7An7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610351273712/68uOzRJeH.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="localhost\_8888\_api_get-products.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The beauty of it is, the &lt;code&gt;gatsby&lt;/code&gt; UI is also available on the &lt;code&gt;http://localhost:8888&lt;/code&gt; URL. We will not access the user interface on the &lt;code&gt;8000&lt;/code&gt; port, and rather we will use the &lt;code&gt;8888&lt;/code&gt; port to access both the user interface and APIs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#fetch-products-into-the-ui" class="anchor"&gt;
  &lt;/a&gt;
  Fetch products into the UI
&lt;/h1&gt;

&lt;p&gt;Let us now fetch these products(cats) into the UI. Use this command from the root of the project folder to install a few dependencies first(you can use the npm install command as well),&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add axios dotenv react-feather
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now create a file called, &lt;code&gt;products.js&lt;/code&gt; inside &lt;code&gt;src/components&lt;/code&gt; with the following content,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ShoppingCart&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-feather&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./products.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setProducts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loaded&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoaded&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCart&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/get-products&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error loading shopnotes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;setProducts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;setLoaded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addToCart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sku&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Code to come here&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buyOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sku&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Code to come here&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;checkOut&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Code to come here&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;  

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cart&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;checkOut&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cart-icon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ShoppingCart&lt;/span&gt; 
                &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
                &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
                &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ff8c00&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
            &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cart-badge&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;loaded&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;products&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;product&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sku&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-image`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
                                &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt; 
                                &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;price&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/b&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;buyOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sku&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Buy&lt;/span&gt; &lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;addToCart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sku&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;Cart&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="p"&gt;))&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Products&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note, we are using the &lt;code&gt;axios&lt;/code&gt; library to make an API call to fetch all the products. On fetching all the products, we loop through and add the information like image, description, amount, etc. Please note, we have kept three empty methods. We will add code for them a little later.&lt;/p&gt;

&lt;p&gt;Add a file called &lt;code&gt;products.css&lt;/code&gt; inside the &lt;code&gt;src/components&lt;/code&gt; folder with the following content,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ff8c00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="m"&gt;2.5vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;800&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;90vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.products&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.product&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.product&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ff8c00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;800&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.cart&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;48px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;48px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.cart-badge&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-11px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-13px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FF6600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;19px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, replace the content of the file, &lt;code&gt;index.js&lt;/code&gt; with the following content,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../components/layout&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SEO&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../components/seo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Products&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../components/products&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;IndexPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SEO&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Happy Paws&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hey&lt;/span&gt; &lt;span class="nx"&gt;there&lt;/span&gt; &lt;span class="err"&gt;üëã&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Welcome&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;Happy&lt;/span&gt; &lt;span class="nx"&gt;Paws&lt;/span&gt; &lt;span class="nx"&gt;cat&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Get&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;Cat&lt;/span&gt; &lt;span class="err"&gt;üêà&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;feel&lt;/span&gt; &lt;span class="nx"&gt;awesome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;small&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;That&lt;/span&gt; &lt;span class="nx"&gt;means&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt; &lt;span class="nx"&gt;check&lt;/span&gt; &lt;span class="nx"&gt;out&lt;/span&gt; &lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://stripe.com/docs/testing#cards&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_blank&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;noreferrer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;any&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="nx"&gt;card&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/small&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Products&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Layout&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;IndexPage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;At this stage, start the netlify dev if it is not running already. Access the interface using &lt;a href="http://localhost:8888/"&gt;http://localhost:8888/&lt;/a&gt;. You should see the page like this,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nNFdcSMS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610351678332/apeSl1_Po.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nNFdcSMS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610351678332/apeSl1_Po.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="Initial_product_info.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It seems we have some problems with the Cat images. However, all other details of each of the cat products seem to be fine. To fix that, add two cat images of your choice under the &lt;code&gt;src/images&lt;/code&gt; folder. The images' names should be the same as the image key mentioned in the &lt;code&gt;functions/data/products.json&lt;/code&gt; file. In our case, the names are &lt;code&gt;brownie.jpg&lt;/code&gt; and &lt;code&gt;flur.jpg&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Edit the &lt;code&gt;src/components/Image.js&lt;/code&gt; file and replace the content with the following,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useStaticQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gatsby&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Img&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gatsby-image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;allImageSharp&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStaticQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="s2"&gt;`
    query {
      allImageSharp {
        nodes {
          fluid(maxWidth: 1600) {
            originalName
            ...GatsbyImageSharpFluid_withWebp
          }
        }
      }
    }
  `&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fluid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;allImageSharp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;originalName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;figure&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Img&lt;/span&gt; &lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fluid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/figure&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here we are using Gatsby‚Äôs sharp plugin to prebuilt the images. Now rerun the netlify dev command and access the user interface to see the correct images.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g4FS_A7d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610351797490/BWYHWah0V.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g4FS_A7d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610351797490/BWYHWah0V.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="with_cat.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A few more things, open the &lt;code&gt;src/components/Header.js&lt;/code&gt; file and replace the content with this,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gatsby&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prop-types&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;siteTitle&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;siteTitle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/header&amp;gt; &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propTypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;siteTitle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaultProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;siteTitle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;``&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now the header should look much better like,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VGI2wmgl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610351868274/vjdf4Zc81.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VGI2wmgl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610351868274/vjdf4Zc81.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="header-initial.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But, we want to change that default header text to something meaningful. Open the file &lt;code&gt;gatsby-config.js&lt;/code&gt; and edit the &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt; of the &lt;code&gt;siteMetaData&lt;/code&gt; object as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;siteMetadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Happy Paws - Cats love you!`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Cat store is the one point solution for your Cat`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will restart the Gatsby server. Once the server is up, you should see the header text changed to,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d09V6m8I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610351990137/9cYZ_cqtT.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d09V6m8I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610351990137/9cYZ_cqtT.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="header-final.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, let us do the required set up for the Netlify and Stripe integration.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setup-stripe" class="anchor"&gt;
  &lt;/a&gt;
  Setup Stripe
&lt;/h1&gt;

&lt;p&gt;Browse to the &lt;code&gt;functions&lt;/code&gt; folder and initialize a node project,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will create a file called package.json. Install dependencies using the command,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add stripe dotenv
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This command will install stripe and &lt;code&gt;dotenv&lt;/code&gt; library, which is required to manage the environment variables locally.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-your-stripe-test-credentials" class="anchor"&gt;
  &lt;/a&gt;
  Get your Stripe test credentials
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  Log into Stripe at &lt;a href="https://dashboard.stripe.com/login"&gt;https://dashboard.stripe.com/login&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  Make sure the ‚ÄúViewing test data‚Äù switch is toggled on&lt;/li&gt;
&lt;li&gt;  Click ‚ÄúDevelopers‚Äù in the left-hand menu&lt;/li&gt;
&lt;li&gt;  Click ‚ÄúAPI keys‚Äù.&lt;/li&gt;
&lt;li&gt;  Copy both the publishable key and secret key from the ‚ÄúStandard keys‚Äù panel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gu_UMA6s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610352296913/GYVuFsGBS.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gu_UMA6s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610352296913/GYVuFsGBS.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="Stripe_API_Keys.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a file called &lt;code&gt;.env&lt;/code&gt; at the root of the project with the following content,&lt;/p&gt;

&lt;p&gt;STRIPE_PUBLISHABLE_KEY= YOUR_STRIPE_PUBLISHABLE_KEY&lt;br&gt;
STRIPE_SECRET_KEY= YOUR_STRIPE_SECRET_KEY&lt;/p&gt;

&lt;p&gt;Note to replace the &lt;code&gt;YOUR_STRIPE_PUBLISHABLE_KEY&lt;/code&gt; and &lt;code&gt;YOUR_STRIPE_SECRET_KEY&lt;/code&gt; with the actual values got from the Stripe dashboard, respectively.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-a-checkout-function" class="anchor"&gt;
  &lt;/a&gt;
  Create a Checkout Function
&lt;/h2&gt;

&lt;p&gt;Next is to create a checkout function using netlify serverless and stripe. Create a file called &lt;code&gt;create-checkout.js&lt;/code&gt; with the following content under the &lt;code&gt;function&lt;/code&gt; folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stripe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stripe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STRIPE_SECRET_KEY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inventory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./data/products.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getSelectedProducts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;skus&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;selected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nx"&gt;skus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sku&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inventory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sku&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;sku&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;found&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;found&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getLineItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="na"&gt;images&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
      &lt;span class="na"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="na"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;skus&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getSelectedProducts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;skus&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validatedQuantity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lineItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getLineItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lineItems&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;stripe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checkout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sessions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;payment_method_types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;card&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;billing_address_collection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;auto&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;shipping_address_collection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;allowed_countries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;US&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CA&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;success_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/success`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;cancel_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;line_items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lineItems&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;sessionId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;publishableKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STRIPE_PUBLISHABLE_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note here we are expecting a payload with the selected product's SKU information. Upon getting that, we will take out other relevant information of the selected products from the inventory, i.e., &lt;code&gt;products.json&lt;/code&gt; file. Next, we create the line item object and pass it to the stripe API for creating a Stripe session. We also specify to delegate to a page called &lt;code&gt;success.html&lt;/code&gt; once the payment is successful.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ui-changes-for-checkout" class="anchor"&gt;
  &lt;/a&gt;
  UI Changes for Checkout
&lt;/h1&gt;

&lt;p&gt;The last thing we need to do now is to call the new serverless function from the UI. First, we need to install the stripe library for clients. Execute this command from the root of the project folder,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add @stripe/stripe-js
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Create a folder called utils under the &lt;code&gt;src&lt;/code&gt; folder. Create a file named &lt;code&gt;stripejs.js&lt;/code&gt; under &lt;code&gt;src/utils&lt;/code&gt; with the following content,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;loadStripe&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@stripe/stripe-js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;stripePromise&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getStripe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;publishKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;stripePromise&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;stripePromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;loadStripe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;publishKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;stripePromise&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;getStripe&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is to get the stripe instance globally at the client-side using a singleton method. Now open the &lt;code&gt;products.js&lt;/code&gt; file under &lt;code&gt;src/components&lt;/code&gt; to make the following changes,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Import&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;getStripe&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="err"&gt;‚Äò&lt;/span&gt;&lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;stripejs&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Time to add code for the functions &lt;code&gt;addToCart&lt;/code&gt;, &lt;code&gt;byuOne&lt;/code&gt;, and &lt;code&gt;checkOut&lt;/code&gt; as we left them empty before.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addToCart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sku&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;setCart&lt;/span&gt;&lt;span class="p"&gt;([...&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sku&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buyOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sku&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;skus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="nx"&gt;skus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sku&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="na"&gt;skus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;skus&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;performPurchase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;checkOut&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Checking out...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="na"&gt;skus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cart&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nx"&gt;performPurchase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Check out has been done!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Last, add the function &lt;code&gt;performPurchase&lt;/code&gt;, which will actually make the API call when the Buy Now or Checkout buttons are clicked.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;performPurchase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/create-checkout&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;response&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stripe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getStripe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publishableKey&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;stripe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirectToCheckout&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;sessionId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sessionId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now restart netlify dev and open the app in the browser, &lt;a href="http://localhost:8888"&gt;http://localhost:8888&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can start the purchase by clicking on the Buy Now button or add the products to the cart and click on the cart icon at the top right of the page. Now the stripe session will start, and the payment page will show up,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p_UzCj_h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610352759467/RnTuAb7tE.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p_UzCj_h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610352759467/RnTuAb7tE.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="payment_details.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Provide the details and click on the Pay button. Please note, &lt;a href="https://stripe.com/docs/testing#cards"&gt;you can get the test card information from here&lt;/a&gt;. The payment should be successful, and you are supposed to land on a success page as we have configured previously. But we have not created a success page yet. Let‚Äôs create one.&lt;/p&gt;

&lt;p&gt;Create a file called &lt;code&gt;success.js&lt;/code&gt; under the &lt;code&gt;src/pages&lt;/code&gt; folder with the following content,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Layout&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../components/layout&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SEO&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../components/seo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Success&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Layout&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SEO&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cat Store - Success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Yo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Thank&lt;/span&gt; &lt;span class="nx"&gt;You&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://media.giphy.com/media/b7ubqaIl48xS8/giphy.gif&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dancing cat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Layout&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Success&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Complete the payment to see this success page in action after a successful payment,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SOXVizxC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610352879312/RFnap2tXz.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SOXVizxC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610352879312/RFnap2tXz.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="success.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great, we have the Jamstack pet store app running using the Netlify serverless functions, Stripe Payment API, and Gatsby framework. But it is running locally. Let us deploy it using Netlify Hosting to access it publicly.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#deploy-and-host-on-netlify-cdn" class="anchor"&gt;
  &lt;/a&gt;
  Deploy and Host on Netlify CDN
&lt;/h1&gt;

&lt;p&gt;First, commit and push all the code to your GitHub repository. Login to your netlify account from the browser and click on the ‚ÄòNew site from Git‚Äô button. Select the option GitHub from the next page,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KQDlBxvi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610352929789/fEkqF1_1r.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KQDlBxvi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610352929789/fEkqF1_1r.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="netlify\_1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Search and select your GitHub repository to deploy and host,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KUJsbArQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610352947165/C_NYh4xXN.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KUJsbArQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610352947165/C_NYh4xXN.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="netlify\_2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, provide the build options as shown below and click on the ‚ÄòDeploy Site‚Äô button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XspmVkAy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610352970846/K6sCavqz5.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XspmVkAy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610352970846/K6sCavqz5.png%3Fborder%3D1%2CCCCCCC%26auto%3Dcompress" alt="netlify\_3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That‚Äôs all, and you should have the site live with the app.&lt;/p&gt;

&lt;p&gt;Congratulations üéâ !!! You have successfully built a Jamstack pet shop application with Netlify Serverless functions, Stripe APIs, Gatsby framework, and deployed it on Netlify CDN.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#before-we-end" class="anchor"&gt;
  &lt;/a&gt;
  Before we end...
&lt;/h1&gt;

&lt;p&gt;Thank you for reading this far! Let‚Äôs connect. You can @ me on &lt;a href="https://twitter.com/tapasadhikary"&gt;Twitter (@tapasadhikary)&lt;/a&gt; with comments, or feel free to follow. Please like/share this article so that it reaches others as well.&lt;/p&gt;

&lt;p&gt;Do not forget to check out my previous articles on &lt;code&gt;Jamstack&lt;/code&gt;,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://blog.greenroots.info/jamstack-for-all-an-introduction-cke2fxc5800jvabs15lhn4a9x"&gt;JAMstack for All: An Introduction&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://blog.greenroots.info/jamstack-vs-traditional-monolithic-workflow-cke6wmr0o00tzxms1dkid7so5"&gt;JAMstack vs traditional monolithic workflow&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://blog.greenroots.info/what-is-a-static-site-generator-and-how-to-select-one-cke9xtx5g006p58s11dzg2j16"&gt;What is a Static Site Generator and how to select one?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://blog.greenroots.info/hey-i-have-made-a-demolab-using-jamstack-ckeeiohqp0032f7s15c4c3ro6"&gt;Hey, I have made a demo lab using JAMstack&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#other-articles-of-mine-that-you-might-like" class="anchor"&gt;
  &lt;/a&gt;
  Other articles of mine that you might like
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.greenroots.info/3-quick-ways-to-add-fonts-to-your-react-app"&gt;3 quick ways to add fonts to your React app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.greenroots.info/the-definitive-guide-to-javascript-debugging-2021-edition"&gt;The definitive guide to JavaScript Debugging [2021 Edition]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.greenroots.info/princess-finder-using-react-ml5js-and-teachable-machine-learning"&gt;Princess Finder using React, ml5.js, and Teachable Machine Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.greenroots.info/how-to-create-react-form-with-a-single-change-event-handler"&gt;How to create React form with a single change event handler?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.greenroots.info/ive-completed-a-hackfest-project-here-is-what-ive-learned"&gt;I've completed a HackFest project, here is what I've learned&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>jamstack</category>
      <category>javascript</category>
      <category>react</category>
      <category>programming</category>
    </item>
    <item>
      <title>What is a TCP?</title>
      <author>chinedu | ddevguys</author>
      <pubDate>Fri, 15 Jan 2021 03:06:48 +0000</pubDate>
      <link>https://dev.to/chinedu/what-is-a-tcp-3gc6</link>
      <guid>https://dev.to/chinedu/what-is-a-tcp-3gc6</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bKmhVqtd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610677751641/y4kRPtojo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bKmhVqtd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1610677751641/y4kRPtojo.png" alt="stacks post HEADING (6).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I decided to write about something a little bit fun something that‚Äôs not data structures and algorithms, guys pls if you find value in this and love this sort of content do let me know.&lt;/p&gt;

&lt;p&gt;Today we are going to talk about TCP this would be an overview from a software engineering perspective. &lt;/p&gt;

&lt;p&gt;Let‚Äôs go‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What‚Äôs is TCP?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TCP stands for (transmission control protocol).  &lt;/p&gt;

&lt;p&gt;TCP and UDP are both layer 4(Transport Layer) protocols of the OSI Model. &lt;/p&gt;

&lt;p&gt;TCP allows for transmission of information in both directions. This means that computer systems that communicate over TCP can send and receive data at the same time making use of the IP address and port&lt;/p&gt;

&lt;p&gt;TCP is used in a lot of applications example: databases, secure chatting apps, etc. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let‚Äôs see some examples of TCP in real-life‚Ä¶&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;HTTP (world wide web)&lt;br&gt;
SSH (Secure Shell)&lt;br&gt;
E-mail (SMTP TCP)&lt;br&gt;
File Transfer Protocol (FTP)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why is TCP used&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TCP was created so that it would be a reliable, and straightforward way to pass data around without ending up with a scrambled or lost data, this way software engineers do not need to write code to handle this situation. Thereby allowing them to focus on application logic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let‚Äôs look at some characteristics Advantages of TCP.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Acknowledgment/Confirmation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs use an example to explain this. Due to the unreliability of the internet, a lot of things can happen to data on transit from client to server. &lt;/p&gt;

&lt;p&gt;We need some sort of confirmation that the data we have sent has gotten to its destination. &lt;/p&gt;

&lt;p&gt;TCP is able to do this by attaching additional information to the data that‚Äôs being sent.&lt;br&gt;
If our client doesn‚Äôt receive this confirmation it doesn‚Äôt accept the data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Retransmission&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In a situation where our client did not receive a confirmation from the server the TCP (transmission control protocol) does the job of informing the server that the data wasn‚Äôt received so that the data is resent.&lt;/p&gt;

&lt;p&gt;This is called RETRANSMISSION where it keeps sending the data until it knows that we have received it.&lt;/p&gt;

&lt;p&gt;This is often a tradeoff. Because of the guaranteed delivery capability of TCP, it tends to be slow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connection&lt;/strong&gt;&lt;br&gt;
For a client to communicate with the server, a unique connection is needed. TCP uses the IP to establish a stateful connection.&lt;/p&gt;

&lt;p&gt;This is why it is able to carry out retransmission and acknowledgment/confirmation. This is how the server knows that it has a client that it needs to send data to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Congestion control mechanism&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The TCP stops once there is a lot of traffic and waits for when there is less traffic then it resumes sending the data.&lt;/p&gt;

&lt;p&gt;This is because on the internet there is a lot of packets/information/data going around, so our packets get delayed when the server is overwhelmed.&lt;/p&gt;

&lt;p&gt;This happens when a lot of people are sending packets all over the internet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Packets Ordering&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because the internet does not guarantee that the packets you send would be received in an orderly manner.&lt;/p&gt;

&lt;p&gt;TCP has the capability of ordering our packets, by adding identifiers to our packets or data, so this is what it does to enable it to order our packets.&lt;/p&gt;

&lt;p&gt;An example of this would be sending a long-detailed email to a friend, what TCP does, in this case, is to break this data into smaller pieces and then orders them. &lt;/p&gt;

&lt;p&gt;This helps them to arrive on the server in an orderly manner and prevents unnecessary data loss.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let‚Äôs see some characteristics Disadvantages of TCP.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Large Packet size&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TCP usually ends up with larger packet sizes, this is due to all the extra identifiers and informations it adds to the data that it sends. &lt;/p&gt;

&lt;p&gt;These identifiers help it achieve retransmission, packet ordering, congestion control, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Larger Bandwidth&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With larger packet size comes more bandwidth.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Slow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The delay involved with TCP is due to things like packet ordering, congestion control, retransmission, acknowledgment/confirmation, etc. Basically the advantages of the TCP are the actually things that makes it slow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stateful&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TCP is stateful, this is because the server and client carries info information about the connection.&lt;/p&gt;

&lt;p&gt;So, if in any way the server or client is closed our connection is lost.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Server memory&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The server stacks up the TCP connection and allocates memory for each of these connections. &lt;/p&gt;

&lt;p&gt;The server has to keep listening so that it knows when it receives data from any part of the connection.&lt;/p&gt;

&lt;p&gt;This is possible because of the statefulness and connection-based characteristics of the TCP.&lt;/p&gt;

&lt;p&gt;So, in a situation when someone tries to establish a connection to the server using the TCP. &lt;/p&gt;

&lt;p&gt;Due to the fact that the server does some kind of waiting, because of the connection, acknowledgment/confirmation, retransmission, guaranteed delivery, packet ordering and congestion control, a bad-client uses these features against the server to create a kind of DENIAL OF SERVICE attack (DOS).&lt;/p&gt;

&lt;p&gt;So, this bad client keeps sending a connections request, without letting the server go through the normal process of acknowledgment, retransmission, etc.&lt;/p&gt;

&lt;p&gt;This keeps the server waiting until there is a timeout, and the server crashes, this is a very simple explanation of how DOS is perpetuated.&lt;/p&gt;

&lt;p&gt;The layer 4 or otherwise called the transport layer also has another transport protocol called UDP (User Datagram protocol). &lt;/p&gt;

&lt;p&gt;In another article we would be touching in this. &lt;/p&gt;

&lt;p&gt;Until then stayed tuned!!!&lt;/p&gt;

&lt;p&gt;With this, we have come to the end of this article.&lt;/p&gt;

&lt;p&gt;Guys as always thanks for being here with me. I really appreciate it. &lt;/p&gt;

&lt;p&gt;And if you found any sort of value in this please leave a comment share it on Twitter it really does help get the word out so that other devs can find value in it.&lt;/p&gt;

&lt;p&gt;Once again thank you for sparing the time to read this article. &lt;/p&gt;

&lt;p&gt;If you‚Äôd love me to implement a TCP server using NodeJS. &lt;/p&gt;

&lt;p&gt;Do let me know and I will do just that.&lt;/p&gt;

&lt;p&gt;Much Love.‚ù§‚ù§‚ù§&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>java</category>
      <category>go</category>
      <category>python</category>
    </item>
    <item>
      <title>5 non-programming skills for a software developer to learn  in 2021</title>
      <author>Isabel Nyo</author>
      <pubDate>Fri, 15 Jan 2021 00:44:00 +0000</pubDate>
      <link>https://dev.to/eisabai/5-non-programming-skills-to-learn-for-a-software-developer-in-2021-3l78</link>
      <guid>https://dev.to/eisabai/5-non-programming-skills-to-learn-for-a-software-developer-in-2021-3l78</guid>
      <description>&lt;p&gt;Learning new skills is part of a software developer's role due to the frequent changes and advancements in technology and frameworks. I personally know quite a few developers who are learning Rust right now. &lt;/p&gt;

&lt;p&gt;However, just learning programming skills isn't enough if you want to succeed and &lt;a href="https://eisabainyo.net/weblog/category/articles/software-engineer-career-growth/"&gt;get ahead in your software developer's career&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Let me tell you why. &lt;/p&gt;

&lt;p&gt;The future is going to be filled with software developers, who are working from anywhere, any time, almost independently, using async communication and technology. Therefore, to be an efficient and effective software developer in the future, first and foremost, they need to have T-shaped skills. What‚Äôs a T-shaped skills, I hear you ask. According to Wikipedia, it‚Äôs described as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The concept of T-shaped skills, or T-shaped persons is a metaphor used in job recruitment to describe the abilities of persons in the workforce. The vertical bar on the letter T represents the depth of related skills and expertise in a single field, whereas the horizontal bar is the ability to collaborate across disciplines with experts in other areas and to apply knowledge in areas of expertise other than one‚Äôs own.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;/blockquote&gt;

&lt;p&gt;For example, in the case of a software developer, the vertical bar on the letter T is the technical and software development skills that the person possesses, either through formal qualification like an undergraduate degree in Computer Science, Information Systems and the likes, or through experiences like working as a software engineer or web developer, or both. The horizontal bar on the letter T is the more nuanced part of the T-shaped skills, which is the breath of skills in adjacent domains such as product management, design, user experience and so on.&lt;/p&gt;

&lt;p&gt;Without any further ado, here are 5 non-programming skills that software developers should learn in 2021.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Analytics&lt;/li&gt;
&lt;li&gt;Visual Design&lt;/li&gt;
&lt;li&gt;Presentation&lt;/li&gt;
&lt;li&gt;Writing&lt;/li&gt;
&lt;li&gt;Psychology&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#analytics" class="anchor"&gt;
  &lt;/a&gt;
  Analytics
&lt;/h3&gt;

&lt;p&gt;I am using the term Analytics very loosely and broadly here as it includes all kinds of metrics and measurements. Firstly, it‚Äôs important for a software developer to have a very good understanding of their own performance and throughput. Secondly, business metrics such as customer acquisition, engagement on features, conversion and so on are important for a software developer so that they can make trade-off decisions when prioritising work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visual-design" class="anchor"&gt;
  &lt;/a&gt;
  Visual Design
&lt;/h3&gt;

&lt;p&gt;A picture is worth a thousand words. As software developers start dealing and working with people from different disciplines in an async mode rather than face to face communication, visual communication will become a medium where it‚Äôs the quickest and most effective way to achieve a shared understanding across all disciplines. This is due to how our human brains work. According to researched complied by 3M, the corporation behind Post-it Notes, visuals are processed 60,000 times faster than text, which means you can get everyone on the same page quicker by painting a picture, literally.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#presentation" class="anchor"&gt;
  &lt;/a&gt;
  Presentation
&lt;/h3&gt;

&lt;p&gt;Whether you call it presentation or public speaking, the gist of this skill lies being able to convey information effectively to an audience and getting them to produce an outcome that you need from them; whether it‚Äôs about getting a buy-in from stakeholders on a project, inspiring others to take on a new initiative, or educating your counterparts on technical details of your craft, having a solid presentation skill will help you do your job make more impact in your role.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing" class="anchor"&gt;
  &lt;/a&gt;
  Writing
&lt;/h3&gt;

&lt;p&gt;Being able to communicate effectively is one of the essential skills for software developers, more than you think. In this day and age where remote work is the norm, async written communication is a recommended medium. Whether it‚Äôs emails, memos, blog posts or documentation, it‚Äôs necessary to keep your content crisp, clear and engaging.&lt;/p&gt;

&lt;p&gt;Writing is one of those skills that you get better with deliberate and consistent practice. I can say this with certainty because English isn‚Äôt my first language and I didn‚Äôt even start speaking English or writing more than 10 English words every day until I was 15. My usual advice for developers to hone their writing skill is by &lt;a href="https://eisabainyo.net/weblog/2020/09/03/compelling-reasons-for-software-developers-to-start-a-blog/"&gt;starting a blog&lt;/a&gt;. If you are not comfortable to start a blog straight away yet, start by committing to writing 100 words a day for a month about your day. You don‚Äôt need to share this with anyone if you don‚Äôt want to. And then challenge yourself to write 300 words a day the next month, 500 words the month after, until you get comfortable enough to start your own blog or start writing on Medium.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#psychology" class="anchor"&gt;
  &lt;/a&gt;
  Psychology
&lt;/h3&gt;

&lt;p&gt;One of the reasons why software developers sometimes make bad team members is they think logically, sometimes too logically. You can‚Äôt expect people to be always logical, reasonable, and to act according to your predefined assumptions. You can‚Äôt create an if-then-else statements around real-life problems and execute them repeatedly, expecting the same answer or reaction every time. So having the ability to hack into people‚Äôs minds becomes a useful skill to have as you will be able to more attune to unique needs of your colleagues, managers and stakeholders, understand what makes them tick and work with them effectively.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-future-of-work-is-here" class="anchor"&gt;
  &lt;/a&gt;
  The future of work is here
&lt;/h2&gt;

&lt;p&gt;The technology industry is one of the fastest growing industries today. The future of work has arrived for software developers. I know for a fact that it is different than work we know previously and thus requires different mindsets and skills from software developers to be effective in their role. What‚Äôs more ‚Äî it is estimated that sixty percent of all new jobs in the twenty-first century will require skills that only twenty percent of the current workforce possesses. What this means is that you will need to be flexible, adaptable and always be learning and growing in your career to thrive in the future of work. So build these T-shaped skills and set yourself up for success in your role today and beyond!&lt;/p&gt;

</description>
      <category>career</category>
      <category>learning</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The Top 6 Frontend Trends and Predictions for 2021 and Resources to Master Them</title>
      <author>Roberto Hernandez</author>
      <pubDate>Fri, 15 Jan 2021 00:22:02 +0000</pubDate>
      <link>https://dev.to/blarzhernandez/the-top-6-frontend-trends-and-predictions-for-2021-and-resources-to-master-them-3lgj</link>
      <guid>https://dev.to/blarzhernandez/the-top-6-frontend-trends-and-predictions-for-2021-and-resources-to-master-them-3lgj</guid>
      <description>&lt;p&gt;&lt;strong&gt;Originally published on my frontend blog &lt;a href="https://www.mullinstack.com/2021/01/14/the-top-6-frontend-trends-and-predictions-for-2021/"&gt;MullinStack&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Happy New Year, dear reader! I love frontend tech. So at the end or the beginning of every single year, it has become a tradition to bring up the top frontend trends and predictions for the incoming year.&lt;/p&gt;

&lt;p&gt;2021‚Äôs turn has come!&lt;/p&gt;

&lt;p&gt;The real intention of this is to make you aware of trends and help you understand how they will play in the frontend landscape as well as the impact they will have on your development journey and career.&lt;br&gt;
Without further ado, let's dive in!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#where-do-these-predictions-and-trends-come-from" class="anchor"&gt;
  &lt;/a&gt;
  Where Do These Predictions and Trends Come From?
&lt;/h1&gt;

&lt;p&gt;I am not a wizard, my friend. All the trends and predictions that we are going to talk about and highlight here come from reliable sources such as the &lt;a href="https://insights.stackoverflow.com/survey/2020"&gt;Stack Overflow Survey&lt;/a&gt;, &lt;a href="https://2019.stateofjs.com/"&gt;State of JS&lt;/a&gt;, &lt;a href="https://tsh.io/state-of-frontend/#developers"&gt;State of Frontend&lt;/a&gt;, my own experience, and frontend experts‚Äô opinions.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-javascript-will-continue-its-reign" class="anchor"&gt;
  &lt;/a&gt;
  1. JavaScript Will Continue Its Reign
&lt;/h1&gt;

&lt;p&gt;Every single year, JavaScript becomes stronger. According to the &lt;a href="https://insights.stackoverflow.com/survey/2020#most-popular-technologies"&gt;2020 Stack Overflow Developer Survey&lt;/a&gt;, JavaScript has been the most known and studied programming language in the world for eight consecutive years.&lt;/p&gt;

&lt;p&gt;Based on that, I think JavaScript will remain at its peak in 2021 and continue its reign for many more years.&lt;/p&gt;

&lt;p&gt;That is really good because every single day, there are more and more development services that require JavaScript skills. This means more and more job opportunities.&lt;/p&gt;

&lt;p&gt;As a result, it has increased its usage, so more and more people are either just starting out with it or going deeper into it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-learn-it-the-right-way" class="anchor"&gt;
  &lt;/a&gt;
  How to learn it the right way
&lt;/h2&gt;

&lt;p&gt;Here is a list of valuable resources to learn it. Even though most of them are for those who are just starting out, it can‚Äôt hurt for more seasoned developers to take a look at them too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#books-and-github-repositories" class="anchor"&gt;
  &lt;/a&gt;
  Books and GitHub repositories
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/getify/You-Dont-Know-JS"&gt;You don't know JS Yet 2nd Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742"&gt;JavaScript: The Good Parts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eloquentjavascript.net/"&gt;Eloquent Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ryanmcdermott/clean-code-javascript"&gt;Clean Code JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#free-javascript-courses" class="anchor"&gt;
  &lt;/a&gt;
  Free JavaScript courses
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.codecademy.com/learn/introduction-to-javascript"&gt;Learn Javascript ‚Äî Codecademy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/javascript-essentials/"&gt;Javascript Essentials ‚Äî Udemy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#2-serverside-rendering-ssr-and-static-site-generators-ssg" class="anchor"&gt;
  &lt;/a&gt;
  2. Server-Side Rendering (SSR) and Static Site Generators (SSG)
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lPG8kLsD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2Abn3z83UxGDg3o9nLJZl7OQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lPG8kLsD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2Abn3z83UxGDg3o9nLJZl7OQ.png" alt="Gatsby stats from npmtrends.com.&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Web development changed forever with the emergence of Single Page Applications (SPAs). We have been witness to how they made the web more dynamic and powerful.&lt;/p&gt;

&lt;p&gt;However, SPAs have one big limitation. They are not friends with Search Engine Optimization (SEO). They weren't thought to work well with search engines.&lt;/p&gt;

&lt;p&gt;That is a killer ‚Äî especially when it comes down to SEO. This really matters if you want to have a strong online presence nowadays.&lt;/p&gt;

&lt;p&gt;SEO is crucial for all online businesses. In recent years, we have noticed how important it is for bloggers, writers, content creators, etc. They are hungry to leverage SEO.&lt;/p&gt;

&lt;p&gt;The creators of solutions like Next.js and Gatsby saw this problem and took steps to solve it. Here is where the server-side rendering (Next.js) and static site rendering (Gatsby) came up.&lt;/p&gt;

&lt;p&gt;In 2021, both Gatsby and Next.js will continue growing in both usage and popularity.&lt;/p&gt;

&lt;p&gt;Having said that, I bet that Gatsby will continue its domination in the static site rendering space.&lt;/p&gt;

&lt;p&gt;This is mainly because it offers a great developer experience. According to &lt;a href="https://w3techs.com/technologies/report/cm-gatsby"&gt;the W3 Techs Technology Market Report (May 2020)&lt;/a&gt;, Gatsby is the single fastest-growing framework.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-learn-gatsbyjs" class="anchor"&gt;
  &lt;/a&gt;
  How to learn GatsbyJS
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gatsbyjs.com/docs/tutorial/"&gt;GatsbyJS official documentation ‚Äî Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/gatsby-tutorial-and-projects-course/"&gt;Gatsby Tutorial and Projects Course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Gatsby JS &amp;amp; Shopify: Gatsby e-commerce sites &lt;a href="https://www.udemy.com/course/gatsby-ecommerce-shopify/"&gt;2020&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-learn-nextjs" class="anchor"&gt;
  &lt;/a&gt;
  How to learn Next.js
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://nextjs.org/learn/basics/create-nextjs-app"&gt;Official Documentation&lt;/a&gt;
-&lt;a href="https://www.udemy.com/course/awesome-nextjs-with-react-and-node-amazing-portfolio-app/"&gt;Complete Next.js with React &amp;amp; Node ‚Äî Beautiful Portfolio App&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#3-typescript-will-be-adopted-more-and-more" class="anchor"&gt;
  &lt;/a&gt;
  3. TypeScript Will Be Adopted More and More
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_YE9vg4u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AIaONj0dgUun3B68A10z9Cw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_YE9vg4u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AIaONj0dgUun3B68A10z9Cw.png" alt="Credit: GitHub 2020 State of the Octoverse report&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;br&gt;
Credit: GitHub 2020 State of the Octoverse report&lt;/p&gt;

&lt;p&gt;If you want to write more readable, cleaner, and maintainable code, you definitely will have to use TypeScript.&lt;/p&gt;

&lt;p&gt;TypeScript brings all power of the object-oriented paradigm: interfaces, classes, enums, and generics as well as support for static typing and modules.&lt;/p&gt;

&lt;p&gt;Those have been the main reasons people have found TypeScript so powerful in recent years. As a result, it brought a huge growth in popularity and usage.&lt;/p&gt;

&lt;p&gt;According to the latest &lt;a href="https://insights.stackoverflow.com/survey/2020#most-loved-dreaded-and-wanted"&gt;Stack Overflow survey&lt;/a&gt;, 61.7% of respondents named TypeScript the most loved programming language. In fact, it is in second place on the list.&lt;/p&gt;

&lt;p&gt;That means that those people are strongly interested in continuing to use it.&lt;/p&gt;

&lt;p&gt;In addition, in &lt;a href="https://octoverse.github.com/"&gt;GitHub‚Äôs 2020 State of the Octoverse report&lt;/a&gt;, you can clearly see the exponential growth of TypeScript over the last four years.&lt;/p&gt;

&lt;p&gt;With Microsoft being the boss behind TypeScript, we can expect that it will continue enhancing all its capabilities in 2021.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-learn-it-the-right-way" class="anchor"&gt;
  &lt;/a&gt;
  How to learn it the right way
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/intro.html"&gt;The TypeScript handbook (official doc)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/understanding-typescript/"&gt;Understanding TypeScript: 2021 Edition by the sensei Maximilian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.udemy.com/course/typescript-the-complete-developers-guide/"&gt;Typescript: The Complete Developer‚Äôs Guide [2020]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://frontendmasters.com/courses/typescript-v2/"&gt;TypeScript 3 Fundamentals, v2 ‚Äî FrontendMaster.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://frontendmasters.com/courses/intermediate-react-v2/"&gt;Intermediate React, v2 by Brian Holt ‚Äî (if you are a React dev or you just want to combine React + TypeScript)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#4-react-will-continue-its-hegemony" class="anchor"&gt;
  &lt;/a&gt;
  4. React Will Continue Its Hegemony
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JgqfsVQE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AuNqfoDYLs36LWHWQjeFCXA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JgqfsVQE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AuNqfoDYLs36LWHWQjeFCXA.png" alt="Credit: Stack Overflow survey&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;br&gt;
Credit: &lt;a href="https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-web-frameworks-loved2"&gt;Stack Overflow survey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There‚Äôs no doubt that React will continue its dominance among JavaScript frameworks and libraries in 2021.&lt;/p&gt;

&lt;p&gt;That hegemony will continue despite the fast growth and popularity of the next-generation reactive frameworks like Vue.js, Svelte, and Stencil.&lt;/p&gt;

&lt;p&gt;For sure, there is a significant rise in the usage of those reactive frameworks. But if we rely on the data, &lt;a href="https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-web-frameworks-loved2"&gt;the latest Stack Overflow survey&lt;/a&gt; indicates that React was the most loved web framework, with 68.9% of respondents using it or having an interest in using it in the near future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#npm-frontend-framework-trends" class="anchor"&gt;
  &lt;/a&gt;
  NPM frontend framework trends
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sb5eXVau--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2400/1%2ACzxYP3TYqZwiL-xEumNAZQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sb5eXVau--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2400/1%2ACzxYP3TYqZwiL-xEumNAZQ.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
Credit: &lt;a href="https://www.npmtrends.com/react-vs-vue-vs-@angular/core"&gt;NPM trends&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see in this NPM graph, React has grown over the rest of the frameworks in a considerable way. The data is basically the number of downloads of each framework over the last five years.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-growth-of-vuejs-is-overwhelming-too" class="anchor"&gt;
  &lt;/a&gt;
  The growth of Vue.JS is overwhelming too
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--skEnHk3e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AiE-_lMclhHamhessEfDeaQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--skEnHk3e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AiE-_lMclhHamhessEfDeaQ.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
Credit: &lt;a href="https://www.npmtrends.com/react-vs-vue-vs-@angular/core"&gt;NPM trends&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Despite the fact that the number of Vue.js downloads is lower than that of React, one thing we must not overlook is the number of GitHub stars that Vue owned at the time of writing. So keep an eye on it too.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-jamstack" class="anchor"&gt;
  &lt;/a&gt;
  5. Jamstack
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúBuild websites and apps that deliver better performance.‚Äù ‚Äî &lt;a href="https://jamstack.org/"&gt;Jamstack&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Jamstack stands for Javascript, APIs, and Markup.&lt;/p&gt;

&lt;p&gt;It is a software architecture that leverages the previous elements to build secure, scalable, cheaper, and performant websites and apps.&lt;/p&gt;

&lt;p&gt;It is the new kid in the web development field. Every day, more and more devs and companies are using this modern and efficient approach to build their websites and apps.&lt;/p&gt;

&lt;p&gt;According to the &lt;a href="https://tsh.io/state-of-frontend/#jamstack"&gt;State of Frontend 2020&lt;/a&gt;, almost one-third of the respondents have built a Jamstack website or app lately.&lt;/p&gt;

&lt;p&gt;Based on that, I am sure of the imminent huge adoption of the Jamstack architecture in the coming months.&lt;/p&gt;

&lt;p&gt;In addition, the graph below displays the trends regarding static site generator usage:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zLdyIk2g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AhKYDkntXYRNKxliuAO1BBg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zLdyIk2g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AhKYDkntXYRNKxliuAO1BBg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Credit: &lt;a href="https://tsh.io/state-of-frontend/#jamstack"&gt;State of Frontend&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-learn-it-the-right-way" class="anchor"&gt;
  &lt;/a&gt;
  How to learn it the right way
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jamstack.org/resources/"&gt;Learning Jamstack ‚Äî Official resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/what-is-the-jamstack-and-how-do-i-host-my-website-on-it/"&gt;What is the JAMstack and how do I get started?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://buttercms.com/blog/what-is-jamstack"&gt;https://buttercms.com/blog/what-is-jamstack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#6-micro-frontends" class="anchor"&gt;
  &lt;/a&gt;
  6. Micro Frontends
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;What the hell is a micro frontend?&lt;/p&gt;

&lt;p&gt;‚ÄúAn architectural style where independently deliverable frontend applications are composed into a greater whole.‚Äù ‚Äî &lt;a href="https://martinfowler.com/articles/micro-frontends.html"&gt;Martin Fowler&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, think about a website or web app as a combination of features that are owned by independent teams so they can work isolated from each other.&lt;/p&gt;

&lt;p&gt;It‚Äôs incredible how more and more organizations have been using this architectural style in recent years.&lt;/p&gt;

&lt;p&gt;That is the case with American Express, IKEA, Spotify, and Starbucks, just to name a few.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-few-benefits-of-micro-frontends" class="anchor"&gt;
  &lt;/a&gt;
  A few benefits of micro frontends
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Smaller, more cohesive, and maintainable code bases.&lt;/li&gt;
&lt;li&gt;More scalable organizations with decoupled, autonomous teams.&lt;/li&gt;
&lt;li&gt;Resilient site. Your feature should be useful even if JavaScript fails or hasn't executed yet.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In 2021, its usage and adoption will surely explode in more organizations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-learn-it-the-right-way" class="anchor"&gt;
  &lt;/a&gt;
  How to learn it the right way
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.amazon.com/Micro-Frontends-Architecture-Introduction-Techniques/dp/1097927989"&gt;Micro Frontends Architecture: Introduction, Design, Techniques &amp;amp; Technology&lt;/a&gt;
&lt;a href="https://martinfowler.com/articles/micro-frontends.html"&gt;Martin Fowler ‚Äî The evangelist of this architecture&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#final-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h1&gt;

&lt;p&gt;I really love front-end things even though I know they‚Äôre constantly changing. More and more libraries and frameworks are coming up in the blink of an eye.&lt;/p&gt;

&lt;p&gt;However, we shouldn't be overwhelmed by those changes. We should embrace and study them and prepare ourselves as best we can.&lt;/p&gt;

&lt;p&gt;We don‚Äôt need to digest all of them either. It is a matter of reading and practicing what matters the most to us.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;If this post turned out helpful share it to reach more devs. Also feel free to reach me on &lt;a href="//www.mullinstack.com"&gt;my blog&lt;/a&gt; and &lt;a href="https://medium.com/@blarz"&gt;Medium&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>javascript</category>
      <category>web</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to quickly mock an API server in a client-side project</title>
      <author>Jeremy Wells</author>
      <pubDate>Thu, 14 Jan 2021 23:42:44 +0000</pubDate>
      <link>https://dev.to/jsheridanwells/how-to-quickly-mock-an-api-server-in-a-client-side-project-1nji</link>
      <guid>https://dev.to/jsheridanwells/how-to-quickly-mock-an-api-server-in-a-client-side-project-1nji</guid>
      <description>&lt;h6&gt;
  &lt;a href="#photo-by-lars-kienle-on-unsplash" class="anchor"&gt;
  &lt;/a&gt;
  Photo by &lt;a href="https://unsplash.com/@larskienle?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Lars Kienle&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/mock-data?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;
&lt;/h6&gt;

&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this post I'd like to demonstrate two simple tools that you can use to simulate fetching data from an API that can greatly facilitate frontend web development. This can be helpful for focusing on UI development without worrying about the server-side implementation of the project. It can also be helpful for setting up a proof-of-concept projects without having to worrying about protecting real data, or for setting up consistent fake data for end-to-end testing. The two tools I'll demonstrate are &lt;a href="https://www.mockaroo.com/"&gt;Mockaroo&lt;/a&gt; for generating sets of dummy data, and &lt;a href="https://github.com/typicode/json-server"&gt;json-server&lt;/a&gt; for creating a fake API that a front-end application can make requests to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;This tutorial is aimed squarely at folks getting familiar writing browser-side code with HTML, CSS, and Javascript. That said, these tools can help support more robust front-end projects as well. If you've got a bit of knowledge of HTML and Javascript and some familiarity with the command line, then you'll be able to get the tools in this article to work for you.&lt;/p&gt;

&lt;p&gt;Before we start, you'll need the following installed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://nodejs.org"&gt;Node.js&lt;/a&gt;. I'm using version 14 as I write this, but any LTS version should do.&lt;/li&gt;
&lt;li&gt;Some way of serving static HTML and Javascript files locally. I use &lt;a href="https://github.com/http-party/http-server#readme"&gt;http-server&lt;/a&gt; and it's fast and really simple, but there are several other options. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get started, create a tiny web project that'll consist of just an HTML page and a JSON file to will hold our fake data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;file_viewer
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;field_viewer
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;index.html db.json
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;These files can stay empty for now; We'll paste in a little bit of code at the end of this tutorial to get it all working.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-one-data-modeling" class="anchor"&gt;
  &lt;/a&gt;
  Step one: Data modeling
&lt;/h2&gt;

&lt;p&gt;I'm imagining a web application that allows users to upload files, then it shows a list of all the files that have been saved. &lt;br&gt;
For this very simple example, we'll create a mock backend for an API that lists all of the file metadata (e.g., file name, file type, date created) after uploading. &lt;/p&gt;

&lt;p&gt;Before generating mock data, we need to get some idea of what our data will look like, what properties each object will have when it's returned from the API. We'll need to know the properties we want and what primitive Javascript type they'll be. Our file metadata can look something  like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;id: number
fileName: string
fileType: string
createdDate: Date
email: string
active: boolean
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;An example json object with those properties might look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"fileName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"The Chrysanthemum and the Dandelion"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"fileType"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;".pdf"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"createdDate"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2020-11-18T01:36:46Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"kuni@garu.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"active"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-two-generate-mock-data-with-mockaroo" class="anchor"&gt;
  &lt;/a&gt;
  Step two: Generate mock data with Mockaroo
&lt;/h2&gt;

&lt;p&gt;Now that we have an idea of what our data looks like, we can use &lt;a href="https://www.mockaroo.com/"&gt;Mockaroo&lt;/a&gt;, a browser-based tool that can generate thousands of realistic looking records for us. Mockaroo has a variety of subscription-based utilities for creating mock APIs, but for this demonstration we'll use it for basic mock data generation which we can do for free. &lt;/p&gt;

&lt;p&gt;The first part of Mockaroo is a form for adding properties to our mock data objects. Play around with the different data types that they offer and you'll see it can generate random data for a wide range of situations. Many of the data types have settings to further customize what gets generated. You can customize the behavior further by passing values through your own functions. Below, I'll create settings for each of the properties in our file metadata object, but feel free to add and change anything you find that's interesting. The rest of this tutorial will still work.&lt;/p&gt;

&lt;p&gt;Below you can see the settings that I selected for the mock data object above:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NN6TLymG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xj8tzfpwgennls871md8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NN6TLymG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xj8tzfpwgennls871md8.jpg" alt="Mockaroo.com example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;id:&lt;/strong&gt; For this field, I selected the &lt;strong&gt;Row Number&lt;/strong&gt; data type which will number all of the records in order. This will help with fetching individual records from our fake API further on in this article. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;fileName&lt;/strong&gt; and &lt;strong&gt;email:&lt;/strong&gt; For these two properties, Mockaroo can generate realistic random values by searching for and selecting the &lt;strong&gt;File Name&lt;/strong&gt; and &lt;strong&gt;Email&lt;/strong&gt; types respectively.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;createdDate and active:&lt;/strong&gt; For the &lt;code&gt;createdDate&lt;/code&gt;, I can use Mockaroo's &lt;strong&gt;Datetime&lt;/strong&gt; type and set it to return an ISO date which Javascript can parse, and I've set it to return dates from the past year. For the &lt;code&gt;active&lt;/code&gt; property (which indicates if our file has been deleted or not), I can return a boolean.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;fileType:&lt;/strong&gt; For file types, I'd like my application to only allow Microsoft Word, Excel, and PDF files to be used, so in Mockaroo, I'll use a custom function to populate those values. Mockaroo allows us to write functions in Ruby to allow values to be transformed before returning. I'm going to click the &lt;strong&gt;&lt;code&gt;fx&lt;/code&gt;&lt;/strong&gt; button for the &lt;code&gt;fileType&lt;/code&gt; row and add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'.docx'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'.xlsx'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'.pdf'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;sample&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will randomly select one item from that array and return it. &lt;/p&gt;

&lt;p&gt;Now that my data objects are defined, I'll select &lt;strong&gt;# Rows: 100&lt;/strong&gt; and &lt;strong&gt;Format: JSON&lt;/strong&gt; from the bottom of the form. I'll also select &lt;strong&gt;array&lt;/strong&gt; and deselect &lt;strong&gt;include null values&lt;/strong&gt;. Again, this is what my Mockaroo form looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NN6TLymG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xj8tzfpwgennls871md8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NN6TLymG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xj8tzfpwgennls871md8.jpg" alt="Mockaroo.com example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll click the &lt;strong&gt;Preview&lt;/strong&gt; button to make sure my objects look like what I expect, then click &lt;strong&gt;Download Data&lt;/strong&gt; to save it as a JSON file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serving-the-mock-data-with-jsonserver" class="anchor"&gt;
  &lt;/a&gt;
  Serving the mock data with json-server
&lt;/h2&gt;

&lt;p&gt;Now that we have some data, let's create a fake server that we can fetch it from. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/typicode/json-server"&gt;json-server&lt;/a&gt; is a very light Node.js tool that can allow a frontend developer to define some API endpoints and sets of data that can be returned to a client application. This way, the mock data is completely separate from the client-side code and it can be switched out once the project is ready for a real API. In this article, we'll just set up the server and make a GET request to it, but json-server can also POST and save objects as well as more advanced uses.&lt;/p&gt;

&lt;p&gt;First, install the json-server npm package globally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; json-server
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Open the file at the root of the &lt;code&gt;FileViewer&lt;/code&gt; directory - &lt;code&gt;./db.json&lt;/code&gt; - that you created above. This will hold all of the json data:&lt;/p&gt;

&lt;p&gt;As a quick test just to make sure it works, paste the following into &lt;code&gt;db.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"posts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"json-server"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"typicode"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"comments"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"some comment"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"postId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"profile"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"typicode"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This comes directly from the &lt;a href="https://github.com/typicode/json-server#readme"&gt;json-server documentation&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Run the json server with this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;json-server &lt;span class="nt"&gt;--watch&lt;/span&gt; db.json
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In a browser, paste in &lt;code&gt;http://localhost:3000/posts/1&lt;/code&gt; and it should return the first object in the &lt;code&gt;posts&lt;/code&gt; array in our json file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"json-server"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"typicode"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now that we know the server is working, stop the server (&lt;code&gt;CTRL+C&lt;/code&gt;). &lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;db.json&lt;/code&gt; again and clear the contents. We'll define an endpoint for our mock data called &lt;code&gt;files&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"files"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Open the JSON file that was downloaded from Mockaroo (it should be called &lt;code&gt;MOCK_DATA.json&lt;/code&gt;). Copy all of the contents. Replace the empty &lt;code&gt;"files"&lt;/code&gt; array with these contents so it looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;files&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fileName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nulla.xls&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fileType&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.xlsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;createdDate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2020-02-27T05:10:27Z&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hweiner0@wikimedia.org&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fileName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sapien urna.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fileType&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.xlsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;createdDate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2020-12-20T05:12:00Z&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;creding1@google.com.br&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fileName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vel augue.ppt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fileType&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.docx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;createdDate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2020-10-03T05:06:18Z&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ccrust2@theguardian.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fileName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mauris morbi non.txt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fileType&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.docx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;createdDate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2020-04-26T13:44:41Z&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nfolbig3@livejournal.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fileName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sapien sapien non.ppt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fileType&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.pdf&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;createdDate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2020-04-16T17:56:06Z&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cdesimoni4@uol.com.br&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;

        &lt;span class="c1"&gt;// ...&lt;/span&gt;

    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Run json-server again and request the &lt;code&gt;/files&lt;/code&gt; endpoint: &lt;code&gt;http://localhost:3000/files&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jYXoyxYN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/af4xhkp5g6fta3rrln4y.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jYXoyxYN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/af4xhkp5g6fta3rrln4y.jpg" alt="/files result in browser"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It should load all 100 of the fake records that Mockaroo generated. Add an id number at the end of the url (&lt;code&gt;http://localhost:3000/files/42&lt;/code&gt;) and it should return the one record with that id.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LvQNEfFe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xxas6xoxvbgpo85ws0ss.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LvQNEfFe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xxas6xoxvbgpo85ws0ss.jpg" alt="/files result in browser"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, we can make an AJAX request from inside of our (tiny) web application to make sure it can connect with our front end code.&lt;/p&gt;

&lt;p&gt;Open the &lt;code&gt;index.html&lt;/code&gt; file that was created earlier and paste the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;File Viewer&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"css/bootstrap.min.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;File Viewer&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3000/files&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Data from our mock backend: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Open a separate terminal window and &lt;code&gt;cd&lt;/code&gt; into the &lt;code&gt;FileViewer&lt;/code&gt; project created above. Start an HTTP server from this location (if you installed &lt;a href="https://github.com/http-party/http-server#readme"&gt;http-server&lt;/a&gt;, the command is just &lt;code&gt;$ http-server --open&lt;/code&gt;). &lt;/p&gt;

&lt;p&gt;In a browser, navigate to the http-server url (it would be &lt;code&gt;http://localhost:8080&lt;/code&gt; by default) and open a dev tools console. The page should have printed the mock data to the console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qg2XBhrj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/061sonkd9nl05jqwwd0t.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qg2XBhrj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/061sonkd9nl05jqwwd0t.jpg" alt="Chrome dev console"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this tutorial, we walked through a very basic way to define data for a web application, generate hundreds of realistic records, then serve them from a mock API that can be consumed by the application. This is only a very bare minimum implementation of these steps. I highly advise going through the &lt;a href="https://www.mockaroo.com/"&gt;Mockaroo&lt;/a&gt; and &lt;a href="https://github.com/http-party/http-server#readme"&gt;json-server&lt;/a&gt; documentation for a wide variety of other uses and configurations that can suit your frontend development needs even more closely.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Welcoming Katie Davis  and Suzanne Aitchison  to the Forem Team!</title>
      <author>Molly Struve (she/her)</author>
      <pubDate>Thu, 14 Jan 2021 22:47:27 +0000</pubDate>
      <link>https://dev.to/devteam/welcoming-katie-davis-and-suzanne-aitchison-to-the-forem-team-4f7j</link>
      <guid>https://dev.to/devteam/welcoming-katie-davis-and-suzanne-aitchison-to-the-forem-team-4f7j</guid>
      <description>&lt;p&gt;We are very excited to start off 2021 with the addition of two new staff members who will focus on Forem's front end development. Please meet Katie Davis (Senior Software Engineer) and Suzanne Aitchison (Software Engineer).&lt;/p&gt;

&lt;p&gt;Katie and Suzanne will work closely with Senior Software Engineer, &lt;a class="comment-mentioned-user" href="https://dev.to/nickytonline"&gt;@nickytonline&lt;/a&gt;
 and Head of Engineering, &lt;a class="comment-mentioned-user" href="https://dev.to/molly"&gt;@molly&lt;/a&gt;
 to support the ongoing development and maintenance of dev.to, Forem, as well as other apps and projects. &lt;/p&gt;

&lt;p&gt;Our Forem rollout is off to a fast-moving start, and we are thrilled to have such highly-skilled additions to our tight-knit team. &lt;/p&gt;

&lt;p&gt;Please give a special welcome to Katie and Suzanne and check out their introductory posts.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/katiedavis" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ccy4WLbF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--sAZABEAt--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/494542/0e8c942b-c9fa-4fe6-be70-6fd685744566.jpeg" alt="katiedavis image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/katiedavis/hi-i-m-joining-the-forem-team-1ja6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Hi! I'm Joining the Forem Team üéâ&lt;/h2&gt;
      &lt;h3&gt;Katie Davis „Éª Jan 14 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#meta&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#forem&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/s_aitchison" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MoDdcmYe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--qrj_wG6s--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/197075/58e853e9-29a9-4228-86e8-b5f7d203e9e1.jpg" alt="s_aitchison image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/s_aitchison/i-joined-the-forem-team-1dh6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;I joined the Forem team!&lt;/h2&gt;
      &lt;h3&gt;Suzanne Aitchison (she/her) „Éª Jan 14 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#meta&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#forem&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://i.giphy.com/media/l41lShcuautqDZc5i/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l41lShcuautqDZc5i/giphy.gif" alt="Alt text of image"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>meta</category>
    </item>
    <item>
      <title>Better uploads with Vue Formulate, S3, and Lambda</title>
      <author>Justin Schroeder</author>
      <pubDate>Thu, 14 Jan 2021 21:57:44 +0000</pubDate>
      <link>https://dev.to/justinschroeder/better-uploads-with-vue-formulate-s3-and-lambda-58b8</link>
      <guid>https://dev.to/justinschroeder/better-uploads-with-vue-formulate-s3-and-lambda-58b8</guid>
      <description>&lt;p&gt;Not many developers enjoy building forms ‚Äî and even the oddballs who say they do don't enjoy file uploads (or they're lying ü§∑‚Äç‚ôÇÔ∏è). It's a universal experience ‚Äî file uploads are a pain, and worse ‚Äî after all the necessary technical work the end user experience is still typically poor.&lt;/p&gt;

&lt;p&gt;Gather around friends, today I'd like to share another way to upload files that makes writing file uploads as easy as &lt;code&gt;&amp;lt;FormulateInput type="file" /&amp;gt;&lt;/code&gt;, provides a slick user experience, and requires no server-side code (well¬†‚Äî¬†AWS Lambdas are technically servers...ehh, you get the idea).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oLfTDZTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/56y08o88i3uumg1glv9z.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oLfTDZTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/56y08o88i3uumg1glv9z.gif" alt="upload"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This is a long article, but the end results are worth it. Here's what we'll be covering:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#ye-olde-way"&gt;The old way of doing file uploads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#theres-another-way"&gt;A better way of doing file uploads with Vue Formulate and AWS&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-setup-an-aws-account"&gt;Setting up an AWS Account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-create-an-s3-storage-bucket"&gt;Creating an S3 Storage Bucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-configure-cors-for-the-bucket"&gt;Configuring CORS for your S3 Bucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-create-an-iam-role"&gt;Creating an IAM role&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5-create-the-lambda-and-api"&gt;Creating a Lambda and accompanying API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6-add-the-function-code"&gt;Publishing Lambda function code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7-configure-the-api-gateway"&gt;Configuring an API Gateway&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#8-test-your-endpoint"&gt;Testing the upload endpoint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#9-the-uploader-function"&gt;Adding a custom uploader function to Vue Formulate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#a-working-example"&gt;A working example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See? It's a lot, but remember the end result is &lt;code&gt;&amp;lt;FormulateInput type="file" /&amp;gt;&lt;/code&gt; resulting in direct uploads to AWS S3. Stick with me and we'll make it through.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ye-olde-way" class="anchor"&gt;
  &lt;/a&gt;
  Ye olde way
&lt;/h2&gt;

&lt;p&gt;In the ye olde days we uploaded files by slapping one or more &lt;code&gt;&amp;lt;input type="file"&amp;gt;&lt;/code&gt; inputs in a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; that included the HTML attribute &lt;code&gt;enctype="multipart-form-data"&lt;/code&gt;. This did all the hard work of buttoning up the file for us and submitting it to our backend. Our backend code would then handle those files and usually place them somewhere on the filesystem. For example, here is a PHP script (&lt;a href="https://www.php.net/manual/en/features.file-upload.post-method.php"&gt;from the official PHP docs&lt;/a&gt;) that handles a file upload:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$uploaddir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'/var/www/uploads/'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$uploadfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$uploaddir&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_FILES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'userfile'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;move_uploaded_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_FILES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'userfile'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'tmp_name'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;$uploadfile&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"File is valid, and was successfully uploaded.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Possible file upload attack!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Nice ‚Äî so we can see PHP magically created some kind of temporary file with the contents of the uploaded file, and we move that temporary file to a permanent location on the filesystem (if we want to keep the file). This methodology still works today across various platforms, so why is it pass√©? Let‚Äôs highlight some of the ways this simple approach falls short:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There is no user feedback that the file is uploading. No progress bar, no loading animations, no disabled submit button. The user just sits there waiting for the form to submit. Have a lot of files? Your user will definitely get confused and click that submit button multiple times. Neato üëå&lt;/li&gt;
&lt;li&gt;If there's an issue with the file upload, the user won't find out till &lt;em&gt;after&lt;/em&gt; they waited for the entire upload to complete.&lt;/li&gt;
&lt;li&gt;Your backend needs to be configured to handle file uploads. For PHP this requires configuring &lt;code&gt;php.ini&lt;/code&gt; variables like &lt;code&gt;upload_max_filesize&lt;/code&gt;, &lt;code&gt;post_max_size&lt;/code&gt; and &lt;code&gt;max_input_time&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;If you're using a node server you need to be even more careful with uploads. Due to the single-threaded nature of node you can easily cause your server to run out of memory and crash. &lt;/li&gt;
&lt;li&gt;If you're using a serverless stack your backend won't even have a filesystem to store the uploads on (thats where this article comes in handy üëç).&lt;/li&gt;
&lt;li&gt;Your servers have a finite amount of disk space and it will eventually run out.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of these issues can be solved by passing the file "through" your server and then on to a cloud service like S3. For example, the PHP code above could use a stream wrapper to pass the file through to an S3 bucket instead of the local filesystem. However, this is effectively double-uploading ‚Äî 1) the client uploads the file to your server 2) then your server uploads the file to S3.&lt;/p&gt;

&lt;p&gt;An even better user experience is to upload files via &lt;code&gt;fetch&lt;/code&gt; or &lt;code&gt;XMLHttpRequest&lt;/code&gt; (&lt;code&gt;XMLHttpRequest&lt;/code&gt; is still preferred since &lt;code&gt;fetch&lt;/code&gt; doesn't support progress updates). However, rigging up these AJAX uploaders is a lot of work even when using pre-existing libraries and they come with their own backend shortcomings.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#theres-another-way" class="anchor"&gt;
  &lt;/a&gt;
  There's another way
&lt;/h2&gt;

&lt;p&gt;What if our backend servers never touched the file uploads at all? What if we could upload our files &lt;em&gt;directly&lt;/em&gt; to our cloud provider from the client's browser? What if our backend/database only stored the URL to the uploaded file? &lt;/p&gt;

&lt;p&gt;Vue Formulate allows you to turbo-charge your &lt;code&gt;file&lt;/code&gt; and &lt;code&gt;image&lt;/code&gt; inputs to do just that by implementing a custom &lt;code&gt;uploader&lt;/code&gt; function. The following describes how this can be accomplished with AWS Lambda and S3. What is Vue Formulate? Glad you asked ‚Äî it's the easiest way to build forms for Vue ‚Äî and I wrote an &lt;a href="https://dev.to/justinschroeder/introducing-vue-formulate-truly-delightful-form-authoring-56f5"&gt;introduction article about it&lt;/a&gt; you might be interested in.&lt;/p&gt;

&lt;p&gt;To provide the best user experience, Vue Formulate handles file uploads in an opinionated way. The library handles all of the UX like creating a dropzone, showing selected files, progress bars, file validation, displaying upload errors, and pushing completed uploads into the form's model. All you need to provide is an instance of Axios or a custom uploader function that performs your desired XHR request (don't worry, we're going to work through that together in this article).&lt;/p&gt;

&lt;p&gt;By the time a user submits the form and your &lt;code&gt;@submit&lt;/code&gt; handler is called Vue Formulate has already completed any file uploads in your form and merged the file URLs into the form data. Your backend can be sent a simple JSON payload and never needs to deal with the original files themselves. Even better, with just a little work, we can make those files upload &lt;em&gt;directly&lt;/em&gt; to S3.&lt;/p&gt;

&lt;p&gt;So how does this "direct uploading" work ‚Äî and how do we do it in a secure way? S3 supports a feature that allows the creation of "signed URLs", which are generated URLs that include all the necessary credentials to perform 1 pre-approved function ‚Äî such as putting an object into an S3 bucket üòâ! However to create these signed URLs we need some code to be executed in a secured environment ‚Äî¬†this environment could be a standard backend server, but for our purposes we're going to use a simple Lambda function. This is a great use case for Lambda as it is a small, discrete operation that only needs to be run when a user adds files to our form¬†(no need to have a server running 24/7 waiting to perform this operation).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jePVQgSc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/acafipg661ei2kb1pkjq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jePVQgSc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/acafipg661ei2kb1pkjq.png" alt="lambda-uploads"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Our custom Vue Formulate uploader function will perform a few steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Collect the files to be uploaded.&lt;/li&gt;
&lt;li&gt;Request a signed upload URL from our AWS Lambda function.&lt;/li&gt;
&lt;li&gt;Upload the file(s) to our S3 bucket using the signed upload URL.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once we've added our custom uploader to our Vue Formulate instance, all of our &lt;code&gt;file&lt;/code&gt; and &lt;code&gt;image&lt;/code&gt; inputs will automatically use this mechanism. Sounds good, yeah? Ok ‚Äî let's get cracking!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-setup-an-aws-account" class="anchor"&gt;
  &lt;/a&gt;
  1. Setup an AWS Account
&lt;/h3&gt;

&lt;p&gt;If you don't already have an AWS account, you'll need to set one up first. This is a standard signup process ‚Äî you'll need to verify yourself and provide billing information (don't worry, &lt;a href="https://aws.amazon.com/lambda/pricing/"&gt;AWS Lambda function call pricing&lt;/a&gt; and &lt;a href="https://aws.amazon.com/s3/pricing/"&gt;AWS S3 storage pricing&lt;/a&gt; are &lt;em&gt;really&lt;/em&gt; cheap).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PDYF5aeg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lmf425i1f18felr46pvk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PDYF5aeg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lmf425i1f18felr46pvk.png" alt="portal.aws.amazon.com_billing_signup_nc2=h_ct&amp;amp;src=header_signup&amp;amp;redirect_url=https%3A%2F%2Faws.amazon.com%2Fregistration-confirmation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-create-an-s3-storage-bucket" class="anchor"&gt;
  &lt;/a&gt;
  2. Create an S3 Storage Bucket
&lt;/h3&gt;

&lt;p&gt;Use the services dropdown to navigate to S3 so that we can create a new storage bucket. You'll need to answer a series of question when creating the bucket. This includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Bucket name ‚Äî¬†I generally try to pick names that &lt;em&gt;could&lt;/em&gt; be subdomains if I decide to rig up a DNS record for them in the future. For this example, I'll use &lt;code&gt;uploads.vueformulate.com&lt;/code&gt; as my bucket name.&lt;/li&gt;
&lt;li&gt;Region name (pick the one geographically closest to you)&lt;/li&gt;
&lt;li&gt;Bucket settings for Block Public Access ‚Äî uncheck all of these boxes since we're going to allow public downloads. In this example, we won't be creating private file uploads, but this same process works for that use case.&lt;/li&gt;
&lt;li&gt;Bucket versioning ‚Äî you can leave this disabled, it's cheaper and we'll be using random ids to ensure we don't accidentally overwrite existing files with new uploads.&lt;/li&gt;
&lt;li&gt;Tags ‚Äî These are optional and only if you want to use them. These can be helpful for tracking billing costs if you are using a lot of AWS resources.&lt;/li&gt;
&lt;li&gt;Advanced Settings - Leave "Object Lock" disabled.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-configure-cors-for-the-bucket" class="anchor"&gt;
  &lt;/a&gt;
  3. Configure CORS for the bucket
&lt;/h3&gt;

&lt;p&gt;Next, we need to ensure that we configure CORS for the bucket to enable our direct uploading. In this case I'm going to apply a liberal &lt;code&gt;Access-Control-Allow-Origin: *&lt;/code&gt; since I want my example to work from any domain. You can be more specific with your access control if you want to limit which domains are allowed to upload files to your S3 storage bucket.&lt;/p&gt;

&lt;p&gt;Click on your bucket, then select "Permissions" in the tab bar. Scroll down to "Cross-origin resource sharing", click "Edit", and enter the following JSON configuration. Finally, hit "Save Changes":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"AllowedHeaders"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="s2"&gt;"Content-Type"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"AllowedMethods"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="s2"&gt;"PUT"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"AllowedOrigins"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"ExposeHeaders"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i96sQF5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/awtjnk1wgw9bi9dt37cm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i96sQF5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/awtjnk1wgw9bi9dt37cm.png" alt="s3.console.aws.amazon.com_s3_home_region=us-east-2"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-create-an-iam-role" class="anchor"&gt;
  &lt;/a&gt;
  4. Create an IAM role
&lt;/h3&gt;

&lt;p&gt;Next, we'll need to create an IAM role for Lambda. Use the services menu to navigate to the IAM service (Identity Access Management). Click on roles in the sidebar and choose "Create role". Select the Lambda "use case" from the services use cases and move on to the next step. &lt;/p&gt;

&lt;p&gt;This is where we attach "policies" (basically permissions). We'll add the &lt;code&gt;AWSLambdaBasicExecutionRole&lt;/code&gt; which gives our new role the ability to run Lambda functions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b6d_t7Rp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hbwomtkolqb1f2g3h96i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b6d_t7Rp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hbwomtkolqb1f2g3h96i.png" alt="console.aws.amazon.com_iam_home_region=us-east-2"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Next, add tags if you want them (not required), and finally, give your role a name and a description you'll recognize and create the role.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Drxyj2xN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1nakl3cvpyekx1pdx6zh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Drxyj2xN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1nakl3cvpyekx1pdx6zh.png" alt="console.aws.amazon.com_iam_home_region=us-east-2 (1)"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Next, we need to add the ability for this role to access the S3 bucket we created. Choose the role we just created, select "Attach policies", and then click "Create Policy" button at the top. Then follow these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select the S3 service&lt;/li&gt;
&lt;li&gt;Select actions &lt;code&gt;PutObject&lt;/code&gt;, and &lt;code&gt;PutObjectACL&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Specify the bucket ARN, and "Any" (&lt;code&gt;*&lt;/code&gt;) object in the bucket.&lt;/li&gt;
&lt;li&gt;Review and name the policy, then create it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fggsz2sM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/27xlqu1fhhayjuov5sg1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fggsz2sM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/27xlqu1fhhayjuov5sg1.png" alt="Creating the S3 access policy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YnMUVZao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2a2fbki0u1x9eixcmy2o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YnMUVZao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2a2fbki0u1x9eixcmy2o.png" alt="Naming the S3 access policy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, go back to the role we created, refresh the list of policies, search for our newly created policy, and add it to the role.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8aUmbK5c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/86g4x9t9gjlo5rlduhpt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8aUmbK5c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/86g4x9t9gjlo5rlduhpt.png" alt="Selecting the access policy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TSgENTvm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fcwpi3c0hnzuomf4zs6l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TSgENTvm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fcwpi3c0hnzuomf4zs6l.png" alt="Role policies when complete"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-create-the-lambda-and-api" class="anchor"&gt;
  &lt;/a&gt;
  5. Create the Lambda and API
&lt;/h3&gt;

&lt;p&gt;Use the services dropdown to search for the Lambda service. Open it, and choose "Create Function", and follow the prompts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select "Author from scratch"&lt;/li&gt;
&lt;li&gt;Choose a function name, for this example I'll use "VueFormulateUploadSigner".&lt;/li&gt;
&lt;li&gt;Change the execution role and select "Use existing Role". Choose the new role that we created in the previous step.&lt;/li&gt;
&lt;li&gt;Leave the advanced settings unchanged and create the function.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uHWnfvZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ugpenww9qq1vw4pjau4i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uHWnfvZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ugpenww9qq1vw4pjau4i.png" alt="Lambda creation screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember, this Lambda function is responsible for creating our signed upload URL, so we need an endpoint to trigger the lambda's execution. To do this, click the "+ add trigger" button, select "API Gateway", and follow the prompts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select "Create an API"&lt;/li&gt;
&lt;li&gt;For "API type" choose "HTTP API"&lt;/li&gt;
&lt;li&gt;For security, select "open" (You can always come back and add JWT later if it's needed for your specific application)&lt;/li&gt;
&lt;li&gt;Leave the additional settings blank and "Add" the gateway.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#6-add-the-function-code" class="anchor"&gt;
  &lt;/a&gt;
  6. Add the function code
&lt;/h3&gt;

&lt;p&gt;We need our lambda function to create a signed &lt;code&gt;putObject&lt;/code&gt; URL for us. In the Function code section double click on &lt;code&gt;index.js&lt;/code&gt;. This file is the actual code that will be executed when our Lambda is run. In this case we want to use the AWS SDK for node.js to create a signed &lt;code&gt;putObject&lt;/code&gt; URL for S3. &lt;/p&gt;

&lt;p&gt;Here's some code that does just that. You can copy and paste it directly into the code editor ‚Äî although you should read through it to understand what it is doing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;S3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-sdk/clients/s3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CORS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Access-Control-Allow-Headers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Return an error response code with a message
 */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;invalid&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;statusCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;422&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;isBase64Encoded&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;CORS&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Generate a random slug-friendly UUID
 */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;uuid&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;iterations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;randomStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;iterations&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;randomStr&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;randomStr&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;iterations&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * Our primary Lambda handler.
 */&lt;/span&gt;
&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Handle CORS preflight requests&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;OPTIONS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CORS&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// Lets make sure this request has a fileName&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// First, let's do some basic validation to ensure we recieved proper data&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extension&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;invalid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Request must include "extension" and "mime" properties.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * We generate a random filename to store this file at. This generally good
     * practice as it helps prevent unintended naming collisions, and helps
     * reduce the exposure of the files (slightly). If we want to keep the name
     * of the original file, store that server-side with a record of this new
     * name.
     */&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filePath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extension&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * These are the configuration options that we want to apply to the signed
     * 'putObject' URL we are going to generate. In this case, we want to add
     * a file with a public upload. The expiration here ensures this upload URL
     * is only valid for 5 minutes.
     */&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;Bucket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BUCKET_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;Expires&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;ACL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;public-read&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Now we create a new instance of the AWS SDK for S3. Notice how there are
     * no credentials here. This is because AWS will automatically use the
     * IAM role that has been assigned to this Lambda runtime.
     * 
     * The signature that gets generated uses the permissions assigned to this
     * role, so you must ensure that the Lambda role has permissions to
     * `putObject` on the bucket you specified above. If this is not true, the
     * signature will still get produced (getSignedUrl is just computational, it
     * does not actually check permissions) but when you try to PUT to the S3
     * bucket you will run into an Access Denied error.
     */&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;signatureVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;v4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;us-east-1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/**
         * Now we create the signed 'putObject' URL that will allow us to upload
         * files directly to our S3 bucket from the client-side.
         */&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uploadUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSignedUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;putObject&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;

        &lt;span class="c1"&gt;// Finally, we return the uploadUrl in the HTTP response&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;CORS&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;uploadUrl&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// If there are any errors in the signature generation process, we&lt;/span&gt;
        &lt;span class="c1"&gt;// let the end user know with a 500.&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;invalid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Unable to create the signed URL.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NkdTqT9o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/f18nrhvuw6ctwohfqanz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NkdTqT9o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/f18nrhvuw6ctwohfqanz.png" alt="Adding the code to the function"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you add this code, click "Deploy". Now ‚Äî the last thing we need to do in Lambda is add the &lt;code&gt;BUCKET_NAME&lt;/code&gt; environment variable. &lt;/p&gt;

&lt;p&gt;Scroll down from the code editor and choose "Edit" under environment variables. Enter a new key &lt;code&gt;BUCKET_NAME&lt;/code&gt; and set the value to our S3 bucket name (I chose &lt;code&gt;uploads.vueformulate.com&lt;/code&gt; as my name). Hit save, and your Lambda is ready to go!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SUv8s4PK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ya3x901dazhdlugfpxfi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SUv8s4PK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ya3x901dazhdlugfpxfi.png" alt="The BUCKET_NAME environment variable"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-configure-the-api-gateway" class="anchor"&gt;
  &lt;/a&gt;
  7. Configure the API Gateway
&lt;/h3&gt;

&lt;p&gt;We're getting close! Before we can start sending HTTP traffic to our Lambda we need to configure the API Gateway we created. &lt;/p&gt;

&lt;p&gt;Navigate to the API gateway service and you should see a service with the same name as our Lambda with an &lt;code&gt;-API&lt;/code&gt; suffix ‚Äî let's click into that. The API Gateway service is a powerful utility that makes it easy to configure which Lambdas respond to which API requests. If you chose "Develop &amp;gt; Routes" you'll see that our Lambda has already attached itself to the &lt;code&gt;/{lambdaName}&lt;/code&gt; route.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CEunVgoq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/u6gr02t0mg5jdt8tcyko.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CEunVgoq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/u6gr02t0mg5jdt8tcyko.png" alt="API Gateway Routes"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Personally, I prefer this route to be something more like &lt;code&gt;/signature&lt;/code&gt;. We can easily change it, and while we're at it, let's restrict this endpoint to only respond to POST requests.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ok4SUQlx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ia7puhmzls354dukhwi2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ok4SUQlx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ia7puhmzls354dukhwi2.png" alt="Editing a route"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There's a problem though. Since we've restricted the endpoint to &lt;code&gt;POST&lt;/code&gt; only, the browser's CORS &lt;code&gt;OPTIONS&lt;/code&gt; preflight requests will fail. &lt;/p&gt;

&lt;p&gt;Let's add another route for the same &lt;code&gt;/signature&lt;/code&gt; path that also points to our Lambda (our code there will handle the CORS request). Create the route, and then click "Create and attach an integration" on the for the &lt;code&gt;OPTIONS&lt;/code&gt; route and follow the prompts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select "Lambda function" for the integration type.&lt;/li&gt;
&lt;li&gt;Select the region and function of our Lambda.&lt;/li&gt;
&lt;li&gt;Create the integration.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dZAhWJJy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/owsrohfwxfe5fmp9ahjb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dZAhWJJy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/owsrohfwxfe5fmp9ahjb.png" alt="Creating the OPTIONS route"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AGndbboH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/oik5w278sb1qj9mqfx2f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AGndbboH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/oik5w278sb1qj9mqfx2f.png" alt="Routes after configuration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When making changes to this default API, the changes are auto-deployed on the default "stage". You can think of stages like environments. Adding multiple stages here is beyond the scope of what we're doing here. For such a simple function using the default stage is perfectly fine.&lt;/p&gt;

&lt;p&gt;If you navigate back to the main page for this API, you'll see we have an "invoke URL" for &lt;code&gt;$default&lt;/code&gt;¬†‚Äî¬†this is your new APIs URL!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E0KtMnoT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4kegxqrz5bo8c88hxi78.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E0KtMnoT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4kegxqrz5bo8c88hxi78.png" alt="The API Endpoint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(You can change this to a custom domain if you wish, but this guide doesn't focus on that)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-test-your-endpoint" class="anchor"&gt;
  &lt;/a&gt;
  8. Test your endpoint!
&lt;/h3&gt;

&lt;p&gt;Phew ‚Äî that took some doing, but we should be up and running at this point. To test, copy the "invoke URL" and append &lt;code&gt;/signature&lt;/code&gt; to the end of it. Let's try to ping our endpoint with a cURL request. Be sure to replace the values with your own endpoint values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'{"extension": "pdf", "mime": "application/json"}'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s1"&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-X&lt;/span&gt; POST https://cq2cm6d0h6.execute-api.us-east-1.amazonaws.com/signature
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You should get back a JSON response with a signed URL:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;"uploadUrl"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"https://s3.amazonaws.com/uploads.vueformulate.com/hf8wj10h5svg3irf42gf.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Credential=ASIA2EL2NL4LVYXJTOK2%2F20210105%2Fus-east-1%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20210105T165545Z&amp;amp;X-Amz-Expires=300&amp;amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEFEaCXVzLWVhc3QtMiJHMEUCICwx61VITKOKB77AbzOBYFQ54hPigpS8YjXBn3opFCBHAiEAw4bNSBBAnrugIVs0kxFgFU%2Bxich0WrN%2BS96WJBqLt%2BYq1wEIGhAAGgw2OTY1NzgzMDE3MTkiDJLL6F8ULm9ygw6pIyq0Ac1moVu2PgGMBz4th89uCWW6XUsUAD%2FNcY5JUf06%2Btl2LU7j9DjxLtm5fKt0Bkc6Z96U03HmP4job3vYTKXR2wQPaW381fd5UKQLgiqz3o4ENwg8E92unTtZZ8DrP4yjntkkqUrw8Ybavyrik2eAPnp2ME%2FQe2kzl85rBWFgQdHj8bXBYPxgV1dIGyAi%2BQtp0XMMcJyJNR5Lgdh05py3WEpf0mCVS3vBe1MJP3m6kph7OMZLWDCnsNL%2FBTrgAQplCeuZMLkutxSWG8KHYUUGB5fLkJQJtK4xJab4zmxBndNXRT4tPLDPpiyyX%2B25DQbAxD48azztgdEOOim8%2BnY6rZTsY7KTd1%2FuQwryAr%2Bt9rzvL0ubkCo3PWK1UD0TBhx%2BjpE1KPyYjA4df0xlQyx0D1ee0uVRthn9FY9bDkuN8EWs2KNVxbt%2BbWYxAUJ5mqOtq1zWWa%2BXTWR20BlzWGG8NZTy0krkp9mBLM1mPIHdVNpgbgdMsnW3L0UtZXpCYT8n1QpVsMnIDuYcAK3ogOYLcIq0KOK8PWOk6whbz39W&amp;amp;X-Amz-Signature=362c8bc5cb11d6b5a14c52f82b58c25eae56b70bfaf22e01b25ac4ba4436b71e&amp;amp;X-Amz-SignedHeaders=host%3Bx-amz-acl&amp;amp;x-amz-acl=public-read"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Success! Our Lambda code creates upload URLs that expire after 5 minutes ‚Äî this isn't a problem since Vue Formulate will use the signed url immediately, but if you're playing around with the URL by hand it's worth keeping the expiration limit in mind.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: The above CURL request is an actual live lambda I manage, feel free test with it, be be aware that all files are automatically deleted after 24 hours üëç&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#9-the-uploader-function" class="anchor"&gt;
  &lt;/a&gt;
  9. The uploader function
&lt;/h3&gt;

&lt;p&gt;The last step in our process is writing a custom uploader for Vue Formulate. Remember, when Vue Formulate receives a file from the end user it passes that file off to an uploader function (or axios). We want to use a custom implementation of the uploader function to fetch a signed URL and then perform an &lt;code&gt;XMLHttpRequest&lt;/code&gt; (xhr) to that URL with our file data. The implementation details of this will vary ever so slightly depending on the specifics of your project but here's how this can be done globally via a Vue Formulate plugin:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#s3uploaderpluginjs" class="anchor"&gt;
  &lt;/a&gt;
  s3-uploader-plugin.js
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;uploadToS3&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.([&lt;/span&gt;&lt;span class="sr"&gt;a-zA-Z0-9&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;extension&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="nx"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uploadUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="nx"&gt;extension&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;mime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/octet-stream&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;uploadUrl&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;xhr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;XMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PUT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;uploadUrl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;progress&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loaded&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRequestHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/octet-stream&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Failed to upload&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onerror&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Failed to upload&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="nx"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uploadUrl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;protocol&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;//&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// we'll suppress this since we have a catch all error&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// Catch all error&lt;/span&gt;
  &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;There was an error uploading your file.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;uploader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;uploadToS3&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mainjs" class="anchor"&gt;
  &lt;/a&gt;
  main.js
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;VueFormulate&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@braid/vue-formulate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;S3UploaderPlugin&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./s3-uploader-plugin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Your main.js file or wherever you initialize Vue Formulate.&lt;/span&gt;

&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;VueFormulate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Use API Gateway URL + route path üòâ&lt;/span&gt;
    &lt;span class="na"&gt;uploadUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://6etx7kng79.execute-api.us-east-2.amazonaws.com/signature&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="nx"&gt;S3UploaderPlugin&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-working-example" class="anchor"&gt;
  &lt;/a&gt;
  A working example
&lt;/h2&gt;

&lt;p&gt;You're done! With those changes in place, all &lt;code&gt;file&lt;/code&gt; and &lt;code&gt;image&lt;/code&gt; inputs in your Vue Formulate instance will automatically upload their contents directly to S3 from the&lt;br&gt;
client's browser. &lt;/p&gt;

&lt;p&gt;You can use as many file uploads as you'd like on any and all forms in your project with no additional configuration. &lt;/p&gt;

&lt;p&gt;Here's an example in action:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/vue-formulate-s3-lambda-upload-example-qfynq"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;If you‚Äôre intrigued, checkout &lt;a href="https://vueformulate.com/"&gt;vueformulate.com&lt;/a&gt;. You can follow me, &lt;a href="https://twitter.com/jpschroeder"&gt;Justin Schroeder&lt;/a&gt;, on twitter ‚Äî as well as my co-maintainer &lt;a href="https://twitter.com/BoydDotDev"&gt;Andrew Boyd&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>aws</category>
    </item>
    <item>
      <title>JAVASCRIPT IRL: Examples of JavaScript's filter function in real life</title>
      <author>Shailesh Vasandani</author>
      <pubDate>Thu, 14 Jan 2021 18:33:38 +0000</pubDate>
      <link>https://dev.to/shaileshcodes/javascript-irl-examples-of-javascript-s-filter-function-in-real-life-589g</link>
      <guid>https://dev.to/shaileshcodes/javascript-irl-examples-of-javascript-s-filter-function-in-real-life-589g</guid>
      <description>&lt;p&gt;JavaScript array methods are super useful, and learning how to use them can really help improve the readability of your code. This is the third and final part of this series, and today I'll be discussing the &lt;code&gt;filter&lt;/code&gt; function and how you can use it to make your code more concise. It's probably the easiest of the three to understand, since it's fairly straightforward, but it's always helpful to have examples on hand to understand exactly how it does and doesn't work.&lt;/p&gt;

&lt;p&gt;Psst ‚Äî don't have time to read through the entire article? Follow me on &lt;a href="https://instagram.com/shaileshcodes"&gt;Instagram&lt;/a&gt; to get short, digestible posts on all things web development.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;filter&lt;/code&gt; function is called on an array and ‚Äî like &lt;code&gt;map&lt;/code&gt; ‚Äî takes in one parameter: a callback. It performs this callback function on every element in the array, and includes the element in a &lt;strong&gt;new&lt;/strong&gt; array if the callback returns true. Now, you might think that you can replicate this functionality without too much effort using &lt;code&gt;map&lt;/code&gt;, but the key difference here is that &lt;code&gt;map&lt;/code&gt; &lt;em&gt;always&lt;/em&gt; returns an array with the same length as the original. (Well, almost always, but that's a bit more complicated and not really in the spirit of &lt;code&gt;map&lt;/code&gt; to begin with.) On the other hand, &lt;code&gt;filter&lt;/code&gt; will create an array that's only as large as the number of elements that pass the callback.&lt;/p&gt;

&lt;p&gt;That may seem like a lot, but it honestly works just like you'd expect to. Let's take a look at a simple example:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#a-trivial-example" class="anchor"&gt;
  &lt;/a&gt;
  A trivial example
&lt;/h4&gt;

&lt;p&gt;Here, we add filter the array to only include all elements greater than 2:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newarr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newarr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; [3,4,5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The important thing to note here is that &lt;code&gt;newarr&lt;/code&gt; is only of length 3; it doesn't return a &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; for the first two elements ‚Äî it simply omits them entirely. We'll use this property to our advantage in the very next example.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#deleting-caches-but-properly-this-time" class="anchor"&gt;
  &lt;/a&gt;
  Deleting caches (but properly this time)
&lt;/h4&gt;

&lt;p&gt;If you've read my &lt;a href="https://shaile.sh/codes/posts/2021/01/06/javascript-map-in-real-life/"&gt;article on the map function&lt;/a&gt;, you'll recognize this example. However, it can still be improved: the &lt;code&gt;null&lt;/code&gt; values that we returned could end up throwing an error later down the line. To avoid that, we're going to use &lt;code&gt;filter&lt;/code&gt; to return an array that consists &lt;em&gt;only&lt;/em&gt; of the elements that match the condition.&lt;/p&gt;

&lt;p&gt;This is what it looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;      &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;activate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Delete all caches that aren't named currentCache.&lt;/span&gt;
        &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;waitUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cacheNames&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cacheNames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cacheName&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cacheName&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;currentCache&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cacheName&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Deleting out of date cache:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cacheName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cacheName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}));&lt;/span&gt;
          &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Again, very similar to the previous example. The key difference here is that &lt;em&gt;before&lt;/em&gt; we map each cache to its &lt;code&gt;delete&lt;/code&gt; function, we're filtering out all the caches that don't match our condition. That way, the &lt;code&gt;currentCache&lt;/code&gt; won't appear in the array being passed to the &lt;code&gt;map&lt;/code&gt; and thus we avoid any &lt;code&gt;null&lt;/code&gt; values.&lt;/p&gt;

&lt;p&gt;Let's look another example:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#filtering-posts-in-a-blog" class="anchor"&gt;
  &lt;/a&gt;
  Filtering posts in a blog
&lt;/h4&gt;

&lt;p&gt;On my &lt;a href="https://shaile.sh/codes"&gt;blog page&lt;/a&gt;, I use a tagging system to allow users to filter content and view only the posts they're interested in. To do this, I actually created a JavaScript library called &lt;a href="https://svasandani.github.io/dynamic-tags/"&gt;dynamic-tags&lt;/a&gt;. While creating it, I needed to find a way to take all of the posts on the page and only display the ones that matched the given filter.&lt;/p&gt;

&lt;p&gt;While this could have devolved into a nasty mess of &lt;code&gt;for&lt;/code&gt; loops and &lt;code&gt;if&lt;/code&gt; statements, I used the &lt;code&gt;filter&lt;/code&gt; function to make things both readable and efficient. Here's how it ended up:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;      &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;filterPosts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;activePosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;tagFilter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;activePosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;activePosts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;tagDict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Effectively three lines of code do much of the heavy lifting. In it, we go through each selected tag and call &lt;code&gt;filter&lt;/code&gt; on &lt;code&gt;activePosts&lt;/code&gt; to progressively remove any post that doesn't contain that tag. Even though &lt;code&gt;filter&lt;/code&gt; might seem like a very minor abstraction over a plain &lt;code&gt;for&lt;/code&gt; loop, we can see in this example just how concise and readable it makes your code.&lt;/p&gt;

&lt;p&gt;Let's take a look at one final example:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#making-things-searchable" class="anchor"&gt;
  &lt;/a&gt;
  Making things searchable
&lt;/h4&gt;

&lt;p&gt;As an extension to the library I created above, I also wanted to create a system where users could search for topics and filter posts based on that. This is still a work in progress, but it already includes several useful examples of the &lt;code&gt;filter&lt;/code&gt; function in action.&lt;/p&gt;

&lt;p&gt;Let's take a look at my favorite one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;      &lt;span class="nx"&gt;populateSearchBox&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;searches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allTags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;

        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;searchBox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classListToSelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;searchBoxClass&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchBox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;searchBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

          &lt;span class="nx"&gt;searches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tagFilter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addTagTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;searchBox&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this snippet, instead of filtering out posts, we're actually filtering out suggestions in the search box. Here, the &lt;code&gt;filter&lt;/code&gt; function is used to ensure we're only appending suggestions that haven't already been selected. That is, we don't want a user to be filtering by topics that they've already filtered out.&lt;/p&gt;

&lt;p&gt;The actual &lt;code&gt;filter&lt;/code&gt; function is quite interesting ‚Äî it looks for all the tags that contain the phrase inside the search bar. For example, given the tags &lt;code&gt;['May', 'June', 'July']&lt;/code&gt;, typing a 'y' into the search bar should return &lt;code&gt;['May', 'July']&lt;/code&gt;. On the other hand, typing 'J' should return &lt;code&gt;['June', 'July']&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#wrapping-it-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrapping it up
&lt;/h4&gt;

&lt;p&gt;And that's a wrap! I hope these examples gave you an idea of how the &lt;code&gt;filter&lt;/code&gt; function is used in production, and how it can help make code more readable and versatile. Let me know in the comments if you've used the &lt;code&gt;filter&lt;/code&gt; function in a cool way, and make sure to read the other two posts in the series if you haven't already!&lt;/p&gt;

&lt;p&gt;As always, don't forget to follow me for more content like this. I'm currently writing on &lt;a href="https://shaile.sh/devto"&gt;dev.to&lt;/a&gt; and &lt;a href="https://shaile.sh/medium"&gt;Medium&lt;/a&gt;, and your support on either platform would be very much appreciated. I also have a &lt;a href="https://www.buymeacoffee.com/shailesh/posts"&gt;membership&lt;/a&gt; set up, where you can get early previews of articles and exclusive access to a whole bunch of resources. Also, if you've particularly enjoyed this post, consider supporting me by &lt;a href="https://shaile.sh/coffee"&gt;buying me a coffee&lt;/a&gt;. Until next time!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>arrays</category>
    </item>
    <item>
      <title>JAMstack: Blast Off Your Website</title>
      <author>Dima Miro</author>
      <pubDate>Thu, 14 Jan 2021 17:42:20 +0000</pubDate>
      <link>https://dev.to/dimamiro/jamstack-blast-off-your-website-5jc</link>
      <guid>https://dev.to/dimamiro/jamstack-blast-off-your-website-5jc</guid>
      <description>&lt;p&gt;Time goes by, and the web is not the same as before. New and new technologies, tools, and approaches are rising almost every day. Google is constantly changing their search algorithms priorities in search ranking. Now they rate better those websites that load faster. Privacy issues cost too much, so security is also quite an important topic today. In this mess, JAMstack was born.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-jamstack" class="anchor"&gt;
  &lt;/a&gt;
  What is JAMstack
&lt;/h2&gt;

&lt;p&gt;JAMstack is a new approach to web development. Its three first letters stand for:  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Javascript&lt;/strong&gt;. Basically, it‚Äôs a programming language. Javascript takes care of request/response operations on the client-side;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;API&lt;/strong&gt;. API is a bridge between the client-side with Javascript and server-side with the database;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Markup&lt;/strong&gt;. After data is collected from the server, it's put in markup, and a website starts its rebuilding. Then, the website is optimized by a site generator or a build tool and served in Content Delivery Network (CDN).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This abbreviation was invented by Mathias Biilmann, CEO of Netlify, and we believe that he coined it before definitions behind, but it turned out pretty good.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-jamstack-works" class="anchor"&gt;
  &lt;/a&gt;
  How JAMstack works
&lt;/h2&gt;

&lt;p&gt;Delving deeper into an understanding of the JAMstack conception, let's expand a bit its three-word definition we deciphered above. Commonly speaking it contains:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Markup&lt;/strong&gt;. Markup lies in a remote repository as a source code. It could be Bitbucket, Github repository, or whatever you prefer.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Content&lt;/strong&gt;. Content lies in the CMS. It could be your own server with a database, or such PaaS like Contentful, or GraphCMS (there are a lot of different services out there).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Trigger&lt;/strong&gt;. Every time content or source code changes, the trigger runs rebuild.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Build&lt;/strong&gt;. On build-time, the optimized HTML, CSS, and Javascript code is generated based on requested data from CMS. The site generator maximizes static code optimization.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Deployment&lt;/strong&gt;. Then the generated code is sent to the CDN (Content Delivery Network), i.e. to servers in different parts of the world. It will load as quickly as possible because the closest physical server from the CDN will be selected, and the request will be redirected to it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#why-its-so-cool" class="anchor"&gt;
  &lt;/a&gt;
  Why it's so cool
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First of all, super-high performance. How is this performance achieve? &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Pre-rendering. The website is built way before the user requests it.&lt;/li&gt;
&lt;li&gt;Optimization. The site generator (as mentioned above) such as Gatsby.js makes sure that everything is well-optimized.&lt;/li&gt;
&lt;li&gt;Rebuild on demand. The website rebuilds only when source code or content in CMS changes. Not every time when the user requests a website.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Second, is an absence of a rigid binding to the used technologies.&lt;br&gt;
If you suddenly want to change a CMS (Content Management System), it‚Äôs not a problem. Only CMS URL should be changed, and probably a couple of things in source code (depends on the data structure returned from CMS).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Third, it‚Äôs highly stable.&lt;br&gt;
The website will never crush unless the whole CDN (Content Delivery Network) crushes. But it's very unlikely. Even if there is a bug in source code and build crushes, it's not a problem at all. The changes won‚Äôt be published, and the user will see the previous version of the website while you're fixing the bugs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And last but not least, security.&lt;br&gt;
The only thing the intruder can do ‚Äì download compiled markup (HTML, CSS, and javascript files) of the website. There‚Äôs no such situation when someone enters the admin panel by simple manipulations with the website‚Äôs URL. No /wp-admin access. CMS is hosted under another URL and nobody (except the owner) can know it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-limitations-of-the-approach" class="anchor"&gt;
  &lt;/a&gt;
  The limitations of the approach
&lt;/h2&gt;

&lt;p&gt;JAMstack websites are cool and awesome, and we do love them, but they are not suitable for everyone and everything. Remember that it's about static content. So, we don't recommend to use it for websites with highly dynamic content. An example of dynamic content is Facebook feed. Feed content is personalized for everyone in a unique way, so we can call it dynamic. But if it was static, the Facebook feed would look the same for everyone.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comparison-with-the-traditional-way-of-development" class="anchor"&gt;
  &lt;/a&gt;
  Comparison with the "traditional" way of development
&lt;/h2&gt;

&lt;p&gt;As an alternative to the Jamstack, usually considered a LAMP stack, and the undisputed leader in the industry ‚Äì WordPress. LAMP is another handy-chosen abbreviation that stands for:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;L&lt;/strong&gt; ‚Äì Linux as a server OS;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt; - Apache as a server architecture;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;M&lt;/strong&gt; - MySQL as a database;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P&lt;/strong&gt; - PHP/Pearl/Python as a server programming language.&lt;/p&gt;

&lt;p&gt;Briefly, the main difference is that the websites created in the LAMP stack are built on every request user makes; a server requests a database and combines the result with data from the page‚Äôs markup and plugins to generate the static files.&lt;/p&gt;

&lt;p&gt;The Jamstack websites are built one time and serve the static files immediately after the user has made a request. As a result, we can get this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uMj208u_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://unikorns-website-production.s3.eu-central-1.amazonaws.com/lighthouse_score_5cefaf36c8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uMj208u_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://unikorns-website-production.s3.eu-central-1.amazonaws.com/lighthouse_score_5cefaf36c8.jpeg" alt="Screenshot that represents one hundred points in each lighthouse audit result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LAMP websites could be optimized too, but it requires a lot of hard work, and the result is not always that good. JAMstack is well optimized on start, so it‚Äôs super cost-efficient for the client.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Besides the fact that Jamstack is a relatively new player, it is going to be a game-changer. The community and ecosystem are rapidly evolving and constantly expanding possibilities for creating static websites. &lt;/p&gt;

&lt;p&gt;If you have any questions and concerns, we are always happy to answer, help, consult, and just talk about JAMstack and headless approach as such. Feel free to write us at &lt;a href="//mailto:hello@unikorns.work"&gt;hello@unikorns.work&lt;/a&gt; or check out our &lt;a href="https://www.unikorns.work/magazine"&gt;magazine&lt;/a&gt; about development, web design, and SEO.&lt;/p&gt;

&lt;p&gt;Let's make the internet better together!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Flask Tutorial - The Interactive way, Ask Me Anything for three hours</title>
      <author>Sm0ke</author>
      <pubDate>Thu, 14 Jan 2021 17:31:24 +0000</pubDate>
      <link>https://dev.to/sm0ke/flask-tutorial-the-interactive-way-ask-me-anything-for-three-hours-56a1</link>
      <guid>https://dev.to/sm0ke/flask-tutorial-the-interactive-way-ask-me-anything-for-three-hours-56a1</guid>
      <description>&lt;p&gt;Hello Coders,&lt;/p&gt;

&lt;p&gt;My (nick)name is Sm0ke and I'm using &lt;strong&gt;&lt;a href="https://palletsprojects.com/p/flask/"&gt;Flask&lt;/a&gt;&lt;/strong&gt; for more than 5 years to code almost anything: simple one-page projects, API's and eCommerce-based platforms. The deployments were made starting with Apache, Nginx, Gunicorn, and uWSGI .. etc. Regarding this &lt;strong&gt;Flask Tutorial&lt;/strong&gt;, the content will be provided based on your questions, starting with just a few links. &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks in advance for your ... questions!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;I'll be around here for 3hours - feel free to ask me anything. During this timeframe I'll do my best to provide quality answers based on my practical knowledge - &lt;strong&gt;Some Flask-related&lt;/strong&gt; links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://palletsprojects.com/p/flask/"&gt;Flask&lt;/a&gt; - the official website&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flask.palletsprojects.com/en/1.1.x/"&gt;Flask Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/tutorial-flask"&gt;Flask Tutorial&lt;/a&gt; - (Github) Content provided by experienced developers.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.appseed.us/flask-how-to-code-simple-tasks/"&gt;Flask - A list of useful ‚ÄúHOW TO‚Äôs‚Äù&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://blog.appseed.us/flask-cheat-sheet-and-free-templates-63zo/"&gt;Flask Cheat Sheet&lt;/a&gt; - And FREE samples&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;Suggested Topics:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deployment on CentOS, Ubuntu using Apache/Nginx&lt;/li&gt;
&lt;li&gt;Start app using Gunicorn, uWSGI&lt;/li&gt;
&lt;li&gt;What is WSGI&lt;/li&gt;
&lt;li&gt;How to structure a project&lt;/li&gt;
&lt;li&gt;ORM - how to use it and manage DB information with ease&lt;/li&gt;
&lt;li&gt;Migrations - using &lt;a href="https://flask-migrate.readthedocs.io/en/latest/#flask-migrate"&gt;Flask Migration&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Flask Admin - using roles in a Flask application&lt;/li&gt;
&lt;li&gt;Protecting routes in Flask&lt;/li&gt;
&lt;li&gt;Session-based authentication via &lt;a href="https://flask-login.readthedocs.io/en/latest/#flask-login"&gt;Flask-Login&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Using the Flask CLI&lt;/li&gt;
&lt;li&gt;Create custom (CLI) commands using &lt;strong&gt;&lt;a href="https://click.palletsprojects.com/"&gt;Click&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Create tables dynamically - &lt;strong&gt;at first request&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>flask</category>
      <category>webdev</category>
      <category>python</category>
    </item>
  </channel>
</rss>
