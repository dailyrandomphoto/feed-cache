<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to implement Clean Architecture with Laravel</title>
      <author>Benjamin Delespierre</author>
      <pubDate>Wed, 04 Aug 2021 21:44:51 +0000</pubDate>
      <link>https://dev.to/bdelespierre/how-to-implement-clean-architecture-with-laravel-2f2i</link>
      <guid>https://dev.to/bdelespierre/how-to-implement-clean-architecture-with-laravel-2f2i</guid>
      <description>&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Robert_C._Martin"&gt;Uncle Bob&lt;/a&gt;'s &lt;a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html"&gt;Clean Architecture&lt;/a&gt; is quite the hype right now in the architects' world. But when it comes to &lt;em&gt;actual implementations&lt;/em&gt;, nothing notable has been proposed for &lt;a href="https://laravel.com/"&gt;Laravel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And that's understandable: Laravel's &lt;a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller"&gt;MVC&lt;/a&gt; architecture and its tendency to let you cross layers all the time using &lt;a href="https://laravel.com/docs/8.x/facades"&gt;Facades&lt;/a&gt; doesn't help designing clean, decoupled software parts.&lt;/p&gt;

&lt;p&gt;So today, I'm going to present you a working implementation of the Clean Architecture principles &lt;strong&gt;inside a Laravel app&lt;/strong&gt;, as explained in &lt;a href="https://g.co/kgs/ktzWmJ"&gt;The Clean Architecture&lt;/a&gt; by &lt;a href="https://en.wikipedia.org/wiki/Robert_C._Martin"&gt;Robert C. Martin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The complete, working implementation of the concepts explained here is available on my &lt;a href="https://github.com/bdelespierre/laravel-clean-architecture-demo"&gt;GitHub repository&lt;/a&gt;. I recommend you have a look at the actual code while reading this article.&lt;/p&gt;

&lt;p&gt;For once, let's get our hands &lt;em&gt;clean&lt;/em&gt; üëç&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#it-all-started-with-a-diagram"&gt;
  &lt;/a&gt;
  It all started with a diagram
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_CV4sZkB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1rvpoj6f7ynohc7nrtx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_CV4sZkB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1rvpoj6f7ynohc7nrtx.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The architecture must support the use cases. [...] This is the first concern of the architect, and the first priority of the architecture.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;small&gt;(&lt;a href="https://g.co/kgs/ktzWmJ"&gt;The Clean Architecture&lt;/a&gt; chapter 16, p148.)&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;If you've never heard of use cases, you can think of it as a &lt;em&gt;feature&lt;/em&gt;, the capacity of a system to do something meaningful. &lt;a href="https://en.wikipedia.org/wiki/Unified_Modeling_Language"&gt;UML&lt;/a&gt; let you describe them using the well-named &lt;a href="https://en.wikipedia.org/wiki/Use_case_diagram"&gt;Use Case Diagrams&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In CA, use-cases are at the heart of the application. They're the &lt;strong&gt;microchip&lt;/strong&gt; that controls the machinery of your app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-how-are-we-supposed-to-implement-those-use-cases-then"&gt;
  &lt;/a&gt;
  So, how are we supposed to implement those use cases then?
&lt;/h2&gt;

&lt;p&gt;Glad you asked! Here's a second diagram:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XO7hLyxf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ui2ok52dr7zgxrygkmbi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XO7hLyxf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ui2ok52dr7zgxrygkmbi.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Let me explain briefly, and we'll dive into the &lt;em&gt;actual code&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The pink line is the &lt;em&gt;flow of control&lt;/em&gt;; it represents the order in which the different &lt;em&gt;components&lt;/em&gt; are being executed. First, the user changes something on the view (for instance, he submits a registration form). This interaction becomes a &lt;code&gt;Request&lt;/code&gt; object. The controller reads it and produces a &lt;code&gt;RequestModel&lt;/code&gt; to be used by the &lt;code&gt;UseCaseInteractor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;UseCaseInteractor&lt;/code&gt; then does its thing (for instance, creates the new user), prepares a response in the form of a &lt;code&gt;ResponseModel&lt;/code&gt;, and passes it to the &lt;code&gt;Presenter&lt;/code&gt;. Which in turn updates the view through a &lt;code&gt;ViewModel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Wow, that's a lot üòµ That's probably the main criticism made to CA; it's &lt;strong&gt;lenghty&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;The call hierarchy looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Controller(Request)
  ‚§∑ Interactor(RequestModel)
      ‚§∑ Presenter(ResponseModel)
          ‚§∑ ViewModel
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-about-the-ports"&gt;
  &lt;/a&gt;
  What about the ports?
&lt;/h2&gt;

&lt;p&gt;I can see you're quite the observer! For the &lt;strong&gt;low lever layers&lt;/strong&gt; (the Use Cases and the Entities, often referred to as the &lt;strong&gt;Domain&lt;/strong&gt;, and represented as the red and yellow circles in the schema above) to be &lt;strong&gt;decoupled&lt;/strong&gt; from the &lt;strong&gt;high-level layers&lt;/strong&gt; (the framework, represented as the blue circle), we need &lt;strong&gt;adapters&lt;/strong&gt; (the green circle). Their job is to convey messages between high and low layers using their respective API and contracts (or interfaces).&lt;/p&gt;

&lt;p&gt;Adapters are absolutely crucial in CA. They guarantee that changes in the framework won't &lt;em&gt;require&lt;/em&gt; changes in the domain and vice-versa. In CA, we want our use cases to be abstracted from the framework (the actual implementation) so that both can change at will without propagating the changes on other layers.&lt;/p&gt;

&lt;p&gt;A traditional PHP/HTML application designed with clean architecture can therefore be transformed into a REST API &lt;strong&gt;only&lt;/strong&gt; by changing its controllers and presenters - &lt;strong&gt;the Use Cases would remain untouched!&lt;/strong&gt; Or you could have both HTML + REST side by side using the same Use Cases. That's pretty neat if you ask me ü§©&lt;/p&gt;

&lt;p&gt;To do that, we need to &lt;em&gt;"force"&lt;/em&gt; the adapter to &lt;em&gt;"behave"&lt;/em&gt; the way each layer needs it to behave. We're going to use interfaces to define inputs and output &lt;strong&gt;ports&lt;/strong&gt;. They say, in essence, &lt;em&gt;"if you want to talk to me, you're going to have to do it this way!"&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blah-blah-blah-i-want-to-see-some-code"&gt;
  &lt;/a&gt;
  Blah blah blah. I want to see some code!
&lt;/h2&gt;

&lt;p&gt;Since the &lt;code&gt;UseCaseInteractor&lt;/code&gt; will be at the heart of everything, let's start with this one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CreateUserInteractor&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;CreateUserInputPort&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;CreateUserOutputPort&lt;/span&gt; &lt;span class="nv"&gt;$output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;UserRepository&lt;/span&gt; &lt;span class="nv"&gt;$repository&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;UserFactory&lt;/span&gt; &lt;span class="nv"&gt;$factory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;CreateUserRequestModel&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;ViewModel&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/* @var UserEntity */&lt;/span&gt;
        &lt;span class="nv"&gt;$user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
            &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="s1"&gt;'email'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getEmail&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;userAlreadyExists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CreateUserResponseModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PasswordValueObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getPassword&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Exception&lt;/span&gt; &lt;span class="nv"&gt;$e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;unableToCreateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CreateUserResponseModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nv"&gt;$e&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;userCreated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CreateUserResponseModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are 3 things we need to pay attention to here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The interactor &lt;strong&gt;implements&lt;/strong&gt; the &lt;code&gt;CreateUserInputPort&lt;/code&gt; interface,&lt;/li&gt;
&lt;li&gt;The interactor &lt;strong&gt;depends on&lt;/strong&gt; the &lt;code&gt;CreateUserOutputPort&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;The interactor doesn't make the &lt;code&gt;ViewModel&lt;/code&gt; himself, instead it &lt;strong&gt;tells&lt;/strong&gt; the presenter to do it,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since the &lt;code&gt;Presenter&lt;/code&gt; (abstracted here by &lt;code&gt;CreateUserOutputPort&lt;/code&gt;) is located in the adapters (green) layer, calling it from the &lt;code&gt;CreateUserInteractor&lt;/code&gt; is indeed an excellent example of &lt;a href="https://en.wikipedia.org/wiki/Inversion_of_control"&gt;&lt;strong&gt;inversion of control&lt;/strong&gt;&lt;/a&gt;: the framework isn't &lt;em&gt;controlling&lt;/em&gt; the use cases, the use cases are &lt;em&gt;controlling&lt;/em&gt; the framework.&lt;/p&gt;

&lt;p&gt;If you find it too boringly complicated, forget all that and consider that all the &lt;em&gt;meaningful decisions&lt;/em&gt; are being made at the use case level - including choosing the response &lt;em&gt;path&lt;/em&gt; (&lt;code&gt;userCreated&lt;/code&gt;, &lt;code&gt;userAlreadyExists&lt;/code&gt;, or &lt;code&gt;unableToCreateUSer&lt;/code&gt;). The controller and the presenters are just obedient slaves, devoid of business logic.&lt;/p&gt;

&lt;p&gt;We can never rehearse it enough so sing it with me: &lt;strong&gt;CONTROLLERS üëè SHOULD üëè NOT üëè CONTAIN üëè BUSINESS üëè LOGIC üëè&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-how-does-it-look-from-the-controllers-perspective"&gt;
  &lt;/a&gt;
  So how does it look from the controller's perspective?
&lt;/h2&gt;

&lt;p&gt;For the controller, life is simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CreateUserController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;CreateUserInputPort&lt;/span&gt; &lt;span class="nv"&gt;$interactor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;CreateUserRequest&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$viewModel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;interactor&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CreateUserRequestModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;validated&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$viewModel&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getResponse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see it relies on the &lt;code&gt;CreateUserInputPort&lt;/code&gt; abstraction instead of the actual &lt;code&gt;CreateUserInteractor&lt;/code&gt; implementation. It gives us the flexibility to change the use case at will and make the controller testable. More on that later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#okay-thats-very-simple-and-stupid-indeed-what-about-the-presenter"&gt;
  &lt;/a&gt;
  Okay, that's very simple and stupid indeed. What about the presenter?
&lt;/h2&gt;

&lt;p&gt;Again, very straightforward:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CreateUserHttpPresenter&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;CreateUserOutputPort&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;userCreated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;CreateUserResponseModel&lt;/span&gt; &lt;span class="nv"&gt;$model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;ViewModel&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// HttpResponseViewModel is just a "wrapper" for an Illuminate\Http\Response&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;HttpResponseViewModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'user.show'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'user'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$model&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;userAlreadyExists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;CreateUserResponseModel&lt;/span&gt; &lt;span class="nv"&gt;$model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;ViewModel&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;HttpResponseViewModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nf"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'user.create'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;withErrors&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'create-user'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"User &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$model&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getEmail&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; alreay exists."&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;unableToCreateUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;CreateUserResponseModel&lt;/span&gt; &lt;span class="nv"&gt;$model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Throwable&lt;/span&gt; &lt;span class="nv"&gt;$e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ViewModel&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'app.debug'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// rethrow and let Laravel display the error&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nv"&gt;$e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;HttpResponseViewModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nf"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'user.create'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;withErrors&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'create-user'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"Error occured while creating user &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$model&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Traditionally, all that code would have been &lt;code&gt;ifs&lt;/code&gt; at the controller's end. Which would have forced the use case to find a way to &lt;em&gt;"tell"&lt;/em&gt; the controller what happened (using &lt;code&gt;$user-&amp;gt;wasRecentlyCreated&lt;/code&gt; or by throwing exceptions, for example.)&lt;/p&gt;

&lt;p&gt;Using presenters controlled by the use case allows us to choose and change the outcomes without touching the controller. How great is that?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-everything-relies-on-abstractions-i-imagine-the-container-is-going-get-involved-at-some-point"&gt;
  &lt;/a&gt;
  So everything relies on abstractions, I imagine the container is going get involved at some point?
&lt;/h2&gt;

&lt;p&gt;You're absolutely right, my good friend! It pleases me to be in good company today.&lt;/p&gt;

&lt;p&gt;Here's how to wire all that in &lt;code&gt;app/Providers/AppServiceProvider.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AppServiceProvider&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;ServiceProvider&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cd"&gt;/**
     * Register any application services.
     *
     * @return void
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// wire the CreateUser use case to HTTP&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CreateUserController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;needs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CreateUserInputPort&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;give&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CreateUserInteractor&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="s1"&gt;'output'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CreateUserHttpPresenter&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;


        &lt;span class="c1"&gt;// wire the CreateUser use case to CLI&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CreateUserCommand&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;needs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CreateUserInputPort&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;give&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CreateUserInteractor&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                    &lt;span class="s1"&gt;'output'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$app&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CreateUserCliPresenter&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I added the CLI variant to demonstrate how easy it is to swap the presenter to make the use case return different &lt;code&gt;ViewModel&lt;/code&gt; instances. Have a look a &lt;a href="https://github.com/bdelespierre/laravel-clean-architecture-demo"&gt;the actual implementation&lt;/a&gt; for more details üëç&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#can-i-test-this"&gt;
  &lt;/a&gt;
  Can I test this?
&lt;/h2&gt;

&lt;p&gt;Oh my! It's &lt;strong&gt;begging you to!&lt;/strong&gt; Another good thing about CA is that it relies so much on abstractions it makes testing a breeze.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CreateUserUseCaseTest&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;TestCase&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;ProvidesUsers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cd"&gt;/**
     * @dataProvider userDataProvider
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;testInteractor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CreateUserInteractor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;mockCreateUserPresenter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$responseModel&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;mockUserRepository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;mockUserFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;mockUserEntity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;mockRequestModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;assertUserMatches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$responseModel&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The complete test class is available &lt;a href="https://github.com/bdelespierre/laravel-clean-architecture-demo/blob/master/tests/Unit/CreateUserUseCaseTest.php"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I use &lt;a href="https://github.com/mockery/mockery"&gt;Mockery&lt;/a&gt; for, well, mocking, but it will work with anything. It might seem like a lot of code, but it's actually quite simple to write, and it will give you 100% coverage of your use cases effortlessly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#isnt-this-implementation-slightly-different-from-the-book"&gt;
  &lt;/a&gt;
  Isn't this implementation slightly different from the book?
&lt;/h2&gt;

&lt;p&gt;Yes, it is. You see CA has been designed by Java people. And, in most cases, in a Java program, if you want to update the view, you can do so directly from the &lt;code&gt;Presenter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But not in PHP. Because we don't fully control the view and because the frameworks are structured around the concept of controllers returning a response.&lt;/p&gt;

&lt;p&gt;So I had to adapt the principles and make the &lt;code&gt;ViewModel&lt;/code&gt; &lt;em&gt;climb the call stack&lt;/em&gt; up to the controller to return a proper response. If you can come up with a better design, please let me know in the comments üôè&lt;/p&gt;




&lt;p&gt;Would you please let me know what you think in the comments? &lt;strong&gt;Your opinion matters to me&lt;/strong&gt;, for I write those articles to challenge my vision and learn new things every day.&lt;/p&gt;

&lt;p&gt;You are, of course, welcome to suggest changes to the demo repository by submitting a &lt;a href="https://github.com/bdelespierre/laravel-clean-architecture-demo/pulls"&gt;pull-request&lt;/a&gt;. Your contribution is much appreciated üôè&lt;/p&gt;

&lt;p&gt;This article took me four days of research, implementation, testing, and writing. I would really appreciate a like, a follow, and maybe a share on your social networks üôè&lt;/p&gt;

&lt;p&gt;Thanks, guys, you contribution helps to keep me motivated to write more articles for you üëç&lt;/p&gt;




&lt;p&gt;Further reading:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html"&gt;Clean Coder Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Entity-control-boundary"&gt;Entity-Control-Boundary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://softwareengineering.stackexchange.com/questions/357052/clean-architecture-use-case-containing-the-presenter-or-returning-data"&gt;Clean Architecture: Use case containing the presenter or returning data?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codereview.stackexchange.com/questions/148809/a-button-as-a-clean-architecture-plugin"&gt;A button, as a ‚ÄúClean Architecture‚Äù plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ivencia.com/index.html?/softwarearchitect/chapter1/chapter1.htm"&gt;UML Diagrams cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>laravel</category>
      <category>architecture</category>
      <category>php</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Testing Solidity Smart Contracts</title>
      <author>Nazeeh Vahora</author>
      <pubDate>Wed, 04 Aug 2021 21:34:34 +0000</pubDate>
      <link>https://dev.to/nazeeh21/testing-solidity-smart-contracts-3jho</link>
      <guid>https://dev.to/nazeeh21/testing-solidity-smart-contracts-3jho</guid>
      <description>&lt;p&gt;In the &lt;a href="https://dev.to/nazeeh21/integrate-your-react-app-with-smart-contracts-4o3m"&gt;previous blog&lt;/a&gt;, we discussed deploying our Smart Contract to the &lt;strong&gt;Rinkeby Test Network&lt;/strong&gt; and interacting with it from our front end. &lt;/p&gt;

&lt;p&gt;I decided to write this article on tests as a bonus. You should write these tests before writing the Smart Contract and integrating with the front end.&lt;/p&gt;

&lt;p&gt;One way of testing our Contract is interacting with it manually and testing every scenario. In this, one needs to consider every scenario and test the Contract in that case. Remembering every edge case could be tedious. Also forgetting a single edge case could break our Contract. &lt;/p&gt;

&lt;p&gt;This is not a preferred way of testing. Instead, we should write tests for our Smart Contracts. Writing tests will check our Smart Contract in every possible scenario and ensures our Contract behaves expectedly. If any of the test cases fail, we can fix that edge case during production only. Thus, writing tests for Smart Contracts is necessary.&lt;/p&gt;

&lt;p&gt;So, let's write tests for our &lt;a href="https://dev.to/nazeeh21/develop-your-first-dapp-26dj"&gt;Lottery Contract&lt;/a&gt;. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#note-to-follow-along-refer-to-this-repo"&gt;
  &lt;/a&gt;
  Note: To Follow along, refer to this &lt;a href="https://github.com/Nazeeh21/Lottery-Contract/blob/main/test/Lottery.test.js"&gt;repo&lt;/a&gt;.
&lt;/h4&gt;

&lt;p&gt;Navigate to the &lt;code&gt;lottery-contract&lt;/code&gt; directory we created in the &lt;a href="https://dev.to/nazeeh21/integrate-your-react-app-with-smart-contracts-4o3m"&gt;previous blog&lt;/a&gt; and create an empty directory named &lt;code&gt;test&lt;/code&gt;. Inside the &lt;code&gt;test&lt;/code&gt; directory, create an empty &lt;code&gt;Lottery.test.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;For writing tests, we need to add a dependency to our project. For that run the following command in your root directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;D&lt;/span&gt; &lt;span class="nx"&gt;ganache&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;cli&lt;/span&gt; &lt;span class="nx"&gt;mocha&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have all pre-requisites for writing tests. Now, head on to the &lt;code&gt;Lottery.test.js&lt;/code&gt; file and paste the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;assert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;assert&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ganache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ganache-cli&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Web3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;web3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Web3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ganache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bytecode&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../compile.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;ganache-cli&lt;/code&gt; is a fast and customizable blockchain emulator that allows us to make calls to the blockchain without the overheads of running an actual Ethereum node. This will help us in performing our tests instantaneously.&lt;/p&gt;

&lt;p&gt;For creating an instance of &lt;code&gt;web3&lt;/code&gt;, we have used the provider from &lt;code&gt;ganache&lt;/code&gt; as we will be deploying our Contract to the &lt;code&gt;ganache&lt;/code&gt; local network for testing. Apart from &lt;code&gt;web3&lt;/code&gt;, we have required &lt;code&gt;assert&lt;/code&gt; (a native javascript library) and &lt;strong&gt;interface&lt;/strong&gt; along with the &lt;strong&gt;bytecode&lt;/strong&gt; from our &lt;strong&gt;compiled Contract&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now, paste the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;lottery&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;beforeEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAccounts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;lottery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Contract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;bytecode&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="na"&gt;gas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1000000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have declared two variables namely &lt;code&gt;accounts&lt;/code&gt; and &lt;code&gt;lottery&lt;/code&gt; that will store our &lt;strong&gt;accounts&lt;/strong&gt; and &lt;strong&gt;lottery instance&lt;/strong&gt; respectively.&lt;/p&gt;

&lt;p&gt;After that, we have declared the &lt;code&gt;beforeEach()&lt;/code&gt; function which will execute before every test case. In this function, we are fetching the accounts from the &lt;code&gt;web3&lt;/code&gt; instance and storing them in the &lt;code&gt;accounts&lt;/code&gt; variable.  After that, we have deployed the local instance of our Contract using &lt;code&gt;web3&lt;/code&gt; and stored it in the &lt;code&gt;lottery&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;Now, let's write our first test.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Lottery Contract&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;deploys a contract&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lottery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above we have defined &lt;code&gt;describe()&lt;/code&gt; function. It allows us to gather our tests into separate groupings within the same file, even multiple nested levels. &lt;/p&gt;

&lt;p&gt;In the first argument of our &lt;code&gt;describe()&lt;/code&gt; function, we have passed the name of our test-suite i.e. 'Lottery Contract'. Inside our &lt;code&gt;describe()&lt;/code&gt; function, we have declared an &lt;code&gt;it()&lt;/code&gt; function, inside which we have written our test. This test will ensure that our Contract gets deployed successfully.&lt;/p&gt;

&lt;p&gt;The first argument of the &lt;code&gt;it()&lt;/code&gt; function will accept the name of our test and the second argument will accept the function which runs our test. In this function, we have written &lt;code&gt;assert.ok()&lt;/code&gt; which ensures that the value passed inside this function is not null.&lt;/p&gt;

&lt;p&gt;We have written our first test. Now, let's run our test. For that navigate to the root directory and run the following command in the terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see the following output in your terminal. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dx06rxj7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628104176760/g5tVvNaVp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dx06rxj7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628104176760/g5tVvNaVp.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;tick&lt;/strong&gt; in front of the test name indicates that our test has successfully passed.&lt;br&gt;
Congratulations! You have written your first test.&lt;/p&gt;

&lt;p&gt;Now let's write tests for other scenarios as well. &lt;/p&gt;

&lt;p&gt;For that paste the code from below inside the &lt;code&gt;describe()&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;allows 1 account to enter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;lottery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toWei&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0.02&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ether&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;players&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;lottery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPlayers&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strictEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strictEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This test will check whether our Lottery allows users to enter the Lottery. For that, we are initially entering the lottery by calling the &lt;code&gt;lottery.methods.enter()&lt;/code&gt; method. Following that, we are fetching the players of the lottery by calling the &lt;code&gt;lottery.methods.getPlayers()&lt;/code&gt; method. Our &lt;code&gt;players&lt;/code&gt; variable will be an array containing the addresses of all the players of the contract.&lt;/p&gt;

&lt;p&gt;Now, we have called the &lt;code&gt;assert.strictEqual()&lt;/code&gt; method which ensures that both the arguments passed to it are strictly equal. This test will ensure that we can enter our Lottery successfully.&lt;/p&gt;

&lt;p&gt;Similarly, we'll check for multiple accounts to enter our lottery. For that paste the code from below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;allows multiple accounts to enter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;lottery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toWei&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0.02&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ether&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;lottery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toWei&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0.02&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ether&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;lottery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toWei&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0.02&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ether&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;players&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;lottery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPlayers&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strictEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strictEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strictEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strictEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this test, we are entering the lottery from multiple accounts and after that, we are ensuring that each player can enter the lottery or not by calling the &lt;code&gt;assert.strictEqual()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;After this, we'll write a test to ensure that users can't enter with ethers less than the required amount to enter the lottery. For that, paste the code below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;requires minimum amount of ether to enter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;lottery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This test will make sure that the test fails when a user tries to enter with ethers less than the required amount and pass the test when the user is unable to enter the lottery.&lt;/p&gt;

&lt;p&gt;Following this, we will write a test that tests that only the manager could able to pick a winner.  For that, paste the below code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;only manager can pick winner&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;lottery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pickWinner&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember in our &lt;code&gt;beforeEach()&lt;/code&gt; function, we have deployed the contract using &lt;code&gt;accounts[0]&lt;/code&gt;. Thus, the &lt;code&gt;address&lt;/code&gt; of our manager is the address stored at &lt;code&gt;accounts[0]&lt;/code&gt;. As a result, our test should fail if we try to pick a winner from an account other than &lt;code&gt;accounts[0]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This test will ensure that only our manager is allowed to pick a winner.&lt;/p&gt;

&lt;p&gt;At last comes our final test, which ensures that ethers are sent to the winner of the Contract.&lt;/p&gt;

&lt;p&gt;For that, paste the below test.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sends money to the winner and resets the players array&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;lottery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toWei&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ether&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialBalance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;lottery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pickWinner&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;finalBalance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBalance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;difference&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;finalBalance&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;initialBalance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;difference: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;difference&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;difference&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;web3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toWei&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1.8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ether&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;players&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;lottery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPlayers&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;

    &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strictEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This test ensures that lottery ethers are sent to the winner of the lottery on picking up the winner by the manager of the contract.&lt;/p&gt;

&lt;p&gt;We have successfully written all the necessary tests. Now let's run these tests.  For that, navigate to the root directory and run the &lt;code&gt;yarn test&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;You should see the following output in the terminal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z5O3j7v3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628111071730/8raIOOwQD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z5O3j7v3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628111071730/8raIOOwQD.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! You have successfully written tests for your Smart Contract. These tests provide security that your Contract won't break out.&lt;br&gt;
Now we can be more reliable on your Smart Contracts and can be 100% sure that our Smart Contract will not misbehave.&lt;/p&gt;

&lt;p&gt;Connect with me on &lt;a href="https://twitter.com/Nazeeh21"&gt;twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>ethereum</category>
      <category>solidity</category>
      <category>testing</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Pop!_OS -  The first week!</title>
      <author>Sean Kerwin</author>
      <pubDate>Wed, 04 Aug 2021 21:31:01 +0000</pubDate>
      <link>https://dev.to/seankerwin/pop-os-the-first-week-3k0i</link>
      <guid>https://dev.to/seankerwin/pop-os-the-first-week-3k0i</guid>
      <description>&lt;p&gt;Hey everyone.&lt;/p&gt;

&lt;p&gt;So, I'm an avid Apple Mac user, and I've used macOS as my primary dev environment for over 10 years.&lt;/p&gt;

&lt;p&gt;This has been mostly down to that my employer provided me with a top end Macbook Pro, so I have done everything within the apple ecosystem.&lt;/p&gt;

&lt;p&gt;My current employer, the boss was pretty cool, I could set my mac's up how I wanted, have personal emails/icloud on it, use it for personal stuff and side-work (out of work hours ofcourse), So I've had no real reason to switch.&lt;/p&gt;

&lt;p&gt;I have just taken a new job, and decided that I want my own machine, keep work and personal stuff separated.&lt;/p&gt;

&lt;p&gt;Dell were doing an amazing deal on their outlet website for the XPS range of laptops, and I managed to pickup a brand-new XPS 13 9305 with 16GB Ram, and i7 Quad Core, with 512GB M2 SSD, for ¬£800.&lt;/p&gt;

&lt;p&gt;The only problem is that it came with Windows 10 Home edition. I tried to use Windows with WSL2, but felt like it was a fight to get even the basics to work. Windows lasted less than a day on the laptop before I decided to install Linux.&lt;/p&gt;

&lt;p&gt;I've used Mint/Ubuntu before, and I know of System76 (who make awesome Linux machines by the way!) System76 also have developed Pop!_OS, a Ubuntu/Debian based OS that is, well, fucking amazing!&lt;/p&gt;

&lt;p&gt;It's aimed at developers and is built from the ground up with that in mind. The keyboard shortcuts for multi-tasking is outstanding. I love the tile-view that comes and the global launcher/search makes me feel right at home, just like macOS and its Spotlight.&lt;/p&gt;

&lt;p&gt;Now, for installing it on the XPS, it was a simple case of heading over to the Pop!_OS website and grabbing the correct ISO that you need.&lt;/p&gt;

&lt;p&gt;I grabbed the 21.04 Non Nvidia version (as my laptop just has the Intel Iris XE graphics). Create a bootable USB and installed it on the XPS.&lt;/p&gt;

&lt;p&gt;Aside from turning safe-boot off in the BIOS of the XPS, I did nothing else. Followed the on-screen instructions when installing the OS, I wiped my SSD and only have PopOS! as my main operating system.&lt;/p&gt;

&lt;p&gt;Once it was installed, I opened the Pop!_Shop to let it check for updates and install them.&lt;/p&gt;

&lt;p&gt;So far, I've been running PopOS! for over a week, and haven't had a single issue.&lt;/p&gt;

&lt;p&gt;I have the XPS plugged via USB-C to DisplayPort for a Iiyama 34" Ultrawide running at 144hz, and a Seagate Barracuda Gaming Dock via Thunderbolt (Which has a 4TB Spinning drive and a 512GB M2-SSD inside it) and everything is working perfectly.&lt;/p&gt;

&lt;p&gt;I have things like Docker, PHP, Node, Jetbrains (WebStorm, PhpStorm and DataGrip), Visual Studio Code, Mailspring (For emails) and it even plays nicely with my Corsair Virtuso Headset.&lt;/p&gt;

&lt;p&gt;I could seriously see Pop!_OS replacing my Mac as a daily driver. &lt;/p&gt;

&lt;p&gt;I've never had such a great experience with a Linux distro before.&lt;/p&gt;

&lt;p&gt;You can checkout Pop!_OS here.&lt;br&gt;
&lt;a href="https://pop.system76.com/"&gt;https://pop.system76.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devlive</category>
      <category>linux</category>
    </item>
    <item>
      <title>Welcome Thread - v136</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 04 Aug 2021 21:17:37 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v136-5bnm</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v136-5bnm</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/xT1XGDKwOxacd92rYI/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/xT1XGDKwOxacd92rYI/giphy.gif" alt='Goat saying "heyyyy" via text message'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. üëã &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>Why React? Because it's pretty cool actually. Misunderstood at times, but cool üëç</title>
      <author>Brad Westfall</author>
      <pubDate>Wed, 04 Aug 2021 20:19:56 +0000</pubDate>
      <link>https://dev.to/bradwestfall/why-react-because-it-s-pretty-cool-actually-misunderstood-at-times-but-cool-c8n</link>
      <guid>https://dev.to/bradwestfall/why-react-because-it-s-pretty-cool-actually-misunderstood-at-times-but-cool-c8n</guid>
      <description>&lt;p&gt;A hopefully well received and educational response to "why react sucks" - &lt;a href="https://dev.to/jfbrennan/really-why-react-5958"&gt;https://dev.to/jfbrennan/really-why-react-5958&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JSX templates&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;JSX is not a "templating language", it's actually considered to be the antithesis of one. Templating languages suffer from becoming a DSL (domain specific language) whereby the "language" must recreate things like conditional logic and iterations with some proprietary "template language syntax" that will never be able to do as many things as it's host language.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JSX was added as a way to avoid using React's own createElement API.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Not at all, &lt;code&gt;React.createElement&lt;/code&gt; is the underlying API for React to which JSX was created specifically to compile to. It's not like JSX was created long after React to "avoid something". Instead, the main idea is that any programmatic way of building DOM nodes is messy when it comes to nesting. For example it's horrific in jQuery or vanilla JS. So instead of nesting function calls like this to make DOM nodes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi, welcome to JSX&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;p&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;It's a function call, not a tempesting language&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üéâ You can write this which is also nested function calls:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hi, welcome to JSX&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;It's a function call, not a tempesting language&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use JSX &lt;strong&gt;is&lt;/strong&gt; to call a function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I teach workshops at reacttraining.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)}&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

// compiles to
React.createElement(div, null, message &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; message.substr(0, 7))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And because it &lt;em&gt;is&lt;/em&gt; essentially a function call we can think of props as arguments. We can avoid doing DSL nonsense and have the full power of the host language (JavaScript) by way of JS expressions.&lt;/p&gt;

&lt;p&gt;So why only expressions? ü§î&lt;/p&gt;

&lt;p&gt;Because again, it's a function call. You can't do statements in JSX because you can't do them as arguments to functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Nope, not allowed&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Because it would compile to this:&lt;/span&gt;
&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;JSX is designed to be nested function calls that &lt;em&gt;look&lt;/em&gt; familiar to us like XML or HTML so our eyes don't burn when look at actual nested function calls but also with the easy and power of a full programming language.&lt;/p&gt;

&lt;p&gt;This is why you also can't do this and return two JSX nodes -- because they're function calls:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Compiles to &lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you can't just call two functions back to back&lt;/p&gt;

&lt;p&gt;If you ever see &lt;code&gt;{' '}&lt;/code&gt; in JSX, that's because in HTML (which JSX is not) white space is treated a certain way. More than one whitespace character is reduced down to a single whitespace. Because JSX is a function call, it kinda sucks I'll admin, but you have to do &lt;code&gt;{' '}&lt;/code&gt; in a few scenarios to create whitespace. On a really big project I might have to do that like 4 times, not a big deal.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Because of all this specialness you can't easily port JSX. That rubs me the wrong way. Template code should be easy to port because HTML is a standard.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again, it's &lt;strong&gt;not meant to be HTML&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For example, in JSX you do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A lot of people who are critics of JSX will say "why does it have to be different from HTML...?"&lt;/p&gt;

&lt;p&gt;Did you know "The class is an HTML Attribute, while the className is a DOM Property." - MDN&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/className"&gt;https://developer.mozilla.org/en-US/docs/Web/API/Element/className&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Turns out there's always been a difference between HTML and JS in terms of what an HTML attribute is and the corresponding way to modify that thing in JS. The same is true for &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt;. Some who don't know might complain that in JSX we do &lt;code&gt;&amp;lt;label htmlFor=""&amp;gt;&lt;/code&gt; instead of HTML's &lt;code&gt;&amp;lt;label for=""&amp;gt;&lt;/code&gt;. But again &lt;em&gt;this is how it's done in plain JavaScript&lt;/em&gt;. Checkout the MDN docs for yourself üòâ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/htmlFor"&gt;https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/htmlFor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;For example, the perfectly valid &lt;code&gt;&amp;lt;label for=""&amp;gt;&lt;/code&gt; will not work because for gets parsed as JavaScript. You have to use a funny JSX attribute: &lt;code&gt;&amp;lt;label htmlFor=""&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think we covered that one.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Also, you have to do a funny comment syntax because HTML comment syntax is not allowed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It's not HTML üëÜüèª The reason for the "different" not "funny" comments is because Babel would confuse these comments for being content -- like if you were documenting how HTML comments work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- HTML comment --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;And don't forget to slash your self-closing tags, e.g. &lt;code&gt;&amp;lt;img /&amp;gt;&lt;/code&gt;, even though HTML5 dropped that syntax more than 10 years ago.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Actually not really true. XHTML was going to be a thing in the 2000's so browsers started to implement some of it. The W3C eventually ditched the idea and did HTML5 but not before things like trailing forward slashes were already implemented by most browsers. Today, we can still do "XHTML" style self-closing tags on &lt;code&gt;&amp;lt;img /&amp;gt;&lt;/code&gt; &amp;lt;-- that's valid HTML, it's not "dropped" it's just left over baggage from an old W3C idea that the browsers kept.&lt;/p&gt;

&lt;p&gt;By the way, JSX stands for "JavaScript and &lt;strong&gt;XML&lt;/strong&gt;" -- because it's a JavaScript function call (have I said that already) with XML (not HTML) syntax. In XML you do have to close your self closing tags with a forward slash.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Another one I still don't understand and don't want to understand is: Error: The style prop expects a mapping from style properties to values, not a string.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It's easier to programmatically make inline styles if we express them as an object. And again, since this is a function call‚Ñ¢, we can do that. This feature has also played a big role in developing things like CSS-in-JS which you can decide you don't like or you just don't like that it's an object. But it's not a "ridiculous speed bump".&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[React is an] "unmanageable mess" [because of] Functional or Class-based, controlled or uncontrolled, forwardRef, mixins, HOC, Hooks, etc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's not the point they were making. Because React lost a primitive (mixins) for sharing re-usable business logic when they switched from their original API to classes, the community (not the React library) came up with some patterns to share code, one of those patterns was HoC which has a way of double or triple wrapping your components in other components in order to solve the problem of sharing re-usable code. This meant that when you "look at a typical React application in React DevTools" there's extra wrappers in the component viewer (not the actual DOM). The React team realized for many reasons that not having a primitive way to share code was causing React developers to do things that were a little more messy, so they created hooks to give us a primitive API for sharing code.&lt;/p&gt;

&lt;p&gt;In no way were they trying to say that React is messy &lt;em&gt;because of&lt;/em&gt; that list. This whole section was kind of reaching for things that aren't really there to fit into a narrative.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The fact that there are so many options and types of components confuses me.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Clearly üòï&lt;/p&gt;

&lt;p&gt;There are only two ways to make components -- functions and classes. The vast majority of the React community is embracing functions because of hooks. There are three ways to make functions though in JavaScript so maybe that was confusing? But that's not React's fault.&lt;/p&gt;

&lt;p&gt;Those other things (controlled or uncontrolled, forwardRef, mixins, HOC, Hooks) are not components, they are "features" to which components can have and some of them are alternatives to each other so it's not like all of those are used at the same time. Some are even from different time periods (mixins the first API, Hoc's the abstraction for classes we dont' use because hooks exist now. etc). So it's not like we're sitting around going "Should I use a mixin today or an HoC or a hook".&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When a tool can be used in so many ways it creates doubt in its user. That's why, as the React team admits, "even between experienced React developers [there's disagreement]"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again, there's basically one way to make components since not many are using classes anymore. React is a "library" not a framework. It's not Angular, or Knockout, or Ember (by the way how are those doing) that does the "batteries included" monolithic approach. In React, the reason why two React developers might have a disagreement is because one might want to use Redux and one might want to use context. Let's not be dramatic and act like all the other web communities are 100% on the same page with every single thing. React just lets us choose the tooling that goes on top of React for different architectures. That's a good thing. And by the way, the "disagreements" mean that there's discussion and the best ideas rise to the top. This has not been the case for the monolithic frameworks.&lt;/p&gt;




&lt;p&gt;I stopped reading about there because like I said in the comments, practically every paragraph had wrong or misleading information.&lt;/p&gt;

&lt;p&gt;We all have different tools like we like. That's cool üëç You don't have to like React, I don't mind that. But there were many falsy or misleading things and beginners who don't know any better read this kind of stuff.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>html</category>
      <category>react</category>
      <category>jsx</category>
    </item>
    <item>
      <title>Top 10 Rails Commands We Must Know
</title>
      <author>Shaher Shamroukh</author>
      <pubDate>Wed, 04 Aug 2021 19:54:10 +0000</pubDate>
      <link>https://dev.to/shahershamroukh/top-10-rails-commands-we-must-know-2pb9</link>
      <guid>https://dev.to/shahershamroukh/top-10-rails-commands-we-must-know-2pb9</guid>
      <description>&lt;p&gt;Rails Commands are very helpful and important to develop the application faster &amp;amp; easier and there are some great commands in Rails without whose commands we can‚Äôt even develop the application.&lt;br&gt;
In this guide we are going to explore  some of the best &amp;amp; must known Rails commands which will definitely help every Ruby on Rails developer out there.&lt;br&gt;
So without further ado let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-creating-a-new-application"&gt;
  &lt;/a&gt;
  1- Creating a new application
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;rails new app-name&lt;/code&gt; this command will create a new app.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rails new app-name -d postgresql&lt;/code&gt; specify postgresql as the database of the app.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rails new app-name ‚Äìapi&lt;/code&gt; creates only API application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-running-rails-server"&gt;
  &lt;/a&gt;
  2- Running rails server
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;rails s&lt;/code&gt; which is short for &lt;code&gt;rails server&lt;/code&gt; will run the server and open &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-rails-generator-commands"&gt;
  &lt;/a&gt;
  3- Rails Generator commands
&lt;/h2&gt;

&lt;p&gt;Now the following  commands will help you to create assets, controllers,models, migrations, helpers, jobs, mailers, test files, scaffold, tasks.&lt;br&gt;
so we are going to mention here the most important ones and to see the full list of commands run &lt;code&gt;rails generate -h&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scaffold-generator"&gt;
  &lt;/a&gt;
  Scaffold Generator
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#-raw-rails-g-scaffold-book-name-pricedecimal-endraw-"&gt;
  &lt;/a&gt;
  - &lt;code&gt;rails g scaffold book name price:decimal&lt;/code&gt;
&lt;/h5&gt;

&lt;h3&gt;
  &lt;a href="#model-generator"&gt;
  &lt;/a&gt;
  Model Generator
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#-raw-rails-g-model-modelname-columnnamedatatype-columnname2datatype2-endraw-"&gt;
  &lt;/a&gt;
  - &lt;code&gt;rails g model ModelName column_name:datatype column_name2:datatype2&lt;/code&gt;
&lt;/h5&gt;

&lt;h3&gt;
  &lt;a href="#controller-generator"&gt;
  &lt;/a&gt;
  Controller Generator
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#-raw-rails-g-controller-controllername-action1-action2-endraw-"&gt;
  &lt;/a&gt;
  - &lt;code&gt;rails g controller ControllerName action1 action2&lt;/code&gt;
&lt;/h5&gt;

&lt;h3&gt;
  &lt;a href="#migration-generator-for-adding-columns"&gt;
  &lt;/a&gt;
  Migration Generator for adding columns
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#-raw-rails-g-migration-addnameofcolumntotablename-nameofcolumndatatype-endraw-"&gt;
  &lt;/a&gt;
  - &lt;code&gt;rails g migration add_name_of_column_to_table_name name_of_column:datatype&lt;/code&gt;
&lt;/h5&gt;

&lt;h3&gt;
  &lt;a href="#migration-generator-for-removing-columns"&gt;
  &lt;/a&gt;
  Migration Generator for Removing columns
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#-raw-rails-g-migration-removecolumnnamefromtablename-nameofcolumndatatype-endraw-"&gt;
  &lt;/a&gt;
  - &lt;code&gt;rails g migration remove_column_name_from_table_name name_of_column:datatype&lt;/code&gt;
&lt;/h5&gt;

&lt;h5&gt;
  &lt;a href="#remember-to-run-raw-rails-dbmigrate-endraw-after-all-of-these-commands"&gt;
  &lt;/a&gt;
  Remember to run &lt;code&gt;rails db:migrate&lt;/code&gt; after all of these commands
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://learn.co/lessons/rails-generators-readme"&gt;Here&lt;/a&gt; is a more in-depth discussion of what files each of these generators create, and when they are the most useful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-opening-rails-console"&gt;
  &lt;/a&gt;
  4- Opening Rails console
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-rails-console-endraw-or-raw-rails-c-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;rails console&lt;/code&gt; or &lt;code&gt;rails c&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The command let us interact with the application from the command line.&lt;br&gt;
the rails console uses IRB.&lt;br&gt;
This is very useful for testing out quick ideas with code and changing data server-side without touching the website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-rails-destroy-command"&gt;
  &lt;/a&gt;
  5- Rails destroy command
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;rails destroy&lt;/code&gt; or &lt;code&gt;rails d&lt;/code&gt; command is the opposite of generate.&lt;br&gt;
It'll figure out what generate did, and undo it.&lt;br&gt;
for example this command &lt;code&gt;rails g model ModelName&lt;/code&gt; will generate the model and to destroy this model all we do is &lt;code&gt;rails d model ModelName&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-rails-about-command"&gt;
  &lt;/a&gt;
  6- Rails about command
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;rails about&lt;/code&gt; command will give us all the information we need about the current application as  Ruby, RubyGems, Rails, the subcomponents, application's folder, the current environment name, Middleware, app's database adapter, and schema version.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-rails-db-commands"&gt;
  &lt;/a&gt;
  7- Rails db commands
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;rails db&lt;/code&gt; we use this command to create, reset, drop, run the migration and more, checkout the migrations guide &lt;a href="https://guides.rubyonrails.org/active_record_migrations.html"&gt;Here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-displaying-all-rails-routes"&gt;
  &lt;/a&gt;
  8- Displaying all Rails routes
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;rails routes&lt;/code&gt; command will list all of your defined routes in a nicely organized way, and that is really useful for tracking down routing problems in the application, or giving you a good overview of the URLs in an app you're trying to get familiar with.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-running-rails-test"&gt;
  &lt;/a&gt;
  9- Running Rails test
&lt;/h2&gt;

&lt;p&gt;As we know Rails comes with a test framework called minitest.  The &lt;code&gt;rails test&lt;/code&gt; will run the different tests in the app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-bundle-update"&gt;
  &lt;/a&gt;
  10- bundle update
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;bundle update&lt;/code&gt; command will update all of your Gems to match the Gemfile, If you modify the Gemfile in a project in order to include new or different Ruby Gems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;The Rails Command Line &lt;a href="https://guides.rubyonrails.org/command_line.html#rails-generate"&gt;Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also &lt;a href="https://shannoncrabill.com/blog/ruby-on-rails-singular-or-plural-generator-cheat-sheet/"&gt;Here&lt;/a&gt; is a Cheat-sheet for Singular or Plural? in Ruby on Rails.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;You‚Äôve learned about the most useful command in rails so you can quickly jumpstart a new Rails application to practice with.&lt;/p&gt;

&lt;p&gt;Also with practice those commands will be second to nature for you.&lt;/p&gt;

&lt;p&gt;Thanks for reading! &lt;/p&gt;

</description>
      <category>rails</category>
      <category>railscommands</category>
      <category>railsgenerator</category>
    </item>
    <item>
      <title>6 Useful Tips from Visitors To Improve your Portfolio üå±üöÄ</title>
      <author>Madza</author>
      <pubDate>Wed, 04 Aug 2021 19:10:24 +0000</pubDate>
      <link>https://dev.to/madza/6-useful-tips-from-visitors-i-used-to-improve-my-portfolio-8nn</link>
      <guid>https://dev.to/madza/6-useful-tips-from-visitors-i-used-to-improve-my-portfolio-8nn</guid>
      <description>&lt;p&gt;Some months ago I posted &lt;a href="https://dev.to/madza/hooray-i-created-my-first-portfolio-36li"&gt;an article&lt;/a&gt; about how I built my first personal &lt;a href="https://madza.dev"&gt;portfolio&lt;/a&gt;. The feedback was pretty awesome and I got some great ideas on how I could improve it. &lt;/p&gt;

&lt;p&gt;Thanks to users &lt;a class="mentioned-user" href="https://dev.to/dyllandry"&gt;@dyllandry&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/cdthomp1"&gt;@cdthomp1&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/sufyaan323"&gt;@sufyaan323&lt;/a&gt;
, and &lt;a class="mentioned-user" href="https://dev.to/zzoukk"&gt;@zzoukk&lt;/a&gt;
  for leaving feedback and recommending most of these changes.&lt;/p&gt;

&lt;p&gt;Lately, I decided to create a new branch on Git and start to work on them. Since the initial version was still deployed, it gave me an opportunity to compare both versions.&lt;/p&gt;

&lt;p&gt;Hopefully, these revisions with before and after images will spark some ideas on how you can improve your portfolio as well.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-scrollable-main-feed"&gt;
  &lt;/a&gt;
  1. Scrollable main feed
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#before"&gt;
  &lt;/a&gt;
  ‚ùåBefore
&lt;/h3&gt;

&lt;p&gt;First, my initial portfolio had a fully static landing page. &lt;/p&gt;

&lt;p&gt;The only way users could access content was to click on the navigation items on the top right, otherwise, they would be left with an impression that the site is empty since there was no scroll.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9D7yTfyj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fnn6vrhyxf1fnrwhove0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9D7yTfyj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fnn6vrhyxf1fnrwhove0.png" alt="Main"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#after"&gt;
  &lt;/a&gt;
  ‚úÖ After
&lt;/h3&gt;

&lt;p&gt;During the revision, I made the landing area scrollable, and now it allows me to highlight the work that I want to present the most. &lt;/p&gt;

&lt;p&gt;The main purpose of the portfolio was to showcase the projects that I've done, thus I decided to showcase both images and the features for 3 projects. Plus there are also 6 highlighted articles.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PkmqMKQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uxtgc17sp27zzt7nimsn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PkmqMKQ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uxtgc17sp27zzt7nimsn.gif" alt="Scroll"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  üîó &lt;a href="https://www.madza.dev/"&gt;LIVE example&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Plus I also configured my CMS (Contentful) to enable or disable any project or article as a highlight by just a tick of a box.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q2lFLpcT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjom2qfhoi3v1s8x2kzf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q2lFLpcT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjom2qfhoi3v1s8x2kzf.png" alt="img"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-visual-blog-cards"&gt;
  &lt;/a&gt;
  2. Visual Blog cards
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#before"&gt;
  &lt;/a&gt;
  ‚ùåBefore
&lt;/h2&gt;

&lt;p&gt;The blog cards of the first version consisted of just the title and description with no visual representation of the article.&lt;/p&gt;

&lt;p&gt;Obviously, this did not help to entertain the reader and keep the visitors' attention. See the initial version below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eGkfcY8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.madza.dev/uploads/2021/03/1616510964_1902x918.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eGkfcY8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.madza.dev/uploads/2021/03/1616510964_1902x918.png" alt="Blog Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#after"&gt;
  &lt;/a&gt;
  ‚úÖ After
&lt;/h2&gt;

&lt;p&gt;During the revision, I focused on the image cover, so that it does not break the existing card layout, looks good on the dark background, and is responsive for mobile devices. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UHscmGS5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sk25p69k4wdulalfznnk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UHscmGS5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sk25p69k4wdulalfznnk.gif" alt="Blog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  üîó &lt;a href="https://www.madza.dev/blog"&gt;LIVE example&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#3-animated-project-cards"&gt;
  &lt;/a&gt;
  3. Animated Project cards
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#before"&gt;
  &lt;/a&gt;
  ‚ùåBefore
&lt;/h2&gt;

&lt;p&gt;Similarly, as the blog cards, project cards did not include any visuals either.&lt;/p&gt;

&lt;p&gt;This was especially bad for projects, as no one really wanted to click through each and every project just to see what it looks like. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MmKeEAVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.madza.dev/uploads/2021/03/1616510532_1920x937.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MmKeEAVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.madza.dev/uploads/2021/03/1616510532_1920x937.png" alt="Projects Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#after"&gt;
  &lt;/a&gt;
  ‚úÖ After
&lt;/h2&gt;

&lt;p&gt;So, I decided to include an image for each project.&lt;/p&gt;

&lt;p&gt;I extended it even more by creating GIF images that could prescribe not only the design but the main functionality as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zO0wu5Uu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qa8r93me8jmlnt3i1e8o.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zO0wu5Uu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qa8r93me8jmlnt3i1e8o.gif" alt="img"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  üîó &lt;a href="https://www.madza.dev/code"&gt;LIVE example&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#4-separate-contact-form"&gt;
  &lt;/a&gt;
  4. Separate Contact form
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#before"&gt;
  &lt;/a&gt;
  ‚ùåBefore
&lt;/h2&gt;

&lt;p&gt;The contact functionality on the initial version depended on how well the users had set up their systems. I used a &lt;code&gt;mailto&lt;/code&gt; in href attribute, which could often end up with pop-ups like this asking to configure the email client. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kPQxACQK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/37iuc2spn4nrcii7vji6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kPQxACQK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/37iuc2spn4nrcii7vji6.png" alt="email"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#after"&gt;
  &lt;/a&gt;
  ‚úÖ After
&lt;/h2&gt;

&lt;p&gt;During the revision I created an independent route for contact functionality. I used &lt;a href="https://react-hook-form.com/"&gt;react-hook-form&lt;/a&gt; for forms and &lt;a href="https://sendgrid.com/"&gt;Sendgrid&lt;/a&gt; for actual email service.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XjrWMEhN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sand61ilj8tzqrjvofmz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XjrWMEhN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sand61ilj8tzqrjvofmz.gif" alt="Message"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  üîó &lt;a href="https://www.madza.dev/contact"&gt;LIVE example&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#5-custom-404-page"&gt;
  &lt;/a&gt;
  5. Custom 404 page
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#before"&gt;
  &lt;/a&gt;
  ‚ùåBefore
&lt;/h2&gt;

&lt;p&gt;My initial blog used stock NextJS 404 page. &lt;/p&gt;

&lt;p&gt;Technically the users were informed about non-existing routes, tho they looked too basic and did not match the main theme of the portfolio.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XHeC2cmF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.netlify.com/1c9c8c01b0e5efecef2bfa5c1d72e1fbf57aaf38/f35fd/img/blog/the404.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XHeC2cmF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.netlify.com/1c9c8c01b0e5efecef2bfa5c1d72e1fbf57aaf38/f35fd/img/blog/the404.png" alt="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#after"&gt;
  &lt;/a&gt;
  ‚úÖ After
&lt;/h2&gt;

&lt;p&gt;I took some nice SVG from &lt;a href="https://undraw.co"&gt;Undraw.co&lt;/a&gt;, created a custom style for the page, created a custom warning information, and added a Home button so that users can be redirected to Home.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qJhtMNFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tqf2kzc2cj5rwzg8ob6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qJhtMNFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tqf2kzc2cj5rwzg8ob6.png" alt="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  üîó &lt;a href="https://www.madza.dev/404"&gt;LIVE example&lt;/a&gt;
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#6-other-minor-changes"&gt;
  &lt;/a&gt;
  6. Other minor changes
&lt;/h2&gt;

&lt;p&gt;During the revision, I also fixed scrollbar styling, adjusted code highlighting, added access buttons to source and GitHub in projects, adjusted responsiveness for mobile devices, etc.&lt;/p&gt;




&lt;p&gt;I've merged the revision branch into the master and it's deployed, so you can check the whole portfolio live at &lt;a href="https://madza.dev"&gt;madza.dev&lt;/a&gt;. I will be thankful if have any comments or further feedback. &lt;/p&gt;

&lt;p&gt;My main tip from this article would be to recommend using all the feedback you receive. Together we are building better products. And I believe we all learn by sharing knowledge.&lt;/p&gt;




&lt;p&gt;Writing has always been my passion and it gives me pleasure to help and inspire people. If you have any questions, feel free to reach out!&lt;/p&gt;

&lt;p&gt;Connect me on &lt;a href="https://twitter.com/madzadev"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/madzadev/"&gt;LinkedIn&lt;/a&gt; and &lt;a href="https://github.com/madzadev"&gt;GitHub&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>career</category>
      <category>productivity</category>
      <category>portfolio</category>
    </item>
    <item>
      <title>Using CORS for Cross-Domain Requests</title>
      <author>Mary Gathoni</author>
      <pubDate>Wed, 04 Aug 2021 19:08:47 +0000</pubDate>
      <link>https://dev.to/gathoni/using-cors-for-cross-domain-requests-5h4o</link>
      <guid>https://dev.to/gathoni/using-cors-for-cross-domain-requests-5h4o</guid>
      <description>&lt;p&gt;Cover image by &lt;a href="https://unsplash.com/@internethillary?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Hillary Black&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/developer?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have ever opened your browser's console and you saw &lt;code&gt;No ‚ÄòAccess-Control-Allow-Origin‚Äô header is present on the requesting resource.&lt;/code&gt; error message in all red then this post might help you a bit.&lt;/p&gt;

&lt;p&gt;You get that error when you try to access a resource from another domain using your browser which is not allowed.&lt;/p&gt;

&lt;p&gt;This is due to the same-origin policy which only allows a browser to make requests to the same domain.&lt;/p&gt;

&lt;p&gt;The policy is important as it prevents malicious scripts from accessing resources on other domains. &lt;/p&gt;

&lt;p&gt;For instance, if you are making a request to &lt;code&gt;http://domain1.com&lt;/code&gt; from &lt;code&gt;http://domain1.com/api&lt;/code&gt;, the request will go through.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sczbom8h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625325842715/EqRsdWzlx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sczbom8h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625325842715/EqRsdWzlx.png" alt="server (2).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you instead make the request to another domain say, &lt;code&gt;www.domain2.com/api&lt;/code&gt;, the browser will block your request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RpoappdN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625324223572/qAzh5qfZQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RpoappdN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625324223572/qAzh5qfZQ.png" alt="httpdomain1.com.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So what do you do in a case where you have to make a request to another domain? You use CORS! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-cors-anyway"&gt;
  &lt;/a&gt;
  What is CORS anyway?
&lt;/h2&gt;

&lt;p&gt;CORS is an acronym for Cross-Origin Resource Sharing.&lt;/p&gt;

&lt;p&gt;It allows servers to make cross-domain requests which are otherwise restricted due to the same-origin policy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h2&gt;

&lt;p&gt;Before a browser makes a request to a server, it first sends a preflight request to check whether that domain and request method is allowed.&lt;/p&gt;

&lt;p&gt;If it is, the request is made. If not, the request is blocked. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enabling-cors"&gt;
  &lt;/a&gt;
  Enabling CORS
&lt;/h3&gt;

&lt;p&gt;If you have access to the server, then you can enable cors on it and whitelist the domain you are making the request from.&lt;/p&gt;

&lt;p&gt;You do this by setting the header, Access-Control-Allow-Origin, to a wildcard(*) character such that it allows any domain to make a request or to a specified list of domains. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;{Access-Control-Allow-Origin: '*'}&lt;/code&gt;&lt;br&gt;
or&lt;br&gt;
&lt;code&gt;(Access-Control-Allow-Origin: 'http://domain2.com'}&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-if-you-dont-have-access-to-the-server"&gt;
  &lt;/a&gt;
  What if you don't have access to the server?
&lt;/h3&gt;

&lt;p&gt;You could use a proxy server that will make the request on your behalf. Your origin will therefore be hidden. &lt;/p&gt;

&lt;p&gt;One such proxy is the &lt;strong&gt;cors-anywhere&lt;/strong&gt; proxy. To use it, you only need to prefix the API URL with &lt;a href="https://cors-anywhere.herokuapp.com"&gt;https://cors-anywhere.herokuapp.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our request URL will now look like this, &lt;code&gt;https://cors-anywhere.herokuapp.com/http://domain2.com&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://cors-anywhere.herokuapp.com/www.domain2.com`)
    .then(response =&amp;gt; {
        // response
    })
    .catch(error =&amp;gt; console.log(error))
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is not the best solution though. &lt;br&gt;
Think about this... if the data you are expecting is location-specific, you will get data according to the location of the proxy server and I assume that won't help you as much. &lt;/p&gt;

&lt;p&gt;Also, using a proxy you have no control over can get risky in production. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#create-your-own-server"&gt;
  &lt;/a&gt;
  Create your own server
&lt;/h4&gt;

&lt;p&gt;Using a server-side programming language like node js, you can simply create a server you have control over meaning you can directly enable CORS on it. &lt;/p&gt;

&lt;p&gt;The server to server request works because the &lt;strong&gt;same-origin policy&lt;/strong&gt; does not apply.&lt;/p&gt;

&lt;p&gt;To get access to the data from your script:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Send a request to your server telling it to call the public API&lt;/li&gt;
&lt;li&gt;Your server receives the request because you have enabled cors&lt;/li&gt;
&lt;li&gt;Your server calls the public API&lt;/li&gt;
&lt;li&gt;Since same-origin policy does not apply for server to server requests, it receives a response back&lt;/li&gt;
&lt;li&gt;Your server then sends the response back to you&lt;/li&gt;
&lt;li&gt;You receive and use the response data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ovNzkuDd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625324247193/8cZcvx1E6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ovNzkuDd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625324247193/8cZcvx1E6.png" alt="server.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope this article helped you.&lt;/p&gt;

&lt;p&gt;Happy coding :)&lt;/p&gt;

</description>
      <category>cors</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>INTERACT: The Interactive, Community-driven Conference for Engineering Leaders </title>
      <author>Conor Bronsdon</author>
      <pubDate>Wed, 04 Aug 2021 19:01:50 +0000</pubDate>
      <link>https://dev.to/conorbronsdon/interact-the-interactive-community-driven-conference-for-engineering-leaders-2hee</link>
      <guid>https://dev.to/conorbronsdon/interact-the-interactive-community-driven-conference-for-engineering-leaders-2hee</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S36vJ-m6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2888/0%2AgK5-AFvj53ce9wvf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S36vJ-m6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2888/0%2AgK5-AFvj53ce9wvf.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;INTERACT&lt;/strong&gt; is the biggest thing Dev Interrupted has done yet. An interactive, community-driven, digital conference on September 30th ‚Äî by engineering leaders, for engineering leaders. 1 day, 10 speakers, 100s of engineers and engineering leaders, all free.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-attend"&gt;
  &lt;/a&gt;
  Why attend?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Incredible speakers:&lt;/strong&gt; You‚Äôll hear from engineering leaders who have scaled teams ‚Äî 4 VPs of Engineering, 2 CEOs, and 1 CTO ‚Äî sharing their successes and failures.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;It‚Äôs Interactive:&lt;/strong&gt; We‚Äôre not just talking about live Q&amp;amp;A. Meet the speakers in Discord, vote to influence the sessions, share your opinions, and be part of real-time content discussions with other engineering leaders.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Continuous Community:&lt;/strong&gt; Learning and growing doesn‚Äôt stop when INTERACT is over. The &lt;a href="http://discord.com/invite/devinterrupted"&gt;Dev Interrupted Discord Community &lt;/a&gt;has 1,500+ engineering leaders sharing ideas and helping each other every day.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#register-now"&gt;
  &lt;/a&gt;
  &lt;a href="https://devinterrupted.com/event/interact/?utm_campaign=202109+-+Event+-+DevInterrupted+-+Interact"&gt;Register Now&lt;/a&gt;
&lt;/h2&gt;




&lt;h2&gt;
  &lt;a href="#speaker-lineup"&gt;
  &lt;/a&gt;
  Speaker Lineup
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Maria Gutierrez&lt;/strong&gt; ‚Äî VP of Engineering at Twitter&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Einat Orr&lt;/strong&gt; ‚Äî CEO &amp;amp; Co-Founder of Treeverse (Former VP of Eng.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Yaron Inger&lt;/strong&gt; ‚Äî CTO of LightRicks&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Amir Hozez&lt;/strong&gt;‚Äî VP of R&amp;amp;D at Intsights&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Eyal Levy&lt;/strong&gt; ‚Äî VP of R&amp;amp;D at BigID&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ori Keren&lt;/strong&gt;‚Äî CEO &amp;amp; Co-Founder of LinearB&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Dan Lines&lt;/strong&gt; ‚Äî COO &amp;amp; Co-Founder of LinearB&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Henrik G√ºtle&lt;/strong&gt; ‚Äî GM for Microsoft Azure at Microsoft Canada&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Helen Beal&lt;/strong&gt; ‚Äî DevOps Institute Chief Ambassador&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Nick Hodges&lt;/strong&gt; ‚Äî Dev Advocate, Dev Interrupted&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sessions and more information to be announced over the upcoming weeks ‚Äî &lt;a href="https://devinterrupted.com/event/interact/?utm_campaign=202109+-+Event+-+DevInterrupted+-+Interact"&gt;register now to save your spot&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-interactdi-afterparty-hosted-by-dzone"&gt;
  &lt;/a&gt;
  üéâThe #InteractDI Afterparty: Hosted by Dzone
&lt;/h2&gt;

&lt;p&gt;Immediately following the event, join our growing engineering leadership community for an afterparty in Discord hosted by Dzone. &lt;a href="http://discord.gg/devinterrupted"&gt;Click here to join &lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FySud5aM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AUUSIlkBnRLohMrSj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FySud5aM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AUUSIlkBnRLohMrSj.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;This event wouldn‚Äôt be possible without our Presenting Sponsor, &lt;a href="https://linearb.io/"&gt;LinearB &lt;/a&gt;, and our Presenting Partners, &lt;a href="https://dzone.com/"&gt;DZone &lt;/a&gt;, and &lt;a href="https://daily.dev/"&gt;Daily.dev &lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#presenting-sponsor"&gt;
  &lt;/a&gt;
  Presenting Sponsor
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;About &lt;a href="https://linearb.io/"&gt;LinearB&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Metrics alone don‚Äôt improve dev teams. Software Delivery Intelligence (SDI) helps dev teams continuously improve by turning insight into action. Unlike top-down engineering metrics tools which become shelf-ware, LinearB is a dev-first platform and provides value to every member of the team. Development organizations using LinearB‚Äôs SDI cut their Cycle Time in half after only 90 days. The result for developers is less bureaucracy, fewer interruptions, and more time to build. The result for teams is fewer process bottlenecks and accelerated delivery. Activate Software Delivery Intelligence for your dev team in 5 minutes at linearb.io.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#premier-partners"&gt;
  &lt;/a&gt;
  Premier Partners
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;About &lt;a href="https://dzone.com/"&gt;DZone&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;DZone.com is one of the world‚Äôs largest online communities and a leading publisher of knowledge resources for software developers. Every day, hundreds of thousands of developers come to DZone.com to read about the latest technology trends and learn new technologies, methodologies, and best practices through shared knowledge.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;About &lt;a href="https://daily.dev/"&gt;daily.dev&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The fastest growing online community for developers to stay updated on the best developer news. Together they supercharge developers‚Äô knowledge and empower better software.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#about-dev-interrupted"&gt;
  &lt;/a&gt;
  About &lt;a href="https://devinterrupted.com/"&gt;Dev Interrupted&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Dev Interrupted is the premier community for software engineering leadership and continuous improvement. We publish &lt;a href="https://open.spotify.com/show/7icMkauSvLflWCpQrfafIv?si=qA8zUKpcRiizFnzyAO0How&amp;amp;dl_branch=1"&gt;our podcast &lt;/a&gt;weekly, maintain a &lt;a href="http://discord.gg/devinterrupted"&gt;Discord Community of more than 1,500 engineering leaders &lt;/a&gt;, host &lt;a href="https://devinterrupted.com/events/"&gt;monthly events &lt;/a&gt;, including our new quarterly &lt;a href="https://devinterrupted.com/event/interact/?utm_campaign=202109+-+Event+-+DevInterrupted+-+Interact"&gt;INTERACT conference &lt;/a&gt;, publish articles, create videos, and much more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NISG-j8p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2878/1%2ABAy13fLk6AB3z5sJNtmP4g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NISG-j8p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2878/1%2ABAy13fLk6AB3z5sJNtmP4g.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://devinterrupted.com/interact-the-interactive-community-driven-conference-for-engineering-leaders/"&gt;https://devinterrupted.com&lt;/a&gt; on August 4, 2021.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>leadership</category>
      <category>management</category>
      <category>engineeringleaders</category>
      <category>conference</category>
    </item>
    <item>
      <title>Time and Space, but not relativity :-)</title>
      <author>Vishwa.R</author>
      <pubDate>Wed, 04 Aug 2021 18:55:51 +0000</pubDate>
      <link>https://dev.to/codereaper08/time-and-space-but-not-relativity-2hd5</link>
      <guid>https://dev.to/codereaper08/time-and-space-but-not-relativity-2hd5</guid>
      <description>&lt;p&gt;Before starting this short and brief blog, I have one important thing to do, guessed it?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A BIG THANKS TO ALL MY FOLLOWERS&lt;/strong&gt;, you guys just encourage me to share my little knowledge far and wide. Thanks once again!&lt;/p&gt;

&lt;p&gt;So, let us get into today's topic &lt;strong&gt;Space&lt;/strong&gt; and &lt;strong&gt;Time&lt;/strong&gt; Complexity.(Yeah, it's not physics). We'll see What are they?, Why are they used? And How to use them?&lt;/p&gt;

&lt;p&gt;Let's start with our first question,&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-they"&gt;
  &lt;/a&gt;
  What are they?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4yI2_kLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bitxorbyteshome.files.wordpress.com/2019/11/blog-cover.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4yI2_kLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bitxorbyteshome.files.wordpress.com/2019/11/blog-cover.png" alt="Example illustration"&gt;&lt;/a&gt;&lt;/p&gt;
Image source : https://bitxorbytes.home.blog



&lt;p&gt;&lt;strong&gt;Time complexity&lt;/strong&gt;:&lt;br&gt;
Time complexity is nothing but the amount of time taken by an algorithm for its execution. It is a Time Function (Don't mind a bit of maths here and there).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Space complexity&lt;/strong&gt;:&lt;br&gt;
Space complexity is nothing but the amount of memory used by the algorithm for its execution. Here, one should not include the actual program size, but should consider only the space or memory needed for execution with respect to the inputs passed.&lt;/p&gt;

&lt;p&gt;So with this we proceed to our next question, what is the need for these, let's see about it below.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#why-are-they-used"&gt;
  &lt;/a&gt;
  Why are they used?
&lt;/h2&gt;

&lt;p&gt;So why the need for these Time and Space complexities? Are they that important?&lt;br&gt;
The answer is &lt;strong&gt;YES&lt;/strong&gt;, they are very important and are vital deciding factors in terms of efficiency of the algorithm we design. &lt;/p&gt;

&lt;p&gt;Time complexity calculations shows us some great insights, regarding time, like how much amount of time the algorithm will take and is it suitable for processing large inputs and real word data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
One should note that, time complexity does not give the exact time of execution, as it depends on many factors like OS, programming language and Hardware used. Time complexity gives a time function from which we can infer some valuable insights.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_2sW1hTU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/IQ6O9NQ.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_2sW1hTU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/IQ6O9NQ.jpeg" alt="Illustraion2"&gt;&lt;/a&gt;&lt;/p&gt;
Image source : tutflix.org



&lt;p&gt;Whereas, space complexity tells us a different aspect of the algorithm regarding how much memory or space it'll utilize, and thus it helps in predicting the suitability of its execution on real hardware prior to actual execution.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-use-them"&gt;
  &lt;/a&gt;
  How to use them?
&lt;/h2&gt;

&lt;p&gt;I'll make it clear that, I won't be diving into exact mathematics behind these, but I'll try to explain as brief as possible here. (If you are really interested to know the maths, just comment on the blog, I would be happy to prepare a series explaining exact steps easily)&lt;/p&gt;

&lt;p&gt;So here we sprinkle some exotic JavaScript programs üéâ for our understanding. Let's start with this simple program,&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;So here in this program, we are swapping the values of &lt;strong&gt;a&lt;/strong&gt; and &lt;strong&gt;b&lt;/strong&gt;, for that we use a temporary variable called &lt;strong&gt;temp&lt;/strong&gt;. Let's find the Time and Space complexities for this simple program.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#time-complexity"&gt;
  &lt;/a&gt;
  Time Complexity:
&lt;/h3&gt;

&lt;p&gt;Here I mention each line with line numbers like &lt;em&gt;L1&lt;/em&gt; and &lt;em&gt;L5&lt;/em&gt;. We can also ignore the function definition and function call, as we only care about the logic part. Because, we perform time and space analysis only on algorithms and algorithms only care about logics. So we start from &lt;strong&gt;L3&lt;/strong&gt;, we are doing an initialization here, so it will take less time compared to loops.(loops run over and over and spend high amount of time). We know that the initialization statement uses a constant unit of time (the smallest possible unit, we take it as 1). So the next statement at &lt;strong&gt;L4&lt;/strong&gt; performs an assignment operation, and it also uses a constant time (we take it as 1). And next we at last do another assignment operation at &lt;strong&gt;L5&lt;/strong&gt;, which also uses a constant time, like the previous statements.&lt;/p&gt;

&lt;p&gt;So that's it pretty simple right!, now we just add all those, and we get &lt;strong&gt;1+1+1 = 3&lt;/strong&gt; which is also a constant. So we infer that this program runs in constant time. We also write the time function as, &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         T(n) = O(1) ‚Üí here 1 represents constant.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;There are many notations we could use to better represent the time function, we'll see them in a series of blogs, if you guys are interested.&lt;/p&gt;

&lt;p&gt;So, that is all with time. Let's jump into space complexity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#space-complexity"&gt;
  &lt;/a&gt;
  Space complexity:
&lt;/h3&gt;

&lt;p&gt;Here, we take account for all the variables used, as variables are the memory occupiers. In our very short swapping program, we've got 3 variables. Let us list them below,&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      1. a ‚Üí occupies 1 space
      2. b ‚Üí occupies 1 space
      3. temp ‚Üí occupies 1 space
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;As all the variables occupy 1 space for each of themselves, which means they occupy constant amount of space or memory for their execution. We add all those values &lt;strong&gt;1+1+1 = 3&lt;/strong&gt; and we get 3, which is also a constant value, so we can write the space function as below.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         S(n) = O(1) ‚Üí Here also 1 represents constant
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;So that's it, we've found the time and space functions for a simple swapping program. It would be a little more work, if the program involves arrays and loops. We'll see about loops maybe in the next blog.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed the blog, if you have any comments, just comment, I would be happy to see them, if you like the blog then give a üíñ.&lt;br&gt;
Want a whole series on Time and Space complexity? Please leave a comment about your opinion. Thanks for reading and have a nice day!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#attributions-"&gt;
  &lt;/a&gt;
  Attributions :
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Cover image&lt;/strong&gt; : &lt;br&gt;
Photo by &lt;a href="https://unsplash.com/@bamin?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Pierre Bamin&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/time-and-space?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;br&gt;
 Combined by &lt;strong&gt;ME&lt;/strong&gt; for better context to the title :-)&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@aldebarans?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Aldebaran S&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/space?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>todayilearned</category>
      <category>programming</category>
    </item>
    <item>
      <title>Control your Monorepo üóÑÔ∏è </title>
      <author>Jakub Skoneczny</author>
      <pubDate>Wed, 04 Aug 2021 18:49:31 +0000</pubDate>
      <link>https://dev.to/skona27/control-your-monorepo-2ka6</link>
      <guid>https://dev.to/skona27/control-your-monorepo-2ka6</guid>
      <description>&lt;p&gt;You might have heard the phrase &lt;strong&gt;monorepo&lt;/strong&gt; earlier before. But, for those who haven't heard anything about it, monorepo is an architectural pattern where you keep multiple projects inside a single git repository.&lt;/p&gt;

&lt;p&gt;Imagine working on a semi-large project that includes some back-end, web front-end, and mobile applications. The most common approach would be to create different repositories for each of those applications. Then, developers would work on each part separately, developing, committing, and pushing to those repositories. &lt;/p&gt;

&lt;p&gt;But, as the work goes along, you start to notice some issues with your workflow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you see that you have some code duplication between your projects&lt;/li&gt;
&lt;li&gt;detecting critical/breaking changes became difficult since many problems came up only in the staging environment&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-around-code-duplication"&gt;
  &lt;/a&gt;
  How to get around code duplication?
&lt;/h2&gt;

&lt;p&gt;The most common approach to deal with duplication is to move code "up" and separate it into reusable functions or maybe reusable typings. But, since your whole project consists of three separate repositories, there is no common spot to place reusable code.&lt;/p&gt;

&lt;p&gt;The only way to achieve this opportunity to lift code 'up' is to create another repository for that reusable code. A package or library, which we will keep inside that repository, must be later built and published on the &lt;strong&gt;NPM&lt;/strong&gt; registry.&lt;/p&gt;

&lt;p&gt;Of course, since our two applications would use this package to import and use it, any change in that common library would create a need to publish a new version of that library on &lt;strong&gt;NPM&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We would have to keep track of releases and bump the version of that reusable package accordingly to the changes, probably using semantic versioning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-deal-with-late-bug-detection"&gt;
  &lt;/a&gt;
  How to deal with late bug detection?
&lt;/h2&gt;

&lt;p&gt;Introducing multiple apps and packages in a separate repository to maintain brings more significant problems than keeping proper versioning in mind. Imagine the following situation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you are working on a back-end application, and you need to change the response shape of some endpoint&lt;/li&gt;
&lt;li&gt;you commit your changes, the &lt;strong&gt;PR&lt;/strong&gt; passes all the necessary tests, and your code ships to the staging environment&lt;/li&gt;
&lt;li&gt;after deployment, you realize that part of the front-end application related to that prior endpoint has stopped working üòÆ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Did it happen because you haven't tested your changes locally with the front-end application? Yes. But did it also occur because your workflow is not resilient enough? Also yes!&lt;/p&gt;

&lt;p&gt;It's hard to test everything, so we developers have &lt;strong&gt;CI/CD&lt;/strong&gt; tools to take some weight off our shoulders. &lt;/p&gt;

&lt;p&gt;We create automatic pipelines that run tests and perform code analyses, which are run on push. For example, in our case, we could have had two pipelines configured, one for running all of the checks for the front-end application, the other to do the same but for the back-end application.&lt;/p&gt;

&lt;p&gt;Unfortunately, when it comes to having two separated pipelines for two different applications, the fact that they are passing doesn't give us much confidence. What about that reusable library, which we had moved to a separate repository? Is it even tested? Does the front-end use the same version of that package as the back-end? Those are the type of questions that we lack an answer for. Of course, our code is bug-free, and all the tests are passing, but will those two applications work together?&lt;/p&gt;

&lt;p&gt;Even most minor changes, like extending the shape of a response with the extra field, maybe breaking change if the front-end does some strict runtime validation for static types (runtypes, zod, etc.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#monorepos-to-the-rescue"&gt;
  &lt;/a&gt;
  Monorepos to the rescue
&lt;/h2&gt;

&lt;p&gt;What if we had put our applications together in the same repository? Code duplication would no longer be a problem since we could move all the reusable code to another module or directory. Late bug detection would also not be a problem anymore because the pipelines for our front-end and back-end applications would run simultaneously. Linting, type checking, and static code analysis would also run globally.&lt;/p&gt;

&lt;p&gt;In fact, we would ensure that both our applications would be compatible with each other at any point in time since none of the breaking changes could be done to one package without updating the other ones.&lt;/p&gt;

&lt;p&gt;There are also other advantages of using monorepo over separate repositories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we could have common configs and enforce the style and linting rules across multiple applications,&lt;/li&gt;
&lt;li&gt;developers working on the project would have better visibility into the codebase,&lt;/li&gt;
&lt;li&gt;dependency management would be simplified as we could enforce an exact version of the same package used in multiple applications,&lt;/li&gt;
&lt;li&gt;we could manage our git history better since changes to multiple packages can be packed into a single commit&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages-of-using-monorepo"&gt;
  &lt;/a&gt;
  Disadvantages of using monorepo
&lt;/h2&gt;

&lt;p&gt;Despite many visible pros of using monorepo, this architectural pattern comes with some limitations. The most significant limitation is the lack of control over packages to which developers have access. If all of the applications and packages are stored in the same repository, then the person having access to that repository can now look into the whole codebase. Some companies enforce strict access control and restrict some parts of the app, which is irrelevant to the user.&lt;/p&gt;

&lt;p&gt;The other big concern is performance. Since there is a lot of code in one place, the build time is higher, and there are many commits that Git tracks. watching for changes and rebuilding only the packages that have changed can shorten build times and pipelines. I've heard that some tools allow you to fetch only one package along with its dependencies to speed git locally, but I haven't tested them out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#monorepo-tooling"&gt;
  &lt;/a&gt;
  Monorepo tooling
&lt;/h2&gt;

&lt;p&gt;There are great tools and utilities for constructing monorepo with multiple modules inside and a pleasant developer experience. Here I specify the most popular ones, which I've had an opportunity to get familiar with:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yarn-workspaces"&gt;
  &lt;/a&gt;
  Yarn workspaces
&lt;/h3&gt;

&lt;p&gt;Yarn workspaces link your dependencies together, which means that your packages can depend on one another. In addition, it sets up a single &lt;code&gt;node_modules&lt;/code&gt; folder without cloning dependencies throughout different packages in the project. &lt;/p&gt;

&lt;p&gt;Details on how to set up yarn workspaces can be found on &lt;a href="https://classic.yarnpkg.com/en/docs/workspaces/"&gt;yarn's official docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I would recommend &lt;strong&gt;yarn workspaces&lt;/strong&gt; to anyone who uses &lt;strong&gt;yarn&lt;/strong&gt; as a dependency manager. It is easy to set up and maintain.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nx"&gt;
  &lt;/a&gt;
  Nx
&lt;/h3&gt;

&lt;p&gt;Nx is an advanced set of extensible dev tools for monorepos, emphasizing modern full-stack web technologies. It provides nifty features like incremental builds and generating dependency graphs.&lt;br&gt;
&lt;strong&gt;Nx&lt;/strong&gt; comes with a CLI that allows you to quickly generate and add new packages, applications, or libraries into your project.&lt;/p&gt;

&lt;p&gt;More on that can be found in the &lt;a href="https://nx.dev/latest/react/getting-started/intro"&gt;Nx docs&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rushjs"&gt;
  &lt;/a&gt;
  Rush.js
&lt;/h3&gt;

&lt;p&gt;Rush.js is a robust monorepo infrastructure open sourced by &lt;strong&gt;Microsoft&lt;/strong&gt;. &lt;br&gt;
One of its key features is that &lt;strong&gt;Rush.js&lt;/strong&gt; installs all dependencies for all projects into a shared folder and then uses isolated symlinks to reconstruct an accurate &lt;code&gt;node_modules&lt;/code&gt; folder for each project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rush.js&lt;/strong&gt; also helps to ensure there are no phantom nor duplicated dependencies. Along with the &lt;strong&gt;PNPM&lt;/strong&gt; package manager, it allows you to save disk space by installing your dependencies only once.&lt;/p&gt;

&lt;p&gt;It also allows you to manage your packages, build and publish them. At the present moment, &lt;strong&gt;Rush.js&lt;/strong&gt; is my favorite among other tools that I've mentioned. &lt;/p&gt;

&lt;p&gt;More on &lt;strong&gt;Rush.js&lt;/strong&gt; can be found on the &lt;a href="https://rushjs.io/pages/intro/get_started/"&gt;official docs&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;Monorepo architecture is a controversial architectural pattern. It comes with significant advantages as well as some big challenges. Even though many of the biggest companies use monorepos (&lt;strong&gt;Google, Facebook, Microsoft&lt;/strong&gt;), this pattern has many opponents.&lt;/p&gt;

&lt;p&gt;What do you guys think? Do you have some thoughts about monorepos? Do you have some good or bad experiences with them? I would like to know your opinions, and I am looking forward to the discussion.&lt;/p&gt;

&lt;p&gt;I hope you liked this introduction to monorepos. üôÇ Feel free to comment or ping me with DM! ‚úâÔ∏è&lt;/p&gt;

&lt;p&gt;Thanks for reading! If you are interested in the latest tech news, you can follow my account since I plan to post here regularly. I also tweet on a regular basis so that you can follow &lt;a href="https://twitter.com/SkonecznyJakub"&gt;My Twitter account&lt;/a&gt; as well!&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>codequality</category>
      <category>discuss</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What I want to say about Components composition in React</title>
      <author>simprl</author>
      <pubDate>Wed, 04 Aug 2021 18:41:18 +0000</pubDate>
      <link>https://dev.to/simprl/react-js-components-composition-2lmh</link>
      <guid>https://dev.to/simprl/react-js-components-composition-2lmh</guid>
      <description>&lt;p&gt;After 2 years of working with React I have some experience, which I would like to share. If you just started to learn React, then I hope this article will help you choose the right way of developing your project from 1‚Äì5 forms to a huge set of components and not to get confused.&lt;/p&gt;

&lt;p&gt;If you are already a pro, then probably remember your faults. Or, perhaps, suggest better solutions to the described problems.&lt;br&gt;
This article will talk about my personal opinion on how to organize the composition of the components.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-start"&gt;
  &lt;/a&gt;
  Let‚Äôs start
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs consider some abstract form. We‚Äôll assume that the form has many fields (about 10‚Äì15), but to keep your eyes open, let‚Äôs take a form with 4 fields as an example.&lt;/p&gt;

&lt;p&gt;A multilevel object of this kind arrives at the component‚Äôs input:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;unit1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An inexperienced developer (like me in my first month of working with react) will do all this in a single component where the state will store the values of the inputs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onSave&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onCancel&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt; &lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"form-layout"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"form-field"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Name&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"input"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
        &lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"form-field"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Color&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"input"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; 
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
        &lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"size"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"block-label"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Size&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"form-field"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Width&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"input"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
          &lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"form-field"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Height&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"input"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
          &lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"buttons"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;onSave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Save&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;onCancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Cancel&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Seeing how quickly the developer coped, the customer will offer to make on the basis of this form one more, but that it was without the ‚Äúsize‚Äù block.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;unit1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there are 2 options(both of them are wrong)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can copy the first component and add to it what‚Äôs missing or delete unnecessary things. This is usually happen when a component is not your own and you are afraid of breaking something in it.&lt;/li&gt;
&lt;li&gt;Add additional component settings to the parameters.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If after the implementation of 3‚Äì5 forms, the project is over, then the developer is lucky.&lt;/p&gt;

&lt;p&gt;But this is usually just the beginning, and the number of different forms is only growing...&lt;/p&gt;

&lt;p&gt;Then a similar one is needed, but without the ‚Äúcolor‚Äù block.&lt;br&gt;
Then a similar one, but with a new ‚Äúdescription‚Äù block.&lt;br&gt;
Then you need to make some blocks read-only.&lt;br&gt;
Then a similar form must be inserted into another form ‚Äî sometimes nothing good comes out of this&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#new-forms-by-copying"&gt;
  &lt;/a&gt;
  New forms by copying
&lt;/h2&gt;

&lt;p&gt;A developer who chooses the copying approach will, of course, quickly cope with the implementation of new forms. As long as there are less than 10 of them. But then the mood will gradually fall.&lt;/p&gt;

&lt;p&gt;Especially when redesign happens. The indentation between form blocks can be corrected "a little", the color selection component can be changed. After all, all at once you can not foresee, and many design decisions will have to reconsider after their implementation.&lt;/p&gt;

&lt;p&gt;Here it is important to pay attention to the frequent reference to "similar form". After all, the product is one and all forms must be similar. As a result, you have to do a very uninteresting and routine work of redoing the same thing in each form, and testers by the way will also have to recheck each form.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In general, you get the point. Do not copy similar components.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#new-forms-by-generalization"&gt;
  &lt;/a&gt;
  New forms by generalization
&lt;/h2&gt;

&lt;p&gt;If the developer chose the second way, then of course he‚Äôs on top of the game, you‚Äôll think. He has only a few components that can draw dozens of forms. To fix the indentation throughout the project, or change the ‚Äúcolor‚Äù component, you just need to fix two lines in the code and the tester will only have to check a couple of places.&lt;/p&gt;

&lt;p&gt;But in fact this way created a very complex component.&lt;/p&gt;

&lt;p&gt;It is difficult to use it, because there are a lot of parameters, some have almost the same name, to understand what is responsible for each parameter you have to get into the innards.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt;
  &lt;span class="na"&gt;isNameVisible&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;isNameDisabled&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;nameLabel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Model"&lt;/span&gt;
  &lt;span class="na"&gt;nameType&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"input"&lt;/span&gt;
  &lt;span class="na"&gt;isColorVisible&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;isColorDisabled&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;colorType&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dropdown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;isSizeVisible&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;isHeightVisible&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;isWidthDisabled&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It‚Äôs hard to maintain, too. As a rule, there are complex intertwined conditions inside and adding a new condition can break everything else. Tweaking a component to output one form can break all the others.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Anyway, you get the point. Don‚Äôt make a component with a lot of properties.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To solve the problems of the second option, developers start what? That‚Äôs right. Like real developers, they start developing something that simplifies the configuration of a complex component.&lt;/p&gt;

&lt;p&gt;For example they make a parameter fields (like columns in react-table). And there they pass field parameters: which field is visible, which is not editable, field name.&lt;/p&gt;

&lt;p&gt;The component call turns into this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FIELDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Model&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dropdown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt;
  &lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;FIELDS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a result, the developer is proud of himself. He generalized the settings of all the fields and optimized the internal code of the component: now one function is called for each field, which converts the configuration to the props of the corresponding component. Even the type name renders a different component. A little more and we will have our own framework.&lt;/p&gt;

&lt;p&gt;How cool is that? Too much.&lt;/p&gt;

&lt;p&gt;I hope it doesn‚Äôt turn into something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;FIELDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getInputConfig&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Model&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getDropDownConfig&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getBlockConfig&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getInputNumberConfig&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getInputNumberConfig&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt;
  &lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;FIELDS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Anyway, you get the idea. Do not invent your custom code design&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#new-forms-by-composing-components-and-subforms"&gt;
  &lt;/a&gt;
  New forms by composing components and subforms
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs remember what we are writing on. We already have a React library. We don‚Äôt need to invent any new constructs. The configuration of components in react is described with JSX syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Form1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormPanel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormField&lt;/span&gt; &lt;span class="na"&gt;disabled&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="na"&gt;Model&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Input&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;FormField&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormField&lt;/span&gt; &lt;span class="na"&gt;disabled&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="na"&gt;Color&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;DropDown&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"color"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;FormField&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormPanel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormField&lt;/span&gt; &lt;span class="na"&gt;disabled&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Height"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Number&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"height"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;FormField&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormField&lt;/span&gt; &lt;span class="na"&gt;disabled&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Width"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Number&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"width"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;From&lt;/span&gt; &lt;span class="na"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;FormPanelt&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;FormPanel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It seems we are back to the first option with copying. But in fact we are not. This is a composition that gets rid of the problems of the first two approaches.&lt;/p&gt;

&lt;p&gt;There is a set of bricks from which the form is assembled. Each brick is responsible for something special. Some are in charge of layout and appearance, some are in charge of data input.&lt;/p&gt;

&lt;p&gt;If you need to change the indentation throughout the project, you can do this in the FormField component. If you need to change the work of a drop-down list, you can do it in one place in a component DropDown.&lt;/p&gt;

&lt;p&gt;If you need a similar form, but, for example, so that there was no field ‚Äúcolor‚Äù, then bring the common blocks in separate bricks and build another form.&lt;/p&gt;

&lt;p&gt;Put the Size block into a separate component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormPanel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormField&lt;/span&gt; &lt;span class="na"&gt;disabled&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Height"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Number&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"height"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;FormField&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormField&lt;/span&gt; &lt;span class="na"&gt;disabled&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="na"&gt;Width&lt;/span&gt;&lt;span class="err"&gt;‚Äù&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Number&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"width"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;From&lt;/span&gt; &lt;span class="na"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;FormPanel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make a form with a choice of colors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Form1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormPanel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormField&lt;/span&gt; &lt;span class="na"&gt;disabled&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Color"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;DropDown&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"color"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;FormField&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormField&lt;/span&gt; &lt;span class="na"&gt;disabled&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Model"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Input&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;FormField&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Size&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"size"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;FormPanel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then make a similar form, but without the choice of color:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Form2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormPanel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormField&lt;/span&gt; &lt;span class="na"&gt;disabled&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Model"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Input&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;FormField&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Size&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"size"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;FormPanel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Most importantly, the person who gets this code does not need to deal with the invented configs of the predecessor. Everything is written in JSX, familiar to any react-developer, with parameter hints for each component.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In general, you get the idea. Use JSX and component composition.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#a-few-words-about-state"&gt;
  &lt;/a&gt;
  A few words about State
&lt;/h2&gt;

&lt;p&gt;Now let‚Äôs turn our attention to the state. More precisely, his absence. Once we add the state, we lock the data flow and it becomes harder to reuse the component. All the bricks should be stateless (i.e. without the state). And only on the highest level can a form assembled from bricks be connected to the stack. If the form is complex, it already makes sense to divide it into multiple containers and connect each part to redux.&lt;/p&gt;

&lt;p&gt;Don‚Äôt be lazy to make a separate component of the form. Then you can use it as part of another form, or build a statefull form on it, or a container to connect it to redux.&lt;br&gt;
Of course, bricks can have internal state storages which are not related to the general data flow. For example, the internal state of DropDown is useful to store a flag of whether it‚Äôs expanded or not.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All in all, you get the idea. Separate the components into Stateless and Statefull&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#total"&gt;
  &lt;/a&gt;
  Total
&lt;/h2&gt;

&lt;p&gt;Surprisingly, I periodically encounter all the errors described in the article and the problems that arise from them. I hope you won‚Äôt repeat them and then support of your code will become much easier.&lt;/p&gt;

&lt;p&gt;I will repeat the main points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do not copy similar components. Use the DRY principle.&lt;/li&gt;
&lt;li&gt;Don‚Äôt make components with a large number of properties and functionality. Each component must be responsible for something different (Single Responsibility from SOLID)&lt;/li&gt;
&lt;li&gt;Separate components into Stateless and Statefull.&lt;/li&gt;
&lt;li&gt;Don‚Äôt invent your own code constructions. Use JSX and composition of your components.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In fact, it was a preparatory article, so that the reader could better understand my further thoughts. After all, the main question remains unanswered. How to transfer data from one brick to another? Read about this in the next article.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
