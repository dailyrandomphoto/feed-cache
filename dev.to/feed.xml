<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Introducing ReadUse - A CSS Framework for Readable and Useable Content</title>
      <author>Toheeb Ogunbiyi</author>
      <pubDate>Thu, 07 Oct 2021 15:15:50 +0000</pubDate>
      <link>https://dev.to/toheeb/introducing-readuse-a-css-framework-for-readable-and-useable-content-10d0</link>
      <guid>https://dev.to/toheeb/introducing-readuse-a-css-framework-for-readable-and-useable-content-10d0</guid>
      <description>&lt;p&gt;Earlier, I shared my plan to design &lt;a href="https://toheeb.com"&gt;my website&lt;/a&gt; in public.&lt;/p&gt;

&lt;p&gt;The adventure is to write guides that'll design the website itself, in real time. At the end, I'll have content on web design that uses this very website as a capstone project.&lt;/p&gt;

&lt;p&gt;Wouldn't that be fun?&lt;/p&gt;




&lt;p&gt;To track how the website's visual will evolve over time, I decided to branch off those styles to a package.&lt;/p&gt;

&lt;p&gt;And to make this package useful to anyone, the styles will &lt;strong&gt;only&lt;/strong&gt; be for making contents on a webpage &lt;strong&gt;read&lt;/strong&gt;able and &lt;strong&gt;use&lt;/strong&gt;able. Hence the name: &lt;strong&gt;readuse&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Here's how I see websites. They need to be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;readable &amp;amp; useable&lt;/li&gt;
&lt;li&gt;creative &amp;amp; unique&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ReadUse, a CSS Framework, will take care of the readability and useability part of a website. And let the designer go nuts in making their website unique to their taste. Letting your creativity shine üòÇ&lt;/p&gt;

&lt;p&gt;ReadUse CSS framework will contain two parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A drop-in stylesheet that'll will format content to aid User Experience. Using global styles which aren't bad unless misused&lt;/li&gt;
&lt;li&gt;A Layout Utility stylesheet that contains common layout components.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these make up the Functional layer of any website. How website differs is by the decorative layer. &lt;/p&gt;

&lt;p&gt;Other CSS Frameworks do both. The result of which makes websites look similar. I want ReadUse to be Creativity-Agnostic. I hope I got that grammar combo right. You get my point anyways üòÜ&lt;/p&gt;

&lt;p&gt;Here's my plan:&lt;/p&gt;

&lt;p&gt;üí° I'll be using Github Issues to write and brainstorm on to-dos. A set of them makes a milestone ready for release.&lt;/p&gt;

&lt;p&gt;‚úçÔ∏è My site will contain detailed guides of my research on why &amp;amp; how I'm styling it&lt;/p&gt;

&lt;p&gt;‚ö°Ô∏è You get to see the result of the framework on this very website as well. Everytime!&lt;/p&gt;

&lt;p&gt;Right now, It has crossed its first milestone üöÄ&lt;/p&gt;

&lt;p&gt;v0.1.0 release is a sanity test that says "hello world" üòÇ&lt;/p&gt;

&lt;p&gt;2nd milestone, v0.2.0 release, will provide well-enough styles to make articles I'll write fairly easy to read. &lt;/p&gt;

&lt;p&gt;While future version will provide better UX.&lt;/p&gt;

&lt;p&gt;I'm figuring this out on the go! It's my first open source project! And I'm using it to dive deep in CSS. It isn't ready for public use yet.&lt;/p&gt;

&lt;p&gt;üí° Ask/Teach me anything, it'll help me learn more&lt;/p&gt;

&lt;p&gt;üëâ Follow &lt;a href="https://twitter.com/toheebdotcom"&gt;@toheebdotcom&lt;/a&gt; for updates. &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--HtoedRQh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1427263758238457863/zGI9PlP9_normal.jpg" alt="2 üëã profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        2 üëã
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @toheebdotcom
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Last weekend, I published readuse to &lt;a href="https://twitter.com/npmjs"&gt;@npmjs&lt;/a&gt; üéâ&lt;br&gt;&lt;br&gt;My goal is to dive deep in learning CSS for UI Design by doing.&lt;br&gt;&lt;br&gt;üëâ This CSS Framework will contain ONLY styles for readable &amp;amp; useable contents. It WON'T interfere with the designer's creativity&lt;br&gt;&lt;br&gt;Learn with me or see how things go:
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:00 PM - 04 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1445041045146767360" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1445041045146767360" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1445041045146767360" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
 

&lt;p&gt;üóíÔ∏è Learn more on &lt;a href="https://github.com/toheeb/readuse"&gt;Github&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Toheeb"&gt;
        Toheeb
      &lt;/a&gt; / &lt;a href="https://github.com/Toheeb/readuse"&gt;
        readuse
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A simple CSS framework for making Functional Designs
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
ReadUse&lt;/h1&gt;
&lt;blockquote&gt;
&lt;h2&gt;
üöß This project is under development. üöß
&lt;/h2&gt;
&lt;p&gt;Born out of a personal adventure. The progress, and direction of this project will be based on the Guides I write towards the styling needs of &lt;a href="https://toheeb.com" rel="nofollow"&gt;my website&lt;/a&gt;, where I use it live.&lt;/p&gt;
&lt;p&gt;I'm designing this in public. You can follow along on Twitter at &lt;a href="https://twitter.com/toheebdotcom" rel="nofollow"&gt;@toheebdotcom&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
Why ReadUse?&lt;/h2&gt;
&lt;p&gt;When styling websites, we &lt;strong&gt;repeatedly&lt;/strong&gt; do the following to make content readable and useable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;maintain aesthetics such as the hierarchy of spacing, font sizes, etc.&lt;/li&gt;
&lt;li&gt;lay content multidimensionally. From n-column layout to sticky footer components.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I call these Functional Styles. Every website needs them. And ReadUse abstracts these styles so you can focus on making your designs unique, through your awesome creativity!&lt;/p&gt;
&lt;h2&gt;
How ReadUse compares to other CSS Frameworks?&lt;/h2&gt;
&lt;p&gt;Here's how it compares to Reset stylesheets, Component, Utility or Classless CSS frameworks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Instead of using reset stylesheets, you can enjoy having aesthetic‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Toheeb/readuse"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;üåü Star the repo if you like the adventure ‚úåÔ∏è&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>css</category>
      <category>webdev</category>
      <category>saas</category>
    </item>
    <item>
      <title>5 Quizz explained in Javascript #1</title>
      <author>CodeOz</author>
      <pubDate>Thu, 07 Oct 2021 14:58:21 +0000</pubDate>
      <link>https://dev.to/codeoz/5-quizz-explained-in-javascript-1-59hn</link>
      <guid>https://dev.to/codeoz/5-quizz-explained-in-javascript-1-59hn</guid>
      <description>&lt;p&gt;Welcome to the first javascript quizz!&lt;/p&gt;

&lt;p&gt;You can answer to the question and check the response with the explication!&lt;/p&gt;

&lt;p&gt;Good luck!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1"&gt;
  &lt;/a&gt;
  1
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myself&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;code__oz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;skills&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vuejs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nodejs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;getMySkills&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;skills&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myself&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myself&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMySkills&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What is the output? üëá&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A) &lt;code&gt;code__oz&lt;/code&gt; and &lt;code&gt;['js', 'ts', 'vuejs', 'nodejs']&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;B) &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;C) &lt;code&gt;code__oz&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;D) &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;['js', 'ts', 'vuejs', 'nodejs']&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;.&lt;br&gt;
..&lt;br&gt;
...&lt;br&gt;
....&lt;br&gt;
.....&lt;br&gt;
......&lt;br&gt;
.......&lt;br&gt;
.......&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C&lt;/strong&gt; ‚Üí We have &lt;code&gt;undefined&lt;/code&gt; value since we are using &lt;code&gt;arrow function&lt;/code&gt; and &lt;code&gt;this&lt;/code&gt; in the same context, so the &lt;code&gt;this&lt;/code&gt; keyword refers to its current &lt;strong&gt;surrounding scope&lt;/strong&gt;, unlike regular functions! In a browser context, this refer to window object!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2"&gt;
  &lt;/a&gt;
  2
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tutu&lt;/span&gt;

&lt;span class="nx"&gt;tutu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt;
&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bye&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tutu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What is the output? üëá&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A) &lt;code&gt;undefined&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;B) &lt;code&gt;Bye&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;C) &lt;code&gt;Hello&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;D) &lt;code&gt;ReferenceError&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;.&lt;br&gt;
..&lt;br&gt;
...&lt;br&gt;
....&lt;br&gt;
.....&lt;br&gt;
......&lt;br&gt;
.......&lt;br&gt;
.......&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;B&lt;/strong&gt; ‚Üí In JavaScript, all objects &lt;strong&gt;interact&lt;/strong&gt; by &lt;strong&gt;reference&lt;/strong&gt; when setting them equal to each other. So in this example &lt;code&gt;toto&lt;/code&gt; and &lt;code&gt;tutu&lt;/code&gt; &lt;strong&gt;share the same reference&lt;/strong&gt; so if you change value from one, you will change the &lt;strong&gt;shared reference&lt;/strong&gt; and you will &lt;code&gt;indirectly&lt;/code&gt; change the value of the other variable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3"&gt;
  &lt;/a&gt;
  3
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What is the output? üëá&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A) &lt;code&gt;1 1 2&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;B) &lt;code&gt;1 2 2&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;C) &lt;code&gt;0 1 2&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;D) &lt;code&gt;0 2 2&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;.&lt;br&gt;
..&lt;br&gt;
...&lt;br&gt;
....&lt;br&gt;
.....&lt;br&gt;
......&lt;br&gt;
.......&lt;br&gt;
.......&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;D&lt;/strong&gt; -&amp;gt; The¬†&lt;strong&gt;postfix&lt;/strong&gt;¬†unary operator¬†&lt;code&gt;++&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Returns the value (this returns¬†&lt;code&gt;0&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Increments the value (number is now¬†&lt;code&gt;1&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The¬†&lt;strong&gt;prefix&lt;/strong&gt;¬†unary operator¬†&lt;code&gt;++&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Increments the value (number is now¬†&lt;code&gt;2&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Returns the value (this returns¬†&lt;code&gt;2&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This returns¬†&lt;code&gt;0 2 2&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4"&gt;
  &lt;/a&gt;
  4
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What is the output? üëá&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A) &lt;code&gt;TypeError&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;B) &lt;code&gt;NaN&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;C) &lt;code&gt;"25"&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;D) &lt;code&gt;7&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;.&lt;br&gt;
..&lt;br&gt;
...&lt;br&gt;
....&lt;br&gt;
.....&lt;br&gt;
......&lt;br&gt;
.......&lt;br&gt;
.......&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C&lt;/strong&gt; ‚Üí JavaScript &lt;strong&gt;converts&lt;/strong&gt; the number &lt;code&gt;2&lt;/code&gt; into a &lt;code&gt;string&lt;/code&gt;. It's because during the addition of a &lt;code&gt;numeric type (2)&lt;/code&gt; and a &lt;code&gt;string type ('5')&lt;/code&gt;, the number is &lt;code&gt;treated like a string&lt;/code&gt; ! So we have '2' + '5' ‚Üí '25'&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5"&gt;
  &lt;/a&gt;
  5
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hey !&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What does the &lt;code&gt;setInterval&lt;/code&gt; method return in the browser? üëá&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A) a &lt;code&gt;unique id&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;B) the &lt;code&gt;amount of milliseconds specified&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;C) the &lt;code&gt;passed function&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;D)¬†&lt;code&gt;undefined&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What is the output? üëá&lt;/p&gt;

&lt;p&gt;.&lt;br&gt;
..&lt;br&gt;
...&lt;br&gt;
....&lt;br&gt;
.....&lt;br&gt;
......&lt;br&gt;
.......&lt;br&gt;
.......&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt; -&amp;gt; It returns a &lt;code&gt;unique id&lt;/code&gt;. This id can be used to clear that interval with the &lt;code&gt;clearInterval() function&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Tell me your score in comment! üë®‚Äçüè´&lt;/p&gt;




&lt;p&gt;I hope you like this reading!&lt;/p&gt;

&lt;p&gt;üéÅ You can get my new book &lt;code&gt;Underrated skills in javascript, make the difference&lt;/code&gt; for FREE if you follow me on &lt;a href="https://twitter.com/code__oz"&gt;Twitter&lt;/a&gt; and MP me üòÅ&lt;/p&gt;

&lt;p&gt;Or get it &lt;a href="https://codeoz.gumroad.com/l/RXLYp"&gt;HERE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üéÅ &lt;a href="https://www.getrevue.co/profile/code__oz"&gt;MY NEWSLETTER&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚òïÔ∏è You can &lt;a href="https://www.buymeacoffee.com/CodeoZ"&gt;SUPPORT MY WORKS&lt;/a&gt; üôè&lt;/p&gt;

&lt;p&gt;üèÉ‚Äç‚ôÇÔ∏è You can follow me on üëá&lt;/p&gt;

&lt;p&gt;üïä Twitter : &lt;a href="https://twitter.com/code__oz"&gt;https://twitter.com/code__oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üë®‚Äçüíª Github: &lt;a href="https://github.com/Code-Oz"&gt;https://github.com/Code-Oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you can mark üîñ this article!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>The Best UX Design Trends for Fintech 2021</title>
      <author>Explain Ninja</author>
      <pubDate>Thu, 07 Oct 2021 14:53:31 +0000</pubDate>
      <link>https://dev.to/explain_ninja/the-best-ux-design-trends-for-fintech-2021-5de8</link>
      <guid>https://dev.to/explain_ninja/the-best-ux-design-trends-for-fintech-2021-5de8</guid>
      <description>&lt;p&gt;You often need to create great interfaces of high quality for your Fintech startup or your graphic design for digital business transformation in 2021, and you do not know where to start. Look through the significant industry trends to make the final decision.¬†¬†&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;The beauty is that the annual trend formation makes it possible to reinvent your business's design completely. And given the challenging 2020, the trends of 2021 are a breath of fresh air for everyone.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;¬†Five useful UX trends to look for in 2021&lt;/h2&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;Now the visual component of any business is no less important for promotion than its content and you can‚Äôt simply ignore it. To know which web design trends of 2021 will help you modernize your brand, grab user attention, and increase conversions, look through these UX trends for good.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;1.¬†¬†¬†¬†¬† Personalized interfaces&lt;/h3&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;The ability to personalize the interface and make it individual has come to the taste of many, especially in mobile applications. Apple eagerly picked up this trend, creating widgets in different sizes and with other content in the latest iOS 14 update. This also includes familiar "dark" and "light" themes.&lt;/p&gt;

&lt;p&gt;In addition, polls are also may be a part of the user's choice and personalized interfaces - they enthrall visitors to the page, ask their opinion, and thus personalize the product or service. If you apply them in your website design ‚Äì you win.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;2.¬†¬†¬†¬†¬† Unusual screen loading&lt;/h3&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;Their task is simple - to interest, distract, delay, make people stop looking, etc. It is recommended that you pay attention to the loading screen that may appear when navigating between pages.&lt;/p&gt;

&lt;p&gt;The so-called skeletal loading screens are trendy today, in other words, empty pages that are gradually filled with information through the user's interaction with them or following a given algorithm.&lt;/p&gt;

&lt;p&gt;¬†For example, information blocks may gradually emerge one after another at intervals of several seconds or appear only after the next touch or click of the user. And, of course, why not use funny animated screens that show the user how long to wait or entertain them instead of pauses.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;3.¬†¬†¬†¬†¬† Bright colors&lt;/h3&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;Design trends are multiplying, competition is increasing, and users are becoming more and more selective. Trying to stand out, designers experiment with colors as well - in recent months, bright, very bright interfaces, backgrounds and illustrations are increasingly popular.&lt;/p&gt;

&lt;p&gt;Benefits of using bright colors in UX / UI design:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Increase the beauty of the resource;&lt;/li&gt;
&lt;li&gt;They influence the mood of users, form a unique positive and therefore attractive atmosphere;&lt;/li&gt;
&lt;li&gt;Form strong associations with a brand, product or service;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It distinguishes promotional calls to action and key actions, thus increasing the conversion and profitability of the business.&lt;/p&gt;

&lt;p&gt;Due to the brightness and catchiness, the interface may also suffer from usability issues. The necessary elements cannot be found in a riot of colors and decrease the readability.¬†&lt;/p&gt;

&lt;p&gt;Therefore, it is essential to carefully select a palette, keep a balance between creativity and convenience, and carefully think over the site or application's structure. And, of course, apply the theory of color - the color wheel of contrasts and a thorough analysis of the best examples in this style will come in handy.&lt;/p&gt;

&lt;h3&gt;¬†&lt;/h3&gt;

&lt;h3&gt;4.¬†¬†¬†¬†¬† Blurry, colorful backgrounds&lt;/h3&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;Bright burry or the so-called blur in the background is another trend in 2021. It is remarkable because it creates a catchy yet comfortable effect for the eyes, which favorably emphasizes objects in the foreground. A blurry bright background is a beneficial marketing technique.&lt;/p&gt;

&lt;p&gt;3 key benefit of blurred backgrounds:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Blur in the background brings focus to the foreground where the object or text is. They become more noticeable in the eyes of the user and are better remembered in all details;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A blurry picture is universal - it can be used as the basis for the visual design of the interface, as well as a corporate identity for a brand can be built using it;&lt;/li&gt;
&lt;li&gt;Blur works well with almost any content - photo, image, video, text, animation. The main thing is to take into account the rules of contrast and color combinations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;By the way, this trend is often combined with &lt;a href="https://uxdesign.cc/glassmorphism-in-user-interfaces-1f39bb1308c9"&gt;glassformism&lt;/a&gt; - the frosted glass effect gives an excellent blur. The popularity of such backgrounds spurred the release of &lt;a href="https://www.apple.com/macos/big-sur/"&gt;Apple's macOS Big Sur system&lt;/a&gt;, already mentioned above, at the end of 2020.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;5.¬†¬†¬†¬†¬† Authentic images&lt;/h3&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;The trend that transferred from web design to UX is using authentic images. The point is that The Black Lives Matter movement represented a watershed moment in a global protest. Hopefully, there is just the beginning of a reassessment of systemic biases that will continue to be felt across all the industries in 2021, including design. Nevertheless, it‚Äôs still in vogue and may be applied whenever suitable.&lt;/p&gt;

&lt;h2&gt;¬†&lt;/h2&gt;

&lt;h2&gt;Why is it important to consider trends in UX / UI design?&lt;/h2&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;&lt;em&gt;'Every $ 1 invested in user interface design returns $ 100 to the business.'&lt;/em&gt; (Forrester research)&lt;/p&gt;

&lt;p&gt;This equates to a return of 9,900%. Ignoring the development of UX / UI design is like letting the process of user interaction with your resource down. This means that the efficiency of the site or application will noticeably decrease, which will inevitably lead to loss of profit and, possibly, to the death of the business.&lt;/p&gt;

&lt;p&gt;To avoid sad prospects, it is important to be aware of the latest trends in interface design and user experience, and be able to quickly put into practice what will be useful for you. Want to know which web design trends of 2021 will help you modernize your brand and capture the peak of user attention? ‚Äì Feel free to &lt;a href="https://fireart.studio/"&gt;ask design experts&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;To sum up&lt;/h2&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;Modern design trends are not just a tribute to fashion but an absolute necessity that may provide your business with effective promotion &amp;amp; guarantee growth in the most turbulent times. We hope you are now full of inspiration to build your website, mobile application, or improve existing business with great design solutions. Use them to increase user interaction and attract even more new customers to your products and services. We wish you successful design and development at all times.&lt;/p&gt;

</description>
      <category>java</category>
      <category>tutorial</category>
      <category>design</category>
      <category>devops</category>
    </item>
    <item>
      <title>The OGC standards that power the OS Data Hub</title>
      <author>Charley Glynn</author>
      <pubDate>Thu, 07 Oct 2021 14:37:55 +0000</pubDate>
      <link>https://dev.to/charleyglynn/the-ogc-standards-that-power-the-os-data-hub-4lm</link>
      <guid>https://dev.to/charleyglynn/the-ogc-standards-that-power-the-os-data-hub-4lm</guid>
      <description>&lt;p&gt;The &lt;a href="https://osdatahub.os.uk/?utm_source=devto&amp;amp;utm_campaign=devrel&amp;amp;utm_content=ogc-standards"&gt;OS Data Hub&lt;/a&gt; makes geospatial data available in a variety of formats, including API access and file downloads. These formats include standards published by the &lt;a href="https://www.ogc.org/"&gt;Open Geospatial Consortium (OGC)&lt;/a&gt;, an international consortium of more than 530 businesses, government agencies, research organizations, and universities, driven to advance geospatial information technology at all levels of data handling, processing, sharing, and analytics.&lt;/p&gt;

&lt;p&gt;In this post we identify and describe formats and elaborate on some of the advantages of &lt;a href="https://www.ordnancesurvey.co.uk/newsroom/insights/why-do-geospatial-data-standards-matter?utm_source=devto&amp;amp;utm_campaign=devrel&amp;amp;utm_content=ogc-standards"&gt;using standards to share geospatial information&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are registered to the OS Map &amp;amp; Hack hackathon and want to extend your practical knowledge about the OGC standards supported in the OS Data Hub, you are welcome to attend the technical workshop on that event: ‚ÄúAccessing data using OGC Standards: a quick start guide‚Äù.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Show me the APIs!&lt;/strong&gt;&lt;br&gt;
If you navigate to the &lt;a href="https://osdatahub.os.uk/products?utm_source=devto&amp;amp;utm_campaign=devrel&amp;amp;utm_content=ogc-standards"&gt;OS Data Hub API dashboard&lt;/a&gt;, you will see a list of the APIs which you can add to your projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WxAa3QR4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/426cs4fey9k40maze5bl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WxAa3QR4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/426cs4fey9k40maze5bl.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;os-apis-dashboard&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;a href="https://osdatahub.os.uk/docs/wfs/overview?utm_source=devto&amp;amp;utm_campaign=devrel&amp;amp;utm_content=ogc-standards"&gt;OS Features API&lt;/a&gt; gives you direct access to the detailed geometries and rich attribution of individual &lt;a href="https://en.wikipedia.org/wiki/Geographical_feature"&gt;features&lt;/a&gt;. It is based on the OGC &lt;a href="https://en.wikipedia.org/wiki/Web_Feature_Service"&gt;Web Feature Service&lt;/a&gt; (WFS) standard. You can call it to access vector data - e.g. buildings, roads, rivers, hospitals, playing fields, greenspaces - basically anything which is represented as a point, a line, a polygon or a combination of any of the above.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://osdatahub.os.uk/docs/wmts/overview?utm_source=devto&amp;amp;utm_campaign=devrel&amp;amp;utm_content=ogc-standards"&gt;OS Maps API&lt;/a&gt; serves pre-rendered raster tiles, available in different projections. It is based on the &lt;a href="https://en.wikipedia.org/wiki/Web_Map_Tile_Service"&gt;OGC Web Map Tile Service&lt;/a&gt; (WMTS) standard. You can call it to access raster data - e.g. OS MasterMap, Leisure map - and it lets you integrate tiled maps into your applications.&lt;/p&gt;

&lt;p&gt;Both, WFS and WMTS, are mature and well established OGC standards. This means they have been used for a while, and its current state is the result of an extended discussion, taking into account a lot of different use cases.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not only APIs...&lt;/strong&gt;&lt;br&gt;
Other than programmatic access, OS also makes (open) data available for manual download in the &lt;a href="https://osdatahub.os.uk/downloads/open?_ga=2.83225686.1722133459.1633615564-1648783599.1627306224&amp;amp;utm_source=devto&amp;amp;utm_campaign=devrel&amp;amp;utm_content=ogc-standards"&gt;OS OpenData Downloads&lt;/a&gt; section. These downloads are actually free and do not require registration.&lt;/p&gt;

&lt;p&gt;Among other formats, OS publishes data using the OGC GeoTIFF and GeoPackage formats.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/GeoTIFF"&gt;GeoTIFF&lt;/a&gt; is an extension of the &lt;a href="https://en.wikipedia.org/wiki/TIFF"&gt;TIFF&lt;/a&gt; format, which allows georeferencing information (e.g.: projections, coordinate reference systems) to be embedded within a TIFF file. It can be used to exchange georeferenced imagery.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.geopackage.org/"&gt;GeoPackage&lt;/a&gt; is a database container, which enables storing different types of spatial and non spatial data, and can be easily extended to support other use cases. Currently is based on an &lt;a href="https://www.sqlite.org/index.html"&gt;SQLite&lt;/a&gt; database, although there are plans to abstract it from a specific database in the future.&lt;/p&gt;

&lt;p&gt;Find out how OS are rolling out more of these &lt;a href="https://www.ordnancesurvey.co.uk/newsroom/blog/new-data-formats-coming-this-year?utm_source=devto&amp;amp;utm_campaign=devrel&amp;amp;utm_content=ogc-standards"&gt;formats for Premium products&lt;/a&gt; too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why should I use these formats?&lt;/strong&gt;&lt;br&gt;
By using OGC formats you can tap into a number of existing implementations which are able to understand and interact with these standards, including libraries/SDKs and desktop clients.&lt;/p&gt;

&lt;p&gt;For instance if you want to integrate a OS map into your web application, you can rely on libraries such as LeafLet or OpenLayers to pull that data with a simple call. Likewise, you can open your GeoTiff or GeoPackage files within QGIS, ArcGIS or &lt;a href="https://en.wikipedia.org/wiki/GDAL#Software_using_GDAL/OGR"&gt;any other application that uses the GDAL/OGR library&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another strong argument is that if you write an application which retrieves data from the OS Data Hub using any of these formats, you could easily reuse your code to access data in a different server which also publishes data according to these standards (for instance the &lt;a href="https://livingatlas.arcgis.com/en/browse/#d=2"&gt;Esri Living Atlas&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What‚Äôs new in OGC?&lt;/strong&gt;&lt;br&gt;
The first version of the WFS standard was written almost twenty years ago. The web is a very different place from what it was back then, and practices such as the use of &lt;a href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;REST&lt;/a&gt; architectures, &lt;a href="https://www.json.org/json-en.html"&gt;JSON&lt;/a&gt; encodings or &lt;a href="https://en.wikipedia.org/wiki/Open_API"&gt;OpenAPI&lt;/a&gt; descriptions are now mainstream among web developers. OGC is developing a &lt;a href="https://ogcapi.ogc.org/"&gt;new family of standards&lt;/a&gt;, which takes advantage of these modern web practices, to create standards which are easier to use and deploy. We will write more about these OGC APIs in another blog post, so stay tuned if you want to learn more about this newer generation of OGC standards.&lt;/p&gt;

</description>
      <category>ordnancesurvey</category>
      <category>webdev</category>
      <category>programming</category>
      <category>geospatial</category>
    </item>
    <item>
      <title>#codepenchallenge:Css Animation</title>
      <author>Abdelmgeid Sobhi</author>
      <pubDate>Thu, 07 Oct 2021 14:12:49 +0000</pubDate>
      <link>https://dev.to/abdelmgeid/codepenchallenge-css-animation-2pgf</link>
      <guid>https://dev.to/abdelmgeid/codepenchallenge-css-animation-2pgf</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Abdelmgeid-/embed/xxrvBeR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>#codepenchallenge:Css Loading Animation</title>
      <author>Abdelmgeid Sobhi</author>
      <pubDate>Thu, 07 Oct 2021 14:12:33 +0000</pubDate>
      <link>https://dev.to/abdelmgeid/codepenchallenge-css-loading-animation-2cp</link>
      <guid>https://dev.to/abdelmgeid/codepenchallenge-css-loading-animation-2cp</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Abdelmgeid-/embed/vYZoMMP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>Divtober Day 7: Toxic</title>
      <author>Alvaro Montoro</author>
      <pubDate>Thu, 07 Oct 2021 13:59:17 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/divtober-day-7-toxic-aom</link>
      <guid>https://dev.to/alvaromontoro/divtober-day-7-toxic-aom</guid>
      <description>&lt;p&gt;Divtober's word for day 7 is "toxic." So I drew a cartoon of a barrel with the toxic sign on it and a glowing substance inside and dripping outside:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/jOwgdxa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This time, the demo has two elements: one is the cartoon in itself, and the other one is a link to a &lt;a href="https://www.youtube.com/watch?v=fitjMV2bmA4"&gt;video showing how the cartoon was developed&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/fitjMV2bmA4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>divtober</category>
      <category>css</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Trying Out Svelte For First Time</title>
      <author>Pratham Sharma</author>
      <pubDate>Thu, 07 Oct 2021 13:57:43 +0000</pubDate>
      <link>https://dev.to/ps173/trying-out-svelte-for-first-time-223f</link>
      <guid>https://dev.to/ps173/trying-out-svelte-for-first-time-223f</guid>
      <description>&lt;p&gt;So I have been wanting to re-create my personal &lt;a href="//ps173.github.io"&gt;website&lt;/a&gt; (another blog on this soon). I really like development with next-js. But there's a lot of lot of dependencies which makes it quite a huge app. And I think that a personal website should be as fast as possible. So why not choose something like vanilla html. Well Yea html will work totally fine. But I wanted to try something new. I choose svelte as a the other framework. I wanted to try it for the longest time. And thus I choose svelte.&lt;/p&gt;

&lt;p&gt;I like lot of stuff about svelte. The idea of keeping things less complex and fast to code is very likeable. If I would have tried using svelte right after learning js, I think it would be easier than getting used to react. Here's my opinion or more of a description of svelte. I might be wrong about something so pardon me there as I have spent less than a week with svelte.&lt;/p&gt;

&lt;p&gt;Also Since I have made the intro this long. I might just say that I don't really want to hate on other framework. I think this &lt;a href="https://www.urbandictionary.com/define.php?term=opinionism"&gt;opinionism&lt;/a&gt; is bad. I just want to keep this a healthy overview of svelte.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#about-svelte"&gt;
  &lt;/a&gt;
  About Svelte ‚úåÔ∏è
&lt;/h1&gt;

&lt;p&gt;Svelte is a UI framework. Unlike react and friends (or should I say enemies), svelte does not use any virtual DOM. Rather it compiles your code to tiny framework less vanilla js. This makes the app really fast. Also not to mentiont the incredible guide the &lt;a href="https://svelte.dev/tutorial/basics"&gt;svelte-tutorial&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#components-in-svelte"&gt;
  &lt;/a&gt;
  Components in Svelte üêª‚Äç‚ùÑÔ∏è
&lt;/h1&gt;

&lt;p&gt;So let's start with what I think the makes all the frameworks worth using, Components. I think making your UI into little components makes UI really easy to manage and program. I am not a frontend guy honestly but I like the fact that I can have multiple elements divided in my UI. Again this post is not on why frontend frameworks are good. &lt;/p&gt;

&lt;p&gt;In svelte the components are files with .svelte extension. Not a great change that's just another syntax ( also btw why do all these frameworks create their own custom syntax).  But wait you don't have to export the components here. Suppose you have this parent called &lt;code&gt;App.svelte&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!--Lets' call this component App.svelte and yes this is a html comment--&amp;gt;
&amp;lt;script&amp;gt;
// here is js comment :)
 import MyComponent from "path-to-component/MyComponent.svelte"
&amp;lt;/script&amp;gt;

&amp;lt;MyComponent /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and here's &lt;code&gt;MyComponent.svelte&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!--- MyComponent.svelte ---&amp;gt;
&amp;lt;p&amp;gt;
This is my component
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#props-in-svelte"&gt;
  &lt;/a&gt;
  Props in Svelte üêª
&lt;/h1&gt;

&lt;p&gt;You thought that svelte does not have props.  Svelte has export statements to export props or as I like to say 'recognize props' (Not a proper term don't use it).&lt;/p&gt;

&lt;p&gt;This is a child component let's call it &lt;code&gt;Weatherdetails.svelte&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!--- Weatherdetails.svelte ---&amp;gt;
&amp;lt;script&amp;gt;
    export let answer;
&amp;lt;/script&amp;gt;

&amp;lt;p&amp;gt;The weather is {answer}&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's call the parent component &lt;code&gt;App.svelte&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
    import Weatherdetails from './Weatherdetails.svelte';
&amp;lt;/script&amp;gt;

&amp;lt;Weatherdetails answer="humid :\"/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I like how svelte devs explain how this in not javascript-ish.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;this may feel a little weird at first. That's not how export&lt;br&gt;
normally works in JavaScript modules! Just roll with it for now ‚Äî it'll soon&lt;br&gt;
become second nature.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I am hoping to see it become second nature :)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#reactivity-in-svelte"&gt;
  &lt;/a&gt;
  Reactivity in Svelte üê®
&lt;/h1&gt;

&lt;p&gt;Again as svelte describes it does not uses any complex state management.According to the svelte website "At heart of svelte is a powerful system of reactivity". This means that you can call javascript inside your html (not literally I just like to think of it this way). Here's the reactivity explained in the good ol' counter app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
let counter = 0
function increaseCount(){
  count += 1
}
&amp;lt;/script&amp;gt;

&amp;lt;h1&amp;gt; Current Count : {count} &amp;lt;/h1&amp;gt;
&amp;lt;button on:click={increaseCount}&amp;gt; 
    click to increase count ! 
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wow that was quick.&lt;/p&gt;

&lt;p&gt;Here you can see it's like react state just has a lot less boiler-plate. Also svelte introduces a special thing which is somewhat similar to &lt;code&gt;useEffect&lt;/code&gt; hook in react.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
let counter = 0
function increaseCount(){
  count += 1
}
$: square = count * count
&amp;lt;/script&amp;gt;

&amp;lt;h1&amp;gt; Current Count : {count} &amp;lt;/h1&amp;gt;
&amp;lt;button on:click={increaseCount}&amp;gt; 
    click to increase count ! 
&amp;lt;/button&amp;gt;
&amp;lt;p&amp;gt;The square of {count} is {square} &amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Here the &lt;code&gt;$&lt;/code&gt; looks a little weird. But this basically tells svelte compiler that whenever any of referenced value statement changes do this thing.&lt;/strong&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conditional-rendering-and-await-in-markup"&gt;
  &lt;/a&gt;
  Conditional rendering and Await in markup üêë
&lt;/h1&gt;

&lt;p&gt;To render text conditionally svelte applies a little bit custom markup syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
    let user = { loggedIn: false };

    function toggle() {
        user.loggedIn = !user.loggedIn;
    }
&amp;lt;/script&amp;gt;

{#if user.loggedIn}
    &amp;lt;button on:click={toggle}&amp;gt;
        Log out
    &amp;lt;/button&amp;gt;
{:else}
    &amp;lt;button on:click={toggle}&amp;gt;
        Log in
    &amp;lt;/button&amp;gt;
{/if}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So here according to svelte website again &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A # character always indicates a block opening tag. &lt;br&gt;
A / character always indicates a block closing tag. &lt;br&gt;
A : character, as in {:else}, indicates a block continuation tag. &lt;br&gt;
Don't worry ‚Äî you've already learned almost all the syntax Svelte adds to HTML.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now this the normal part. Jinja follows same pattern. But wait we have more. Introducing the asynchronous await in markup. Wanna see how this looks. Here&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
    async function getCatImage() {
        const res = await fetch("https://api.thecatapi.com/v1/images/search");
        const jsonres = await res.json();
        const imageUrl = await jsonres[0].url

        if (res.ok) {
            return imageUrl;
        } else {
            throw new Error("No image found or something went wrong");
        }
    }

    let promise = getCatImage();

    function handleClick() {
        promise = getCatImage();
    }
&amp;lt;/script&amp;gt;

&amp;lt;button on:click={handleClick}&amp;gt;
A random cat üêà
&amp;lt;/button&amp;gt;

&amp;lt;!-- Awaitting the response --&amp;gt;
{#await promise}
    &amp;lt;p&amp;gt;...waiting&amp;lt;/p&amp;gt;
{:then src}
    &amp;lt;img {src} alt="a cat"/&amp;gt;
{:catch error}
    &amp;lt;p style="color: red"&amp;gt;{error.message}&amp;lt;/p&amp;gt;
{/await}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Honestly I was really impressed when I first saw this. This is was so cool see.&lt;/p&gt;

&lt;p&gt;Here's the working demo üêà‚ú® :&lt;br&gt;
&lt;iframe src="https://codesandbox.io/embed/await-svelte-ejwo3"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lifecycle"&gt;
  &lt;/a&gt;
  Lifecycle ‚ôªÔ∏è
&lt;/h1&gt;

&lt;p&gt;Yay! Lifecycle methods. Lifecycle in svelte is quite similar to react. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The most common lifecycle method is &lt;code&gt;onMount&lt;/code&gt;. This is basically a function
that is executed when component is rendered. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onDestroy&lt;/code&gt; is function that runs when a component is destroyed. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;beforeUpdate&lt;/code&gt; and &lt;code&gt;afterUpdate&lt;/code&gt; do what there names suggest run a function before or after the component is rendered.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These were quite similar to the lifecycle methods in react. &lt;/p&gt;

&lt;p&gt;The last lifecycle method is &lt;code&gt;tick&lt;/code&gt;. The &lt;code&gt;tick&lt;/code&gt; function is unlike other lifecycle methods it can be called anytime. It returns a promise that resloves as soon as any pending state changes have been applied to DOM. &lt;strong&gt;In simpler words you can say that when you want to ensure that state immediately updates you can run &lt;code&gt;tick&lt;/code&gt; function.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#binding-the-state"&gt;
  &lt;/a&gt;
  Binding the state üê≤
&lt;/h1&gt;

&lt;p&gt;Do you guys remember the old class based components in react where you had to bind the function to specific component. Svelte does something similar but more simpler looking.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
    let name = 'world';
&amp;lt;/script&amp;gt;
&amp;lt;input bind:value={name}&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this will change the value of name with input provided. The bind-action (in this case value) may change from element to element. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#this-binding"&gt;
  &lt;/a&gt;
  This Binding
&lt;/h3&gt;

&lt;p&gt;One binding that applies to all is &lt;code&gt;this&lt;/code&gt;. You can compare it to something like &lt;code&gt;useRef&lt;/code&gt; hook from react. It provides you a reference to a rendered element.&lt;/p&gt;

&lt;p&gt;For example you can do something like this ‚ú®:&lt;br&gt;
&lt;iframe src="https://codesandbox.io/embed/svelte-magic-drawboard-7mh87"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And now I can use canvas api just like native javascript. I really like the canvas api and wanted to use react but I was not able to get that level of simplicity as in native js. Svelte makes it almost similar to native js&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#store"&gt;
  &lt;/a&gt;
  Store ü¶Ñ
&lt;/h1&gt;

&lt;p&gt;Store is a way to manage state across the whole app. You may pass down state to childrenusing props but the when you have to share state across various parent components you can use store. A breif overview of stores can be given this way&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Here&lt;/span&gt; &lt;span class="nx"&gt;we&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt; &lt;span class="nx"&gt;initialize&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte/store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- And let's subscribe this store to App.svelte --&amp;gt;
&amp;lt;!-- so I can just do --&amp;gt; 
&amp;lt;script&amp;gt;
import { count } from './stores.js';

let count_value;

count.subscribe(value =&amp;gt; {
        count_value = value;
});
&amp;lt;/script&amp;gt;

&amp;lt;h1&amp;gt;The count is {count_value}&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Stores are a bit complex topic ( not really quite simple once you go through the tutorial ) And I am not gonna cover everything about them in this post. So that may be a different blog for different time. Meanwhile if you really wanna know just go on to the &lt;a href="https://svelte.dev/tutorial/writable-stores"&gt;tutorial&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#inbuilt-transitions-and-animations"&gt;
  &lt;/a&gt;
  Inbuilt Transitions and animations üê≥
&lt;/h1&gt;

&lt;p&gt;This one surprised me. Svelte has inbuild transitions, animation and motions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
    import { blur } from 'svelte/transition'
    let visible = true;
&amp;lt;/script&amp;gt;

&amp;lt;label&amp;gt;
    &amp;lt;input type="checkbox" bind:checked={visible}&amp;gt;
    visible
&amp;lt;/label&amp;gt;

{#if visible}
    &amp;lt;p transition:blur&amp;gt;
        Fades in and out
    &amp;lt;/p&amp;gt;
{/if}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This piece of code shows how simple it is to implement the fade transition.  This is all I wanted from frontend frameworks. Isn't this amazing. I just love svelte now. There are more animation related stuff which you can again see in the &lt;a href="https://svelte.dev/tutorial/transition-events"&gt;svelte-tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's a little navbar that I made using svelte builtin transitions :&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/simple-navbar-with-svelte-t4rp3"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion üí´
&lt;/h1&gt;

&lt;p&gt;This was just a breifing of svelte. There is so much more that I didn't cover. I have already link svelte tutorial like 10 times in this blog so not gonna do It again. This post really helped me understand lot of stuff about svelte and also react.&lt;/p&gt;

&lt;p&gt;What I think of svelte ? Well I think svelte is amazing. I like it and most of the developers out there like it. It makes lot of things simpler. Obviously it does not kill all the other frameworks and Neither I will start making making all my apps in svelte. Though this aside. I will svelte for lot of apps that I want to quickly setup. This is one thing that I again loved about svelte. The amount of boiler plate that goes in svelte is really low. And not mention the app speed. The above 3 example are really fast in comparisont to those written in react or any other framework out there. Also I recently saw &lt;a href="https://svelte-native.technology/"&gt;svelte-native&lt;/a&gt; which now makes me want to try it.&lt;/p&gt;

&lt;p&gt;Overall Svelte is a amazing and lovely piece of technology. God bless the creators of svelte for making it.&lt;/p&gt;

&lt;p&gt;Thanks for reading. Please consider following this took a huge amount of time to write. And if this helps you well don't thank me just follow. I post stuff like this or sometime vim related workflow.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>svelte</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>An Intro to HTML Forms</title>
      <author>Zach Taylor</author>
      <pubDate>Thu, 07 Oct 2021 13:25:29 +0000</pubDate>
      <link>https://dev.to/zachtylr21/an-intro-to-html-forms-4gbm</link>
      <guid>https://dev.to/zachtylr21/an-intro-to-html-forms-4gbm</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@estherrj?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Esther Jiao&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/form?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-a-form"&gt;
  &lt;/a&gt;
  What is a form?
&lt;/h2&gt;

&lt;p&gt;According to MDN: an HTML form represents a document section containing interactive controls for submitting information.&lt;/p&gt;

&lt;p&gt;In other words, it's the thing in your web page that lets users communicate with your server.&lt;/p&gt;

&lt;p&gt;Wait, isn't that what JavaScript is for? JavaScript is capable of many things, including sending/asking for data from your server. And these days, yes, most websites do all of that communication with JavaScript.&lt;/p&gt;

&lt;p&gt;Originally, however, communication with the server was done in HTML with forms. This is because back in the day, pretty much all websites were server-rendered and most didn't have much JavaScript on the page, if any at all. The user would hit the URL to your site, which would trigger some PHP script to put together an HTML document, and that document would be sent back to the user's browser and displayed. If you wanted the user to be able to send data back to your server, you would include a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; in the document with inputs for them  to interact with. When the user submits the form, that server-side PHP script would process the form data, put together a new document and send it back to the browser, which would then refresh, showing the user the new state of the page. It wasn't until AJAX (Asynchronous JavaScript And XML) was invented that people started making requests and updating the DOM client-side with JavaScript.&lt;/p&gt;

&lt;p&gt;With that history lesson out of the way, let's dive in! HTML forms are pretty simple to create: use a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag, with &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tags inside of it, like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add some labels,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Name&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Email&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and with a bit of CSS you have something that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x9RaU31g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yvurk0932hqgl7y71aye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x9RaU31g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yvurk0932hqgl7y71aye.png" alt="Screen Shot 2021-10-05 at 8.21.47 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element has a few parameters that allow you to customize its behavior. I'll go over the most commonly used parameters in this post.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-method-endraw-parameter"&gt;
  &lt;/a&gt;
  The &lt;code&gt;method&lt;/code&gt; Parameter
&lt;/h3&gt;

&lt;p&gt;By default, the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element sends data in query parameters via a GET request to the current URL. Let's assume your page is hosted at &lt;code&gt;localhost:3000&lt;/code&gt;. If you were to fill out the form we created above like so,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IP4Zpw_X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ugn576uk66n4etl6egr0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IP4Zpw_X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ugn576uk66n4etl6egr0.png" alt="Screen Shot 2021-05-27 at 9.08.12 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;clicking &lt;code&gt;Submit&lt;/code&gt; will make a GET request to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;localhost:3000/?name=zach&amp;amp;email=zach%40gmail.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you don't want to use the GET method, you can choose to send a POST request with the &lt;code&gt;method&lt;/code&gt; parameter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;-&amp;lt;form&amp;gt;
&lt;/span&gt;&lt;span class="gi"&gt;+&amp;lt;form method="post"&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, the browser will make a POST request to the current URL with the form data in the request body.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#customize-the-post-body-with-raw-enctype-endraw-"&gt;
  &lt;/a&gt;
  Customize the POST body with &lt;code&gt;enctype&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;The structure of the POST body depends on the form's &lt;code&gt;enctype&lt;/code&gt;. By default, &lt;code&gt;enctype="application/x-www-form-urlencoded"&lt;/code&gt;. With this &lt;code&gt;enctype&lt;/code&gt;, the body will take the form of a URL encoded string as you can see in the dev tools here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pxMXg5Fe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pi8txmn6jjk4mr89k08b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pxMXg5Fe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pi8txmn6jjk4mr89k08b.png" alt="Screen Shot 2021-05-27 at 9.54.13 PM"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another option for &lt;code&gt;enctype&lt;/code&gt; is &lt;code&gt;multipart/form-data&lt;/code&gt;. This value should be used if you want to send a file to the server with an &lt;code&gt;&amp;lt;input type="file" /&amp;gt;&lt;/code&gt;. If you keep the default &lt;code&gt;enctype&lt;/code&gt;, the file won't actually be sent; the form will just send the file name as a string.&lt;/p&gt;

&lt;p&gt;The third and final &lt;code&gt;enctype&lt;/code&gt; called &lt;code&gt;text/plain&lt;/code&gt;, and it sends your form as plain text that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name=zach
email=zach@gmail.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;According to MDN, &lt;code&gt;text/plain&lt;/code&gt; is mainly for debugging purposes.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#other-http-methods"&gt;
  &lt;/a&gt;
  Other HTTP methods
&lt;/h4&gt;

&lt;p&gt;GET and POST are the only two HTTP methods you can use with forms. The other methods (PUT, PATCH, DELETE, etc.) will not work; the form will default to sending a GET request.&lt;/p&gt;

&lt;p&gt;There's a fun little trick you can do, though, if you want to send a request to your server with one of the other methods. Simply put a hidden input in your form whose value is the method you want to use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"_method"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"DELETE"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Name&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Email&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, on your server, you can parse the form data and check the value of the &lt;code&gt;_method&lt;/code&gt; field to determine which type of request was sent.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-action-endraw-parameter"&gt;
  &lt;/a&gt;
  The &lt;code&gt;action&lt;/code&gt; Parameter
&lt;/h3&gt;

&lt;p&gt;What if you want to send the form data to a different URL? You can set the &lt;code&gt;action&lt;/code&gt; parameter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"https://zachdtaylor.com/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try it out! When I submit the form, I'm taken to my website, with some additional information appended to the URL:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://www.zachdtaylor.com/?name=zach&amp;amp;email=zach%40gmail.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One situation where this would come in handy is if you wanted to redirect the user to someone else's site with some state passed in. For example, with this form, you can search Kent C. Dodd's blog on his &lt;a href="https://kentcdodds.com"&gt;new website&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"https://kentcdodds.com/blog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"q"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Search Kent's Blog:&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"q"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty neat! A form with an &lt;code&gt;action&lt;/code&gt; argument is actually &lt;a href="https://twitter.com/ebey_jacob/status/1445795995242037255?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1445795995242037255%7Ctwgr%5E%7Ctwcon%5Es1_c10&amp;amp;ref_url=https%3A%2F%2Fpublish.twitter.com%2F%3Fquery%3Dhttps3A2F2Ftwitter.com2Febey_jacob2Fstatus2F1445795995242037255widget%3DTweet"&gt;pretty similar in behavior to what a link does&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://zachdtaylor.com"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Same behavior! --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"https://zachdtaylor.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ü§Ø&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you're interested in getting to know forms a little better, try building something in the &lt;a href="https://remix.run/"&gt;Remix&lt;/a&gt; web framework. They are embracing the old model of talking to the server with plain old HTML forms, and honestly it's a wonderful experience.&lt;/p&gt;

&lt;p&gt;I hope this was helpful. Thanks for reading!&lt;/p&gt;

</description>
      <category>html</category>
      <category>http</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>DataDog vs Jaeger - key features, differences and alternatives</title>
      <author>Ankit Anand ‚ú®</author>
      <pubDate>Thu, 07 Oct 2021 13:23:26 +0000</pubDate>
      <link>https://dev.to/signoz/datadog-vs-jaeger-key-features-differences-and-alternatives-1590</link>
      <guid>https://dev.to/signoz/datadog-vs-jaeger-key-features-differences-and-alternatives-1590</guid>
      <description>&lt;p&gt;Both DataDog and Jaeger are tools used to monitor application performance. The difference lies in what they monitor and terms of usage. Jaeger is an open-source tool focused on distributed tracing of requests in a microservice architecture. While DataDog is a SaaS APM vendor covering most monitoring needs of an application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Application performance monitoring is the process of keeping your app's health in check. APM tools enable you to be proactive about meeting the demands of your customers.&lt;/p&gt;

&lt;p&gt;If you're comparing DataDog and Jaeger, distributed tracing capabilities of both tools is one of the important criterion. Before we dive in, let's first understand in brief what is distributed tracing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-distributed-tracing"&gt;
  &lt;/a&gt;
  What is distributed tracing?
&lt;/h2&gt;

&lt;p&gt;In the world of microservices, a user request travels through hundreds of services before serving a user what they need. To make a business scalable, engineering teams are responsible for particular services with no insight into how the system performs as a whole. And that's where distributed tracing comes into the picture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G8Vee_gt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/jaeger_vs_zipkin_microservices_architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G8Vee_gt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/jaeger_vs_zipkin_microservices_architecture.png" alt="Microservices architecture"&gt;&lt;/a&gt;Microservice architecture of a fictional e-commerce application&lt;/p&gt;

&lt;p&gt;Distributed tracing gives you insight into how a particular service is performing as part of the whole in a distributed software system. There are two essential concepts involved in distributed tracing: &lt;strong&gt;Spans&lt;/strong&gt; and &lt;strong&gt;trace context&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;User requests are broken down into spans.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What are spans?&lt;br&gt;&lt;br&gt;
Spans represent a single operation within a trace. Thus, it represents work done by a single service which can be broken down further depending on the use case.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A &lt;strong&gt;trace context&lt;/strong&gt; is passed along when requests travel between services, which tracks a user request across services. Thus, you can see how a user request performs across services and identify what exactly needs your attention without manually shifting through multiple dashboards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXTMH1wS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/opentelemetry_distributed_tracing-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXTMH1wS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/opentelemetry_distributed_tracing-min.png" alt="Trace context is passed to track user requests across services"&gt;&lt;/a&gt;A trace context is passed when user requests pass from one service to another&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-features-of-datadog"&gt;
  &lt;/a&gt;
  Key Features of DataDog
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.datadoghq.com/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;DataDog&lt;/b&gt;&lt;/a&gt; offers an array of services in the monitoring domain. Some of the key areas in monitoring that it covers include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Log Management&lt;/li&gt;
&lt;li&gt;Application performance monitoring&lt;/li&gt;
&lt;li&gt;Security monitoring&lt;/li&gt;
&lt;li&gt;Network monitoring&lt;/li&gt;
&lt;li&gt;Real user monitoring&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's focus on the features of application performance monitoring provided by DataDog as it makes more sense when it comes to comparison with Jaeger.&lt;/p&gt;

&lt;p&gt;Some of the key features of DataDog APM includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;End-to-end application performance monitoring&lt;/strong&gt;&lt;br&gt;
As a full-stack APM tool, using DataDog, you can connect distributed traces to infrastructure metrics, network calls, and live processes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Collection of 100% of traces&lt;/strong&gt;&lt;br&gt;
Trace data can be huge. Still, using DataDog, you can collect 100% of your traces generated in the last 15 mins. Then, you can retain the traces showing high latency to investigate further.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Code-level visibility for root-cause analysis&lt;/strong&gt;&lt;br&gt;
DataDog gives code-level visibility to break down slow requests by time spent on CPU, GC, I/O, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Covers wide range of technology stack&lt;/strong&gt;&lt;br&gt;
DataDog provides extensive integrations and libraries to monitor Java, .NET, PHP, Node.js, Ruby, Python, Go, or C++ applications.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x644Jbrf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/datadog_vs_jaeger_dd_dashbaord-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x644Jbrf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/datadog_vs_jaeger_dd_dashbaord-min.jpg" alt="DataDog APM dashboard"&gt;&lt;/a&gt;DataDog APM tool showing infrastructure, metrics, logs, errors, processes, network and code hotspots under a single dashboard&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hsoqknxL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/datadog_vs_jaeger_dd_rca-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hsoqknxL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/datadog_vs_jaeger_dd_rca-min.jpg" alt="DataDog provides code level visibility to identify issues quickly"&gt;&lt;/a&gt;Find code hotspots using DataDog APM tool&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-features-of-jaeger"&gt;
  &lt;/a&gt;
  Key features of Jaeger
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.jaegertracing.io/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;Jaeger&lt;/b&gt;&lt;/a&gt; was originally built by teams at Uber and then open-sourced. It is used for end-to-end distributed tracing for microservices. Some of the key features of Jaeger includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Distributed context propagation&lt;/strong&gt;&lt;br&gt;
One of the challenges of distributed systems is to have a standard format for passing context across process boundaries and services. Jaeger provides client libraries that support code instrumentation in multiple languages to propagate context across services&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Distributed transaction monitoring&lt;/strong&gt;&lt;br&gt;
Jaeger comes with a web UI written in Javascript. The dashboard can be used to see traces and spans across services.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Root Cause Analysis&lt;/strong&gt;&lt;br&gt;
Using traces you can drill down to services causing latency in particular user request.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Server dependency analysis&lt;/strong&gt;&lt;br&gt;
Using Jaeger's web UI, you can see how requests flow through different services and different servers interact while serving user requests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Performance/latency optimization&lt;/strong&gt;&lt;br&gt;
Once you have identified, which service or query is creating latency, you can use the information to optimize it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PBiBbLYG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/jaeger_ui-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PBiBbLYG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/jaeger_ui-min.png" alt="Jaeger UI"&gt;&lt;/a&gt;Jaeger UI showing services and corresponding traces&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comparing-datadog-and-jaeger"&gt;
  &lt;/a&gt;
  Comparing DataDog and Jaeger
&lt;/h2&gt;

&lt;p&gt;DataDog is one of the major SaaS vendors in the APM space. On the other hand, Jaeger is a popular open-source distributed tracing tool that graduated from Cloud Native Computing Foundation. The differences between the tools arise from this genesis.&lt;/p&gt;

&lt;p&gt;Some of the key differences between DataDog and Jaeger are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Correlation of trace data&lt;/strong&gt;&lt;br&gt;
DataDog lets you connect your trace data to a lot of other performance metrics like infrastructure and host metrics, as it is not limited to distributed tracing. Jaeger collects trace data which can give you insights on latencies of requests. You can't use Jaeger for collecting metrics for hosts, networks, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Code Instrumentation&lt;/strong&gt;&lt;br&gt;
Instrumentation is the process of generating telemetry data from your application. Jaeger uses &lt;a href="https://opentracing.io/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;OpenTracing APIs&lt;/b&gt;&lt;/a&gt; for code instrumentation. The data format of telemetry data generated is vendor-neutral in the case of Jaeger, and you can also use other back-end analysis tools. DataDog provides DataDog agents which run on your host to collect events and metrics. In the case of proprietary instrumentation agents, your monitoring stack gets locked into a vendor soon. DataDog also supports ingestion from open-source standards like OpenTelemetry, but it's not a first-class citizen.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Data Storage&lt;/strong&gt;&lt;br&gt;
Jaeger offers two popular open-source databases for storing trace data: Cassandra and Elasticsearch. DataDog is a third-party cloud vendor where your data gets stored in DataDog's servers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Web UI&lt;/strong&gt;&lt;br&gt;
DataDog is a SaaS tool that offers a much smoother and more elaborate dashboarding experience, including many customizations. Jaeger's web UI is limited, although it can serve the purpose of distributed tracing.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The decision between DataDog and Jaeger comes down to whether your organization has the budget to go for a paid SaaS tool like DataDog or does your organization has got the engineering bandwidth to run an open-source tool like Jaeger. In addition, as Jaeger is limited to just distributed tracing, your decision also needs to account for whether you need to monitor other components of your application.&lt;/p&gt;

&lt;p&gt;The lack of great user experience in open-source tools has always been there. Also, what if there was an open-source tool that could provide the scope of experience of a great SaaS tool like DataDog.&lt;/p&gt;

&lt;p&gt;That's where &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt; comes into the picture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alternative-to-datadog-and-jaeger-signoz"&gt;
  &lt;/a&gt;
  Alternative to DataDog and Jaeger - SigNoz
&lt;/h2&gt;

&lt;p&gt;SigNoz is a full-stack open-source application performance monitoring and observability tool which can be used in place of DataDog and Jaeger. It provides advanced distributed tracing capabilities along with metrics under a single dashboard.&lt;/p&gt;

&lt;p&gt;SigNoz is built to support OpenTelemetry natively. &lt;a href="https://opentelemetry.io/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;OpenTelemetry&lt;/b&gt;&lt;/a&gt;  is becoming the world standard for generating and managing telemetry data (Logs, metrics, and traces). It also provides users flexibility in terms of storage. You can choose between ClickHouse or Kafka + Druid as your backend storage while installing SigNoz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6BdjoEB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/SigNoz_architecture_clickhouse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6BdjoEB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/SigNoz_architecture_clickhouse.png" alt="Architecture of SigNoz with OpenTelemetry and ClickHouse"&gt;&lt;/a&gt;Architecture of SigNoz with ClickHouse as storage backend and OpenTelemetry for code instrumentatiion&lt;/p&gt;

&lt;p&gt;SigNoz comes with out of box visualization of things like RED metrics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OKFqZ_PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OKFqZ_PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.png" alt="SigNoz UI showing the popular RED metrics"&gt;&lt;/a&gt;SigNoz UI showing application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/p&gt;

&lt;p&gt;You can also use flamegraphs to visualize spans from your trace data. All of this comes out of the box with SigNoz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FOoIlefK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FOoIlefK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.png" alt="Flamegraphs used to visualize spans of distributed tracing in SigNoz UI"&gt;&lt;/a&gt;Flamegraphs showing exact duration taken by each spans - a concept of distributed tracing&lt;/p&gt;

&lt;p&gt;Some of the things SigNoz can help you track:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/li&gt;
&lt;li&gt;Slowest endpoints in your application&lt;/li&gt;
&lt;li&gt;See exact request trace to figure out issues in downstream services, slow DB queries, call to 3rd party services like payment gateways, etc&lt;/li&gt;
&lt;li&gt;Filter traces by service name, operation, latency, error, tags/annotations.&lt;/li&gt;
&lt;li&gt;Run aggregates on trace data&lt;/li&gt;
&lt;li&gt;Unified UI for both metrics and traces&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can check out SigNoz's GitHub repo here üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>monitoring</category>
      <category>jaeger</category>
      <category>devops</category>
    </item>
    <item>
      <title>Integrating Vercel with Doppler: Sync Secrets in Production</title>
      <author>uma victor</author>
      <pubDate>Thu, 07 Oct 2021 13:13:58 +0000</pubDate>
      <link>https://dev.to/umavictor6/integrating-vercel-with-doppler-sync-secrets-in-production-48bf</link>
      <guid>https://dev.to/umavictor6/integrating-vercel-with-doppler-sync-secrets-in-production-48bf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;One of the great benefits of &lt;a href="https://www.doppler.com/"&gt;Doppler&lt;/a&gt; is keeping your project in sync. We want to be able to sync our app wherever we develop and deploy. It only takes a few minutes to integrate the Vercel marketplace with Doppler, and that is what we will be doing in this tutorial&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#goals"&gt;
  &lt;/a&gt;
  Goals
&lt;/h2&gt;

&lt;p&gt;In this tutorial we will learn how to install the &lt;a href="https://www.doppler.com/integrations"&gt;Doppler integration&lt;/a&gt; from Vercel‚Äôs new marketplace. Learn how to sync the secrets in your doppler project for deployment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-your-project-to-vercel"&gt;
  &lt;/a&gt;
  Add your Project to Vercel
&lt;/h2&gt;

&lt;p&gt;The first thing we want to do is to login to our doppler account. I won‚Äôt be touching the details of creating an account and login into doppler, because I have already done an introduction to doppler in a &lt;a href="https://dev.to/umavictor6/intro-to-doppler-real-life-use-case-4g1a"&gt;previous post&lt;/a&gt;. So once we have logged into &lt;a href="https://www.doppler.com/"&gt;Doppler&lt;/a&gt;, we head over to &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt; and add our project we want to integerate doppler with.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#navigating-to-the-account-homepage"&gt;
  &lt;/a&gt;
  Navigating to the account homepage
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EwIJUxpD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633410861280_project-dashboard.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EwIJUxpD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633410861280_project-dashboard.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have an e-commerce site we want to integrate with Doppler, so we can hide secrets even as we deploy on vercel.&lt;br&gt;
Syncing Doppler with your projects is simple and quick. Just enter the details and you'll be notified when new updates are available. So let‚Äôs get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#syncing-secrets-in-doppler-with-vercel"&gt;
  &lt;/a&gt;
  Syncing secrets in doppler with vercel
&lt;/h2&gt;

&lt;p&gt;We want to first authorize Doppler. To do this, we click on the project we want to integrate doppler with, in my case, it‚Äôs an e-commerce site called &lt;code&gt;etsy-ecommerce&lt;/code&gt; and then we click on the integrations tab&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ddslKXLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633411583992_projectdash.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ddslKXLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633411583992_projectdash.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In our integeration page, we select vercel:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Co_XA0-H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633411701393_vercel.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Co_XA0-H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633411701393_vercel.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then click on &lt;code&gt;add integeration&lt;/code&gt;, and let Doppler know you want to select a personal account (your vercel account)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3zCyX4Ly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633425706370_selectvercelaccount.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3zCyX4Ly--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633425706370_selectvercelaccount.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you click continue, you will be prompted to choose the particular project you want to integrate with Doppler from your list of projects in Vercel. Click on &lt;code&gt;Add Integration&lt;/code&gt; and you will be taken to the setup integration page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7GOYuuWU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633425934585_integerationsetup.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7GOYuuWU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633425934585_integerationsetup.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the setup integration page, we key in all our details, choose the project we want to integrate, and the vercel environment we will be deploying to, which is production. Click Setup Integration and your secret for that config will now be automatically synced to Vercel.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YMUfr3ev--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633427403977_vercelenv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YMUfr3ev--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633427403977_vercelenv.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see all our environmental variables synced with vercel meaning we have successfully integerated doppler with vercel. Also, if we go to our doppler dashboard we can confirm by seeing that it is in sync with vercel. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e92DbsxM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633427628045_vercelinsync.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e92DbsxM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633427628045_vercelinsync.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automatically-trigger-vercel-redeploy"&gt;
  &lt;/a&gt;
  Automatically trigger Vercel re-deploy
&lt;/h2&gt;

&lt;p&gt;In this section we will look at how to automatically trigger a re-deploy in vercel when a secret is changed in doppler. To do this navigate to git in vercel and in our deploy hooks section, we give our hook a name and click the &lt;code&gt;create hook&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7H-JGlDx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633453404692_prodhook.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7H-JGlDx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633453404692_prodhook.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs copy the webhook link and go back to our doppler dashboard. To use the webhook, you have to be part of a subscription with Doppler. Luckily for us, we can access this feature by doing a 30 day subscription without adding our credit card.&lt;br&gt;
Now when we head back to the &lt;code&gt;etsy-ecommerce&lt;/code&gt; project and click on webhooks we get a pop-up to add a new webhook.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cx5Gfzgh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633462640256_webhook.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cx5Gfzgh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633462640256_webhook.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We paste in the link we copied and click on &lt;code&gt;add webhook&lt;/code&gt;. Now we can select through the input that a re-deploy should be triggered when a change is made in production.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JuzI3xC4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633462890078_webhookprod.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JuzI3xC4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_646597EDFB877EE568B378F3E51E1AE6DBDA81FE863D04672785C51F7718AD61_1633462890078_webhookprod.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now if we make a change to one of our secrets in production, and save it, the change will be instantly reflected in vercel and trigger a deploy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this tutorial we learned how to install the doppler integration from Vercel‚Äôs new marketplace. We also learned how to sync the secrets in our Doppler project for deployment.&lt;/p&gt;

</description>
      <category>security</category>
      <category>javascript</category>
    </item>
    <item>
      <title>CAST AI vs. Cloudability: Which one to pick for cloud cost optimization?</title>
      <author>CAST AI</author>
      <pubDate>Thu, 07 Oct 2021 13:12:50 +0000</pubDate>
      <link>https://dev.to/castai/cast-ai-vs-cloudability-which-one-to-pick-for-cloud-cost-optimization-44le</link>
      <guid>https://dev.to/castai/cast-ai-vs-cloudability-which-one-to-pick-for-cloud-cost-optimization-44le</guid>
      <description>&lt;p&gt;Controlling cloud costs is one of the biggest challenges facing teams across every organization that uses the public cloud. Thankfully, they can choose from a wide range of solutions that help in cost management and optimization. Many such tools offer automation features that build more stable and cost-effective cloud environments.&lt;/p&gt;

&lt;p&gt;When picking a solution, companies should consider&lt;strong&gt; the potential impact of automation on both cost savings and workflows in the cloud&lt;/strong&gt; - especially the more complex, cloud-native ones like Kubernetes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keep on reading to find out which cost optimization platform is a better choice for your business: CAST AI or Apptio Cloudability.&lt;/strong&gt;&lt;/p&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;&lt;b&gt;CAST AI - cloud native cost optimization¬†&lt;/b&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;b&gt;Cloudability - cloud cost management&lt;/b&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;CAST AI is cloud-native platform for analyzing, monitoring and automating the costs of Kubernetes environments. Companies across e-commerce and adtech are using CAST AI to cut their cloud bills by 50% to even 90%.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;p&gt;&lt;span&gt;Cloudability provides financial management tools for monitoring and analyzing cloud computing costs. Companies can use the software to track their public cloud spend and plan better-informed budgets for cloud services.&lt;/span&gt;&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;



&lt;h2&gt;CAST AI vs. Cloudability - quick feature comparison&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lWd26bBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cast.ai/wp-content/uploads/2021/10/Feature-Comparison.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lWd26bBW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cast.ai/wp-content/uploads/2021/10/Feature-Comparison.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Detailed feature comparison of Cloudability and CAST AI&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#costvisibility"&gt;Cost visibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#costoptimizationandautomation"&gt;Cost optimization and automation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#spotinstancerecommendationsandautomation"&gt;Spot instance recommendations and automation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fullmulticloudoptimization"&gt;Full multi cloud optimization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pricing"&gt;Pricing&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="costvisibility"&gt;1. Cost visibility&lt;/h2&gt;

&lt;h3&gt;Cost allocation and reporting¬†&lt;/h3&gt;

&lt;p&gt;Cloud expenses are divided into project, cluster, namespace, and deployment levels in &lt;strong&gt;CAST AI&lt;/strong&gt;. Teams can track expenses down to individual microservices before calculating the total cost of their cluster. &lt;strong&gt;CAST AI &lt;/strong&gt;employs industry-standard metrics that may be used with any cloud provider.&lt;/p&gt;

&lt;p&gt;The cost allocation in &lt;strong&gt;CAST AI&lt;/strong&gt; is done per cluster and per node. Control plane, network, egress, storage, and other cost dimensions will be added soon. A feature for continuous cloud cost reporting is also on its way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloudability&lt;/strong&gt; comes with a default dashboard as well as the option to create custom dashboards for various products, departments, or positions within your organization. The solution‚Äôs True Cost Explorer offers a way for users to visually explore their cloud cost and usage data. Users may easily connect their use and spend to relevant data dimensions such as business units, apps, and teams without being aware of cloud billing nuances.&lt;/p&gt;

&lt;h3&gt;Cost view across multi cloud&lt;/h3&gt;

&lt;blockquote&gt;&lt;p&gt;Many businesses today use more than one cloud platform, so multi-cloud support is an important element of cost optimization initiatives.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It's difficult to budget for multi-cloud configurations, but &lt;strong&gt;CAST AI&lt;/strong&gt;'s multi-cloud capabilities make it a lot easier. The platform works with any cloud service provider and offers cross-cloud visibility thanks to universal metrics from Grafana and Kibana.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloudability&lt;/strong&gt; stands up to this challenge as well. Users can display multi-cloud data together in a single pane of glass. All data is continuously refreshed with each new update from service providers.&lt;/p&gt;

&lt;h2 id="costoptimizationandautomation"&gt;2. Cost optimization and automation&lt;/h2&gt;

&lt;h3&gt;CAST AI - fully automated cost optimization&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Rightsizing with automated instance selection¬†&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CAST AI&lt;/strong&gt; picks the most cost-effective instance types and sizes to fulfill the needs of your application while lowering the cloud spend. When a cluster needs additional nodes, the automation engine chooses the instances that provide the best performance at the lowest price. Engineers don't have to do anything extra because everything happens automatically.&lt;/p&gt;

&lt;p&gt;Using the same instance shape for every node in a cluster can quickly lead to overprovisioning, so &lt;strong&gt;CAST AI &lt;/strong&gt;offers multi-shape cluster creation as well. It provides the best combination of various instance types for the application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Horizontal pod autoscaling and node autoscaling&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To help organizations avoid cloud waste, &lt;strong&gt;CAST AI &lt;/strong&gt;automates pod scaling settings. Based on business KPIs, the Horizontal Pod Autoscaler estimates the right number of required pod instances. If there‚Äôs no work to be done, the functionality reduces the replica count of pods until it reaches 0 - and then eliminates all pods.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CAST AI&lt;/strong&gt; also guarantees that the number of nodes in use is always appropriate for the application's requirements, dynamically scaling nodes up and down.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cluster scheduling and termination&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CAST AI &lt;/strong&gt;automatically stops and restarts clusters created inside the platform, saving teams money on resources teams aren‚Äôt using.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Smart bin packing¬†&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Since Kubernetes distributes programs equitably throughout a cluster - regardless of how cost-effective this design is - it poses a financial challenge to companies.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;CAST AI &lt;/strong&gt;modifies the default pod scheduling approach and uses automated bin packing to maximize savings according to user preferences. It‚Äôs simple - when there are fewer nodes, the cost savings are greater.&lt;/p&gt;

&lt;h3&gt;Cloudability - data insights combined with automation&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Rightsizing recommendations&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloudability&lt;/strong&gt; helps teams to detect and monitor cloud resource consumption, so they can balance risk and cost and reduce waste. The tool collects usage data and feeds it into its proprietary algorithms to generate a list of optimum rightsizing suggestions. The algorithms take into account usage statistics from the previous 10 and 30 days.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Automation in Cloudability&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Removing idle EBS volumes¬†&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloudability&lt;/strong&gt; users can set up and schedule daily cleanups of detached EBS volumes. All it takes is selecting accounts and tags to scan for unattached volumes, together with the amount of time the unattached volume should sit before the tool creates a snapshot and deletes it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Automated shutdown and restart of resources¬†&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloudability&lt;/strong&gt; can automatically shut down and startup operations during periods of low usage. Users can schedule the scaling of ASGs or the stopping/starting of EC2 and RDS instances, checking how many resources this will affect.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Governance for cost management&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To make the most of the cloud's elastic, on-demand capabilities while continually optimizing expenses, &lt;strong&gt;Cloudability&lt;/strong&gt; uses automation to make sure that teams operate to the same standards.&lt;/p&gt;

&lt;h2 id="spotinstancerecommendationsandautomation"&gt;3. Spot instance recommendations and automation&lt;/h2&gt;

&lt;p&gt;When compared to On-Demand instances, spot instances offer significant cost reductions - even up to 90%. However, providers can reclaim these resources at any moment. That's why teams looking to take advantage of spot instances need automation.&lt;/p&gt;

&lt;p&gt;The replacement of interrupted spot instances in &lt;strong&gt;CAST AI&lt;/strong&gt; is completely automated. Teams no longer have to worry about their application‚Äôs capacity running out. To ensure high availability, the platform continually searches for the best instance alternatives and spins up fresh instances in milliseconds.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloudability&lt;/strong&gt; helps users to quantify the ROI of using spot instances and offers recommendations for creating a more consistent budget and forecasting baseline.&lt;/p&gt;

&lt;h2 id="fullmulticloudoptimization"&gt;4. Full multi cloud optimization&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;As we enter the multi cloud era, the need to evaluate, manage, and optimize cloud expenses across providers is more critical than ever.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;CAST AI &lt;/strong&gt;addresses this requirement with a variety of multi cloud features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Active-Active Multi Cloud&lt;/strong&gt; - the platform replicates apps and data over several cloud services to ensure that if one fails, others keep the applications running for guaranteed business continuity.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Global Server Load Balancing&lt;/strong&gt; - CAST AI distributes traffic across all cloud services in use and always selects up and healthy endpoints.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Multi cloud visibility&lt;/strong&gt; - the platform delivers cost allocation insights across cloud services thanks to data from Grafana and Kibana.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In&lt;strong&gt; Cloudability&lt;/strong&gt;, multi-cloud data is displayed together in a single pane of glass and constantly refreshed to reflect changes applied by cloud service providers.&lt;/p&gt;

&lt;h2 id="pricing"&gt;5. Pricing&lt;/h2&gt;

&lt;p&gt;Users of &lt;strong&gt;CAST AI&lt;/strong&gt; can start by examining their cloud services using the free Cluster Analyzer to determine if they can save money. The &lt;a href="https://cast.ai/blog/how-does-the-read-only-cast-ai-agent-work-and-what-data-can-it-read/"&gt;read-only agent&lt;/a&gt; assesses their infrastructure and provides concrete recommendations free of charge. Users can then either manually apply these findings or employ automatic cost optimization features and select between two options (with a free trial): Growth and Enterprise. CAST AI guarantees cost savings of at least 50%.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloudability&lt;/strong&gt; pricing starts at $499.00 per feature per month - with the option of a free trial at the beginning.¬†&lt;/p&gt;

&lt;h2&gt;Overall winner: CAST AI&lt;/h2&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--APsgkFBQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cast.ai/wp-content/uploads/2021/10/CAST-AI-vs.-Cloudability-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--APsgkFBQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cast.ai/wp-content/uploads/2021/10/CAST-AI-vs.-Cloudability-1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Both Cloudability and CAST AI are fantastic cloud cost management platforms that improve cost management and optimization.¬†¬†&lt;/p&gt;

&lt;p&gt;While Cloudability offers access to data dashboards and a limited degree of automation, CAST AI provides teams with a rich selection of automation features that guarantee cost savings and streamline work with Kubernetes.¬†&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;CAST AI‚Äôs automation features, unique multi cloud functionality, and cloud-native architecture position it as the top cloud cost optimization platform.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;





&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; If you'd like to start with something more hands-on, &lt;strong&gt;run the free &lt;a href="https://console.cast.ai/?screen_hint=SIGNUP" rel="noreferrer noopener"&gt;CAST AI Cost Analyzer&lt;/a&gt;&lt;/strong&gt; to see how much you could save and how to get there. &lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
