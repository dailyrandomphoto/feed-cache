<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Migrating and Configuring Eslint in Angular 11</title>
      <author>Tarun Gurang</author>
      <pubDate>Fri, 19 Nov 2021 10:03:24 +0000</pubDate>
      <link>https://dev.to/tarungurang/migrating-and-configuring-eslint-in-angular-11-251i</link>
      <guid>https://dev.to/tarungurang/migrating-and-configuring-eslint-in-angular-11-251i</guid>
      <description>&lt;p&gt;In the earlier version, Angular implements the linting with TSLint but with Angular 11 announced that the TSLint linting replaced with the ESLint.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage-with-nx-monorepos"&gt;
  &lt;/a&gt;
  Usage with Nx Monorepos
&lt;/h2&gt;

&lt;p&gt;Nx leans for some, but not for all packages from this project. It does not use the builder to execute ESLint.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#packages-included-in-this-project"&gt;
  &lt;/a&gt;
  Packages included in this Project
&lt;/h3&gt;

&lt;p&gt;The following packages are included in your project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;@angular-eslint/builder:This package is used to execute ESLint in your project using standard commands such as ng lint.&lt;/li&gt;
&lt;li&gt;@angular-eslint/eslint-plugin: This is the ESLint specific package that contains some specific rules that are specific for the Angular projects. It can be combined with other ESLint packages.&lt;/li&gt;
&lt;li&gt;@angular-eslint/template-parser: This is the ESLint specific parser package that allows you to written the custom ESLint rules in your Angular template.&lt;/li&gt;
&lt;li&gt;@angular-eslint/eslint-plugin-template:This package is used in conjunction with @angular-eslint/template-parser which allows template specific rules to run.&lt;/li&gt;
&lt;li&gt;@angular-eslint/schematics: This package is used to add and update the configuration files that are running on the Angular template.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#migrating-an-angular-cli-project"&gt;
  &lt;/a&gt;
  Migrating an Angular CLI project
&lt;/h4&gt;

&lt;p&gt;Step 1: Add the dependencies&lt;/p&gt;

&lt;p&gt;To do the migration, run the schematic package to add the @angular-eslint into your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng add @angular-eslint/schematics

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running this command, it will install the packages and add the packages in the package.json file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "eslint-demo",
  "version": "0.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve",
    "build": "ng build",
    "test": "ng test",
    "lint": "ng lint",
    "e2e": "ng e2e"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "~11.0.1",
    "@angular/common": "~11.0.1",
    "@angular/compiler": "~11.0.1",
    "@angular/core": "~11.0.1",
    "@angular/forms": "~11.0.1",
    "@angular/platform-browser": "~11.0.1",
    "@angular/platform-browser-dynamic": "~11.0.1",
    "@angular/router": "~11.0.1",
    "rxjs": "~6.6.0",
    "tslib": "^2.0.0",
    "zone.js": "~0.10.2"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "~0.1100.2",
    "@angular/cli": "~11.0.2",
    "@angular/compiler-cli": "~11.0.1",
    "@types/jasmine": "~3.6.0",
    "@types/node": "^12.11.1",
    "codelyzer": "^6.0.0",
    "jasmine-core": "~3.6.0",
    "jasmine-spec-reporter": "~5.0.0",
    "karma": "~5.1.0",
    "karma-chrome-launcher": "~3.1.0",
    "karma-coverage": "~2.0.3",
    "karma-jasmine": "~4.0.0",
    "karma-jasmine-html-reporter": "^1.5.0",
    "protractor": "~7.0.0",
    "ts-node": "~8.3.0",
    "tslint": "~6.1.0",
    "typescript": "~4.0.2",
    "eslint": "^7.6.0",
    "eslint-plugin-import": "2.22.1",
    "eslint-plugin-jsdoc": "30.7.6",
    "eslint-plugin-prefer-arrow": "1.2.2",
    "@angular-eslint/builder": "0.8.0-beta.3",
    "@angular-eslint/eslint-plugin": "0.8.0-beta.3",
    "@angular-eslint/eslint-plugin-template": "0.8.0-beta.3",
    "@angular-eslint/schematics": "^0.8.0-beta.3",
    "@angular-eslint/template-parser": "0.8.0-beta.3",
    "@typescript-eslint/eslint-plugin": "4.3.0",
    "@typescript-eslint/parser": "4.3.0"
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Read More: &lt;a href="https://www.ifourtechnolab.com/blog/what-s-new-in-angular-11"&gt;What’s New In Angular 11?&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Step 2: Run the eslint schematic on a project&lt;/p&gt;

&lt;p&gt;After that, you can choose the project that you want to migrate. The following command can run the eslint schematic.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng g @angular-eslint/schematic:convert-tslint-to-eslint {{ Your project name }}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running this command, eslintrc.json will be created. Let’s take a look at the configuration that was generated from the above command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "root": true,
  "ignorePatterns": [
    "projects/**/*"
  ],
  "overrides": [
    {
      "files": [
        "*.ts"
      ],
      "parserOptions": {
        "project": [
          "tsconfig.json",
          "e2e/tsconfig.json"
        ],
        "createDefaultProgram": true
      },
      "extends": [
        "plugin:@angular-eslint/ng-cli-compat",
        "plugin:@angular-eslint/ng-cli-compat--formatting-add-on",
        "plugin:@angular-eslint/template/process-inline-templates"
      ],
      "rules": {
        "@angular-eslint/component-selector": [
          "error",
          {
            "type": "element",
            "prefix": "app",
            "style": "kebab-case"
          }
        ],
        "@angular-eslint/directive-selector": [
          "error",
          {
            "type": "attribute",
            "prefix": "app",
            "style": "camelCase"
          }
        ]
      }
    },
    {
      "files": [
        "*.html"
      ],
      "extends": [
        "plugin:@angular-eslint/template/recommended"
      ],
      "rules": {}
    }
  ]
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that the configuration is inside in the overrides field because the Angular project has the HTML files and typescript files. We can avoid the conflicts using the ESLint overrides field that allows us to separate rules for different file types.&lt;/p&gt;

&lt;p&gt;In the above configuration, we can see the configuration of the @angular-eslint plugin:@angular-eslint/ng-cli-compat and @angular-eslint/ng-cli-compat--formatting-add-on. These two configurations are used for the automatic matching of TSLint rules and ESLint rules.&lt;/p&gt;

&lt;p&gt;env: What to include in a linting and what version to be used in your project.&lt;/p&gt;

&lt;p&gt;extends: What packages will be extended.&lt;/p&gt;

&lt;p&gt;parser: What parser to be used.&lt;/p&gt;

&lt;p&gt;parserOptions: The Project setting for typescript.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#changing-the-configuration"&gt;
  &lt;/a&gt;
  Changing the configuration
&lt;/h5&gt;

&lt;p&gt;To change the configuration, first we will remove both plugins plugin:@angular-eslint/ng-cli-compat and plugin:@angular-eslint/ng-cli-compat--formatting-add-on from the extends field. After that we can add the plugin of the plugin:@angular-eslint/recommended in the extends field.&lt;/p&gt;

&lt;p&gt;Let’s see the updated configuration file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "root": true,
  "ignorePatterns": [
    "projects/**/*"
  ],
  "overrides": [
    {
      "files": [
        "*.ts"
      ],
      "parserOptions": {
        "project": [
          "tsconfig.json",
          "e2e/tsconfig.json"
        ],
        "createDefaultProgram": true
      },
      "extends": [
        "plugin:@angular-eslint/recommended",
        "plugin:@angular-eslint/template/process-inline-templates"
      ],
      "rules": {
        "@angular-eslint/component-selector": [
          "error",
          {
            "type": "element",
            "prefix": "app",
            "style": "kebab-case"
          }
        ],
        "@angular-eslint/directive-selector": [
          "error",
          {
            "type": "attribute",
            "prefix": "app",
            "style": "camelCase"
          }
        ]
      }
    },
    {
      "files": [
        "*.html"
      ],
      "extends": [
        "plugin:@angular-eslint/template/recommended"
      ],
      "rules": {}
    }
  ]
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The plugin:@angular-eslint/recommended plugin is used to disable some conflicting rules of the eslint:recommended for usage with the typescript and add the typescript rules. There are another configuration adding in the extends field and the configuration looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"extends": [
        "plugin:@angular-eslint/recommended",
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/recommended-requiring-type-checking",
        "plugin:@angular-eslint/template/process-inline-templates"
      ],

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above configuration, the order of the included plugins matters. If we have included plugin typescript-recommended before the eslint:recommended then the conflicting rules will be enabled.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#adding-prettier"&gt;
  &lt;/a&gt;
  Adding Prettier
&lt;/h5&gt;

&lt;p&gt;Prettier is used for detecting and automatically fixing the styling issues.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installing the Prettier&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We will be installing the configuration dependencies of the prettier ESLint plugin of the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i -D prettier eslint-plugin-prettier eslint-config-prettier

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will install the three configuration dependencies: prettier, eslint-plugin-prettier and eslint-config-prettier. These plugins are needed for fixing the styling but also disabling some styling rules of the ESLint so that there are no conflicts between ESLint and Prettier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Looking to &lt;a href="https://www.ifourtechnolab.com/hire-angular-js-developer"&gt;hire Angular Developer&lt;/a&gt;? Your Search ends here.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Integrating Prettier&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To integrate the prettier plugin, we need to add the plugin to extends field in the .eslintrc.json file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "root": true,
  "ignorePatterns": [
    "projects/**/*"
  ],
  "overrides": [
    {
      "files": [
        "*.ts"
      ],
      "parserOptions": {
        "project": [
          "tsconfig.json",
          "e2e/tsconfig.json"
        ],
        "createDefaultProgram": true
      },
      "extends": [
        "plugin:@angular-eslint/ng-cli-compat",
        "plugin:@angular-eslint/ng-cli-compat--formatting-add-on",
        "plugin:@angular-eslint/template/process-inline-templates",
        "plugin:prettier/recommended"
      ],
      "rules": {
        "@angular-eslint/component-selector": [
          "error",
          {
            "type": "element",
            "prefix": "app",
            "style": "kebab-case"
          }
        ],
        "@angular-eslint/directive-selector": [
          "error",
          {
            "type": "attribute",
            "prefix": "app",
            "style": "camelCase"
          }
        ]
      }
    },
    {
      "files": [
        "*.html"
      ],
      "extends": [
        "plugin:@angular-eslint/template/recommended"
      ],
      "rules": {}
    }
  ]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to enable the styling and formatting in the HTML files, then you need to add the code in the HTML entry of the overrides field.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"extends": [
        "plugin:@angular-eslint/template/recommended",
        "prettier/@typescript-eslint",
        "plugin:prettier/recommended"
      ],

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, the prettier code is written at the end of the extends array because the prettier config disables the ESLint rules.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h6&gt;

&lt;p&gt;In this blog, we have discussed about ESLint and what packages are included in the project. We saw how to migrate the TSLint project to the ESLint and also learn the installing and integrating of prettier plugin.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>DevTips Daily Update 19/11/21</title>
      <author>James Bubb</author>
      <pubDate>Fri, 19 Nov 2021 10:03:19 +0000</pubDate>
      <link>https://dev.to/codebubb/devtips-daily-update-191121-51o1</link>
      <guid>https://dev.to/codebubb/devtips-daily-update-191121-51o1</guid>
      <description>&lt;p&gt;So in this week's videos on DevTips Daily we made a start on our full end to end project mini-series.  We got cracking with the project idea, took a look at writing Agile User Stories and got some boilerplate code setup using the NX CLI.&lt;/p&gt;

&lt;p&gt;Here's a link to each individual tutorial:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/O7qf1nmswF4"&gt;Project Management Tools&lt;/a&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/O7qf1nmswF4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/6N7PuJ4CO-4"&gt;Writing Agile User Stories&lt;/a&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/6N7PuJ4CO-4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/E6p6_ST-Xg8"&gt;Project Name and Domain&lt;/a&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/E6p6_ST-Xg8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/LFYVpxXg64I"&gt;Code Setup With NX&lt;/a&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/LFYVpxXg64I"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/Eg4mYYBdhxU"&gt;Serving the API with NX&lt;/a&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Eg4mYYBdhxU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/hgPRaPd2XcA"&gt;Creating the GitHub Repository&lt;/a&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/hgPRaPd2XcA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/EkQPw2zfP3Y"&gt;Generate SSH Key Pair&lt;/a&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/EkQPw2zfP3Y"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Next week we're going to be carrying on with project, setting up a server to host the project files, building a CI pipeline and more!&lt;/p&gt;

&lt;p&gt;Thanks for watching 👍&lt;/p&gt;

</description>
      <category>devtipsdaily</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Composer conflict, how can we use it?</title>
      <author>Samuele Lilli</author>
      <pubDate>Fri, 19 Nov 2021 09:59:01 +0000</pubDate>
      <link>https://dev.to/doncallisto/composer-conflict-how-can-we-use-it-24c2</link>
      <guid>https://dev.to/doncallisto/composer-conflict-how-can-we-use-it-24c2</guid>
      <description>&lt;p&gt;Today I found a very useful Composer schema &lt;a href="https://getcomposer.org/doc/04-schema.md#package-links"&gt;package link&lt;/a&gt; option named &lt;a href="https://getcomposer.org/doc/04-schema.md#conflict"&gt;&lt;code&gt;conflict&lt;/code&gt;&lt;/a&gt;, which is useful when third-party code you rely on is too permissive for your needs.&lt;/p&gt;

&lt;p&gt;At the time of writing, the &lt;a href="https://getcomposer.org/doc/04-schema.md#conflict"&gt;&lt;code&gt;conflict&lt;/code&gt;&lt;/a&gt; &lt;a href="https://getcomposer.org/doc/04-schema.md#conflict"&gt;man page&lt;/a&gt; states&lt;/p&gt;

&lt;p&gt;Lists packages that conflict with this version of this package. They will not be allowed to be installed together with your package.&lt;/p&gt;

&lt;p&gt;Note that when specifying ranges like &lt;code&gt;&amp;lt;1.0 &amp;gt;=1.1&lt;/code&gt; in a &lt;code&gt;conflict&lt;/code&gt; link, this will state a conflict with all versions that are less than 1.0 &lt;em&gt;and&lt;/em&gt; equal or newer than 1.1 at the same time, which is probably not what you want. You probably want to go for &lt;code&gt;&amp;lt;1.0 || &amp;gt;=1.1&lt;/code&gt; in this case.&lt;/p&gt;

&lt;p&gt;In order to explain how we can take advantage of this, we’ll use a concrete example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem-with-a-guzzle-dependency"&gt;
  &lt;/a&gt;
  The problem with a Guzzle dependency
&lt;/h2&gt;

&lt;p&gt;At Madisoft we love open source and believe in its power, not only because we have third-party code on which our application is based upon (BTW, thanks to everyone who makes our daily job easier!), but also because we like to contribute and have a commitment to OSS.&lt;/p&gt;

&lt;p&gt;One of the packages we use and help improve is &lt;a href="https://github.com/sensiolabs/BehatPageObjectExtension"&gt;BehatPageObjectExtension&lt;/a&gt;, an extension for Behat that incapsulates the &lt;a href="https://martinfowler.com/bliki/PageObject.html"&gt;PageObject pattern&lt;/a&gt; (we have written a blog post about PageObjectExtension, in Italian, &lt;a href="https://labs.madisoft.it/uso-del-page-object-pattern-con-behat-esempio-pratico/"&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;When looking at this &lt;a href="https://github.com/sensiolabs/BehatPageObjectExtension/pull/128"&gt;pull request&lt;/a&gt; I’ve opened to add PHP 7.4 support to the library, you may notice a &lt;a href="https://travis-ci.org/sensiolabs/BehatPageObjectExtension/builds/624031440?utm_medium=notification&amp;amp;utm_source=github_status"&gt;previous Travis CI build&lt;/a&gt; with &lt;a href="https://travis-ci.org/sensiolabs/BehatPageObjectExtension/jobs/624031441?utm_medium=notification&amp;amp;utm_source=github_status"&gt;failing test&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The reasons behind the issue are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/sensiolabs/BehatPageObjectExtension/pull/128/files#diff-b5d0ee8c97c7abd7e3fa29b9a27d1780L23"&gt;Dropping support for PHP older versions&lt;/a&gt; (check the PHP supported versions &lt;a href="https://www.php.net/supported-versions.php"&gt;here&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reflecting this change on &lt;a href="https://github.com/sensiolabs/BehatPageObjectExtension/pull/128/files#diff-354f30a63fb0907d4ad57269548329e3"&gt;.travis.yaml&lt;/a&gt; (a file that tells the CI platform how to create the environment to run your tests on)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/sensiolabs/BehatPageObjectExtension/pull/128/files#diff-354f30a63fb0907d4ad57269548329e3R6"&gt;Shifting the deps=low flag to the lowest supported PHP version&lt;/a&gt; in order to tell Composer to use the &lt;a href="(https://github.com/sensiolabs/BehatPageObjectExtension/blob/f4613bf3eabc3b6e41d613be60358aae7f56482f/.travis.yml#L13)"&gt;&lt;code&gt;--prefer-lowest&lt;/code&gt; flag when installing the dependencies&lt;/a&gt;.&lt;br&gt;
Pay attention to last point on the list: when working on OSS, it’s important to try to keep everyone’s code - that depends on your OSS - working (at least until a bump to a major version) so, in sight of this, it’s common to check if the lowest possible dependencies your code accepts will still make the tests pass.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we shifted the &lt;code&gt;deps=low&lt;/code&gt; flag to PHP 7.2, we found the above issue. It was already there, but we hadn’t noticed as the flag was only on PHP 7.1, meaning that tests never ran against PHP 7.2 with lowest dependencies. As PHP 7.2 introduced &lt;a href="https://www.php.net/manual/en/migration72.incompatible.php#migration72.incompatible.warn-on-non-countable-types"&gt;a warning on certain &lt;code&gt;count()&lt;/code&gt; usages&lt;/a&gt;, our code didn’t manage to pass the tests.&lt;/p&gt;

&lt;p&gt;But if you look closely, you’ll probably notice that the warning was not raised by our code directly, but by third-party code we’re requiring with Composer:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Warning: count(): Parameter must be an array or an object that implements Countable in /home/travis/build/sensiolabs/BehatPageObjectExtension/vendor/guzzlehttp/guzzle/src/Handler/CurlFactory.php line 66&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/guzzle/guzzle/issues/1973"&gt;We found the related issue on the Guzzle GitHub repository&lt;/a&gt; and we noticed &lt;a href="https://github.com/guzzle/guzzle/issues/1973#issuecomment-350534938"&gt;a fix had been released with version 6.3 of this library&lt;/a&gt;. Hurray, we can bump Guzzle version to 6.3 and overcome the problem! But looking at &lt;a href="https://github.com/sensiolabs/BehatPageObjectExtension/blob/master/composer.json"&gt;BehatPageObjectExtension’s &lt;code&gt;composer.json&lt;/code&gt;&lt;/a&gt; we’ve soon realized that Guzzle isn’t a direct dependency managed by us. “It’s not a big deal” I thought as Guzzle was required by Goutte and we require Goutte through &lt;a href="https://github.com/minkphp/MinkGoutteDriver"&gt;its Mink driver&lt;/a&gt;,so I expected to find some tagged version of Goutte and the Mink Driver with this requirements bump. Sadly I found it wasn’t the case &lt;a href="https://github.com/FriendsOfPHP/Goutte/blob/v3.2.3/composer.json#L19"&gt;as Guzzle is required in Goutte with &lt;code&gt;^6.0&lt;/code&gt;&lt;/a&gt; (so, basically every version between 6 and 7) and this includes the versions with the warning described above. Therefore in our case the warning was displayed as a “side effect” of &lt;code&gt;deps=low&lt;/code&gt; that requires indirectly Guzzle 6.0 as is the lowest dependency accepted.&lt;/p&gt;

&lt;p&gt;Without discussing if it’s right or wrong to keep a version of third party code that could break everthing (take a look at &lt;a href="https://github.com/FriendsOfPHP/Goutte/issues/393"&gt;this PR&lt;/a&gt;), we were suddenly at a crossroads: drop the &lt;code&gt;deps=low&lt;/code&gt; and give up on this kind of tests or dig in the Composer manual and look for something that could possibly help us: you guessed right, &lt;code&gt;conflict&lt;/code&gt; is what we needed (&lt;a href="https://github.com/sensiolabs/BehatPageObjectExtension/pull/128#issuecomment-564910876"&gt;thanks to jakzal!&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/sensiolabs/BehatPageObjectExtension/pull/128/files#diff-b5d0ee8c97c7abd7e3fa29b9a27d1780R54-R55"&gt;Here&lt;/a&gt; are the details of the commit with &lt;code&gt;conflict&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;With &lt;code&gt;conflict&lt;/code&gt; you can &lt;em&gt;force&lt;/em&gt; the minimum version of a dependency you cannot control directly, avoiding headaches or third party code forks.&lt;/p&gt;

&lt;p&gt;Hope this little story helped you to learn something new, personally I did!&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h2&gt;

&lt;p&gt;In order to avoid accepting third-party code with well-known security issues you can take advantage of &lt;a href="https://github.com/Roave/SecurityAdvisories"&gt;SecurityAdvisories&lt;/a&gt; by Roave, a library which uses &lt;code&gt;conflict&lt;/code&gt; as shown in this article to block unsafe packages. Give it a look!&lt;/p&gt;

</description>
      <category>php</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Next.js environment variables</title>
      <author>Carlo Gino Catapang</author>
      <pubDate>Fri, 19 Nov 2021 09:43:01 +0000</pubDate>
      <link>https://dev.to/codegino/nextjs-environment-variables-omh</link>
      <guid>https://dev.to/codegino/nextjs-environment-variables-omh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#a-guide-on-how-to-use-nextjs-environment-variables"&gt;
  &lt;/a&gt;
  A guide on how to use Next.js environment variables
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#how-to-create-an-environment-variable-for-nextjs"&gt;
  &lt;/a&gt;
  How to create an environment variable for Next.js
&lt;/h3&gt;



&lt;h4&gt;
  &lt;a href="#first-create-a-file-with-a-starting-in-raw-env-endraw-"&gt;
  &lt;/a&gt;
  First, create a file with a starting in &lt;code&gt;.env&lt;/code&gt;.
&lt;/h4&gt;

&lt;p&gt;Depending on the run-time environment, a custom &lt;code&gt;.env&lt;/code&gt; file can be created suce as the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;.env.development&lt;/code&gt; - when running &lt;code&gt;next dev&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.env.production&lt;/code&gt; - when running &lt;code&gt;next start&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.env.local&lt;/code&gt; - will override &lt;code&gt;.env&lt;/code&gt;, &lt;code&gt;.env.development&lt;/code&gt;, and &lt;code&gt;.env.production&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.env.test&lt;/code&gt; - when running &lt;code&gt;jest&lt;/code&gt; OR &lt;code&gt;cypress&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;host environment variables - AWS, Heroku, Vecel, etc. provide an interface to set environment variables directly&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#next-inside-the-created-raw-env-endraw-file-add-the-variables-to-be-used"&gt;
  &lt;/a&gt;
  Next, inside the created &lt;code&gt;.env&lt;/code&gt; file, add the variables to be used
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;VARIABLE_NAME=VALUE
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will be accessible via &lt;code&gt;proccess.env&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VARIABLE_NAME&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#two-types-of-environment-variables"&gt;
  &lt;/a&gt;
  Two types of environment variables
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Server-side expose variables&lt;/li&gt;
&lt;li&gt;Browser exposed variables&lt;/li&gt;
&lt;/ol&gt;



&lt;h4&gt;
  &lt;a href="#1-serverside-variables"&gt;
  &lt;/a&gt;
  1. Server-side variables
&lt;/h4&gt;

&lt;p&gt;Every variable set in an &lt;code&gt;.env*&lt;/code&gt; file will be available on the server-side. &lt;em&gt;Including the second type&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DB_HOST=secret_host
DB_USERNAME=username
DB_PASSWORD=password
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Above variables can be used in the server-side code such as &lt;code&gt;getStaticProps&lt;/code&gt;, &lt;code&gt;getServerSideProps&lt;/code&gt;, or in &lt;code&gt;/api&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getStaticProps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;connectToDatabase&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB_HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB_USERNAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2-browser-exposed-variables"&gt;
  &lt;/a&gt;
  2. Browser exposed variables
&lt;/h4&gt;

&lt;p&gt;Accessing the sample variables above will yield undefine.&lt;br&gt;
In order to make a variable available to the browser, it should be prepended with &lt;code&gt;NEXT_PULIC_&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;NEXT_PUBLIC_GOOGLE_ANALYTICS=abcde12345
NEXT_PUBLIC_NOT_SO_SECRET_URL=https://example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even though there will be more keystrokes, I personally like this convention as it gives a clear distinction of what variables are available to the client side.&lt;br&gt;
It is less likely that I will expose any sensitive information to the user.&lt;/p&gt;



&lt;p&gt;As per the variables above, it can be used anywhere in React land. For example, setting the Google analytics key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// _document.tsx&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;
  &lt;span class="na"&gt;async&lt;/span&gt;
  &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`https://www.googletagmanager.com/gtag/js?id=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_GOOGLE_ANALYTICS&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Another usage is for something publicly accessible but should not be committed to the repo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_NOT_SO_SECRET_URL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Although you can still access a browser exposed variable in your server-side code, it will not make sense to do it.&lt;/p&gt;

&lt;p&gt;Make sure any sensitive information should not be committed in the repo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Next.js provides an easy way to set environment variables in any run-time environment. It also provides a good convention to separate variables that can be used on the client-side.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>Kotlin forEach &amp; forEachIndexed method on Array, List, Map collection example
</title>
      <author>Harry Nguyen</author>
      <pubDate>Fri, 19 Nov 2021 09:34:49 +0000</pubDate>
      <link>https://dev.to/harrynguyen88/kotlin-foreach-foreachindexed-method-on-array-list-map-collection-example-2o73</link>
      <guid>https://dev.to/harrynguyen88/kotlin-foreach-foreachindexed-method-on-array-list-map-collection-example-2o73</guid>
      <description>&lt;p&gt;&lt;a href="https://ozenero.com/kotlin-foreach-foreachindexed-method-array-list-map-collection"&gt;https://ozenero.com/kotlin-foreach-foreachindexed-method-array-list-map-collection&lt;/a&gt;&lt;br&gt;
In the tutorial, Grokonez will show you how to use Kotlin forEach and forEachIndexed methods to loop through Kotlin Array, List, Map collections.&lt;br&gt;
Read more&lt;br&gt;
&lt;a href="https://ozenero.com/kotlin-foreach-foreachindexed-method-array-list-map-collection"&gt;https://ozenero.com/kotlin-foreach-foreachindexed-method-array-list-map-collection&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Understanding Typescript</title>
      <author>Samuel K.M</author>
      <pubDate>Fri, 19 Nov 2021 09:34:11 +0000</pubDate>
      <link>https://dev.to/bazeng/understanding-typescript-5gch</link>
      <guid>https://dev.to/bazeng/understanding-typescript-5gch</guid>
      <description>&lt;p&gt;A JavaScript superset, that builds up on JavaScript language, It adds new features to JavaScript, typescript cant run in the browser or even in NodeJS therefore it has a compiler that  compiles typescript to JavaScript. Added features in typescript include the use of types, it also helps us be more explicit and clearer about our code.&lt;/p&gt;

&lt;p&gt;Lets look at two code snippets one with Plain Javascript and another in typescript .&lt;br&gt;
&lt;code&gt;Plain Javascript&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  let inputA = 1
  let inputB = 2
  function sum(inputA, inputB){
     console.log(inputA + inputB)
  }
  sum(inputA,inputB)
  //this will return 3
  //Now what if we change the inputs to be
  inputA = "1"
  inputB = "2"
  sum(inputA,inputB)
 //this will return 12
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Despite the second answer being wrong, we dont get an error notification at run time. Here is when typescript comes in with its additional type feature that guarantees we get the correct answer or an error.In &lt;code&gt;typescript&lt;/code&gt; this would be written as(you can test this code in the &lt;a href="'https://onecompiler.com/typescript'"&gt;TS playground&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    let inputA = 1
    let inputB = 2
    funtion sum(inputA: number,inputB: number){
     console.log(inputA + inputB)
    }
    sum(inputA,inputB)
    //prints 3
    //Now what if we change the inputs to be
    inputA = "1"
    inputB = "2"
    sum(inputA,inputB)
    //script.ts(6,9): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Through the introduction of types in typescript, it easier to write more intuitive code. I will be writing a series of tutorial on typescript.&lt;/p&gt;

&lt;p&gt;I will cover:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Typescript Basics&lt;/li&gt;
&lt;li&gt;Typescript compiler&lt;/li&gt;
&lt;li&gt;Classes &amp;amp; Interfaces&lt;/li&gt;
&lt;li&gt;Advanced Typescript features such as Generics &amp;amp; Decorators&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Stay tuned !!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Use react-query hooks in class based components (React.js)</title>
      <author>Govind</author>
      <pubDate>Fri, 19 Nov 2021 09:29:54 +0000</pubDate>
      <link>https://dev.to/emgk/use-react-query-hooks-in-class-based-components-reactjs-3bno</link>
      <guid>https://dev.to/emgk/use-react-query-hooks-in-class-based-components-reactjs-3bno</guid>
      <description>&lt;p&gt;A few days back, I wanted to implement react-query in one of my old react projects where most of the components were class-based, &lt;/p&gt;

&lt;p&gt;React-Query provides hooks to fetch data from API which can be only used inside React Functional components, and it wasn't a good idea to refactor and transform those components into React Functional.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-how-to-use-them-in-classbased-components"&gt;
  &lt;/a&gt;
  So, how to use them in class-based components?
&lt;/h3&gt;

&lt;p&gt;Well, there are ways available to make hooks available in class-based components, but can be a bit tricky for a newbie. &lt;/p&gt;

&lt;p&gt;In that case, you can use &lt;a href="https://www.npmjs.com/package/react-query-class-component"&gt;react-query-class-component&lt;/a&gt;  npm package (small-sized), it will help you to use react-query hooks in your class-based component, it supports all react-query hooks. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How to use?
&lt;/h3&gt;

&lt;p&gt;To add this package to your project, run the following command in terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react-query-class-component
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then at the top of your component file import following component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;QueryClientHook&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-query-class-component&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;QueryClientHook&lt;/strong&gt; is the component through this you can run react-query hooks in class-based component. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;hook&lt;/strong&gt; (required): react-query hook , eg. useQuery, useQueries etc...&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;params&lt;/strong&gt; (required): List of params to be passed in react-query hook mentioned in "hook" param&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;options&lt;/strong&gt; (optional): options for react-query hook
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;QueryClientHook&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query-class-component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TodoList&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/QueryClientProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TodoList&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;QueryClientHook&lt;/span&gt;
                    &lt;span class="nx"&gt;hook&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// react query hook&lt;/span&gt;
                    &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// keyName&lt;/span&gt;
                        &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="c1"&gt;// query function&lt;/span&gt;
                            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                            &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="p"&gt;},&lt;/span&gt;
                        &lt;span class="c1"&gt;// ...options&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="na"&gt;retryOnMount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="na"&gt;staleTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="p"&gt;},&lt;/span&gt;
                    &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                                &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                                    &lt;span class="p"&gt;);&lt;/span&gt;
                                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                        &lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/QueryClientHook&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#try-it-yourself-on-codesandboxio"&gt;
  &lt;/a&gt;
  Try it yourself on codesandbox.io
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/loving-sun-00w53?file=/src/App.js"&gt;https://codesandbox.io/s/loving-sun-00w53&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#npm-package"&gt;
  &lt;/a&gt;
  NPM Package
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/react-query-class-component"&gt;https://www.npmjs.com/package/react-query-class-component&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#contribution"&gt;
  &lt;/a&gt;
  Contribution
&lt;/h4&gt;

&lt;p&gt;Please raise an issue or send Pull Request if you find any bugs in the package.&lt;br&gt;
&lt;a href="https://github.com/emgk/react-query-class-component"&gt;https://github.com/emgk/react-query-class-component&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;thank ya! &amp;lt;3 &lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>redux</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Working with Github Actions CI Workflow - Swift Programming</title>
      <author>Japneet Singh</author>
      <pubDate>Fri, 19 Nov 2021 09:27:33 +0000</pubDate>
      <link>https://dev.to/japneetsingh035/working-with-github-actions-ci-workflow-swift-programming-3po3</link>
      <guid>https://dev.to/japneetsingh035/working-with-github-actions-ci-workflow-swift-programming-3po3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;To set up Github Actions CI Workflow for swift. You will be required to visit your repository on GitHub. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;On GitHub.com, navigate to the main page of the repository.&lt;/li&gt;
&lt;li&gt;Under your repository name, click Actions.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qotaW8E---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f9z84otyr340ea48f1yo.png" alt="Image description" width="880" height="92"&gt;
&lt;/li&gt;
&lt;li&gt;If you already have a workflow in your repository, click New workflow.&lt;/li&gt;
&lt;li&gt;Find the template that you want to use, then click Set up this workflow.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t_UP90QF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tbfdiwjrq10whllnubz.png" alt="Image description" width="880" height="426"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Swift&lt;/span&gt;

    &lt;span class="nv"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="nv"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="nv"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
     &lt;span class="nv"&gt;pull_request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="nv"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="nv"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="nv"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

     &lt;span class="n"&gt;runs&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;macos&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;latest&lt;/span&gt;

     &lt;span class="nv"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;checkout&lt;/span&gt;&lt;span class="kd"&gt;@v2&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Build&lt;/span&gt;
     &lt;span class="nv"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;swift&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;
     &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Run&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt;
     &lt;span class="nv"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;swift&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#working-on-other-repo"&gt;
  &lt;/a&gt;
  Working on other repo
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;All in all, CI enables Organizations to scale their engineering teams, codebases, and infrastructure. It enables each team member to take ownership of a new code change from conception to completion. This will help you to be the rightful owner for the code to be tested before release.&lt;/p&gt;

</description>
      <category>swift</category>
      <category>opensource</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>The ephemeral miniconf - The review</title>
      <author>Tib</author>
      <pubDate>Fri, 19 Nov 2021 09:26:55 +0000</pubDate>
      <link>https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-the-review-19bo</link>
      <guid>https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-the-review-19bo</guid>
      <description>&lt;p&gt;&lt;strong&gt;The ephemeral miniconf&lt;/strong&gt; just ended, it was a real success 😀 and I want now to share my review of the event (like I did for &lt;a href="https://dev.to/thibaultduponchelle/tprcic-2021-review-56k3"&gt;TPRCiC 2021&lt;/a&gt; and &lt;a href="https://dev.to/thibaultduponchelle/my-tprcic-2020-review-1187"&gt;TPRCiC 2020&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Let's call it &lt;strong&gt;TEM 2021&lt;/strong&gt; then 😀 even if I promised it would be the first an &lt;em&gt;last&lt;/em&gt; edition of this miniconf 😱&lt;/p&gt;

&lt;p&gt;This review is of course a bit &lt;em&gt;different&lt;/em&gt; from others since this time I attented, spoke, but most of all &lt;strong&gt;I was the organizer&lt;/strong&gt;...💪&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-of-the-miniconf"&gt;
  &lt;/a&gt;
  Start of the miniconf
&lt;/h2&gt;

&lt;p&gt;The miniconf started on time by a quick introduction that people would kill for (😀).&lt;/p&gt;

&lt;p&gt;I think I shared planning links, some "thanks" and few utils infos for the meeting ("remind me to record").&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-planning"&gt;
  &lt;/a&gt;
  Final planning
&lt;/h2&gt;

&lt;p&gt;(See it on the &lt;a href="https://thibaultduponchelle.github.io/the-ephemeral-miniconf/"&gt;website&lt;/a&gt; if you prefer)&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Date&lt;/th&gt;
&lt;th&gt;Title&lt;/th&gt;
&lt;th&gt;Speaker&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;18/11/2021 - 15h00&lt;/td&gt;
&lt;td&gt;Keynote&lt;/td&gt;
&lt;td&gt;Thibault Duponchelle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18/11/2021 - 15h10&lt;/td&gt;
&lt;td&gt;Native GitHub actions in Perl&lt;/td&gt;
&lt;td&gt;Juan Julián Merelo Guervós&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18/11/2021 - 15h40&lt;/td&gt;
&lt;td&gt;Do you really know XML?&lt;/td&gt;
&lt;td&gt;Thibault Duponchelle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18/11/2021 - 16h10&lt;/td&gt;
&lt;td&gt;Automatic Observability&lt;/td&gt;
&lt;td&gt;José Joaquín Atria&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18/11/2021 - 16h40&lt;/td&gt;
&lt;td&gt;Raku Quiz&lt;/td&gt;
&lt;td&gt;Group&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18/11/2021 - 16h50&lt;/td&gt;
&lt;td&gt;Open Food Facts&lt;/td&gt;
&lt;td&gt;Stephane Gigandet&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18/11/2021 - 17h20&lt;/td&gt;
&lt;td&gt;Cunningham's Law: A Year of Being Wrong on the Internet&lt;/td&gt;
&lt;td&gt;Mark Gardner&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18/11/2021 - 17h50&lt;/td&gt;
&lt;td&gt;Perl Quiz&lt;/td&gt;
&lt;td&gt;Group&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18/11/2021 - 18h00&lt;/td&gt;
&lt;td&gt;LemonLDAP::NG&lt;/td&gt;
&lt;td&gt;Clement Oudot&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18/11/2021 - 18h30&lt;/td&gt;
&lt;td&gt;Once Upon Perl Acronyms&lt;/td&gt;
&lt;td&gt;Thibault Duponchelle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18/11/2021 - 18h40&lt;/td&gt;
&lt;td&gt;End&lt;/td&gt;
&lt;td&gt;Thibault Duponchelle&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#native-github-actions-in-perl"&gt;
  &lt;/a&gt;
  Native GitHub actions in Perl
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-speaker-annoucement-4n8f"&gt;Juan Julián Merelo Guervós&lt;/a&gt; presented maybe the more "Devops" talk of the miniconf (competing with José Joaquín Atria) about GitHub actions and containers. Perl is originally probably the best tool for sysadmin and devops (because it's close to system, very UNIX oriented, easy to deal with processus and files...) and GitHub actions (or Orb or whatever) provide a fantastic facility (with &lt;code&gt;perl&lt;/code&gt; always there) for continuous integration, continuous test and CD/CD. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LQw7CtFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3mzibsitm8pe74dggf7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LQw7CtFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3mzibsitm8pe74dggf7.png" alt="JJ Merelo" width="576" height="328"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm personally well versed in this area, but it has to be spread more generally in the Perl community (I see you &lt;a class="mentioned-user" href="https://dev.to/szabgab"&gt;@szabgab&lt;/a&gt;
)&lt;/p&gt;

&lt;p&gt;It was a very clean and professional talk, did I say we had only experienced speakers?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-you-really-know-xml"&gt;
  &lt;/a&gt;
  Do you really know XML?
&lt;/h2&gt;

&lt;p&gt;This title probably makes you not dream that much but during the creation of an &lt;a href="https://metacpan.org/pod/XML::Minifier"&gt;XML module for minification&lt;/a&gt;, I had to dig very deep in XML features and spec (and libxml2 code) to cover all cases. &lt;/p&gt;

&lt;p&gt;This presentation requires you to know XML (who does not!) to look with me at "corner invalid syntax things" (nested comments, duplicate attribute...), security (Billion Laughs attack, XXE injections, Quadratic blowup...), "lesser known" XML features (xml::space, DTD default attribute). &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uBaZCDRy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92sfn0i2ail9vn7a2e1m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uBaZCDRy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92sfn0i2ail9vn7a2e1m.png" alt="Tib" width="880" height="486"&gt;&lt;/a&gt;&lt;br&gt;
Then I browsed all possible libxml2 parsed node types spending more time on the ones that are "mysterious" (because this is where is the fun actually) and finally talked about how do I managed (DWIM) XML minification.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automatic-observability"&gt;
  &lt;/a&gt;
  Automatic Observability
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-jose-joaquin-atria-2m5h"&gt;José Joaquín Atria&lt;/a&gt; came with a solid technical talk about Perl and &lt;a href="https://newrelic.com/"&gt;NewRelic&lt;/a&gt; monitoring. His talk is built upon the creation of &lt;a href="https://github.com/cv-library/NewFangle-Agent"&gt;NewFangle::Agent&lt;/a&gt; which allows you to easily monitor deep Perl trace events in NewRelic. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kbIeYYB3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f15szyzf9qydgn6v26bs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kbIeYYB3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f15szyzf9qydgn6v26bs.png" alt="Automatic Observability" width="880" height="484"&gt;&lt;/a&gt;&lt;br&gt;
As I said, very solid talk (he is experienced), I always enjoy native topics (I'm hanging out on &lt;a href="https://www.irc.perl.org/channels.html"&gt;#native channel on IRC&lt;/a&gt; 😀)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#raku-quiz"&gt;
  &lt;/a&gt;
  Raku Quiz
&lt;/h2&gt;

&lt;p&gt;After these first great talks, there was a &lt;strong&gt;QUIZ&lt;/strong&gt; or as we tend to call it "a Kahoot"! &lt;/p&gt;

&lt;p&gt;Questions were about Raku, from really easy to some harder ones about Raku internals. It was fun...👍&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cSy5Eqvv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4uq2nc2zc5z3lrv2ic0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cSy5Eqvv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4uq2nc2zc5z3lrv2ic0.png" alt="Raku Quiz" width="880" height="470"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And at the end, &lt;a class="mentioned-user" href="https://dev.to/sjn"&gt;@sjn&lt;/a&gt;
 won:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4OB0Gt4E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rb1sorv1qhc71gcjrqdr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4OB0Gt4E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rb1sorv1qhc71gcjrqdr.png" alt="Podium" width="880" height="457"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-food-facts"&gt;
  &lt;/a&gt;
  Open Food Facts
&lt;/h2&gt;

&lt;p&gt;As I said and repeat, &lt;a href="https://fr.openfoodfacts.org/"&gt;Open Food Facts&lt;/a&gt; is a real Perl flagship. It's for me a model of successful Free Software project, and a very pragmatic one above all.&lt;/p&gt;

&lt;p&gt;The project was presented by &lt;a href="https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-speaker-annoucement-314d"&gt;Stephane Gigandet&lt;/a&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PsYczfAh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pgk7uqtp5e5465al13un.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PsYczfAh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pgk7uqtp5e5465al13un.png" alt="Open Food Facts" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Very good talk, this project is cool and looking for manpower! What are you waiting for?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cunninghams-law-a-year-of-being-wrong-on-the-internet"&gt;
  &lt;/a&gt;
  Cunningham's Law: A Year of Being Wrong on the Internet
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-speaker-presentation-i0e"&gt;Mark Gardner&lt;/a&gt; kindly accepted to speak at &lt;strong&gt;The ephemeral miniconf&lt;/strong&gt; and I thank him like every other speakers.&lt;/p&gt;

&lt;p&gt;His talk was about some technical errors that have slipped into his numerous blog posts. Since he is a senior Perl programmer, these errors are traps (not language misunderstanding) and very interesting to analyze in a follow-up!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o46-dOyX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34mmudc3fgkjpgqqncj7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o46-dOyX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/34mmudc3fgkjpgqqncj7.png" alt="Being wrong" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#perl-quiz"&gt;
  &lt;/a&gt;
  Perl Quiz
&lt;/h2&gt;

&lt;p&gt;It was time for a second quiz!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8x4U84Sa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/en9ugtdmveapv8y3h6hv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8x4U84Sa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/en9ugtdmveapv8y3h6hv.png" alt="Perl quiz" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This time about Perl with more questions, and the podium was  bitterly disputed 😀&lt;/p&gt;

&lt;p&gt;This time, &lt;a class="mentioned-user" href="https://dev.to/mjgardner"&gt;@mjgardner&lt;/a&gt;
 won! Congrats 🎉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lemonldapng"&gt;
  &lt;/a&gt;
  LemonLDAP::NG
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/thibaultduponchelle/the-ephemeral-miniconf-clement-oudot-2a1a"&gt;Clement Oudot&lt;/a&gt; kindly accepted to present &lt;a href="https://lemonldap-ng.org/welcome/"&gt;LemonLDAP::NG&lt;/a&gt; from which he is one of the main core maintainers.&lt;/p&gt;

&lt;p&gt;His talks was very much appreciated and he presented a lot LDAP and "auth" concepts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mFpEtdZc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sy0oxgiry7jp4g7zobm7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mFpEtdZc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sy0oxgiry7jp4g7zobm7.png" alt="Clement LDAP" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And guess what, he came with a ukulele and sang a LDAP song 😱&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ru9E8XCW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4y3d20gqcgohk66zm0u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ru9E8XCW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s4y3d20gqcgohk66zm0u.png" alt="Ukulele" width="766" height="726"&gt;&lt;/a&gt;&lt;br&gt;
(I don't have the picture of him singing)&lt;/p&gt;

&lt;p&gt;Here is the song lyrics:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aOKBFsmD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqx47x8lyggzxwqg2kjm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aOKBFsmD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqx47x8lyggzxwqg2kjm.png" alt="Song" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#once-upon-perl-acronyms"&gt;
  &lt;/a&gt;
  Once Upon Perl Acronyms
&lt;/h2&gt;

&lt;p&gt;I prepared a second talk, this time more "fluffy". It was lightweight but worked well and people enjoyed 😀&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XhwUfzDf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6hl5ufeyx0pk9fe38pkf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XhwUfzDf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6hl5ufeyx0pk9fe38pkf.png" alt="Once Upon Perl Acronyms" width="880" height="485"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And it was a nice way to conclude &lt;strong&gt;The ephemeral miniconf&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;We then opened mics and put cameras on and talked briefly, then I said I was proud of what we achieved together.&lt;/p&gt;

&lt;p&gt;And FWIW here is a well deserved GIF:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IaBMcvBX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ywrmbxuy9hosgdlfh1h.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IaBMcvBX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ywrmbxuy9hosgdlfh1h.gif" alt="Camel GIF" width="400" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>perl</category>
      <category>miniconf</category>
      <category>raku</category>
    </item>
    <item>
      <title>WHAT IS VIRTUAL REALITY?</title>
      <author>Digvijay Karadia</author>
      <pubDate>Fri, 19 Nov 2021 09:25:21 +0000</pubDate>
      <link>https://dev.to/digvijay_karadia/what-is-virtual-reality-1i9a</link>
      <guid>https://dev.to/digvijay_karadia/what-is-virtual-reality-1i9a</guid>
      <description>&lt;p&gt;Virtual Reality (VR) is a computer-generated environment with scenes and objects that appear to be real, making the user feel they are doused in their surroundings. This context is formed inside a machine known as a Virtual Reality headset. VR allows us to involve ourselves in video games or movies as if we were one of the characters. We feel like we are doing the job and are realistic af. We can play any sport we like, we can perform surgeries, make food and do much other stuff to maximize performance.&lt;br&gt;
Although this may seem remarkably ahead of its time, its roots are not as recent as we may feel. The very first virtual reality device was considered to be Sensorama. It was a machine that had built-in seat and it played 3D movies, gave of smells, and generated vibrations to make the experience as vivid as possible. This device was brought into existence back as far as the mid-1950s. Following technological and software advancements over the coming years brought with them a continuous evolution both in projects and in interface design.&lt;/p&gt;

&lt;p&gt;That's enough about the theory that is propelling us into the future. Which sectors is Virtual Reality actually being used in today? Medicine, culture, education, and architecture are some of the areas that have already taken hold of this technology. &lt;/p&gt;

&lt;p&gt;In near future, Imagine going into virtual reality when deciding what furniture to buy for your residence. You will be able to walk around in a virtual living room, bedroom, kitchen, etc, and know what kind of furniture would fit in your house. In those simulations, you will be able to try out different items of furniture. So virtual reality would make many things possible.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Spring Framework 4.3 New Feature RequestMapping: @GetMapping, @PostMapping, @PutMapping, @DeleteMapping
</title>
      <author>Harry Nguyen</author>
      <pubDate>Fri, 19 Nov 2021 09:22:23 +0000</pubDate>
      <link>https://dev.to/harrynguyen88/spring-framework-43-new-feature-requestmapping-getmapping-postmapping-putmapping-deletemapping-524a</link>
      <guid>https://dev.to/harrynguyen88/spring-framework-43-new-feature-requestmapping-getmapping-postmapping-putmapping-deletemapping-524a</guid>
      <description>&lt;p&gt;&lt;a href="https://ozenero.com/spring-framework-4-3-new-feature-requestmapping-getmapping-postmapping-putmapping-deletemapping"&gt;https://ozenero.com/spring-framework-4-3-new-feature-requestmapping-getmapping-postmapping-putmapping-deletemapping&lt;/a&gt;&lt;br&gt;
Spring Framework 4.3 has some Web improvements. In the article, JavaSampleApproach will introduce you about New Feature RequestMapping: @GetMapping, @PostMapping, @PutMapping, @DeleteMapping, and @PatchMapping.&lt;br&gt;
Read more&lt;br&gt;
&lt;a href="https://ozenero.com/spring-framework-4-3-new-feature-requestmapping-getmapping-postmapping-putmapping-deletemapping"&gt;https://ozenero.com/spring-framework-4-3-new-feature-requestmapping-getmapping-postmapping-putmapping-deletemapping&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>The Essential Phases of Every Software Development Life Cycle</title>
      <author>QA Madness</author>
      <pubDate>Fri, 19 Nov 2021 09:21:43 +0000</pubDate>
      <link>https://dev.to/qamadness/the-essential-phases-of-every-software-development-life-cycle-1m13</link>
      <guid>https://dev.to/qamadness/the-essential-phases-of-every-software-development-life-cycle-1m13</guid>
      <description>&lt;p&gt;A software development life cycle (SDLC) is a methodology that defines the process of creating a software product. We’ve talked about some of the widely-used &lt;a href="https://www.qamadness.com/widely-used-software-development-methodologies-pros-and-cons/"&gt;SDLC methodologies&lt;/a&gt; in one of the previous posts. In this article, we’d like to focus more on different SDLC phases without connection to a particular methodology. It will help to understand better what stages make a development life cycle. Regardless of their sequence and timing, these stages and activities that take place during each remain pretty much the same. &lt;/p&gt;

&lt;p&gt;A software life cycle starts at the moment the decision to create a software product arises. It ends when the mentioned product stops functioning. In between, a company builds software and maintains it, often developing new features on the way. &lt;/p&gt;

&lt;p&gt;The phases that make a life cycle are requirements gathering, concept development, product development, testing, and maintenance. Let’s take a closer look at each of them. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements-gathering"&gt;
  &lt;/a&gt;
  Requirements Gathering
&lt;/h2&gt;

&lt;p&gt;In all SDLC models, the process starts from research – at least it should. To determine a product-market fit correctly, a project team needs to know the market they are about to enter and their potential users. &lt;/p&gt;

&lt;p&gt;As a rule, the requirements gathering stage begins with a justification of the need to create a new software product. This research may involve company employees or potential users. If the demand for a product exists, a team concludes their research by outlining the basic requirements for future software. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#concept-development"&gt;
  &lt;/a&gt;
  Concept Development
&lt;/h2&gt;

&lt;p&gt;Then, a project team proceeds to finalizing the product concept. This set of procedures may require additional user and/or market research to understand better what functionality and highlights the product should have. Usually, there are several working concepts, but only one will make it to the following stages.&lt;/p&gt;

&lt;p&gt;There are two artifacts usually generated during concept development – a technical task and a technical project. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#technical-task"&gt;
  &lt;/a&gt;
  Technical Task
&lt;/h3&gt;

&lt;p&gt;A technical task is a document that considers the tech specifications of a product, design peculiarities, and marketing requirements. In a way, it defines a range of tasks to be completed during the development process. It also features a final list of features, technologies to use, and the scope of work. As a rule, a Product Owner/Manager or several stakeholders create a technical task for the development team. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#technical-project"&gt;
  &lt;/a&gt;
  Technical Project
&lt;/h3&gt;

&lt;p&gt;Basically, a technical task covers the desired requirements. A technical project encompasses other documentation – Product Specifications, Test Strategy, Test Plan, etc. In other words, a technical project is a set of explanations and instructions on how to proceed with the development and QA processes for this particular product.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#software-development"&gt;
  &lt;/a&gt;
  Software Development
&lt;/h2&gt;

&lt;p&gt;When a development team is created (or assigned to the project), they proceed to coding. Often, this stage starts with creating a prototype of the entire software system or its parts. Then comes the physical implementation of the system elements. The team creates technical documentation, writes code, and starts debugging. Developers also cover unit testing. The outcome of this phase is the first working version of a software product. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#software-testing"&gt;
  &lt;/a&gt;
  Software Testing
&lt;/h2&gt;

&lt;p&gt;After the initial version of a product is ready, it is time for a QA team or a &lt;a href="http://www.qamadness.com/"&gt;software testing company&lt;/a&gt; to join. Depending on a company’s processes, it can happen after the complete functionality intended for release is ready or just certain features. In the first case, we are speaking about the traditional models, such as Waterfall. In the second case, a QA team doesn’t wait until everything is assembled but joins when something to work with appears, which is typical for an Agile SDLC.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-and-debugging"&gt;
  &lt;/a&gt;
  Testing and Debugging
&lt;/h3&gt;

&lt;p&gt;Testing comes hand-in-hand with software design and implementation. There is a list of significant aspects to check: compliance with the requirements and standards, design, accessibility, performance, and more. The result of testing activities is the elimination of shortcomings and improvement of its quality. In other words, the QA team detects bugs, provides reports on product quality, and suggests improvements (optionally). The development team fixes bugs and implements code changes if necessary. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#product-maintenance"&gt;
  &lt;/a&gt;
  Product Maintenance
&lt;/h2&gt;

&lt;p&gt;Neither the quality assurance nor development process ends after the release of a software product. Usually, they are ongoing. The support of software system performance, user training, and keeping documentation in order are some of the things the maintenance team is to cover. Maintenance is also about adapting the supplied software to new conditions, introducing changes to product features and documentation in case issues arise during product exploitation. This process continues until the product is decommissioned and the system development life cycle is over. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#standards-in-software-development"&gt;
  &lt;/a&gt;
  Standards In Software Development
&lt;/h2&gt;

&lt;p&gt;The purpose of using software life cycle models is to create an effective, cost-efficient, and high-quality software product. As you already know, the details of a software development cycle vary from company to company. The order and duration of the phases can be different, as well as the implementation of the basic principles. &lt;/p&gt;

&lt;p&gt;Nevertheless, there are certain industry standards meant to systemize the common practices of software development and maintenance. One of the best-known and commonly used is ISO/IEC 12207 – an international standard for an SDLC process. It defines the processes essential for developing and maintaining software systems, dividing them into three groups.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Main processes:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;acquisition;&lt;/li&gt;
&lt;li&gt;supply;&lt;/li&gt;
&lt;li&gt;development;&lt;/li&gt;
&lt;li&gt;exploitation;&lt;/li&gt;
&lt;li&gt;accompaniment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Supporting processes:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;documentation;&lt;/li&gt;
&lt;li&gt;configuration management;&lt;/li&gt;
&lt;li&gt;quality assurance;&lt;/li&gt;
&lt;li&gt;problem solving;&lt;/li&gt;
&lt;li&gt;audit;&lt;/li&gt;
&lt;li&gt;certification;&lt;/li&gt;
&lt;li&gt;joint assessment;&lt;/li&gt;
&lt;li&gt;verification.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Organizational processes:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;infrastructure creation;&lt;/li&gt;
&lt;li&gt;control;&lt;/li&gt;
&lt;li&gt;training;&lt;/li&gt;
&lt;li&gt;improvement.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The document states the activities and outcomes of each process. ISO/IEC 12207 was introduced in 1995 as the primary standard for the development processes. Since then, it has been through several revisions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#to-sum-up"&gt;
  &lt;/a&gt;
  To Sum Up
&lt;/h2&gt;

&lt;p&gt;Why is it important to follow software development life cycle phases? Companies that plan to develop a new product should consider all the aspects of an SDLC. One of the frequent mistakes is forgetting to allocate resources for product support and plan it properly. As a result, businesses risk ending up with a product that needs further improvements but no one to work on them. &lt;/p&gt;

&lt;p&gt;Just like that, the lack of knowledge of SDLC phases puts a team at risk of missing something. For example, if a company doesn’t have an in-house testing team, they should start looking for an outsourced QA partner early. If you remember that the QA phase is coming, you can be better prepared for it. Otherwise, there is a risk of a delay or insufficient QA coverage.&lt;/p&gt;

&lt;p&gt;Whether traditional or Agile, an SDLC model helps to plan the phases and activities in detail, so that as least surprises as possible pop up on the way. It also helps to realize that a product is always broader than a development. It starts with an idea and requires support until retirement. Stakeholders and developers should be ready that users can request improvements. Being familiar with various SDLC models helps to understand this from the beginning.&lt;/p&gt;

&lt;p&gt;If you need a QA company to help out with testing your product or setting up the QA process from scratch, feel free to &lt;a href="https://www.qamadness.com/contact-us/"&gt;contact us&lt;/a&gt; anytime. &lt;/p&gt;

</description>
      <category>sdlc</category>
      <category>softwaredevelopment</category>
      <category>testing</category>
      <category>testdev</category>
    </item>
  </channel>
</rss>
