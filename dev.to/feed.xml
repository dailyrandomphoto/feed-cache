<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>A Quickstart guide to setting up Vim for blogging</title>
      <author>Siddharth</author>
      <pubDate>Sat, 11 Sep 2021 04:22:46 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/a-quickstart-guide-to-setting-up-vim-for-blogging-1ia1</link>
      <guid>https://dev.to/siddharthshyniben/a-quickstart-guide-to-setting-up-vim-for-blogging-1ia1</guid>
      <description>&lt;p&gt;Vim is an &lt;strong&gt;extremely powerful&lt;/strong&gt; editor.&lt;/p&gt;

&lt;p&gt;But coding is not the only thing I use vim for (Guess where I'm writing this post?) Vim understands the structure of natural language, and you can jump between paragraphs, change words, delete sentences – With Vim you can edit at the speed of thought.&lt;/p&gt;

&lt;p&gt;But writing in Vim won't be &lt;em&gt;that&lt;/em&gt; smooth with your coding setup – you'll need a few plugins and mappings to make it better. Here, I'll show you how to quickly get started in blogging with Vim without going into too much detail.&lt;/p&gt;

&lt;p&gt;I'm going to assume you know basic Vim stuff, so if you don't, go learn the basics first!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#screenshot-please"&gt;
  &lt;/a&gt;
  Screenshot, please!
&lt;/h2&gt;

&lt;p&gt;Here's me editing this post in Vim. So meta, don't you think?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sNqeaUPz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vs2y6zv7dan47zu03sr3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sNqeaUPz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vs2y6zv7dan47zu03sr3.png" alt="Screenshot of vim editing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#general-settings"&gt;
  &lt;/a&gt;
  General settings
&lt;/h2&gt;

&lt;p&gt;I've set all the &lt;em&gt;"good" stuff&lt;/em&gt; which we should set anyways, like &lt;code&gt;syntax&lt;/code&gt;, &lt;code&gt;spell&lt;/code&gt;, &lt;code&gt;cursorline&lt;/code&gt;, and &lt;code&gt;cursorcolumn&lt;/code&gt;. Set those for the best effect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mappings"&gt;
  &lt;/a&gt;
  Mappings
&lt;/h2&gt;

&lt;p&gt;Moving lines is one common thing I usually do while writing posts, so I've mapped this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="nb"&gt;noremap&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; ddp
&lt;span class="nb"&gt;noremap&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; ddkkp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've also made my scroll "smooth" XD:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="nb"&gt;noremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;U&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;Y&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;noremap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;D&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;E&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, I've set up vim to insert a space after a comma:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;inoremap &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;,&amp;lt;&lt;/span&gt;space&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I also added a bunch of operator pending mappings to make editing in quotes and braces easier:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;onoremap &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;:&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;normal&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="k"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;vi&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
onoremap &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;:&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;normal&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="k"&gt;f&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;vi&lt;/span&gt;&lt;span class="p"&gt;{&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
onoremap &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="s2"&gt;" :&amp;lt;c-u&amp;gt;normal! f"&lt;/span&gt;&lt;span class="k"&gt;vi&lt;/span&gt;"&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
onoremap &lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="s1"&gt;' :&amp;lt;c-u&amp;gt;normal! f'&lt;/span&gt;&lt;span class="k"&gt;vi&lt;/span&gt;'&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
onoremap &lt;span class="k"&gt;in&lt;/span&gt;` &lt;span class="p"&gt;:&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;normal&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="k"&gt;f&lt;/span&gt;`&lt;span class="k"&gt;vi&lt;/span&gt;`&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

onoremap &lt;span class="k"&gt;il&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;:&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;normal&lt;span class="p"&gt;!&lt;/span&gt; F&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;vi&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
onoremap &lt;span class="k"&gt;il&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;:&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;normal&lt;span class="p"&gt;!&lt;/span&gt; F&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;vi&lt;/span&gt;&lt;span class="p"&gt;{&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
onoremap &lt;span class="k"&gt;il&lt;/span&gt;&lt;span class="s2"&gt;" :&amp;lt;c-u&amp;gt;normal! F"&lt;/span&gt;&lt;span class="k"&gt;vi&lt;/span&gt;"&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
onoremap &lt;span class="k"&gt;il&lt;/span&gt;&lt;span class="s1"&gt;' :&amp;lt;c-u&amp;gt;normal! F'&lt;/span&gt;&lt;span class="k"&gt;vi&lt;/span&gt;'&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
onoremap &lt;span class="k"&gt;il&lt;/span&gt;` &lt;span class="p"&gt;:&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;u&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;normal&lt;span class="p"&gt;!&lt;/span&gt; F`&lt;span class="k"&gt;vi&lt;/span&gt;`&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This lets you do stuff like &lt;strong&gt;c&lt;/strong&gt;hange the text &lt;strong&gt;i&lt;/strong&gt;n the &lt;strong&gt;n&lt;/strong&gt;ext &lt;strong&gt;(&lt;/strong&gt;s using &lt;code&gt;cin(&lt;/code&gt; or &lt;strong&gt;y&lt;/strong&gt;anking (copying in vim is called yanking) &lt;strong&gt;i&lt;/strong&gt;n the &lt;strong&gt;l&lt;/strong&gt;ast (&lt;strong&gt;l&lt;/strong&gt;ast because previous would conflict with vim mappings) code in &lt;strong&gt;`&lt;/strong&gt;s by running &lt;code&gt;cil"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The next is a mapping to change the text in the current heading:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;vim&lt;br&gt;
augroup header&lt;br&gt;
    autocmd FileType markdown :onoremap ih :&amp;lt;c-u&amp;gt;execute "normal! ?^#\\+.*$\r:nohlsearch\rwv$"&amp;lt;cr&amp;gt;&lt;br&gt;
    autocmd FileType markdown :onoremap ah :&amp;lt;c-u&amp;gt;execute "normal! ?^#\\+.*$\r:nohlsearch\rv$"&amp;lt;cr&amp;gt;&lt;br&gt;
augroup END&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This way you can &lt;code&gt;cih&lt;/code&gt; to change in the header and &lt;code&gt;cah&lt;/code&gt; to change in the next header.&lt;/p&gt;

&lt;p&gt;Another important mapping is to change a word:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;vim&lt;br&gt;
nnoremap &amp;lt;Leader&amp;gt;c *&lt;/code&gt;&lt;code&gt;cgn&lt;br&gt;
nnoremap &amp;lt;Leader&amp;gt;C #&lt;/code&gt;&lt;code&gt;cgn&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you run &lt;code&gt;&amp;lt;leader&amp;gt;c&lt;/code&gt;, the current word will be deleted and you can type anything instead of that. Hit &lt;code&gt;.&lt;/code&gt; and the same will happen to the next matching word! &lt;code&gt;&amp;lt;leader&amp;gt;C&lt;/code&gt; does the same, but goes backward.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plugins"&gt;
  &lt;/a&gt;
  Plugins!
&lt;/h2&gt;

&lt;p&gt;I use a lot of plugins, and I'll show you my vim markdown ones here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#looks"&gt;
  &lt;/a&gt;
  Looks
&lt;/h3&gt;

&lt;p&gt;For the centered editing and focus mode, I use &lt;a href="https://github.com/junegunn/goyo.vim"&gt;Goyo&lt;/a&gt; and &lt;a href="https://github.com/junegunn/limelight.vim"&gt;Limelight&lt;/a&gt;. There are alternatives, but these are the ones I use.&lt;/p&gt;

&lt;p&gt;For the syntax highlighting, I use Tim Pope's &lt;a href="https://github.com/tpope/vim-markdown"&gt;markdown runtime&lt;/a&gt;. Tim Pope is a magician at these things.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lexical-stuff"&gt;
  &lt;/a&gt;
  Lexical stuff
&lt;/h3&gt;

&lt;p&gt;For grammar and spellchecking, I use many plugins. The main one is &lt;a href="https://github.com/preservim/vim-pencil"&gt;Pencil&lt;/a&gt;. I also use &lt;a href="https://github.com/dbmrq/vim-ditto"&gt;Vim Ditto&lt;/a&gt;, &lt;a href="https://github.com/preservim/vim-lexical"&gt;Lexical&lt;/a&gt;, and &lt;a href="https://github.com/preservim/vim-wordy"&gt;Wordy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also use &lt;a href="https://github.com/jiangmiao/auto-pairs"&gt;autopairs&lt;/a&gt; to get nicely autoclosed quotes.&lt;/p&gt;

&lt;p&gt;That's just about it. There is more stuff I use, but these are the main ones. &lt;/p&gt;

&lt;p&gt;Thanks for reading! If you like this stuff, check out my &lt;a href="https://twitter.com/SiddharthShyn"&gt;Twitter&lt;/a&gt; or &lt;a href="https://twitter.com/intent/tweet?url=https%3A%2F%2Fdev.to%2Fsiddharthshyniben%2Fa-quickstart-guide-to-setting-up-vim-for-blogging-1ia1&amp;amp;text=Vim%20is%20an%20awesome%20editor,%20but%20with%20a%20bit%20of%20tweaking%20you%20can%20make%20it%20your%20blogging%20tool%20too!%20Check%20out%20this%20post%20for%20more"&gt;Tweet this post&lt;/a&gt; (Yeah, I've gotten a bit self promotion-ey)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sNqeaUPz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vs2y6zv7dan47zu03sr3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sNqeaUPz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vs2y6zv7dan47zu03sr3.png" alt="Screenshot of vim editing"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vim</category>
      <category>writing</category>
      <category>productivity</category>
    </item>
    <item>
      <title>The Ember Times - Issue No. 188</title>
      <author>The Ember Times</author>
      <pubDate>Sat, 11 Sep 2021 03:21:25 +0000</pubDate>
      <link>https://dev.to/embertimes/the-ember-times-issue-no-188-fkn</link>
      <guid>https://dev.to/embertimes/the-ember-times-issue-no-188-fkn</guid>
      <description>&lt;p&gt;👋 Emberistas! 🐹&lt;/p&gt;

&lt;p&gt;Ember 3.28 and 4.0 Beta Released, open source contributors wanted for Ember v4, reactively handle audio in Octane with &lt;code&gt;ember-stereo&lt;/code&gt;, and Twitter thread: Ember is data-first.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ember-328-and-40-beta-released"&gt;
  &lt;/a&gt;
  &lt;a href="https://blog.emberjs.com/ember-3-28-released/"&gt;🎉 Ember 3.28 and 4.0 Beta Released&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;After 3.5 years and 28 minor releases, Ember 3.28 marks the end of the project's 3.x series. To ensure a smooth upgrade path going into the 4.x series, 3.28 has been declared an LTS (Long Term Support) candidate. In six weeks, the latest patch version of 3.28 will be promoted to be the latest LTS release and replace 3.24-LTS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We're also announcing the start of the Ember 4.0 beta cycle for all sub-projects.&lt;/strong&gt; Following the process set in previous major versions, Ember 4.0's beta introduces no new features. Instead, it removes support for deprecated public APIs. We encourage our community (especially addon authors) to help test beta builds and report any bugs before they are published as a stable release in six weeks' time. We also encourage everyone to help maintainers resolve deprecations in their favorite addons. The &lt;a href="https://github.com/ember-cli/ember-try"&gt;ember-try&lt;/a&gt; addon is a great way to continuously test your projects against the latest Ember releases.&lt;/p&gt;

&lt;p&gt;Developers who want to prepare for the upcoming 4.0 version of Ember should work to resolve all deprecation warnings in their apps and addons while using Ember 3.28. An app or addon with no deprecation warnings on Ember 3.28 should be able to upgrade from Ember 4.0 without making significant changes outside of the dependency versions.&lt;/p&gt;

&lt;p&gt;You can read more about Ember's plans for 4.0 in &lt;a href="https://blog.emberjs.com/the-road-to-ember-4-0/"&gt;The Road to Ember 4.0&lt;/a&gt;. Please visit &lt;a href="https://blog.emberjs.com/ember-3-28-released/"&gt;Ember 3.28 and 4.0 Beta Released&lt;/a&gt; for the rest of the post, including details on Ember.js, Ember Data, and Ember CLI. Many thanks to &lt;a href="https://github.com/mixonic"&gt;Matthew Beale (@mixonic)&lt;/a&gt;, &lt;a href="https://github.com/jenweber"&gt;Jen Weber (@jenweber)&lt;/a&gt;, and &lt;a href="https://github.com/ijlee2"&gt;Isaac Lee (@ijlee2)&lt;/a&gt; for the excellent and informative writeup!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#open-source-contributors-wanted-for-ember-v4"&gt;
  &lt;/a&gt;
  📣 Open source contributors wanted for Ember v4
&lt;/h2&gt;

&lt;p&gt;Do you have some time to help out with shipping Ember v4? 🔥 The Learning Team is preparing docs and guides, and we need your brainpower and writing skills!&lt;/p&gt;

&lt;p&gt;Help wanted to complete this month:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The most pressing issue is the deprecation guides, please start here if you have bandwidth and comment to claim a subtask of the issue. &lt;a href="https://github.com/ember-learn/deprecation-app/issues/893"&gt;GitHub issue: Write missing deprecation guides&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Look through the API docs and remove references to classic syntax. We only want to show Octane style examples in v4. &lt;a href="https://github.com/emberjs/ember.js/issues/19702"&gt;GitHub issue: [Documentation] Epic - remove classic examples from API docs for Ember 4&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to commenting on the GitHub issues, we can also chat on &lt;a href="https://discord.com/channels/480462759797063690/480499624663056390/882839642448220230"&gt;#dev-ember-learning on Discord&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#reactively-handle-audios-in-octane-with-raw-emberstereo-endraw-"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/jkeen/ember-stereo"&gt;🎵 Reactively handle audios in Octane with &lt;code&gt;ember-stereo&lt;/code&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Since 2016, &lt;a href="https://github.com/jkeen"&gt;Jeff Keen (@jkeen)&lt;/a&gt; helped develop the open-source &lt;a href="https://github.com/nypublicradio/ember-hifi"&gt;ember-hifi&lt;/a&gt; for the New York Public Radio.&lt;/p&gt;

&lt;p&gt;Jeff recently released its modern, reactive successor &lt;a href="https://github.com/jkeen/ember-stereo"&gt;ember-stereo&lt;/a&gt;. He has worked hard on making audio manipulation simple and providing &lt;a href="https://ember-stereo.com/docs"&gt;extensive examples&lt;/a&gt;. We encourage you to have a look!&lt;/p&gt;

&lt;p&gt;Out of the box, you will be provided with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;stereo&lt;/code&gt; service: It manages loading and playing sounds, making sure that only one sound plays at a time, setting volume, and providing system-level events that your application can tie into.&lt;/li&gt;
&lt;li&gt;Template helpers, which can perform an action on, or retrieve information from, a sound or &lt;code&gt;url&lt;/code&gt; string—something entirely new from how &lt;code&gt;ember-hifi&lt;/code&gt; did things!&lt;/li&gt;
&lt;li&gt;A couple of modifiers, to help control volume and position&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;setupStereoTest()&lt;/code&gt;, to help write tests&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#twitter-thread-ember-is-datafirst"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/davert/status/1435372911452373000"&gt;🐦 Twitter thread: Ember is data-first&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/DavertMik"&gt;Michael Bodnarchuk (@DavertMik)&lt;/a&gt; wrote a &lt;a href="https://twitter.com/davert/status/1435372911452373000"&gt;Twitter thread&lt;/a&gt; on how tracked properties in Glimmer components help you build data-oriented components.&lt;/p&gt;

&lt;p&gt;Michael mentions that in React you write hooks to update the component's state, while in Ember the component's state is tied to the data. This data first approach makes it so we can pass the reacting class to the root component and we do not need to change any child components to make it work.&lt;/p&gt;

&lt;p&gt;Read the full &lt;a href="https://twitter.com/davert/status/1435372911452373000"&gt;Twitter thread&lt;/a&gt; and let us know if you have any thoughts about it too!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#contributors-corner"&gt;
  &lt;/a&gt;
  &lt;a href="https://guides.emberjs.com/release/contributing/repositories/"&gt;👏 Contributors' corner&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This week we'd like to thank &lt;a href="https://github.com/xg-wang" rel="noopener noreferrer"&gt;Thomas Wang (@xg-wang)&lt;/a&gt;, &lt;a href="https://github.com/kellyselden" rel="noopener noreferrer"&gt;Kelly Selden (@kellyselden)&lt;/a&gt;, &lt;a href="https://github.com/ijlee2" rel="noopener noreferrer"&gt;Isaac Lee (@ijlee2)&lt;/a&gt;, &lt;a href="https://github.com/igorT" rel="noopener noreferrer"&gt;Igor Terzic (@igorT)&lt;/a&gt;, &lt;a href="https://github.com/kategengler" rel="noopener noreferrer"&gt;Katie Gengler (@kategengler)&lt;/a&gt;, &lt;a href="https://github.com/charlesfries" rel="noopener noreferrer"&gt;Charles Fries (@charlesfries)&lt;/a&gt;, &lt;a href="https://github.com/NullVoxPopuli" rel="noopener noreferrer"&gt;@NullVoxPopuli&lt;/a&gt;, &lt;a href="https://github.com/esquith" rel="noopener noreferrer"&gt;Esquith Allen (@esquith)&lt;/a&gt;, &lt;a href="https://github.com/bmish" rel="noopener noreferrer"&gt;Bryan Mishkin (@bmish)&lt;/a&gt;, &lt;a href="https://github.com/chrisrng" rel="noopener noreferrer"&gt;Chris Ng (@chrisrng)&lt;/a&gt;, &lt;a href="https://github.com/ChrisCarini" rel="noopener noreferrer"&gt;Chris Carini (@ChrisCarini)&lt;/a&gt;, &lt;a href="https://github.com/sly7-7" rel="noopener noreferrer"&gt;Sylvain MINA (@sly7-7)&lt;/a&gt;, &lt;a href="https://github.com/mansona" rel="noopener noreferrer"&gt;Chris Manson (@mansona)&lt;/a&gt;, &lt;a href="https://github.com/amyrlam" rel="noopener noreferrer"&gt;Amy Lam (@amyrlam)&lt;/a&gt;, &lt;a href="https://github.com/rwwagner90" rel="noopener noreferrer"&gt;Robert Wagner (@rwwagner90)&lt;/a&gt;, &lt;a href="https://github.com/locks" rel="noopener noreferrer"&gt;Ricardo Mendes (@locks)&lt;/a&gt;, &lt;a href="https://github.com/lifeart" rel="noopener noreferrer"&gt;Alex Kanunnikov (@lifeart)&lt;/a&gt;, &lt;a href="https://github.com/simonihmig" rel="noopener noreferrer"&gt;Simon Ihmig (@simonihmig)&lt;/a&gt;, &lt;a href="https://github.com/Glarregle" rel="noopener noreferrer"&gt;Gabriela Larregle (@Glarregle)&lt;/a&gt;, &lt;a href="https://github.com/jenweber" rel="noopener noreferrer"&gt;Jen Weber (@jenweber)&lt;/a&gt;, &lt;a href="https://github.com/MinThaMie" rel="noopener noreferrer"&gt;Anne-Greeth Schot-van Herwijnen (@MinThaMie)&lt;/a&gt;, &lt;a href="https://github.com/himynameisjonas" rel="noopener noreferrer"&gt;Jonas Brusman (@himynameisjonas)&lt;/a&gt;, &lt;a href="https://github.com/rwjblue" rel="noopener noreferrer"&gt;Robert Jackson (@rwjblue)&lt;/a&gt;, &lt;a href="https://github.com/stefanpenner" rel="noopener noreferrer"&gt;Stefan Penner (@stefanpenner)&lt;/a&gt;, &lt;a href="https://github.com/ndekeister-us" rel="noopener noreferrer"&gt;Nathanaël Dekeister (@ndekeister-us)&lt;/a&gt;, &lt;a href="https://github.com/brendenpalmer" rel="noopener noreferrer"&gt;Brenden Palmer (@brendenpalmer)&lt;/a&gt;, and &lt;a href="https://github.com/gilest" rel="noopener noreferrer"&gt;Giles Thompson (@gilest)&lt;/a&gt; for their contributions to Ember and related repositories! 💖&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#connect-with-us"&gt;
  &lt;/a&gt;
  &lt;a href="https://docs.google.com/forms/d/e/1FAIpQLScqu7Lw_9cIkRtAiXKitgkAo4xX_pV1pdCfMJgIr6Py1V-9Og/viewform"&gt;🤓 Connect with us&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rNTeC-Ud--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r30i0xpwcx20b8wkmqlx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rNTeC-Ud--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r30i0xpwcx20b8wkmqlx.png" alt="Office Hours Tomster mascot"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Wondering about something related to Ember, Ember Data, Glimmer, or addons in the Ember ecosystem, but don't know where to ask? Readers’ Questions are just for you!&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;Submit your own&lt;/strong&gt; short and sweet &lt;strong&gt;question&lt;/strong&gt; under &lt;a href="https://bit.ly/ask-ember-core"&gt;bit.ly/ask-ember-core&lt;/a&gt;. And don’t worry, there are no silly questions, we appreciate them all - promise! 🤞&lt;/p&gt;


&lt;p&gt;Want to write for the Ember Times? Have a suggestion for next week's issue? Join us at &lt;a href="https://discordapp.com/channels/480462759797063690/485450546887786506"&gt;#support-ember-times&lt;/a&gt; on the &lt;a href="https://discord.gg/emberjs"&gt;Ember Community Discord&lt;/a&gt; or ping us &lt;a href="https://twitter.com/embertimes"&gt;@embertimes&lt;/a&gt; on Twitter.&lt;/p&gt;


&lt;p&gt;Keep on top of what's been going on in Emberland this week by subscribing to our &lt;a href="https://embertimes.substack.com/"&gt;e-mail newsletter&lt;/a&gt;! You can also find our posts on the &lt;a href="https://blog.emberjs.com/tag/newsletter"&gt;Ember blog&lt;/a&gt;. See you in two weeks!&lt;/p&gt;
&lt;br&gt;




&lt;p&gt;That's another wrap! ✨&lt;/p&gt;

&lt;p&gt;Be kind,&lt;/p&gt;

&lt;p&gt;Chris Ng, Isaac Lee, Amy Lam, and the Learning Team&lt;/p&gt;

</description>
      <category>ember</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Supabase Storage CDN and Transformation with Serverless function (Unofficial)</title>
      <author>Zernonia</author>
      <pubDate>Sat, 11 Sep 2021 02:47:45 +0000</pubDate>
      <link>https://dev.to/zernonia/supabase-storage-cdn-and-transformation-with-serverless-function-unofficial-go</link>
      <guid>https://dev.to/zernonia/supabase-storage-cdn-and-transformation-with-serverless-function-unofficial-go</guid>
      <description>&lt;p&gt;This tutorial is just a temporary alternative, while &lt;strong&gt;Supabase&lt;/strong&gt; team is working hard to ship more and more features, where Storage CDN and Transformation is in their pipeline.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0TwdoLKe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631279067782/63nFl5KeN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0TwdoLKe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631279067782/63nFl5KeN.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;source: &lt;a href="https://supabase.io/storage"&gt;https://supabase.io/storage&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  ⭐🎉🎊
&lt;/h2&gt;

&lt;p&gt;On that note, congratulations Supabase team on raising &lt;a href="https://techcrunch.com/2021/09/09/supabase-raises-30m-for-its-open-source-insta-backend/"&gt;$30M&lt;/a&gt; as an open source backend-as-a-service startup!!&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#get-started"&gt;
  &lt;/a&gt;
  Get started!
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#take-note-%E2%9A%A0"&gt;
  &lt;/a&gt;
  Take note ⚠:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;We will be using &lt;strong&gt;Vercel&lt;/strong&gt; Serverless function to make this magic happens, the code might be different but the logic is the same.&lt;/li&gt;
&lt;li&gt;We will be serving and transforming &lt;code&gt;Public&lt;/code&gt; bucket only. If you wish to see how to implement these magic with Supabase Auth for RLS, remember to follow me for more tutorial.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With that said, we will go through just a few simple steps to implement this magic on &lt;br&gt;
our Supabase Storage's images.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-getting-image-bucket-amp-name"&gt;
  &lt;/a&gt;
  1. Getting Image bucket &amp;amp; name
&lt;/h2&gt;

&lt;p&gt;We will be using &lt;code&gt;bucket_name&lt;/code&gt; and &lt;code&gt;file_name&lt;/code&gt; variable to call the serverless function, instead of the full public url. If not, your image link would be super-duper long, and unneccessary.&lt;/p&gt;

&lt;p&gt;Here are some of the way you could prepare the &lt;code&gt;bucket_name&lt;/code&gt; and/or &lt;code&gt;file_name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;1.If you are allowing your users to upload static content to &lt;code&gt;Public&lt;/code&gt; bucket, then take note of the &lt;code&gt;bucket_name&lt;/code&gt; and &lt;code&gt;file_name&lt;/code&gt; users keyed-in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bucket_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;static&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;    &lt;span class="c1"&gt;// your bucket name&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;avatar.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;    &lt;span class="c1"&gt;// name for the file&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;avatarFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;avatars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;upload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;bucket_name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;file_name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;avatarFile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;cacheControl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3600&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;upsert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2.You can get use &lt;a href="https://supabase.io/docs/reference/javascript/storage-from-list"&gt;from.list()&lt;/a&gt; to retrieve the images you want in a &lt;code&gt;bucket&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this case, I will simply just list everything in my &lt;code&gt;bucket_name&lt;/code&gt; bucket.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bucket_name&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;file_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3.If you already have the public URL fetch together in another query, with link such as &lt;code&gt;https://asdasaeipbvsvnr.supabase.co/storage/v1/object/public/static/avatar.png&lt;/code&gt;, then you can quickly get the &lt;code&gt;bucket_name&lt;/code&gt; and &lt;code&gt;file_name&lt;/code&gt; using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://asdasaeipbvsvnr.supabase.co/storage/v1/object/public/static/avatar.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;bucket_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;file_name&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;public/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alright, now we have our appropriate variable, we can start construct our new link to slot into &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag! 🙌&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-construct-new-link"&gt;
  &lt;/a&gt;
  2. Construct new link
&lt;/h2&gt;

&lt;p&gt;Because we are using Vercel serverless function, we need to wrap our img url around the &lt;code&gt;api&lt;/code&gt; route. &lt;/p&gt;

&lt;p&gt;If you are using Vercel for your current project, you can simply use the following code to generate new link for your &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;bucket_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// params we haven't mentioned...&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;new_link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/resize?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are not using, Vercel as deployment, you can easily &lt;a href="https://github.com/zernonia/supabase-cdn-transformation"&gt;forked this repo&lt;/a&gt; that I created for this tutorial. You just have to follow the steps and setup your &lt;code&gt;.env&lt;/code&gt; on Vercel. If you wanted to learn more on how this function works, continue follow along!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serverless-function"&gt;
  &lt;/a&gt;
  Serverless function
&lt;/h2&gt;

&lt;p&gt;This part is where the magic happens, let's create a new file in your project root, named &lt;code&gt;api/resize.ts&lt;/code&gt; (be default Vercel will convert all files in api folder into serverless function).&lt;/p&gt;

&lt;p&gt;Then, you have to install a few packages &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I'm using yarn and typescript, you can use npm, and plain Javascript if you like&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add sharp axios
yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; @vercel/node @types/sharp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, create a basic function as such:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;VercelRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;VercelResponse&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@vercel/node&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;sharp&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sharp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;VercelRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;VercelResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To quickly test out the &lt;code&gt;api&lt;/code&gt;, run &lt;code&gt;vercel dev&lt;/code&gt; to spin up Vercel Development Server.&lt;br&gt;
Then visit &lt;code&gt;http://localhost:3000/api/resize&lt;/code&gt;, it should response with 'Hi'.&lt;/p&gt;

&lt;p&gt;After that , replace the function with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;VercelRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;VercelResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;q&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;

  &lt;span class="c1"&gt;// this tricks to deconstruct all the nested query into it's own variable.&lt;/span&gt;
  &lt;span class="c1"&gt;// parameters&lt;/span&gt;
  &lt;span class="c1"&gt;//   w: width   (pixel)&lt;/span&gt;
  &lt;span class="c1"&gt;//   h: height   (pixel)&lt;/span&gt;
  &lt;span class="c1"&gt;//   f: file_name&lt;/span&gt;
  &lt;span class="c1"&gt;//   b: bucket_name&lt;/span&gt;
  &lt;span class="c1"&gt;//   q: quality  (0 to 100)&lt;/span&gt;

  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember we have created a new link for the image just now?? Now we have to construct it back to original url, then convert it to Buffer. Thankfully, axios make this job so easy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;VercelRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;VercelResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;

  &lt;span class="c1"&gt;// check if `bucket_name` and `file_name` are available, else return error&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SUPABASE_URL&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/storage/v1/object/public/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;responseType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;arraybuffer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;})).&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Buffer&lt;/span&gt;

     &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
     &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image/png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text/html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;h1&amp;gt;Internal Error&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;Sorry, there was a problem&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now test this api endpoint as such &lt;code&gt;http://localhost:3000/api/resize?f=avatar.png&amp;amp;b=static&lt;/code&gt; (Of course you need to have the image in your bucket) to see if your image is generated. If it works, let continue on the longest script in this tutorial, where we use sharp to transfrom our image to the desire width, height or quality.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;VercelRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;VercelResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="p"&gt;...&lt;/span&gt;

   &lt;span class="c1"&gt;// here we create a new_params object to convert string to number, and also set default value&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;new_params&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;// set default 800px&lt;/span&gt;
      &lt;span class="na"&gt;h&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="c1"&gt;// set to null if not provided, so that Sharp automatically keep the aspect ratio&lt;/span&gt;
      &lt;span class="na"&gt;q&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;      &lt;span class="c1"&gt;// set default 80% quality&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// here's where the Transformation happens&lt;/span&gt;
    &lt;span class="nx"&gt;sharp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;new_params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;new_params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;jpeg&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;quality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;new_params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;     &lt;span class="c1"&gt;// change to .webp() if you want to serve as webp&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toBuffer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// here's where set the cache&lt;/span&gt;
        &lt;span class="c1"&gt;// I set to cache the media for 1 week, 60seconds * 60minutes * 24hours * 7days&lt;/span&gt;
        &lt;span class="c1"&gt;// remove setHeader('Cache-Control') if you wish not to cache it&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cache-Control&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`public, immutable, no-transform, s-maxage=604800, max-age=604800`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image/jpeg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text/html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;h1&amp;gt;Internal Error&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;Sorry, there was a problem&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! Just a few line of codes and you have your own CDN and Transformation for Supabase Storage ready to go!!!! But! Don't forget the &lt;code&gt;new_link&lt;/code&gt; we created at our frontend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lastly"&gt;
  &lt;/a&gt;
  Lastly!
&lt;/h2&gt;

&lt;p&gt;This is the last step for this tutorial, we generated &lt;code&gt;new_link&lt;/code&gt; previously, but now it is ready to add more parameter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Set a few width so that cache is more efficient, and need not to create so many cache when different browser visit your website.&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;windowWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;windowWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;windowWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;800&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;windowWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;bucket_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;windowWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;h&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="c1"&gt;// set to null to keep image's aspect ratio&lt;/span&gt;
    &lt;span class="na"&gt;q&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;      
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;new_link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/resize?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// set the src to new link&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;myImg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;new_link&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we are DONE!!!&lt;br&gt;
All source code for this tutorial can be found &lt;a href="https://github.com/zernonia/supabase-cdn-transformation"&gt;here&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#showcase"&gt;
  &lt;/a&gt;
  Showcase
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.madewithsupabase.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1J_PmEU2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631288642681/vmrXvTB30.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out  &lt;a href="https://www.madewithsupabase.com/"&gt;Made With Supabase&lt;/a&gt;, and inspect the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;, you will see the similar code there, with slight minor change. &lt;/p&gt;

&lt;p&gt;What is Made With Supabase? It is a collection of projects that &lt;strong&gt;made with Supabase&lt;/strong&gt;! Feel free to submit your Supabase project, share the awesome-ness of Supabase with the world!&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#before-you-go"&gt;
  &lt;/a&gt;
  Before you go
&lt;/h1&gt;

&lt;p&gt;If you find this tutorial helpful, and wish to lean more, then follow me here, and follow my Twitter!&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--JqI6wApG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1419846185519513601/aIz1i1Oh_normal.jpg" alt="Zernonia profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Zernonia
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/zernonia"&gt;@zernonia&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      If you are using &lt;a href="https://twitter.com/supabase"&gt;@supabase&lt;/a&gt; for your project, remember to &lt;a href="https://twitter.com/hashtag/madewithsupabase"&gt;#madewithsupabase&lt;/a&gt; or submit your project at the &lt;a href="https://twitter.com/madewifsupabase"&gt;@madewifsupabase&lt;/a&gt; website ya! &lt;a href="https://t.co/YbV990ztiB"&gt;twitter.com/madewifsupabas…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:32 PM - 19 Aug 2021
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            Made With Supabase
          &lt;/span&gt;
          @madewifsupabase
        &lt;/div&gt;
        We have some new projects listed on #madewithsupabase ! Hooray!

Check out at https://t.co/6ArG8G9ZdF , or you can see them at the tweet below
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1428379387863306241" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1428379387863306241" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1428379387863306241" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>javascript</category>
      <category>supabase</category>
      <category>serverless</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Elixir intellisense stop working</title>
      <author>Long Le</author>
      <pubDate>Sat, 11 Sep 2021 00:41:07 +0000</pubDate>
      <link>https://dev.to/onpointvn/elixirls-intellisense-stop-working-29jo</link>
      <guid>https://dev.to/onpointvn/elixirls-intellisense-stop-working-29jo</guid>
      <description>&lt;p&gt;Recently, VSCode intellisense feature for elixir has stopped working on my Mac. Code autocomplete, go to definition, function description... are all failed. My colleagues encounter the same problem.&lt;br&gt;
After researching, I found the root cause is ElixirLS has crashed from launching.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6JdTLXtw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/958fwk12erc3mg9pd2ue.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6JdTLXtw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/958fwk12erc3mg9pd2ue.png" alt="ElixirLS crash"&gt;&lt;/a&gt;&lt;br&gt;
I tried to disable ElixirLS, close the editor, open the editor again and enable ElixirLS but no luck. I also tried to reinstall ElixirLS but nothing changes.&lt;br&gt;
So I went to ElixirLS Github homepage, move to &lt;a href="https://github.com/elixir-lsp/vscode-elixir-ls#troubleshooting"&gt;Troubleshooting region&lt;/a&gt; and I found the solution:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Remove .elixir_ls folder in project folder:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; .elixir_ls/ 
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Close VSCode.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open project in VSCode again, wait for ElixirLS run.&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n3l6nyOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8hveq7k7q2kbf3qhyj1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n3l6nyOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8hveq7k7q2kbf3qhyj1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And voila! &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>elixir</category>
      <category>elixirls</category>
      <category>intellisense</category>
      <category>vscode</category>
    </item>
    <item>
      <title>🎬Log In / Sign Up | html &amp; css✨</title>
      <author>Robson Muniz</author>
      <pubDate>Fri, 10 Sep 2021 23:56:36 +0000</pubDate>
      <link>https://dev.to/robsonmuniz16/log-in-sign-up-html-css-1424</link>
      <guid>https://dev.to/robsonmuniz16/log-in-sign-up-html-css-1424</guid>
      <description>&lt;p&gt;Create from scratch a “Responsive Login and Registration Form” using just html, css and JavaScript…&lt;/p&gt;




&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/JbWdz88oi90"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;We’re also going to use @media queries to make it responsive in whatever screen you want display it.&lt;/p&gt;

&lt;p&gt;It’s a quite simple project to do, but at the same time it will teach you a lot of cool thing on css like animation, grid and how to make it responsive.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>login</category>
    </item>
    <item>
      <title>13 project ideas for frontend dev</title>
      <author>Aya Bouchiha</author>
      <pubDate>Fri, 10 Sep 2021 22:58:59 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/10-project-ideas-for-web-dev-1k65</link>
      <guid>https://dev.to/ayabouchiha/10-project-ideas-for-web-dev-1k65</guid>
      <description>&lt;h2&gt;
  &lt;a href="#10-project-ideas-that-will-help-you-to-evolve-your-programming-skills"&gt;
  &lt;/a&gt;
  10 project ideas that will help you to evolve your programming skills
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;covid tracker &lt;/li&gt;
&lt;li&gt;note app&lt;/li&gt;
&lt;li&gt;e-commerce store&lt;/li&gt;
&lt;li&gt;typing test speed &lt;/li&gt;
&lt;li&gt;netflix clone&lt;/li&gt;
&lt;li&gt;random quotes app&lt;/li&gt;
&lt;li&gt;books store&lt;/li&gt;
&lt;li&gt;chat app&lt;/li&gt;
&lt;li&gt;quiz game&lt;/li&gt;
&lt;li&gt;Social Network&lt;/li&gt;
&lt;li&gt;hangman&lt;/li&gt;
&lt;li&gt;spotify clone&lt;/li&gt;
&lt;li&gt;blog&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#awesome-libraries-to-use-in-the-project"&gt;
  &lt;/a&gt;
  awesome libraries to use in the project
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;styled-components&lt;/li&gt;
&lt;li&gt;react-leaflet&lt;/li&gt;
&lt;li&gt;material-ui&lt;/li&gt;
&lt;li&gt;font-awesome&lt;/li&gt;
&lt;li&gt;axios&lt;/li&gt;
&lt;li&gt;react-select&lt;/li&gt;
&lt;li&gt;react-google-login&lt;/li&gt;
&lt;li&gt;react-facebook-login&lt;/li&gt;
&lt;li&gt;firebase&lt;/li&gt;
&lt;li&gt;redux&lt;/li&gt;
&lt;li&gt;numeral&lt;/li&gt;
&lt;li&gt;react-icons&lt;/li&gt;
&lt;li&gt;socket.io&lt;/li&gt;
&lt;li&gt;bootstrap&lt;/li&gt;
&lt;li&gt;tailwindcss&lt;/li&gt;
&lt;li&gt;node-sass&lt;/li&gt;
&lt;li&gt;quilljs&lt;/li&gt;
&lt;li&gt;react-avatar&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;have a good day&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Front-end: How to handle specific devices bugs</title>
      <author>Luiz Nascimento</author>
      <pubDate>Fri, 10 Sep 2021 22:25:07 +0000</pubDate>
      <link>https://dev.to/luiznasciment0/front-end-how-to-handle-specific-devices-bugs-2jg4</link>
      <guid>https://dev.to/luiznasciment0/front-end-how-to-handle-specific-devices-bugs-2jg4</guid>
      <description>&lt;p&gt;You spend a &lt;strong&gt;whole month&lt;/strong&gt; developing a new feature for your Web App. The &lt;strong&gt;deploy day&lt;/strong&gt; has finally arrived. You merge your branch with the main one and &lt;strong&gt;boom&lt;/strong&gt;. It’s in &lt;strong&gt;production&lt;/strong&gt;. Task done. You did it. &lt;strong&gt;Congratulations&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But then, after 5 minutes, you test it on your phone and you catch a &lt;strong&gt;very awkward bug in production&lt;/strong&gt;. As an iPhone user, your first thought is: “Ok, &lt;strong&gt;it must be Safari&lt;/strong&gt;. I’ll test it on Google Chrome”. Then you figure out it’s actually happening on Google Chrome too.&lt;/p&gt;

&lt;p&gt;Alright. Time to test it using another device. Let’s try an Android one. The damn bug &lt;strong&gt;is not happening here&lt;/strong&gt;. Sh*t. The problem is only happening on a &lt;strong&gt;specific mobile device&lt;/strong&gt;. What should I do now?&lt;/p&gt;

&lt;p&gt;That was my scenario today and I’ll tell you what were my &lt;strong&gt;approaches to handle it&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Usually, when you have problems with your code, you reach out to the glorious &lt;strong&gt;logs (😍)&lt;/strong&gt;. But how it would be possible to have access to that specific mobile device’s browser logs?&lt;/p&gt;

&lt;p&gt;I started googling things like “JavaScript bug only happening on mobile device” and I found out some browsers got an &lt;strong&gt;AMAZING&lt;/strong&gt; feature called &lt;strong&gt;REMOTE DEBUG&lt;/strong&gt;. This feature helped me a LOT and actually I had never heard about it. Here are the links explaining exactly how to do it on &lt;a href="https://www.browserstack.com/guide/how-to-debug-on-iphone"&gt;Safari&lt;/a&gt; and &lt;a href="https://developer.chrome.com/docs/devtools/remote-debugging/"&gt;Chrome&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After successfully having access to the logs, you start to have a clue of what’s happening. Unfortunately, the down side of using tools like Babel and Webpack is that it makes it tough to debug production problems. In my case, the logs were saying something like: &lt;code&gt;r.addEventListener is not a function&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;“r”? WTF… 😂&lt;/p&gt;

&lt;p&gt;In my case, I’m working on a &lt;strong&gt;HUGE&lt;/strong&gt; Web App, so it’s hard to find and solve these problems just by debugging the application, since there’s a &lt;strong&gt;lot&lt;/strong&gt; (custom hooks, providers, events, dispatches) happening at the same time.&lt;/p&gt;

&lt;p&gt;Sometime ago, &lt;a href="https://twitter.com/sseraphini"&gt;Sibelius&lt;/a&gt; (one of the &lt;strong&gt;smartest people I know&lt;/strong&gt;, you should definitely follow him) told me that a good approach to solve awkward bugs is by trying to &lt;strong&gt;isolate the problem&lt;/strong&gt; and &lt;strong&gt;reproduce it on a smaller context&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So I started searching by “addEventListener” in our codebase and trying to &lt;strong&gt;find code smells around it&lt;/strong&gt;. After finding possible problems, I decided to start by the one I’ve thought it was &lt;strong&gt;more probable&lt;/strong&gt; to be the one I was looking for. I &lt;strong&gt;extracted the logic&lt;/strong&gt; (it was a custom hook) and put it in an existent project (I have a POC on my github using the same stack we’re using in my job — definetely recommend you to do it) that I would be able to test it on that problematic device. After confirming it really was the problem, I’ve tried to fix it on that smaller concept.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sxkffpmJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7opd4u9vyzexdvyswldf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sxkffpmJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7opd4u9vyzexdvyswldf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And… &lt;strong&gt;Wohooh&lt;/strong&gt; 🎉🥰✅! You did it (now for real)!!!&lt;/p&gt;

&lt;p&gt;The final step was of course deploying the fix to production and save the old browser’s user life.&lt;/p&gt;

&lt;p&gt;This is what I wanted to share with you today! It was a very rich experience and I’ve learned a lot. Thank you for your attention!&lt;/p&gt;

&lt;p&gt;Disclaimer: in my current job we use tools to help monitoring our production environment and before doing all of these things, I checked if it was affecting a lot of users. After certifying it was affecting almost nobody, I did what I did. I would never let a bug in production for so long if it’s harming our users experience :)&lt;/p&gt;

&lt;p&gt;If you’re curious about what was the problem: I had a custom hook called “useMedia” to tell me if it was a mobile device or a desktop one. In order to do it, you need to use a browser feature called &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList"&gt;MediaQueryList&lt;/a&gt;. The MediaQueryList interface provides some methods and they’re deprecated, so I thought it was fine to use the new ones. Well, it wasn’t. In that case, it was better to use the deprecated methods since they’re widely accepted by browsers.&lt;/p&gt;

&lt;p&gt;Feel free to reach me out on &lt;a href="https://twitter.com/luizpn_"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Myths about Web Accessibility (Intro)</title>
      <author>Alvaro Montoro</author>
      <pubDate>Fri, 10 Sep 2021 21:32:07 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/myths-about-web-accessibility-29li</link>
      <guid>https://dev.to/alvaromontoro/myths-about-web-accessibility-29li</guid>
      <description>&lt;blockquote&gt;&lt;small&gt;&lt;strong&gt;There is an &lt;a href="https://dev.to/alvaromontoro/myths-about-web-accessibility-237k"&gt;all-in-one article including every part from this series&lt;/a&gt; (if you want prefer to read it all at once instead of "by installments")&lt;/strong&gt;&lt;/small&gt;&lt;/blockquote&gt;


&lt;p&gt;Web Accessibility is a must in every web development project, yet it seems to remain a mystery for many web developers. Like it's something legendary instead of an essential skill needed for the job.&lt;/p&gt;

&lt;p&gt;There are many misconceptions surrounding Web Accessibility, most of the time fueled by a lack of knowledge (or interest) in the matter. This article is a collection of some of those accessibility misconceptions or myths.&lt;/p&gt;

&lt;p&gt;Content of the series:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Accessibility is difficult&lt;/li&gt;
&lt;li&gt;Accessibility is expensive&lt;/li&gt;
&lt;li&gt;Accessible websites are ugly&lt;/li&gt;
&lt;li&gt;Accessibility is for blind people/screen readers&lt;/li&gt;
&lt;li&gt;Accessibility is for people with disabilities&lt;/li&gt;
&lt;li&gt;Automatic tests are enough for accessibility&lt;/li&gt;
&lt;li&gt;Accessibility overlays are enough to ensure Web Accessibility&lt;/li&gt;
&lt;li&gt;HTML is accessible by default&lt;/li&gt;
&lt;li&gt;No ARIA &amp;gt; Bad ARIA&lt;/li&gt;
&lt;li&gt;Prefers reduced motion means no motion&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Thank you &lt;a href="https://twitter.com/toddlibby"&gt;Todd Libby&lt;/a&gt;, &lt;a href="https://twitter.com/ldenoue"&gt;Laurent Denoue&lt;/a&gt;, &lt;a href="https://twitter.com/ItsCrisDiaz"&gt;Cristian Diaz&lt;/a&gt;, &lt;a href="https://twitter.com/InHuOfficial"&gt;InHuOfficial&lt;/a&gt;, and &lt;a href="https://twitter.com/MaciejPedzich"&gt;Maciej Pędzich&lt;/a&gt;, for all your insights, feedback, and (constructive) criticism when writing the article.&lt;/p&gt;

&lt;p&gt;Cover image by &lt;a href="https://unsplash.com/photos/YHR1vZ4-asY"&gt;Mike Hindle&lt;/a&gt; on Unsplash.&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Looking for advice about the first job after graduating</title>
      <author>Angelo Ryndon</author>
      <pubDate>Fri, 10 Sep 2021 21:27:39 +0000</pubDate>
      <link>https://dev.to/angeloryndon/looking-for-advice-about-the-first-job-after-graduating-365n</link>
      <guid>https://dev.to/angeloryndon/looking-for-advice-about-the-first-job-after-graduating-365n</guid>
      <description>&lt;p&gt;Hello! I hope everybody is keeping safe and healthy. I'm graduating this December and accepted an offer from the company I was working part-time on while I was studying. For the country I am in, they gave a great offer to someone who is about to graduate. The company is a very small startup. The main reason I accepted it was I felt it was a good way to thank them, cuz they gave me an opportunity while I was still at Uni. Also, I read somewhere that it is a good way to grow on a codebase you worked on before. I wanna see the mistakes, the good decisions, essentially learn on the previous work I made while I was working part-time, well I hope I do see them :D&lt;/p&gt;

&lt;p&gt;My question is should I have applied at other companies as well before accepting, because I have a good feeling I could've nabbed some offers on the well-known ones in our country (had commercial dev experience while studying, also a bit before studying. Had decent grades, had a non-trivial project from school - well for me it was).&lt;/p&gt;

&lt;p&gt;There were a few companies that I felt were really good when they did that presentation thingys students attend.&lt;/p&gt;

&lt;p&gt;Am I slowing my career growth? Because at the moment, this small startup is using older tech by web standards. Or is my previous reasoning better (grow on a codebase, give it some time, yada yada). I have a feeling I might not be able to go full on studying new tech to keep up outside of work, or is that a must anyways - essentially at most work places you will be working with old tech?. Seeking advice from experienced people, and thanks in advance for your time :)&lt;/p&gt;

</description>
      <category>career</category>
    </item>
    <item>
      <title>Myths about Web Accessibility</title>
      <author>Alvaro Montoro</author>
      <pubDate>Fri, 10 Sep 2021 20:22:03 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/myths-about-web-accessibility-237k</link>
      <guid>https://dev.to/alvaromontoro/myths-about-web-accessibility-237k</guid>
      <description>&lt;p&gt;Web Accessibility is a must in every web development project, yet it seems to remain a mystery for many web developers. Like it's something legendary instead of an essential skill needed for the job.&lt;/p&gt;

&lt;p&gt;Threre are many misconceptions surrounding Web Accessibility, most of the time fueled by a lack of knowledge (or interest) in the matter. This article is a collection of some of those accessibility misconceptions or myths.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Accessibility is difficult&lt;/li&gt;
&lt;li&gt;Accessibility is expensive&lt;/li&gt;
&lt;li&gt;Accessible websites are ugly&lt;/li&gt;
&lt;li&gt;Accessibility is for blind people/screen readers&lt;/li&gt;
&lt;li&gt;Accessibility is for people with disabilities&lt;/li&gt;
&lt;li&gt;Automatic tests are enough for accessibility&lt;/li&gt;
&lt;li&gt;Accessibility overlays are enough to ensure Web Accessibility&lt;/li&gt;
&lt;li&gt;HTML is accessible by default&lt;/li&gt;
&lt;li&gt;No ARIA &amp;gt; Bad ARIA&lt;/li&gt;
&lt;li&gt;Prefers reduced motion means no motion&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#accessibility-is-difficult"&gt;
  &lt;/a&gt;
  Accessibility is difficult
&lt;/h2&gt;

&lt;p&gt;We often hear this term when a project is at an advanced stage and not accessible. "Accessibility is difficult!" As if it was a justifiable reason because of all the delays they are experiencing. &lt;/p&gt;

&lt;p&gt;But there's nothing further from the truth. &lt;strong&gt;Accessibility is not difficult.&lt;/strong&gt; Do you know what's difficult? Running at an Olympic level. Even more, just running is difficult. A baby needs 12 months to start crawling, walking, and finally running. It's a slow process that requires strengthening the muscles, getting coordination, practice, practice, and more practice.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CkXxvoaQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ya5i5avoenellymas9xo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CkXxvoaQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ya5i5avoenellymas9xo.png" alt="A young woman and a young man athletes prepare to run in a training hall"&gt;&lt;/a&gt;&lt;/p&gt;
Alt text is difficult? Try running 100m in under 10 seconds (picture: &lt;a href="https://www.pexels.com/photo/young-athletes-preparing-for-running-in-training-hall-3764014/"&gt;
Andrea Piacquadio&lt;/a&gt;)&lt;br&gt; 



&lt;p&gt;On the other hand, a Web Developer can learn &lt;em&gt;at least&lt;/em&gt; the basics of Web Accessibility within hours, practice within days, and have a good grasp within weeks. Of course, they won't be experts. Still, they would be able to fix and prevent many of the issues highlighted in the &lt;a href="https://webaim.org/projects/million/"&gt;WebAIM Million report&lt;/a&gt; and avoid the main accessibility issues that plague the Internet nowadays.&lt;/p&gt;

&lt;p&gt;Obviously, there are more things to Web Accessibility than just the basics. Learning and mastering more advanced approaches takes time, but a good enough level is possible within a reasonable time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessibility-is-expensive"&gt;
  &lt;/a&gt;
  Accessibility is expensive
&lt;/h2&gt;

&lt;p&gt;Is it expensive in time? Expensive in money? Both of them? Either way, it is a dubious claim that can be heard towards the end of projects in which they did not consider Web Accessibility at the early stages... which makes it expensive! Teams will have to work on issues after the fact, rebuilding the solution (almost from scratch in some cases), which will waste time and money. Something that they could have avoided if they had implemented accessibility at the start.&lt;/p&gt;

&lt;p&gt;If you have a car and the oil light goes on, you change the oil. It will take you a few minutes, either done by yourself or at the shop, and it will cost you just a few bucks. However, if you don't change the oil, chances are that your engine will seize up and break down after a while. The repair will be in the hundreds (or thousands) of dollars, and it will require a mechanic using special tools and parts. Not to mention that the car will be off-service for days or weeks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rBSwslqs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9htrxkmdirxbj3g2kl1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rBSwslqs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9htrxkmdirxbj3g2kl1.jpg" alt="A car with the hood up while a man looks inside"&gt;&lt;/a&gt;&lt;/p&gt;
Don't blame the car! You drove with the oil light on for 50 miles! (picture: &lt;a href="https://www.pexels.com/photo/repairing-a-car-6078/"&gt;
Kaboompics&lt;/a&gt;)&lt;br&gt; 



&lt;p&gt;&lt;strong&gt;If you apply Web Accessibility at the right time (at the start of a project), it will cost less in the long run and save many headaches and stress to the team&lt;/strong&gt;. But if you wait to do it until you have to (e.g., after users complain or you get a lawsuit), then it will be expensive and painful. In addition, it will require specialists and be time-consuming.&lt;/p&gt;

&lt;p&gt;Taking into consideration that &lt;a href="https://www.ruhglobal.com/disability-influences-trillion-dollars-david-perez/"&gt;people with disabilities have a purchasing power of 1.3 trillion dollars&lt;/a&gt; (over &lt;a href="https://www.computerworld.com/article/2701645/8-trillion-reasons-to-make-your-technology-accessible.html"&gt;8 trillion including relatives and friends&lt;/a&gt;), maybe it's time to stop talking about Web accessibility as an expensive feature, and start presenting it as a profitable one. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessible-websites-are-ugly"&gt;
  &lt;/a&gt;
  Accessible websites are ugly
&lt;/h2&gt;

&lt;p&gt;Nothing could be further from the truth. Accessibility doesn't determine if a website is ugly or not. There are beautiful, accessible websites and really ugly non-accessible websites. Accessible websites will be as ugly (or as beautiful) as they are designed to be. Like any other website!&lt;/p&gt;

&lt;p&gt;This myth has gone a long way. It has existed since Web Accessibility is a thing (which means, basically since the beginning of the Internet) and it is rooted in a misconception. Before, the idea of accessibility was linked to no styles, no animations, no images, no videos... no nothing. A bland, dull, ugly site. But that doesn't have to be the case.&lt;/p&gt;

&lt;p&gt;Some of the accessibility requirements will indeed limit the creativity of designers and developers (e.g., sometimes finding an accessible color palette can be a challenge), but there are many tools online that will help with that. Plus, the different standards have evolved to include many accessibility features.&lt;/p&gt;

&lt;p&gt;We need to ditch the idea of building a website and then uglifying it to make it accessible. That's an old-school mentality. Accessible websites can be visually striking, animated, fun, interactive sites from the start. And good designers are doing a great job at infusing inclusiveness and accessibility out of the box.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessibility-is-for-blind-peoplescreen-readers"&gt;
  &lt;/a&gt;
  Accessibility is for blind people/screen readers
&lt;/h2&gt;

&lt;p&gt;With the most popular assistive technologies being focused on people with visual disabilities, it is &lt;em&gt;tempting&lt;/em&gt; to think that accessibility is mainly for blindness.&lt;/p&gt;

&lt;p&gt;But there's more to it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deaf or deaf-blind people,&lt;/li&gt;
&lt;li&gt;People using automatic page-turners, adaptive pencil grips, or assistive pointer devices,&lt;/li&gt;
&lt;li&gt;People with vestibular disorders,&lt;/li&gt;
&lt;li&gt;Keyboard users, braille devices users, sip-and-puff device users, to name a few.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The people who require Web Accessibility are not a homogeneous group. Therefore, we cannot apply a one-size-fits-all type of solution and move forward with it.&lt;/p&gt;

&lt;p&gt;Take the online controversy that happened not so long ago as an example: a blind person organized a ClubHouse meeting about Web Accessibility. Soon, he got some backlash from the Deaf community as ClubHouse is a notoriously inaccessible platform, and the gathering excluded people with hearing problems.&lt;/p&gt;

&lt;p&gt;Is it really possible to talk about accessibility while focusing only on visual disabilities? Without including all people involved? The answer is no.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessibility-is-for-people-with-disabilities"&gt;
  &lt;/a&gt;
  Accessibility is for people with disabilities
&lt;/h2&gt;

&lt;p&gt;This myth is a variation of the above. We already made clear that accessibility is not only for blind people, but we must not think it only impacts people with disabilities. It actually affects everyone!&lt;/p&gt;

&lt;p&gt;There are &lt;a href="https://userway.org/blog/how-situational-disabilities-impact-us-all"&gt;invisible and situation disabilities&lt;/a&gt; that impair people and limit what they can do temporarily (or even permanently). You may...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;...break a bone while playing basketball and be unable to use the mouse/keyboard on your computer. &lt;/li&gt;
&lt;li&gt;...be pregnant or have restless children that don't let you sleep at night, and then have sleep deprivation that doesn't let you focus during the day.&lt;/li&gt;
&lt;li&gt;...get an ear infection that baffles the sounds and prevents you from hearing your phone.&lt;/li&gt;
&lt;li&gt;...have common migraines that cause you to have "clouded vision" and short attention spans.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are surrounded by examples like these. Every day. Everywhere. Pay attention, and you will start noticing them more and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--39z0wnUj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/37uliedl4sylfq00311m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--39z0wnUj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/37uliedl4sylfq00311m.jpg" alt="Photography showing different runners in a race. One of them is in a wheelchair"&gt;&lt;/a&gt;&lt;/p&gt;
If I said 3 of these people had disabilities. Could you tell who? (picture: &lt;a href="https://www.pexels.com/photo/group-of-men-running-on-streets-2403057/"&gt;
RUN 4 FFWPU&lt;/a&gt;)&lt;br&gt; 



&lt;p&gt;Some people may think now:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Those are disabilities! Also, that's great... but that's not me. I have never broken a bone, and I don't plan on having kids, and I have loud ringtones... Oh, and I will stay young forever, too. So Web Accessibility doesn't apply to me.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Great confidence there, but that's wrong. Even if you are a fully healthy individual, you may find yourself in situations where Web Accessibility will help you. For example, using your laptop outside and the reflection doesn't let you read, wouldn't you want more contrast? Camping in the forest and the key images for the "what to do when a snake bites you?" article timeout or don't load correctly, wouldn't you want an alternative text that would help you?&lt;/p&gt;

&lt;p&gt;There are many more examples like that: people in remote areas with low connection, people with not state-of-the-art computers and phones, granny asking you for help because the text is too small to read... Don't underestimate the reach of Web Accessibility.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automatic-tests-are-enough-for-accessibility"&gt;
  &lt;/a&gt;
  Automatic tests are enough for accessibility
&lt;/h2&gt;

&lt;p&gt;Automated testing for accessibility is possible and highly recommended. But it is not a replacement for manual testing: automatic tests only &lt;a href="https://alphagov.github.io/accessibility-tool-audit/index.html"&gt;detect ~30% of the issues&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even if we can simulate a user's behavior with the keyboard and tab, check for color contrast, or a specific HTML structure, there are still tests that we cannot automate and behaviors that we cannot simulate. Thus, limiting the capacity of what automated tests can do.&lt;/p&gt;

&lt;p&gt;This is not to say that we should drop automatic accessibility tests. On the contrary, we should embrace them and use them in all our projects. It is important to remember that they complement and not replace good old manual testing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overlays-are-enough-to-ensure-web-accessibility"&gt;
  &lt;/a&gt;
  Overlays are enough to ensure Web Accessibility
&lt;/h2&gt;

&lt;p&gt;This is more a misconception among executives and people who make decisions about buying these types of solutions. The consensus in the Accessibility community is almost unanimous: overlays don't work. &lt;a href="https://overlayfactsheet.com/"&gt;None of them fully work&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An overlay is an automated technology aimed at improving the accessibility of a website. It may come in many flavors: plug-ins, add-on libraries, toolbars, widgets... but their functionality is similar: modify the page's source code on the fly and repair the non-accessible code, replacing it with an accessible version. Something really tempting at an affordable price and with just a single line of JavaScript.&lt;/p&gt;

&lt;p&gt;One line of JavaScript does not make a website 100% accessible. In some cases, the results may even be damaging. And all for just a little benefit, as people with disabilities already use tools that fix many of the issues that the overlays claim to fix.&lt;/p&gt;

&lt;p&gt;As we mentioned in a previous section, there is no one-size-fits-all solution for Web Accessibility. And that's exactly what overlays try to be.&lt;/p&gt;

&lt;p&gt;Things may change. While accessibility overlays may not be enough to ensure Web Accessibility at the moment, with the advances in AI and machine learning, they might become an alternative in the future. But currently, they aren't a solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-is-accessible-by-default"&gt;
  &lt;/a&gt;
  HTML is accessible by default
&lt;/h2&gt;

&lt;p&gt;We've heard many times developers say, "&lt;em&gt;HTML is accessible out of the box&lt;/em&gt;," almost as if the definition of HTML in the dictionary was:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Accessible.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But that is not always the case. There are HTML elements that are not accessible by themselves or may present challenges to the users.&lt;/p&gt;

&lt;p&gt;For example, elements like &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Accessibility/Multimedia"&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; have controls that are not fully keyboard-accessible&lt;/a&gt; and that differ considerably from browser to browser and cause frustration. Or the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element has many types that open pop-ups, which may not be accessible for everyone.&lt;/p&gt;

&lt;p&gt;There are many components and structures that are not native HTML elements (e.g., tab panels), and once we start combining HTML, accessibility issues may pop up from the interaction.&lt;/p&gt;

&lt;p&gt;The definition of HTML in that imaginary Hitchhiker's Guide to the (Web) Galaxy should be updated to something more appropriate:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Mostly accessible.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That looks much better, and it is definitely more accurate to reality. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#no-aria-gt-bad-aria"&gt;
  &lt;/a&gt;
  No ARIA &amp;gt; Bad ARIA
&lt;/h2&gt;

&lt;p&gt;Before all accessibility experts start crying foul and cursing my name, let me clarify something: &lt;strong&gt;&lt;strong&gt;No ARIA is better than bad ARIA&lt;/strong&gt;&lt;/strong&gt;. ARIA is not supported by all browsers/screen readers, and it should be a last resort. The way to go should be using semantic HTML when possible.&lt;/p&gt;

&lt;p&gt;Unfortunately, using semantic HTML is not always possible and not enough to cover all the cases needed for a good experience. For example, there are widgets and patterns (e.g., tab panels again) that cannot be done using semantic elements and, in those cases, ARIA is a must.&lt;/p&gt;

&lt;p&gt;ARIA (an acronym for Accessible Rich Internet Applications) is a set of attributes used within HTML tags to make content more accessible. It supplements the HTML elements and provides assistive technologies with extra information that would not be available otherwise. But, if developers don't use these attributes correctly, the additional information they provide may be confusing and harm the user experience.&lt;/p&gt;

&lt;p&gt;The myth/misconception of "No ARIA &amp;gt; Bad ARIA" is that it leaves out an important part of the equation: where does "Good ARIA" go? And the answer is actually quite simple:&lt;/p&gt;


&lt;center&gt;&lt;strong&gt;Good ARIA &amp;gt; No ARIA &amp;gt; Bad ARIA&lt;br&gt; &lt;/strong&gt;&lt;/center&gt;

&lt;p&gt;We can all agree that bad ARIA is bad. But no ARIA isn't ideal either: the solution to providing a bad experience (bad ARIA) should not be providing a subpar experience (no ARIA). There should be a good experience too!&lt;/p&gt;

&lt;p&gt;If a kid is learning to ride a bike and struggles and falls, we don't tell them, "stop! don't ever ride a bike!" Instead, we teach them. We encourage them to keep learning and trying... until they can do it by themselves.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0eNMsZYY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpmvqtmo6xqptfgnk8cg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0eNMsZYY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpmvqtmo6xqptfgnk8cg.jpeg" alt="A little kid pushes a bicycle with the help of an adult"&gt;&lt;/a&gt;&lt;/p&gt;
Sorry, Timmy. You fell once. No point on trying again. (picture: &lt;a href="https://www.pexels.com/photo/full-body-of-father-and-child-in-protective-helmet-pushing-bike-along-road-3932890/"&gt;
Tatiana Syrikova&lt;/a&gt;)&lt;br&gt; 



&lt;p&gt;"No ARIA &amp;gt; bad ARIA" perpetuates a false dichotomy. There's good ARIA, too. And we can learn ARIA, practice ARIA, improve ARIA... We won't be good at the beginning, but we will get better and provide a better experience with time and practice than with no ARIA.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prefers-reduced-motion-means-no-motion"&gt;
  &lt;/a&gt;
  Prefers reduced motion means no motion
&lt;/h2&gt;

&lt;p&gt;This is more of developers' good intentions based on a misconception. We (myself included) found an option to reduce motion, and we "brute-force" our way through it, cancelling all transitions and animations like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-reduced-motion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;*,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not everything is black or white. There are many shades of grey, and not all animations and transitions are bad. &lt;a href="https://alistapart.com/article/designing-safer-web-animation-for-motion-sensitivity/"&gt;Some of them are worse than others&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We don't need to cancel every motion on a website. Instead, we need to think through them, check what's appropriate and not, and provide an expanded/animated experience for everybody.&lt;/p&gt;

&lt;p&gt;In An Event Apart, &lt;a href="https://aneventapart.com/news/post/making-motion-inclusive-aea-video"&gt;Val Head had a great presentation about accessibility and animation&lt;/a&gt;. In the video, she explains different animations and transitions and which ones are better when trying to avoid triggering a negative reaction: color changes, opacity fades, small movements...&lt;/p&gt;

&lt;p&gt;Also, related to this myth, reduced motion applies to more than just animations and transitions: background videos, animated GIFs, or scroll behavior are examples of things that need changes when the user opted for reduced motion. So let's not forget them.&lt;/p&gt;




&lt;p&gt;Thank you &lt;a href="https://twitter.com/toddlibby"&gt;Todd Libby&lt;/a&gt;, &lt;a href="https://twitter.com/ldenoue"&gt;Laurent Denoue&lt;/a&gt;, &lt;a href="https://twitter.com/ItsCrisDiaz"&gt;Cristian Diaz&lt;/a&gt;, &lt;a href="https://twitter.com/InHuOfficial"&gt;InHuOfficial&lt;/a&gt;, and &lt;a href="https://twitter.com/MaciejPedzich"&gt;Maciej Pędzich&lt;/a&gt;, for all your insights, feedback, and (constructive) criticism when writing the article.&lt;/p&gt;

&lt;p&gt;Cover image by &lt;a href="https://unsplash.com/photos/YHR1vZ4-asY"&gt;Mike Hindle&lt;/a&gt; on Unsplash.&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Rendering large datasets in Vue.js</title>
      <author>Matt Angelosanto</author>
      <pubDate>Fri, 10 Sep 2021 19:27:40 +0000</pubDate>
      <link>https://dev.to/logrocket/rendering-large-datasets-in-vue-js-j4n</link>
      <guid>https://dev.to/logrocket/rendering-large-datasets-in-vue-js-j4n</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/indrajithekanayake/"&gt;Indrajith Ekanayake&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;p&gt;Let’s say you are trying to implement a large dataset into a table. How large, you ask? Let’s say 100,000 rows need to be viewed in a single tabular format. &lt;/p&gt;

&lt;p&gt;If you use the native implementation in Vue.js, it will take forever for the page to render all that data. Just because you are a frontend developer doesn’t mean you get a free pass at having to worry about performance issues! &lt;/p&gt;

&lt;p&gt;Even if you are rendering a table with just 1,000 rows, it’s not going to be fun for the user to work through a table of that length. You’ll notice that scrolling isn’t as smooth as it typically is, especially when using the mouse wheel. &lt;/p&gt;

&lt;p&gt;In this article we will talk about several ways to reduce rendering time and increase overall performance for large datasets in Vue, as well as a few memory handling tips that will help your data-heavy sites run more smoothly and use less RAM.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pagination"&gt;
  &lt;/a&gt;
  Pagination
&lt;/h2&gt;

&lt;p&gt;This is one of the most common solutions for rendering large datasets. Pagination means breaking down the table into separate pages, so it will only render a single page at a time. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ATOfB-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/pagination-example.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ATOfB-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/pagination-example.png" alt="Example of pagination"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;You can use the &lt;code&gt;items&lt;/code&gt; prop, which accepts the item’s provider function to fetch data from a remote database. Then, use pagination and filtering in your API request to fetch only the required data for about 100 items on each request. &lt;/p&gt;

&lt;p&gt;That seems simple enough. But what if you need to load the whole table on a single page? Maybe you need an endpoint to pull everything back and run some calculations on the data. &lt;/p&gt;

&lt;p&gt;In such a case, there’s another method we can use to load our table.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#load-and-display-specific-areas-of-data"&gt;
  &lt;/a&gt;
  Load and display specific areas of data
&lt;/h2&gt;

&lt;p&gt;There are a few ways we can load specific areas of data without pagination: with Clusterize.js and with Vue-virtual-scroller and other related components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clusterizejs"&gt;
  &lt;/a&gt;
  Clusterize.js
&lt;/h3&gt;

&lt;p&gt;Clusterize.js is a JavaScript library that solves this problem quite easily. It enables us to load and display just a specific area of the table. So how does it work? &lt;/p&gt;

&lt;p&gt;The table is put inside &lt;a href="https://blog.logrocket.com/create-performant-virtual-scrolling-list-vuejs/"&gt;a scrollable container&lt;/a&gt; that displays a few rows at a time and allows you to move through the entire table. Only the visible part of the table will be created in the DOM structure. &lt;/p&gt;

&lt;p&gt;As soon as the user scrolls within the table container, new table data is loaded. So the data loading happens in the background, and the user won’t notice any difference. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AV1OM7Eg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/clusterize-js-example.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AV1OM7Eg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/clusterize-js-example.gif" alt="Clusterize.js in action"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Using Clusterize.js in your code is quite straightforward. &lt;/p&gt;

&lt;p&gt;The difference in performance after adding this plugin is remarkable. However, if you need to be sure, there’s a compelling example &lt;a href="https://clusterize.js.org/"&gt;at the top of their website&lt;/a&gt; that allows you to easily compare a regular table to a Clusterize.js-optimized table. Make sure you check out their playground, too, for even more proof. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e4WZ3Zq4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/Clusterize-js-playground.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e4WZ3Zq4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/Clusterize-js-playground.png" alt="Clusterize.js playground"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vuevirtualscroller-and-vuevirtualscrolllist"&gt;
  &lt;/a&gt;
  Vue-virtual-scroller and Vue-virtual-scroll-list
&lt;/h3&gt;

&lt;p&gt;These popular components allow for quick scrolling through large amounts of data in Vue apps, but do come with a caveat; &lt;a href="https://github.com/Akryum/vue-virtual-scroller"&gt;Vue-virtual-scroller&lt;/a&gt; and &lt;a href="https://www.npmjs.com/package/vue-virtual-scroll-list"&gt;Vue-virtual-scroll-list&lt;/a&gt; don’t deal with dynamic heights unless you hardcode them. If you want to test it out, there is a playground available for Vue Virtual Scroller &lt;a href="https://akryum.github.io/vue-virtual-scroller/#/"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Another option is the &lt;a href="https://github.com/flowstudio/vue-collection-cluster"&gt;Vue-collection-cluster&lt;/a&gt; component, which allows you to calculate heights dynamically, but it lags miserably at about 50,000 items. &lt;/p&gt;

&lt;p&gt;However, even with these drawbacks, each of these libraries allow you to build an adequate virtual scroll. In the end, if you have a database pushing about 10–100MB of JSON data, you are all set in performance. &lt;/p&gt;

&lt;p&gt;If your website is performance-optimized, we can move on to the next section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#memory-handling"&gt;
  &lt;/a&gt;
  Memory handling
&lt;/h2&gt;

&lt;p&gt;When dealing with a large dataset, the biggest thing you need to worry about is handling memory usage. If you allow users to edit a data-heavy table, you are going to be hitting a memory limit, and your web browser will stop running JavaScript altogether. &lt;/p&gt;

&lt;p&gt;Loading that much data puts a burden on web browsers (and the number of nodes they can retain in memory) and causes your devices’ RAM use to skyrocket. &lt;/p&gt;

&lt;p&gt;The problem will be amplified on devices with less memory, like smartphones and tablets, and could even cripple those devices. It’s biting off more than you can chew. &lt;/p&gt;

&lt;p&gt;Now, memory handling can be improved in many ways. I’ll separate it into five steps below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-limit-unnecessary-data-passing"&gt;
  &lt;/a&gt;
  1. Limit unnecessary data passing
&lt;/h3&gt;

&lt;p&gt;We can keep things simple and reduce the stress on our back end by fetching plain objects without related models. Then, the main results will only have ID keys to related objects. &lt;/p&gt;

&lt;p&gt;Plus, by using Axios (or a similar library) to fetch related data with separate AJAX requests (e.g., “customers”, “projects”, “locations”), we &lt;a href="https://blog.logrocket.com/how-to-consume-apis-with-vuex-and-axios/#:~:text=Introducing%20Axios%20and%20Vuex"&gt;can use VueX to store them&lt;/a&gt; in their own list properties. This will avoid fetching full-model trees. &lt;/p&gt;

&lt;p&gt;First, create getters for each object so we can use related models for fetching labels (or full objects when required) and our back end doesn’t need to fetch related data more than once:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;projectsById&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;projects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we can fetch different lists, each with its own controller endpoint, and cache the results to the VueX store. Keep in mind that you can send multiple requests using &lt;code&gt;Axios.all([...]).&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-optimize-data-handling"&gt;
  &lt;/a&gt;
  2. Optimize data handling
&lt;/h3&gt;

&lt;p&gt;It is necessary to optimize the way we handle our data. You can use the component object as data storage for your custom objects and object lists. An optimized list component setup looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
   &lt;span class="na"&gt;mixins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sharedUtils&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
   &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="na"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
   &lt;span class="nx"&gt;etc&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-make-it-nonreactive"&gt;
  &lt;/a&gt;
  3. Make it non-reactive
&lt;/h3&gt;

&lt;p&gt;It’s better to handle an item array as non-reactive, but how can we handle it in a nonreactive manner if we want the table to be reactive with real time filters? &lt;/p&gt;

&lt;p&gt;Whenever a user clicks a filter button or inputs a string filter (such as a name), we need to trigger the filtering of the items array. This &lt;code&gt;processFilters&lt;/code&gt; method goes through the nonresponsive items array and returns &lt;code&gt;filteredItems&lt;/code&gt;, which are stored in DataContext, so it automatically becomes reactive as it is transformed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;tr&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;item in filteredItems&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way, all the items within &lt;code&gt;filteredItems&lt;/code&gt; stay reactive, but also lose reactivity when they are filtered out, saving a lot of memory. &lt;/p&gt;

&lt;p&gt;However, the issue here is that we can’t just use items in DataContext directly within a template. So you cannot use this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"items.length &amp;gt; 0 &amp;amp;&amp;amp; everythingElseIsReady"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead, you have to store the length of the items array to a separate data prop.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-having-a-hidden-container"&gt;
  &lt;/a&gt;
  4. Having a hidden container
&lt;/h3&gt;

&lt;p&gt;With a nonreactive main data array, modifications made directly against items within that main array won’t trigger any changes to the UI or subcomponents. &lt;/p&gt;

&lt;p&gt;To solve this issue, we need a separate container that holds all the results from the back end with a smaller (filtered) presentation array of that larger container. In this case, we use good REST architecture to handle nonreactive data storage.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-differentiate-instanced-vs-referenced-objects"&gt;
  &lt;/a&gt;
  5. Differentiate instanced vs. referenced objects
&lt;/h3&gt;

&lt;p&gt;Sometimes when representing the same sub-object multiple times for different master records, without even realizing it, you might be creating objects that do not reference other objects. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yhp60d5h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/reference-object-example.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yhp60d5h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/reference-object-example.png" alt="Graphic example of a reference object"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;For example, imagine you have a &lt;code&gt;student-object&lt;/code&gt; that contains a &lt;code&gt;university-object&lt;/code&gt;. Now, multiple students go to the same university. But when you fetch JSON data from the back end, are you sure those duplicated &lt;code&gt;university-object&lt;/code&gt;s are the same university? Or are they multiple representations of the same object? &lt;/p&gt;

&lt;p&gt;You can, of course, pass &lt;code&gt;university&lt;/code&gt; as a property to your &lt;code&gt;student-object&lt;/code&gt;. At the same time, if you are unsure whether you are referring to a shared &lt;code&gt;university-object&lt;/code&gt; or using dozens of instances of the same sub-objects, you could simply do the referencing inside your &lt;code&gt;student-list&lt;/code&gt; component. &lt;/p&gt;

&lt;p&gt;A student will contain a &lt;code&gt;university-id&lt;/code&gt;, so fetch a list of Universities with a separate REST-method (e.g., &lt;code&gt;getUniversities()&lt;/code&gt;), and do the pairing on the UI level. This way, you have only one list of Universities, and you can resolve the University from that list and inject it into a person, thereby making reference to only one. &lt;/p&gt;

&lt;p&gt;Basically, you need to manage your master records (e.g., &lt;code&gt;persons&lt;/code&gt; or &lt;code&gt;products&lt;/code&gt;) vs. related records (sub-objects or relational objects). &lt;/p&gt;

&lt;p&gt;Keep in mind that you can’t use this method if the sub-object is reactive. If it needs to be editable, then you need to make sure that you are not using the referred object!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we briefly discussed pagination and using Clusterize.js to optimize a website’s performance. Then, we dove into memory handling with five easy steps: limiting unnecessary data passing, optimizing data handling, making it non-reactive, having a hidden container, and differentiating instances of objects from referenced ones. &lt;/p&gt;

&lt;p&gt;All things considered, Vue is fairly efficient in handling large datasets. But like everything, the best way to see if it is suitable for your needs would be to create the type of components, filter, and sorts that you need, then load them with large sets of (seed or testing) data to check if they are performant enough for your needs.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#experience-your-vue-apps-exactly-how-a-user-does"&gt;
  &lt;/a&gt;
  Experience your Vue apps exactly how a user does
&lt;/h2&gt;

&lt;p&gt;Debugging Vue.js applications can be difficult, especially when there are dozens, if not hundreds of mutations during a user session. If you’re interested in monitoring and tracking Vue mutations for all of your users in production, &lt;a href="https://www2.logrocket.com/vue-performance-monitoring"&gt;try LogRocket&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Rso_joi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://files.readme.io/00591d0-687474703a2f2f692e696d6775722e636f6d2f6a3049327856572e706e67.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Rso_joi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://files.readme.io/00591d0-687474703a2f2f692e696d6775722e636f6d2f6a3049327856572e706e67.png" alt="LogRocket Dashboard Free Trial Banner"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://logrocket.com/signup/"&gt;https://logrocket.com/signup/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www2.logrocket.com/vue-performance-monitoring"&gt;LogRocket&lt;/a&gt; is like a DVR for web apps, recording literally everything that happens in your Vue apps including network requests, JavaScript errors, performance problems, and much more. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred.&lt;/p&gt;

&lt;p&gt;The LogRocket Vuex plugin logs Vuex mutations to the LogRocket console, giving you context around what led to an error, and what state the application was in when an issue occurred.&lt;/p&gt;

&lt;p&gt;Modernize how you debug your Vue apps - &lt;a href="https://www2.logrocket.com/vue-performance-monitoring"&gt;Start monitoring for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Getting Started With Angular Material</title>
      <author>Dev By RayRay</author>
      <pubDate>Fri, 10 Sep 2021 19:23:36 +0000</pubDate>
      <link>https://dev.to/devbyrayray/getting-started-with-angular-material-20a7</link>
      <guid>https://dev.to/devbyrayray/getting-started-with-angular-material-20a7</guid>
      <description>&lt;p&gt;A lot of developers are using Angular Material in their Angular applications. But what is the best way to add the library, and why do you want to use &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="#what-is-angular-material"&gt;What Is Angular Material?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="#why-use-angular-material"&gt;Why Use Angular Material?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="#how-to-add-angular-material"&gt;How To Add Angular Material?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="#how-to-use-angular-material"&gt;How To Use Angular Material?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="#how-to-load-all-angular-material-components-at-once"&gt;How To Load All Angular Material Components At Once&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-angular-material"&gt;
  &lt;/a&gt;
  What Is Angular Material?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zaaEwZkS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631300625484/dmyoLS4_h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zaaEwZkS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631300625484/dmyoLS4_h.png" alt="Screenshot_2021-09-02_at_15.59.01.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Angular Material is an Angular Component library build and maintained by Google.&lt;/p&gt;

&lt;p&gt;It's a component library filled with a ton of easy to use Angular components. The library includes components like a &lt;a href="https://material.angular.io/components/datepicker/overview"&gt;datepicker&lt;/a&gt;, &lt;a href="https://material.angular.io/components/input/overview"&gt;input elements&lt;/a&gt;, &lt;a href="https://material.angular.io/components/slide-toggle/overview"&gt;toggle switches&lt;/a&gt;, &lt;a href="https://material.angular.io/components/table/overview"&gt;tables&lt;/a&gt; and, &lt;a href="https://material.angular.io/components/categories"&gt;a lot more&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Components support customization in various ways. You can use their pre-built themes or build your own with the custom color scheme.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-angular-material"&gt;
  &lt;/a&gt;
  Why Use Angular Material?
&lt;/h2&gt;

&lt;p&gt;Angular Material is updated simultaneously with Angular, which is one of the best advantages of using Angular Material and not other component libraries. Every time Google brings a new update for Angular, it will update Angular Material simultaneously.&lt;/p&gt;

&lt;p&gt;When you update your Angular application with &lt;code&gt;ng update&lt;/code&gt;, it will also update Angular Material simultaneously, which is pretty handy.&lt;/p&gt;

&lt;p&gt;With Angular Material, you know for sure, as long as Google keeps developing Angular, it will stay Angular Material up-to-date. &lt;/p&gt;

&lt;p&gt;All the components have been tested for a long time. I've been an Angular Material user for a long time, but I've never had an actual error in an Angular Material component.&lt;/p&gt;

&lt;p&gt;But if you don't like the style of Angular Material, you can also change their styling. Picking another Angular component library is an excellent alternative if you want something different.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-add-angular-material"&gt;
  &lt;/a&gt;
  How To Add Angular Material?
&lt;/h2&gt;

&lt;p&gt;Before installing Angular Material in an existing project, we have to make sure you installed the Angular CLI. If you haven't, run this command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; @angular/cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's start with installing Angular Material in an existing project.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ng add @angular/material
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;When you perform the command above, you will get a few configuration options to choose from. Make the choice you want.&lt;/p&gt;

&lt;p&gt;After this process, you can use Angular Material in your Angular project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-use-angular-material"&gt;
  &lt;/a&gt;
  How To Use Angular Material?
&lt;/h2&gt;

&lt;p&gt;Angular Material components can be used by importing the module.&lt;/p&gt;

&lt;p&gt;For example, if you want to use the &lt;a href="https://material.angular.io/components/checkbox/overview"&gt;checkbox component&lt;/a&gt;, you have to import the following module in the &lt;code&gt;app.module.ts&lt;/code&gt; if you're going to use it in all the components across the entire application.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;MatCheckboxModule&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/material/checkbox&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This code can be found on every component page in the API tab.&lt;/p&gt;

&lt;p&gt;Now you can go to a component where you want to use your imported component. Check the examples tab for an example of the components and code sample's on how to use the component.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;mat-checkbox&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"example-margin"&lt;/span&gt; &lt;span class="na"&gt;[(ngModel)]=&lt;/span&gt;&lt;span class="s"&gt;"checked"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Checked&lt;span class="nt"&gt;&amp;lt;/mat-checkbox&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-load-all-angular-material-components-at-once"&gt;
  &lt;/a&gt;
  How To Load All Angular Material Components At Once
&lt;/h2&gt;

&lt;p&gt;There is no default way to load all Angular Material component modules at once. I think there is a good reason for that.&lt;/p&gt;

&lt;p&gt;You can create an Angular Module to import all the Angular Material modules and import that module in your &lt;code&gt;app.module.ts&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The question is, are you going to use all the Angular Material components in your application? I don't think so because you're going to waste a whole lot of data that the user needs to download.&lt;/p&gt;

&lt;p&gt;I think it's wiser to load the module of the Angular Material component in the Angular Module where you need it. And not load them all at once.&lt;/p&gt;

&lt;p&gt;But if you want to do it, check out this &lt;a href="https://gist.github.com/pimatco/d5b1891feb90b60ca4681011b6513873"&gt;Gist on Github&lt;/a&gt; which has all the available Angular Material modules for you.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Angular Material offers a great set of well-tested and configurable Angular components. The most significant benefit is, it's developed simultaneously by the Angular team.&lt;/p&gt;

&lt;p&gt;I'm looking forwards to see all the projects you build with Angular Material!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5DfBJtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629890886208/NhHYvPmBA.png" alt="divider-byrayray.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks"&gt;
  &lt;/a&gt;
  Thanks!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DymzaNFk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629789655319/nBF6anHH4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DymzaNFk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629789655319/nBF6anHH4w.png" alt="hashnode-footer.png"&gt;&lt;/a&gt;&lt;br&gt;
*I hope you learned something new or are inspired to create something new after reading this story! 🤗 If so, consider subscribing via email (scroll to the top of this page) or follow me here on Hashnode.&lt;br&gt;
*&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Did you know that you can create a &lt;a href="https://hashnode.com/@devbyrayray/joinme"&gt;Developer blog like this one, yourself&lt;/a&gt;? It's entirely for free. 👍💰🎉🥳🔥&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;If I left you with questions or something to say as a response, scroll down and type me a message. Please send me a &lt;a href="https://twitter.com/@devbyrayray"&gt;DM on Twitter @DevByRayRay&lt;/a&gt; when you want to keep it private. My DM's are always open 😁&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
