<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>FILE HANDALING</title>
      <author>Pranavi nerella</author>
      <pubDate>Thu, 06 May 2021 14:26:55 +0000</pubDate>
      <link>https://dev.to/pranavi333/file-handaling-119j</link>
      <guid>https://dev.to/pranavi333/file-handaling-119j</guid>
      <description>&lt;p&gt;A file is the name of memory location where we can store data permanently under computer’s hard disk. Java language supports a set of classes in java.io package to create and maintain files. The following are some of the classes we can use to create and maintain files :&lt;/p&gt;

&lt;p&gt;FileInputStream&lt;br&gt;
FileOutputStream&lt;br&gt;
FileWriter etc.,&lt;/p&gt;

&lt;p&gt;FileOutputStream class :&lt;/p&gt;

&lt;p&gt;This class represent data as a stream of bytes. The objects of this class can be used to open and access a file in write mode. The object for this class can be created as below :&lt;/p&gt;

&lt;p&gt;FileOutputStream fis = new FileOutputStream(“file-name”,boolean-value); Here, if the boolean value is true, the file can be opened in append mode. If it is false,the data is overwritten from the beginning of the file every time when we execute the program.The following program demonstrates the use of this class.&lt;/p&gt;

&lt;p&gt;/* Program to store data into a file using FileOutputStream class */&lt;/p&gt;

&lt;p&gt;import java.io.*;&lt;/p&gt;

&lt;p&gt;class FileWrite{&lt;/p&gt;

&lt;p&gt;public static void main(String args[]) throws Exception {&lt;/p&gt;

&lt;p&gt;InputStreamReader isr = new InputStreamReader(System.in);&lt;/p&gt;

&lt;p&gt;BufferedReader br = new BufferedReader(isr);&lt;/p&gt;

&lt;p&gt;System.out.println(“Enter some text “);&lt;/p&gt;

&lt;p&gt;String data = br.readLine();&lt;/p&gt;

&lt;p&gt;FileOutputStream fos = new FileOutputStream(“file1.txt”,true);&lt;/p&gt;

&lt;p&gt;/* Because data is in the form of String object, convert it into byte array */&lt;/p&gt;

&lt;p&gt;byte b[] = data.getBytes();&lt;/p&gt;

&lt;p&gt;fos.write(b); /* writes byte array into file.txt */&lt;/p&gt;

&lt;p&gt;fos.close();&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;FileInputStream class :&lt;/p&gt;

&lt;p&gt;This clas represents data as a stream of bytes. The objects of this class can be used to open and access a file in read mode. The object for this class can be created as below :&lt;/p&gt;

&lt;p&gt;FileInputStream fis = new FileInputStream(“file-name”);&lt;/p&gt;

&lt;p&gt;The following program demonstrates the use of this class.&lt;/p&gt;

&lt;p&gt;/* Program to read data from a file using FileInputStream class */&lt;/p&gt;

&lt;p&gt;import java.io.*;&lt;/p&gt;

&lt;p&gt;class FileRead {&lt;/p&gt;

&lt;p&gt;public static void main(String args[]) throws Exception {&lt;/p&gt;

&lt;p&gt;FileInputStream fis = new FileInputStream(“file1.txt”);&lt;/p&gt;

&lt;p&gt;int size = fis.available(); /* available() returns no. of bytes in file1.txt */&lt;/p&gt;

&lt;p&gt;byte b [] = new byte[size];&lt;/p&gt;

&lt;p&gt;/* create a byte array of file size */&lt;/p&gt;

&lt;p&gt;fis.read(b);&lt;/p&gt;

&lt;p&gt;String data = new String(b);&lt;/p&gt;

&lt;p&gt;/* convert the byte array to string */&lt;/p&gt;

&lt;p&gt;System.out.println(“The contents of file1.txt are : “ + data);&lt;/p&gt;

&lt;p&gt;}// end of main&lt;/p&gt;

&lt;p&gt;}// end of class&lt;/p&gt;

&lt;p&gt;FileWriter class :&lt;/p&gt;

&lt;p&gt;This class represent data as a stream of characters. The objects of this class can be used to open and access a file in write mode. The object for this class can be created as below :&lt;/p&gt;

&lt;p&gt;FileWriter fw = new FileWriter(filename,boolean-value);&lt;/p&gt;

&lt;p&gt;The following program demonstrates the use of FileWriter class.&lt;/p&gt;

&lt;p&gt;import java.io.*;&lt;/p&gt;

&lt;p&gt;class FileWrite {&lt;/p&gt;

&lt;p&gt;public static void main(String args[]) throws Exception {&lt;/p&gt;

&lt;p&gt;FileWriter fw = new FileWriter(“file2.txt”,true);&lt;/p&gt;

&lt;p&gt;BufferedReader br = new BufferedReader(new InputStreamReader(System.in));&lt;/p&gt;

&lt;p&gt;System.out.println(“Enter some text “);&lt;/p&gt;

&lt;p&gt;String data = br.readLine();&lt;/p&gt;

&lt;p&gt;// convert data into equalent character array&lt;/p&gt;

&lt;p&gt;char ch[] = data.toCharArray();&lt;/p&gt;

&lt;p&gt;fw.write(ch);&lt;/p&gt;

&lt;p&gt;fw.close();&lt;/p&gt;

&lt;p&gt;} // end main&lt;/p&gt;

&lt;p&gt;} // end class&lt;/p&gt;

</description>
      <category>java</category>
    </item>
    <item>
      <title>Apprendre Ruby: Premier pas!</title>
      <author> </author>
      <pubDate>Thu, 06 May 2021 14:00:04 +0000</pubDate>
      <link>https://dev.to/ericcodeur/apprendre-ruby-premier-pas-1a35</link>
      <guid>https://dev.to/ericcodeur/apprendre-ruby-premier-pas-1a35</guid>
      <description>&lt;p&gt;Je développe en Javascript, Python, PHP et Ruby. Ruby est de tous mon langage de programmation préféré.&lt;/p&gt;

&lt;h2&gt; Vous souhaitez apprendre Ruby? &lt;/h2&gt;

&lt;p&gt;Dans cette série, nous partirons du début et découvrirons chaque aspect de Ruby une étape à la fois.&lt;/p&gt;

&lt;p&gt;Chaque article comprendra de la théorie mais aussi des exercices et des solutions.&lt;/p&gt;

&lt;p&gt;Si vous avez des questions / commentaires ou si vous êtes nouveau et avez besoin d'aide, vous pouvez commenter ci-dessous ou m'envoyer un message.&lt;/p&gt;

&lt;h2&gt; Exécutez votre code Ruby &lt;/h2&gt;

&lt;p&gt;Pas besoin de faire une installation complète. Allez simplement sur ce site Web &lt;a href="https://replit.com/languages/ruby"&gt;https://replit.com/languages/ruby&lt;/a&gt; et commencez à apprendre dès maintenant. Vous aurez tout le temps nécessaire pour comprendre l'installation de Ruby sur votre machine locale plus tard...&lt;/p&gt;

&lt;h1&gt; Variables Ruby &lt;/h1&gt;

&lt;p&gt;Si vous débutez dans la programmation, les variables sont les éléments fondamentaux d’un langage de programmation, car elles sont utilisées pour stocker différentes valeurs que vous souhaitez traiter dans votre code.&lt;/p&gt;

&lt;p&gt;Une fois que la variable est stockée dans la mémoire du programme, elle peut être utilisée plus tard.&lt;/p&gt;

&lt;p&gt;Par exemple, disons que vous souhaitez stocker le nom d'utilisateur, vous pouvez spécifier un nom de variable et définir sa valeur.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;nom_contact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La variable du nom de 'nom_contact' contient la valeur 'Mike Taylor'&lt;/p&gt;

&lt;p&gt;Dans Ruby, une variable de type texte (string) est placée entre guillemets.&lt;/p&gt;

&lt;p&gt;Le nom de la variable que nous venons de créer est une variable de type string. Dans Ruby, nous n'avons pas à spécifier le type de variable.&lt;/p&gt;

&lt;p&gt;Ruby est un langage interprété Just-in-time (JIT). Qui reconnaît automatiquement le type de données en fonction des valeurs stockées.&lt;/p&gt;

&lt;p&gt;Voici quelques types de variables de base Ruby et comment les créer&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# string&lt;/span&gt;
&lt;span class="n"&gt;nom_complet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;

&lt;span class="c1"&gt;# nombre / integer&lt;/span&gt;
&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;

&lt;span class="c1"&gt;# nombre / float&lt;/span&gt;
&lt;span class="n"&gt;prix_livre&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;15.80&lt;/span&gt;

&lt;span class="c1"&gt;# boolean&lt;/span&gt;
&lt;span class="n"&gt;actif?&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;admin?&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ruby a également des types de variables plus avancés comme tableau, hachage, structure et classe. Nous couvrirons tous ces détails plus tard.&lt;/p&gt;

&lt;h1&gt; Afficher sur la console &lt;/h1&gt;

&lt;p&gt;Dans Ruby, il est possible d'afficher des informations sur la console / le terminal.&lt;/p&gt;

&lt;p&gt;Par exemple, envoyons notre variable de nom à la console&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;nom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;nom&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La méthode put prendra toute valeur que nous lui donnerons et l'imprimera sur la console ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mike Taylor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Autres exemples&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;nom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Bonjour le monde'&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Bonjour'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nom&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Bonjour le monde
Bonjour
Mike Taylor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Comme vous pouvez le voir, nous pouvons envoyer plusieurs valeurs à la méthode put et il les affichera toutes.&lt;/p&gt;

&lt;p&gt;Une autre méthode Ruby très similaire aux put est la méthode print. Print peut afficher quelque chose sur la console mais n'enverra pas le saut de ligne après chaque impression. Exemple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;nom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike Taylor'&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Hello '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nom&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello Mike Taylor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt; Saisie d'information &lt;/h1&gt;

&lt;p&gt;Que diriez-vous d'obtenir des informations de l'utilisateur. Dans Ruby, nous utilisons la méthode pour faire exactement cela&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Saisir votre nom: '&lt;/span&gt;
&lt;span class="n"&gt;nom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La méthode gets renverra tout ce que vous tapez plus des caractères de saut de ligne. Si vous ne voulez pas lire les caractères de saut de ligne, utilisez la méthode chomp pour supprimer ce dernier caractère&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Saisir votre nom: '&lt;/span&gt;
&lt;span class="n"&gt;nom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt; Exercice &lt;/h1&gt;

&lt;p&gt;Créez un petit programme qui demande le nom d'utilisateur et l'âge de l'utilisateur et enregistrez le résultat dans la variable nom et âge.&lt;/p&gt;

&lt;p&gt;Ensuite, affichez le nom et la variable d'âge dans la console&lt;/p&gt;

&lt;p&gt;Solution&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Saisir votre nom: '&lt;/span&gt;
&lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'Saisir votre age: '&lt;/span&gt;
&lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;gets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"L'utilsateur se nomme: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Son age est de: '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt; Conclusion &lt;/h3&gt;

&lt;p&gt;C'est tout pour aujourd'hui. Le voyage vient de commencer, restez à l'écoute pour le prochain article très bientôt. (plus tard aujourd'hui ou demain)&lt;/p&gt;

&lt;p&gt;Si vous avez des commentaires ou des questions, veuillez les faire ci dessous.&lt;/p&gt;

</description>
      <category>french</category>
      <category>ruby</category>
      <category>rails</category>
      <category>beginners</category>
    </item>
    <item>
      <title>GitHub repositories that developers should know</title>
      <author>rafaelvieirab</author>
      <pubDate>Thu, 06 May 2021 13:50:47 +0000</pubDate>
      <link>https://dev.to/rafaelvieirab/github-repositories-that-developers-should-know-2hek</link>
      <guid>https://dev.to/rafaelvieirab/github-repositories-that-developers-should-know-2hek</guid>
      <description>&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Offered in a variety of &lt;em&gt;different languages&lt;/em&gt; Free Programming Books, it contains sections of free online courses, interactive programming resources, problem sets and competitive programming, programming playgrounds and podcasts and cheat sheets for many programming language.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/kamranahmedse/developer-roadmap"&gt;Developer Roadmap&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It has many the technologies you need to know if you want to become a &lt;em&gt;Frontend&lt;/em&gt; or &lt;em&gt;Backend&lt;/em&gt; or &lt;em&gt;DevOps Engineer&lt;/em&gt;. It has many the alternative technologies from which can choose whatever suits your need or comfort.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/ossu/computer-science"&gt;OSSU Computer Science&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you don't have a computer science background or degree and want the equivalent knowledge same as a Computer Science degree then this repository is for you. It's for those who want a proper, well-rounded grounding in concepts fundamental to all computing disciplines.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/sindresorhus/awesome"&gt;Awesome&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As the name describes it has an Awesome lists of all kinds of interesting topics ranging from computer science to media, from gaming to business and the list goes on.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/danistefanovic/build-your-own-x"&gt;Build your own X&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are a person who believes in the principle of "Learning by doing" then this repository has the potential of becoming your daily stop at GitHub. It has links to the resources which help you build your own Cryptocurrency, Database, Bots, BitTorrent Clients, and many more.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/jwasham/coding-interview-university"&gt;Coding Interview University&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Coding Interview University has a multi-month study plan to become a software engineer for a large tech company like Google, Amazon, Facebook, Apple, or any other software company. It offers advice on how to study to become a reliability engineer or operations engineer. It also has links to the flashcards for quickly brushing up your knowledge and stay updated originally created by the author of the repository who landed a job at Amazon. And there are much more success stories like that.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/public-apis/public-apis"&gt;Public Apis&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Public Apis has a collective list of all the free APIs available on the internet to use in your personal or professional projects. It offers a wide range of Application Programming interfaces (APIs) such as business, anime, animals, news, finance, games, and more.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/yangshun/tech-interview-handbook"&gt;Tech Interview Handbook&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Tech Interview Handbook has all the materials that you need to crack a Tech Interview. It has a variety of material regarding How to prepare for coding interviews, Good questions to ask your interviewer, Helpful tips on resume, and many more.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/donnemartin/system-design-primer"&gt;System Design Primer&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;System Design Primer is a great repository for software engineers that will help you learn how to design large-scale systems. That will then help you become a better engineer. The repo provides an organized collection of resources for this broad topic.&lt;br&gt;
Because system design often is a required component of the technical interview process at many companies, this repository can also help you to prepare for those interviews with a study guide, advice on how to approach an interview, interview questions with solutions, Anki flashcard sets for interactive learning, and interactive coding challenges.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/bradtraversy/design-resources-for-developers"&gt;Design Resources for Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This repository has a curated list of design and UI resources from stock photos, web templates, CSS frameworks, UI libraries, tools and much more, available for free to use in your projects and applications. It offers all the template stuff you need to get started with your web development projects.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/pawelborkar/awesome-repos"&gt;Awesome Repos&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It has a number of resourceful repositories packed in just one place. All you have to do is just visit this repository that's it.&lt;/p&gt;

&lt;p&gt;Referências:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/pb/10-github-repositories-every-developer-should-know-ngm"&gt;10 GitHub Repositories every Developer should know&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>github</category>
      <category>beginners</category>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to fix zsh icons in Visual Studio Code terminal?</title>
      <author>Krzysztof Szala</author>
      <pubDate>Thu, 06 May 2021 13:42:48 +0000</pubDate>
      <link>https://dev.to/avantar/how-to-fix-zsh-icons-in-visual-studio-code-terminal-38bb</link>
      <guid>https://dev.to/avantar/how-to-fix-zsh-icons-in-visual-studio-code-terminal-38bb</guid>
      <description>&lt;p&gt;Zsh is a popular UNIX shell used by many Linux and macOS users around the globe. It's even more powerful when you use it with a configuration framework like &lt;a href="https://github.com/ohmyzsh/ohmyzsh"&gt;&lt;strong&gt;&lt;em&gt;Oh my zsh&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; and a fantastic template like &lt;a href="https://github.com/romkatv/powerlevel10k"&gt;&lt;strong&gt;&lt;em&gt;Powerline10k&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;. So, we set up our new shiny shell, everything works great in our terminal. Time to write some code. We run &lt;a href="https://code.visualstudio.com"&gt;Visual Studio Code&lt;/a&gt;, open a built-in terminal and... something is not right. What happened to our beautiful template? Where are our sexy icons?&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V9c39IBF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ip3c0g8x3eseff8yc7r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V9c39IBF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ip3c0g8x3eseff8yc7r.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The solutions for that is simple, try to follow the steps below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download the latest version of Hack Nerd Font, for example from &lt;a href="https://github.com/source-foundry/Hack/releases/"&gt;here&lt;/a&gt;. Choose the file with &lt;code&gt;ttf&lt;/code&gt; suffix.&lt;/li&gt;
&lt;li&gt;Extract it from the archive.&lt;/li&gt;
&lt;li&gt;Move all &lt;code&gt;ttf&lt;/code&gt; files to &lt;code&gt;/usr/share/fonts&lt;/code&gt; directory (or &lt;code&gt;~/.local/share/fonts/&lt;/code&gt; if you don't want to use them globally).&lt;/li&gt;
&lt;li&gt;Open Visual Studio Code settings and find &lt;code&gt;Terminal font&lt;/code&gt; section.&lt;/li&gt;
&lt;li&gt;Change &lt;code&gt;Terminal › Integrated: Font Family&lt;/code&gt; attribute from &lt;code&gt;Monospace&lt;/code&gt; to &lt;code&gt;Hack Nerd Font&lt;/code&gt;. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KWRiCb7R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sscxjv1uf0xy5xxcsgrk.png" alt="image"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ztVpqCTh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jtb2vw78qh78o0a6y80m.png" alt="image"&gt;
&lt;/li&gt;
&lt;li&gt;You can also change it directly in &lt;code&gt;settings.json&lt;/code&gt; file (look for it in &lt;code&gt;.config/Code/User&lt;/code&gt; directory). The property you are looking for is &lt;code&gt;terminal.integrated.fontFamily&lt;/code&gt;.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dl0_wwFW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tigsu9gidpzqw2f4mx30.png" alt="image"&gt; &lt;/li&gt;
&lt;li&gt;Restart Visual Studio Code.&lt;/li&gt;
&lt;li&gt;Enjoy your new terminal font, which should now look correctly!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K-ljkWNi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r18v3finxt5gbjl1m29m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K-ljkWNi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r18v3finxt5gbjl1m29m.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ps. It will work the same way for macOS users, but the font installation process is a little different.&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>zsh</category>
      <category>beginners</category>
      <category>linux</category>
    </item>
    <item>
      <title>Wait!!! What is Containers? 🤷🏼‍♂️</title>
      <author>Ashik</author>
      <pubDate>Thu, 06 May 2021 13:34:58 +0000</pubDate>
      <link>https://dev.to/ashikroyce/wait-what-is-containers-2m10</link>
      <guid>https://dev.to/ashikroyce/wait-what-is-containers-2m10</guid>
      <description>&lt;p&gt;Containers have become one of the most popular concepts used in IT and software industry in the last five years. Since the introduction of Docker, containers have evolved to a larger ecosystem that include many tools and technologies, including Docker and Kubernetes. Before we go into too much detail, let's look at why containers have become so popular and how they're used. &lt;/p&gt;

&lt;p&gt;First off, containers aren't a new topic. They've existed for a number of years and have taken many forms before the creation of Docker. As you can see here, in general a container is defined as a collection of software processes unified by one namespace with access to an operating system kernel that it shares with other containers and little or no access between them.&lt;/p&gt;

&lt;p&gt;Docker modifies this definition by saying that a container is a runtime instance of Docker images that contain three things, a Docker image, an execution environment, and a standard set of instructions&lt;/p&gt;

&lt;p&gt;For those coming from an object oriented world, you can use the analogy of classes and objects, where a container is an object and the class is a Docker image. While Docker has many products and solutions, the core pieces of the ecosystem are the Docker Engine and the Docker Store, sometimes referred to as the Docker Hub. &lt;/p&gt;

&lt;p&gt;The Docker Engine is comprised of runtime and packaging tools and is required to be installed on the hosts that run Docker. The Docker Store is an online cloud service where users can store and share their Docker images. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#container-vs-virtual-machine"&gt;
  &lt;/a&gt;
  container vs virtual machine?
&lt;/h1&gt;

&lt;p&gt;One question that comes up a lot is what is the difference between a container and a virtual machine? Containers might look like a VM, but these are two distinct technologies. In a VM, each virtual machine includes many applications, all the necessary binaries and libraries that would exist on the OS, and the entire guest operating system to interact with them. On the other hand, a container will include the application and all of its dependencies, but will share the kernel with the other containers. It is not tied to any specific infrastructure other than having the Docker Engine installed on its host. It'll run an isolated process in the user space on the host operating system. This allows containers to run on almost any computer, infrastructure, or cloud. From a high level, containers provide benefits to both developers and DevOps folk alike. Developers like them because it's easy to create applications that are portable and packaged in a standard way. They also make the process of deployment very easy and repeatable. Testing, packaging, and integrations can be automated in an easier way than before. Containers support newer micro services architectures, which fit better from a developer mindset. And finally, containers help alleviate platform compatibility issues. From a DevOps standpoint, using containers simplifies release management. Deployments become much more reliable, which improves the speed and frequency of releases. &lt;/p&gt;

&lt;p&gt;The application lifecycle is consistent. They can be configured once and run multiple times, making the process more repeatable and efficient. Environments can be made more consistent. No more process differences between the dev, staging, and production environments. Scaling applications also becomes a lot simpler. Containers take a few seconds to deploy to a host, which makes the process of adding extra workers easier and the workload can grow and shrink more quickly for on-demand use cases. &lt;/p&gt;

&lt;p&gt;One of the biggest value adds of using container technologies in an enterprise is that developers and DevOps team now have a common language to collaborate. Both sets of teams can describe their needs and architectures in terms of containers using the same vocabulary for dev and deployment. Issues that come up in production by a DevOps team can be easily communicated back to a development team. The dev team can isolate and debug specific issues to a container level, eliminating problems relating to differences in hosts or runtime issues with applications. With all the benefits that containers bring to the table, it's no wonder that there's such a dramatic increase in their use. &lt;/p&gt;

&lt;p&gt;A Forrester survey conducted in 2010 indicated that organisations expect the number of containerised apps will rise by 98% in 2022. The white paper is a great read and talks about some of the most prominent use cases of containers in different sized orgs. Organisations use containers to build applications to incorporate a micro services based architecture. Newer applications are built with a micro services mindset using containers underneath to realise this, and legacy applications are shipped as containers to fit the micro services mold as well. Finally, containers assist with code agility and help you build a continuous integration or continuous deployment pipeline. This use case really pushes an IT team to develop, test, and deploy applications faster in a more automated fashion. Hopefully by now it's clear why enterprises have started to adopt containers in such a big way. Now that we understand what containers are all about!!!&lt;/p&gt;

</description>
      <category>docker</category>
      <category>kubernetes</category>
    </item>
    <item>
      <title>Why Your Emails May Be Bouncing Back &amp; What You Can Do About It</title>
      <author>Alfonso Millan</author>
      <pubDate>Thu, 06 May 2021 13:05:06 +0000</pubDate>
      <link>https://dev.to/giantmachines/why-your-emails-may-be-bouncing-back-what-you-can-do-about-it-4ddg</link>
      <guid>https://dev.to/giantmachines/why-your-emails-may-be-bouncing-back-what-you-can-do-about-it-4ddg</guid>
      <description>&lt;p&gt;Recently at Giant Machines, I was investigating a handful of emails from one of our client projects that were not being properly delivered to specific Internet Service Providers (ISPs). After doing some research on their email settings and configurations, I discovered that an ISP's spam scanner configuration may have been mistakenly blocking harmless emails for its customers. As a result, I had to troubleshoot and debug these emails locally to identify why they were not being delivered. For the local debugging that I did, I used an npm package called &lt;a href="https://www.npmjs.com/package/spamscanner"&gt;spamscanner&lt;/a&gt;, which I will be covering in more depth down below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dataprot.net/statistics/spam-statistics/"&gt;55% to 85%&lt;/a&gt; of all email traffic is due to spam emails! Due to this, email clients are constantly attempting to block potentially harmful spam emails from reaching their users. However, at times, perfectly valid (and non-spam) emails can be flagged incorrectly.&lt;/p&gt;

&lt;p&gt;For this post, I will cover how ISPs use spam scanners to try to detect malicious emails. I will also show you how to set up a spam scanner locally that you can use to debug and troubleshoot your own emails. This troubleshooting can be helpful in determining why your emails may not be reaching their intended recipients! This post assumes a basic familiarity with JavaScript, using a terminal, and using a code editor.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#email-basics"&gt;
  &lt;/a&gt;
  Email Basics
&lt;/h2&gt;

&lt;p&gt;The process for sending and receiving email has changed quite a bit since its inception, but its basic principles have remained in place. For the purposes of this post, all that you need to know is that web mail clients (such as Gmail, Outlook, etc.) communicate back and forth with dedicated email servers. For a closer look at how email works under the hood, refer to the following article: "&lt;a href="https://www.freecodecamp.org/news/how-does-email-work/"&gt;How Does Email Work.&lt;/a&gt;"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#email-authentication"&gt;
  &lt;/a&gt;
  Email Authentication
&lt;/h2&gt;

&lt;p&gt;Due to the abundance of email spam, several protocols have been implemented over the years to try to mitigate spam messages by performing various programmatic checks.&lt;/p&gt;

&lt;p&gt;The three main protocols are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;SPF (Sender Policy Framework)&lt;/strong&gt;: Is the sender who they claim to be?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DKIM (DomainKeys Identified Mail)&lt;/strong&gt;: Encrypts email headers with a private key; servers then use a publicly available key to decrypt the headers and verify the message.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DMARC (Domain Message Authentication Reporting and Conformance)&lt;/strong&gt;: Built on top of SPF and DKIM; senders can set policies deciding how to handle SPF/DKIM and what to do for failing checks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For additional information on these email authentication protocols, refer to the following article: "&lt;a href="https://sendgrid.com/blog/email-authentication-explained/"&gt;How Email Authentication Works&lt;/a&gt;."&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#email-spam-scanners"&gt;
  &lt;/a&gt;
  Email Spam Scanners
&lt;/h2&gt;

&lt;p&gt;To detect whether incoming emails are malicious, mail servers also use spam scanners, such as Apache's popular &lt;a href="https://spamassassin.apache.org/"&gt;SpamAssasin&lt;/a&gt;. The internal workings of these spam scanners can be somewhat complicated (involving &lt;a href="https://en.wikipedia.org/wiki/Naive_Bayes_classifier"&gt;Naive Bayes Classifiers&lt;/a&gt; on &lt;a href="https://cwiki.apache.org/confluence/display/SPAMASSASSIN/HowScoresAreAssigned"&gt;trained, large datasets&lt;/a&gt;, for the curious), but the primary takeaway is that these classification systems typically assign a numerical point value to an incoming email to determine the validity of the message. The higher the score, the more likely that the email is spam. For reference, the ISP Optimum &lt;a href="http://help.webhosting.optonline.net/documents/rd/gb/gettingstarted/old/Managing_Domain_Names/Update_DNS_and_MX_Records/faq_email.htm#question20"&gt;states&lt;/a&gt; the following regarding their spam filtering:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All incoming emails are evaluated against these spam rules and are assigned a "spam score". This score determines whether the message will be classified as spam. For standard filtering, the threshold is set at 5, meaning &lt;strong&gt;any message with a score of 5 or higher is classified as spam&lt;/strong&gt;. &lt;strong&gt;Messages scoring between 5 and 10 will be delivered, but will include a spam notification in the subject of the email so that you can immediately identify and delete these messages&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Different ISPs have different policy configurations on their chosen spam scanner, but the same idea applies.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cwp1LHH5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/wugu3Dm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cwp1LHH5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/wugu3Dm.png" alt="Litmus Email Screenshot"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Services like &lt;a href="https://www.litmus.com/"&gt;Litmus&lt;/a&gt; provide the ability to see how various spam scanners rank your emails.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the screenshot above, the email template that I was investigating received very low scores across the various spam scanners. So what gives? Why were these emails bouncing back, despite having a low score? We will be taking a closer look at this specific issue down below.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#first-steps"&gt;
  &lt;/a&gt;
  First Steps
&lt;/h3&gt;

&lt;p&gt;Before using a spam scanner to investigate and troubleshoot your email templates, there are some quick wins for lowering your score that can be achieved by following some of the recommendations listed in &lt;a href="https://github.com/CopernicaMarketingSoftware/Documentation/blob/master/Publisher/en/some-tips-to-lower-your-email-spam-score.md"&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#so-about-that-local-spam-scanner-setup"&gt;
  &lt;/a&gt;
  So… about that local spam scanner setup?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#initial-setup"&gt;
  &lt;/a&gt;
  Initial Setup
&lt;/h3&gt;

&lt;p&gt;For installation instructions on the npm package &lt;a href="https://www.npmjs.com/package/spamscanner"&gt;spamscanner&lt;/a&gt;, refer to their &lt;a href="https://www.npmjs.com/package/spamscanner"&gt;docs&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#simple-server-and-local-email-template"&gt;
  &lt;/a&gt;
  Simple Server and Local Email Template
&lt;/h3&gt;

&lt;p&gt;Email clients allow you to download your email messages (with the file extension ".eml"). With these locally saved messages, we can run spamscanner against them to further inspect their contents.&lt;/p&gt;

&lt;p&gt;Assuming that you have installed spamscanner and have Node.js locally setup, you may use the following bare-bones script for running the scanner against a locally saved email message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// in a file called index.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Make sure to install spamscanner in your package.json&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SpamScanner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;spamscanner&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scanEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// For a list of all options &amp;amp; their defaults, see:&lt;/span&gt;
  &lt;span class="c1"&gt;// https://www.npmjs.com/package/spamscanner#api&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scanner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SpamScanner&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// Swap out the "Your_locally_saved_message_here.eml" file with the actual filename in the directory&lt;/span&gt;
  &lt;span class="c1"&gt;// containing this script&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFileSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Your_locally_saved_message_here.eml&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scanResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;scanner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// For a list of properties available for inspection, see:&lt;/span&gt;
    &lt;span class="c1"&gt;// https://www.npmjs.com/package/spamscanner#scannerscansource&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Scan results, scanResult.mail:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;scanResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error in scanEmail:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;scanEmail&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// To run this script, run `node index.js` in your terminal where this script resides.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that you can also run the scanner on Strings or Buffers as long as they are a complete SMTP message (i.e., they include headers and the full email contents).&lt;/p&gt;

&lt;p&gt;The results of running this script will come back in the following shape:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ScanResult&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;is_spam&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;classification&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;phishing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;executables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;arbitrary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nl"&gt;links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For a detailed description of these fields, refer to the &lt;a href="https://github.com/spamscanner/spamscanner#scannerscansource"&gt;docs&lt;/a&gt;. Typically, the result in the &lt;code&gt;is_spam&lt;/code&gt; field &lt;em&gt;should&lt;/em&gt; be enough to give you confidence that your email will not be marked as spam. Note that spamscanner does not assign a numerical value but instead opts to return a boolean.&lt;/p&gt;

&lt;p&gt;However, different ISPs use different spam scanners, and it may be necessary to investigate your email messages further. To do so, make sure that the "debug" flag is set to &lt;code&gt;true&lt;/code&gt;, as per the code sample above. You can then inspect the contents of &lt;code&gt;scanResult.mail&lt;/code&gt;, which is an object containing more detailed debugging information regarding the email contents (shown below).&lt;/p&gt;

&lt;p&gt;This ".mail" object returns the following shape:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ParsedMail&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;attachments&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Attachment&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nl"&gt;bcc&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;AddressObject&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;AddressObject&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nl"&gt;cc&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;AddressObject&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;AddressObject&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nl"&gt;date&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;from&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;AddressObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;headerLines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HeaderLines&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Headers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;inReplyTo&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;messageId&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;priority&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;normal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;low&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;high&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;references&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;replyTo&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;AddressObject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;textAsHtml&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;to&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;AddressObject&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;AddressObject&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It can be used to get more specific information about the email.&lt;/p&gt;

&lt;p&gt;A sample screenshot of the "headers" field that is a part of the ".mail" object is shown below.&lt;/p&gt;

&lt;p&gt;In the emails that I was investigating, the spam scanner classifier was marking the email messages as "not spam" but Optimum was appending the following &lt;code&gt;X-Optimum-spam: yes&lt;/code&gt; header to the messages as they were incoming:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvoDteuD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/WJxF61P.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvoDteuD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/WJxF61P.png" alt="Terminal Screenshot"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Some of the headers present in the email message file. Note the Optimum spam header.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This was causing these messages to not only be marked as spam but they were &lt;strong&gt;also being blocked/bounced entirely!&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#when-all-else-fails-try-manual-debugging"&gt;
  &lt;/a&gt;
  When all else fails, try manual debugging.
&lt;/h2&gt;

&lt;p&gt;If your messages are still being blocked despite a low spam scanner score (or &lt;code&gt;is_spam&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; if using spamscanner), you may have to take a more manual approach. To do so, I gradually removed parts of the email and re-sent the trimmed-down emails to the ISP that was blocking us. I was eventually able to trace the problem down to this line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"mailto:example@example.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Contact customer support&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Specifically the &lt;strong&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Creating_hyperlinks#e-mail_links"&gt;mailto:&lt;/a&gt;&lt;/strong&gt; present in the template caused Optimum's email configuration to flag the email as spam and reject the message outright, despite mailto tags not causing our messages to be flagged as spam by other ISPs.&lt;/p&gt;

&lt;p&gt;Additionally, other emails were bouncing back due to the following (modified) copy:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If this email change request wasn't authorized by you, please click the link below to cancel. If you have any questions, you can contact support via &lt;a href="mailto:example@example.com"&gt;example@example.com&lt;/a&gt; or by calling +1 555-555-5555.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Specifically, the &lt;code&gt;+1&lt;/code&gt; present in the template caused Optimum's spam scanner configuration to flag the email as spam and reject the message outright despite being valid and despite not being flagged by other ISPs or SpamAssasin.&lt;/p&gt;

&lt;p&gt;Due to Optimum's unique SpamAssassin configuration, we were seeing issues for our customers who had an Optimum domain email and attempted to receive emails with "mailto:" or "+1" present. It is not clear why Optimum chooses to block these emails when other ISPs do not, but it could be the case that their configuration is particularly sensitive and errs on the side of caution in attempting to mitigate potential security risks.&lt;/p&gt;

&lt;p&gt;The issues that may be affecting your emails may differ but the techniques used here can help you narrow down why your emails may be bouncing back!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Email servers accept, forward, and deliver messages.&lt;/li&gt;
&lt;li&gt;If an email has not been properly authenticated, the email server must return a failure "bounce" message.&lt;/li&gt;
&lt;li&gt;Spam scanners typically assign a point ranking to emails to classify them as spam or not spam. Hot dog/not hot dog anyone? 🌭&lt;/li&gt;
&lt;li&gt;You can use the npm package &lt;a href="https://github.com/spamscanner/spamscanner"&gt;spamscanner&lt;/a&gt; locally on your email templates to check whether they are being classified as spam.&lt;/li&gt;
&lt;li&gt;When all else fails, you may have to try a more manual debugging approach to debug ISP-specific edge cases.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#additional-resources"&gt;
  &lt;/a&gt;
  Additional Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://spamassassin.apache.org/"&gt;https://spamassassin.apache.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sendgrid.com/blog/10-tips-to-keep-email-out-of-the-spam-folder/"&gt;https://sendgrid.com/blog/10-tips-to-keep-email-out-of-the-spam-folder/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sendgrid.com/docs/glossary/spam/"&gt;https://sendgrid.com/docs/glossary/spam/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have any questions? Comment down below and happy coding!&lt;/p&gt;

</description>
      <category>emails</category>
      <category>spamscanner</category>
      <category>javascript</category>
      <category>debugging</category>
    </item>
    <item>
      <title>Tips &amp; tricks for building a game using Jetpack Compose for Desktop</title>
      <author>Sebastian Aigner</author>
      <pubDate>Thu, 06 May 2021 13:03:41 +0000</pubDate>
      <link>https://dev.to/kotlin/tips-tricks-for-building-a-game-using-jetpack-compose-for-desktop-266o</link>
      <guid>https://dev.to/kotlin/tips-tricks-for-building-a-game-using-jetpack-compose-for-desktop-266o</guid>
      <description>&lt;p&gt;In the &lt;strong&gt;first part of my blog post series&lt;/strong&gt; about building a small clone of the classic arcade game &lt;a href="https://en.wikipedia.org/wiki/Asteroids_(video_game)"&gt;&lt;strong&gt;Asteroids&lt;/strong&gt;&lt;/a&gt; on top of Jetpack Compose for Desktop, we saw how to implement the main game loop, as well as manage state and draw basic shapes. In this post, we will explore some more details of the game implementation. This includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Rendering details&lt;/strong&gt; – making sure game objects don't escape our play area, and using a device-independent coordinate system for rendering&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Geometry and linear algebra&lt;/strong&gt; – the &lt;em&gt;secret sauce&lt;/em&gt; that makes the space ships fly&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Frame-independent movement&lt;/strong&gt; – so that our game works consistently.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's learn about these topics!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rendering-clipping-and-coordinate-systems"&gt;
  &lt;/a&gt;
  Rendering: Clipping and Coordinate Systems
&lt;/h2&gt;

&lt;p&gt;In the context of rendering, there are two areas that still need our attention – we need to make sure that our &lt;strong&gt;game objects are constrained to the game surface&lt;/strong&gt;, and we need to make a conscious decision about the &lt;strong&gt;units of the coordinates&lt;/strong&gt; we use to describe the position of a game object. We'll discuss both in this section.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clipping"&gt;
  &lt;/a&gt;
  Clipping
&lt;/h3&gt;

&lt;p&gt;By default, Compose naively draws your objects without any clipping. This means game objects can poke outside the "play surface", which produces a weirdly fourth-wall-breaking effect:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1sFMicMw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xh0d39znpo8w97djsab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1sFMicMw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xh0d39znpo8w97djsab.png" alt="game objects escaping the bounds of reality"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We &lt;strong&gt;constrain the game objects to the bounds&lt;/strong&gt; of our play surface by applying &lt;code&gt;Modifier.clipToBounds()&lt;/code&gt; to the &lt;code&gt;Box&lt;/code&gt; which defines our play surface:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Modifier&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fillMaxWidth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fillMaxHeight&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;clipToBounds&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="c1"&gt;// . . .&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because all our game elements are drawn as children of this play area &lt;code&gt;Box&lt;/code&gt;, using this modifier causes the rendered entities inside it to be cut off at the edges (instead of being drawn over the surrounding user interface):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RNbA1hOi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0zvlctk9ajr379k1m4rv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RNbA1hOi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0zvlctk9ajr379k1m4rv.png" alt="game objects staying snugly inside the play area"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deviceindependent-pixels-and-density"&gt;
  &lt;/a&gt;
  Device-Independent Pixels and Density
&lt;/h3&gt;

&lt;p&gt;Something else to be aware of when doing any kind of rendering tasks in Compose for Desktop is to &lt;strong&gt;keep the units of measurement in the back of your mind&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Wherever I worked with coordinates, I decided to work in &lt;a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/unit/Dp"&gt;&lt;strong&gt;device-independent pixels&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;mouse pointer position&lt;/strong&gt; is stored as a &lt;code&gt;DpOffset&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Game width&lt;/strong&gt; and &lt;strong&gt;height&lt;/strong&gt; are stored as &lt;code&gt;Dp&lt;/code&gt;s&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Game objects&lt;/strong&gt; are placed on the play surface using their &lt;code&gt;.dp&lt;/code&gt; coordinates.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This helps the game work consistently across high-density displays and low-density displays alike. However, it also &lt;strong&gt;requires some operations to be performed in the context of &lt;code&gt;Density&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For example, the &lt;code&gt;pointerMoveFilter&lt;/code&gt; returns an &lt;code&gt;Offset&lt;/code&gt; in pixels – and &lt;strong&gt;they are not device-independent&lt;/strong&gt;!. To work around this, we obtain the local screen density in our composition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;density&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;LocalDensity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then use &lt;code&gt;with(density)&lt;/code&gt; to access the &lt;code&gt;toDp()&lt;/code&gt; extension functions to the &lt;code&gt;Offset&lt;/code&gt; into a &lt;code&gt;DpOffset&lt;/code&gt;, allowing us to store our &lt;code&gt;targetLocation&lt;/code&gt; in this device-independent pixel format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pointerMoveFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;onMove&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;density&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;targetLocation&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;DpOffset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toDp&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toDp&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For storing the play area's width and height, we do a very similar thing, just without wrapping it in a &lt;code&gt;DpOffset&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onSizeChanged&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;density&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toDp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toDp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-game-of-geometry-and-linear-algebra"&gt;
  &lt;/a&gt;
  A Game of Geometry and Linear Algebra &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Underneath the visualization, the "Asteroids" game builds on just a few basic blocks to implement its mechanics – it is really a game of vectors and linear algebra:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;position&lt;/strong&gt;, &lt;strong&gt;movement&lt;/strong&gt;, and &lt;strong&gt;acceleration&lt;/strong&gt; of the ship can be described by &lt;em&gt;position, movement, and acceleration vectors&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;orientation&lt;/strong&gt; of the ship is the &lt;em&gt;angle&lt;/em&gt; of the &lt;em&gt;vector&lt;/em&gt; between the ship and the cursor.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Circle-circle collisions&lt;/strong&gt; can be tested based on &lt;em&gt;distance vectors&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instead of reinventing the &lt;del&gt;wheel&lt;/del&gt; vector, I decided to use &lt;code&gt;openrndr-math&lt;/code&gt;, which includes an implementation of the &lt;code&gt;Vector2&lt;/code&gt; class including all common operations, like scalar multiplication, addition, subtraction, the dot product, and more. (Ever since listening to the &lt;a href="https://talkingkotlin.com/openrndr-with-edwin-jakobs/"&gt;Talking Kotlin&lt;/a&gt; episode, I've been meaning to explore &lt;a href="https://openrndr.org/"&gt;OPENRNDR&lt;/a&gt; in detail, but that will have to happen in a separate project.)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://api.openrndr.org/openrndr-math/openrndr-math/org.openrndr.math/-vector2/index.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3uoN7JuZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4t373i87ll0hb6e6zsvn.png" alt="OPENRNDR Vector2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As somebody who happens to be a bit rusty with their linear algebra skills, I extended the functionality of the class a bit. For example, I defined the following extension function to allow me to access the angle a &lt;code&gt;Vector2&lt;/code&gt; in degrees between 0-360:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nc"&gt;Vector2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Double&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;rawAngle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;atan2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rawAngle&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;PI&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thankfully, I did not have to spend too much time on figuring out the call to &lt;a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.math/atan2.html"&gt;&lt;code&gt;atan2&lt;/code&gt;&lt;/a&gt;, because I previously watched one of &lt;a href="http://twitter.com/intelligibabble"&gt;Leland Richardson&lt;/a&gt;'s &lt;a href="https://www.youtube.com/watch?v=fwn7olJOc70"&gt;live streams&lt;/a&gt; where he also uses this function to calculate some angles.&lt;/p&gt;

&lt;p&gt;Extensions like this one help me express ideas in ways I understand them myself – and hopefully still will a few months down the road.&lt;/p&gt;

&lt;p&gt;I also made use of properties with &lt;a href="https://kotlinlang.org/docs/properties.html#getters-and-setters"&gt;backing fields&lt;/a&gt; to make it possible to access a &lt;code&gt;GameObject&lt;/code&gt;'s movement vector in different representations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As a combination of &lt;strong&gt;length&lt;/strong&gt; (speed) and &lt;strong&gt;angle&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;As a vector with &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; coordinates&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the context of a &lt;code&gt;GameObject&lt;/code&gt;, that can look like the following, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;speed&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;mutableStateOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;angle&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;mutableStateOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;position&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;mutableStateOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;movementVector&lt;/span&gt;
    &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Vector2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;UNIT_X&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;speed&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;
        &lt;span class="n"&gt;angle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we're using this functionality outside of the &lt;code&gt;GameObject&lt;/code&gt; class a lot, we could also consider defining additional &lt;code&gt;length&lt;/code&gt; / &lt;code&gt;angle&lt;/code&gt; getters and setters as extension properties on the &lt;code&gt;Vector2&lt;/code&gt; class, directly.&lt;/p&gt;

&lt;p&gt;For our simulation, we still need to do a bit more – we haven't yet addressed the problem of how to update location and speed based on the elapsed real time. Let's talk about the approach for that next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frameindependent-movement-with-delta-timing"&gt;
  &lt;/a&gt;
  Frame-Independent Movement With Delta Timing &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;When building game logic, we need to keep one essential point in mind: &lt;strong&gt;Not all frames are created equal!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On a 60 Hz display, each frame is visible for 16ms.&lt;/li&gt;
&lt;li&gt;On a 120 Hz display, that number drops to 8.3ms.&lt;/li&gt;
&lt;li&gt;On a 240 Hz display, each frame only shows for 4.2ms.&lt;/li&gt;
&lt;li&gt;On a system under load, or while running in a non-focused window, the application frame rate may be lower than 60 Hz.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That means that &lt;strong&gt;we can't use "frames" as a measurement of time&lt;/strong&gt;: If we define the speed of our spaceship in relation to the frame rate, it would move four times faster on a 240 Hz display than on a 60 Hz display.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x5gQopD2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vo8s3j8b4v0zx8b3eozn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x5gQopD2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vo8s3j8b4v0zx8b3eozn.png" alt="frame-based"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We need to &lt;strong&gt;decouple the game logic&lt;/strong&gt; (and its rudimentary "physics simulation") &lt;strong&gt;from the frame rate&lt;/strong&gt; at which our application runs. Even &lt;a href="https://youtu.be/qpC43CdvjyA?t=25"&gt;AAA games&lt;/a&gt; don't get this right all the time – but for our projects, we can do better!&lt;/p&gt;

&lt;p&gt;A straightforward approach for this decoupling is to use &lt;a href="https://en.wikipedia.org/wiki/Delta_timing"&gt;&lt;strong&gt;delta timing&lt;/strong&gt;&lt;/a&gt;: We calculate the new game state based on the &lt;em&gt;time difference&lt;/em&gt; (the &lt;em&gt;delta&lt;/em&gt;) since the last time we updated the game. &lt;br&gt;
This usually means we &lt;em&gt;multiply&lt;/em&gt; the result of our calculations with the time delta, &lt;em&gt;scaling&lt;/em&gt; the result based on the elapsed time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s----Zpg5yW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3dnr7776bas1ly70yjvr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s----Zpg5yW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3dnr7776bas1ly70yjvr.png" alt="time-based"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Compose for Desktop, we use &lt;code&gt;withFrameMillis&lt;/code&gt; and &lt;code&gt;withFrameNanos&lt;/code&gt;. Both of them provide a timestamp, so we just need to keep track of the previous timestamp to calculate the &lt;code&gt;delta&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;prevTime&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0L&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;delta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;prevTime&lt;/span&gt;
    &lt;span class="c1"&gt;// . . .&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In my case, a &lt;code&gt;GameObject&lt;/code&gt; has an &lt;code&gt;update&lt;/code&gt; function that takes a &lt;code&gt;realDelta: Float&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;velocity&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;movementVector&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;realDelta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toDouble&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;velocity&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As demonstrated in the code above, I use it to scale the velocity of game objects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;This concludes our tour of building a small game with Compose for Desktop! To see how all the pieces fit together, read the source code (~300 lines of code) on &lt;a href="https://github.com/SebastianAigner/asteroids-compose-for-desktop"&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Building Asteroids on Compose for Desktop was great fun! I am always surprised by the iteration speed that &lt;a href="https://www.jetbrains.com/lp/compose/"&gt;Compose for Desktop&lt;/a&gt; provides: &lt;strong&gt;Getting from a first rectangle to a full game in just one long evening.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Of course, implementing a retro game like Asteroids on modern hardware comes with the luxury of not having to think too hard about performance optimizations, allocations, entity-component systems, or more. When building something more ambitious, these points likely need addressing, and you might find yourself using a few additional libraries besides a &lt;code&gt;Vector2&lt;/code&gt; implementation.&lt;/p&gt;

&lt;p&gt;For the next &lt;a href="https://en.wikipedia.org/wiki/Super_Hexagon"&gt;Super Hexagon&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Roguelike"&gt;pixel roguelike&lt;/a&gt;, or other 2D game, however, you can definitely &lt;strong&gt;give Compose a shot&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once again, you can find all 300 lines of source code for this project on &lt;a href="https://github.com/SebastianAigner/asteroids-compose-for-desktop"&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you're looking for additional inspiration, take a look at some other &lt;strong&gt;folks building games with Compose&lt;/strong&gt;!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vivek Sharma built &lt;a href="https://twitter.com/V9vek/status/1350156513625534464"&gt;everybody's favorite dinosaur game&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;vitaviva built &lt;a href="https://twitter.com/vitaviva2/status/1379876842560122886"&gt;Tetris with Compose&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;John O'Reilly made a &lt;a href="https://github.com/joreilly/chip-8"&gt;Compose for Desktop CHIP-8 frontend&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;theapache64 pushes the limits of Compose's builtin components to implement &lt;a href="https://twitter.com/theapache64/status/1379735815023030279"&gt;Switch, Check, and Radio Snake&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>gamedev</category>
      <category>kotlin</category>
      <category>jetpackcompose</category>
      <category>android</category>
    </item>
    <item>
      <title>How I built an "Asteroids" game using Jetpack Compose for Desktop</title>
      <author>Sebastian Aigner</author>
      <pubDate>Thu, 06 May 2021 13:03:23 +0000</pubDate>
      <link>https://dev.to/kotlin/how-i-built-an-asteroids-game-using-jetpack-compose-for-desktop-309l</link>
      <guid>https://dev.to/kotlin/how-i-built-an-asteroids-game-using-jetpack-compose-for-desktop-309l</guid>
      <description>&lt;p&gt;A while ago, I tweeted about a small game I had created on top of &lt;a href="https://www.jetbrains.com/lp/compose/"&gt;&lt;strong&gt;Jetpack Compose for Desktop&lt;/strong&gt;&lt;/a&gt;: A small clone of the &lt;strong&gt;classic arcade game&lt;/strong&gt; &lt;a href="https://en.wikipedia.org/wiki/Asteroids_(video_game)"&gt;&lt;strong&gt;Asteroids&lt;/strong&gt;&lt;/a&gt;, in which you control a space ship with your mouse, and navigate the vastness of space, avoiding and breaking asteroids in the process.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pmcgjhx1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1382463408847663109/pu/img/FeB2Xn4-5W1Bybz6.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--lyS8uUHf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1273311198780538886/3HMuL_7g_normal.jpg" alt="Sebastian Aigner 🏡 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Sebastian Aigner 🏡
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @sebi_io
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      ☄️ I built Asteroids using &lt;a href="https://twitter.com/hashtag/JetpackCompose"&gt;#JetpackCompose&lt;/a&gt; for Desktop! &lt;br&gt;&lt;br&gt;With mouse controls, inertia based flying, and asteroids breaking apart in the depth of space – on top of CFD!&lt;br&gt;&lt;br&gt;Find the game source on GitHub: &lt;a href="https://t.co/HoPzHxtU25"&gt;github.com/SebastianAigne…&lt;/a&gt;&lt;br&gt;&lt;br&gt;Lots of fun &amp;amp; learning. Need to do a blog on it! 😄 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:15 PM - 15 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1382668779377762305" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1382668779377762305" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1382668779377762305" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Today, it's time to take a look under the hood and understand how I built a basic version of this game, and how &lt;strong&gt;Compose for Desktop helped me achieve it in just one evening&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;We will take a look at parts and structures in the code that I find the most interesting. To see how it all fits together, I suggest exploring the &lt;a href="https://github.com/SebastianAigner/asteroids-compose-for-desktop"&gt;&lt;strong&gt;whole code on GitHub&lt;/strong&gt;&lt;/a&gt;. The whole implementation is &lt;strong&gt;only 300 lines of code&lt;/strong&gt;, which I hope makes studying and understanding it easy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-game"&gt;
  &lt;/a&gt;
  The Game
&lt;/h3&gt;

&lt;p&gt;If you're not caught up on your 80s arcade trivia, &lt;a href="https://en.wikipedia.org/wiki/Asteroids_(video_game)"&gt;Asteroids&lt;/a&gt; was a  popular arcade game where you try to steer your space ship through space, avoiding and destroying asteroids with your ship.&lt;/p&gt;

&lt;p&gt;Because of the limitations of the hardware at the time, the game is quite simplistic in appearance: a triangular spaceship moves across a plain background and avoids simple displays of asteroids on a 2D surface.&lt;/p&gt;

&lt;p&gt;What makes this a challenge is the &lt;em&gt;interia&lt;/em&gt;: Just like a real space ship, your spaceship moves along its course in a straight line at constant speed, and you need to make corrective maneuvers by turning your ship and directing your thrust.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Asteroids has achieved cult status in the arcade game scene.&lt;/strong&gt; Because of that, I wanted to see what it would take to recreate this experience using Jetpack Compose for Desktop!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-building-blocks"&gt;
  &lt;/a&gt;
  The Building Blocks
&lt;/h3&gt;

&lt;p&gt;I have roughly divided the project into a few building blocks that make up the project, and that we will talk about. Namely, those are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-game-loop"&gt;&lt;strong&gt;The Game Loop&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#state"&gt;&lt;strong&gt;Game State Management&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rendering"&gt;&lt;strong&gt;Rendering to the Screen&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the &lt;strong&gt;&lt;a href="https://dev.to/kotlin/tips-tricks-for-building-a-game-using-jetpack-compose-for-desktop-266o"&gt;second part&lt;/a&gt;&lt;/strong&gt; of this series on building a game with Compose for Desktop, we will also look at additional &lt;strong&gt;rendering details&lt;/strong&gt;, the &lt;strong&gt;geometry and linear algebra&lt;/strong&gt; behind the game, and &lt;strong&gt;frame-independent movement&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let's dive right in!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-game-loop"&gt;
  &lt;/a&gt;
  The Game Loop &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;At the center of most games stands the &lt;strong&gt;game loop&lt;/strong&gt;. It acts as the &lt;strong&gt;entry point&lt;/strong&gt; that calls the game logic code. This is a fundamental difference between implementing typical declarative user interfaces and building games:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Declarative UI&lt;/strong&gt; is usually mostly static, and reacts to user actions (clicking, dragging) or other events (new data, computation progress...)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Games&lt;/strong&gt; run their logic many times per second, simulating the game world and its entities one frame at a time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That is not to say that these two approaches are incompatible! All we need to run a main "game loop" is to get our &lt;strong&gt;function to execute&lt;/strong&gt; once per frame. In Jetpack Compose, we have the &lt;code&gt;withFrame&lt;/code&gt; family of functions (&lt;code&gt;withFrameMillis&lt;/code&gt;, &lt;code&gt;withFrameNanos&lt;/code&gt;), which can help us achieve exactly that.&lt;/p&gt;

&lt;p&gt;Let's assume we already have a &lt;code&gt;game&lt;/code&gt; object – we will talk about state management shortly. We can then create a &lt;code&gt;LaunchedEffect&lt;/code&gt; which asks Jetpack Compose for Desktop to &lt;strong&gt;call our &lt;code&gt;update&lt;/code&gt; function whenever a new frame is rendered&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nc"&gt;LaunchedEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Unit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;withFrameNanos&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;withFrameNanos&lt;/code&gt; is a suspending method. Its exact implementation is described in the &lt;a href="https://developer.android.com/reference/kotlin/androidx/compose/runtime/package-summary#withframemillis"&gt;documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;withFrameNanos&lt;/code&gt; suspends until a new frame is requested, immediately invokes &lt;code&gt;onFrame&lt;/code&gt; with the frame time in nanoseconds in the calling context of frame dispatch, then resumes with the result from &lt;code&gt;onFrame&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The frame time, which it provides us with, will also come in handy, as we will see in the &lt;a href="https://dev.to/kotlin/tips-tricks-for-building-a-game-using-jetpack-compose-for-desktop-266o"&gt;second part&lt;/a&gt; of this blog post series, when we talk about &lt;em&gt;frame-independent movement&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#game-state-management"&gt;
  &lt;/a&gt;
  Game State Management &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Jetpack Compose is excellent at managing state&lt;/strong&gt;, and when building a game like Asteroids, we can use the same mechanisms to keep track of the data attached to game objects or the current play session, to name just two examples.&lt;/p&gt;

&lt;p&gt;As suggested in the previous section, my Asteroids game has a &lt;code&gt;Game&lt;/code&gt; class, an instance of which is wrapped in a &lt;code&gt;remember&lt;/code&gt; call in the main composition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;game&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;remember&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Game&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It acts as a container for all game-related data. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Game object information (in a &lt;code&gt;mutableStateListOf&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;The current game phase (&lt;code&gt;RUNNING&lt;/code&gt; / &lt;code&gt;STOPPED&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;The size of the playing field (based on window dimensions)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Inside the &lt;code&gt;Game&lt;/code&gt; object, we treat the state data as mutable, and make any state changes as we see fit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#game-objects"&gt;
  &lt;/a&gt;
  Game Objects
&lt;/h3&gt;

&lt;p&gt;Individual game objects once again group the state belonging to an individual game entity: a spaceship, an asteroid, or a bullet, and provide methods to modify their state, spawn new game objects, or check their relation to other game objects.&lt;/p&gt;

&lt;p&gt;In my implementation of Asteroids, all game objects share a lot of behavior, from the way they move through the environment to how they check their collision – we'll talk about the geometry and linear algebra that goes into that a bit later.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;GameObject&lt;/code&gt; class provides implementations for these shared behaviors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GameObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Double&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Double&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Vector2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Vector2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ZERO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;speed&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;mutableStateOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;angle&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;mutableStateOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;position&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;mutableStateOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;movementVector&lt;/span&gt; &lt;span class="cm"&gt;/* ... */&lt;/span&gt;
    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Double&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;realDelta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Float&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Game&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;velocity&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;movementVector&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;realDelta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toDouble&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;velocity&lt;/span&gt;
        &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Vector2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toDouble&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toDouble&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;overlapsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;GameObject&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;distanceTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example, the &lt;code&gt;ShipData&lt;/code&gt; class inherits &lt;code&gt;speed&lt;/code&gt;, &lt;code&gt;angle&lt;/code&gt;, &lt;code&gt;position&lt;/code&gt; and its &lt;code&gt;update&lt;/code&gt; method from &lt;code&gt;GameObject&lt;/code&gt;, but defines its own size, angle, and a function to fire a bullet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ShipData&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;GameObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Double&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;40.0&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;visualAngle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Double&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;fire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Game&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;ship&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;
        &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gameObjects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;BulletData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ship&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;speed&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ship&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;visualAngle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ship&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the &lt;code&gt;ShipData&lt;/code&gt; (or even a &lt;code&gt;GameObject&lt;/code&gt; in general) does not include any logic on how to render this item to the display – &lt;strong&gt;with Jetpack Compose, keeping state and presentation separated is quite easy&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Because a lot of behavior is shared between all types of entities in the game, our main game loop can treat them as the supertype &lt;code&gt;GameObject&lt;/code&gt; for the most part, and only specific interactions between certain types of objects, like bullet-asteroid or asteroid-player collisions, need to be handled specifically.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rendering-to-the-screen"&gt;
  &lt;/a&gt;
  Rendering to the Screen &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I found that in Jetpack Compose, &lt;strong&gt;separating game data from the visual representation comes quite naturally&lt;/strong&gt;. Game objects like a ship, an asteroid, or a bullet are all represented in two parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A class holding the state associated with the game object (in terms of "Compose state" – via &lt;code&gt;mutableStateOf&lt;/code&gt; and friends) – We briefly talked about this in the previous section.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;@Composable&lt;/code&gt;, defining the rendering based on the game object's data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To illustrate the latter, here's the minimal visual representation of the &lt;code&gt;Asteroid&lt;/code&gt; composable. It receives &lt;code&gt;asteroidData&lt;/code&gt;, which is the container for all information regarding the state of this particular game object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Composable&lt;/span&gt;
&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;Asteroid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asteroidData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AsteroidData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;asteroidSize&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asteroidData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;
    &lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nc"&gt;Modifier&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asteroidData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xOffset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;asteroidData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yOffset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asteroidSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asteroidData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toFloat&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CircleShape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;153&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code snippet is enough to &lt;strong&gt;describe the whole visual representation&lt;/strong&gt; of an asteroid.&lt;/p&gt;

&lt;p&gt;We start with a &lt;a href="https://developer.android.com/jetpack/compose/layout"&gt;&lt;code&gt;Box&lt;/code&gt;&lt;/a&gt; – one of Compose's most basic layout primitives, which allows us to have entities overlap (which is useful since we manually take care of placing the individual entities). We then use Jetpack Compose's &lt;a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/Modifier"&gt;&lt;code&gt;Modifier&lt;/code&gt;s&lt;/a&gt; to specify the position of the asteroid in the form of an &lt;code&gt;offset&lt;/code&gt;, its size, rotation angle, shape (by clipping a &lt;code&gt;CircleShape&lt;/code&gt;), and background color.&lt;/p&gt;

&lt;p&gt;Note that Compose offers quite &lt;strong&gt;high-level APIs even for these basic shapes&lt;/strong&gt; – for example, we can use &lt;code&gt;.rotate&lt;/code&gt; directly, without having to manually do geometry work to figure out how to get our entities facing the right way.&lt;/p&gt;

&lt;p&gt;To keep this snippet as concise as possible, I've also introduced some extension functions on &lt;code&gt;GameObject&lt;/code&gt; that make it possible to reuse the logic of computing the offset of a game object based on its position and size, called &lt;code&gt;xOffset&lt;/code&gt; and &lt;code&gt;yOffset&lt;/code&gt;, which I've snuck into the previous code snippet already. Their implementation is relatively straightforward:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;GameObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xOffset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Dp&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;GameObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yOffset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Dp&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A slightly more complicated composable would be the &lt;code&gt;Ship&lt;/code&gt; component, which combines the shapes of a triangle and circle to create a minimalistic spaceship:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Composable&lt;/span&gt;
&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;Ship&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shipData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ShipData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;shipSize&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shipData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dp&lt;/span&gt;
    &lt;span class="nc"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nc"&gt;Modifier&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shipData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xOffset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shipData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yOffset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shipSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shipData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;visualAngle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toFloat&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CircleShape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Black&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Canvas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;modifier&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Modifier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fillMaxSize&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;onDraw&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;drawPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;White&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;size&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shipSize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toPx&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="nf"&gt;moveTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Top-left corner...&lt;/span&gt;
                    &lt;span class="nf"&gt;lineTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ...to right-center...&lt;/span&gt;
                    &lt;span class="nf"&gt;lineTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ... to bottom-left corner.&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Box&lt;/code&gt; defining the ship is quite similar to the one we saw for an &lt;code&gt;Asteroid&lt;/code&gt;, but we additionally add a &lt;code&gt;Canvas&lt;/code&gt; to draw some additional shapes on top of our spaceship – in this case, a triangle path. In typical Compose fashion, we just add this &lt;code&gt;Canvas&lt;/code&gt; in the lambda block following our &lt;code&gt;Box&lt;/code&gt;, meaning the &lt;code&gt;Canvas&lt;/code&gt; will inhert the coordinate system of its parent, including its offset and rotation.&lt;/p&gt;

&lt;p&gt;These composables are then just rendered to a &lt;em&gt;play surface&lt;/em&gt; – nothing more than a &lt;code&gt;Box&lt;/code&gt; with a locked aspect ratio of &lt;code&gt;1.0f&lt;/code&gt; (to keep it quadratic). Of course, applying some artistic talent to these visual representations of the game is also possible, but we're keeping it minimal for now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#continued-in-part-2"&gt;
  &lt;/a&gt;
  Continued in Part 2
&lt;/h2&gt;

&lt;p&gt;There's still a bit more work to do until we can call our game done. In part 2 of this blog post series, we will look at additional rendering details, the geometry and linear algebra behind the game's simple physics simulation, as well as frame-independent movement. &lt;strong&gt;&lt;a href="https://dev.to/kotlin/tips-tricks-for-building-a-game-using-jetpack-compose-for-desktop-266o"&gt;Read on and find out!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>kotlin</category>
      <category>jetpackcompose</category>
      <category>android</category>
    </item>
    <item>
      <title>The API Series - GraphQL and Sending Queries with fetch()</title>
      <author>Nathan B Hankes</author>
      <pubDate>Thu, 06 May 2021 12:57:56 +0000</pubDate>
      <link>https://dev.to/vetswhocode/the-api-series-graphql-and-sending-queries-with-fetch-gf0</link>
      <guid>https://dev.to/vetswhocode/the-api-series-graphql-and-sending-queries-with-fetch-gf0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this tutorial you'll learn how to query data from a GraphQL API. In the process, you'll be exposed to some common tools used to work with GraphQL APIs, GraphQL syntax and structure, and you'll receive a VanillaJS GraphQL repository to study and get running on your local system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Some familiarity with HTML, Git, and JavaScript. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-graphql"&gt;
  &lt;/a&gt;
  What is GraphQL
&lt;/h2&gt;

&lt;p&gt;In the same way that the RESTful APIs conform to a REST architectural style, GraphQL APIs follow a strict GraphQL architecture. GraphQL is a query language for APIs organized with this GraphQL architecture. But unlike RESTful APIs, GraphQL has a single URL endpoint, offering an advantage over working with REST APIs that require different URL endpoints for different data. Additionally, GraphQL APIs only returns the data you need, unlike REST APIs which often deliver all the data associated with an object. For example, if you want to fetch the user name, the REST API would return the User object along with all of its properties. This is known as overfetching and can slow down your applications. With GraphQL, as you'll see, you can return the user name only.&lt;/p&gt;

&lt;p&gt;As a frontend developer, you'll be interacting with an API that is already built, but understanding how they're built is useful. The GraphQL schema architecture is defined by a series of schema based on type, like the below example from the &lt;a href="https://graphql.org/"&gt;GraphQL Foundation&lt;/a&gt; website:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Query&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Character&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Character&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;
  &lt;span class="nx"&gt;friends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Character&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="nx"&gt;homeWorld&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Planet&lt;/span&gt;
  &lt;span class="nx"&gt;species&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Species&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Planet&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;
  &lt;span class="nx"&gt;climate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Species&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;
  &lt;span class="nx"&gt;lifespan&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Int&lt;/span&gt;
  &lt;span class="nx"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Planet&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, there are several types: Query, Character, Planet, and Species. Some types are built into the query language. Examples of these are the types Query and Mutation, which we'll dive into deeper later on. The custom types of Character, Planet, and Species are referred to as object types. Each type will have one or more properties, which are often referred to as fields. From the example above, the Query type has a field of hero, which returns an array of the Character object type. Within the API, fields are assigned a type, such as the built-in String, Int, Float, Boolean, or ID, or fields are assigned type objects, such as, in the example above, Character, Planet, or Species. Like the syntax of JavaScript, object types enclosed in brackets return an array of that object type.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#queries-and-mutations"&gt;
  &lt;/a&gt;
  Queries and Mutations
&lt;/h2&gt;

&lt;p&gt;Whereas the REST API has several methods, such as POST, GET, PATCH, PUT, and DELETE, GraphQL has only two methods: Query and Mutation.&lt;/p&gt;

&lt;p&gt;Queries are like the REST API GET method. They return data stored by the API.&lt;/p&gt;

&lt;p&gt;Mutations change data, and encompass the REST API POST, PUT, PATCH, and DELETE methods.&lt;br&gt;
Getting Started With GraphQL API Query&lt;br&gt;
In order to avoid getting bogged down in setting up a development environment to get started, we're going to first learn about consuming a GraphQL API using the OneGraph's GraphiQL explorer located at &lt;a href="https://www.onegraph.com/graphiql"&gt;https://www.onegraph.com/graphiql&lt;/a&gt; &lt;br&gt;
The home page will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vj0Hztrc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/esqh2p4ikfm80j6awa6k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vj0Hztrc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/esqh2p4ikfm80j6awa6k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OneGraph is a company that integrates all the most commonly used APIs in business into a single GraphQL API, so developers can query Twitter, Salesforce, Slack, and UPS in a single query. GraphiQL is not owned by OneGraph. It is a tool that you can use independently.&lt;/p&gt;

&lt;p&gt;To learn more about GraphiQL, visit &lt;a href="https://github.com/graphql/graphiql"&gt;https://github.com/graphql/graphiql&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the leftmost column, we see all the APIs that OneGraph has integrated into their offering. The center columns is where we will write our query. The rightmost column is where our query output will be displayed.&lt;/p&gt;

&lt;p&gt;In the below example, we'll query the DEV blogging API to get some article information from user &lt;code&gt;nbhankes&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h-0xm06Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fy696dcixywrw4an01ct.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h-0xm06Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fy696dcixywrw4an01ct.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The GraphiQL explorer shows us the GraphQL API schema structure of the DEV API and allows us to select the data we'd like to retrieve from the API. As we make this selection, the explorer creates a query, which we see being built in the middle column. Once our query is built, we run the query by hitting the play button on the bar. The query is then sent to the DEV API and the results are displayed on the right.&lt;/p&gt;

&lt;p&gt;Below is the actual code for you to study. Notice the terms edges and node in the section labeled GraphQL Query.  nodes define objects and edges define relationships between objects and are optional (except in the Relay GraphQL client). Adding these to a query can be useful when working with complex APIs schemas. For the sake of this introduction, it's just important to be aware of them. If you'd like to dive deeper into edges and nodes, visit &lt;a href="https://www.apollographql.com/blog/explaining-graphql-connections-c48b7c3d6976/"&gt;https://www.apollographql.com/blog/explaining-graphql-connections-c48b7c3d6976/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's dive into the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//GraphQL Query&lt;/span&gt;

&lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="nx"&gt;MyQuery&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;devTo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nbhankes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;edges&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;title&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;//API Response&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;devTo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;articles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;edges&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The API Series - Part 2: The REST API, fetch(), and AXIOS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The API Series - Part 1: An Intro to APIs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Classless CSS Isn't Trashy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Upgrade Your CSS: The Syntax.fm Typography Sizing Strategy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;




&lt;span class="c1"&gt;//GraphQL Query without edges or node&lt;/span&gt;

&lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="nx"&gt;MyQuery&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;devTo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nbhankes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;title&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;//API Response without edges or node&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;devTo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;articles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The API Series - Part 2: The REST API, fetch(), and AXIOS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The API Series - Part 1: An Intro to APIs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Classless CSS Isn't Trashy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Upgrade Your CSS: The Syntax.fm Typography Sizing Strategy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, you can see that the shape of the query defines the shape of the API response. The response is shaped like a nested JavaScript object and can be handled similarly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-graphql-in-your-project-a-demo"&gt;
  &lt;/a&gt;
  Using GraphQL in Your Project: A Demo
&lt;/h2&gt;

&lt;p&gt;While the GraphiQL explorer is extremely useful, you can't just add the GraphQL query into your code and expect it to work. Below you'll find a link to a GitHub repo that makes a GraphQL query using plain JavaScript and the Fetch() API. This demonstration repository contains code for a website that queries the &lt;a href="https://api.spacex.land/graphql/"&gt;SpaceX GraphQL API&lt;/a&gt; and renders the response data to the browser. The demo built this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fizeBAKC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajpp3fk25fl3qsjahe1s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fizeBAKC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajpp3fk25fl3qsjahe1s.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the great thing about working with APIs is that if the CEO of SpaceX changes, our website will automatically reflect the changes as soon as the API is updated.&lt;/p&gt;

&lt;p&gt;Visit the &lt;a href="https://vanillajs-graphql-demo.surge.sh/"&gt;Live Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link To Repo: &lt;a href="https://github.com/nbhankes/vanillaJS-GraphQL-demo"&gt;https://github.com/nbhankes/vanillaJS-GraphQL-demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Study the comments and the code in the repository, follow the directions on the README.md file to get the project running on your local environment. Customize the query and template literal for practice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this tutorial you learned how to query data from a GraphQL API. You were exposed to some common tools used to work with GraphQL APIs, the GraphQL syntax and structure, and you received a VanillaJS GraphQL repository to study and get running on your local system.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>graphql</category>
    </item>
    <item>
      <title>Calling out developers for help fighting COVID-19 in India</title>
      <author>Rohith Gilla</author>
      <pubDate>Thu, 06 May 2021 12:56:08 +0000</pubDate>
      <link>https://dev.to/gillarohith/calling-out-developers-for-help-fighting-covid-19-in-india-46g9</link>
      <guid>https://dev.to/gillarohith/calling-out-developers-for-help-fighting-covid-19-in-india-46g9</guid>
      <description>&lt;p&gt;We have made an app to &lt;em&gt;Geolocate Covid Resources&lt;/em&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://covi-find.in/"&gt;Covid Find&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most of the similar apps we found did not geolocate the resources, making it tough for people to find the nearest help. We are getting our data from government websites and is updated hourly.&lt;/p&gt;

&lt;p&gt;Currently, we have a few cities and states. We will be continuously adding more cities as well as resources. &lt;/p&gt;

&lt;p&gt;If you would like to help out in this initiative and know the following stack :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web scraping: Beautifulsoup, Pandas, Requests&lt;/li&gt;
&lt;li&gt;Backend: Flask&lt;/li&gt;
&lt;li&gt;Frontend: Next.js + TypeScript + Chakra UI&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please join the Discord server to join the initiative.&lt;br&gt;
&lt;a href="https://discord.gg/QWPxEzwfHa"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to check the github repo &lt;a href="https://github.com/Rohithgilla12/covi-find"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br&gt;
Rohith Gilla&lt;/p&gt;

&lt;p&gt;P.S: Stay home, stay safe and get vaccinated if your turn comes.&lt;/p&gt;

&lt;p&gt;P.P.S: Let me know if you want to know about how I built the frontend of the application, will be more than happy to write a blog post on that.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>help</category>
      <category>typescript</category>
      <category>python</category>
    </item>
    <item>
      <title>Why you should code in Rust in 2021</title>
      <author>Romaric Philogène</author>
      <pubDate>Thu, 06 May 2021 12:49:36 +0000</pubDate>
      <link>https://dev.to/rphilogene/why-you-should-code-in-rust-in-2021-534g</link>
      <guid>https://dev.to/rphilogene/why-you-should-code-in-rust-in-2021-534g</guid>
      <description>&lt;p&gt;Rust is one of the &lt;a href="https://stackoverflow.blog/2020/06/05/why-the-developers-who-use-rust-love-it-so-much/"&gt;most loved languages&lt;/a&gt;  by developers for 5 years - writing code in Rust will push you to be a better developer even if you will never use it in your daily job. In this article, I explain why you should learn to write code in Rust. Let's go.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#better-understanding-of-memory-management"&gt;
  &lt;/a&gt;
  Better understanding of memory management
&lt;/h1&gt;

&lt;p&gt;I remember the time I used to learn to program in Python. Memory was managed by the language, and I didn't need to understand how things work. Grasping algorithmic and all basic concepts when you are a beginner takes time. So spending time thinking about how to manage memory allocation is meaningless. But once you are fluent in programming and it is now so easy that you can focus on business value, it is maybe time to dig into how to build more efficient programs. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For a long time, the efficiency of a program was about lower cost and performance. But in 2021, we can add a third dimension - power efficiency 🌎. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#heap-vs-stack"&gt;
  &lt;/a&gt;
  Heap vs Stack
&lt;/h2&gt;

&lt;p&gt;Java, Python, Javascript, Typescript, Go, Haskell, C# are managed programming languages. You don't need to think about memory allocation - does this variable &lt;code&gt;x&lt;/code&gt; is allocated on the &lt;em&gt;heap&lt;/em&gt; or on the &lt;em&gt;stack&lt;/em&gt;? (&lt;em&gt;read more about  &lt;a href="https://www.guru99.com/stack-vs-heap.html"&gt;Heap vs Stack&lt;/a&gt;&lt;/em&gt;). On the other hand, programming languages like C, C++, and Rust forced you to think about how you want to memory allocate your variable &lt;code&gt;x&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Python - Stack x memory allocation
&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hello world"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// Rust - Stack x memory allocation&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hello world"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Those two var assignations look similar, right? They are! They are allocated on the Stack. The difference is that with Rust, we have more fine-grained control on the memory allocation. For instance, to allocate "hello world" on the Heap:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// Rust - Heap x memory allocation&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello world"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Heap allocation is not explicitly possible with Python - The interpreter manages it for you.&lt;/p&gt;

&lt;p&gt;To summarize: Stack is used for static memory allocation and Heap for dynamic memory allocation, both stored in the computer's RAM. Variables allocated on the stack are stored directly to the memory, and access to this memory is very fast. The Heap memory allocation is slower than the Stack memory allocation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reference-vs-value"&gt;
  &lt;/a&gt;
  Reference vs Value
&lt;/h2&gt;

&lt;p&gt;In Python, you don't even need to think about whether your function variables are passed by reference or value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# declare a function "sum"
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# the result is 3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this situation, values 2 and 1 are &lt;strong&gt;passed&lt;/strong&gt; to the function &lt;code&gt;sum&lt;/code&gt; &lt;strong&gt;by value&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# declare a function "sum" accepting a list object
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;accumulator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;accumulator&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;

&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# the result is 3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in this situation, the list with values 2 and 1 inside is &lt;strong&gt;passed&lt;/strong&gt; to the function &lt;code&gt;sum&lt;/code&gt; &lt;strong&gt;by reference&lt;/strong&gt;. 🙄&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is not exactly true. In Python, "object references are passed by value" and not by reference. But I will not go into details here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In Rust, you have to be specific if you want to pass a variable by reference or value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// pass by value&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// the result is 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Values 2 and 1 are &lt;strong&gt;passed&lt;/strong&gt; to the function &lt;strong&gt;by value&lt;/strong&gt;. To pass by reference, you have to use &lt;code&gt;&amp;amp;&lt;/code&gt; explicitly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// pass by reference&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;accumulator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;accumulator&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;accumulator&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;vec!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// the result is 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We pass a list of values by reference to the function &lt;code&gt;sum&lt;/code&gt;. And we can do the same by passing the value of the list by removing &lt;code&gt;&amp;amp;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// pass by reference&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;u16&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;u16&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;accumulator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;accumulator&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;accumulator&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;vec!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// the result is 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The difference is that Rust will consume the list and will remove it from memory. This is a specific behavior of Rust (read  &lt;a href="https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html"&gt;ownership&lt;/a&gt; ).&lt;/p&gt;

&lt;p&gt;Passing variable by reference or value look anecdotal, but they are not when you need to build highly performant system like databases, embedded devices, and many others.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#build-safer-programs"&gt;
  &lt;/a&gt;
  Build safer programs
&lt;/h1&gt;

&lt;p&gt;As a programmer, when you start to build concurrent programs, you don't really realize how hard it is to write safe concurrent code. This is so abstracted and easy to write unsafe code that we all fall into the trap at least once, and even when we are more experienced. Let me show one unsafe Golang code that I saw one time from an experienced developer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// golang example&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"gender"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"male"&lt;/span&gt;
&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"gender"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"female"&lt;/span&gt;
&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// m["gender"] is male or female?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;this is not the exact code, but the idea of concurrently modifying a hashmap was the same&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, the value of &lt;code&gt;m["gender"]&lt;/code&gt; is &lt;code&gt;male&lt;/code&gt; or &lt;code&gt;female&lt;/code&gt;? 🤔 &lt;/p&gt;

&lt;p&gt;We can't know. This code is not deterministic due to concurrent writes. If you run this code multiple times, you will sometimes have &lt;code&gt;male&lt;/code&gt;, sometimes &lt;code&gt;female&lt;/code&gt;, and even sometimes &lt;code&gt;fatal concurrent write errors&lt;/code&gt; 😨 To concurrently edit the hashmap &lt;code&gt;m&lt;/code&gt; you have to make it &lt;em&gt;thread safe&lt;/em&gt;. This kind of error happens all the time, even to experienced developers in more complex situations. This is where Rust helps developers to prevent this kind of mistake. Here is the equivalent in Rust:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;HashMap&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nn"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"gender"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"male"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nn"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"gender"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"female"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{:?}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the compiler prevents you from doing nasty stuff.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;error[E0382]: use of moved value: &lt;span class="sb"&gt;`&lt;/span&gt;m&lt;span class="sb"&gt;`&lt;/span&gt;
  &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; src/main.rs:11:19
   |
5  |     &lt;span class="nb"&gt;let &lt;/span&gt;mut m: HashMap&amp;lt;&amp;amp;str, &amp;amp;str&amp;gt; &lt;span class="o"&gt;=&lt;/span&gt; HashMap::new&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   |         &lt;span class="nt"&gt;-----&lt;/span&gt; move occurs because &lt;span class="sb"&gt;`&lt;/span&gt;m&lt;span class="sb"&gt;`&lt;/span&gt; has &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;HashMap&amp;lt;&amp;amp;str, &amp;amp;str&amp;gt;&lt;span class="sb"&gt;`&lt;/span&gt;, which does not implement the &lt;span class="sb"&gt;`&lt;/span&gt;Copy&lt;span class="sb"&gt;`&lt;/span&gt; trait
6  |     
7  |     thread::spawn&lt;span class="o"&gt;(&lt;/span&gt;move &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   |                   &lt;span class="nt"&gt;-------&lt;/span&gt; value moved into closure here
8  |        m[&lt;span class="s2"&gt;"gender"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"male"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   |        - variable moved due to use &lt;span class="k"&gt;in &lt;/span&gt;closure
...
11 |     thread::spawn&lt;span class="o"&gt;(&lt;/span&gt;move &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   |                   ^^^^^^^ value used here after move
12 |        m[&lt;span class="s2"&gt;"gender"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"female"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   |        - use occurs due to use &lt;span class="k"&gt;in &lt;/span&gt;closure
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rust compiler is super smart, it prevents you from doing race condition, and there is no way to compile this kind of code because it is simply wrong. That's why so many developers said that &lt;a href="https://vorner.github.io/difficult.html"&gt;Rust is frustrating&lt;/a&gt;. The Rust compiler is just honest with you and tells you the truth about your code. You were probably writing wrong code for long time, and you didn't know until now. I know, it's hard to change habits, and that's why in this kind of situation Rust is your best friend. It will always tell you the truth, even if it is not pleasant :)&lt;/p&gt;

&lt;p&gt;A thread-safe code in Rust looks like this (don't use it in production - using &lt;code&gt;.unwrap()&lt;/code&gt; here can block threads):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Mutex&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Mutex&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;HashMap&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;

&lt;span class="nn"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="nf"&gt;.lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s"&gt;"gender"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"male"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nn"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="nf"&gt;.lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s"&gt;"gender"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"female"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{:?}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I hope you liked this article, and it gives you the appetite to try out Rust. If you have no idea how to start learning it, I would recommend reading &lt;a href="https://doc.rust-lang.org/book/"&gt;the official free ebook&lt;/a&gt;. Then, trying to reimplement some good old academic (or not) algorithms and data structures in Rust. If you want to put your hands into dirty stuff, I can recommend contributing to my project  &lt;a href="https://github.com/Qovery/engine"&gt;Qovery Engine&lt;/a&gt;  and  &lt;a href="https://github.com/Qovery/redisless"&gt;RedisLess&lt;/a&gt;  as well. &lt;/p&gt;

&lt;p&gt;Here is a shortlist of Rust projects that I recommend to read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://github.com/meilisearch/MeiliSearch"&gt;Meilisearch&lt;/a&gt; : Algolia and Elasticsearch search engine alternative.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/valeriansaliou/sonic"&gt;Sonic&lt;/a&gt; : Lightweight Elasticsearch alternative.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/spacejam/sled"&gt;Sled&lt;/a&gt; : Storage engine written in Rust - alternative to RocksDB.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/alex-dukhno/isomorphicdb"&gt;IsomorphicDB&lt;/a&gt; : PostgreSQL clone - it is a good experimental project written in Rust.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/tikv/raft-rs"&gt;Raft-rs&lt;/a&gt; : Raft consensus protocol implemented in Rust by PingCap.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/Qovery/redisless"&gt;RedisLess&lt;/a&gt;: RedisLess is a fast, lightweight, embedded, and scalable in-memory Key/Value store library compatible with the Redis API. &lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/Qovery/engine"&gt;Qovery Engine&lt;/a&gt;:  Qovery Engine is an open-source abstraction layer library that turns easy apps deployment on AWS, GCP, Azure, and other Cloud providers in just a few minutes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;==========&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jobs.qovery.com"&gt;I am hiring Rust developers&lt;/a&gt; for my wonderful &lt;a href="https://www.qovery.com"&gt;company&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>rust</category>
    </item>
    <item>
      <title>#30DaysofAppwrite: SSL Certificates</title>
      <author>kodumbeats</author>
      <pubDate>Thu, 06 May 2021 12:39:49 +0000</pubDate>
      <link>https://dev.to/appwrite/30daysofappwrite-ssl-certificates-c08</link>
      <guid>https://dev.to/appwrite/30daysofappwrite-ssl-certificates-c08</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;Appwrite is an open-source, self-hosted Backend-as-a-Service that makes app development &lt;strong&gt;easier&lt;/strong&gt; with a suite of SDKs and APIs to accelerate app development. &lt;a href="http://30days.appwrite.io/"&gt;#30DaysOfAppwrite&lt;/a&gt; is a month long event focussed at giving developers a walkthrough of all of Appwrite's features, starting from the basics to more advanced features like cloud functions! Alongside we will also be building a fully featured Medium Clone to demonstrate how these concepts can be applied when building a real world app. We also have some exciting prizes for developers who follow along with us!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ssl-certificates-in-appwrite"&gt;
  &lt;/a&gt;
  SSL Certificates in Appwrite
&lt;/h1&gt;

&lt;p&gt;Welcome to Day 6 👋 of &lt;code&gt;#30DaysofAppwrite&lt;/code&gt;. Today, we're going to discuss how to secure your Appwrite API traffic with SSL certificates: what they do, how to get them, and how to troubleshoot SSL problems in Appwrite.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-ssl"&gt;
  &lt;/a&gt;
  What is SSL?
&lt;/h2&gt;

&lt;p&gt;SSL is a security protocol that cryptographically provides authentication for computers communicating with each other on the Internet, improved and later replaced by &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/TLS"&gt;TLS&lt;/a&gt; years ago. Despite TLS replacing SSL, both names are commonly used to refer to the same process: secure HTTP sessions with certificate keypairs (fancy text files) signed by a &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Certificate_authority"&gt;Certificate Authority&lt;/a&gt;, CA for short. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#trusting-certificates"&gt;
  &lt;/a&gt;
  Trusting Certificates
&lt;/h3&gt;

&lt;p&gt;The TLS protocol provides cryptographically unique keypairs that not only provide encryption, but also include domain, host, and organization information in the certificate. However, since TLS technology is &lt;a href="https://github.com/openssl/openssl"&gt;open-source&lt;/a&gt;, anyone can operate as a CA and sign certificates. To keep users secure, computers and browsers ship with lists of pre-vetted CAs to trust automatically[1]. Websites that use certificates issued by these trusted sources get the all-important lock🔒 next to their domain in the URL bar. Websites without them, however, face the dreaded &lt;code&gt;Warning: Potential Security Risk Ahead&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[1] For the curious, here's Mozilla's list of &lt;a href="https://wiki.mozilla.org/CA/Included_Certificates"&gt;trusted sources&lt;/a&gt; for Firefox.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oNsxoyDL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbhgi0880ivfb7sj2mnu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oNsxoyDL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbhgi0880ivfb7sj2mnu.png" alt="Self-Signed Certificate Warning"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The process of becoming a universally trusted CA on these lists &lt;a href="https://en.wikipedia.org/wiki/Key_ceremony"&gt;can be costly&lt;/a&gt;, which is why organizations like IdenTrust and DigiCert charge money for their services. These companies have the resources and knowledge to provide a range of security guarantees, protecting financial institutions, governments, militaries, and more. Though, I'm assuming that you're not starting a bank, and don't have the funds to get a commercial SSL certificate. Where are the free options?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-lets-encrypt"&gt;
  &lt;/a&gt;
  Welcome, Let's Encrypt
&lt;/h3&gt;

&lt;p&gt;Let's Encrypt is a free, automated, and trusted Certificate Authority that aims to provide for a safer, more secure Internet. Appwrite uses their popular &lt;a href="https://certbot.eff.org/"&gt;&lt;code&gt;certbot&lt;/code&gt;&lt;/a&gt; tool under the hood to automatically handle certificate generation and renewal, so you can focus on building your app. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#securing-appwrite-with-https"&gt;
  &lt;/a&gt;
  Securing Appwrite with HTTPS
&lt;/h2&gt;

&lt;p&gt;To illustrate by example, let's assume I've installed Appwrite on a  VPS and bought the domain &lt;code&gt;example.com&lt;/code&gt; for my next Appwrite-powered project. What steps are necessary to serve my app on &lt;code&gt;example.com&lt;/code&gt;? &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#domain-records"&gt;
  &lt;/a&gt;
  Domain records
&lt;/h3&gt;

&lt;p&gt;Your registrar ultimately has control over your domain (our &lt;code&gt;example.com&lt;/code&gt;), so we'll need to start there to point the domain at the IP address of your VPS. For this, we can use an DNS A record. Adding DNS records to your domain varies by registrar, so check out our docs on &lt;a href="https://appwrite.io/docs/custom-domains"&gt;Custom Domains&lt;/a&gt; for a bunch of helpful links and more specific instructions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ssl-certificates-in-development"&gt;
  &lt;/a&gt;
  SSL Certificates in Development
&lt;/h3&gt;

&lt;p&gt;As mentioned before, all the required technology to generate your own SSL certificate is open-source, but it just isn't globally trusted by browsers. That's totally fine for development (assuming you trust yourself 😂) - Appwrite provides a self-signed certificate out-of-the-box (via the Traefik proxy), so your work is immediately encrypted. To do this, we need to let Appwrite know we're trying to use the self-signed certificate. Our SDKs all accept a &lt;code&gt;client.setSelfSigned()&lt;/code&gt; method to handle this. Here's an example using our &lt;a href="https://appwrite.io/docs/getting-started-for-web"&gt;Web SDK&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;appwrite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://example.com/v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5df5acd0d48c2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSelfSigned&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ssl-certificates-in-production"&gt;
  &lt;/a&gt;
  SSL Certificates in Production
&lt;/h3&gt;

&lt;p&gt;Now, say you're past the development stage for &lt;code&gt;example.com&lt;/code&gt;, and you're ready to move to production. The following is required for Appwrite to issue a production-ready SSL certificate (with the lock🔒):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Appwrite in &lt;code&gt;production&lt;/code&gt; mode via &lt;code&gt;_APP_ENV=production&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;A valid email set via &lt;code&gt;_APP_SYSTEM_SECURITY_EMAIL_ADDRESS&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;A public-facing domain set via &lt;code&gt;_APP_DOMAIN&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Traefik (proxy webserver) listening on port 80&lt;/li&gt;
&lt;li&gt;Remove references to &lt;code&gt;client.setSelfSigned&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Our docs on &lt;a href="https://appwrite.io/docs/environment-variables"&gt;Appwrite environment variables&lt;/a&gt; are a good reference when changing Appwrite's configuration. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To apply new environment variables, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up &lt;span class="nt"&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is where the Appwrite Certificates worker takes the reigns, calling &lt;code&gt;certbot&lt;/code&gt; to generate a certificate signed by Let's Encrypt. The worker then stores the certificates in a Docker volume for persistence, and queues up a job to check the certificate renewal periodically (Let's Encrypt certificates are valid for 90 days by default).  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging"&gt;
  &lt;/a&gt;
  Debugging
&lt;/h2&gt;

&lt;p&gt;The first place to look for any certificate problems is the Certificates worker. You can check the service logs with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose logs appwrite-worker-certificates
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you've configured your domain after your Appwrite server has started, you can re-trigger the Certificates worker by restarting Appwrite:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose restart appwrite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you still can't figure it out, you can find help on &lt;a href="https://appwrite.io/discord"&gt;Discord&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;We hope you liked this write up. You can follow &lt;a href="https://twitter.com/search?q=%2330daysofappwrite"&gt;#30DaysOfAppwrite&lt;/a&gt; on Social Media to keep up with all of our posts. The complete event timeline can be found &lt;a href="http://30days.appwrite.io"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/discord"&gt;Discord Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appwrite.io/"&gt;Appwrite Homepage&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite"&gt;Appwrite's Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feel free to reach out to us on Discord if you would like to learn more about Appwrite, Aliens or Unicorns 🦄. Stay tuned for tomorrow's article! Until then 👋&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
