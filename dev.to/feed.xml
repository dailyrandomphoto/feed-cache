<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Introduction to cURL with php</title>
      <author>popoola Temitope</author>
      <pubDate>Sat, 09 Oct 2021 21:44:00 +0000</pubDate>
      <link>https://dev.to/popoolatopzy/introduction-to-curl-with-php-ci9</link>
      <guid>https://dev.to/popoolatopzy/introduction-to-curl-with-php-ci9</guid>
      <description>&lt;p&gt;Client URL (cURL) is a PHP library for transferring data using various network protocols. cURL allows data to be transfer over HTTP using either the GET/POST method.&lt;/p&gt;

&lt;p&gt;In this article we'll discus briefly on cURL under the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Reason for cURL&lt;/li&gt;
&lt;li&gt;Implementation of cURL&lt;/li&gt;
&lt;li&gt;Sample codes - using POST, GET method and file uploading&lt;/li&gt;
&lt;li&gt;some cURL functions&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;cURL is supported with PHP version 4 and above.&lt;br&gt;
file can be upload using cURL.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some of the reasons you might want to use cURL compared to other options like &lt;code&gt;file_get_contents()&lt;/code&gt; includes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;cURL is a good way to communicate with third-party API  either to download resources or to fetch information from an external website.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cURL is a good library for developing REST API.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cURL is secure and easy to use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cURL is use instead of &lt;code&gt;file_get_contents&lt;/code&gt; because it support POST method.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#getting-started-with-curl"&gt;
  &lt;/a&gt;
  Getting started with cURL
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;First you will need to initialize a new curl session using the &lt;code&gt;curl_init()&lt;/code&gt; function.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;You should note this function must come first before all other curl related functions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Afterwards, we use &lt;code&gt;curl_setopt()&lt;/code&gt; to define other various options like setting the request type, adding request data, etc. for our curl request.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;most of the cURL request settings are done using &lt;code&gt;curl_setopt()&lt;/code&gt; function.&lt;br&gt;
This function takes three parameters - &lt;code&gt;curl_setopt($curl, CURLOPT_*,Value)&lt;/code&gt; where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;$curl - the initializeed curl session variable&lt;/li&gt;
&lt;li&gt;CURLOPT_* - the option to set e.g &lt;code&gt;CURLOPT_POST&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Value - this is the value to set for a specified CURLOPT_* option.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;And, on sending our request, the following options are required:&lt;/p&gt;

&lt;p&gt;a. &lt;code&gt;curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE)&lt;/code&gt; - setting the &lt;code&gt;CURLOPT_RETURNTRANSFER&lt;/code&gt; option to &lt;code&gt;TRUE&lt;/code&gt; will prevent the response to be displayed directly on the screen.&lt;/p&gt;

&lt;p&gt;b. &lt;code&gt;curl_setopt($curl, CURLOPT_URL, $url)&lt;/code&gt; - use CURLOPT_URL option to set the request URL to &lt;strong&gt;thewebsite.com&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;c. &lt;code&gt;curl_setopt($curl, CURLOPT_POST, TRUE)&lt;/code&gt; - the &lt;code&gt;CURLOPT_POST&lt;/code&gt; option to &lt;code&gt;TRUE&lt;/code&gt; to set the request method to HTTP POST&lt;/p&gt;

&lt;p&gt;d. curl_setopt($curl, CURLOPT_POSTFIELDS, $fields_string_array) - use &lt;code&gt;CURLOPT_POSTFIELDS&lt;/code&gt; option to set the &lt;code&gt;POST&lt;/code&gt; data to submit along with the request.&lt;/p&gt;

&lt;p&gt;e. &lt;code&gt;curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Type:application/json')&lt;/code&gt; - this inform the API server that we are sending JSON data.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;use &lt;code&gt;curl_exec($curl)&lt;/code&gt; - to execute a request or perform a cURL session.&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;curl_close($curl)&lt;/code&gt; - to close the curl session.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#curl-in-action"&gt;
  &lt;/a&gt;
  curl in action
&lt;/h3&gt;

&lt;p&gt;The code below is a sample of cURL POST method request to be submit, along with required datas.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$curl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;curl_init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$post_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;"userName"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"example1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s2"&gt;"email"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"email@example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s2"&gt;"password"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'https://www.thewebsite.com'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;curl_setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CURLOPT_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;curl_setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CURLOPT_RETURNTRANSFER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;curl_setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CURLOPT_POST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;curl_setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CURLOPT_POSTFIELDS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$post_method&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;curl_setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CURLOPT_HEADER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$Response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;curl_exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;curl_close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#upload-file-with-curl"&gt;
  &lt;/a&gt;
  Upload file with cURL
&lt;/h3&gt;

&lt;p&gt;To upload a file with  cURL we need to use &lt;code&gt;curl_file_create&lt;/code&gt; to create the &lt;code&gt;CURLFile&lt;/code&gt; object, we'll  set &lt;code&gt;CURLOPT_HTTPHEADER&lt;/code&gt; to &lt;code&gt;multipart/form-data&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'{POST_REST_ENDPOINT}'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$curl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;curl_init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;function_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'curl_file_create'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$fileAttachment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;curl_file_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/file/path/'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$fileAttachment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'@'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;realpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/file/path/'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;$fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;'username'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Value'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'password'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Value'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'uploaded_file'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$fileAttachment&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;curl_setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CURLOPT_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;curl_setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CURLOPT_POST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;curl_setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CURLOPT_POSTFIELDS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$fields&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;curl_setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CURLOPT_RETURNTRANSFER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;curl_setopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;CURLOPT_HTTPHEADER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Content-Type:multipart/form-data'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;curl_exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;curl_close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$curl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
`&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#list-of-some-curl-functions"&gt;
  &lt;/a&gt;
  List of some cURL functions.
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;curl_escape&lt;/code&gt; — it encode a given URL string&lt;br&gt;
&lt;code&gt;curl_unescape&lt;/code&gt; — it decodes a given URL encoded string&lt;br&gt;
&lt;code&gt;curl_errno&lt;/code&gt; — it return the last error number, when error is encounter&lt;br&gt;
&lt;code&gt;curl_error&lt;/code&gt; — it return a string description containing the last error for the current session&lt;br&gt;
&lt;code&gt;curl_getinfo&lt;/code&gt; — Get information about a specific transfer&lt;br&gt;
&lt;code&gt;curl_setopt_array&lt;/code&gt; — for Setting multiple options for a cURL transfer(in array format).&lt;br&gt;
&lt;code&gt;curl_pause&lt;/code&gt; — it Pause and unpause a connection&lt;br&gt;
&lt;code&gt;curl_reset&lt;/code&gt; — it Reset all options of a cURL session handle&lt;br&gt;
&lt;code&gt;curl_version&lt;/code&gt; — Gets cURL version information&lt;/p&gt;

</description>
      <category>php</category>
      <category>curl</category>
      <category>http</category>
    </item>
    <item>
      <title>A fresh-looking, neon theme for your preferred IDE. Almost radioactive.</title>
      <author>andrew_dev</author>
      <pubDate>Sat, 09 Oct 2021 21:04:49 +0000</pubDate>
      <link>https://dev.to/andrew_dev/a-fresh-looking-neon-theme-for-your-preferred-ide-almost-radioactive-52j2</link>
      <guid>https://dev.to/andrew_dev/a-fresh-looking-neon-theme-for-your-preferred-ide-almost-radioactive-52j2</guid>
      <description>&lt;p&gt;Just recently wrote a very clean, theme for VSCode called "radium". It mostly consists of green and neon type colors to match our name "radium". Feedback is much appreciated! We are updating it as we go to perfect the theme.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://radium-theme.github.io/"&gt;https://radium-theme.github.io/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/radium-theme/vsc"&gt;https://github.com/radium-theme/vsc&lt;/a&gt;&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=AndrewNijmeh.radium"&gt;https://marketplace.visualstudio.com/items?itemName=AndrewNijmeh.radium&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>My AWS service was over-provisioned by ~1000 times: A 5-minute guide on how to check app resource use on fargate</title>
      <author>Rob Sherling</author>
      <pubDate>Sat, 09 Oct 2021 20:30:38 +0000</pubDate>
      <link>https://dev.to/rob117/my-aws-service-was-over-provisioned-by-1000-times-a-5-minute-guide-on-how-to-check-app-resource-use-on-fargate-159j</link>
      <guid>https://dev.to/rob117/my-aws-service-was-over-provisioned-by-1000-times-a-5-minute-guide-on-how-to-check-app-resource-use-on-fargate-159j</guid>
      <description>&lt;p&gt;&lt;em&gt;cover image by &lt;a href="https://unsplash.com/@markuswinkler"&gt;@marcusWrinkler&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Very quick backstory:&lt;/p&gt;

&lt;p&gt;I built and am working on an app called &lt;a href="https://learnkichi.com?utm_source=dev_to&amp;amp;utm_medium=article&amp;amp;utm_id=saving_money_metrics"&gt;Kichi&lt;/a&gt;. It's an app to help intermediate learners continue to learn Japanese and English at a very fast pace.&lt;/p&gt;

&lt;p&gt;I've done a lot of deploys in my software career, and I've found a really good recipe for starting any new deploy. In AWS speak, you want to use RDS with a &lt;code&gt;db.t4g.small&lt;/code&gt; wired up to two &lt;code&gt;t4g.medium&lt;/code&gt;. This makes sure that you can handle unexpected loads if your service suddenly spikes, and that your DB won't go down assuming that your app is more process-intense than it is DB-intense. You then want your DB to be AZ-multi-instanced so that you don't have to worry about an outage taking you offline and so that your maintenance window doesn't take your service offline.&lt;/p&gt;

&lt;p&gt;This is an excellent strategy for launching a service for a company. This is a terrible strategy for launching your own service from scratch. For reference - I knew my service would need to start small, so I set my db to &lt;code&gt;micro&lt;/code&gt; and my two containers to &lt;code&gt;1 GiB memory&lt;/code&gt; with &lt;code&gt;.5 vCPU&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-actually-profile-your-production-app"&gt;
  &lt;/a&gt;
  How to actually profile your production app
&lt;/h2&gt;

&lt;p&gt;So, something that I found &lt;em&gt;profoundly annoying&lt;/em&gt; is that everyone seemed to tell me "profile your app to see how many resources you need", but no one actually told me how to do that. So, I found out.&lt;/p&gt;

&lt;p&gt;1) Put your app on Fargate. I only say this because this is my current setup.&lt;br&gt;
2) Click "Enable container insights" when you deploy. This will send a ton of metrics to CloudWatch. &lt;strong&gt;Note&lt;/strong&gt;: this is very, very expensive to maintain long term.&lt;br&gt;
3) Use your service for a little bit. Send a few of what you think might be your most demanding requests.&lt;br&gt;
4) Go to the CloudWatch Management Console, click "Logs", then "Log insights".&lt;br&gt;
5) Click 'Select Log Groups' on the top of the screen, and pick your logs that look something like &lt;code&gt;aws/ecs/containerInsights/{clusterName}/performance&lt;/code&gt;&lt;br&gt;
6) Prepare to be shocked at how efficient your app probably is.&lt;/p&gt;

&lt;p&gt;Please note that for each query, simply change &lt;code&gt;avg&lt;/code&gt; to &lt;code&gt;max&lt;/code&gt; or vice-versa to see the average or max for that metric.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#memory-usage-in-mib"&gt;
  &lt;/a&gt;
  Memory Usage (in MiB)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;stats max(MemoryUtilized) by bin (30m) as period, TaskDefinitionFamily, TaskDefinitionRevision
                | filter Type = "Task" | sort period desc, TaskDefinitionFamily |  limit 10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The number that comes out from this query will be the maximum memory that your containers have actually consumed, in MiB. I had provisioned 1GB per container. My max was ~299, so I dropped it to 512MB per container. Saved 50%.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cpu-usage"&gt;
  &lt;/a&gt;
  CPU Usage
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;stats max(CpuUtilized) by bin (30m) as period, TaskDefinitionFamily, TaskDefinitionRevision
                | filter Type = "Task" | sort period desc, TaskDefinitionFamily |  limit 10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This one &lt;em&gt;blew me away&lt;/em&gt;. So, the number that came out of this search was &lt;code&gt;0.7&lt;/code&gt;. I thought "Okay, so that's like 0.7 vCPU, that's not too bad."&lt;/p&gt;

&lt;p&gt;Then I ran a different query to see what the container itself had provisioned for maximum CPU usage, just to double-check (that query can be found in the metrics source link at the bottom). The number that came back was &lt;code&gt;512&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Not &lt;code&gt;.5&lt;/code&gt;. &lt;strong&gt;512&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;My app, with all of its OCR and DB access and sync and whatnot, only used about 1/100th of a vCPU in production.&lt;/p&gt;

&lt;p&gt;I immediately reduced my docker containers from 2 to 1, and reduced the CPU allotment to 256. This saved me 75%. Then I turned off container insights, because CloudWatch was getting expensive and I wouldn't need to profile again for a long time.&lt;/p&gt;

&lt;p&gt;So yeah. That's how you actually profile an app and see how much Memory/CPU it takes, and figure out how over-provisioned you are.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;p&gt;Source for all metrics: &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Container-Insights-metrics-ECS.html"&gt;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Container-Insights-metrics-ECS.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>metrics</category>
      <category>billing</category>
      <category>profiling</category>
      <category>aws</category>
    </item>
    <item>
      <title>🌈 VS-Code / Active Bracket pair colorization easily 🌈</title>
      <author>Osama</author>
      <pubDate>Sat, 09 Oct 2021 20:29:32 +0000</pubDate>
      <link>https://dev.to/bluec4p/active-bracket-pair-colorization-easily-3ome</link>
      <guid>https://dev.to/bluec4p/active-bracket-pair-colorization-easily-3ome</guid>
      <description>&lt;p&gt;This is an easy tutorial to show how to active the new feature in vscode.&lt;/p&gt;

&lt;p&gt;0 - Open VS Code (it was necessary to indicate)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tTQ0kU9M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/if0c77sunivq10ox7jv4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tTQ0kU9M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/if0c77sunivq10ox7jv4.png" alt="VS-Code-landing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1 - Open Editor Settings (use the shortcut or do this 👇)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S8DEi7CE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95nt770jy7xwwyefwa95.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S8DEi7CE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95nt770jy7xwwyefwa95.png" alt="Open-VS-Code-Settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7PZiI9PD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrl5rzjvlg380ri7w111.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7PZiI9PD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrl5rzjvlg380ri7w111.png" alt="Open-VS-Code-Settings-2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then this tab will open&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2ml0BUE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ufgqqxivrdaq8ifyqr7k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ml0BUE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ufgqqxivrdaq8ifyqr7k.png" alt="VS-Code-Settings-Tab"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2 - Search "Bracket Pair"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b4nQppBO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5l43uftajbjkdhj23rka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b4nQppBO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5l43uftajbjkdhj23rka.png" alt="VS-Code-Bracket-Pair"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3 - Select both of the options &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gWyR-TWn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpc5zll0etty0p2oxt7g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gWyR-TWn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vpc5zll0etty0p2oxt7g.png" alt="VS-Code-Bracket-Pair-Selected"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code view with colored bracket(HackTheBox Theme)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uh2AVTbJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9gdlnv4rw2c991mzvnmw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uh2AVTbJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9gdlnv4rw2c991mzvnmw.png" alt="code-view"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>JSON: All You Need to Know</title>
      <author>Aravind Sanjeev</author>
      <pubDate>Sat, 09 Oct 2021 20:19:25 +0000</pubDate>
      <link>https://dev.to/aravsanj/json-all-you-need-to-know-3fl6</link>
      <guid>https://dev.to/aravsanj/json-all-you-need-to-know-3fl6</guid>
      <description>&lt;p&gt;JSON stands for JavaScript Object Notation. It is a data-interchange format used to communicate between the server and the client. JSON is &lt;strong&gt;not&lt;/strong&gt; a language but a &lt;em&gt;syntax&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The name &lt;em&gt;&lt;strong&gt;JavaScript Object Notation&lt;/strong&gt;&lt;/em&gt; came from its deliberate similary to JavaScript objects. However, JSON is made keeping in mind data types like objects, dictionaries, arrays, lists from C-family of programming languages.&lt;/p&gt;

&lt;p&gt;The main features of JSON include,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Being lightweight&lt;/li&gt;
&lt;li&gt;Is text-based&lt;/li&gt;
&lt;li&gt;And language-independent&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-json"&gt;
  &lt;/a&gt;
  Why JSON?
&lt;/h2&gt;

&lt;p&gt;JSON has two structures,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Collection of key:value pairs&lt;/li&gt;
&lt;li&gt;An ordered list&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are structures heavily inspired by JavaScript objects and arrays. In fact you could take JSON objects and JSON arrays, paste it in a JavaScript file and get valid JavaScript. At the same time, similar data types exist in multitude of backend languages like Python, PHP, and Nodejs. This makes JSON very easy to parse. Remember, JSON is a string in the end and need to be parsed to an appropriate data type for programming languages to process.&lt;/p&gt;

&lt;p&gt;This is in contrast to XML, the predecessor of JSON. XML is also used to communicate between server and client. But JSON can be parsed directly in to a JavaScript object or array which is ready for use. XML is much harder to parse as it is syntactically different.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example of XML:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;presidents&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;president&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;firstName&amp;gt;&lt;/span&gt;George&lt;span class="nt"&gt;&amp;lt;/firstName&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;lastName&amp;gt;&lt;/span&gt;Bush&lt;span class="nt"&gt;&amp;lt;/lastName&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/president&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;president&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;firstName&amp;gt;&lt;/span&gt;Barack&lt;span class="nt"&gt;&amp;lt;/firstName&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;lastName&amp;gt;&lt;/span&gt;Obama&lt;span class="nt"&gt;&amp;lt;/lastName&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/president&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;president&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;firstName&amp;gt;&lt;/span&gt;Donald&lt;span class="nt"&gt;&amp;lt;/firstName&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;lastName&amp;gt;&lt;/span&gt;Trump&lt;span class="nt"&gt;&amp;lt;/lastName&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/president&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/presidents&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Example of JSON:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;"presidents"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"firstName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"George"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"lastName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Bush"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"firstName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Barack"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"lastName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Obama"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"firstName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Donald"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"lastName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Trump"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the above examples, you can take home three points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JSON is significantly smaller and easier to read &amp;amp; write&lt;/li&gt;
&lt;li&gt;A JavaScript developer don't need to be worried about learning extra syntax&lt;/li&gt;
&lt;li&gt;JSON can hold array of data (unlike XML)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-write-json"&gt;
  &lt;/a&gt;
  How to write JSON?
&lt;/h2&gt;

&lt;p&gt;We already saw a glimpse of how JSON looks like. If you want to be a serious developer, you must know how to write JSON. We write JSON in &lt;code&gt;.json&lt;/code&gt; file and its values must be one of the following data types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;li&gt;number&lt;/li&gt;
&lt;li&gt;object&lt;/li&gt;
&lt;li&gt;array&lt;/li&gt;
&lt;li&gt;boolean&lt;/li&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remember, all these are accepted data types for &lt;em&gt;values&lt;/em&gt; in JSON. JSON itself is fundamentally written in two structures discussed earlier. But, you can still write any of these data types in a &lt;code&gt;.json&lt;/code&gt; file and it is perfectly valid JSON that can be parsed.&lt;/p&gt;

&lt;p&gt;JSON written in key:value pairs,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"John"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"age"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"contact"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"john@email.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"phone"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"987654321"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"hobbies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"reading"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"gardening"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"gaming"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"isLoggedIn"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"employment"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;JSON written as an array of data,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"john"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;"contact"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"email"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"john@email.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"phone"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"987654321"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"reading"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"gardening"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"gaming"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Writing JSON shouldn't be hard if you know JavaScript. But it will take sometime before you get used to the right way of nesting data for your particular use case.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#parsing-json"&gt;
  &lt;/a&gt;
  Parsing JSON
&lt;/h2&gt;

&lt;p&gt;JSON is a string of data and needs to be parsed before using. In the frontend, JavaScript has an object called &lt;code&gt;JSON&lt;/code&gt; that contains methods for parsing and converting to JSON data.&lt;/p&gt;

&lt;p&gt;To parse a JSON data, we use &lt;code&gt;JSON.parse()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The return value of &lt;code&gt;JSON.parse()&lt;/code&gt; depends on the JSON string. It can be a string, number, object, array, boolean, or null. Mostly, you will be dealing with an object or an array.&lt;/p&gt;

&lt;p&gt;Here is an example of how &lt;code&gt;JSON.parse&lt;/code&gt; works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;JSON.parse(&lt;/span&gt;&lt;span class="s2"&gt;"{}"&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;JSON.parse(&lt;/span&gt;&lt;span class="s2"&gt;"true"&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;JSON.parse('&lt;/span&gt;&lt;span class="s2"&gt;"string"&lt;/span&gt;&lt;span class="err"&gt;')&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"string"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;JSON.parse('&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"false"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;')&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"false"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;JSON.parse(&lt;/span&gt;&lt;span class="s2"&gt;"null"&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;JSON.parse&lt;/code&gt; accepts a second value called &lt;code&gt;reviver&lt;/code&gt;. The &lt;code&gt;reviver&lt;/code&gt; is a function that can be used to transform the parsed value of JSON before being returned.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how I passed two parameters to the &lt;code&gt;reviver&lt;/code&gt; function. This is because the data is parsed into key:value pairs.&lt;/p&gt;

&lt;p&gt;For the backend, parsing JSON totally depends on the language of your choice. In python, there is a module called &lt;code&gt;json&lt;/code&gt; which you can import. In nodejs, you get access to the same &lt;code&gt;JSON&lt;/code&gt; object.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#converting-to-json"&gt;
  &lt;/a&gt;
  Converting to JSON
&lt;/h2&gt;

&lt;p&gt;To communicate, we also need to convert data back to JSON string. The same &lt;code&gt;JSON&lt;/code&gt; object can used in the frontend again. Since JavaScript and JSON has pretty much the same syntax, all what is remaining is to convert it to a string. For that, we use &lt;code&gt;JSON.stringify()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;JSON.stringify()&lt;/code&gt; method converts a JavaScript object or value to a JSON string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;JSON.stringify(&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"{}"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;JSON.stringify(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"true"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;JSON.stringify(&lt;/span&gt;&lt;span class="s2"&gt;"string"&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="s2"&gt;"string"&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;JSON.stringify(&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"false"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"false"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;JSON.stringify(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"null"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just like &lt;code&gt;JSON.parse()&lt;/code&gt; method, &lt;code&gt;JSON.stringify()&lt;/code&gt; also accepts a second parameter called &lt;code&gt;replacer&lt;/code&gt;. It can be used to alter the behavior of stringification process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here too, I have passed two parameters.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;stringify&lt;/code&gt; method even accepts a third parameter meant for spacing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;spaced&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;consol&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;spaced&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="cm"&gt;/* 
{
    "a": 1,
    "b": 2
}
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;\t&lt;/code&gt; is the tab character. The string has added a tab space infront of each key:value pair. This is just for improving readability.&lt;/p&gt;

&lt;p&gt;Again, for the backend, converting to JSON totally depends on the language of your choice. Python has a module called &lt;code&gt;json&lt;/code&gt;. In nodejs, you get access to same &lt;code&gt;JSON&lt;/code&gt; object.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#practicing-json"&gt;
  &lt;/a&gt;
  Practicing JSON
&lt;/h2&gt;

&lt;p&gt;To conclude, I would like to leave you with two resources that can help you practice JSON.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://jsonplaceholder.typicode.com/"&gt;JSON Placeholder&lt;/a&gt; has fake api endpoints with JSON data&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/json-server"&gt;json server&lt;/a&gt; can run a local json server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's about it. Thanks for reading.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title> 🍓Choosing the right headless Raspberry Pi </title>
      <author>Adam Crockett</author>
      <pubDate>Sat, 09 Oct 2021 19:55:30 +0000</pubDate>
      <link>https://dev.to/adam_cyclones/choosing-the-right-headless-raspberry-pi-3oga</link>
      <guid>https://dev.to/adam_cyclones/choosing-the-right-headless-raspberry-pi-3oga</guid>
      <description>&lt;p&gt;Headless is a blanket term for anything without a GUI.&lt;/p&gt;

&lt;p&gt;In that sense you intend to not use a monitor, mouse and keyboard and just have an SSH server running. I'm not going to go into that specially - but I will talk a little about hardware.&lt;/p&gt;

&lt;p&gt;If you are here you probably like JavaScript so I'm gonna assume that you want to do a little nodejs on your pi? How about saving some money too?&lt;/p&gt;

&lt;p&gt;There are a few options I personally think that fit the above criteria pi 3rd generation is great choice. Not as pokey as the gen 4 but still great. 512mb ram and quad core ARM something something - it will run nice and quickly. But it's still quite pricey if you get the default model B plus so here's the money saving tip.&lt;/p&gt;

&lt;p&gt;The model A plus is actually pretty much the same as the model B plus but with less stuff. Less USB (use a hub), no ethernet (use a hat) it's also smaller in a nice square foot print which will make you laugh every time you look at it, "that's a computer! No way..." And although that's true for the model B plus it's even more so for the model A plus.&lt;br&gt;
The best bit, the model A plus is a fraction of the price.&lt;br&gt;
It might struggle to run a desktop but you can always use raspberry pi OS lite which fixes that because it's shell only.&lt;/p&gt;

&lt;p&gt;Lastly for my application I will be sticking a battery onto it and running a TCP server to run an RC car with pi onboard, the a plus's size is what sold it to me but I have to say this is a brilliant little computer worth your time.&lt;/p&gt;

&lt;p&gt;Regards, there is no raspberry emoji 🍓&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Introducing Sapling, A VS Code Extension For Traversing Your React Component Hierarchy</title>
      <author>Jordan H</author>
      <pubDate>Sat, 09 Oct 2021 19:29:39 +0000</pubDate>
      <link>https://dev.to/jocella/introducing-sapling-a-vs-code-extension-for-traversing-your-react-component-hierarchy-2bcb</link>
      <guid>https://dev.to/jocella/introducing-sapling-a-vs-code-extension-for-traversing-your-react-component-hierarchy-2bcb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#react-is-a-powerful-tool-for-building-your-frontend-applications-but-at-scale-navigating-the-hierarchy-of-your-components-may-be-painful-sapling-aims-to-change-that"&gt;
  &lt;/a&gt;
  React is a powerful tool for building your frontend applications, but at scale navigating the hierarchy of your components may be painful. &lt;a href="https://marketplace.visualstudio.com/items?itemName=team-sapling.sapling"&gt;Sapling&lt;/a&gt; aims to change that.
&lt;/h2&gt;

&lt;p&gt;Modern React applications are huge. Facebook is built with more than 50,000 components. Even the parent-child relationships and the passed-down props of fairly simple apps can become unintuitive to manage. Good file organization can help, but it doesn't reflect the component structure that stands at the core of your application's functionality.&lt;br&gt;
When you need to determine which props are available to the component you're working on, you need to navigate to that component's parent file. Even when your organizational paradigm clusters similar components together, the hierarchical relationships remain unclear, and you still have to find the exact source of any props you've passed down. The industry standard to this problem is great file organization, but there is still no simple way to remind yourself of the big picture at a glance. We built Sapling to change that.&lt;/p&gt;

&lt;p&gt;Sapling is a VS Code Extension that creates an interactive component dependency tree embedded within the VS Code sidebar. Each node on the tree provides a summary of available props and a nav button to quickly open the corresponding file. Its straightforward UI makes it easy to read and intuitive to use, and its highly responsive behavior immediately updates every time you save. Sapling's visual cues are also easy to follow: the node that corresponds to your workspace's active file will have bold text, and if Sapling finds a Javascript syntax error or faulty import statement, it highlights the broken component with a warning color. There is even a convenient icon that will tell you which components you've connected to the Redux store.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--At5eFnXA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekkmkde9i4066pkg5014.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--At5eFnXA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekkmkde9i4066pkg5014.png" alt="An image showing a hierarchy tree of React components in the VS Code sidebar."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sapling was designed with the user in mind. Sapling has a powerful memory, and will retain its expanded state even between workspace sessions; when your application is a couple hundred components large, you don't have to manually expand the tree to your current working component. Moreover, if your application uses third-party components like Material-UI or React-Router, you can choose whether Sapling should display them by toggling them on and off in VS Code's Extension settings. For added convenience, Sapling can be built from any React file in your client, and if you'd prefer to simplify the current display, Sapling provides a helpful status bar button called "Build Tree" that will rebuild the tree with the active file as the root.&lt;/p&gt;

&lt;p&gt;So how does Sapling do all this? Sapling is built using the VS Code Extension API, along with the VS Code Webview API, integrating it seamlessly into your VS Code IDE.&lt;/p&gt;

&lt;p&gt;When you select the root file for your component hierarchy, Sapling reads it and uses &lt;a href="https://babeljs.io/docs/en/babel-parser"&gt;@babel/parser&lt;/a&gt; to create an abstract syntax tree (AST) from the file contents. Sapling then processes the AST, detecting the child React components of the root file, the files these components are defined in, their props etc. Sapling then recursively parses the child component files, generating a node tree data structure that represents the component hierarchy of your React application.&lt;/p&gt;

&lt;p&gt;From there, the node tree is handed to the Sapling Webview - a web application that is itself built using React components. The Webview generates the interactive hierarchy tree in the VS Code sidebar, allowing you to navigate your React application in a much more intuitive way than the traditional VS Code file browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OxMJGqEt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fy8rjdngepqdbq4b1jkh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OxMJGqEt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fy8rjdngepqdbq4b1jkh.png" alt="An image showing the user hovering over an icon to display a list of props available at that component."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sapling uses the same transcompiler used by companies like Discord and Kickstarter to parse React components written with ES6 imports, JSX tags, Typescript and TSX tags, and elements invoked using the 'component' or 'child' property of React Router components. This gives it both flexibility and robustness, necessary attributes of an open source product that has even more features in mind for the future. Sapling is planning on accommodating components imported and invoked as arrays, and on providing an indication of prop inheritance to help developers keep track of attributes passed down with changed labels. We also know that using path aliases, for example in a bundler like webpack, is very useful for large and complex codebases, so we are looking to have Sapling resolve these paths.&lt;/p&gt;

&lt;p&gt;More generally, although the VS Code IDE is one of the most popular IDEs among developers, those who prefer other IDEs shouldn't be left out. Similarly, while React is certainly the most popular front end library, frameworks such as Angular and Vue are also used extensively. We would love to be able to provide intuitive component hierarchy navigation for developers using other popular frameworks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you want to install the extension&lt;/strong&gt;, search for Sapling in your VS Code Extensions side panel, or go directly to the &lt;a href="https://marketplace.visualstudio.com/items?itemName=team-sapling.sapling"&gt;Sapling page on the VS Code Marketplace&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you are interested in contributing to this open source product&lt;/strong&gt;, visit our &lt;a href="https://github.com/oslabs-beta/sapling"&gt;Sapling GitHub page&lt;/a&gt; to get started!&lt;/p&gt;

&lt;p&gt;Follow the members of Team Sapling at the links below:&lt;br&gt;
&lt;a href="https://github.com/charlesgutwirth"&gt;Charles Gutwirth&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/jo-cella"&gt;Jordan Hisel&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/labaird"&gt;Lindsay Baird&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/PLCoster"&gt;Paul Coster&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cover photo by &lt;a href="https://unsplash.com/@jan_huber?utm_source=medium&amp;amp;utm_medium=referral"&gt;Jan Huber&lt;/a&gt; on &lt;a href="https://unsplash.com"&gt;Unsplash&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>opensource</category>
      <category>showdev</category>
    </item>
    <item>
      <title>🏝️ Tourism with NFT on BSC - On Pre-Sale until December 31st 2021 - Airdrop Ongoing</title>
      <author>Cryptourism.io</author>
      <pubDate>Sat, 09 Oct 2021 19:26:30 +0000</pubDate>
      <link>https://dev.to/cryptourism/tourism-with-nft-on-bsc-on-pre-sale-until-december-31st-2021-airdrop-ongoing-2mf2</link>
      <guid>https://dev.to/cryptourism/tourism-with-nft-on-bsc-on-pre-sale-until-december-31st-2021-airdrop-ongoing-2mf2</guid>
      <description>&lt;p&gt;CTR on BSC Explorer&lt;/p&gt;

&lt;p&gt;🚀 A Decentralized Tourism Investment&lt;/p&gt;

&lt;p&gt;Offering the power of exceptional customer care to become the industry leader of luxury rural tourism in Portugal. We are a legally approved business with profit share divided equally between the token holders, discounts up to 20% when paying with CTR and the Cryptourism NFTs with free nights and gifs all backed by Blockchain using CTR Token completely verifiable.&lt;/p&gt;

&lt;p&gt;🚀 Are you ready to take part in real estate investment auto sustainable? We fight for humanity!&lt;/p&gt;

&lt;p&gt;Join us in the first decentralized Tourism Investment, earn money in the process of saving the world and at same time using it to have a luxury holidays!!&lt;/p&gt;

&lt;p&gt;👌 Join now at the link below for a chance to win a Pre-Sale NFT with 3 nights Free Access for Free airdropped to your address!&lt;/p&gt;

&lt;p&gt;Register for the airdrop and qualify automatically for our First NFT.&lt;/p&gt;

&lt;p&gt;Presale: $175k until : CTR BSC address: 0x35af446f0e2b1d691530f6146ec0872a94d99114&lt;/p&gt;

&lt;p&gt;🔵 Pre-Sale &amp;amp; Community Airdrop Competition with NFT Detail:&lt;/p&gt;

&lt;p&gt;Open: 1 PM UTC SEPTEMBER 1ST 2021&lt;/p&gt;

&lt;p&gt;Close: 1 PM UTC SEPTEMBER 31ST 2021&lt;/p&gt;

&lt;p&gt;⚪️ Find out more about us on our official social medias!&lt;/p&gt;

&lt;p&gt;✅ Website: &lt;a href="https://cryptourism.io/"&gt;https://cryptourism.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;✅ Telegram: &lt;a href="https://t.me/cryptourismCTR"&gt;https://t.me/cryptourismCTR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;✅ Twitter: &lt;a href="https://twitter.com/Cryptourism_"&gt;https://twitter.com/Cryptourism_&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;✅ Facebook: &lt;a href="https://www.facebook.com/cryptourism.io"&gt;https://www.facebook.com/cryptourism.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;✅ Instagram: &lt;a href="https://www.instagram.com/cryptourism/"&gt;https://www.instagram.com/cryptourism/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;✅ Medium: &lt;a href="https://medium.com/@cryptourism"&gt;https://medium.com/@cryptourism&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;✅ BitcoinTalk: &lt;a href="https://bitcointalk.org/index.php?topic=5357889.msg57842497#msg57842497"&gt;https://bitcointalk.org/index.php?topic=5357889.msg57842497#msg57842497&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;✅ Reddit: &lt;a href="https://www.reddit.com/user/cryptourism/"&gt;https://www.reddit.com/user/cryptourism/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;✅ LinkedIn: &lt;a href="https://www.linkedin.com/company/cryptourism"&gt;https://www.linkedin.com/company/cryptourism&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;✅ Youtube: &lt;a href="https://www.youtube.com/channel/UCBVkzlx1R-3IVLnjNbgal2A"&gt;https://www.youtube.com/channel/UCBVkzlx1R-3IVLnjNbgal2A&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;✅ Quora: &lt;a href="https://www.quora.com/profile/Cryptourism-io"&gt;https://www.quora.com/profile/Cryptourism-io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;✅ GitHub: &lt;a href="https://github.com/Cryptourism"&gt;https://github.com/Cryptourism&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;✅ Contract: &lt;a href="https://bscscan.com/token/0x35af446f0e2b1d691530f6146ec0872a94d99114"&gt;https://bscscan.com/token/0x35af446f0e2b1d691530f6146ec0872a94d99114&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cryptourism</category>
      <category>tourism</category>
      <category>crypto</category>
      <category>blockchain</category>
    </item>
    <item>
      <title>Application Security Engineer journey</title>
      <author>Bour Abdelhadi</author>
      <pubDate>Sat, 09 Oct 2021 18:11:33 +0000</pubDate>
      <link>https://dev.to/bscript/application-security-engineer-5dn8</link>
      <guid>https://dev.to/bscript/application-security-engineer-5dn8</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;When you start working as an application security engineer, you'll expect to find straightforward tasks to do. But this is not the case because each company has its vision and strategies to handle data security, which can let us infer that every organization's security maturity may differ from one to another.&lt;/p&gt;

&lt;p&gt;Viewing data breaches and cyber incidents all the time proves that no one out there has a mature cyber security program.&lt;/p&gt;

&lt;p&gt;If you are already working in this field, I imagine that you sometimes feel that you're achieving nothing and you are more invisible inside the organization. The bigest challenge I see is how to increase your visibility and have more transparency with your manager and the rest of your co-workers.&lt;/p&gt;

&lt;p&gt;In this article, I'd like to share what I've learned while working in this field.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#understand-the-business-amp-the-product-of-the-company"&gt;
  &lt;/a&gt;
  Understand the business &amp;amp; the product of the company.
&lt;/h3&gt;

&lt;p&gt;Before jumping into security, you should know the product you are supporting inside out. If you don't understand what's behind the scene, you can't be expected to find vulnerabilities and flaws.&lt;/p&gt;

&lt;p&gt;How to do that?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read the documentation.&lt;/li&gt;
&lt;li&gt;Ask questions, and don't be shy or arrogant.&lt;/li&gt;
&lt;li&gt;Shadowing can sometimes help to accelerate the learning process.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#read-or-contribute-to-the-work-processes-and-procedures"&gt;
  &lt;/a&gt;
  Read or contribute to the work processes and procedures.
&lt;/h3&gt;

&lt;p&gt;Processes &amp;amp; procedures provide a way to understand:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What needs to be done and why?&lt;/li&gt;
&lt;li&gt;How do those processes need to be achieved, who performs them, what is the purpose?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ask for these documents, in the beginning to avoid asking unnecessary questions in the future. &lt;/p&gt;

&lt;p&gt;Keep in mind that your contribution will make you more visible, and it's a good sign that you understand how things are working inside.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#know-how-to-test-your-product-effectively"&gt;
  &lt;/a&gt;
  Know how to test your product effectively.
&lt;/h3&gt;

&lt;p&gt;I usually create a test plan before beginning my journey in finding vulnerabilities and flaws. To do that, ask your self few questions like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are you following the proper process?&lt;/li&gt;
&lt;li&gt;What are you testing (determine the scope)?&lt;/li&gt;
&lt;li&gt;Do you have all the resources you need to perform this testing?&lt;/li&gt;
&lt;li&gt;Is there any timeframe I need to respect to deliver my report?&lt;/li&gt;
&lt;li&gt;Who is the audience (C-level executives, software engineers, etc.)?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you get relevant responses to these questions, start diving into the SDLC to understand the workflow and see how you fit in because you should be part of the development lifecycle(design, requirements, etc.). Thus you can integrate security in each stage (read this &lt;a href="https://www.oreilly.com/library/view/agile-application-security/9781491938836/"&gt;Agile Application Security book&lt;/a&gt; and thank me later ;).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you are involved in the early stage development phase, consider using threat modeling to help your team to quantify risks and vulnerabilities&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automation-is-a-good-thing"&gt;
  &lt;/a&gt;
  Automation is a good thing.
&lt;/h3&gt;

&lt;p&gt;When you start working with tools like SAST, IAST, DAST, SCA, etc., find a way to integrate these tools in the build cycle / continuous integration, so you'll be able to check your source code for known vulnerabilities in case of new commits.&lt;/p&gt;

&lt;p&gt;The results you get from these tools require human hands to review and validate the reported issues. You need to use a &lt;em&gt;vulnerability management system&lt;/em&gt; to maintain product and application information, triage vulnerabilities, and push findings to systems like JIRA and Slack. e.g.:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nessus.&lt;/li&gt;
&lt;li&gt;IBM Security QRadar.&lt;/li&gt;
&lt;li&gt;DefectDojo.&lt;/li&gt;
&lt;li&gt;AlienVault USM (from AT&amp;amp;T Cybersecurity).&lt;/li&gt;
&lt;li&gt;SaltStack.&lt;/li&gt;
&lt;li&gt;BurpSuite.&lt;/li&gt;
&lt;li&gt;Acunetix by Invicti.&lt;/li&gt;
&lt;li&gt;Qualys Cloud Platform.&lt;/li&gt;
&lt;li&gt;InsightVM (Nexpose).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Use a standard (OWASP, NIST, OSSTM, etc.)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#work-with-thirdparty-pentesters"&gt;
  &lt;/a&gt;
  Work with third-party pen-testers
&lt;/h3&gt;

&lt;p&gt;Some companies prefer to work with third-party Pentesting companies to get a second validation and excellent report to show to the auditors ;). So you may be invited to attend some meetings to share your experience and help the external testers to determine the critical assets, etc.&lt;/p&gt;




&lt;p&gt;...There are still many things to talk about; I will edit this article when I have more time.&lt;/p&gt;




&lt;p&gt;If you want to succeed in this job, consider working collaboratively with the rest of the team.&lt;/p&gt;




&lt;p&gt;You can reach me out on LinkedIn if you have questions &lt;a href="https://www.linkedin.com/in/bohr/"&gt;@Bour Abdelhadi&lt;/a&gt;&lt;/p&gt;

</description>
      <category>security</category>
      <category>programming</category>
      <category>productivity</category>
      <category>career</category>
    </item>
    <item>
      <title>Ema-Johnia {day-30}</title>
      <author>Al Siam</author>
      <pubDate>Sat, 09 Oct 2021 17:59:20 +0000</pubDate>
      <link>https://dev.to/alsiamworld/ema-johnia-day-30-fd1</link>
      <guid>https://dev.to/alsiamworld/ema-johnia-day-30-fd1</guid>
      <description>&lt;h1&gt;
  &lt;a href="#100daysofcode-day-30"&gt;
  &lt;/a&gt;
  100daysofcode {Day - 30}
&lt;/h1&gt;

&lt;p&gt;Today's learning about JavaScript Localstorage. I've created a shopping cart with ReactJs and if you add products to the cart it will save the data to local storage and you will see the products on the cart after browser refresh or exit.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://ema-johnia.netlify.app"&gt;https://ema-johnia.netlify.app&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#learning-javascript-programminglife-react"&gt;
  &lt;/a&gt;
  learning #javascript #programminglife #react
&lt;/h1&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>react</category>
      <category>programming</category>
    </item>
    <item>
      <title>Concepts to Know To Get A Job as a Django Developer</title>
      <author>Joseph Mania</author>
      <pubDate>Sat, 09 Oct 2021 17:58:50 +0000</pubDate>
      <link>https://dev.to/maniamartial/concepts-to-know-to-get-a-job-as-a-django-developer-55fl</link>
      <guid>https://dev.to/maniamartial/concepts-to-know-to-get-a-job-as-a-django-developer-55fl</guid>
      <description>&lt;p&gt;Database Design&lt;/p&gt;

&lt;p&gt;You have to understand the Django models. Have the SQL concepts before learning this. You have to relate to the models and relationships they carry. Master how Boolean fields, integers, Charfield, foreign keys work. There must be a database for any dynamic website.&lt;/p&gt;

&lt;p&gt;Authentication for Authorization&lt;/p&gt;

&lt;p&gt;The more time you spend in this section, you’re going to learn more staff. Grants different access to clients, staff, and the admin. Please make sure each of them is directed to a specific page upon login. This is like a database administrator. You are the one who controls the whole system. Authentication involves signing in and logging in. Let each category of people have a specific role they play. Play around and see how the session works. Know how validation is important. Then expand to third-party libraries. As you grow, you’re going to understand how social authentication works.&lt;/p&gt;

&lt;p&gt;Flow of data&lt;/p&gt;

&lt;p&gt;Understand how data is fetched and posted on the templates. Django has more than enough queries. They kinda relate to the SQL, so you will have an edge if you understand the relationship between the two. Learn how to retrieve data. This is where you are going to be creating your views. It’s going to take a lot of time before you grasp the concepts.&lt;/p&gt;

&lt;p&gt;Static and media file configuration&lt;/p&gt;

&lt;p&gt;Understand the setup in local development and production. They are arranged differently. Locally, the media will be in the actual folder. In production, the files are stored on another server. This is where AWS comes in. Digital ocean spaces are also good. Understand the protocol. Know how they are pushed. White noise is a package that might aid in the production process.&lt;/p&gt;

&lt;p&gt;Deployment&lt;/p&gt;

&lt;p&gt;I can’t lie. I wasted a certain startup for several days because the deployment process was hectic for me. Of course, I was a beginner. There are various ways you can deploy. You may decide to use Heroku CLI, GitHub, or putting your files in a container. It’s good to know how the Django server is done. By doing this, you are going to understand the architecture of Django. It’s good to work with a team that has already deployed the system. A startup can give you much experience.&lt;/p&gt;

&lt;p&gt;Research&lt;/p&gt;

&lt;p&gt;The field has a large community that contributes to developing various packages. Do more research and learn daily. Use stack overflow to your maximum. Explore the free staff provided by the Django community. Google is alive and everything you want to learn is available.&lt;/p&gt;

&lt;p&gt;Be uncomfortable and comfortable&lt;/p&gt;

&lt;p&gt;It’s okay to feel uncomfortable at some point. It is normal to feel in your comfort zone. Sometimes programming is just hectic. A bug might make you feel like you want to be quiet. But that’s normal.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Understanding the Modern Web Stack: Webpack - DevServer, React &amp; Typescript</title>
      <author>Alex E</author>
      <pubDate>Sat, 09 Oct 2021 17:58:46 +0000</pubDate>
      <link>https://dev.to/alexeagleson/understanding-the-modern-web-stack-webpack-devserver-react-typescript-4b9b</link>
      <guid>https://dev.to/alexeagleson/understanding-the-modern-web-stack-webpack-devserver-react-typescript-4b9b</guid>
      <description>&lt;p&gt;&lt;em&gt;(This tutorial is written using &lt;a href="https://webpack.js.org/blog/2020-10-10-webpack-5-release/"&gt;webpack v5&lt;/a&gt; however the general concepts will apply to any version)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#recap"&gt;Recap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#initializing-the-project"&gt;Initializing the Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#source-maps"&gt;Source Maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#webpack-devserver"&gt;Webpack DevServer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#react-and-jsx"&gt;React and JSX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#typescript"&gt;Typescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wrapping-up"&gt;Wrapping Up&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;p&gt;This tutorial presumes you are already familiar with the basics of webpack outlined in this tutorial:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-webpack-part-1-2mn1"&gt;Understanding the Modern Web Stack: Webpack - The Basics&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We demonstrated how we can importing individual files and functions from larger libraries without the need to carry along code we aren't using.&lt;/p&gt;

&lt;p&gt;This tutorial introduces you to source maps, webpack's DevServer, as well as how to introduce both React and Typescript into a webpack project.&lt;/p&gt;

&lt;p&gt;So before we dive in, let's get our working environment set up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initializing-the-project"&gt;
  &lt;/a&gt;
  Initializing the Project
&lt;/h2&gt;

&lt;p&gt;Create the following directory structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;root
|   webpack.config.js
└───src
│   │   script.js
|   |   index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;src/index.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Webpack Example&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;src/script.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;webpack.config.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HtmlWebpackPlugin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;html-webpack-plugin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/script.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HtmlWebpackPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/index.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now install your dependencies, and run the webpack command to generate your &lt;code&gt;dist&lt;/code&gt; folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
npm &lt;span class="nb"&gt;install &lt;/span&gt;webpack webpack-cli html-webpack-plugin &lt;span class="nt"&gt;--save&lt;/span&gt; dev
npx webpack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you can successfully serve your &lt;code&gt;dist&lt;/code&gt; folder and see the &lt;em&gt;Welcome&lt;/em&gt; message then you're ready to start the tutorial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#source-maps"&gt;
  &lt;/a&gt;
  Source Maps
&lt;/h2&gt;

&lt;p&gt;A &lt;a href="https://developer.mozilla.org/en-US/docs/Tools/Debugger/How_to/Use_a_source_map"&gt;source map&lt;/a&gt; is a type of file (or annotations within a file) that provides information to other tools about the origin of source code before transformations occurred.&lt;/p&gt;

&lt;p&gt;For example if we run webpack on even a single line &lt;code&gt;.js&lt;/code&gt; file, the bundled version will include a small amount of additional code injected by webpack.  This means that the code you wrote on &lt;code&gt;line 1&lt;/code&gt; may actually appear on &lt;code&gt;line 10&lt;/code&gt; or &lt;code&gt;line 10000&lt;/code&gt; of your bundle.&lt;/p&gt;

&lt;p&gt;This makes it hard to locate errors when your browser reports the error on a different line based on the bundle it's running, rather than the original line in your source code.&lt;/p&gt;

&lt;p&gt;Source maps solve this problem for us.  Let's demonstrate how.&lt;/p&gt;

&lt;p&gt;First we will add an error to our &lt;code&gt;script.js&lt;/code&gt; file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;src/script.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Something happened!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run &lt;code&gt;npx webpack&lt;/code&gt; and take a look at our "error" program.  Serve the &lt;code&gt;dist&lt;/code&gt; directory and look at the browser's &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/console"&gt;development console&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iTgXHNJR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/IfR2LEy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iTgXHNJR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/IfR2LEy.png" alt="Without Source Maps"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice that webpack is reporting the error on line 3 of &lt;code&gt;main.js&lt;/code&gt; (your line number could be different).  &lt;/p&gt;

&lt;p&gt;This is technically correct since that's where webpack has placed the &lt;code&gt;throw Error&lt;/code&gt; code on the output &lt;code&gt;main.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;To configure it to report the correct line numbers add the following line to your webpack config:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;webpack.config.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="na"&gt;devtool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;inline-source-map&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when we run &lt;code&gt;npx webpack&lt;/code&gt; and look at the console:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--43bHi6Gy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/bVwV1Xb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--43bHi6Gy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/bVwV1Xb.png" alt="With Source Maps"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The error is now correctly being reported where it is actually located in our code!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#webpack-devserver"&gt;
  &lt;/a&gt;
  Webpack DevServer
&lt;/h2&gt;

&lt;p&gt;webpack's &lt;a href="https://webpack.js.org/configuration/dev-server/"&gt;DevServer&lt;/a&gt; is an amazing tool to speed up your development time by giving you instant reloading and instant feedback to your changes.  &lt;/p&gt;

&lt;p&gt;DevServer will automatically &lt;a href="https://webpack.js.org/configuration/watch/"&gt;watch&lt;/a&gt; your files for changes and update your bundle automatically when you save.  While using live server the bundle lives in memory (RAM) rather than the &lt;code&gt;dist&lt;/code&gt; folder so it is able to update much faster.&lt;/p&gt;

&lt;p&gt;Let's configure DevServer and give it a try.  We'll start by creating a JS file we can test.  Remove the &lt;code&gt;throw Error&lt;/code&gt; line and update &lt;code&gt;script.js&lt;/code&gt; to match the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;src/script.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we add a &lt;code&gt;devServer&lt;/code&gt; property to our webpack config:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;webpack.config.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="na"&gt;devServer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;static&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./dist&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we install DevServer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; webpack-dev-server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally we run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx webpack serve &lt;span class="nt"&gt;--open&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default webpack will serve your app on port 8080. The &lt;code&gt;--open&lt;/code&gt; flag will automatically open your browser to the page for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OVSQPtqW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/SgO32iy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OVSQPtqW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/SgO32iy.png" alt="Webpack DevServer Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Try changing the &lt;code&gt;Welcome&lt;/code&gt; string to anything else in &lt;code&gt;script.js&lt;/code&gt; and you'll see that the page updates immediately. This creates an extremely smooth development environment for you with instant feedback.&lt;/p&gt;

&lt;p&gt;Next we will look at how to introduce React and JSX.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-and-jsx"&gt;
  &lt;/a&gt;
  React and JSX
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;(This tutorial uses &lt;a href="https://reactjs.org/blog/2020/10/20/react-v17.html"&gt;React v17&lt;/a&gt;, though concepts are the same for any version)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This section of the tutorial assumes you are already familiar with the basics of React and JSX.  If you need a refresher the &lt;a href="https://reactjs.org/docs/getting-started.html"&gt;React documentation&lt;/a&gt; is the best place to start.  &lt;/p&gt;

&lt;p&gt;Our goal in this section will be to show you how to configure webpack to transform your JSX into regular Javascript code.  webpack relies on a &lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-webpack-part-2-49bj#loaders"&gt;loader&lt;/a&gt; for Babel to accomplish this.  If you're not familiar with how Babel works, this tutorial will cover everything you need to know:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/building-a-modern-web-stack-babel-3hfp"&gt;Understanding the Modern Web Stack: Babel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our first step will be to install React and update our &lt;code&gt;script.js&lt;/code&gt; file to use create a React component.  Begin by installing React with this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;react react-dom &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we update our &lt;code&gt;script.js&lt;/code&gt; file to use JSX.  Since JSX is a special syntax on top of Javascript, and not valid Javascript on its own, it requires a different file extension.  &lt;/p&gt;

&lt;p&gt;Delete &lt;code&gt;script.js&lt;/code&gt; and create &lt;code&gt;script.jsx&lt;/code&gt; in the same location with this code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;src/script.jsx&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Welcome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Welcome&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mountingNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Welcome&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nx"&gt;mountingNode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are familiar with React you can see this mounts our component onto a root node with an &lt;code&gt;id="root"&lt;/code&gt;.  Update our &lt;code&gt;index.html&lt;/code&gt; to include it:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;src/index.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Webpack Example&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"root"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also need to install the packages that will run the transformations for us:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;babel-loader @babel/core @babel/preset-env @babel/preset-react &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above list you can see all the standard pieces of Babel that we learned about in the Babel tutorial.  &lt;/p&gt;

&lt;p&gt;The only new one is &lt;code&gt;babel-loader&lt;/code&gt; which is the loader for webpack which runs babel as part of the bundling process.&lt;/p&gt;

&lt;p&gt;Now let's update our webpack config to use babel loader:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;webpack.config.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/script.jsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;m&lt;/span&gt;&lt;span class="se"&gt;?&lt;/span&gt;&lt;span class="sr"&gt;jsx$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;node_modules|bower_components&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;presets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@babel/preset-env&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@babel/preset-react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;automatic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;optimization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;nodeEnv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's a few things to unpack here so let's do so one at a time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;entry&lt;/strong&gt;&lt;/em&gt;: Has been updated to use the &lt;code&gt;JSX&lt;/code&gt; extension rather than &lt;code&gt;JS&lt;/code&gt;.  Don't miss this small change as it is a common source of errors.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;rules&lt;/strong&gt;&lt;/em&gt;: We have a regular expression to ensure babel loader is run on any JSX files in the project.  If we are using React v17 or later then we need the &lt;code&gt;{ runtime: "automatic" }&lt;/code&gt; which tells Babel to include the JSX runtime in our bundle so we don't need to &lt;code&gt;import React&lt;/code&gt; in our JSX code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;optimization&lt;/strong&gt;&lt;/em&gt;: This is another key source of errors.  React requires &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; to be defined (set to either &lt;em&gt;development&lt;/em&gt; or &lt;em&gt;production&lt;/em&gt;) similar to webpack.  We will set it to &lt;em&gt;development&lt;/em&gt; for now.  If you see &lt;code&gt;process is undefined&lt;/code&gt; error it likely means you forgot this value.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now run either the &lt;code&gt;npx webpack serve --open&lt;/code&gt; command (or &lt;code&gt;npx webpack&lt;/code&gt; if you want to output to disk and serve it yourself).  If everything has worked smoothly you'll see your &lt;em&gt;Welcome&lt;/em&gt; page again.&lt;/p&gt;

&lt;p&gt;Congratulations!  You've now implemented React and JSX support into a webpack configuration.  &lt;/p&gt;

&lt;p&gt;Our final section will show how to implement Typescript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typescript"&gt;
  &lt;/a&gt;
  Typescript
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;(This tutorial uses &lt;a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-4.html"&gt;Typescript v4.4&lt;/a&gt;, though concepts are the same for any version)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This section of the tutorial assumes you are already familiar with the basics of Typescript.  If you need a refresher the &lt;a href="https://www.typescriptlang.org/docs/"&gt;Typescript documentation&lt;/a&gt; is the best place to start.  &lt;/p&gt;

&lt;p&gt;It can often be tricky and confusing for newcomers to understand how to integrate Typescript into a webpack configuration, particularly if you are also using JSX and React.&lt;/p&gt;

&lt;p&gt;It's the reason tools like &lt;a href="https://reactjs.org/docs/create-a-new-react-app.html#create-react-app"&gt;Create React App&lt;/a&gt; are so popular, because they handle all that configuration for you.  But that can be problematic when you need to configure something, and that's why this tutorial exists.&lt;/p&gt;

&lt;p&gt;Typescript, webpack and babel can sometimes overlap in the features they offer.  In this tutorial we will take a look at each one with the aim of understanding what they are doing, so you will have a better understanding of the best way to manage them yourself.&lt;/p&gt;

&lt;p&gt;We'll begin by installing Typescript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install typescript --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After we have installed Typescript, we need to initialize it within our project.  That will automatically create a &lt;code&gt;tsconfig.json&lt;/code&gt; file where we can configure Typescript options similar to our webpack config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx tsc &lt;span class="nt"&gt;--init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(Be careful with this syntax, notice we are using the &lt;code&gt;npx&lt;/code&gt; package runner like we do with webpack.  &lt;code&gt;tsc&lt;/code&gt; is the name of the command line program for Typescript)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Next let's add some Typescript syntax to our &lt;code&gt;script.jsx&lt;/code&gt; file.  SImilar to the transition to JSX, Typescript also requires its own format to indicate a file is using Typescript.&lt;/p&gt;

&lt;p&gt;The base extension for Typescript files is &lt;code&gt;.ts&lt;/code&gt;, however if you are using JSX, the extension is &lt;code&gt;.tsx&lt;/code&gt;.  Let's update our file extension and add some code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;script.tsx&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- NEW&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Welcome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Welcome&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mountingNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Welcome&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nx"&gt;mountingNode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If using an IDE like VS Code you may notice a couple of errors being highlighted.  The first is the ReactDOM does not include types.  The second errors will highlight your JSX syntax.  That's because Typescript is not configured to handle JSX by default, we have to configure it for that.&lt;/p&gt;

&lt;p&gt;We'll begin by providing type info for ReactDOM.&lt;/p&gt;

&lt;p&gt;Libraries and packages that don't come bundled with their types automatically often have type packages available in &lt;a href="https://github.com/DefinitelyTyped/DefinitelyTyped"&gt;Definitely Typed&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So to import those types from that library for ReactDOM we run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @types/react-dom &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will fix out missing types for ReactDOM.  Next let's configure Typescript to handle JSX.&lt;/p&gt;

&lt;p&gt;Understanding the all the options in &lt;code&gt;tsconfig.json&lt;/code&gt; is beyond the scope of this tutorial, but we are spoiled now since they have implemented a system of automatically generated comments within the generated file.  If that isn't enough you can find &lt;a href="https://aka.ms/tsconfig.json"&gt;full tsconfig documentation here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We need to set the &lt;code&gt;jsx&lt;/code&gt; property in our &lt;code&gt;tsconfig&lt;/code&gt; file.  The default value is &lt;code&gt;preserve&lt;/code&gt;.  WHat this means is that Typescript will completely ignore the JSX.  It will output a &lt;code&gt;.jsx&lt;/code&gt; file instead of a &lt;code&gt;.js&lt;/code&gt; file and leave it to you to use another tool to remove the JSX.  &lt;/p&gt;

&lt;p&gt;Let's test that out.  Update your &lt;code&gt;tsconfig&lt;/code&gt; file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tsconfig.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"jsx"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"preserve"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run &lt;code&gt;npx tsc&lt;/code&gt;.  You will see in your &lt;code&gt;src&lt;/code&gt; directory that a &lt;code&gt;script.jsx&lt;/code&gt; file is generated.  This is your &lt;code&gt;script.tsx&lt;/code&gt; file with the types checked and remove.  Great!  We're making good progress.&lt;/p&gt;

&lt;p&gt;Feel free to experiment with different settings of &lt;code&gt;jsx&lt;/code&gt;.  For example &lt;code&gt;react&lt;/code&gt; will remove your JSX for you and output a &lt;code&gt;.js&lt;/code&gt; file, but it will presume you are importing React.  A value of &lt;code&gt;react-jsx&lt;/code&gt; will use the new JSX runtime in React v17 so you don't need to import.&lt;/p&gt;

&lt;p&gt;It makes little difference (as far as I know) which tool you use to transform JSX.  We will leave it as &lt;code&gt;preserve&lt;/code&gt; for Babel since we already configured Babel to handle JSX in the previous section.  &lt;/p&gt;

&lt;p&gt;If there is a good reason to choose one over the other, feel free to let us know in the comments!&lt;/p&gt;

&lt;p&gt;At this point you can remove any &lt;code&gt;script.js&lt;/code&gt; or &lt;code&gt;script.jsx&lt;/code&gt; files you generated while testing.  We only need our &lt;code&gt;script.tsx&lt;/code&gt; source file.  &lt;/p&gt;

&lt;p&gt;We have two options for adding a Typescript stage to our webpack process.  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We can use &lt;code&gt;ts-loader&lt;/code&gt; which will perform type checking during the bundling process.  If there are any type errors, the build will cancel and report the error.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can use Babel to simply remove the type info.  This presumes we are using another tool to type check before bundling.  It will not cancel the build process on errors.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We'll look at how you can configure both options and choose the one that is right for you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#option-1-tsloader"&gt;
  &lt;/a&gt;
  Option 1: ts-loader
&lt;/h3&gt;

&lt;p&gt;This is the option that will do the type checking and type removal.  We need to install the loader:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;ts-loader &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we update out webpack config to include the following line:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;webpack.config.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/script.tsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- NEW&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;m&lt;/span&gt;&lt;span class="se"&gt;?&lt;/span&gt;&lt;span class="sr"&gt;jsx$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;node_modules|bower_components&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;presets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@babel/preset-env&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@babel/preset-react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;automatic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;tsx&lt;/span&gt;&lt;span class="se"&gt;?&lt;/span&gt;&lt;span class="sr"&gt;$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ts-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- NEW&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have two new lines here.  The first is an update to the &lt;code&gt;entry&lt;/code&gt; point.  We need to target our &lt;code&gt;script.tsx&lt;/code&gt; file now instead of &lt;code&gt;.jsx&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second is the &lt;code&gt;ts-loader&lt;/code&gt;.  Loaders happen in a chain and execute in &lt;a href="https://webpack.js.org/concepts/loaders/#loader-features"&gt;reverse order&lt;/a&gt;.  So we need to put our Typescript loader at the end so that it passes the transformed JSX file down the chain to &lt;code&gt;babel-loader&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;npx webpack serve --open&lt;/code&gt; and see the result.  If all goes well you're see your welcome page with type checking occurring.&lt;/p&gt;

&lt;p&gt;To see the type checking in action, try introducing an error:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;script.tsx&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;this is a string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If running DevServer with watch enabled you will immediately see an error appear in both your browser and your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Type 'string' is not assignable to type 'number'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#option-2-babelpresettypescript"&gt;
  &lt;/a&gt;
  Option 2: babel/preset-typescript
&lt;/h3&gt;

&lt;p&gt;The second option assumes that we are running our own type checking before the webpack build process.  If that is the case then running it a second time with &lt;code&gt;ts-loader&lt;/code&gt; is unnecessary overhead.  &lt;/p&gt;

&lt;p&gt;Babel has a plugin to simply remove types without checking.  Run the following command to install it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @babel/preset-typescript &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we update our webpack config.  If you following the previous step then make sure you remove &lt;code&gt;ts-loader&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;webpack.config.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/script.tsx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="na"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;m&lt;/span&gt;&lt;span class="se"&gt;?[&lt;/span&gt;&lt;span class="sr"&gt;jt&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;sx$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- NEW&lt;/span&gt;
        &lt;span class="na"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;node_modules|bower_components&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;babel-loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;presets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@babel/preset-env&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@babel/preset-react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;automatic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@babel/preset-typescript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;-- NEW&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="c1"&gt;// { test: /\.tsx?$/, use: "ts-loader" },&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are two new lines to note.  The first is an update to our &lt;code&gt;test&lt;/code&gt; regex.  We want &lt;code&gt;babel-loader&lt;/code&gt; to now run on files with either JSX or TSX extension.  The [jt] is part of regular expression syntax meaning "j or t".&lt;/p&gt;

&lt;p&gt;The second is the addition of &lt;code&gt;@babel/preset-typescript&lt;/code&gt; at the end of the &lt;code&gt;presets&lt;/code&gt; array.  Babel, like webpack, runs these presets in reverse order.  We want to strip off the types first before we process the JSX.&lt;/p&gt;

&lt;p&gt;When we run &lt;code&gt;npx webpack serve --open&lt;/code&gt; we should once again see our big "Welcome" message on our page.  If we introduce type errors webpack will still compile, so it's relying on us to do type checking as a separate process first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Hopefully this tutorial has given you a better understanding of the complicated ecosystem of transforming JSX and Typescript code, as well as the benefits of running a local dev server that supports instant reloading.&lt;/p&gt;

&lt;p&gt;WHile these tools are difficult to set up, they do provide an extremely rich and user-friendly working environment for developing complex web applications at scale.  Once you learn how to configure them yourself, you will be in a much stronger position to troubleshoot any issues you encounter in your build tooling in the future.  &lt;/p&gt;

&lt;p&gt;Please check out the other entries in this series!  Feel free to leave a comment or question and share with others if you find any of them helpful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-running-a-local-web-server-4d8g"&gt;Understanding the Modern Web Stack: Running a Local Web Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/alexeagleson/building-a-modern-web-stack-babel-3hfp"&gt;Understanding the Modern Web Stack: Babel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-webpack-part-1-2mn1"&gt;Understanding the Modern Web Stack: Webpack - The Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-webpack-part-2-49bj"&gt;Understanding the Modern Web Stack: Webpack - Loaders, Optimizations &amp;amp; Bundle Analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-webpack-devserver-react-typescript-4b9b"&gt;Understanding the Modern Web Stack: Webpack - DevServer, React &amp;amp; Typescript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://twitter.com/eagleson_alex?ref_src=twsrc%5Etfw"&gt;@eagleson_alex&lt;/a&gt; on Twitter&lt;/p&gt;

&lt;p&gt;Thanks for reading, and stay tuned!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>react</category>
    </item>
  </channel>
</rss>
