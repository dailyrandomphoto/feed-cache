<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Rust Concept Clarification: Deref vs AsRef vs Borrow vs Cow</title>
      <author>Alex</author>
      <pubDate>Tue, 06 Jul 2021 12:28:53 +0000</pubDate>
      <link>https://dev.to/zhanghandong/rust-concept-clarification-deref-vs-asref-vs-borrow-vs-cow-13g6</link>
      <guid>https://dev.to/zhanghandong/rust-concept-clarification-deref-vs-asref-vs-borrow-vs-cow-13g6</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--faT0ip8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2251koglfie808mxji2j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--faT0ip8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2251koglfie808mxji2j.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By HanDong Zhang&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-by-module"&gt;
  &lt;/a&gt;
  Understanding by Module
&lt;/h2&gt;

&lt;p&gt;In fact, the classification by standard library will first give you a small idea of what they do. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://doc.rust-lang.org/std/index.html"&gt;std&lt;/a&gt;::&lt;a href="https://doc.rust-lang.org/std/ops/index.html"&gt;ops&lt;/a&gt;::&lt;a href="https://doc.rust-lang.org/std/ops/trait.Deref.html"&gt;Deref&lt;/a&gt; . As you can see, &lt;code&gt;Deref&lt;/code&gt; is categorized as an &lt;code&gt;ops&lt;/code&gt; module. If you look at the documentation, you will see that this module defines the  &lt;a href="https://doc.rust-lang.org/std/ops/index.html#traits"&gt;trait&lt;/a&gt;  fr all the overloadable operators. For example, &lt;code&gt;Add trait&lt;/code&gt; corresponds to &lt;code&gt;+&lt;/code&gt;, while &lt;code&gt;Deref trait&lt;/code&gt;  corresponds to a shared(immutable) borrowing dereference operation, such as &lt;code&gt;*v&lt;/code&gt; . Correspondingly, there is also the &lt;code&gt;DerefMut trait&lt;/code&gt;， which corresponds to the dereferencing operation of exclusive(mutable) borrowing. Since the Rust ownership semantics is a language feature throughout , the semantics of &lt;code&gt;Owner&lt;/code&gt; / &lt;code&gt;immutable borrowing(&amp;amp;T)&lt;/code&gt;/ &lt;code&gt;mutable borrowing(&amp;amp;mut T)&lt;/code&gt; all appear together.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://doc.rust-lang.org/std/index.html"&gt;std&lt;/a&gt;::&lt;a href="https://doc.rust-lang.org/std/convert/index.html"&gt;convert&lt;/a&gt;::&lt;a href="https://doc.rust-lang.org/std/convert/trait.AsRef.html"&gt;AsRef&lt;/a&gt; . As you can see, &lt;code&gt;AsRef&lt;/code&gt; is grouped under the convert module. if you look at the documentation, you will see that  &lt;a href="https://doc.rust-lang.org/std/convert/index.html#traits"&gt;traits&lt;/a&gt; related to type conversions are defined in this module. For example, the familiar "From/To", "TryFrom/TryTo" and "AsRef/AsMut" also appear in pairs here, indicating that the feature is releated to type conversions. Based on the naming rules in the  &lt;a href="https://rust-lang.github.io/api-guidelines/"&gt;Rust API Guidelines&lt;/a&gt; , wen can infer that methods starting with &lt;code&gt;as_&lt;/code&gt; represent conversions from &lt;code&gt;borrow -&amp;gt; borrow&lt;/code&gt;, i.e, &lt;code&gt;reference -&amp;gt; reference&lt;/code&gt; , and are overhead-free. And such conversions do not fail.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://doc.rust-lang.org/std/index.html"&gt;std&lt;/a&gt;::&lt;a href="https://doc.rust-lang.org/std/borrow/index.html"&gt;borrow&lt;/a&gt;::&lt;a href="https://doc.rust-lang.org/std/borrow/trait.Borrow.html"&gt;Borrow&lt;/a&gt;. As you can see, &lt;code&gt;Borrow&lt;/code&gt; is categorized in the borrow module. The documentation for this module is very minimal, with a single sentence saying that this is for using borrowed data. So the trait is more or less related to expressing borrwo semantics. Three  &lt;a href="https://doc.rust-lang.org/std/borrow/index.html#traits"&gt;traits&lt;/a&gt;  are provided:  &lt;a href="https://doc.rust-lang.org/std/borrow/trait.Borrow.html"&gt;Borrow&lt;/a&gt; / &lt;a href="https://doc.rust-lang.org/std/borrow/trait.BorrowMut.html"&gt;BorrowMut&lt;/a&gt;/ &lt;a href="https://doc.rust-lang.org/std/borrow/trait.ToOwned.html"&gt;ToOwned&lt;/a&gt; , which corresponds exactly to the ownership semantics.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://doc.rust-lang.org/std/index.html"&gt;std&lt;/a&gt;::&lt;a href="https://doc.rust-lang.org/std/borrow/index.html"&gt;borrow&lt;/a&gt;::&lt;a href="https://doc.rust-lang.org/std/borrow/enum.Cow.html"&gt;Cow&lt;/a&gt;. It can be seen that &lt;code&gt;Cow&lt;/code&gt; is also classified as a borrow module.  According to the description, &lt;code&gt;Cow&lt;/code&gt; is a clone-on-write smart pointer. The main reason for putting it in the borrow module is to use borrowing as much as possible and avoid copying, as an optimization.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#stdopsderef"&gt;
  &lt;/a&gt;
  &lt;a href="https://doc.rust-lang.org/std/index.html"&gt;std&lt;/a&gt;::&lt;a href="https://doc.rust-lang.org/std/ops/index.html"&gt;ops&lt;/a&gt;::&lt;a href="https://doc.rust-lang.org/std/ops/trait.Deref.html"&gt;Deref&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;First, let's look at the definition of the trait.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="n"&gt;Deref&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;Sized&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nd"&gt;#[must_use]&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;deref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nn"&gt;Self&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Target&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The definition is not complicated, &lt;code&gt;Deref&lt;/code&gt; contains only a &lt;code&gt;deref&lt;/code&gt; method signature. The beauty of this trait is that it is called "implicitly" by the compiler, officially called "&lt;a href="https://doc.rust-lang.org/std/ops/trait.Deref.html#more-on-deref-coercion"&gt;deref coercion&lt;/a&gt; ". &lt;/p&gt;

&lt;p&gt;Here is an example from the standard library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;ops&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Deref&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;DerefExample&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Deref&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;DerefExample&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;deref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nn"&gt;Self&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Target&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.value&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DerefExample&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sc"&gt;'a'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code, the &lt;code&gt;DerefExample&lt;/code&gt; structure implements the &lt;code&gt;Deref&lt;/code&gt; trait, so it can be executed using the dereference operator &lt;code&gt;*&lt;/code&gt;. In the example, the value of the field value is returned directly.&lt;/p&gt;

&lt;p&gt;As you can see, &lt;code&gt;DerefExample&lt;/code&gt; has a pointer-like behavior , because it implements &lt;code&gt;Deref&lt;/code&gt;, because it can be dereferenced. &lt;code&gt;DerefExample&lt;/code&gt; also becomes a kind of smart pointer. This is one way to identify if a type is a smart pointer, by seeing if it implements &lt;code&gt;Deref&lt;/code&gt;. But not all smart pointers implement &lt;code&gt;Deref&lt;/code&gt;, some implent &lt;code&gt;Drop&lt;/code&gt;, or both.&lt;/p&gt;

&lt;p&gt;Now let's summarize &lt;code&gt;Deref&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;T&lt;/code&gt; implements &lt;code&gt;Deref&amp;lt;Target=U&amp;gt;&lt;/code&gt;, and &lt;code&gt;x&lt;/code&gt; is an instance of type &lt;code&gt;T&lt;/code&gt;, then.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In an immutable context, the operation of &lt;code&gt;*x&lt;/code&gt; (when &lt;code&gt;T&lt;/code&gt; is neither a reference nor a primitive pointer) is equivalent to &lt;code&gt;*Deref::deref(&amp;amp;x)&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;The value of &lt;code&gt;&amp;amp;T&lt;/code&gt; is forced to be converted to the value of &lt;code&gt;&amp;amp;U&lt;/code&gt;. (deref coercion).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;T&lt;/code&gt; implements all the (immutable) methods of &lt;code&gt;U&lt;/code&gt;. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The beauty of &lt;code&gt;Deref&lt;/code&gt; is that it enhances the Rust development experience. A typical example from the standard library is that &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; shares all the methods of &lt;code&gt;slice&lt;/code&gt; by implemented  &lt;code&gt;Deref&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Allocator&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;ops&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Deref&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;deref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;unsafe&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nn"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_raw_parts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="nf"&gt;.as_ptr&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example, the simplest method, &lt;code&gt;len()&lt;/code&gt;, is actually defined in the &lt;a href="https://doc.rust-lang.org/std/primitive.slice.html"&gt; &lt;code&gt;slice&lt;/code&gt; &lt;/a&gt; module. In Rust, when executing &lt;code&gt;.&lt;/code&gt; call, or at the function argument position, the compiler automatically performs the implicit act of deref coercion. so it is equivalent to &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt; having the &lt;code&gt;slice&lt;/code&gt; method as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;vec!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="nf"&gt;.len&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;// 当 a 调用 len() 的时候，发生 deref 强转&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Implicit behavior in Rust is not common,  but &lt;code&gt;Deref&lt;/code&gt; is one of them, and its implicit coercion make smart pointers easy to use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="nf"&gt;.to_uppercase&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;"HELLO"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example, if we manipulate &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; , instead of manually dereferencing &lt;code&gt;T&lt;/code&gt; inside to manipulate it,  as if the outer layer of &lt;code&gt;Box&amp;lt;T&amp;gt;&lt;/code&gt; is transparent, we can manipulate T directly.&lt;/p&gt;

&lt;p&gt;Another example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="nf"&gt;.to_uppercase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"HELLO"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The argument type of the &lt;code&gt;uppercase&lt;/code&gt; method above is obviously &lt;code&gt;&amp;amp;str&lt;/code&gt;, but the actual type passed in the main function is &lt;code&gt;&amp;amp;String&lt;/code&gt;, so why does it compile successfully? It is because &lt;code&gt;String&lt;/code&gt; implements&lt;code&gt;Deref&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="nn"&gt;ops&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Deref&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;#[inline]&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;deref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;unsafe&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nn"&gt;str&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_utf8_unchecked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.vec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's the beauty of &lt;code&gt;Deref&lt;/code&gt;. But some people may mistake it for inheritance. Big mistake.&lt;/p&gt;

&lt;p&gt;This behavior seems a bit like inheritance, but please don't just use &lt;code&gt;Deref&lt;/code&gt; to simulate inheritance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stdconvertasref"&gt;
  &lt;/a&gt;
  &lt;a href="https://doc.rust-lang.org/std/index.html"&gt;std&lt;/a&gt;::&lt;a href="https://doc.rust-lang.org/std/convert/index.html"&gt;convert&lt;/a&gt;::&lt;a href="https://doc.rust-lang.org/std/convert/trait.AsRef.html"&gt;AsRef&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Let's look at the definition of &lt;code&gt;AsRef&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="n"&gt;AsRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;Sized&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;as_ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We already know that &lt;code&gt;AsRef&lt;/code&gt; can be used for conversions. Compared to &lt;code&gt;Deref&lt;/code&gt;, which has an implicit behavior, &lt;code&gt;AsRef&lt;/code&gt; is an explicit conversion.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="n"&gt;is_hello&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;AsRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="nf"&gt;.as_ref&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nf"&gt;is_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hello"&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nf"&gt;is_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, the function of &lt;code&gt;is_hello&lt;/code&gt; is a generic function. The conversion is achieved by qualifying &lt;code&gt;T: AsRef&amp;lt;str&amp;gt;&lt;/code&gt; and using an explicit call like &lt;code&gt;s.as_ref()&lt;/code&gt; inside the function. Either &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;str&lt;/code&gt; actually implements the &lt;code&gt;AsRef&lt;/code&gt; trait.&lt;/p&gt;

&lt;p&gt;So now the question is, when do you use &lt;code&gt;AsRef&lt;/code&gt;? Why not just use &lt;code&gt;&amp;amp;T&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Consider an example like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Thing&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Thing&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;WhatTypeHere&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Self&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Thing&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="nf"&gt;.some_conversion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, the &lt;code&gt;new&lt;/code&gt; function name has the following options for the type parameter.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;&amp;amp;str&lt;/code&gt;. In this case, the caller needs to pass in a reference. But in order to convert to String, the called party (callee) needs to control its own memory allocation, and will have a copy.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;String&lt;/code&gt;. In this case, the caller is fine passing String, but if it is passing a reference, it is similar to case 1. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;T: Into&amp;lt;String&amp;gt;&lt;/code&gt;. In this case, the caller can pass &lt;code&gt;&amp;amp;str&lt;/code&gt; and &lt;code&gt;String&lt;/code&gt;, but there will be memory allocation and copying during the type conversion as well.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;T: AsRef&amp;lt;str&amp;gt;&lt;/code&gt;. Same as case 3. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;T: Into&amp;lt;Cow&amp;lt;'a, str&amp;gt;&amp;gt;&lt;/code&gt;, where some allocations can be avoided. &lt;code&gt;Cow&lt;/code&gt; will be described later.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There is no one-size-fits-all answer to the question of when to use which type. Some people just like &lt;code&gt;&amp;amp;str&lt;/code&gt; and will use it no matter what. There are trade-offs here.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;On occasions when assignment and copying are less important,  there is no need to make type signatures too complicated, just use &lt;code&gt;&amp;amp;str&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Some need to look at method definitions and whether they need to consume ownership, or return ownership or borrowing. &lt;/li&gt;
&lt;li&gt;Some need to minimize assignment and copy, so it is necessary to use more complex type signatures, as in case 5.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#application-of-deref-and-asref-in-api-design"&gt;
  &lt;/a&gt;
  Application of Deref and AsRef in API design
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;&lt;a href="https://github.com/rustwasm/wasm-bindgen"&gt;wasm-bindgen&lt;/a&gt;&lt;/strong&gt; library contains a component called &lt;a href="https://github.com/rustwasm/wasm-bindgen/tree/"&gt;&lt;strong&gt;web-sys&lt;/strong&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;This component is the binding of Rust to the browser Web API. As such, web-sys makes it possible to manipulate the browser DOM with Rust code, fetch server data, draw graphics, handle audio and video, handle client-side storage, and more.&lt;/p&gt;

&lt;p&gt;However, binding Web APIs with Rust is not that simple. For example, manipulating the DOM relies on JavaScript class inheritance, so web-sys must provide access to this inheritance hierarchy. In web-sys, access to this inheritance structure is provided using &lt;code&gt;Deref&lt;/code&gt; and &lt;code&gt;AsRef&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using Deref&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="nf"&gt;.append_child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;// call a method on `Node`&lt;/span&gt;

&lt;span class="nf"&gt;method_expecting_a_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;// coerce to `&amp;amp;Node` implicitly&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;// explicitly coerce to `&amp;amp;Node`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have &lt;code&gt;web_sys::Element&lt;/code&gt;, then you can get &lt;code&gt;web_sys::Node&lt;/code&gt; implicitly by using deref.&lt;/p&gt;

&lt;p&gt;The use of deref is mainly for API ergonomic reasons, to make it easy for developers to use the &lt;code&gt;.&lt;/code&gt; operation to transparently use the parent class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using AsRef&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A large number of &lt;code&gt;AsRef&lt;/code&gt; conversions are also implemented in web-sys for various types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;AsRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HtmlElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;HtmlAnchorElement&lt;/span&gt;
&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;AsRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;HtmlAnchorElement&lt;/span&gt;
&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;AsRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;HtmlAnchorElement&lt;/span&gt;
&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;AsRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;EventTarget&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;HtmlAnchorElement&lt;/span&gt;
&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;AsRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;HtmlAnchorElement&lt;/span&gt;
&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;AsRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;JsValue&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;HtmlAnchorElement&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A reference to a parent structure can be obtained by explicitly calling &lt;code&gt;.as_ref()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Deref focuses on implicitly and transparently using the parent structure, while AsRef focuses on explicitly obtaining a reference to the parent structure. This is a trade-off with a specific API design, rather than a mindless simulation of OOP inheritance.&lt;/p&gt;

&lt;p&gt;Another example of using AsRef is the &lt;a href="https://github.com/http-rs/http-types"&gt;http-types&lt;/a&gt; library, which uses AsRef and AsMut to convert various types.&lt;/p&gt;

&lt;p&gt;For example, Request is a combination of &lt;code&gt;Stream / headers/ URL&lt;/code&gt;, so it implements &lt;code&gt;AsRef&amp;lt;Url&amp;gt;&lt;/code&gt;, &lt;code&gt;AsRef&amp;lt;Headers&amp;gt;&lt;/code&gt;, and &lt;code&gt;AsyncRead&lt;/code&gt;. Similarly, Response is a combination of &lt;code&gt;Stream / headers/ Status Code&lt;/code&gt;. So it implements &lt;code&gt;AsRef&amp;lt;StatusCode&amp;gt;&lt;/code&gt;, &lt;code&gt;AsRef&amp;lt;Headers&amp;gt;&lt;/code&gt;, and &lt;code&gt;AsyncRead&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;forwarded_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;AsRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nn"&gt;http_types&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Headers&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// get the X-forwarded-for header&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// 所以，forwarded_for 可以方便处理 Request/ Response / Trailers &lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;fwd1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;forwarded_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;fwd2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;forwarded_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;fwd3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;forwarded_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;trailers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#stdborrowborrow"&gt;
  &lt;/a&gt;
  &lt;a href="https://doc.rust-lang.org/std/index.html"&gt;std&lt;/a&gt;::&lt;a href="https://doc.rust-lang.org/std/borrow/index.html"&gt;borrow&lt;/a&gt;::&lt;a href="https://doc.rust-lang.org/std/borrow/trait.Borrow.html"&gt;Borrow&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Take a look at the definition of &lt;code&gt;Borrow&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="n"&gt;Borrow&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Borrowed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;Sized&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;borrow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Borrowed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Contrast &lt;code&gt;AsRef&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="n"&gt;AsRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;Sized&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;as_ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Isn't this very similar? So, some people suggest that one of these two functions could be removed altogether. But in fact, there is a difference between Borrow and AsRef, and they both have their own uses.&lt;/p&gt;

&lt;p&gt;The Borrow trait is used to represent borrowed data. the AsRef trait is used for type conversion. In Rust, it is common to provide different type representations for different use cases for different semantics.&lt;/p&gt;

&lt;p&gt;A type provides a reference/borrow to &lt;code&gt;T&lt;/code&gt; in the &lt;code&gt;borrow()&lt;/code&gt; method by implementing &lt;code&gt;Borrow&amp;lt;T&amp;gt;&lt;/code&gt;, expressing the semantics that it can be borrowed, rather than converted to some type &lt;code&gt;T&lt;/code&gt;. A type can be freely borrowed as several different types, or it can be borrowed in a mutable way.&lt;/p&gt;

&lt;p&gt;So how do you choose between Borrow and AsRef?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Choose Borrow when you want to abstract different borrow types in a uniform way, or when you want to create a data structure that handles self-contained values (owned) and borrowed values (borrowed) in the same way.&lt;/li&gt;
&lt;li&gt;When you want to convert a type directly to a reference and you are writing generic code, choose AsRef. simpler case.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In fact, the HashMap example given in the standard library documentation explains this very well. Let me translate it for you.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HashMap&amp;lt;K, V&amp;gt;&lt;/code&gt; stores key-value pairs, and its API should be able to retrieve the corresponding value in the HashMap properly using either the key's own value or its reference. Since the HashMap has to hash and compare keys, it must require that both the key's own value and the reference behave the same when hashed and compared.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;borrow&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Borrow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// fields omitted&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// The insert method uses the key's own value and takes ownership of it.&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Hash&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;Eq&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// If you use the get method to get the corresponding value by key, you can use the reference of key, which is denoted by &amp;amp;Q here&lt;/span&gt;
    &lt;span class="c"&gt;// and requires Q to satisfy `Q: Hash + Eq + ?Sized`&lt;/span&gt;
    &lt;span class="c"&gt;// As for K, it is expressed as a borrowed data of Q by `K: Borrow&amp;lt;Q&amp;gt;`.&lt;/span&gt;
    &lt;span class="c"&gt;// So, the hash implementation of Q is required to be the same as K&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;where&lt;/span&gt;
        &lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Borrow&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Hash&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;Eq&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;Sized&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Borrow is a bound on borrowed data and is used with additional traits, such as &lt;code&gt;Hash&lt;/code&gt; and &lt;code&gt;Eq&lt;/code&gt; in the example.&lt;/p&gt;

&lt;p&gt;See another example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;//  Can this structure be used as the key of a HashMap?&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nf"&gt;CaseInsensitiveString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c"&gt;// It implements PartialEq without problems&lt;/span&gt;
&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;PartialEq&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;CaseInsensitiveString&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// Note that the comparison here is required to ignore ascii case&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="na"&gt;.0&lt;/span&gt;&lt;span class="nf"&gt;.eq_ignore_ascii_case&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="na"&gt;.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="nb"&gt;Eq&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;CaseInsensitiveString&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// Implementing Hash is no problem&lt;/span&gt;
&lt;span class="c"&gt;// But since PartialEq ignores case, the hash calculation must also ignore case&lt;/span&gt;
&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Hash&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;CaseInsensitiveString&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Hasher&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="na"&gt;.0&lt;/span&gt;&lt;span class="nf"&gt;.as_bytes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="nf"&gt;.to_ascii_lowercase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Can CaseInsensitiveString implement &lt;code&gt;Borrow&amp;lt;str&amp;gt;&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Obviously, CaseInsensitiveString and str have different implementations of Hash. str does not ignore case. Therefore, &lt;code&gt;Borrow&amp;lt;str&amp;gt;&lt;/code&gt; must not be implemented for CaseInsensitiveString, so CaseInsensitiveString cannot be used as a key for a HashMap. What happens if we force &lt;code&gt;Borrow&amp;lt;str&amp;gt;&lt;/code&gt; to be used? It will fail due to case difference when determining the key.&lt;/p&gt;

&lt;p&gt;But CaseInsensitiveString can be fully implemented as AsRef.&lt;/p&gt;

&lt;p&gt;This is the difference between Borrow and AsRef. &lt;code&gt;Borrow&lt;/code&gt; is a bit stricter and represents a completely different semantics than &lt;code&gt;AsRef&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stdborrowcow"&gt;
  &lt;/a&gt;
  &lt;a href="https://doc.rust-lang.org/std/index.html"&gt;std&lt;/a&gt;::&lt;a href="https://doc.rust-lang.org/std/borrow/index.html"&gt;borrow&lt;/a&gt;::&lt;a href="https://doc.rust-lang.org/std/borrow/enum.Cow.html"&gt;Cow&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Look at the definition of &lt;code&gt;Cow&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;Cow&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 
&lt;span class="k"&gt;where&lt;/span&gt;
    &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;'a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ToOwned&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;Sized&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
 &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;Borrowed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;'a&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nf"&gt;Owned&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ToOwned&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;Owned&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, Cow is an enumeration. It is somewhat similar to Option, in that it represents one of two cases, Cow here means borrowed and self-owned, but only one of these cases can occur.&lt;/p&gt;

&lt;p&gt;The main functions of Cow are: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;acts as a smart pointer, providing transparent immutable access to instances of this type (e.g. the original immutable methods of this type can be called directly, implementing Deref, but not DerefMut).&lt;/li&gt;
&lt;li&gt;if there is a need to modify an instance of this type, or to gain ownership of an instance of this type, &lt;code&gt;Cow&lt;/code&gt; provides methods to do cloning and avoid repeated cloning.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;Cow&lt;/code&gt; is designed to improve performance (reduce replication) while increasing flexibility, because most of the time, business scenarios are read more and write less. With &lt;code&gt;Cow&lt;/code&gt;, this can be achieved in a uniform, canonical form, where object replication is done only once when a write is needed. This may reduce the number of replications significantly.&lt;/p&gt;

&lt;p&gt;It has the following key points to master.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;Cow&amp;lt;T&amp;gt;&lt;/code&gt; can directly call the immutable methods of &lt;code&gt;T&lt;/code&gt;, since &lt;code&gt;Cow&lt;/code&gt;, an enumeration, implements &lt;code&gt;Deref&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;.to_mut()&lt;/code&gt; method can be used to obtain a mutable borrow with an ownership value when &lt;code&gt;T&lt;/code&gt; needs to be modified.

&lt;ol&gt;
&lt;li&gt;note that a call to &lt;code&gt;.to_mut()&lt;/code&gt; does not necessarily result in a Clone.&lt;/li&gt;
&lt;li&gt;calling &lt;code&gt;.to_mut()&lt;/code&gt; when ownership is already present is valid, but does not produce a new Clone.&lt;/li&gt;
&lt;li&gt;multiple calls to &lt;code&gt;.to_mut()&lt;/code&gt; will produce only one Clone.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;.into_owned()&lt;/code&gt; can be used to create a new owned object when &lt;code&gt;T&lt;/code&gt; needs to be modified, a process that often implies a memory copy and the creation of a new object.

&lt;ol&gt;
&lt;li&gt;calling this operation will perform a Clone if the value in the previous &lt;code&gt;Cow&lt;/code&gt; was in borrowed state.&lt;/li&gt;
&lt;li&gt;this method, whose argument is of type &lt;code&gt;self&lt;/code&gt;, will "consume" the original instance of that type, after which the life cycle of the original instance of that type will end, and cannot be called more than once on &lt;code&gt;Cow&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cow is used more often in API design.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;borrow&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Cow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c"&gt;// Use Cow for the return value to avoid multiple copies&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="n"&gt;remove_spaces&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;'a&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Cow&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="nf"&gt;.contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;with_capacity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="nf"&gt;.len&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="nf"&gt;.chars&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="sc"&gt;' '&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="nf"&gt;.push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nn"&gt;Cow&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;Owned&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nn"&gt;Cow&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;Borrowed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, when to use Cow comes back to the "when to use &lt;code&gt;AsRef&lt;/code&gt;" discussion in our previous article, there are trade-offs and no one-size-fits-all standard answer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;To understand the various types and traits in Rust, you need to take into account the ownership semantics and ponder the documentation and examples, which should be easy to understand. I don't know if reading this article has solved your doubts? Feel free to share your feedback.&lt;/p&gt;

</description>
      <category>rust</category>
    </item>
    <item>
      <title>How to use Swift in your React Native app</title>
      <author>Akinn Rosa</author>
      <pubDate>Tue, 06 Jul 2021 12:19:33 +0000</pubDate>
      <link>https://dev.to/akinncar/how-to-use-swift-in-your-react-native-app-46mj</link>
      <guid>https://dev.to/akinncar/how-to-use-swift-in-your-react-native-app-46mj</guid>
      <description>&lt;p&gt;In this post, we will integrate a React Native app with share on social media feature on iOS using Swift.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;If you are not familiar with Native Modules on React Native - and it's ok because this tutorial is for you too! - know that it's most common to integrate a React Native with Objective-C (iOS) and Java (Android), but recently this have changed. With the grew of Swift language, have been popular create Native Modules with Swift for React Native apps on iOS. We still need to use some Objective-C to be able to use Swift, but &lt;a href="https://twitter.com/tsapeta/status/1404552421528031234"&gt;this thing maybe can change soon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To follow this tutorial, you will need to have a React Native app, and if you don't have yet, you can start a new one using &lt;code&gt;npx react-native init&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Currently, is not possible to integrate native code with Expo Managed Workflow, but you can use Expo CLI with Bare Worflow if you prefer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-swift-code"&gt;
  &lt;/a&gt;
  Why Swift Code
&lt;/h2&gt;

&lt;p&gt;Some features available to use on user phones only can be accessed with native code like Camera, Geolocation, Bluetooth, and more. For iOS, you can choose between Swift and Objective-C to implement these features on your app. Mostly React Native code is written with Objective-C because React Native core uses &lt;a href="https://github.com/facebook/yoga"&gt;Yoga&lt;/a&gt; lib for layout that works better bridging with Objective-C because is written in C++. But how we can see on &lt;a href="https://reactnative.dev/docs/native-modules-ios#exporting-swift"&gt;documentation&lt;/a&gt; we also can bridge our application with Swift to use these functionalities. In this article, we will see how to use Swift to integrate our app with &lt;code&gt;Share with social medias&lt;/code&gt; native popover.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-native-method-with-swift"&gt;
  &lt;/a&gt;
  Creating native method with Swift
&lt;/h2&gt;

&lt;p&gt;The first step, is create the function that you need on native part like an implementation on native apps. We will create a File called &lt;code&gt;RNShare.swift&lt;/code&gt; on &lt;code&gt;ios&lt;/code&gt; folder from our React Native app. We use &lt;code&gt;RN&lt;/code&gt; before module name to indentify that is a Native Module to use on Javascript later.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;RNShare.swift&lt;/code&gt;, we need to create class object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Foundation&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;RNShare&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;NSObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Is important to import &lt;code&gt;Foundation&lt;/code&gt; on every Swift file in your modules&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;RNShare.swift&lt;/code&gt; will have our all functions that we need to expose to Javascript related to this module.&lt;/p&gt;

&lt;p&gt;Let's create a function called &lt;code&gt;_open&lt;/code&gt; that open the Share window on our app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Foundation&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;RNShare&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;NSObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;_open&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;controller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;RCTPresentedViewController&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;shareController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;UIActivityViewController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;activityItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Hello React Native"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;applicationActivities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;shareController&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popoverPresentationController&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sourceView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shareController&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function will open a window to share the message "Hello React Native" with the user's installed social medias. We are simply instancing our window with &lt;code&gt;UIActivityViewController&lt;/code&gt;, and adding this controller to our React Native view controller (&lt;code&gt;RCTPresentedViewController&lt;/code&gt;) and calling method &lt;code&gt;present&lt;/code&gt; to present on the screen.&lt;/p&gt;

&lt;p&gt;Our goal is to recieve a dynamic message from Javascript and sends this message to social medias. Then, we can add some logic to recieve params with &lt;code&gt;open&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Foundation&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;RNShare&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;NSObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;_open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;NSDictionary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;RCTConvert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;nsString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"No `message` to share!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;controller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;RCTPresentedViewController&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;shareController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;UIActivityViewController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;activityItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;applicationActivities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;shareController&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popoverPresentationController&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sourceView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shareController&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we are recieving an &lt;code&gt;options&lt;/code&gt; object, with an object that our message will be passed (or whatever parameter you want).&lt;/p&gt;

&lt;p&gt;Function &lt;code&gt;open&lt;/code&gt; was not created with an &lt;code&gt;_&lt;/code&gt; by coincidence. This function is private because we will only call it on Swift object. We need to create another public function that will indicate to call this function on main thread with some extra configs. &lt;br&gt;
Also, we need to create a &lt;code&gt;requiresMainQueueSetup&lt;/code&gt; to manage our queue on main thread.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="kt"&gt;Foundation&lt;/span&gt;

&lt;span class="kd"&gt;@objc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;RNShare&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;RNShare&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;NSObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;@objc&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;requiresMainQueueSetup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Reference to use main thread&lt;/span&gt;
  &lt;span class="kd"&gt;@objc&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;NSDictionary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;DispatchQueue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;_open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;_open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;NSDictionary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;RCTConvert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;nsString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"No `message` to share!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;controller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;RCTPresentedViewController&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;shareController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;UIActivityViewController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;activityItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;applicationActivities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;shareController&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popoverPresentationController&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sourceView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shareController&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that we add &lt;code&gt;@objc&lt;/code&gt; for &lt;code&gt;open&lt;/code&gt;, &lt;code&gt;requiresMainQueueSetup&lt;/code&gt;, and &lt;code&gt;RNShare&lt;/code&gt;. This means that this code will be called on Objective-C and you need this declarations to work as expected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-bridge-between-objectivec-and-swift-code"&gt;
  &lt;/a&gt;
  Creating bridge between Objective-C and Swift code
&lt;/h2&gt;

&lt;p&gt;The Objective-C code is the code that able to expose native functions to React Native(Javascript). We need to create a file called &lt;code&gt;RNShare.m&lt;/code&gt; that will refer to our Swift functions and will expose it to our bridge with Javascript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight objective_c"&gt;&lt;code&gt;&lt;span class="cp"&gt;#import &amp;lt;React/RCTBridgeModule.h&amp;gt;
&lt;/span&gt;
&lt;span class="k"&gt;@interface&lt;/span&gt; &lt;span class="nc"&gt;RCT_EXTERN_MODULE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RNShare&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NSObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;RCT_EXTERN_METHOD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSDictionary&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our class and method are now exposed to Javascript bridge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#calling-native-module-with-javascript"&gt;
  &lt;/a&gt;
  Calling native module with Javascript
&lt;/h2&gt;

&lt;p&gt;To be able to use native methods, we need to use &lt;code&gt;NativeModules&lt;/code&gt; from react-native. I like to create a folder called &lt;code&gt;native&lt;/code&gt; on source code and every file is a different native module.&lt;/p&gt;

&lt;p&gt;RNShare.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NativeModules&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;RNShare&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;NativeModules&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;RNShare&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After expose native method, let's call our function in a React Native component.&lt;/p&gt;

&lt;p&gt;App.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SafeAreaView&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;RNShare&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./native/RNShare&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SafeAreaView&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Share"&lt;/span&gt;
        &lt;span class="na"&gt;onPress&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;RNShare&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bridge with Swift Dev.to Tutorial&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;SafeAreaView&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vzJWi9XR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0efyu3f4hucyb3rtivz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vzJWi9XR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0efyu3f4hucyb3rtivz.png" alt="WhatsApp Image 2021-07-02 at 22.18.25_iphonexrspacegrey_portrait"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's It! 🎉
&lt;/h2&gt;

&lt;p&gt;Following this guide, you are able to create whatever methods you want in Swift to expose in your React Native apps. If you want to see more about native module integrations, check &lt;a href="https://github.com/akinncar/awesome-native-modules"&gt;awesome-native-modules repository&lt;/a&gt; on github to see some native integrations with iOS and Android!&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>ios</category>
      <category>swift</category>
    </item>
    <item>
      <title>The best VS Code extensions to supercharge Git (yes, there’s more than GitLens!)</title>
      <author>Jamie Swift</author>
      <pubDate>Tue, 06 Jul 2021 12:06:49 +0000</pubDate>
      <link>https://dev.to/jamieswift90/the-best-vs-code-extensions-to-supercharge-git-yes-there-s-more-than-gitlens-4588</link>
      <guid>https://dev.to/jamieswift90/the-best-vs-code-extensions-to-supercharge-git-yes-there-s-more-than-gitlens-4588</guid>
      <description>&lt;p&gt;Yes, I know, we should all be terminal ninjas, memorising every git command yadda yadda. Or, like the caveman, we could put two sticks together (or in this case, VS Code) and create fire (aka use the UI) to work with Git via amazing extensions that not only make working with Git easier but also extend Git with cool new features and superpowers! &lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-git-graph-%C2%A0%C2%A0-raw-popular-endraw-"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph"&gt;Git Graph&lt;/a&gt;    &lt;sup&gt;&lt;code&gt;😎 popular&lt;/code&gt; &lt;/sup&gt;
&lt;/h3&gt;

&lt;p&gt;Git Graph has to be the most visually appealing way to interact with Git in VS Code, seeing the commit tree like this can help a lot when performing more complex git operations. &lt;br&gt;  &lt;/p&gt;

&lt;p&gt;It is very customizable and offers you granular control over the UI such as the graph style and branch colours. &lt;br&gt;&lt;/p&gt;

&lt;p&gt;You can click on any commit to view details and file changes, and you can even perform code reviews without leaving your IDE! &lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installs:&lt;/strong&gt; 1.4 Million &lt;br&gt;
&lt;strong&gt;No. 1 superpower:&lt;/strong&gt;  A user interface to match GitKraken or SourceTree but built directly into VS Code to avoid context switching.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tfdp15qA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624259309778/LaGcGSvvO.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tfdp15qA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624259309778/LaGcGSvvO.gif" alt="Git-graph.gif"&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-gitlive-%C2%A0%C2%A0-raw-rising-star-endraw-"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://marketplace.visualstudio.com/items?itemName=TeamHub.teamhub"&gt;GitLive&lt;/a&gt;    &lt;sup&gt;&lt;code&gt;🌟 rising star&lt;/code&gt;&lt;/sup&gt;
&lt;/h3&gt;

&lt;p&gt;This extension is for all you team players out there, GitLive makes Git, well, live. It adds a tab to VS Code where you can see your fellow collaborators, if they are online, what issue and branch they are working on and even their uncommitted changes, all updated in real-time. &lt;br&gt;&lt;/p&gt;

&lt;p&gt;Your teammates’ changes also show in the gutter of the editor where you can compare them to your changes and cherry-pick them straight into your copy of the file if you need to. Pretty cool! &lt;br&gt;&lt;/p&gt;

&lt;p&gt;An added bonus with this extension is it adds video calls and screen share to LiveShare, you can place calls directly from VS Code and start LiveShare without copy and pasting links. &lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installs:&lt;/strong&gt; 5500 &lt;br&gt;
&lt;strong&gt;No. 1 superpower:&lt;/strong&gt; Get an advanced warning of potential merge conflicts with change indicators in the gutter that show where your teammates are making changes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cdrbtx8c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624259358647/3BZB2isSl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cdrbtx8c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624259358647/3BZB2isSl.png" alt="git-live.png"&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-git-automator-%C2%A0%C2%A0-raw-%F0%9F%95%B0-time-saver-endraw-"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://marketplace.visualstudio.com/items?itemName=ivangabriele.vscode-git-add-and-commit"&gt;Git Automator&lt;/a&gt;    &lt;sup&gt;&lt;code&gt;🕰 time saver&lt;/code&gt; &lt;/sup&gt;
&lt;/h3&gt;

&lt;p&gt;This one is for all you lazy developers out there, specifically the ones that don’t like spending too much time or effort on commit messages. I’ve seen enough commit messages to know that there are quite a few of you out there too. &lt;br&gt;&lt;/p&gt;

&lt;p&gt;Git Automator allows you to add and commit files with a shortcut. It also provides auto-prefills for commit messages. When the action is obvious, for example if you have deleted a file, Git Automator will guess the action and add it to the prefilled commit message. &lt;br&gt;&lt;/p&gt;

&lt;p&gt;You can also set up some of your own shortcuts and use them to generate automated commit messages. &lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installs:&lt;/strong&gt; 50 000 &lt;br&gt;
&lt;strong&gt;No. 1 superpower:&lt;/strong&gt; Auto-filled commit messages!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yl_db-o7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624259337330/k7yzJwjLb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yl_db-o7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624259337330/k7yzJwjLb.gif" alt="git-automator.gif"&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-git-urgent-%C2%A0%C2%A0-raw-simple-endraw-"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://marketplace.visualstudio.com/items?itemName=arafathusayn.git-urgent"&gt;Git Urgent&lt;/a&gt;     &lt;sup&gt;&lt;code&gt;👌 simple&lt;/code&gt;&lt;/sup&gt;
&lt;/h3&gt;

&lt;p&gt;This one, I put in the category of simple, but effective. With this extension installed, all you have to do is search “Git Urgent” in the VS Code command palette, and you can git add all, commit and push with one command. &lt;br&gt;&lt;/p&gt;

&lt;p&gt;Great for hotfixes and other emergency situations!&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installs:&lt;/strong&gt; 3 500 &lt;br&gt;
&lt;strong&gt;No. 1 (and only) superpower:&lt;/strong&gt; Stage, commit and push in a single action&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hBwyoy-h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624259367586/pc4_FfNNI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hBwyoy-h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624259367586/pc4_FfNNI.png" alt="git-urgent.png"&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-git-tree-compare-%C2%A0%C2%A0-raw-practical-endraw-"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://marketplace.visualstudio.com/items?itemName=letmaik.git-tree-compare"&gt;Git Tree Compare&lt;/a&gt;    &lt;sup&gt; &lt;code&gt;👍 practical&lt;/code&gt;&lt;/sup&gt;
&lt;/h3&gt;

&lt;p&gt;Git Tree Compare is a handy extension that compares your working tree against a branch, a tag or commit. &lt;br&gt;&lt;/p&gt;

&lt;p&gt;A folder tree structure located in the Source Tab (you can configure it to be shown in the Explorer Tab instead) quickly provides you with context about the files you’ve been working on (very useful in big projects!). Icons displayed near the files’ names give you a quick idea of whether a file was added, deleted or modified.  &lt;br&gt;&lt;/p&gt;

&lt;p&gt;After choosing the base for the comparison, you can either choose to open All Changes or open Changed Files (files that were added will be opened as well, but changes won’t be shown). You can also choose whether to compare against the selected base ref directly (full mode) or by computing a merge base first (merge mode).&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installs:&lt;/strong&gt; 93 000&lt;br&gt;
&lt;strong&gt;No. 1 superpower:&lt;/strong&gt; Pull request preparation and merge previews! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DLTk18_X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625564763608/teR4SVrSt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DLTk18_X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625564763608/teR4SVrSt.png" alt="git-tree-compare.png"&gt;&lt;/a&gt; &lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-gitlens-%C2%A0%C2%A0-raw-undisputed-champion-endraw-"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;GitLens&lt;/a&gt;    &lt;sup&gt;&lt;code&gt;🥇 undisputed champion&lt;/code&gt; &lt;/sup&gt;
&lt;/h3&gt;

&lt;p&gt;Well, we couldn’t really leave it out, could we? With almost 10M installs, GitLens has really become the de facto standard extension for working with Git in VS Code which only ships with a fairly minimal git integration. &lt;br&gt;&lt;/p&gt;

&lt;p&gt;They should probably just start bundling it with VS Code (especially as the author is now part of the core VS Code development team!) &lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installs:&lt;/strong&gt; 10 Million &lt;br&gt;
&lt;strong&gt;No. 1 superpower:&lt;/strong&gt; On-demand file annotations in the editor gutter, including blame (shows the commit and author of each line), changes (highlights local changes), heatmap (shows how recently lines were changed).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G1tDCyfH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624259395467/ixlb3b6GCT.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G1tDCyfH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624259395467/ixlb3b6GCT.gif" alt="git-lens.gif"&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Although Git rocks, googling and punching in Git commands can get a bit tedious. Hopefully, some of these extensions will reduce the time you need to spend doing that, and help you with much more!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A8ZKaCcA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624270242678/qyWtdNl34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A8ZKaCcA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624270242678/qyWtdNl34.png" alt="conclusion-gif.png"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>vscode</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Emoji Favicons are a thing now 🚀🚀🚀🚀🚀</title>
      <author>Callum</author>
      <pubDate>Tue, 06 Jul 2021 11:49:43 +0000</pubDate>
      <link>https://dev.to/wrux/emoji-favicons-2cm6</link>
      <guid>https://dev.to/wrux/emoji-favicons-2cm6</guid>
      <description>&lt;p&gt;Emojis are everywhere nowadays. I created &lt;a href="https://perpetual.pizza"&gt;perpetual.pizza&lt;/a&gt; 7+ years ago now and tend to update it every year or so. I never liked the old pizza favicon and decided to try replacing it with an emoji. &lt;/p&gt;

&lt;p&gt;SVG favicons are now widely supported supported and I have been experimenting with the possibilities recently. I ended up finding an elegant solution for creating an emoji favicon. &lt;/p&gt;

&lt;p&gt;It turns out that you can use emojis inside of SVG text and also use relative units to size the emoji correctly.&lt;/p&gt;

&lt;p&gt;Here's the markup for my icon:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 100 100"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"0.9em"&lt;/span&gt; &lt;span class="na"&gt;font-size=&lt;/span&gt;&lt;span class="s"&gt;"90"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;🍕&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I added it into the document head like a regular SVG icon:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/assets/icon.svg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the outcome: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R2KdVgIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f037eplydhuafzbotnlp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R2KdVgIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f037eplydhuafzbotnlp.png" alt="Pizza emoji favicon in tab"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
    </item>
    <item>
      <title>How to execute multiple GraphQL mutations in a transaction using Overblog GraphQL Bundle</title>
      <author>Matteo Kovačić</author>
      <pubDate>Tue, 06 Jul 2021 11:43:26 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/how-to-execute-multiple-graphql-mutations-in-a-transaction-using-overblog-graphql-bundle-1282</link>
      <guid>https://dev.to/bornfightcompany/how-to-execute-multiple-graphql-mutations-in-a-transaction-using-overblog-graphql-bundle-1282</guid>
      <description>&lt;p&gt;When we started working with GraphQL, we experienced common issues like N+1 problem, error handling, etc. As our API started growing, new challenges occurred. They were mostly related to the schema design and how to have a schema that is easy to read and also functional.&lt;/p&gt;

&lt;p&gt;By specification, GraphQL allows us to send multiple mutations in a single request and these mutations will be executed in the order in which they were sent. GraphQL specification doesn't guarantee us that if some of these mutations fail, all others will fail as well. In other words, GraphQL doesn't specify that all mutations should be executed in the transactions. Luckily, this can be easily enabled in the &lt;a href="https://github.com/overblog/GraphQLBundle"&gt;Overblog GraphQL Bundle&lt;/a&gt; using built-in events.&lt;/p&gt;

&lt;p&gt;First, in &lt;code&gt;services.yaml&lt;/code&gt;, you need to register the event listener for two events: &lt;code&gt;graphql.pre_executor&lt;/code&gt; and &lt;code&gt;graphql.post_executor&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;...&lt;/span&gt;

    &lt;span class="s"&gt;App\EventListener\GraphQLExecutorListener&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="pi"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;kernel.event_listener&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;event&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;graphql.pre_executor&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;method&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;onPreExecutor&lt;/span&gt; &lt;span class="pi"&gt;}&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="pi"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;kernel.event_listener&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;event&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;graphql.post_executor&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;method&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;onPostExecutor&lt;/span&gt; &lt;span class="pi"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, in the event listener, you have a method for each event. In onPreExecutor we start the transaction. After mutations are resolved, in onPostExecutor we commit the changes if there are no errors or rollback if an error occurred.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GraphQLExecutorListener&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;EntityManagerInterface&lt;/span&gt; &lt;span class="nv"&gt;$entityManager&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;EntityManagerInterface&lt;/span&gt; &lt;span class="nv"&gt;$entityManager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;entityManager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$entityManager&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;onPreExecutor&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;entityManager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getConnection&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;beginTransaction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;onPostExecutor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;ExecutorResultEvent&lt;/span&gt; &lt;span class="nv"&gt;$event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;entityManager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getConnection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$connection&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;isTransactionActive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;LogicException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Transaction not active'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$event&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getResult&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$connection&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getTransactionNestingLevel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nv"&gt;$connection&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;rollback&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nv"&gt;$connection&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it, all mutations should now be executed in the transaction.&lt;br&gt;
If necessary, the event listener can be extended to conditionally enable the transaction, for example using a header or some other flag. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Sample Surveys Application (Kotlin + Spring + RSocket + Vue.js Demo)</title>
      <author>Anton Goncharov</author>
      <pubDate>Tue, 06 Jul 2021 11:30:49 +0000</pubDate>
      <link>https://dev.to/antongoncharov/writing-surveys-application-kotlin-spring-rsocket-vue-js-demo-59ba</link>
      <guid>https://dev.to/antongoncharov/writing-surveys-application-kotlin-spring-rsocket-vue-js-demo-59ba</guid>
      <description>&lt;p&gt;Recently I started building a repo with boilerplate code to facilitate creation of my future full-stack pet projects. Despite it's work in progress and always will be, as I'll continue to implement new features and tweak existing ones, I wanted to share it with the community.&lt;/p&gt;

&lt;p&gt;Check out the GitHub repo I'm covering in this post:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/anton-goncharov"&gt;
        anton-goncharov
      &lt;/a&gt; / &lt;a href="https://github.com/anton-goncharov/kotlin-vue-surveys-demo"&gt;
        kotlin-vue-surveys-demo
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Sample Surveys Fullstack Application based on Kotlin, Spring, WebFlux, JPA, Bootstrap, Vue, RSocket.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;It's a sample "surveys" application with the actors of two roles: coordinators and respondents. Coordinators are allowed to create &amp;amp; edit polls, then review response statistics. Respondents have read-only view with the only option to submit survey responses.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eWHAo0Ti--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79bhx6kxb26m79p38g8l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eWHAo0Ti--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79bhx6kxb26m79p38g8l.png" alt="surveys-list"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OMdxahXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xzgzsski4ugmjqdbzfep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OMdxahXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xzgzsski4ugmjqdbzfep.png" alt="editing-survey2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the key features is that the statistics data is refreshed in real time on a survey stats page 📊. It works by using Rsocket and Reactive Streams.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z41mwzcv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kyia80rltd5usxqpga0b.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z41mwzcv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kyia80rltd5usxqpga0b.gif" alt="surveys"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#concepts"&gt;
  &lt;/a&gt;
  Concepts
&lt;/h2&gt;

&lt;p&gt;This demo application showcases the following list of concepts:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#kotlin-and-spring-backend-api-development"&gt;
  &lt;/a&gt;
  Kotlin and Spring backend API development
&lt;/h4&gt;

&lt;p&gt;I've started using Kotlin on new backend projects 2 years ago, and it's my first repository to have boilerplate code for full-stack apps with Kotlin. Here I'm using Kotlin in pretty much the same Spring setup as I would use Java.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#rapid-crud-bootstrapping-using-spring-data-rest"&gt;
  &lt;/a&gt;
  Rapid CRUD bootstrapping using Spring Data REST
&lt;/h4&gt;

&lt;p&gt;It's arguable whether Spring Data REST is a good fit for a production-ready project. On the other hand, it allows a rapid start having full-blown API implementation with sorting, paging and filtering for given entities 💁.&lt;/p&gt;

&lt;p&gt;Any given controller can be extended with additional handlers or reimplemented from scratch as a separate custom REST endpoint.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#database-migrations-with-liquibase"&gt;
  &lt;/a&gt;
  Database migrations with Liquibase
&lt;/h4&gt;

&lt;p&gt;Hibernate JPA auto schema creation was used during the development. After the first version of the schema had been finalized, I generated the Liquibase changelog from JPA entities and disabled ddl-auto by Hibernate.&lt;/p&gt;

&lt;p&gt;To populate schema with some initial data (predefined users), there's sql script on classpath.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h4&gt;

&lt;p&gt;JWT-based authentication with role-based access is showcased with tokens issued by the backend. ❗️ Such a setup must not be used in production, this functionality is only to demonstrate the flow. In a real solution, use IAM solution like Keycloak or 3rd party SaaS.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#reactive-flow-for-live-data-streaming"&gt;
  &lt;/a&gt;
  Reactive flow for live data streaming
&lt;/h4&gt;

&lt;p&gt;After reading the official guide on Spring Webflux + RSocket I got an idea to implement some real-time streaming functionality to try Reactive Streams in a demo application setup.&lt;/p&gt;

&lt;p&gt;The survey statistics page is implemented using rsocket.js, it reads the survey response stream data from a Kotlin Flow that is populated with data from R2DBC H2 reactive-ready driver. The charts are updated on a survey stats page in real time.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#building-with-gradle"&gt;
  &lt;/a&gt;
  Building with Gradle
&lt;/h4&gt;

&lt;p&gt;As a sidenote, I've never used Gradle before, always preferring Maven as a classic tool that makes more sense to me 😃. This was an interesting challenge to create something new with Gradle, especially writing the build script with Kotlin DSL since there're not many ready-to-use examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tech-stack"&gt;
  &lt;/a&gt;
  Tech Stack
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#backend"&gt;
  &lt;/a&gt;
  🔸 Backend
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Kotlin 1.4&lt;/li&gt;
&lt;li&gt;Spring Boot 2.4.3 (JPA Data REST / Hibernate + Security + WebFlux)&lt;/li&gt;
&lt;li&gt;H2 Database with Liquibase database migrations&lt;/li&gt;
&lt;li&gt;Gradle&lt;/li&gt;
&lt;li&gt;JUnit 5&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#frontend"&gt;
  &lt;/a&gt;
  🔹 Frontend
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Vue.js 2 (with Vuex, Vue-router, Vue-image-upload)&lt;/li&gt;
&lt;li&gt;Bootstrap 4&lt;/li&gt;
&lt;li&gt;RSocket&lt;/li&gt;
&lt;li&gt;Apexcharts&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#launching"&gt;
  &lt;/a&gt;
  Launching
&lt;/h2&gt;

&lt;p&gt;🚀 To get it up and running follow the instructions from &lt;a href="https://github.com/anton-goncharov/kotlin-vue-surveys-demo#launch"&gt;the GitHub repo&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;Please reach me out if you have any questions or feedback. But keep in mind it's a boilerplate code withstanding permanent work in progress 🛠. Cheers!&lt;/p&gt;

</description>
      <category>github</category>
      <category>kotlin</category>
      <category>reactive</category>
      <category>vue</category>
    </item>
    <item>
      <title>Javascript Hoisting</title>
      <author>Naveenchandar</author>
      <pubDate>Tue, 06 Jul 2021 11:28:25 +0000</pubDate>
      <link>https://dev.to/naveenchandar/javascript-hoisting-2pde</link>
      <guid>https://dev.to/naveenchandar/javascript-hoisting-2pde</guid>
      <description>&lt;p&gt;Hoisting is one of the important concepts every javascript or its related frameworks developers should be familiar with. Ever wonder how function calls or variable access can be done even before declaring those. If that's so then, Welcome to &lt;strong&gt;Javascript Hoisting World!!!&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-hoisting"&gt;
  &lt;/a&gt;
  What is Hoisting?
&lt;/h2&gt;

&lt;p&gt;This is one of the most common interview questions in front end development and common answer will be &lt;br&gt;
All variable and function declarations are moved to top. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ir4Zxmvg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i9u2iy58y617rsv82hve.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ir4Zxmvg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i9u2iy58y617rsv82hve.jpg" alt="Hoisting"&gt;&lt;/a&gt;&lt;br&gt;
Really???😮&lt;br&gt;
&lt;strong&gt;Hoisting is not what you think!!!😕&lt;/strong&gt;&lt;br&gt;
Let us discuss and clarify everything regarding hoisting in today's post.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#misconception"&gt;
  &lt;/a&gt;
  Misconception
&lt;/h2&gt;

&lt;p&gt;If you are trying to search and learn about hoisting, almost everywhere you will be seeing the same definition. May be that's beginner friendly but definitely that's not true. &lt;strong&gt;In JavaScript, Nothing will be moved&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PA15LD3J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01d70rqq7q1b3x7cn4wv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PA15LD3J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01d70rqq7q1b3x7cn4wv.jpg" alt="JavaScript Hoisting"&gt;&lt;/a&gt;&lt;br&gt;
Let's discuss in detail.&lt;/p&gt;

&lt;p&gt;Before we start, let us understand how our code will be executed in javascript engine.&lt;br&gt;
JavaScript engine runs through our code twice. First time (creation phase) - the engine goes through the code and allocates memory for the declarations of variables and functions. Second time(Execution phase) is where it actually executes our code by going through it line by line, doing the assignments, calling the functions and so on..&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#variable-hoisting"&gt;
  &lt;/a&gt;
  Variable Hoisting
&lt;/h2&gt;

&lt;p&gt;Variables are one of the fundamental blocks of any programming language, the way each language defines how we declare and interact with variables can make or break a programming language. Thus any developer needs to understand how to effectively work with variables and their properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log('myName',myName);
var myName = 'JavaScript';
console.log('myName',myName);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you look at the above example and when you try to run the code, it will not throw error. First one will be &lt;code&gt;undefined&lt;/code&gt; and second one will be &lt;code&gt;Javascript&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is because no matter how are declaring variables, Javascript will always go through these lifecycles to delcare a variable,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Declaration&lt;/li&gt;
&lt;li&gt;Initialization&lt;/li&gt;
&lt;li&gt;Utilization.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So,&lt;br&gt;
According to this lifecycle, the above example code will be split into&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var myName -&amp;gt; Declaration
myName = 'JavaScript' -&amp;gt; Initialization
console.log('myName',myName); -&amp;gt; Utilization.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So,in the first run javascript will check for the declarations of variables/functions and allocates memory space. This is where all the variables will be declared with a default value &lt;code&gt;undefined&lt;/code&gt; and in the second run while running through all the code it will assign the actual value for it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Actual definition&lt;br&gt;
Javascript actually scans the code and takes all the variables and allocates separate memory space even before executing the code. Its just variable declarations are executed first, so they will be in reserved memory.&lt;/strong&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Hoisting"&gt;MDN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After introduction of &lt;a href="https://262.ecma-international.org/6.0/"&gt;ES6&lt;/a&gt;, Variables in Javascript can be declared by three types: var,let and const.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Another misconception is variable declared using var is only hoisted and let and const are not hoisted.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But that's not true. As per definition all the variable and function declarations are hoisted. But &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; hoisted a bit different.&lt;code&gt;Let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; are hoisted in block scope whereas &lt;code&gt;var&lt;/code&gt; is hoisted in global scope. (Scope is another important concept which we will discuss in future post).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log('myName',myName);
let myName = 'Javascript';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run the above code, you will be getting an error&lt;br&gt;
&lt;em&gt;Uncaught ReferenceError: myName is not defined&lt;/em&gt;.&lt;br&gt;
It's not the same case when you declare variable using var.&lt;br&gt;
Wait how's that??🤔&lt;br&gt;
Here comes a term called &lt;strong&gt;Temporal Dead Zone(TDZ)&lt;/strong&gt;.&lt;br&gt;
We are already in a middle of understanding one sci-fi term hoisting, but here comes the another sci-fi term called Temporal Dead Zone 🙄.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D9pE9QWW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tfm3o2kelrifa0d3l8e6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D9pE9QWW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tfm3o2kelrifa0d3l8e6.jpg" alt="Javascript-Hoisting"&gt;&lt;/a&gt;&lt;br&gt;
So, what exactly is Temporal Dead Zone?&lt;br&gt;
It is Time taken between declaring the variable(using &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt;) and initializing the variable.&lt;br&gt;
Let's go to the same code and will see why it shows reference error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/*
  let myName;
  //Beginning of the temporal dead zone
  console.log(firstname); // ReferenceError as accessed in the TDZ.
let myName = 'Javascript'; // Ending of the temporal dead zone
*/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Usage of &lt;code&gt;Let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; is recommended because unlike &lt;code&gt;var&lt;/code&gt;, there’s no risk of variable leakage outside of the scope of execution unless if needed. To learn more about var,let and const declarations, Please refer this &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements#declarations"&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#function-hoisting"&gt;
  &lt;/a&gt;
  Function Hoisting
&lt;/h2&gt;

&lt;p&gt;Functions are one of the fundamental building blocks in JavaScript.&lt;br&gt;
There are multiple ways to declare a function. Common ways to declare a functions are&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Function Declaration&lt;/li&gt;
&lt;li&gt;Function Expression&lt;/li&gt;
&lt;li&gt;Arrow Function&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Function Declaration&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;greetings();
function greetings(){
    console.log('Hello from dev community')
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run this example it won't throw any error because greetings will be declared on the first run by javascript engine due to hoisting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;greetings();
function greetings(){
 console.log('First',message);
 var message = 'Hello from Dev Community';
 console.log('Second',message);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run this code, first console will display &lt;code&gt;undefined&lt;/code&gt; because variables declared inside functions will be hoisted only top of the particular scope (code blocks). So the code will be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;greetings();
function greetings(){
 var message;
 console.log('First',message);
 message = 'Hello from Dev Community';
 console.log('Second',message);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Function Expression&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;greetings(); // Ouput: TypeError: expression is not a function.

var greetings = function hoisting() {
  console.log('Hello from function expression?');
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;JavaScript returns a &lt;code&gt;TypeError&lt;/code&gt; because unlike function declaration, only the variable was hoisted. When variables declared with var are hoisted, they are given a default value of &lt;code&gt;undefined&lt;/code&gt;. JavaScript then throws an error because the value of the variable is not a function at that point of time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Arrow Functions&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;greetings(); // Ouput: TypeError: expression is not a function.

const greetings = () =&amp;gt; {
  console.log('Hello from arrow functions?');
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This works same as function expression due to hoisting.When using arrow functions, or any other function expression, we must always define the function before we call it. Accessing variables before declaration is often a root cause of errors. To clarify&lt;/p&gt;

&lt;p&gt;Only &lt;strong&gt;function Declarations are hoisted&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#order-of-precedence"&gt;
  &lt;/a&gt;
  Order Of Precedence
&lt;/h2&gt;

&lt;p&gt;Always &lt;strong&gt;function declarations are given high priority than variable declarations&lt;/strong&gt; as per &lt;a href="https://262.ecma-international.org/5.1/#sec-10.5"&gt;ECMAScript, section 10.5&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var abc;
function abc(){}
console.log(typeof abc)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function abcd(){}
var abcd
console.log(typeof abcd)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run the above code, no matter what order you declare it, javascript engine will always gives high priority to function declarations than variable declarations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Let’s summarise what we’ve learned&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hoisting is a process that declares variables and functions into memory space ahead of assignment and initialization within the given scope of execution.&lt;/li&gt;
&lt;li&gt;Only variable declarations and function declarations are hoisted.&lt;/li&gt;
&lt;li&gt;const and let will be hoisted but cannot be read or accessed before their initialization.&lt;/li&gt;
&lt;li&gt;function declarations are given high priority than variable declarations while hoisting.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To avoid confusion of hoisting and issues, it’s better to declare variables and functions before accessing them. You’ll avoid plenty of bugs and undefined warnings filling your console.&lt;/p&gt;

&lt;p&gt;I hope this clarifies how hoisting works in JavaScript. It's definitely not a complicated one as it sounds, but it requires us to breakdown the different use cases and trying different scenarios to understand how things work under the hood.&lt;/p&gt;

&lt;p&gt;Thanks for reading this post. Have a great day🙂.&lt;br&gt;
Let's meet on the next post with another Javascript concept.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>angular</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Asynchronous Background Processing for Ruby or Rails using AWS Lambda Extensions. </title>
      <author>Ken Collins</author>
      <pubDate>Tue, 06 Jul 2021 11:25:53 +0000</pubDate>
      <link>https://dev.to/aws-heroes/asynchronous-background-processing-for-ruby-or-rails-using-aws-lambda-extensions-59bh</link>
      <guid>https://dev.to/aws-heroes/asynchronous-background-processing-for-ruby-or-rails-using-aws-lambda-extensions-59bh</guid>
      <description>&lt;p&gt;Ever since writing this post last year on &lt;a href="https://dev.to/aws-heroes/using-new-relic-apm-with-rails-on-aws-lambda-51gi"&gt;Using New Relic APM with Rails on AWS Lambda&lt;/a&gt;, I have always wanted to find a way to send APM data in a way that did not add extra milliseconds to the application's response times. Likewise, for smaller projects it would be nice to have a lightweight alternative to &lt;a href="https://github.com/customink/lambdakiq"&gt;Lambdakiq&lt;/a&gt; for ActiveJob similar to Brandon Hilkert's popular &lt;a href="https://github.com/brandonhilkert/sucker_punch"&gt;SuckerPunch&lt;/a&gt; gem. Today we have both with the &lt;a href="https://github.com/customink/lambda_punch"&gt;LambdaPunch&lt;/a&gt; gem. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/customink/lambda_punch"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zxvWwRpV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1yat4b33nybxm39mir0m.png" alt="LambdaPunch: Async Processing using Lambda Extensions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since this is my first, dive into the now generally available &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/runtimes-extensions-api.html"&gt;Lambda Extensions API&lt;/a&gt;, I'd like to share a little bit of how LambdaPunch works. Huge credit to AWS Community Builder Duarte Nunes for this post &lt;a href="https://dev.to/aws-builders/building-an-aws-lambda-extension-with-rust-3p81"&gt;Building an AWS Lambda extension with Rust&lt;/a&gt; which is a great in-depth read on how to author Lambda Extensions. Following is what makes our Ruby/Rails extension interesting.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%8F%97-architecture"&gt;
  &lt;/a&gt;
  🏗 Architecture
&lt;/h2&gt;

&lt;p&gt;Because AWS Lambda &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/runtimes-context.html"&gt;freezes the execution environment&lt;/a&gt; after each invoke, there is no "process" that continues to run after the handler's response. However, thanks to Lambda Extensions along with its "early return", we can do two important things. First, we leverage the &lt;a href="https://github.com/guard/rb-inotify"&gt;rb-inotify&lt;/a&gt; gem to send the extension process a simulated &lt;code&gt;POST-INVOKE&lt;/code&gt; event. We then use &lt;a href="https://ruby-doc.org/stdlib-3.0.1/libdoc/drb/rdoc/DRb.html"&gt;Distributed Ruby&lt;/a&gt; (DRb) from the extension to signal your application to work jobs off a queue. Both of these are synchronous calls. Once complete the LambdaPunch extensions signals it is done and your function is ready for the next request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6QkD2ybr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dk0zgjy6ejz31pwm490t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6QkD2ybr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dk0zgjy6ejz31pwm490t.png" alt="LambdaPunch Ruby Extension Sequence Diagrm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The LambdaPunch extension process is very small and lean. It only requires a few Ruby libraries and needed gems from your application's bundle. Its only job is to send signals back to your application on the runtime. It does this within a few milliseconds and adds no noticeable overhead to your function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  🎁 Installation
&lt;/h2&gt;

&lt;p&gt;Add this line to your project's &lt;code&gt;Gemfile&lt;/code&gt; and then make sure to &lt;code&gt;bundle install&lt;/code&gt; afterward.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'lambda_punch'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, within your application's handler file, make sure to start the LambdaPunch DRb server outside of your handler method. Within the handler method, add an &lt;code&gt;ensure&lt;/code&gt; section that lets the extension process know the request is done.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;LambdaPunch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start_server!&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:)&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;ensure&lt;/span&gt;
  &lt;span class="no"&gt;LambdaPunch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;handled!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Within your project or &lt;a href="https://lamby.custominktech.com/docs/anatomy"&gt;Rails application's&lt;/a&gt; &lt;code&gt;Dockerfile&lt;/code&gt;, after you copy your code, add this &lt;code&gt;RUN&lt;/code&gt; command to install the extension within your container's &lt;code&gt;/opt/extensions&lt;/code&gt; directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;bundle &lt;span class="nb"&gt;exec &lt;/span&gt;rake lambda_punch:install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are using &lt;code&gt;LambdaPunch&lt;/code&gt; with a non-Rails project, add this to your Rake file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;spec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Gem&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Specification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_by_name&lt;/span&gt; &lt;span class="s1"&gt;'lambda_punch'&lt;/span&gt;
&lt;span class="nb"&gt;load&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;gem_dir&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/lib/lambda_punch/tasks/install.rake"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  🧰 Usage
&lt;/h2&gt;

&lt;p&gt;Anywhere in your application's code, use the &lt;code&gt;LambdaPunch.push&lt;/code&gt; method to add blocks of code to your jobs queue.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;LambdaPunch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;push&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example, if you are using Rails with AWS Lambda via the &lt;a href="https://lamby.custominktech.com/"&gt;Lamby&lt;/a&gt; gem along with &lt;a href="https://dev.to/aws-heroes/using-new-relic-apm-with-rails-on-aws-lambda-51gi"&gt;New Relic APM&lt;/a&gt; here is how your handler function might appear to ensure their metrics are flushed after each request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:)&lt;/span&gt;
  &lt;span class="no"&gt;Lamby&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;handler&lt;/span&gt; &lt;span class="vg"&gt;$app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;
&lt;span class="k"&gt;ensure&lt;/span&gt;
  &lt;span class="no"&gt;LambdaPunch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;push&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;NewRelic&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Agent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;agent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;flush_pipe_data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="no"&gt;LambdaPunch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;handled!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#activejob"&gt;
  &lt;/a&gt;
  ActiveJob
&lt;/h3&gt;

&lt;p&gt;You can use LambdaPunch with Rails' ActiveJob. &lt;strong&gt;For a more robust background job solution, please consider using AWS SQS with the &lt;a href="https://github.com/customink/lambdakiq"&gt;Lambdakiq&lt;/a&gt; gem.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;active_job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;queue_adapter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:lambda_punch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#timeouts"&gt;
  &lt;/a&gt;
  Timeouts
&lt;/h3&gt;

&lt;p&gt;Your function's timeout is the max amount to handle the request and process all extension's invoke events. If your function times out, it is possible that queued jobs will not be processed until the next invoke.&lt;/p&gt;

&lt;p&gt;If your application integrates with API Gateway (which has a 30 second timeout) then it is possible your function can be set with a higher timeout to perform background work. Since work is done after each invoke, the LambdaPunch queue should be empty when your function receives the &lt;code&gt;SHUTDOWN&lt;/code&gt; event. If jobs are in the queue when this happens they will have two seconds max to work them down before being lost.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For a more robust background job solution, please consider using AWS SQS with the &lt;a href="https://github.com/customink/lambdakiq"&gt;Lambdakiq&lt;/a&gt; gem.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#logging"&gt;
  &lt;/a&gt;
  Logging
&lt;/h3&gt;

&lt;p&gt;The default log level is &lt;code&gt;error&lt;/code&gt;, so you will not see any LambdaPunch lines in your logs. However, if you want some low level debugging information on how LambdaPunch is working, you can use this environment variable to change the log level.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Variables&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;LAMBDA_PUNCH_LOG_LEVEL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;debug&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#errors"&gt;
  &lt;/a&gt;
  Errors
&lt;/h3&gt;

&lt;p&gt;As jobs are worked off the queue, all job errors are simply logged. If you want to customize this, you can set your own error handler.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;LambdaPunch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;error_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#cloudwatch-metrics"&gt;
  &lt;/a&gt;
  📊 CloudWatch Metrics
&lt;/h2&gt;

&lt;p&gt;When using Extensions, your function's CloudWatch &lt;code&gt;Duration&lt;/code&gt; metrics will be the sum of your response time combined with your extension's execution time. For example, if your request takes &lt;code&gt;200ms&lt;/code&gt; to respond but your background task takes &lt;code&gt;1000ms&lt;/code&gt; your duration will be a combined &lt;code&gt;1200ms&lt;/code&gt;. For more details see the &lt;em&gt;"Performance impact and extension overhead"&lt;/em&gt; section of the &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/runtimes-extensions-api.html"&gt;Lambda Extensions API&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thankfully, when using Lambda Extensions, CloudWatch will create a &lt;code&gt;PostRuntimeExtensionsDuration&lt;/code&gt; metric that you can use to isolate your true response times &lt;code&gt;Duration&lt;/code&gt; &lt;a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html"&gt;using some metric math&lt;/a&gt;. Here is an example where the metric math above is used in the first "Duration (response)" widget.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Q0B8NhV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/91rxa6omap8o0dilhfu7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Q0B8NhV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/91rxa6omap8o0dilhfu7.png" alt="CloudWatch Metric Math"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uJf4xz1f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lfot23dxuld5lp4u910g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uJf4xz1f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lfot23dxuld5lp4u910g.png" alt="CloudWatch Durations"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>lambda</category>
      <category>containers</category>
      <category>ruby</category>
    </item>
    <item>
      <title>Things I learned about creating a C API for my Rust crate by making every mistake about creating a C API </title>
      <author>Tim McNamara</author>
      <pubDate>Tue, 06 Jul 2021 10:22:54 +0000</pubDate>
      <link>https://dev.to/timclicks/things-i-learned-about-creating-a-c-api-for-my-rust-crate-by-making-every-mistake-about-creating-a-c-api-3l6i</link>
      <guid>https://dev.to/timclicks/things-i-learned-about-creating-a-c-api-for-my-rust-crate-by-making-every-mistake-about-creating-a-c-api-3l6i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  tl;dr
&lt;/h2&gt;

&lt;p&gt;Here are my tips:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C programmers want to allocate and free their own memory. They don't want a string provided for them. They want you to write to an array that they control.&lt;/li&gt;
&lt;li&gt;You need to "box" local variables if you want them to out-live the function. &lt;/li&gt;
&lt;li&gt;Don't model your API after &lt;code&gt;libc&lt;/code&gt;. In particular, you should avoid global state.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;A few weeks ago, I stumbled upon a way for creating unique identifiers that are still sortable: &lt;a href="https://github.com/ulid/spec"&gt;ULIDs&lt;/a&gt;. ULIDs are very similar to UUIDs are typically used: as random identifiers [footnote: you should ensure that you're using UUIDv4 if you're using them this way, otherwise your IDs are not random]. &lt;/p&gt;

&lt;p&gt;ULIDs have a neat trick trick though, newer IDs are higher than older IDs. IDs generated within the same millisecond are random, but if the interval between them is longer than that then you'll be able to compare them.&lt;/p&gt;

&lt;p&gt;Naturally, I thought that I should try and implement them. &lt;a href="https://github.com/timClicks/ulid-lite"&gt;And I did&lt;/a&gt;. In fact, some benchmarking indicates that I may have created the fastest Rust implementation: it takes my computer roughly 28 nanoseconds to generate an identifier. That's 35,000 ULIDs per millisecond.&lt;/p&gt;

&lt;p&gt;Then I thought about exposing my Rust code as a C library. &lt;code&gt;libulid&lt;/code&gt;. And then I discovered that I knew almost nothing about writing a C library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lessons"&gt;
  &lt;/a&gt;
  Lessons
&lt;/h2&gt;

&lt;p&gt;Here are a few things that I needed to fix before getting &lt;code&gt;libulid&lt;/code&gt; ready.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#global-state"&gt;
  &lt;/a&gt;
  Global state
&lt;/h3&gt;

&lt;p&gt;One of the first things that I did was to take inspiration from the &lt;code&gt;rand()&lt;/code&gt; function from &lt;code&gt;libc&lt;/code&gt;. &lt;code&gt;rand()&lt;/code&gt; requires a &lt;code&gt;seed()&lt;/code&gt; function to be called that initializes a global random seed.&lt;/p&gt;

&lt;p&gt;My initial API involved calling &lt;code&gt;ulid_seed()&lt;/code&gt; and then &lt;code&gt;ulid_new()&lt;/code&gt; later on. This created two issues. First it was horrible to work with. Secondly, it wasn't thread safe. &lt;/p&gt;

&lt;p&gt;It turns out that the thread safety problem is &lt;a href="https://man7.org/linux/man-pages/man3/rand.3.html"&gt;well documented&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The function &lt;code&gt;rand()&lt;/code&gt; is not reentrant, since it uses hidden state that is modified on each call.  This might just be the seed to be used by the next call, or it might be something more elaborate.  In order to get reproducible behavior in a threaded application, this state must be made explicit; this can be done using the reentrant function &lt;code&gt;rand_r()&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Why did I use functionality that is not thread safe? Well, I was working with the rust crate and didn't check the upstream &lt;code&gt;libc&lt;/code&gt; documentation. &lt;/p&gt;

&lt;p&gt;I was somewhat embarrassed, although very relieved, that a contributor to my code that raised the thread safety issue. Thanks &lt;a href="https://github.com/jonasmalacofilho"&gt;Jonas!&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To avoid the issue, I ask users of the library to initialize a &lt;code&gt;ulid_ctx&lt;/code&gt; object that stores the random seed and pass a pointer to it when creating a new ULID.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#t-suffix-is-reserved"&gt;
  &lt;/a&gt;
  _t suffix is reserved
&lt;/h3&gt;

&lt;p&gt;At one stage, I added a &lt;code&gt;_t&lt;/code&gt; suffix to all of the types that I created. It turns out that this convention is reserved by POSIX for its types. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#let-callers-manage-their-own-memory"&gt;
  &lt;/a&gt;
  Let callers manage their own memory
&lt;/h3&gt;

&lt;p&gt;One of the things that caused quite a few problems was attempting to create raw pointers in Rust, then hand them across the FFI boundary.&lt;/p&gt;

&lt;p&gt;I did this to match the ULID spec, which specifies that the API to generate a ULID should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ulid()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Rust, this is a fine thing to do. But in C, you have a decision to make: where will the memory be allocated and freed? Will it be the responsibility of the caller or the library?&lt;/p&gt;

&lt;p&gt;I spent several days trying to figure out how to do something very simple: allocate an array in Rust on the heap, pass a pointer to that array to C, then free the memory later in Rust. I eventually gave up on getting all of the pieces work together, because it seemed like C programmers would like to do something else entirely. They want to manage their own memory.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#acknowledgements"&gt;
  &lt;/a&gt;
  Acknowledgements
&lt;/h2&gt;

&lt;p&gt;Many thanks to the &lt;a href="https://www.includecpp.org/discord/"&gt;#include  Discord server&lt;/a&gt; for offering lots of advice and encouragement during this process.&lt;/p&gt;

&lt;p&gt;Thanks also to &lt;a href="https://github.com/jonasmalacofilho"&gt;Jonas&lt;/a&gt; for providing lots of patches!  &lt;/p&gt;

</description>
      <category>rust</category>
      <category>c</category>
      <category>ffi</category>
    </item>
    <item>
      <title>A free copy &amp; paste collection of TailwindCSS buttons 🌪</title>
      <author>Bobby Iliev</author>
      <pubDate>Tue, 06 Jul 2021 10:19:49 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/a-free-copy-paste-collection-of-tailwindcss-buttons-53o7</link>
      <guid>https://dev.to/bobbyiliev/a-free-copy-paste-collection-of-tailwindcss-buttons-53o7</guid>
      <description>&lt;p&gt;Here is a free, copy &amp;amp; paste collection of TailwindCSS buttons. &lt;/p&gt;

&lt;p&gt;Browse through this collection of awesome and unique buttons and use them in any of your upcoming or exiting TailwindCSS project 🤩&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.producthunt.com/posts/tailwindcss-buttons"&gt;TailwindCSS Buttons&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B4KXCNQU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m010m4grrmgzl3x4z3wz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B4KXCNQU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m010m4grrmgzl3x4z3wz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>webdev</category>
      <category>design</category>
      <category>html</category>
    </item>
    <item>
      <title>A framework for the web that you will love.</title>
      <author>Tronic247</author>
      <pubDate>Tue, 06 Jul 2021 10:12:47 +0000</pubDate>
      <link>https://dev.to/tronic247/a-framework-for-the-web-that-you-will-love-2lof</link>
      <guid>https://dev.to/tronic247/a-framework-for-the-web-that-you-will-love-2lof</guid>
      <description>&lt;p&gt;In the web , there are lot of CSS material design frameworks based on jQuery. But, you will like this framework. Let's see some features of It before telling the name.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comparison"&gt;
  &lt;/a&gt;
  Comparison
&lt;/h2&gt;

&lt;p&gt;Let's compare the basic component of material design framework ** The Button **&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZsJ8A8te--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oeod5hpey2to4yxbedq5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZsJ8A8te--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oeod5hpey2to4yxbedq5.png" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
As you can see the the button in the upper right is more beautiful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#time-to-say-the-name"&gt;
  &lt;/a&gt;
  Time to say the name
&lt;/h2&gt;

&lt;p&gt;Oh yes, the name of the framework is &lt;a href="https://tronic247.github.io/material-docs/"&gt;Tronic247 Material&lt;/a&gt;. The framework is still in development :{ but, you can help it.&lt;br&gt;
And that's all if you have an issue or comment please comment down there and give a heart to this post :D.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>jquery</category>
      <category>framework</category>
    </item>
    <item>
      <title>12 things I learned as a volunteer programming teacher</title>
      <author>Joao L.</author>
      <pubDate>Tue, 06 Jul 2021 09:54:08 +0000</pubDate>
      <link>https://dev.to/mrlopis/12-things-i-learned-as-a-volunteer-programming-teacher-2pd6</link>
      <guid>https://dev.to/mrlopis/12-things-i-learned-as-a-volunteer-programming-teacher-2pd6</guid>
      <description>&lt;p&gt;For the past semester, I've joined the &lt;a href="//redi-school.org/"&gt;ReDI School of Digital Integration&lt;/a&gt; as a volunteer teaching Introduction to Programming using Python. ReDI's students &lt;a href="https://www.redi-school.org/mission"&gt;are mainly refugees and migrants who want to learn digital skills&lt;/a&gt;, so their backgrounds are very diverse. Most of them had never written a single line of code before.&lt;/p&gt;

&lt;p&gt;This was not my first experience with teaching. I had taught high-school students to program using the visual programming tool &lt;a href="https://www.alice.org/"&gt;Alice&lt;/a&gt; for 2 weeks. I've also taught short workshops before. However, this was my first time teaching a whole semester.&lt;/p&gt;

&lt;p&gt;These are 12 things I learned over this semester. I wrote this article over the course of last months, and they are not written on any particular order, other than whatever occurred to me first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-avoid-imaginary-non-sense-program-examples"&gt;
  &lt;/a&gt;
  1. Avoid imaginary "non sense" program examples.
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;my_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_custom_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;some_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;People who never learned programming before don't yet have the same mental model as a seasoned programmer. They are already struggling with the abstractions. If you use nonsense programs that don't mean anything, it's even harder to understand fundamental concepts. They are distracting. What is &lt;code&gt;my_var&lt;/code&gt;? Is it a function from python? And what about &lt;code&gt;my_custom_function&lt;/code&gt;? Do I need this function to create a custom function?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-reduce-abstraction-of-examples"&gt;
  &lt;/a&gt;
  2. Reduce abstraction of examples
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;favourite_singers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Justin Bieber'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Lana Del Rey'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;People respond better to examples based on real concepts like food, cities, or famous people. Everyone will understand that &lt;code&gt;favourite_singers&lt;/code&gt; is a list of my favourite singers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-avoid-special-syntax-that-was-not-taught-yet"&gt;
  &lt;/a&gt;
  3. Avoid special syntax that was not taught yet
&lt;/h2&gt;

&lt;p&gt;When teaching introductory programming to newbies, it's important to not overwhelm them with new syntax. Students get confused and frustrated if you keep telling them "just ignore this for now; I will talk about it later". Always try to build on what they learned before.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-careful-with-the-special-meaning-of-words"&gt;
  &lt;/a&gt;
  4. Careful with the special meaning of words
&lt;/h2&gt;

&lt;p&gt;Programing is full of jargon. Many of the metaphors' meanings we use today have been lost to time. Take for instance the concept of "return" from a function. What does it mean to return? Return? Return what? From where? Where to? And to Whom?? Back in CS classes we learned about the runtime stack and how programs pass and retrieve data to a from other routines. But these people never heard about this before.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-mind-peoples-backgrounds"&gt;
  &lt;/a&gt;
  5. Mind people's backgrounds
&lt;/h2&gt;

&lt;p&gt;If you are teaching to the general public, specially if you are teaching adults, don't assume they know physics, or that they remember their Math classes from 20 years ago. They might not remember what the value of the number Pi is, let alone what prime numbers are, or how to calculate areas or polygons.&lt;/p&gt;

&lt;p&gt;If you want to use these concepts in your examples, introduce  them clearly first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-use-the-minimum-viable-code-in-examples"&gt;
  &lt;/a&gt;
  6. Use the minimum viable code in examples
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'this line still runs! :)'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As I mentioned before, students will invariably get hang up on unexpected bits of your code. For example, if you are teaching loops, avoid mixing if/else blocks, and vice versa. In the example above, do we need &lt;code&gt;print('this line still runs! :)')&lt;/code&gt; for the function to return from the if? It might sound silly, but this was basically a confusing point in one class!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-your-time-is-a-scarce-and-valuable-resource-use-it-wisely"&gt;
  &lt;/a&gt;
  7. Your time is a scarce and valuable resource - use it wisely
&lt;/h2&gt;

&lt;p&gt;In my case, I'm a volunteer teacher. I teach (or assist teaching) 2 hours per week, but am able to give a little bit more if a student needs some 1:1 help.&lt;/p&gt;

&lt;p&gt;Spending some time explaining something to a student can be invaluable to their learning. But if you have 20 students, there's no way you can support them all. &lt;/p&gt;

&lt;p&gt;It's hard, but giving students tools to learn by themselves is the only fair way. There will always be one or two students that will try to "monopolize" most of your time. It can become a bad habit, and they need to learn to solve problems by themselves.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-space-for-questions-during-class-is-good-but-keep-it-strict"&gt;
  &lt;/a&gt;
  8. Space for questions during class is good, but keep it strict
&lt;/h2&gt;

&lt;p&gt;I tried to open the stage for questions about the last lesson, and about the homework. I believed that it would be useful to everyone and it would foster discussion.&lt;/p&gt;

&lt;p&gt;Instead, I got sucked in to reviewing some piece of homework that would only benefit a single student. Another time, the "open stage" led to questions about topics from future classes. This was a time sink and not fair for the other 20 students in the call.&lt;/p&gt;

&lt;p&gt;Allowing for questions is great, but you should make it clear about what the questions should be. If the current topic is last week's homework, I'm not answering questions about yesterday's class right now. But maybe we can talk shortly after class.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-the-students-that-ask-the-most-questions-are-probably-the-most-advanced"&gt;
  &lt;/a&gt;
  9. The students that ask the most questions, are probably the most advanced
&lt;/h2&gt;

&lt;p&gt;The students that are totally overwhelmed will mostly likely stay quiet the whole time. The ones that make lots of questions, even if they sound totally lost, are probably the ones putting the most effort into understanding the topics and practicing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-its-really-hard-work"&gt;
  &lt;/a&gt;
  10. It's really hard work
&lt;/h2&gt;

&lt;p&gt;I never realized how much work it would be to prepare a 2-hour-long class. I've grown a lot of respect for teachers during this semester. I was only required to prepare a class every couple weeks, but it was quite laborious.&lt;/p&gt;

&lt;p&gt;I always wanted to make more engaging classes and avoid boring bullet points. However, even a simple pop quiz can take a couple hours to prepare and test.&lt;/p&gt;

&lt;p&gt;I also wanted to have the next class slides ready ASAP for students who like to read them beforehand. However that turned out to be quite hard to plan - I have a life and a full-time job who always got in the way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-be-ready-to-be-disappointed"&gt;
  &lt;/a&gt;
  11. Be ready to be disappointed
&lt;/h2&gt;

&lt;p&gt;There will always be students who have a hard time keeping up with the course and the reasons for that can vary widely - from lack of time, to lack of interest. It's really demotivating and it made me feel like a bad teacher. Could I have done better early on to not let them fall behind?&lt;/p&gt;

&lt;p&gt;Also, classes will never quite go the way you expect them. As I mentioned, students will get hung up on unexpected things and you need to be prepared to adapt the lesson on the spot.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-be-ready-to-be-amazed"&gt;
  &lt;/a&gt;
  12. Be ready to be amazed
&lt;/h2&gt;

&lt;p&gt;Despite the struggles, people are amazingly creative. My students had to work on a group project for the last 3 weeks of the semester and I was worried if they would be able to do so. In the days before they started the project they seemed to confused and lost!&lt;/p&gt;

&lt;p&gt;That's why I was seriously amazed by their drive, creativity and coordination, and how they were able to use the little knowledge of python we provided them and build very interesting prototypes. The final presentations were also very good and entertaining - so many great speakers in the class!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-notes"&gt;
  &lt;/a&gt;
  Final notes
&lt;/h2&gt;

&lt;p&gt;I've always liked teaching, so this experience was very rewarding for me. This semester was completely remote and over Zoom, so not exactly ideal. On the other hand it allowed us to use fun tools like pop quizzes and polls.&lt;/p&gt;

&lt;p&gt;If you want to give it a try, ReDI is usually looking for more teachers. I only committed to teach once every few weeks because I was one of 7 teachers. ReDI is currently present in Berlin, Munich, Copenhagen and NRW.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.redi-school.org"&gt;https://www.redi-school.org&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>teaching</category>
      <category>python</category>
      <category>volunteering</category>
    </item>
  </channel>
</rss>
