<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>JavaScript Array Methods made easy : array.filter() (Part 1)</title>
      <author>Parnika-Gupta</author>
      <pubDate>Thu, 12 Aug 2021 15:12:33 +0000</pubDate>
      <link>https://dev.to/parnikagupta/javascript-array-methods-you-need-to-know-right-now-array-filter-part-1-21nn</link>
      <guid>https://dev.to/parnikagupta/javascript-array-methods-you-need-to-know-right-now-array-filter-part-1-21nn</guid>
      <description>&lt;p&gt;&lt;strong&gt;What is an Array?&lt;/strong&gt;&lt;br&gt;
An array is a variable that allows us to hold multiple values at a time. In normal situations we use variables to store single values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;item1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Milk&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;item2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Butter&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;item3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Bread&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But who’s grocery list is ever that small? And what if it’s not a grocery list with limited items but a list of transactions made by your bank account and you want to search for one particular transaction among hundreds? It would not be feasible to assign a designated variable for each transaction and then iterate over them when required.&lt;br&gt;
Whether you want to make a grocery list, or need to list down things to do in a day, an array is your answer!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;item1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;//Creating an Array&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;grocery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Milk&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Butter&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Bread&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;//Array of grocery items&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Array Methods&lt;/strong&gt;&lt;br&gt;
JavaScript provides multiple methods that make functioning with arrays easier. Here are a few that you will surely find yourself using quite often.&lt;br&gt;
Here is an example of an Array that we will be using to understand the array methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Milk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Butter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bread&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Curd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Juice&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Eggs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Biscuits&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;filter()&lt;/strong&gt;&lt;br&gt;
The filter() method filters an array based on a test function and returns the resultant array. In simpler terms, it takes in an array, passes the elements of the array through a function, and only returns an array of the elements that return true.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;filter() doesn’t work for empty array items&lt;/li&gt;
&lt;li&gt;filter() doesn’t change the initial array&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;thisValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Parameters (* represents required parameters)&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;function*&lt;/strong&gt;: Callback function, tests each element in an array. Returns true to keep the element and false to skip the element. It further takes 3 arguments:&lt;br&gt;
&lt;strong&gt;currentValue*&lt;/strong&gt;: Value of current element&lt;br&gt;
&lt;strong&gt;index&lt;/strong&gt;: Index of the current element&lt;br&gt;
&lt;strong&gt;arr&lt;/strong&gt;: Array object the current element belongs to&lt;br&gt;
&lt;strong&gt;thisValue&lt;/strong&gt;: Value to be used as “this” when executing the function. If the parameter is empty, “undefined” is passed as “this” value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filteredItems&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt; : &lt;em&gt;filteredItems&lt;/em&gt; Array&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Milk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bread&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Juice&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Biscuits&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nl"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nx"&gt;Prototype&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looks like it worked! All the items that did not have price under 35 are not included in our &lt;em&gt;filteredItems&lt;/em&gt; array.&lt;br&gt;
Now let’s see if there is any change to our &lt;em&gt;items&lt;/em&gt; array!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt; : &lt;em&gt;items&lt;/em&gt; array&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Milk&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Butter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bread&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Curd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Juice&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Eggs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Biscuits&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nl"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nx"&gt;Prototype&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our &lt;em&gt;items&lt;/em&gt; array is just as it was in the beginning.&lt;br&gt;
This was about the filter() array method. Here is a little illustration I made to help you understand it better.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m8ebyfEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7acv3lpxzv1damp99lwq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m8ebyfEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7acv3lpxzv1damp99lwq.png" alt="array.filter() illustration" title="array.filter(): illustration by Parnika Gupta"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to learn more about filter() method, here are a few references:&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=0qsFDFC2oEE"&gt;https://www.youtube.com/watch?v=0qsFDFC2oEE&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.digitalocean.com/community/tutorials/js-filter-array-method"&gt;https://www.digitalocean.com/community/tutorials/js-filter-array-method&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>redux</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Github Web editor: Edit any repo with just a press</title>
      <author>projectashik</author>
      <pubDate>Thu, 12 Aug 2021 15:08:47 +0000</pubDate>
      <link>https://dev.to/projectashik/github-web-editor-edit-any-repo-with-just-a-press-5glj</link>
      <guid>https://dev.to/projectashik/github-web-editor-edit-any-repo-with-just-a-press-5glj</guid>
      <description>&lt;p&gt;Do you want to have your mind blown?  🤯&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Check this new feature of Github&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Just go to any of the repo you like and just press .. Yeah, you have seen it right. Just press on the period (.) sign on the keyboard and your mind will blow. This will open the code editor in the browser with the files of Github Repo.&lt;/p&gt;

&lt;p&gt;Don't forgot to watch this video.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.loom.com/share/1940c85408444269bb1a90b84df71ab2"&gt;https://www.loom.com/share/1940c85408444269bb1a90b84df71ab2&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>code</category>
      <category>vscode</category>
      <category>git</category>
    </item>
    <item>
      <title>Como ser o programador júnior que toda empresa quer contratar?</title>
      <author>Elio Fernandes</author>
      <pubDate>Thu, 12 Aug 2021 15:05:29 +0000</pubDate>
      <link>https://dev.to/eliofernandes28/como-ser-o-programador-junior-que-toda-empresa-quer-contratar-3nb1</link>
      <guid>https://dev.to/eliofernandes28/como-ser-o-programador-junior-que-toda-empresa-quer-contratar-3nb1</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Primeiro Post ⚠️&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#sobre-mim"&gt;
  &lt;/a&gt;
  Sobre mim
&lt;/h3&gt;

&lt;p&gt;Prazer sou Elio Fernandes, sou desenvolvedor Full-Stack e tenho 20 anos, comecei a minha carreira profissional (Estagiário) com 17 anos de idade, como o titulo sugere esse post contém algumas dicas de coisas que aprendi ao longo de 3 anos como Desenvolvedor. Inspirado pelo &lt;em&gt;William Oliveira&lt;/em&gt;, tenho um grande respeito por esse cara, muito top. Razão pela qual decidi partilhar esse post para o pessoal de cá.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Como conseguir se destacar no mercado logo como iniciante em programação, como ser o programador ou programadora junior que toda empresa quer contratar.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;O que mais ouvimos falar é que o mercado de programação está muito aquecido, que existem muitas vagas e que os programadores e programadoras estão escolhendo emprego. OK, é verdade. Mas onde estão as vagas para pessoas iniciantes?&lt;/p&gt;

&lt;p&gt;Depois de estudar tanto, praticar e não aguentar mais de ansiedade de saber o quanto ainda precisamos aprender para sermos considerados bons no que fazemos, o maior problema que enfrentamos na área de desenvolvimento de software é conseguir o primeiro emprego. Depois do primeiro emprego, tudo ficará mais fácil.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kUSlP-B0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzejqd2h8ej68rhbijpk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kUSlP-B0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzejqd2h8ej68rhbijpk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Porém as empresas nos colocam naquele velho paradigma:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Como conseguir o primeiro emprego sem nunca ter trabalhado na área se as empresas buscam pessoas para o primeiro emprego COM experiência?"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Isso quando não procuram um estagiário sênior. Aquele profissional que é iniciante, mas domina 15 linguagens de programação, 35 frameworks JavaScript, 212 maneiras de subir uma aplicação para produção e ainda faz o café da turma.&lt;/p&gt;

&lt;p&gt;Realmente o mercado nos coloca em uma situação desesperadora quando somos pessoas iniciantes na área. Existem maneiras de não nos perdermos nesse universo de requisitos e entrevistas estranhas: manter nosso foco e aprender a nos valorizarmos como profissionais, não como “profissionais iniciantes”.&lt;/p&gt;

&lt;p&gt;Para ser uma pessoa em nível júnior que toda empresa quer contratar vamos precisar arregaçar as mangas e sair da nossa zona de conforto, além de conhecer bem o que as empresas querem. Os conselhos que dou neste artigo são para pessoas que querem conseguir o emprego rapidamente e/ou um bom emprego e, para isso, é necessário nos esforçarmos (às vezes um pouco/muito mais dependendo do seu contexto social atual). Nada de bom em nossa carreira virá sem esforço, então você vai precisar ler estas dicas e assumir o protagonismo de sua vida, vai ter que tomar as rédeas do seu futuro profissional.&lt;/p&gt;

&lt;p&gt;Eu começo dando conselhos de vida para você e depois eu foco na parte técnica. Espero que, depois destas dicas, você consiga seu sonhado emprego como dev. Saiba que já estou torcendo por você.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cuidado-com-o-desespero"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Cuidado com o desespero&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;O desespero é seu inimigo. Não importa a situação que nos deparamos, se perdemos a calma podemos cair em uma armadilha terrível ou fazer coisas que vamos nos arrepender depois.&lt;/p&gt;

&lt;p&gt;Não peça para trabalhar de graça, cuidado ao pedir uma oportunidade para aprender, onde a empresa vai te colocar na menor posição, com o menor salário de todos e com as “tarefas mais fáceis”.&lt;/p&gt;

&lt;p&gt;O que pode acontecer em uma situação dessas é a empresa se aproveitar da sua situação para ter mais um braço, mais um recurso, em sua equipe pagando pouco pela produção. Não se esqueça: a empresa não é sua amiga. Apesar da boa intenção de algumas pessoas que trabalham nela, a empresa precisa do melhor ou maior resultado com baixo custo e é só. Depois que você entra em um emprego com um salário abaixo do mercado ou abaixo dos demais da equipe será muito difícil conseguir equiparar sua faixa aos demais e daí você pode cair no fluxo de ter que trocar de emprego para então ter um salário decente para o que você faz.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aprenda-a-expor-seus-pontos-fortes"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Aprenda a expor seus pontos fortes&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Já percebi nas mentorias e em entrevistas com pessoas em nível iniciante (estagiários(as) e juniores) que o que elas mais fazem é dizer o que ainda não sabem.&lt;/p&gt;

&lt;p&gt;Por exemplo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Eu sei Python, mais ainda não sei Orientação a Objetos&lt;/li&gt;
&lt;li&gt;Já faço aplicações com JavaScript, mas ainda não domino PWAs&lt;/li&gt;
&lt;li&gt;Eu uso Elixir, mas apenas com framework Phoenix.&lt;/li&gt;
&lt;li&gt;Eu uso AWS, mas ainda não sei criar um pipeline no Jenkins&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Olha, eu fico bem feliz de saber que você tem noção da importância da orientação a objetos, de que está antenado(a) com o mercado e conhece as PWAs e que já deve ter ouvido falar de continuous integration e o uso do Jenkins ou outras ferramentas do tipo, mas o que eu quero ouvir mesmo de você é o que você sabe fazer.&lt;/p&gt;

&lt;p&gt;Se você sabe Python, o que você já fez com a linguagem? Se você faz aplicações com JavaScript, quais aplicações você fez? Se usa AWS, o que foi que você usou da plataforma?&lt;/p&gt;

&lt;p&gt;Você tem muito para falar sobre seu conhecimento, você só não se valoriza. Na hora da entrevista a maioria das pessoas em nível júnior se auto-sabotam. Até mesmo depois de algum tempo de área nós fazemos isso, mas no início de carreira é extremamente recorrente.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#voc%C3%AA-precisa-saber-uma-linguagem-de-programa%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Você precisa saber uma linguagem de programação&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Como existem muitas linguagens, muitas ferramentas e muitas vagas com requisitos absurdos, pessoas iniciantes se perdem em “o que eu devo saber?”.&lt;/p&gt;

&lt;p&gt;Você deve buscar um foco. Analise o mercado e veja quais são as tecnologias que você vai precisar estudar e foque nelas. Com certeza você vai ver uma lista imensa de linguagens e frameworks, mas todas essas coisas são apenas ferramentas para um mesmo objetivo.&lt;/p&gt;

&lt;p&gt;Se você quer trabalhar com backend, temos Python, PHP, Java, C# e JavaScript como linguagens com muita oportunidade de mercado, mas sabendo bem qualquer uma delas você consegue aprender outra com menos dificuldades. Se você quiser aprender todas de uma só vez, vai cair na armadilha da paralisia por análise e não vai sair do lugar. Você nunca terá um portfólio (comento sobre isso mais para frente) para apresentar em uma entrevista ou no seu currículo.&lt;/p&gt;

&lt;p&gt;Foque naquilo que mais te interessa: a empresa ou a área de atuação onde você gostaria de trabalhar está usando o que?&lt;/p&gt;

&lt;p&gt;Se você quer trabalhar em uma agência que utiliza WordPress e estudar Java, não vai dar muito certo. O mesmo vai acontecer se você quiser trabalhar em uma startup focada em dados e não estudar Python.&lt;/p&gt;

&lt;p&gt;O que você precisa é encontrar uma linguagem ou um nicho (web, mobile, back, front, o que for) e aprender muito sobre aquilo. Então você estará se preparando bem para a entrevista técnica, onde será cobrado conhecimento neste nicho, não em tudo o que existe na área de computação.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aprenda-testes-de-unidade"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Aprenda testes de unidade&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Unit tests&lt;/strong&gt;, ou &lt;em&gt;testes de unidade&lt;/em&gt;, não eram tão importantes para uma pessoa iniciante a algum tempo atrás, mas hoje, como existe muito material disponível na internet e como é muito mais fácil fazer isso hoje em dia, isso se tornará um diferencial no seu currículo.&lt;/p&gt;

&lt;p&gt;Se você não perder tempo com a falta de foco, conseguirá tempo para aprender testes de unidade e garantir um diferencial valioso de mercado que é a qualidade de software logo no começo da sua carreira.&lt;/p&gt;

&lt;p&gt;A maioria das empresas que trabalham com produtos grandes (ou mesmo as que estão começando) possuem uma massa de testes bem grande para garantir que não terão problemas ao adicionar algo novo ou mesmo deletar uma funcionalidade antiga do sistema. Se você chegar em uma entrevista demonstrando este conhecimento irá detonar!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#versionamento-de-c%C3%B3digo"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Versionamento de código&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Você precisa aprender versionamento de código e, hoje, principalmente aprender a usar o Git.&lt;/p&gt;

&lt;p&gt;Não é necessário decorar tudo o que o Git nos possibilita fazer, pois temos artigos que listam os comandos mais utilizados e é só o que será necessário para o primeiro emprego, mas é importante que você saiba versionar código e que você mande o teste prático com o mínimo de carinho (commits com mensagens bem descritivas, um README decente e um histórico organizado).&lt;/p&gt;

&lt;p&gt;O Git ainda será necessário para o próximo passo das minhas dicas: a criação do portfólio.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crie-um-portf%C3%B3lio"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Crie um portfólio&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;É estranho ouvirmos para criarmos um portfólio sendo que somos uma pessoa em início de carreira, não?&lt;/p&gt;

&lt;p&gt;Mas isso é possível!&lt;/p&gt;

&lt;p&gt;Quando estamos aprendendo qualquer coisa na área programação (mesmo quando estamos aprendendo programação de fato), sempre criamos códigos e projetos que poderiam ser expostos em algum lugar. No nosso caso este lugar é o GitHub ou qualquer plataforma de hospedagem de código onde você possa colocar seus projetos e deixá-los públicos.&lt;/p&gt;

&lt;p&gt;E não somente os projetos de tecnologias que estamos estudando, podemos também contribuir com open source quando somos iniciantes: contribuindo para projetos open source mesmo sendo iniciante.&lt;/p&gt;

&lt;p&gt;Este portfólio é extremamente importante, pois mais valerá ver o que você já fez do que você somente dizer que fez x ou y. Não tem como confiar 100% na palavra de um candidato a uma vaga na empresa, pois as pessoas, infelizmente, podem mentir.&lt;/p&gt;

&lt;p&gt;E assim vai… Quando você estiver estudando algo, crie um repositório e suba seu código para lá. Se for um projeto de software, app, sistema, etc., melhor ainda.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#participe-de-comunidades-de-programa%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Participe de comunidades de programação&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Comunidades são meios muito úteis de garantirmos nosso foco, de encontrarmos as melhores vagas e, o melhor, conseguir apoio para nossa caminhada no universo da programação.&lt;/p&gt;

&lt;p&gt;Nas comunidades temos pessoas que podem te mentorar, podem tirar suas dúvidas e ainda podem te indicar nas empresas onde trabalham.&lt;/p&gt;

&lt;p&gt;Mas lembre-se: comunidades são locais onde nós procuramos fazer amizades com as pessoas. Eu conheci pessoas em comunidades a 5 anos atrás que hoje são meus melhores amigos. A pior coisa que você faz é querer se aproximar de alguém com segundas intenções. Faça amigos e se eles gostarem de você vão querer te ter por perto onde trabalham e vão te indicar. Se não puderem te ajudar assim, vão te ajudar de outra maneira, mas porque são seus amigos e é isso que fazemos uns pelos outros.&lt;/p&gt;

&lt;p&gt;Visite essas comunidades como:, &lt;a href="https://rocketseat.com.br"&gt;&lt;em&gt;Rocketseat&lt;/em&gt;&lt;/a&gt;, &lt;a href="https://dev.to/"&gt;&lt;em&gt;DevComunity&lt;/em&gt;&lt;/a&gt;, .&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fa%C3%A7a-um-bom-curr%C3%ADculo"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Faça um bom currículo&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Por mais que o velho papel perdeu espaço para os meios digitais, ainda temos empresas e plataformas de vagas que pedem um currículo formal.&lt;/p&gt;

&lt;p&gt;Você precisa ter um arquivo preparado para essas horas. Neste documento é importante listar algumas coisas na sequência:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;uma breve descrição do seu perfil&lt;/li&gt;
&lt;li&gt;suas habilidades técnicas e não técnicas&lt;/li&gt;
&lt;li&gt;links para seu portfólio, LinkedIn e o que mais você quiser/puder mostrar&lt;/li&gt;
&lt;li&gt;se você fala outras línguas, possui cursos na área, se tem graduação, se trabalha de forma voluntária, se já fez intercâmbio&lt;/li&gt;
&lt;li&gt;liste somente as últimas três experiências e coloque uma boa descrição do que você fazia nesse emprego.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Isso, claro, depois de seus dados pessoais, como endereço, um email atualizado e telefones para contato. Por favor, jovem, não vá perder oportunidades colocando um email que você nunca abre ou um telefone que está sempre fora de área. Se você, assim como eu, mora ou morou em um lugar com o sinal péssimo, deixe o telefone de alguém que pode anotar recado para você, como um parente ou mesmo alguém da vizinhança que topa te ajudar.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mantenha-seu-linkedin-atualizado"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Mantenha seu LinkedIn atualizado&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Assim como o &lt;strong&gt;currículo formal&lt;/strong&gt;, mantenha seu LinkedIn muito bem atualizado. Se você ainda não criou um perfil na plataforma, por favor, corre fazer isso agora!&lt;/p&gt;

&lt;p&gt;Você precisa aparecer nas pesquisas quando os recrutadores e recrutadoras pesquisarem por profissionais na plataforma. E essa é uma das plataformas mais utilizadas no mundo para essa pesquisa de perfis.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusão&lt;/strong&gt; 🚀
&lt;/h3&gt;

&lt;p&gt;Vamos recapitular:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a empresa não é sua amiga&lt;/li&gt;
&lt;li&gt;você precisa se valorizar e cobrar o correto pelo seu trabalho&lt;/li&gt;
&lt;li&gt;você precisa ter foco&lt;/li&gt;
&lt;li&gt;você precisa reforçar e entender os seus pontos fortes&lt;/li&gt;
&lt;li&gt;pare de se auto-sabotar&lt;/li&gt;
&lt;li&gt;aprenda bem a tecnologia que você vai utilizar no trabalho&lt;/li&gt;
&lt;li&gt;aprenda testes de unidade&lt;/li&gt;
&lt;li&gt;aprenda algum framework&lt;/li&gt;
&lt;li&gt;aprenda versionamento de código&lt;/li&gt;
&lt;li&gt;crie um portfólio&lt;/li&gt;
&lt;li&gt;participe de comunidades de programação&lt;/li&gt;
&lt;li&gt;faça um bom currículo e mantenha seu LinkedIn atualizado&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Perceba que, da parte técnica, temos somente alguns pontos: uma tecnologia (linguagem de programação ou o que for seu nicho), testes de unidade, algum framework, versionamento de código. No nosso dia-a-dia também é assim: não passamos todas as horas de trabalho batendo tecla, a maior parte do tempo estamos pensando em como resolver um problema da melhor maneira possível.&lt;/p&gt;

&lt;p&gt;Todo esse caminho que você vai percorrer servirá para que você aprenda a resolver problemas, cada vez da melhor maneira e assim se tornará um profissional mais valioso para o mercado, mas você está começando agora… Não queira colocar o carro na frente dos bois, procure controlar sua ansiedade e em todo caso conte com as comunidades de programação para te ajudar. &lt;/p&gt;

&lt;p&gt;Partilha o post para os demais devs, com o intuito de ajudar os que pretendem começar uma carreira.&lt;/p&gt;

&lt;p&gt;Estou preparando mais contéudos de valor como este, então siga-me nas redes sócias para não perder nenhuma delas.&lt;/p&gt;

&lt;p&gt;Obrigado. 🙏&lt;br&gt;
Vamos ser amigos, criar: &lt;a href="https://linktr.ee/elio.fernandes28"&gt;Redes socias&lt;/a&gt;&lt;/p&gt;

</description>
      <category>twitter</category>
      <category>discuss</category>
      <category>career</category>
    </item>
    <item>
      <title>HarperDB: More Than a Database</title>
      <author>Margo McCabe</author>
      <pubDate>Thu, 12 Aug 2021 15:05:06 +0000</pubDate>
      <link>https://dev.to/margo_hdb/harperdb-more-than-a-database-11o9</link>
      <guid>https://dev.to/margo_hdb/harperdb-more-than-a-database-11o9</guid>
      <description>&lt;p&gt;I recently had a very interesting conversation &lt;a href="https://rss.com/podcasts/harperdb-select-star/242298/"&gt;on our podcast&lt;/a&gt; with Ron Lewis, the Director of Innovation and Engineering at Lumen Technologies. Ron brought up the notion that HarperDB is more than just a database, and for certain users or projects, HarperDB is not serving as a database at all. How can this be possible? &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#database-explained"&gt;
  &lt;/a&gt;
  Database, Explained
&lt;/h3&gt;

&lt;p&gt;Well, what really is a database? &lt;a href="https://en.wikipedia.org/wiki/Database"&gt;Wikipedia&lt;/a&gt; states that, “In computing, a database is an organized collection of data stored and accessed electronically from a computer system.” &lt;a href="https://www.guru99.com/introduction-to-database-sql.html"&gt;Another site&lt;/a&gt; simply states that “​​A database is a systematic collection of data. They support electronic storage and manipulation of data. Databases make data management easy.” &lt;/p&gt;

&lt;p&gt;So at its core, yes, &lt;a href="https://harperdb.io/?utm_source=devto"&gt;HarperDB&lt;/a&gt; is certainly a database and can fulfill this functionality (after all, that’s what the DB stands for). But it can do so much more. For example, there are many cases where organizations keep their existing database system(s) in place, and use HarperDB to extend their current functionality or for a different capability altogether. Especially when it comes to solving complex enterprise data management challenges, the answer rarely (if ever) comes down to this database vs. that database. There’s much more to it. There are many different moving parts related to capturing the right data, getting data to where it needs to be in a timely manner, analyzing and acting on that data, etc. This is really where HarperDB shines. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#harperdb-a-runway-for-launching-industry-40-technology"&gt;
  &lt;/a&gt;
  HarperDB: A Runway for Launching Industry 4.0 Technology
&lt;/h3&gt;

&lt;p&gt;Ron mentioned in our podcast discussion:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“The reason I see HarperDB as a disruptive technology is because you often call HarperDB a database, but it’s not really a database. It’s maybe what some people call a data mesh or data fabric... I see HarperDB more as a data surface, especially with Functions. The whole idea is to be able to converge and contextualize data to support decision making.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The new &lt;a href="https://harperdb.io/docs/custom-functions/"&gt;Custom Functions&lt;/a&gt; Ron refers to will enable users to define their own API endpoints within HarperDB, ultimately expanding HarperDB from a distributed database to a distributed application development platform with integrated persistence. So, now we’re thinking of HarperDB as a data mesh, fabric, or surface instead of a database. That’s a lot of buzzwords! Let’s take a step back. &lt;/p&gt;

&lt;p&gt;When I asked Ron what initially drew him and his team to HarperDB, he provided some great insight. Ron mentioned that they were working on a project for the Department of Defense (DoD) that required moving, contextualizing, and converging of data, and they needed something super fast and intuitive. They were essentially looking for something easy to use and easy to deploy that’s also flexible and scalable. Once HarperDB and Ron connected, he discovered that HarperDB could be deployed on devices as small as microprocessors like a Raspberry Pi or Tinker Board, all the way up to large scale servers, cloud machines, or supercomputers. This piqued his interest, as he needed the ability to do large scale analytics and move the data between devices in a simple manner. &lt;/p&gt;

&lt;p&gt;At a basic level, we quickly realized that Ron and the HarperDB team were asking the same questions: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When we look at how much data has to move, how much is being created on an hourly basis from OT data onsite etc., how do we manage, transport, and take advantage of all of that data? &lt;/li&gt;
&lt;li&gt;How do we get the data to where it needs to be in the most efficient manner possible? &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#extended-functionality"&gt;
  &lt;/a&gt;
  Extended Functionality
&lt;/h3&gt;

&lt;p&gt;Ron said that with HarperDB, he and his team could “define the data movement and do all these crazy cool things.” As they were looking at different military adaptations they were able to take data that is running integrated into a controller environment (OT) and expose that data without needing to have a human machine interface (HMI). They could securely move that OT data into the cloud, into a highly scalable enterprise analytics domain powered by HarperDB in the cloud on compute nodes. &lt;/p&gt;

&lt;p&gt;There are many use cases similar to this, where HarperDB can provide a holistic solution that makes data sync and management easy. In the defense space, HarperDB’s bidirectional data movement enables the collection and movement of data and logic in real time, shifting decision making throughout the network as needed. Gaming and media industries benefit from HarperDB’s high performance and low latency, with clear implications for both the organization and the end-user. Retail and ticketing can recognize and block bad bots in real time with HarperDB’s global replication and edge persistence. The list goes on! You can read more about &lt;a href="https://dev.to/harperdb/industries-that-need-a-high-performing-low-latency-distributed-database-5cn4"&gt;industries that benefit from a high performing, low latency, geo-distributed database here&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-harperdb"&gt;
  &lt;/a&gt;
  Why HarperDB?
&lt;/h3&gt;

&lt;p&gt;Ron explained, “We started looking at all the different databases that are scalable like Couchbase and a bunch of others, but we ended up focusing on HarperDB because of the flexibility. Then, Stephen came up with the idea of Functions because a lot of what we did required us to put an API proxy in front of the data engine. He said, how about I make your life simpler? It’s just amazing how HarperDB checks all the boxes.” &lt;/p&gt;

&lt;p&gt;Ron continued, “If you think about how databases communicate and the different models, I love the way HarperDB does it through the native integration of all of these components. No matter what it’s running on or where, HarperDB is disruptive because I’m able to move the different types of data, and different types of assets like functionality, from place to place seamlessly without having to worry about the interoperability of different data engines, nor do I have to worry about the size and scale. Databases are not typically designed as persistent vs. non-persistent, they tend to be scaled vertically instead of horizontally. HarperDB scales beautifully; a containerized version of HarperDB tied to persistent storage allows me to scale HarperDB to meet my performance goals. The workload it can perform is amazing, and the ability to actually scale horizontally is amazing as well because it’s not typical for database engines.”   &lt;/p&gt;

&lt;p&gt;Therefore, HarperDB is a unique solution for complex enterprise data challenges because the database engine is small and flexible enough to run on a microcontroller running on an onboard system, that can also be extended to edge bare metal or some kind of edge compute environment for higher fidelity analysis, and can also be moved to the cloud -- all at the speed of the Internet. HarperDB can scale vertically &lt;em&gt;and&lt;/em&gt; horizontally while meeting performance needs. It really is more than just a database. &lt;/p&gt;

&lt;p&gt;To sum it up, Ron stated: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“From a data driven ecosystem, HarperDB is paving the path forward moving from mesh to fabric to actual data surface and providing that contextualization of data right out of the database engine, which will be key to a fundamental shift in application behavior.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#predictions-for-the-future"&gt;
  &lt;/a&gt;
  Predictions for the Future
&lt;/h3&gt;

&lt;p&gt;To wrap up our conversation, I asked Ron about the future of technology. He mentioned a few key things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The move from cloud to edge is almost certain. &lt;/li&gt;
&lt;li&gt;The nature of applications will change to take on a more distributed nature, along the lines of distributed functionality with edge workloads managed and deployed from some type of cloud orchestrator.&lt;/li&gt;
&lt;li&gt;As we look at the nature of apps changing, data will be more contextualized from a database engine or persistence layer perspective rather than an application or business layer, and HarperDB is leading the charge on that. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There you have it folks. The future is all about data. There is a constant need for organizations to have their data where they need it, with the ability to orchestrate data where it’s both being created and consumed. If you’re not evaluating your data and how you’re handling your data assets, where will you be in 1, 5, or 10 years from now? &lt;/p&gt;

</description>
      <category>database</category>
      <category>productivity</category>
      <category>devops</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Creating Your First Neural Network in Python w/ Tensorflow</title>
      <author>Saji Wang</author>
      <pubDate>Thu, 12 Aug 2021 14:24:26 +0000</pubDate>
      <link>https://dev.to/codesphere/creating-your-first-neural-network-in-python-w-tensorflow-4l5p</link>
      <guid>https://dev.to/codesphere/creating-your-first-neural-network-in-python-w-tensorflow-4l5p</guid>
      <description>&lt;p&gt;If you've looked into Machine Learning even a little bit, you've heard of Tensorflow, one of the most popular tools for designing, training, and using machine learning models.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.tensorflow.org/"&gt;https://www.tensorflow.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While you can certainly perform machine learning tasks without any pre-built tools, Tensorflow has become a beloved ecosystem of tools in the ML community to help people bootstrap their ML projects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In this tutorial, I'll show you how to get started using Tensorflow, and we'll even build a pretty simple model to train and use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you want to see and run the finished product of what we'll be making, you can check out this &lt;a href="https://link.codesphere.com/CN"&gt;demo&lt;/a&gt; on Codesphere.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-tensorflow-work"&gt;
  &lt;/a&gt;
  How Does Tensorflow Work?
&lt;/h3&gt;

&lt;p&gt;The basic building blocks of Tensorflow, and ML in general, are tensors. Without getting too mathematical, tensors are groups of algebraic objects (most commonly numbers) such as scalars, vectors, or matrices. Tensors can have any number of dimensions, making their formalization very helpful for traversing large and multidimensional datasets.&lt;/p&gt;

&lt;p&gt;Tensorflow allows programmers to work with tensors in an incredibly easy and efficient way, and provides an additional library, called Keras, to build ML models out of tensors.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-well-be%C2%A0creating"&gt;
  &lt;/a&gt;
  What We'll Be Creating
&lt;/h3&gt;

&lt;p&gt;To keep things simple, we're going to make a neural network that can predict the outcome of an XOR (either or) operator.&lt;br&gt;
Our model is going to take in 2 values (both booleans) and output 1 value (also a boolean). We'll be using 1's and 0's in place of truth and false.&lt;/p&gt;

&lt;p&gt;The inputs and outputs should follow the following logic table:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SAWbfTQH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/miftea77i94lkrwzede5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SAWbfTQH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/miftea77i94lkrwzede5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Could this be done much easier with some if statements? Of course. But the point here is to understand how to use Tensorflow and Keras so that you can end up creating something useful yourself.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#setting-up-our-environment"&gt;
  &lt;/a&gt;
  Setting Up Our Environment
&lt;/h3&gt;

&lt;p&gt;While this example should probably be fine on your local machine, building machine learning models can be incredibly memory intensive. It's therefore helpful to use a virtual machine. &lt;a href="https://link.codesphere.com/CM"&gt;Codesphere&lt;/a&gt; offers an online development environment so that you can code and deploy your apps seamlessly in the cloud.&lt;/p&gt;

&lt;p&gt;The only necessary install here is Tensorflow, which we can install with:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pipenv install tensorflow&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And we are only going to need one python file, which we'll call &lt;code&gt;main.py&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-and-testing-our%C2%A0model"&gt;
  &lt;/a&gt;
  Creating and Testing Our Model
&lt;/h3&gt;

&lt;p&gt;Now let's get coding!&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Note the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define our training data&lt;/li&gt;
&lt;li&gt;Create our model&lt;/li&gt;
&lt;li&gt;Add layers&lt;/li&gt;
&lt;li&gt;Compile our model&lt;/li&gt;
&lt;li&gt;Fit our model to our training data&lt;/li&gt;
&lt;li&gt;Predict values&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are the steps you are going to want to take for virtually everything that you're building in TensorFlow.&lt;br&gt;
Also, note a few things which are going to differ based on the purpose and design of your model:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Layer type: The type of layer you are creating(ie: Dense, Bidirectional)&lt;/li&gt;
&lt;li&gt;Activation function: A function that modifies the input of a neuron(ie: relu, sigmoid)&lt;/li&gt;
&lt;li&gt;Loss function: A function that measures the inaccuracy of a model in correctly predicting the training data(ie: mean squared error, categorical cross entropy)&lt;/li&gt;
&lt;li&gt;Optimization function: The algorithm that is minimizing the loss value of the model. Is what is actually doing the training(ie: adam, stochastic gradient descent)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h3&gt;

&lt;p&gt;If all of these terms feel a bit more daunting than most of the programming that you're doing, it's because it probably is. ML is one of the areas of software engineering that requires more than some nicely worded stack overflow questions. It's a lot of math, statistics, and CS theory.&lt;/p&gt;

&lt;p&gt;That doesn't mean, however, that you should just give up on learning it. There are plenty of &lt;a href="https://www.google.com/search?q=Introduction+to+Machine+Learning+with+Python:+A+Guide+for+Data+Scientists&amp;amp;stick=H4sIAAAAAAAAAFVUPWwURxT2XLDx7ZnItw4SshBaH41jJbrbn9s9oDA_hsiSrcRgCqrV7c_s3P7M_sxwu3MVoko6ROEOgahAonBBgSgCSpcrUkRWkiqKIlFQ0SEaBHf23dyx1b753vve996befOztRN1ry7LlpHqVu5j5azlEipZcRxINJZCt51hKWrbqIPdI6uDvT44CrINDYZmhPtAqEf1hmYaSt4cg1aeZBCb3PZC1VIyTR_bqKEGsNtIR8G46fiywoNHcngm0tDPNaxeHywMbUXztYh4xhh2itQuDKiMYQsnDcejI2qlQJna4likI5P6fVA-xNIsCackEzvz9ZErsnHeCgw4YYWe1UVcUxJAhlJ_DDdN1GyF-VQJsmlgOoKxqueq3rB4dFMNIlnLOXmGktDrTVQ6zFML7i1HZuobvGAE9VRtNZ2pfqSaNnCfHxZl56Y6JZohk_VBZYjIsh8FAafFhhL5UcI1w6h5LlcVxm2bqqzbS6Z6RymvmA3G66uUXwekOYWXmHTSTtaFBJuTInIvRWQKdyw9S3n7PbPodRnpTrLRsAezSThOwpylXFzPkvOAJPwS9AhNbYenQ2rRKvKC40iB3Zz54YQ-wLrhTKmNcg_6nD5ghUqQPVHXQ1lT5gNEdgBVkrL_wctSZfHth3-XlvdL95_9_hd4WhKOXR68InEfCJUbLt2Nt2OnA5n4CIgPgLC4FcfEDdl1N2xT19mNxe-FuauYdigTTyxXhMN7KaPB1JRvhKNcgR7YyGkliw__2wPizS9Zr4kbQnnbjSw3Iz9C8awgXInD0LVpJ8biyeUloVq3-UF9-LJJ7evrh1ksatrqa1A6X1oFta8GPzWsmC__3Ptj7lZ1ZvDdOdi5uPztmigc3yRbsd0Oq79U_nn16e9362tLwvxuu4hxHLHqp1OnpffP363XVso_XzgzYx68Wa-C1Y-vTr5YuXiqLIHVkqx_KN3ZKX_3em1mkOXur09-mzs2DxZnFh7Pbm5imsXO7UN5w52zPdo2W6NtI-UdiqSfGEUxPi9dkn643XFcCcaZtNGmbemG3XEHzSOU3JsDnwEodzfC0AQAAA&amp;amp;sa=X"&gt;books&lt;/a&gt; and &lt;a href="https://www.freecodecamp.org/news/search/?query=Neural%20networks"&gt;online courses&lt;/a&gt; to help you learn!&lt;/p&gt;




&lt;p&gt;When you're ready to start building, you're going to need a place to deploy your ground-breaking model. When that time comes, you can deploy in minutes to Codesphere, a zero-config cloud provider built to save you time.&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Revisiting Shadow DOM: Nested items, dynamic templates, shadowRoot</title>
      <author>Matt Kenefick</author>
      <pubDate>Thu, 12 Aug 2021 14:17:31 +0000</pubDate>
      <link>https://dev.to/mattkenefick/revisiting-shadow-dom-nested-items-dynamic-templates-shadowroot-7dc</link>
      <guid>https://dev.to/mattkenefick/revisiting-shadow-dom-nested-items-dynamic-templates-shadowroot-7dc</guid>
      <description>&lt;p&gt;In another article, I discussed some basics of Shadow DOM, parsing class names, and autoloading components. You can find that &lt;a href="https://medium.com/@mattkenefick/snippets-in-javascript-converting-pascalcase-to-kebab-case-426c80672abc"&gt;article here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For this next example, you can pull a &lt;a href="https://github.com/mattkenefick/sample-shadow-dom"&gt;Working GitHub Example&lt;/a&gt; and try it out. It doesn’t require any dependencies or special servers to run. All relative paths from the index.html.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo:&lt;/strong&gt; &lt;a href="https://mattkenefick.github.io/sample-shadow-dom/"&gt;https://mattkenefick.github.io/sample-shadow-dom/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uiMUF7zj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mayfbawfr838on4kvwo8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uiMUF7zj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mayfbawfr838on4kvwo8.png" alt="Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here’s a quick breakdown of the architecture for this demo. It uses our classic index.html, &lt;code&gt;image&lt;/code&gt;, &lt;code&gt;style&lt;/code&gt;, &lt;code&gt;script&lt;/code&gt; format, with the addition of &lt;code&gt;view&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q-uMdSbg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pt9zy1qh2pomtsjgw3ue.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q-uMdSbg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pt9zy1qh2pomtsjgw3ue.png" alt="File Tree"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most of the files here are pretty basic. For instance, &lt;code&gt;script/component/my-form.js&lt;/code&gt; and &lt;code&gt;script/component/my-input.js&lt;/code&gt; don’t have explicit functionality of their own for this example; they only extend the &lt;code&gt;script/component/base.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Some are provide core functionality, like &lt;code&gt;script/component/base.js&lt;/code&gt; and &lt;code&gt;script/main.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The separation of &lt;code&gt;my-form.css&lt;/code&gt; and &lt;code&gt;my-input.html&lt;/code&gt; into their own respective folders are designed that way for demonstrative purposes. In a real application, you’d likely choose a direction and stick with it rather than the mix and match we have here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#update-basejs-to-accept-dynamic-templates"&gt;
  &lt;/a&gt;
  Update base.js to accept dynamic templates
&lt;/h3&gt;

&lt;p&gt;We’ve added an important method to our &lt;code&gt;base.js&lt;/code&gt; file which allows us to remotely fetch a file, convert it to template, then attach it as we were before. When I mention “before”, I’m referring to &lt;a href="https://medium.com/@mattkenefick/snippets-in-javascript-converting-pascalcase-to-kebab-case-426c80672abc"&gt;this tutorial&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Attempt to attach template over the network.
 * It attempts to derive an HTML tag from the filename,
 * but we could do anything here.
 *
 * @param string filename
 */&lt;/span&gt;
&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;attachRemote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filenameMatches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\/([^\.\/]&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;)\.&lt;/span&gt;&lt;span class="sr"&gt;html/i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filenameMatches&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filenameMatches&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fragment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;template&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function makes an assumption that your desired HTML tag name will match the file you’re request, i.e. &lt;code&gt;view/component/my-tag.html&lt;/code&gt; will be renderable as &lt;code&gt;&amp;lt;my-tag&amp;gt;&lt;/code&gt;. You can see this functionality under &lt;code&gt;filenameMatches&lt;/code&gt; and how it associates with the &lt;code&gt;fragment.id&lt;/code&gt; section.&lt;/p&gt;

&lt;p&gt;You can change this however you want, but the gist is that whatever you set for the id will be your tag name.&lt;/p&gt;

&lt;p&gt;--&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"preconnect"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.googleapis.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"preconnect"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.gstatic.com"&lt;/span&gt; &lt;span class="na"&gt;crossorigin&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.googleapis.com/css2?family=Ubuntu:wght@300;400;700&amp;amp;display=swap"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#260C1A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Ubuntu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Helvetica&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
            &lt;span class="c"&gt;&amp;lt;!--
                Include our `my-form` element that includes a &amp;lt;slot&amp;gt; which
                allows us to nest additional shadow-dom elements
            --&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;my-form&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;my-input&amp;gt;&amp;lt;/my-input&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/my-form&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;hr&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class="c"&gt;&amp;lt;!--
                Include the dynamic `my-input` element outside of
                other shadow-dom elements
            --&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;my-input&amp;gt;&amp;lt;/my-input&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;

        &lt;span class="c"&gt;&amp;lt;!--
            Here we include templates directly on the DOM so we can pick them up
            through our autoloader. It's fine for testing, but can make a mess.
            This version links to an external CSS file, where as our other
            example uses a directly included &amp;lt;style&amp;gt; tag.
        --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"my-form"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./style/component/my-form.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"my-form"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;fieldset&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;legend&amp;gt;&lt;/span&gt;My Form Element&lt;span class="nt"&gt;&amp;lt;/legend&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/fieldset&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

        &lt;span class="c"&gt;&amp;lt;!--
            Initialize Application
        --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./script/main.js"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this demo, you can see that explicitly define the &lt;code&gt;my-form&lt;/code&gt; component but we also use a &lt;code&gt;my-input&lt;/code&gt;. The &lt;code&gt;my-input&lt;/code&gt; template is dynamically fetched from within our &lt;code&gt;main.js&lt;/code&gt; file using the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;MyInputElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachRemote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../view/component/my-input.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see from our &lt;code&gt;index.html&lt;/code&gt; above that we’re able to easily nest custom elements within one another, but also use them separately in the same page.&lt;/p&gt;

&lt;p&gt;Also note how the &lt;code&gt;my-form&lt;/code&gt; template defined above uses the link tag to reference an existing CSS file. Our ShadowDOM elements are scoped so you’ll want to directly define styles within the templates or share the styles from another source.&lt;/p&gt;

&lt;p&gt;--&lt;/p&gt;

&lt;p&gt;I recommend you pull down the &lt;a href="https://github.com/mattkenefick/sample-shadow-dom"&gt;GitHub example&lt;/a&gt; and tinker with it. You can combine different ways of dynamically loading vs locally loading, referencing css files vs defining styles, and nesting components.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Activating the native spell-checking on Vim</title>
      <author>Vinicius Brasil</author>
      <pubDate>Thu, 12 Aug 2021 14:16:56 +0000</pubDate>
      <link>https://dev.to/vinibrsl/activating-the-native-spell-checking-on-vim-1e6o</link>
      <guid>https://dev.to/vinibrsl/activating-the-native-spell-checking-on-vim-1e6o</guid>
      <description>&lt;p&gt;Developers write not only code but documentation, bug reports, commit messages. As a non-native English speaker, I always find myself using &lt;a href="https://hemingwayapp.com"&gt;Hemingway App&lt;/a&gt;, &lt;a href="http://grammarly.com"&gt;Grammarly&lt;/a&gt;, and other similar tools. They help but it is quite annoying having to switch back and forth from my editor to these tools.&lt;/p&gt;

&lt;p&gt;The good news is that Vim ships with a spell-checker. It can check for words that do not exist, wrong capitalization, and even words that were spelled wrong for the selected region.&lt;/p&gt;

&lt;p&gt;To turn the spell-checking on, you can use this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:setlocal spell spelllang=en_us
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also hook it to a specific file type, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;" this goes into your init.vim/.vimrc file
autocmd FileType gitcommit setlocal spell
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Happy Vimming!&lt;/p&gt;

</description>
      <category>vim</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>The best VS Code extensions for remote working</title>
      <author>Carlo Marrone</author>
      <pubDate>Thu, 12 Aug 2021 14:16:04 +0000</pubDate>
      <link>https://dev.to/marrone_carlo/the-best-vs-code-extensions-for-remote-working-e8e</link>
      <guid>https://dev.to/marrone_carlo/the-best-vs-code-extensions-for-remote-working-e8e</guid>
      <description>&lt;p&gt;What do developers want? Money, flexible schedules, pizza? Sure. Effortless remote collaboration? Hell, yes! Programming is a team sport and without proper communication, you can’t really expect spectacular results. A remote set-up can make developer-to-developer communication challenging, but equipped with the right tools you have nothing to fear. Let’s take a look at the best VS Code extensions that can seriously improve your remote working routine. &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-share"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare"&gt;Live Share&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you’ve been working remotely for a while now, the chances are that you’re already familiar with this one. This popular extension lets you and your teammates edit code together.&lt;/p&gt;

&lt;p&gt;It can also be enhanced by other extensions for example &lt;a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare-audio"&gt;Live Share Audio&lt;/a&gt;  which allows you to make audio calls, or &lt;a href="https://marketplace.visualstudio.com/items?itemName=lostintangent.vsls-whiteboard"&gt;Live Share Whiteboard&lt;/a&gt; to draw on a whiteboard and see each other's changes in real-time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits for remote teams:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Boost your team’s productivity by pair-programming in real-time, straight from your VS Code editor! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xHRxMW7p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628699437016/427TfT4bd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xHRxMW7p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628699437016/427TfT4bd.png" alt="liveshare-icon.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gitlive"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=TeamHub.teamhub#review-details"&gt;GitLive&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This powerful tool combines the functionality of Live Share with other super useful features for remote teams. You can see if your teammates are online, what issue and branch they are working on and even take a peek at their uncommitted changes, all updated in real-time. &lt;/p&gt;

&lt;p&gt;But probably the most useful feature is &lt;a href="https://dev.to/gitlive/how-to-enable-real-time-merge-conflict-detection-in-vs-code-l2e"&gt;merge conflict detection&lt;/a&gt;. Indicators show in the gutter where your teammates have made changes to the file you have open, these update in real-time as you and your teammates are editing and provide early warning of potential merge conflicts.&lt;/p&gt;

&lt;p&gt;Finally, GitLive enhances code sharing via LiveShare with video calls and screen share and even allows you to codeshare with teammates using other IDEs such as IntelliJ, WebStorm or PyCharm.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits for remote teams:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Improve developer communication with real-time cross-IDE collaboration, merge conflict detection and video calls!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AdvEmOuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628699492502/AWY8DhUHz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AdvEmOuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628699492502/AWY8DhUHz.png" alt="vsc ultimate v4.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gistpad"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=vsls-contrib.gistfs"&gt;GistPad&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Gists are a great way not only to create code snippets, notes, or tasks lists for your private use but also to easily share them with your colleagues. With GistPad you can seamlessly do it straight from your VS Code editor! &lt;/p&gt;

&lt;p&gt;You can create new gists from scratch, from local files or snippets. You can also search through and comment on your teammate’s gists (all comments will be displayed at the bottom of an opened file or as a thread in multi-file gists). &lt;/p&gt;

&lt;p&gt;The extension has broad documentation and a lot of cool features. What I really like is the sorting feature, which when enabled, will group your gists by type (for example &lt;em&gt;note&lt;/em&gt; - gists composed of &lt;code&gt;.txt, .md/.markdown&lt;/code&gt; or &lt;code&gt;.adoc&lt;/code&gt; files, or &lt;em&gt;diagram&lt;/em&gt; - gists that include a &lt;code&gt;.drawio&lt;/code&gt; file) which make it supereasy to quickly find what you’re looking for. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits for remote teams:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Gists are usually associated with less formal, casual collaboration. The extension makes it easier to brainstorm over the code snippet, work on and save a piece of code that will be often reused, or share a task list. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lEwsoAg9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628756476710/js2fe-PMl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lEwsoAg9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628756476710/js2fe-PMl.png" alt="gist-pad-3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#todo-tree"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree"&gt;Todo Tree&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you create a lot of TODOs while coding and need help in keeping track of them, this extension is a lifesaver. It will quickly search your workspace for comment tags like TODO and FIXME and display them in a tree view in the explorer pane. &lt;/p&gt;

&lt;p&gt;Clicking on a TODO within the tree will bring you to the exact line of code that needs fixing and additionally highlight each todo within a file. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits for remote teams:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The extension gives you an overview of all your TODOs and a way to easily access them from the editor. Use it together with your teammates and make sure that no task is going to be forgotten! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wfZwh7Q9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628699221918/xqgyi-qmK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wfZwh7Q9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628699221918/xqgyi-qmK.png" alt="todotree.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#codetour"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=vsls-contrib.codetour"&gt;Codetour&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you’re looking for a way to smoothly onboard a new team member to your team, Codetour might be exactly what you need. This handy extension allows you to record and playback guided walkthroughs of the codebase, directly within the editor.&lt;/p&gt;

&lt;p&gt;A "code tour" is a sequence of interactive steps associated with a specific directory, file or line, that includes a description of the respective code and is saved in a chosen workspace. The extension comes with built-in guides that help you get started on a specific task (for example record, export, start or navigate a tour). At any time you can edit the tour by rearranging or deleting certain steps or even change git ref associated with the tour. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits for remote teams:&lt;/strong&gt;&lt;br&gt;
A great way to explain the codebase and create project guidelines available within VS Code at any time for each member of the team!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bvdqZr4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628756640663/KZBBOsO1Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bvdqZr4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628756640663/KZBBOsO1Q.png" alt="codetour-3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#git-link"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=qezhu.gitlink"&gt;Git Link&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Simple and effective extension that does one job: allows you to send a link with selected code from your editor to your teammates, who can view it in GitHub. Besides the advantage of sharing code with your team (note that only committed changes will be reflected in the link), it is also useful if you want to check history, contributors, or branch versions. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits for remote teams:&lt;/strong&gt;&lt;br&gt;
Easily send links of code snippets to coworkers! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gLe_qpz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628699150202/BideYqL8p.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gLe_qpz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628699150202/BideYqL8p.gif" alt="gitlink.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Good communication within a distributed team is key to productive remote working. Hopefully, some of the tools I rounded up in this short article will make your team collaboration faster, more efficient and productive. Happy hacking! &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>vscode</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>Trace-Based Testing with OpenTelemetry: Meet Open Source Malabi</title>
      <author>Michael Haberman</author>
      <pubDate>Thu, 12 Aug 2021 14:11:40 +0000</pubDate>
      <link>https://dev.to/aspecto/trace-based-testing-with-opentelemetry-meet-open-source-malabi-3d2m</link>
      <guid>https://dev.to/aspecto/trace-based-testing-with-opentelemetry-meet-open-source-malabi-3d2m</guid>
      <description>&lt;p&gt;&lt;em&gt;Originally published on the &lt;a href="https://www.cncf.io/blog/2021/08/11/trace-based-testing-with-opentelemetry-meet-open-source-malabi/"&gt;CNCF blog&lt;/a&gt;. Written by Yuri Shkuro, creator and maintainer of &lt;a href="https://www.jaegertracing.io/"&gt;Jaeger&lt;/a&gt;, and Michael Haberman, Co-Founder &amp;amp; CTO of &lt;a href="https://www.aspecto.io/?utm_source=dev.to&amp;amp;utm_medium=post&amp;amp;utm_campaign=malabi"&gt;Aspecto&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;If you deal with distributed applications at scale, you probably use tracing. And if you use tracing data, you already realize its crucial role in understanding your system and the relationships between system components, as many software issues are caused by failed interactions between these components. &lt;/p&gt;

&lt;p&gt;Most of you reading this article are well aware of how powerful tracing is, but here’s the thing, &lt;strong&gt;you are not using tracing to its full potential&lt;/strong&gt;. Let us explain why and also introduce you to &lt;a href="https://github.com/aspecto-io/malabi"&gt;Malabi&lt;/a&gt;, the new open-source tool for trace-based testing.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-we-use-tracing-today"&gt;
  &lt;/a&gt;
  How We Use Tracing Today
&lt;/h1&gt;

&lt;p&gt;Companies these days use tracing data for critical functions such as application performance monitoring, allowing DevOps teams and SREs to find and fix issues in production after they happen. Developers usually use it when trying to debug a complex issue that happened in production.&lt;/p&gt;

&lt;p&gt;In most cases, they are being reactive to issues, trying to understand what went wrong. But there’s another use case for tracing data: &lt;strong&gt;utilizing trace output to test and validate your application’s behavior&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-tracebased-testing"&gt;
  &lt;/a&gt;
  What is trace-based testing
&lt;/h1&gt;

&lt;p&gt;Trace-based testing is a method that allows us to improve assertion capabilities by leveraging traces data and make it accessible while setting our expectations from a test. That enables us to validate essential relationships between software components that otherwise are put to the test only in production.&lt;/p&gt;

&lt;p&gt;Trace-based validation enables developers to become proactive to issues instead of reactive. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-tracebased-testing"&gt;
  &lt;/a&gt;
  Why trace-based testing
&lt;/h1&gt;

&lt;p&gt;Trace-based testing answers the complexities of current testing strategies and techniques for distributed applications. We will later see how trace-based testing can help us overcome these challenges.&lt;/p&gt;

&lt;p&gt;To set the stage for the example that follows (and since there’s always a terminology mess around testing), we will discuss all types of tests that make actual network calls: integration tests, system tests, service tests, end-to-end tests, contract tests, API tests, you-name-it tests. Unit tests and usage of mocks are out of scope.&lt;/p&gt;

&lt;p&gt;It is also important to mention that you can leverage trace data for testing without the need to add another layer to your existing tests.&lt;/p&gt;

&lt;p&gt;Why traditional testing techniques aren’t enough &lt;br&gt;
Let’s take a look at a use case where “regular” tests fall short and what we can do to combat these challenges. We’ll use a real use case that many people can easily relate to ordering food via an app such as Uber Eats or DoorDash.&lt;br&gt;
Here is a pseudo-code representing the logic when ordering food:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// This function is called when you order food via an app
async function orderFoodDelivery(order: Order) {
 if (!valid(order)) {
   throw new Error('Bad order')
 }

 const orderDetails = await restaurantApproval(order);

 if(orderDetails.failed){
   throw new Error('Restaurant too busy')
 }

 Promise.all([
   // Send a notification to mobile app
   notifyClient(orderDetails),

   // Start delivery
   enqueueDelivery(orderDetails),

   // Call stripe and if successful upload invoice to s3.
   // if failed, put in queue for retry
   paymentAndInvoice(orderDetails),
 ]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code flow is pretty simple. &lt;/p&gt;

&lt;p&gt;The backend gets the order details, validates them, and asks the restaurant to deliver the food. &lt;/p&gt;

&lt;p&gt;Then we need to notify the customer, find a delivery person, and charge the customer.&lt;/p&gt;

&lt;p&gt;One major concern we can all agree on is that &lt;strong&gt;getting someone else’s food could make you mad. Really mad!&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--frIozPoq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0ka3wd5mrgd5lz9lbii.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--frIozPoq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0ka3wd5mrgd5lz9lbii.png" alt="Got someone else's food!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We want the delivery person, customer, and restaurant to be all aligned with the order details. Making it happen with “traditional” testing techniques can be a significant hassle.&lt;/p&gt;

&lt;p&gt;Essentially, the problem is we’re not fully testing the whole process. Usually, we can only validate the response, which is, by design, limiting us from peeking into its internal workflow and does not offer the level of reliability we’re looking for when testing. &lt;/p&gt;

&lt;p&gt;For example, the fact that we got an order approval from the restaurant, doesn’t mean the delivery person received our correct address.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#how-can-tracebased-testing-help"&gt;
  &lt;/a&gt;
  How can trace-based testing help?
&lt;/h1&gt;

&lt;p&gt;There are a few common cases in which traces are useful for testing internal workflows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When dealing with multiple components, your test needs to be familiar with different APIs and configure many clients. Testing against trace uses a single uniform API.&lt;/li&gt;
&lt;li&gt;A trace can capture a transient state which is difficult to retrieve after the workflow has finished. For instance, there may be no record anywhere other than logs that an error occurred in a given component.&lt;/li&gt;
&lt;li&gt; Each component may not even expose its internal state in sufficient detail to validate the workflow. Tracing provides us with granular data to overcome this.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Trace-based testing validates that the proper interaction between components occurs as part of the tested workflow. We want to validate there’s complete sync between the customer, restaurant, and delivery. &lt;/p&gt;

&lt;p&gt;We mentioned we’d introduce you to a new open-source for trace-based testing called Malabi. Take a look at the following integration test to see how we use Malabi to easily validate this sync:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Nothing worse than getting the wrong food.
it('Making sure the right person get the food.', ()=&amp;gt;{
 const order = {id:1, userId};
 orderFoodDelivery(order);

// Using Malabi to make sure the internal calls to Kafka and WS are synced with the same order ID.
 expect(malabi.kafka({topic:'match-delivery-order'}).toMatch(id:order.id})
 expect(malabi.websocket({room:order.userId}}).toMatch({id:order.id})
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#meet-malabi"&gt;
  &lt;/a&gt;
  Meet “Malabi”
&lt;/h1&gt;

&lt;p&gt;In the code example above, you can see how Malabi helps us by making traces accessible in the assertion phase while setting our expectations from the test. We can then validate the internals of the API call.&lt;/p&gt;

&lt;p&gt;Malabi is an open-source Javascript framework (still in its early days) based on OpenTelemetry that allows you to leverage trace data and improve assertion capabilities. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;(It is also a delicious milk pudding dessert made of rice, sugar, rice flour, and milk).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pHTdTubv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h38b8ntbfs1hnmhft1kj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pHTdTubv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h38b8ntbfs1hnmhft1kj.jpg" alt="This is what Malabi looks like"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Credit: @malabi_marshmallow&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#this-is-how-open-source-malabi-works"&gt;
  &lt;/a&gt;
  This is how open source Malabi works
&lt;/h1&gt;

&lt;p&gt;Let’s review the diagram below that shows what happens in Malabi when running the integration test from above. We are validating that the Order Service submitted correct messages to Kafka and to a Websocket.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Fn5OjK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7lc4d323rpsz8lo7kzo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Fn5OjK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7lc4d323rpsz8lo7kzo.png" alt="validating that the Order Service submitted correct messages to Kafka and to a Websocket"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Malabi lib that runs inside the Test Runner is fetching traces collected in the OpenTelemetry SDK. This is done by adding a custom exporter to OTEL SDK that stores the trace in memory (the exporter is already provided by Malabi). You can add the custom exporter by yourself, or by using the OpenTelemetry SDK we created for you (with a good amount of auto instrumentations from both &lt;a href="https://github.com/open-telemetry/opentelemetry-js-contrib"&gt;OTEL contrib&lt;/a&gt; and Aspecto’s &lt;a href="https://github.com/aspecto-io/opentelemetry-ext-js"&gt;repo&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Currently, Malabi supports validating spans created by the service under test (order service in the diagram above). For supporting downstream services and async message brokers, you will need to spin up some backend (Jaeger, OTEL Collector) and store those spans as well. That is in Malabi’s roadmap.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;By collecting the output traces of each test and serving them to the developer in the assertion phase we’re easily getting deeper visibility into the workflow’s internal processes.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can check Malabi’s repo for more technical details and a demo you can run locally: &lt;a href="https://github.com/aspecto-io/malabi"&gt;https://github.com/aspecto-io/malabi&lt;/a&gt; ⭐️ &lt;/p&gt;

&lt;p&gt;A quick code example for the assertion (this is how we use it internally):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;it('happy flow - pull_request opened event is written to db and sqs', async () =&amp;gt; {
      const event = 'pull_request';
      const eventId = 'my_eventId';
      const payload = {
          action: 'opened',
          name: 'Rick',
          lastName: 'Sanchez',
          phrase: 'Wubba Lubba Dub-Dub',
          organization: {
              login: 'aspecto-io',
          },
      };
      const res = await client.post('/api/v1/webhook', payload, {
          headers: {
              [sigHeaderName]: getGithubSignature(payload),
              'X-Github-Event': event,
              'X-GitHub-Delivery': eventId,
           },
      });

      expect(res.status).toBe(200);
      const spans = await getMalabiExtract();

      // Assert DB write
      expect(spans.mongo().length).toBe(1);
      const mongo = spans.mongo().first;
      expect(mongo.hasError).toBeFalsy();
      expect(mongo.dbOperation).toBe('save');
      expect(mongo.mongoCollection).toBe('github-events');
      const doc = JSON.parse(mongo.dbResponse);
      expect(doc.payload).toEqual(payload);
      expect(doc.eventId).toEqual(eventId);
      expect(doc.type).toEqual(event);
      // Make sure timestamps are written
      expect(doc.createdAt).toBeDefined();
      expect(doc.updatedAt).toBeDefined();

      // Assert SQS Send
      expect(sqs.hasError).toBeFalsy();
      expect(spans.awsSqs().length).toBe(1);
      const sqs = spans.awsSqs().first;
      expect(sqs.rpcMethod).toBe('sendMessage');
      expect(JSON.parse(sqs.messagingPayload)).toEqual({
          type: 'git-hub-pr',
          data: payload,
      });

      const incomingHttpSpan = spans.http().incoming().first;
      expect(incomingHttpSpan.hasError).toBe(false);
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#getting-started-with-malabi"&gt;
  &lt;/a&gt;
  Getting started with Malabi
&lt;/h1&gt;

&lt;p&gt;Malabi’s installation is easy and requires only two parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;An OpenTelemetry SDK is installed in the service under test.&lt;/li&gt;
&lt;li&gt;A test assertion NPM package is installed in the test runner.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#calling-all-early-adopters-and-the-bottom-line"&gt;
  &lt;/a&gt;
  Calling all early adopters and the bottom line
&lt;/h1&gt;

&lt;p&gt;It seems that there’s a whole world of opportunities to optimize and increase the effectiveness of testing – by getting more visibility into the processes running across our entire system and by leveraging available tracing data to increase test reliability and possibly preventing issues early in the development cycle.&lt;/p&gt;

&lt;p&gt;This is what Malabi is meant to do.&lt;/p&gt;

&lt;p&gt;Malabi is an early-stage open source and there is much work to be done – this is where you, brilliant people, come in!  We would love your support in this project, feel free to help in any shape or form (contribute code, knowledge, ideas, or just share it. Oh yeah! GitHub stars make traces better).&lt;/p&gt;

&lt;p&gt;If that sounds interesting, &lt;a href="https://www.aspecto.io/malabi/"&gt;leave your email&lt;/a&gt; and &lt;strong&gt;one of our developers&lt;/strong&gt;, in love with OpenTelemetry, will reach out to you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N_O8LmyU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szj835loulisut7umopw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N_O8LmyU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szj835loulisut7umopw.png" alt="Malabi logo"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>opensource</category>
      <category>webdev</category>
      <category>testing</category>
    </item>
    <item>
      <title>Tech Talk: How to prevent the collapse of society by building an accessible web</title>
      <author>Salma Alam-Naylor</author>
      <pubDate>Thu, 12 Aug 2021 13:41:37 +0000</pubDate>
      <link>https://dev.to/whitep4nth3r/tech-talk-how-to-prevent-the-collapse-of-society-by-building-an-accessible-web-14dn</link>
      <guid>https://dev.to/whitep4nth3r/tech-talk-how-to-prevent-the-collapse-of-society-by-building-an-accessible-web-14dn</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/0T87-RhKNOI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Talk starts at 12:37&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H7MFsKKy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjij3hr51ar6lmy2j7zs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H7MFsKKy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjij3hr51ar6lmy2j7zs.png" alt='The title slide of "How to prevent the collapse of society by building an accessible web"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://speakerdeck.com/whitep4nth3r/how-to-prevent-the-collapse-of-society-by-building-an-accessible-web"&gt;View slides on Speaker Deck&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#transcript"&gt;
  &lt;/a&gt;
  Transcript
&lt;/h2&gt;

&lt;p&gt;How to prevent the collapse of society by building an accessible web. Hi friends, I'm Salma. I help developers build stuff, learn things, and love what they do. If you've seen me on the internet already, you might know me as whitep4nth3r or white-p-4-nth-3-r if you use a screenreader. I am a Developer Evangelist for Contentful, and if you've never heard of Contentful, it's a headless CMS with a REST API, GraphQL API, generous free community plan limits, and some great CLI tooling and other packages to help you build great stuff.&lt;/p&gt;

&lt;p&gt;Stephen Hawking said, "I believe that life on earth is at an ever-increasing risk of being wiped out by a disaster, such as a sudden nuclear war or genetically engineered virus or other dangers."&lt;/p&gt;

&lt;p&gt;It's 2031. The apocalypse has arrived. The internet is running on a slow 3G connection, and display screens are broken. And this is what people are now Googling for — how to build a fallout shelter. And accessibility on the web is paramount to the survival of the human race. So, how do we prepare the web for the apocalypse of 2031? And why is this important now?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-first-talk-about-accessibility-for-slow-connections"&gt;
  &lt;/a&gt;
  Let's first talk about accessibility for slow connections
&lt;/h2&gt;

&lt;p&gt;There are almost two billion websites in the world, and 95% of those websites use JavaScript. And why is this bad news for the apocalypse?&lt;/p&gt;

&lt;p&gt;Let's take a look at the network tab of mobile.twitter.com. On the first request, it loads 37 javascript files worth 1.44 megabytes (compressed), 27 other files and nine image files. If we look at Lighthouse Dev Tools, we'll see that the time-to-interactive is 5.8 seconds and on the original trace of the page you see absolutely nothing on that first load. That's a lot of requests for JavaScript. And they're pretty expensive. It takes time to load — plus — it might fail.&lt;/p&gt;

&lt;p&gt;Here's a tweet from 2018 where "our monitoring tells us that around one percent of requests for JavaScript on BuzzFeed time out, and that's around 13 million requests per month." That's 156 million failed requests for JavaScript each year for BuzzFeed alone. And that's potentially that many failed JavaScript requests on the web each year. (Assuming that all websites that use JS have the same traffic as BuzzFeed.)&lt;/p&gt;

&lt;p&gt;In the apocalypse, time-to-interactive is the difference between life and death. People need to know how to fight off those zombies as quickly as possible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-how-can-we-serve-critical-content-faster-do-we-abandon-javascript"&gt;
  &lt;/a&gt;
  So how can we serve critical content faster? Do we abandon JavaScript?
&lt;/h3&gt;

&lt;p&gt;The Jamstack has gone some way to try and solve this problem. The Jamstack is an architecture designed to make the web faster, more secure, and easier to scale. The key feature of the Jamstack is pre-rendering — where the entire front end is pre-built into highly optimised static pages and assets during a build process, and then enhanced with JavaScript. You might have heard of some of the most popular static site generators — Nuxt.js which uses Vue, Universal which uses Angular, and Next.js which uses React. But does modern Jamstack really solve this problem that we saw with Twitter?&lt;/p&gt;

&lt;p&gt;Here's my website and the network tab. It's built with Next.js and hosted on Vercel. On a normal load of this site in a browser, it loads more than 30 javascript files on the client. The first document to load is the HTML document. But why do we need all that JavaScript when the document has already loaded, and the Jamstack is telling us that our pages are pre-rendered and served statically?&lt;/p&gt;

&lt;p&gt;Let's do an experiment and let's turn off JavaScript on my website. Here it is. You can see the blocked requests in the network tab — JavaScript is disabled. But as you can see it still loads. It still works! Let's compare this site with JavaScript disabled and JavaScript enabled. The load time for the JavaScript disabled site is 259 milliseconds compared to 793 milliseconds. And that is on a normal speedy connection in the UK. What if we switched that to slow 3G, which the apocalypse will be using? The load times are incredibly different without JavaScript — 8.67 seconds and with JavaScript over 25 seconds. And the sizes of these pages are phenomenally different. 300 kilobytes for no JavaScript versus 1.4 megabytes using JavaScript. And that's compressed! The uncompressed sizes are even greater in difference. 3.6 megabytes to load the same site with JavaScript enabled.&lt;/p&gt;

&lt;p&gt;I did another experiment. To test this theory I wanted to see how low we can get the size of the page and the load time of the page without JavaScript. So the first thing is I recreated my blog article list fetching data at build time, statically generated on Next.js. 105kb loaded in just under 5 seconds. I created the same page but loaded all the data on the client without JavaScript. We obviously get no content because there's no JavaScript to load it — and it's only slightly less than 92.7kb, loads in just about five seconds again. So what if we could turn this into a static HTML page, no framework? HTML and CSS, no JavaScript, 100 kb in 4.71 seconds.&lt;/p&gt;

&lt;p&gt;So what's very interesting is that the statically generated Next.js version s actually very very comparable to my static HTML page — although my static HTML page does kind of win. So these Jamstack frameworks are pretty good.&lt;/p&gt;

&lt;p&gt;And so in terms of accessibility for slow connections, you can remove as much JavaScript as possible. Harness these Jamstack frameworks — but always use your judgment. I was still able to get the load time and the page weight down. So what I recommend for accessibility for slow connections: websites must work without JavaScript in the apocalypse. Decrease your load time, decrease your page weight. Because there is no progressive enhancement in the apocalypse. There's just simply no time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessibility-for-broken-screens"&gt;
  &lt;/a&gt;
  Accessibility for broken screens
&lt;/h2&gt;

&lt;p&gt;In the apocalypse, screens are broken. Everything is a wasteland. You don't see fancy website designs and animations anymore.&lt;/p&gt;

&lt;p&gt;There are almost two billion websites in the world, and 96% of those websites use CSS. And why is this bad news for the apocalypse? developers.google.com tells us that by default, CSS is treated as a render-blocking resource, meaning that the browser won't render any processed content until the CSS object model is constructed. This page recommends that we keep our CSS lean, deliver it as quickly as possible, and use media types and queries to unblock rendering. I say in the apocalypse let's not do that. Because in the apocalypse, time-to-interactive is the difference between life and death.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-can-we-serve-critical-content-faster-do-we-also-abandon-css"&gt;
  &lt;/a&gt;
  How can we serve critical content faster? Do we also abandon CSS?
&lt;/h3&gt;

&lt;p&gt;You might have noticed I like tattoos. There's a big saying in the tattoo industry — go big or go home. In this case, I say go small or go die. So let's take that static HMTL page and make it as small as possible.&lt;/p&gt;

&lt;p&gt;Let's remove all CSS and class names. Every byte counts. Let's remove useless font imports. We can't see them on broken screens. Let's remove SVGs — we don't need those bytes. Let's turn these links into just really simple links that don't even need any aria labels or anything like that. And a little trick I found as well. I'm going to replace the favicon with a sneaky zero kilobyte favicon. You might notice that in the network tab if you don't have a favicon on your site — the browser will throw a 404. I found a little way to make a base64 encoded string masquerade as a favicon. It's zero kilobytes. We just put that string into our head and there we go.&lt;/p&gt;

&lt;p&gt;So here's what my page looks like now. It actually looks pretty well laid out. We've got links, we've got sections, we've got lists — and it actually looks very much like this very iconic website. It's lightweight. It's responsive. And it just works. So how does my no-CSS page compare to my HTML with CSS? So here we go — 100kb versus 4.6kb — and on slow 3G — 4.7 seconds versus 2.1. And if we look at the Lighthouse performance on web dev measure — everything is 100. That's going to rank really well in Google search results — and we're going to get to that later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#in-2021-webaim-surveyed-one-million-home-pages-for-accessibility"&gt;
  &lt;/a&gt;
  In 2021 WebAim surveyed one million home pages for accessibility
&lt;/h3&gt;

&lt;p&gt;And across those one million home pages, over 51 million distinct errors were detected. That's an average of 51.4 errors per page. So what's going wrong? It seems pretty broken! Here's a breakdown of the most common failures from this report, and let's look at these, one by one, and see what's going on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#low-contrast-text"&gt;
  &lt;/a&gt;
  Low contrast text
&lt;/h3&gt;

&lt;p&gt;86.4% of home pages — and what's that caused by? CSS — and we already know we're going to abandon that, but let's have a look. I looked at some of the top 50 websites in the world to try and find these errors and they were present on quite a few of them. We've got youtube.com, and this violation appears in the little copyright disclaimer on the sidebar. Now, you may think this doesn't matter really, but let's have a look. We've got the HTML here, and the colour contrast error is caused by this CSS rule. The background and the foreground colours do not offer an accessible solution. Using one of my favorite colour contrast checker tools (actually built by an ex-colleague of mine) you can see here that on three out of four of the criteria that color contrast fails. If we remove CSS, we don't even need to think about this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#next-missing-alternative-text-for-images"&gt;
  &lt;/a&gt;
  Next, missing alternative text for images
&lt;/h3&gt;

&lt;p&gt;On 60.6 of homepages. What's this caused by? The HTML. Now you're going to see a running theme as I look through all of these failures and we're going to start with AliExpress. Now, on AliExpress there is a rotating carousel on their home page full of lots and lots of images and links. If we look at the accessibility tree in Chromium dev tools, you'll see that it's just an image, and you get no supporting information in that accessibility tree. Here's the HTML, div, div, div, a link with no information and an image with no alternative text. And what's very, very interesting is that AliExpress has chosen to hide the whole carousel for screen readers, maybe with the assumption that if it's hidden — it doesn't matter. And I don't agree with that.&lt;/p&gt;

&lt;p&gt;accessibilitydeveloperguide.com says, "Whenever you think about hiding something from any audience, better ask yourself whether this is really a good solution. Most of the time it's better to create a solution that works the same way for everybody, which does not need any shaky aria." Let's look at the fix for this violation. On AliExpress, add an alt tag — "This is a great image description," and we'll get to this later — but if you want to avoid cumulative layout shift, add a height and width on the image as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#missing-form-input-labels"&gt;
  &lt;/a&gt;
  Missing form input labels
&lt;/h3&gt;

&lt;p&gt;On 54.4 of home pages, again caused by incorrect HTML. I spent a long time trying to find an example of this, and what's interesting, is that if a placeholder is present in the input field, screenreaders and accessibility trees kind of get around that and give you some information. However, I did put a call out on Twitter to ask if anybody had any examples of HTML forms without labels and placeholders. A wonderful member of the community, Alex, said he had a gimmicky one on his 404 page to do redirects. And this was like gold dust to me. This was an absolutely abysmal experience for screenreaders, and let's look at what's happening.&lt;/p&gt;

&lt;p&gt;It looks pretty cool. There's some ASCII art. The instructions are to press enter to continue, which redirects you to Alex's home page. Here is what the HTML looks like. We have a form, we have an input field. We have no labels, we have no placeholders, and in the accessibility tree we have no information. And furthermore, when you focus on this element with VoiceOver on Mac, it reads out to you — "edit text blank main." It's not really what you're expecting when you land on a 404. So my question is, does this page really need a form? Is this HTML giving meaning to what needs to be done on that page? Furthermore, a fun little easter egg — if you focus on the ASCII art in its current state with VoiceOver, it reads this out to you: "underscore new line forward slashs pace underscore space back slash space undercore underscore underscore underscore etc," and there is a good fix for that, where you can use aria labels and roles to allow the screenreader to know what that is. You add role=image and an aria label. And when you focus on that now with a screen reader, you getmore contextual information about what's on the page. It's a pretty fancy page for a 404. I think I'd prefer my 404s to be functional, especially when we're in an apocalypse.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-for-a-moment-lets-talk-about-placeholders"&gt;
  &lt;/a&gt;
  Now for a moment let's talk about placeholders
&lt;/h3&gt;

&lt;p&gt;As I mentioned earlier, placeholders actually are not labels. w3schools.com says, "The placeholder attribute specifies a short hint that describes the expected value of an input field e.g a sample value or a short description of the expected format."&lt;/p&gt;

&lt;p&gt;Let's go back to AliExpress. When you refresh the page on AliExpress you get a new contextual placeholder. It told me to search for true love, Starbucks, fancy underwear and car accessories. In the accessibility tree, the placeholder says "true love" — which is fair enough. But there is no label on the form. If I focus on that input with a screen reader, I don't actually know what that form is for — especially when the placeholder is changing on every load of the page. Without a label that placeholder is meaningless.&lt;/p&gt;

&lt;p&gt;So what does a good form input look like? We have a label and we tell the HTML, the DOM, what input that label is for using the for and the id attributes. We give the input a contextual placeholder — here it's first name — and that is going to really help you out when you can't see that screen.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-go-on-to-empty-links"&gt;
  &lt;/a&gt;
  Let's go on to empty links
&lt;/h3&gt;

&lt;p&gt;51.3 of home pages — again caused by HTML. And we go back to AliExpress. In the footer of AliExpress there are a set of social links. They are empty. They are full of non-breaking spaces — and the accessibility tree tells us no information, apart from "space". When we focus on those links as a screen reader user — as someone without a working display — I'm going to ask myself what will happen if I click on this link?&lt;/p&gt;

&lt;p&gt;And it's not just empty links that are problematic. Let's take a look at the basket icon on AliExpress. Again, there is a text of "zero" inside that, when I'm hovering over that with a screen reader — when I'm focused on it. I've gone through the input field that says "true love," I go to the basket icon and it just reads out "zero". Here's the HTML. A link, an icon and "zero". And when I focus on it with a screen reader, it reads out to me: "link, zero." I don't know where that link is going — I'm not going to want to click on it. I'm going to be asking myself again — what even is this?&lt;/p&gt;

&lt;p&gt;Let's look at the fix. Add an aria label onto the link. Make it descriptive. How about, "You have zero items in your basket. Go to basket." Tell the user what they're going to do if they click on that link.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#missing-document-language-attribute"&gt;
  &lt;/a&gt;
  Missing document language attribute
&lt;/h3&gt;

&lt;p&gt;28.9 of home pages, again caused by the very opening tag of your HTML. accessibilitydeveloperguide.com says, "In the example of a screen reader, the synthesiser needs to know which language the content is, in order to pronounce the output correctly. Otherwise it will be hard to understand, even if you know the other language."&lt;/p&gt;

&lt;p&gt;We go back to AliExpress and here you can see Axe Dev tools, a great free Chromium extension to test accessibility. There is no language attribute on the HTML, and you can see here AliExpress have prioritised merging the Facebook and OpenGraph schema into their HTML before they've thought about language.&lt;/p&gt;

&lt;p&gt;The fix? Very simple. Add lang equals whatever your language is on the HTML.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#finally-we-come-to-empty-buttons"&gt;
  &lt;/a&gt;
  Finally, we come to empty buttons
&lt;/h3&gt;

&lt;p&gt;26.9 of home pages — again caused by HTML, but in this case — it's also caused by CSS (which we're going to abandon). We go to a product page of AliExpress and there are two buttons on this page that presumably increment and decrement the amount of items you would like to add to your basket. When using VoiceOver, when you focus on this element it just reads out "button" — no one is going to click that if they don't know what it's for. Here is the HTML. It's a button element with an icon element inside it. So how is that plus and minus added? With CSS pseudo elements. And what's really interesting is this character is not actually supported by a lot of browsers, and also my VSCode. I presume they mean a plus, but literally in the CSS inspector the character is unrecognised. And I had to bring the WAT duck out for that.&lt;/p&gt;

&lt;p&gt;The fix? Give a fallback to your button. Put a plus in there. Give it an aria label that tells the users what they're going to do when they click on that button. Give it some meaning.&lt;/p&gt;

&lt;p&gt;So when we have a look at all of these most common failures, they're caused by incorrect CSS and HTML. They are not built for accessibility.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-what-do-we-do-for-accessibility-for-broken-screens-in-the-apocalypse"&gt;
  &lt;/a&gt;
  So what do we do for accessibility for broken screens in the apocalypse?
&lt;/h3&gt;

&lt;p&gt;Don't fake content with css. Put it there in the DOM. Use semantic HTML. Use forms where it's appropriate. Don't break the web. Because if the web is unusable in the apocalypse — everyone dies.&lt;/p&gt;

&lt;p&gt;So we're talking about the apocalypse. 2031 is 10 years off — but why is all of this important now?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-quickly-recap"&gt;
  &lt;/a&gt;
  Let's quickly recap
&lt;/h2&gt;

&lt;p&gt;How do we prepare the web for the apocalypse of 2031? we start with semantic HTML. We use minimal CSS, and we use as little JavaScript as possible. And why is this important now?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#worldwide-the-internet-is-slow"&gt;
  &lt;/a&gt;
  Worldwide, the internet is slow
&lt;/h3&gt;

&lt;p&gt;worldpopulationreview.com did a survey on internet speeds by country in 2021 and the average speed in the world is 55.13 megabits per second. If we look at the code from Chromium Dev Tools, the slow 3G simulated connection is 51.2 megabits per second. These are pretty much the same. So all of the results you've seen when I had slow 3G in my dev tools — loading that page with JavaScript — the results are going to be very similar for a lot of people around the world. They are not going to survive if pages take that long to load.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#furthermore-globally-at-least-22-billion-people-have-a-near-or-distance-vision-impairment"&gt;
  &lt;/a&gt;
  Furthermore, globally at least 2.2 billion people have a near or distance vision impairment
&lt;/h3&gt;

&lt;p&gt;I'm one of them. I have really bad eyes — I can't see. Those of you who have seen me live-streaming know that I miss placeholders all the time when they are really low contrast. And also, not all users of screen readers have vision impairments. Here's a survey by WebAim in 2017, and it shows here that not everyone is blind who answered this survey. Some people have cognitive disabilities, some people are deaf, some people have motor disabilities. So it's not just blind people who use these — there are a lot more people you're affecting if you don't build accessible websites.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#and-lastly-as-of-this-month-google-now-uses-core-web-vitals-as-a-ranking-factor-in-search-results"&gt;
  &lt;/a&gt;
  And lastly, as of this month, Google now uses Core Web Vitals as a ranking factor in search results
&lt;/h3&gt;

&lt;p&gt;So what are the Core Web Vitals? We've got the largest contentful paint, which means how quickly does the page render. We've got the first input delay — how quickly does the page respond to user input. And we've got cumulative layout shift — how stable is the page layout. So in order to make the most out of search rankings and Google Core Web Vitals, what do we need to do?&lt;/p&gt;

&lt;p&gt;We need to get our content to our users as fast as possible. We need to make our web applications usable as soon as possible, and we need to make our web applications as stable as possible — or we risk being forgotten in the apocalypse.&lt;/p&gt;

&lt;p&gt;Billions of people use the internet on a slow connection, and millions of people use the internet via a screen reader. People won't find your website if it's not performant or accessible.&lt;/p&gt;

&lt;p&gt;The apocalypse of 2031 might not happen but if it does? Hopefully, with this information, we'll be prepared.&lt;/p&gt;

&lt;p&gt;My name is Salma or whitep4nth3r. I encourage developers to build stuff, learn things and love what they do. You can find me on all of these social platforms as whitep4nth3r. Thank you very much I've had a lovely time!&lt;/p&gt;

</description>
      <category>techtalks</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>a11y</category>
    </item>
    <item>
      <title>Clean CSS: How to Spring Clean your Project</title>
      <author>mariacasancho</author>
      <pubDate>Thu, 12 Aug 2021 13:26:22 +0000</pubDate>
      <link>https://dev.to/taxdoo/clean-css-how-to-spring-clean-your-project-k4</link>
      <guid>https://dev.to/taxdoo/clean-css-how-to-spring-clean-your-project-k4</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mXgz44xs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yt7ci19q0xl9iiqs0d6q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mXgz44xs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yt7ci19q0xl9iiqs0d6q.png" alt="Clean your code!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Illustration by Ashley Allen, Taxdoo Junior Graphic Designer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We’ve all been there; a new project drops onto your team’s plate and it’s a scramble to hit the deadline. What usually gets hit hardest? CSS styling. Short deadlines, sub-standard architecture or lacking guidelines means that often CSS becomes the problem child in terms of delivering clean code. &lt;/p&gt;

&lt;p&gt;At Taxdoo, we use a range of styling methods for our frontend projects, however a prime example of CSS styling can be seen in our website. Like many company’s websites, Taxdoo.com is the digital shop door for the thousands of customers who visit our site daily. &lt;br&gt;
An inhouse-built site made with React, we are constantly looking for ways to optimise the performance, aesthetics and functionality of our key marketing tool.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is clean code?&lt;/strong&gt;&lt;br&gt;
Epitomised by software expert Robert Cecil Martin’s (otherwise known as Uncle Bob) book, &lt;a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882"&gt;Clean Code: A Handbook of Agile Software Craftmanship&lt;/a&gt;, clean code refers to agile principles of software development that aim to create code that is simple to understand or change. Dead code refers to code that is not used when an application is run.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is clean code for CSS?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
In CSS, short for &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS"&gt;Cascading Style Sheets&lt;/a&gt;, is the way that property values are applied to the content as a hierarchy. Child elements can either inherit or override properties values from the parent elements. If this hierarchy is not properly adhered to or the team uses bad practices, it can seriously affect a website’s performance. That's why it is important to optimize and try to keep the CSS clean.&lt;/p&gt;

&lt;p&gt;Over time, while we add more features or just small modifications to HTML elements, the CSS can grow quickly and it becomes a challenge to maintain, especially if you don't stick to the YAGNI principle ("You aren't gonna need it", only code the functionality that it is needed) in mind. &lt;/p&gt;

&lt;p&gt;Eventually, you need to delete unused CSS or optimize it.&lt;/p&gt;

&lt;p&gt;CSS frameworks can take a project load to 140KB of CSS or more, which is a lot and can take a long time to render. This size is also possible when you have a lot of templates and pages, and if you aren’t using all of it, having tools to reduce size and delete dead code is totally worth it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why is it good to remove dead code?&lt;/strong&gt;&lt;br&gt;
Dead CSS will affect the rendering time of your website. Using &lt;a href="https://developers.google.com/web/tools/lighthouse"&gt;Lighthouse&lt;/a&gt; provides a good overview of potential savings you could make in load-time by removing dead CSS, as well as scoring your website on other categories such as SEO, Performance, Accessibility and Best Practices.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-do-we-detect-dead-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How do we detect dead code?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;One of the tools that we like to use is &lt;a href="https://developer.chrome.com/docs/devtools/coverage/"&gt;Coverage&lt;/a&gt; from Google Chrome. To open this feature from Chrome, you need to open the Developer tools and click coverage in the 3 dots at the bottom left. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CemeahL4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lx13phl3e43iafjelb44.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CemeahL4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lx13phl3e43iafjelb44.png" alt="So much to clean!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There we will see a list of JS/CSS files with bars in red and blue color. The red color means the amount of code unused  and the blue color is used. It also shows the percentage of unused Bytes. Whenever you click one of those elements from the list, it will open that file and you can check which part is not being used because it will show a red bar next to it.&lt;/p&gt;

&lt;p&gt;This is only visible for the page you are in, when you visit more pages or do more actions in the page this will get updated. Seeing a lot of red doesn’t really mean you should delete it. It could be used in another part of the website, so &lt;strong&gt;do not take this chance to delete them because you could end up with big styling problems.&lt;/strong&gt; To know if a CSS selector is not being used you need to check every single page or state of your site and execute all javascript.&lt;/p&gt;

&lt;p&gt;This tool is useful to get an idea if a piece of CSS is being used, for example, if we have a specific component, we visit that component and see how much unused CSS we have.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other ways to detect dead CSS&lt;/strong&gt;&lt;br&gt;
To analyse your code and find unused CSS, you can use several automated tools;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/purifycss/purifycss"&gt;PurifyCSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/FullHuman/purgecss"&gt;PurgeCSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/uncss/uncss"&gt;UnCSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unused-css.com/"&gt;UnusedCSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PurifyCSS and PurgeCSS are the most frequently used ones and they can be integrated in the build process, while UnusedCSS is a website that checks and gives you a report of your CSS usage.&lt;/p&gt;

&lt;p&gt;To avoid having unused CSS, make sure that you scope your components and maintain a good structure. It is difficult to have unused CSS with smaller components since if the component is removed, so is the component’s CSS.  However, if you end up with a bigger project or your components grow a lot, it’s worth regularly checking your CSS and trying to clean it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What do you use to detect or remove dead code?&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;At Taxdoo, we emphasise knowledge sharing and hope that you found this article was useful. Stay in touch by following us on &lt;a href="https://twitter.com/TaxdooEng"&gt;Twitter&lt;/a&gt;. Alternatively, you can check out our open vacancies &lt;a href="https://boards.greenhouse.io/taxdoo"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>cleancode</category>
      <category>performance</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Create a Netflix clone from Scratch: JavaScript PHP + MySQL Day 17</title>
      <author>Christopher Glikpo</author>
      <pubDate>Thu, 12 Aug 2021 13:25:47 +0000</pubDate>
      <link>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-17-47kf</link>
      <guid>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-17-47kf</guid>
      <description>&lt;p&gt;Netflix provides streaming movies and TV shows to over 75 million subscribers across&lt;br&gt;
the globe. Customers can watch as many shows/ movies as they want as long as they are&lt;br&gt;
connected to the internet for a monthly subscription fee of about ten dollars. Netflix produces&lt;br&gt;
original content and also pays for the rights to stream feature films and shows.&lt;/p&gt;

&lt;p&gt;In this video,we will validate firstName&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/AB7zTzNpfFQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this video,we will validate lastName&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/B6GZS_XCqIU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you like my work, please consider&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/cglikpo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c23TxQOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jm11knj7d8zwcvo150q2.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;br&gt;
so that I can bring more projects, more articles for you&lt;/p&gt;

&lt;p&gt;If you want to learn more about Web Development, feel free to &lt;a href="https://www.youtube.com/c/ChristopherGlikpo"&gt;follow me on Youtube!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
