<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Random numbers in CSS? Really? üé≤ü§î</title>
      <author>Pascal Thormeier</author>
      <pubDate>Wed, 14 Apr 2021 20:26:05 +0000</pubDate>
      <link>https://dev.to/thormeier/random-numbers-in-css-really-569o</link>
      <guid>https://dev.to/thormeier/random-numbers-in-css-really-569o</guid>
      <description>&lt;p&gt;I just read &lt;a href="https://dev.to/inhuofficial/a-pure-css-password-generator-they-said-it-can-t-be-done-4pla"&gt;this awesome post by inhuofficial&lt;/a&gt; about a random password generator written in pure CSS. It follows a similar approach as some other pure CSS random number generators out there. Most of them use differently timed animations to "shuffle" the state. The user interacts with it by pausing the animations and voila: A seemingly random number. A really clever approach.&lt;/p&gt;

&lt;p&gt;And it got me thinking.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-even-is-random"&gt;
  &lt;/a&gt;
  What even &lt;em&gt;is&lt;/em&gt; "random"?
&lt;/h1&gt;

&lt;p&gt;"Random", as I would define it, describes an action with a non-determinable result. That doesn't necessarily mean that the result is not deterministic (think, it could be determined in theory, but nobody can). Let's have a look at a simple way to generate a random result: A coin flip.&lt;/p&gt;

&lt;p&gt;If you flip a coin a gazillion times, the result will be roughly 50% heads and 50% tails. That seems random. But is it really? Seemingly so, we can't possibly measure all the variables that influence if it's heads or tails, right? But what if we could? If we knew all the preconditions, like, &lt;em&gt;all&lt;/em&gt; of them? Position and velocity of every single air molecule in the room, the body temperature of the person flipping the coin, size and weight of the coin, fluctuations in Earth's gravity, whatever you can think of. Would we be able to predict the outcome? I think: Most likely, yes.&lt;/p&gt;

&lt;p&gt;And there's the problem.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#classical-computers-and-electricity"&gt;
  &lt;/a&gt;
  Classical computers and electricity
&lt;/h1&gt;

&lt;p&gt;At their very foundation, computers work with electricity. Electricity either flows (&lt;code&gt;1&lt;/code&gt;) or it doesn't (&lt;code&gt;0&lt;/code&gt;). When you wire a few billion transistors together the right way, they can do mathematics and other amazing things, but they still represent this logic of 0 and 1. If you apply the same current to the same parts, the result will be the same.&lt;/p&gt;

&lt;p&gt;So, how can this construct generate random numbers? Unless there's a special physical part wired in as well, it can't. That's why the "random" numbers generated by computers, are either &lt;a href="https://hackaday.com/2019/12/09/generating-random-numbers-with-a-fish-tank/"&gt;generated with a fish tank&lt;/a&gt; or they're so-called "pseudo-random" numbers: They only seem to be random, but are actually deterministic.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pseudorandom-numbers"&gt;
  &lt;/a&gt;
  "Pseudo-random" numbers
&lt;/h1&gt;

&lt;p&gt;So, essentially, the people coming up with pure CSS random number generators ran into the same problems a lot of people did before them when implementing random number generators like &lt;code&gt;/dev/random&lt;/code&gt; or &lt;code&gt;Math.random()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And that's no surprise: Generating pseudo-random numbers is its own field of research, actually. According to Wikipedia, there's four different criteria that measure the quality of a pseudo-random number generator:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Probability of two randomly generated sequences to be different.&lt;/li&gt;
&lt;li&gt;Being indistinguishable from actual random numbers. This is tested with some predefined statistical tests.&lt;/li&gt;
&lt;li&gt;Being impossible for an attacker to calculate or otherwise guess a random number in advance from any previously generated number.&lt;/li&gt;
&lt;li&gt;Being impossible for an attacker to calculate or otherwise guess a random number in advance from any internal state of the generator.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some pseudo-random number generators rely on the unix timestamp, some may rely on CPU temperature, a hash of the current state of the memory and some constant. They function much like the coin flip: They add dozens of variables to make the result look more and more random, even though it never truly becomes random.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#in-summary"&gt;
  &lt;/a&gt;
  In summary
&lt;/h1&gt;

&lt;p&gt;When I looked for CSS-only random number generators, I often read the sentence "they're not real random numbers" or I even saw references to the &lt;a href="https://xkcd.com/221/"&gt;XKCD comic about random number generators&lt;/a&gt;, but I think those people are a bit unfair to their own achievements. Those generators are as good as it gets with the tools CSS offers. We're dealing with machines that need to be deterministic. Unless there's a possibility to measure quantum weirdness, take photos of fish tanks or measure the light of distant stars flickering in the atmosphere with pure CSS, the numbers that can be generated with CSS will remain pseudo-random. &lt;/p&gt;

&lt;p&gt;And that's OK.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;I hope you enjoyed reading this article as much as I enjoyed writing it! If so, leave a&lt;/em&gt; ‚ù§Ô∏è &lt;em&gt;or a&lt;/em&gt; ü¶Ñ&lt;em&gt;! I write tech articles in my free time and like to drink coffee every once in a while.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to support my efforts,&lt;/em&gt; &lt;a href="http://buymeacoffee.com/pthormeier"&gt;&lt;em&gt;buy me a coffee&lt;/em&gt; ‚òï&lt;/a&gt; &lt;em&gt;or&lt;/em&gt; &lt;a href="https://twitter.com/pthormeier"&gt;&lt;em&gt;follow me on Twitter&lt;/em&gt; üê¶&lt;/a&gt;&lt;em&gt;!&lt;/em&gt; &lt;em&gt;You can also support me directly via &lt;a href="https://www.paypal.me/pthormeier"&gt;Paypal&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://buymeacoffee.com/pthormeier"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc4mYYLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x55hp6jopwyy161d8e2u.png" alt="Buy me a coffee button"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>computerscience</category>
      <category>webdev</category>
      <category>random</category>
    </item>
    <item>
      <title>My First Personal Site! üì£</title>
      <author>fentybit</author>
      <pubDate>Wed, 14 Apr 2021 20:23:29 +0000</pubDate>
      <link>https://dev.to/fentybit/my-first-personal-site-4m20</link>
      <guid>https://dev.to/fentybit/my-first-personal-site-4m20</guid>
      <description>&lt;p&gt;I can not believe that I have 2 months left with Flatiron School, and hopefully by then I can officially call myself a Full-Stack Software Engineer. üë©üèª‚Äçüíª&lt;/p&gt;

&lt;p&gt;Aside from revamping my resume, I have been working on building my personal site. After weeks of debating if I should be building from scratch or not, I decided to deploy my first portfolio site from a ready-made HTML5 template. I can always refine my portfolio site later as I develop more skills, and eventually design my own UI components.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Starting Point&lt;/strong&gt;&lt;br&gt;
Not sure where to start, I looked for advice from &lt;a href="https://www.freecodecamp.org/"&gt;freeCodeCamp&lt;/a&gt;. I found this tutorial of &lt;a href="https://www.freecodecamp.org/news/how-to-put-a-website-online-guide-to-website-creation-custom-domain-and-hosting/"&gt;How to Put a Website Online&lt;/a&gt;, and it was extremely useful in providing guidance for someone (like me) who has no knowledge on buying a custom domain, hosting and outsourcing a template. I had fun perusing through &lt;a href="https://pixelarity.com/"&gt;Pixelarity&lt;/a&gt; where you can browse HTML responsive template designs. Basic skills required include HTML, CSS and JavaScript. The next step was trying to figure out my custom domain. Funny thing, this effort frustrates me the most, and I could not make up my mind. Long story short, I ended up re-branding myself to &lt;code&gt;@fentybit&lt;/code&gt;, and settled on &lt;code&gt;fentybit.me&lt;/code&gt;. I love numbers, and hence, &lt;code&gt;bit&lt;/code&gt; or binary digit. Then, I mulled over &lt;code&gt;.dev&lt;/code&gt; and &lt;code&gt;.me&lt;/code&gt; for quite some time. I learned from &lt;a href="https://medium.engineering/use-a-dev-domain-not-anymore-95219778e6fd"&gt;other developers and their thoughts on &lt;code&gt;.dev&lt;/code&gt; domain&lt;/a&gt;, and I settled on &lt;code&gt;.me&lt;/code&gt;. I want my site to personally share who I am and what I am, in the most minimalistic way. I am glad the custom domain was still available. Thank you &lt;a href="https://www.namecheap.com/"&gt;Namecheap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Personalize your Site&lt;/strong&gt;&lt;br&gt;
Personalizing HTML/CSS attributes and content delivery took most of my time, but Pixelarity made it so effortless! If there is anything new, it would be trying to link my &lt;em&gt;contact&lt;/em&gt; page so other devs can communicate back to me. &lt;a href="https://formspree.io/"&gt;Formspree&lt;/a&gt; provides this service. I only need to submit their API to my front-end code, and they take care of the rest. üìù&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KdYZRiuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yz6oc4rpamiruhamt97i.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KdYZRiuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yz6oc4rpamiruhamt97i.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Namecheap &amp;amp;&amp;amp; Netlify&lt;/strong&gt;&lt;br&gt;
While there are a lot of hosting providers such as Bluehost, GoDaddy, Hostinger, DreamHost and so on, you can always get free ones from either &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt; or &lt;a href="https://pages.github.com/"&gt;GitHub pages&lt;/a&gt;. I had success initially deploying with GitHub pages, though my site resulted being &lt;em&gt;"Not Secure"&lt;/em&gt; on Chrome. I made another attempt on setting up my domain with Namecheap and Netlify. Starting with Namecheap to configure the DNS settings &amp;gt; &lt;strong&gt;Manage&lt;/strong&gt;. Under &lt;strong&gt;Nameservers&lt;/strong&gt; category, I had to update from &lt;strong&gt;Namecheap Basic DNS&lt;/strong&gt; to &lt;strong&gt;Custom DNS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u0L-_OtG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbasafc7bgbiyv96h7u0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u0L-_OtG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbasafc7bgbiyv96h7u0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reroute to my Netlify &lt;strong&gt;Domain Settings&lt;/strong&gt; real quick to add my custom domain.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ssqp2aO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgf0yapfw5jd1dzwousp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ssqp2aO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgf0yapfw5jd1dzwousp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next step would be to select &lt;strong&gt;Set Up Netlify DNS&lt;/strong&gt;. I would need to acquire &lt;em&gt;a list of Nameservers&lt;/em&gt; from Netlify and propagate on Namecheap.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KvMeD0pl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8x96iw8bteezclbka10.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KvMeD0pl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8x96iw8bteezclbka10.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy all of &lt;em&gt;Netlify's DNS servers&lt;/em&gt; to &lt;em&gt;Namecheap Nameservers&lt;/em&gt;, and click the green check button to save this setting.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R3siIoix--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tj4o3183cdp9kbnf8it.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R3siIoix--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tj4o3183cdp9kbnf8it.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While I was not able to figure out the SSL/TLS certificate with GitHub pages, I learned Netlify will provision &lt;em&gt;Let's Encrypt&lt;/em&gt; certificate automatically once the DNS configuration on the custom domain pointing to Netlify's servers. Namecheap suggests revisiting your site in 24 - 48 hours once Netlify's DNS fully propagated.&lt;/p&gt;




&lt;p&gt;It's official. Now I have a personal site! üí•&lt;br&gt;
Check out &lt;a href="https://fentybit.me/"&gt;https://fentybit.me/&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFx91a2J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmk0orhrf4jcdap26s9x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFx91a2J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmk0orhrf4jcdap26s9x.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>netlify</category>
    </item>
    <item>
      <title>Talk Notes: "Implicit to Explicit: Decoding Ruby's Magical Syntax" (RailsConf 2021)</title>
      <author>Sylwia Vargas</author>
      <pubDate>Wed, 14 Apr 2021 20:12:26 +0000</pubDate>
      <link>https://dev.to/sylwiavargas/talk-notes-implicit-to-explicit-decoding-ruby-s-magical-syntax-railsconf-2021-51ge</link>
      <guid>https://dev.to/sylwiavargas/talk-notes-implicit-to-explicit-decoding-ruby-s-magical-syntax-railsconf-2021-51ge</guid>
      <description>&lt;p&gt;‚ú® &lt;strong&gt;What is this post about&lt;/strong&gt;: As a part of my professional growth, I make time to watch conference talks on Ruby, Rails, JS, React, tech writing, and tech trivia. Previously, I'd just watch them but now I will take and publish notes for future reference. This talk was a part of RailsConf 2021 that I'm participating in at the time of writing. &lt;/p&gt;

&lt;p&gt;‚ú® &lt;strong&gt;Talk:&lt;/strong&gt; 'Implicit to Explicit: Decoding Ruby's Magical Syntax' by &lt;a href="https://twitter.com/railsonmaui"&gt;Justin Gordon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚ú® &lt;strong&gt;One-paragraph summary&lt;/strong&gt;: Ruby's implicitness makes it great for readability and DSLs. But that also gives Ruby a "magical" syntax compared to JavaScript. In this talk, let's convert the implicit to explicit in some familiar Rails code. What was "magic" will become simple, understandable code.&lt;/p&gt;

&lt;p&gt;‚ú® &lt;strong&gt;Impression&lt;/strong&gt;:  I feel this talk was much more about pry and I am blown away by Justin's üî• &lt;code&gt;~/.pryrc&lt;/code&gt; üî• (see &lt;a href="#read-more"&gt;below&lt;/a&gt; ) and the ease it introduces into debugging üíï I loved this talk, and Justin's way of calm and kind explaining complex concepts.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#notes"&gt;Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#read-more"&gt;Read more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;DSL: Domain-Specific Language&lt;/li&gt;
&lt;li&gt;Rails leverages Ruby's implicitness:

&lt;ul&gt;
&lt;li&gt;self&lt;/li&gt;
&lt;li&gt;variable declarations&lt;/li&gt;
&lt;li&gt;parentheses&lt;/li&gt;
&lt;li&gt;much more&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Can we learn to read Ruby code like the Ruby interpreter?

&lt;ul&gt;
&lt;li&gt;ideally, you should understand the code, not just copy-paste&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;üî• üî• üî• OMG Justin's pry demo is a must-watch! I need to re-watch it and code along üî• üî• üî• &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#js-vs-ruby"&gt;
  &lt;/a&gt;
  JS vs Ruby
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;JS is very explicit: 

&lt;ul&gt;
&lt;li&gt;you need the parentheses for function invocations; &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;this&lt;/code&gt; is rarely implicit;&lt;/li&gt;
&lt;li&gt;explicit return in standard functions;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Ruby is &lt;em&gt;often&lt;/em&gt; implicit: 

&lt;ul&gt;
&lt;li&gt;parentheses are optional and so zero arg method calls are the same as object values (&lt;code&gt;user.first&lt;/code&gt; can be a method invocation or just a call for the attribute);&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;self&lt;/code&gt; can be implicit or explicit (it's explicit for writer methods because otherwise, Ruby's trying to declare a new local var)&lt;/li&gt;
&lt;li&gt;implicit returns;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#read-more"&gt;
  &lt;/a&gt;
  Read more
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://shakacode.com/talks"&gt;Justin's resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drive.google.com/file/d/1UUePkLINNN-Gpm5x5kPGBjNafrn29DdK/view?usp=sharing"&gt;slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/justin808/1fe1dfbecc00a18e7f2a"&gt;Justin's &lt;code&gt;~/.pryrc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.shakacode.com/search?q=pry"&gt;ShakaCode Forum Pry Articles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.shakacode.com/t/running-puma-for-debugging-with-pry/2018"&gt;Running puma for debugging&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>rails</category>
      <category>techtalks</category>
    </item>
    <item>
      <title>How to Automatically Execute Python Code Based on Datadog DevOps Alerts</title>
      <author>Derrick Sherrill</author>
      <pubDate>Wed, 14 Apr 2021 20:11:26 +0000</pubDate>
      <link>https://dev.to/wayscript/how-to-automatically-execute-python-code-based-on-datadog-devops-alerts-3f44</link>
      <guid>https://dev.to/wayscript/how-to-automatically-execute-python-code-based-on-datadog-devops-alerts-3f44</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In today‚Äôs video, we‚Äôre going to take a look at how to setup the Datadog Trigger in WayScript and how to use it. Datadog is a powerful monitoring program that can be utilized in many different ways through WayScript, including triggering code executions and more. Keep reading to learn more!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-our-script"&gt;
  &lt;/a&gt;
  Building our Script
&lt;/h2&gt;

&lt;p&gt;For this tutorial we‚Äôll simply explore how to set up and connect a Datadog account to WayScript. First, we‚Äôll add the Datadog Trigger module to our program tree. We‚Äôll need to authenticate the account using an API key. To do this, navigate to the toolbar at right and select the button with three bars; from here, click ‚ÄúAdd Account.‚Äù  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kydWlc0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wayscript.com/blog_img/190/1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kydWlc0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wayscript.com/blog_img/190/1.png" alt="tutorial step #1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From here, you will need a nickname, and API key, and an Application key.  &lt;/p&gt;

&lt;p&gt;To get the API and Application keys, visit the Datadog HQ and access your API key. The Application key can also be found here. You can create a new Application key to use solely for this program. Remember to keep both of these keys hidden and don‚Äôt share them with others. Paste both of these keys in the right toolbar in WayScript. Now, WayScript has access to your Datadog account.  &lt;/p&gt;

&lt;p&gt;After clicking ‚ÄúUpdate‚Äù and the refresh button in the toolbar, select your preferred organization. Next, turn on events in the toolbar by activating the toggle switch. To activate the trigger, switch the toggle within the Trigger module in the tree. Now, we‚Äôve activated the Datadog Trigger module within WayScript. However, we need to visit the Datadog HQ website to take care of a few more things before we can start using it.  &lt;/p&gt;

&lt;p&gt;First, we‚Äôll go to the Monitors tab on the website. For our account, we already have one running titled Demo Events. Clicking on this we see that we‚Äôre sending notifications to @webhook-wayscript-datadog-trigger. We can then copy this, go back to the Monitors tab, and create a new monitor. There are many different things we can monitor using various monitor types, like Events, Custom Checks, and Networks. We‚Äôll monitor an event for this tutorial.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xl57Ukvt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wayscript.com/blog_img/190/3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xl57Ukvt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wayscript.com/blog_img/190/3.png" alt="tutorial step #1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For our new event monitor, we‚Äôre just sending an event when a user uses an application built through Heroku and hosted on GitHub. We have a default string that says ‚Äúsomething big has happened,‚Äù so we‚Äôll type ‚Äúsomething big‚Äù in the ‚ÄúMatch events containing‚Äù text box to match our string. Next, we‚Äôll set alert conditions above zero, and then in the text box at the bottom we‚Äôll type ‚ÄúNotify‚Äù and pass in the @webhook-wayscript-datadog-trigger from earlier.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tXTz-imt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wayscript.com/blog_img/190/2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tXTz-imt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wayscript.com/blog_img/190/2.png" alt="tutorial step #1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now add a title and click save, and the new monitor will be found in the monitors tab. We‚Äôre now ready to start using Datadog for a number of other applications within WayScript.  &lt;/p&gt;

&lt;p&gt;Having the ability to use Datadog within WayScript adds even more usability to the program. We can use Datadog to monitor our program and automatically trigger code executions to solve any issues that may arise, along with many other potential uses. Stay tuned for future tutorials using the Datadog trigger!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Questions about this script or anything else? Join our &lt;a href="https://discord.gg/VWbXSbj"&gt;discord&lt;/a&gt;. We're always around to help.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Vuex best practices</title>
      <author>timothyokooboh</author>
      <pubDate>Wed, 14 Apr 2021 18:55:20 +0000</pubDate>
      <link>https://dev.to/timothyokooboh/vuex-best-practices-45dd</link>
      <guid>https://dev.to/timothyokooboh/vuex-best-practices-45dd</guid>
      <description>&lt;p&gt;As a Vue.js developer, I have been using Vuex for state management. &lt;/p&gt;

&lt;p&gt;Recently, I completed a course on Frontend Masters titled &lt;strong&gt;&lt;a href="https://frontendmasters.com/courses/vuex/"&gt;Vuex for intermediate developers&lt;/a&gt;&lt;/strong&gt;. I have also read a couple of useful posts on Vuex written by experienced Vue.js developers.&lt;/p&gt;

&lt;p&gt;Therefore, these days when utilizing Vuex in my application, I do my best to follow these patterns/strategies/rules.&lt;/p&gt;

&lt;p&gt;A. &lt;strong&gt;Always use &lt;em&gt;Mutations&lt;/em&gt; to update a value in Vuex state.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's say you have something like this in your state:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const state = {&lt;br&gt;
  age: 20&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To update the value of &lt;strong&gt;age&lt;/strong&gt; inside any of your Vue components, &lt;strong&gt;never do this:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;this.$store.state.age = 40;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Instead, write a mutation that will be responsible for updating the state.&lt;/p&gt;

&lt;p&gt;You could write something like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const mutations = {&lt;br&gt;
updateAge(state, payload) {&lt;br&gt;
state.age = payload&lt;br&gt;
}&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then in your components, you can do this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;this.$store.commit("updateAge", 40)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can even extend this example further with the next best practice.&lt;/p&gt;

&lt;p&gt;B. &lt;strong&gt;Let every mutation be associated with an action. Then dispatch these actions inside of your Vue components.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most experienced Vue developers propose that components should not directly commit mutations. Instead, every mutation should be associated with an action. Then components should dispatch these actions instead of directly committing mutations.&lt;/p&gt;

&lt;p&gt;To demonstrate this concept with our previous example, let's create an action:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const actions = {&lt;br&gt;
updateAge({ commit }, payload) {&lt;br&gt;
commit("updateAge", payload)&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then inside our Vue components, we will dispatch the action instead of committing the mutation directly.&lt;br&gt;
&lt;code&gt;this.$store.dispatch("updateAge", 40)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;C. &lt;strong&gt;Keep asynchronous logic inside actions and NEVER inside mutations&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Asynchronous logic such as fetching data from an API call should be carried out inside actions and not inside mutations. &lt;/p&gt;

&lt;p&gt;This is because each time a mutation updates the Vuex state, it leaves a &lt;em&gt;before&lt;/em&gt; and &lt;em&gt;after&lt;/em&gt; snapshot of the Vuex state inside of Vue dev tools. This is very useful in debugging because you can always go back in time to check the initial values in the state before the mutation was committed.&lt;/p&gt;

&lt;p&gt;But this unique ability of mutations is lost whenever an asynchronous event is fired inside a mutation. Hence it is best to only perform synchronous tasks inside mutations.&lt;/p&gt;

&lt;p&gt;Usually, these synchronous tasks only involve updating the value of the state just like we did before:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;state.age = payload&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;D. &lt;strong&gt;Actions and Mutations should not be used outside of their core responsibilities.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because Vuex actions and mutations are simply javascript functions, sometimes we execute logic that should&lt;br&gt;
not really be done inside either of them.&lt;/p&gt;

&lt;p&gt;Each time you commit a mutation, it should do only ONE thing: &lt;strong&gt;Update the value of the state&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Each time you dispatch an action, it should do one or more of the following:&lt;br&gt;
(i) Fetch data from an API.&lt;br&gt;
(ii) Commit a mutation.&lt;br&gt;
(iii) Dispatch an action.&lt;/p&gt;

&lt;p&gt;Each time you find yourself executing logic that falls outside of these core responsibilities, you should consider extracting that logic inside a &lt;strong&gt;Vuex plugin&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Thankfully, Vuex plugins are very easy to write. I will show you how.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use case&lt;/strong&gt;&lt;br&gt;
Let's say you dispatched an action that fetched data from an API. Then you committed a mutation and passed the API response as a payload to the mutation. Then inside your mutation, you updated the value of the Vuex state with the payload. And in addition, you want to save some values to local storage.&lt;/p&gt;

&lt;p&gt;It's best not to write the logic that saves the values to local storage inside of your mutation or action. Instead, you can write a simple plugin to do just that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to write a plugin&lt;/strong&gt;&lt;br&gt;
Let's create a Vuex plugin to save data in Local storage.&lt;/p&gt;

&lt;p&gt;Create a folder called &lt;strong&gt;plugins&lt;/strong&gt;, preferably inside of your Vuex store folder. Then create a file called &lt;strong&gt;webStorage.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;export default function saveToLocalStorage(store) {&lt;br&gt;
 store.subscribe((mutation, state) =&amp;gt; {&lt;br&gt;
if(mutation.type === 'updateState' ) {&lt;br&gt;
const payload = mutation.payload;&lt;br&gt;
localStorage.setItem("userId", payload.userId)&lt;br&gt;
localStorage.setItem("username", payload.username)&lt;br&gt;
}&lt;br&gt;
})&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A Vuex plugin is just a normal javascript function that receives the Vuex store as its only argument.&lt;/p&gt;

&lt;p&gt;In the code above, I check if the mutation that was committed is called "updateState". Then I access the payload from the mutation and save the username and userId to local storage.&lt;/p&gt;

&lt;p&gt;This logic does not update the Vuex state. Therefore, it's not best practice to place it inside of a mutation.&lt;/p&gt;

&lt;p&gt;To use this plugin, we will import it into the Vuex store (index.js file)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;store/index.js&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;import saveToLocalStorage from "plugins/webStorage";&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const Store = new Vuex.Store({&lt;br&gt;
plugins: [saveToLocalStorage],&lt;br&gt;
state: {},&lt;br&gt;
mutations: {},&lt;br&gt;
actions: {},&lt;br&gt;
getters: {}&lt;br&gt;
})&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Vuex plugins are really powerful and easy to write. You can use them to create powerful notification systems such as notifying a slack channel whenever a particular mutation or action is executed.&lt;/p&gt;

&lt;p&gt;E. &lt;strong&gt;Don't write redundant code inside Vuex getters.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The below Vuex getter is not really useful and should not have been written in the first place:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const getters: {&lt;br&gt;
getAge(state){&lt;br&gt;
return state.age;&lt;br&gt;
}&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It is only returning the value of age. In our components, we can conveniently access the value of age without the help of this getter.&lt;br&gt;
&lt;code&gt;this.$store.state.age&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use getters to compute derived values of the state&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But let's say we want to check if age is less than 18. Using a getter to &lt;strong&gt;compute&lt;/strong&gt; this value will be very useful.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const getters: {&lt;br&gt;
isUnderAge(state){&lt;br&gt;
return state.age &amp;lt; 18&lt;br&gt;
}&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then inside of our components, we can conveniently determine if a user is under age by accessing the value of the getter:&lt;br&gt;
&lt;code&gt;this.$store.getters.isUnderAge&lt;/code&gt; instead of writing &lt;code&gt;return this.$store.state.age &amp;lt; 18&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That's it, guys! ‚ò∫Ô∏è.&lt;br&gt;
Let me know what you think about these tips. And share the best practices you have been applying inside of your Vuex codebase too.&lt;/p&gt;

&lt;p&gt;I must add that these best practices will not be complete without a properly organized Vuex folder structure. But that's a topic for another time.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Iconic developers  üßêü§†ü§™</title>
      <author>Jasper de Jager</author>
      <pubDate>Wed, 14 Apr 2021 18:48:43 +0000</pubDate>
      <link>https://dev.to/jmdejager/iconic-developers-51m5</link>
      <guid>https://dev.to/jmdejager/iconic-developers-51m5</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@danielkcheung?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Daniel Cheung&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/lego?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#developers"&gt;
  &lt;/a&gt;
  Developers
&lt;/h1&gt;

&lt;p&gt;Developers, they come in all shapes and sizes. What do most of them have in common? They don't like to be put in a box. Despite this I'm going to do just that üòú I'm going to try to capture different developer characteristics by matching them with their own personal icon üòä I'd really like to know: with what kind of developer can you relate to the most? I'll start by describing 3 types, but please feel free to leave your own "iconic developer" in the comments!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-knowitall"&gt;
  &lt;/a&gt;
  üßê The know-it-all
&lt;/h2&gt;

&lt;p&gt;This programmer always seems to know the best solution, at least that their belief. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#habitat"&gt;
  &lt;/a&gt;
  Habitat
&lt;/h3&gt;

&lt;p&gt;Enjoys being around other programmers to showcase their knowledge. Can mostly be found crawling the web.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#best-to-ask-for"&gt;
  &lt;/a&gt;
  Best to ask for
&lt;/h3&gt;

&lt;p&gt;Doing research on new frameworks/tools because gathering knowledge is their&lt;br&gt;
power.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#needs-works-on"&gt;
  &lt;/a&gt;
  Needs works on
&lt;/h3&gt;

&lt;p&gt;Mostly needs to work on getting stuff done. There is a big difference between code in your head and actual code.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-cowboy"&gt;
  &lt;/a&gt;
  ü§† The cowboy
&lt;/h2&gt;

&lt;p&gt;This programmer writes code faster than their shadow. This speed comes with a cost though. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#habitat"&gt;
  &lt;/a&gt;
  Habitat
&lt;/h3&gt;

&lt;p&gt;Enjoys hackathons and feels comfortable in a team with other cowboys! &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#best-to-ask-for"&gt;
  &lt;/a&gt;
  Best to ask for
&lt;/h3&gt;

&lt;p&gt;Creating a proof of concepts that needs to be done fast.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#needs-works-on"&gt;
  &lt;/a&gt;
  Needs works on
&lt;/h3&gt;

&lt;p&gt;Writing code that is less prone to error and easier to maintain. Mostly the code of a cowboy is not something you want the change later on.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-funny-one"&gt;
  &lt;/a&gt;
  ü§™ The funny one
&lt;/h2&gt;

&lt;p&gt;Making puns all day and leaving Easter eggs left and right in the code. Keeps the team happy!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#habitat"&gt;
  &lt;/a&gt;
  Habitat
&lt;/h3&gt;

&lt;p&gt;Are at their best in a close team. Likes to add joy to programming!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#best-to-ask-for"&gt;
  &lt;/a&gt;
  Best to ask for
&lt;/h3&gt;

&lt;p&gt;Creating a proof of concepts that needs to be done fast.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#needs-works-on"&gt;
  &lt;/a&gt;
  Needs works on
&lt;/h3&gt;

&lt;p&gt;Being less influenced by the mood of others. Consistency in the code is hard if the mood is off.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#there-must-be-more"&gt;
  &lt;/a&gt;
  There must be more üòé
&lt;/h2&gt;

&lt;p&gt;Please let me know what you can come up with!&lt;br&gt;
To get you started:&lt;br&gt;
üòéüòÅü§êüò¥ü§ëüò§üê±‚Äçüë§&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gu"&gt;## üíª [name]&lt;/span&gt;

&lt;span class="gu"&gt;### Habitat&lt;/span&gt;

&lt;span class="gu"&gt;### Best to ask for&lt;/span&gt;

&lt;span class="gu"&gt;### Needs works on&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looking forward to your creativity!&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>webdev</category>
      <category>watercooler</category>
      <category>development</category>
    </item>
    <item>
      <title>Redux Best Practice 2021 - Redux Cool</title>
      <author>React</author>
      <pubDate>Wed, 14 Apr 2021 18:38:35 +0000</pubDate>
      <link>https://dev.to/reactjs/redux-best-practice-2021-redux-cool-5g86</link>
      <guid>https://dev.to/reactjs/redux-best-practice-2021-redux-cool-5g86</guid>
      <description>&lt;h1&gt;
  &lt;a href="#build-redux-logic-without-getting-nervous-heart"&gt;
  &lt;/a&gt;
  Build redux logic, without getting nervous ‚ù§Ô∏è
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/Ruben-Arushanyan/redux-cool"&gt;Redux Cool&lt;/a&gt;&lt;/strong&gt; is an awesome tiny package that allows you to easily and intuitively write redux logic. It is the collection of two separate libraries, one designed to create reducer functions and the other to create action objects: (&lt;a href="https://github.com/Ruben-Arushanyan/reducers-creator"&gt;Reducers Creator&lt;/a&gt; for creating reducers functions and &lt;a href="https://github.com/Ruben-Arushanyan/actions-creator"&gt;Actions Creator&lt;/a&gt; for creating actions object)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;redux redux-cool
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;Create a file named &lt;code&gt;src/accountReducer.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;src/accountReducer.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;reducersCreator&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redux-cool&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reducerTree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="na"&gt;PROFILE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="na"&gt;SET&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;
            &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;

        &lt;span class="na"&gt;UPDATE_EMAIL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;
            &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="na"&gt;CLEAR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;accountReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reducersCreator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ACCOUNT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;reducerTree&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;accountReducer&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see in the example above, we create an &lt;strong&gt;&lt;code&gt;accountReducer&lt;/code&gt;&lt;/strong&gt; by calling the &lt;code&gt;reducersCreator&lt;/code&gt; function and passing it three arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;"ACCOUNT"&lt;/code&gt;&lt;/strong&gt; : It's the &lt;strong&gt;name&lt;/strong&gt; of the reducer, it can be any &lt;code&gt;String&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;initialState&lt;/code&gt;&lt;/strong&gt; : It's the &lt;strong&gt;initial state&lt;/strong&gt; of the reducer, it can be any &lt;code&gt;Object&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;reducerTree&lt;/code&gt;&lt;/strong&gt; : It's an &lt;code&gt;Object&lt;/code&gt; &lt;em&gt;(can have any deep and nested structure)&lt;/em&gt; that intuitively and in readible ways, defines &lt;code&gt;handler functions&lt;/code&gt; for reducer. &lt;code&gt;Handler functions&lt;/code&gt; as an argument take &lt;code&gt;state&lt;/code&gt; and &lt;code&gt;action&lt;/code&gt; and update the state. It automatically uses the &lt;a href="https://immerjs.github.io/immer/"&gt;immer library&lt;/a&gt; to do &lt;strong&gt;immutable updates&lt;/strong&gt; with normal mutative code, like &lt;code&gt;state.profile.data.email = email&lt;/code&gt;. There is no need to manually do immutable updates and return the result. If you are not familiar with the &lt;a href="https://immerjs.github.io/immer/"&gt;immer library&lt;/a&gt;, please look at it, it is very important.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a result, we get the &lt;strong&gt;&lt;code&gt;accountReducer&lt;/code&gt;&lt;/strong&gt; function, which can handle the following type of actions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;types: &lt;code&gt;"PROFILE/SET"&lt;/code&gt; or &lt;code&gt;"ACCOUNT/PROFILE/SET"&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;types: &lt;code&gt;"PROFILE/UPDATE_EMAIL"&lt;/code&gt; or &lt;code&gt;"ACCOUNT/PROFILE/UPDATE_EMAIL"&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;types: &lt;code&gt;"CLEAR"&lt;/code&gt; or &lt;code&gt;"ACCOUNT/CLEAR"&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, each handler can work with &lt;strong&gt;two&lt;/strong&gt; types of actions, one consisting of the path described in &lt;em&gt;reducerTree&lt;/em&gt;, the second is the same as the first type plus the reducer name that should be added from the beginning like &lt;code&gt;"CLEAR"&lt;/code&gt; and &lt;code&gt;"ACCOUNT/CLEAR"&lt;/code&gt;. That is the most important and useful feature of this library.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#in-both-cases-raw-clear-endraw-and-raw-accountclear-endraw-the-clear-handler-is-called-in-the-accountreducer-but-when-we-have-multiple-reducers-that-have-the-clear-handler-and-we-need-to-clear-the-state-of-all-reducers-we-must-use-raw-clear-endraw-action-type-but-if-we-need-to-delete-only-the-account-reducer-state-we-must-use-the-raw-accountclear-endraw-action-type"&gt;
  &lt;/a&gt;
  In both cases (&lt;code&gt;"CLEAR"&lt;/code&gt; and &lt;code&gt;"ACCOUNT/CLEAR"&lt;/code&gt;), the &lt;strong&gt;CLEAR&lt;/strong&gt; handler is called in the &lt;strong&gt;accountReducer&lt;/strong&gt;, but when we have multiple reducers that have the &lt;strong&gt;CLEAR&lt;/strong&gt; handler and we need to clear the state of all reducers, we must use &lt;code&gt;"CLEAR"&lt;/code&gt; action type, but if we need to delete only the &lt;strong&gt;ACCOUNT&lt;/strong&gt; reducer state we must use the &lt;code&gt;"ACCOUNT/CLEAR"&lt;/code&gt; action type.
&lt;/h3&gt;



&lt;p&gt;Now that we have the &lt;strong&gt;accountReducer&lt;/strong&gt;, let's create the redux store&lt;/p&gt;

&lt;p&gt;Create a file named &lt;strong&gt;src/store.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;src/store.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;actionsCreator&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redux-cool&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;accountReducer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./accountReducer.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;// Create Store&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accountReducer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Dispatch Set Profile Action&lt;/span&gt;
&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;actionsCreator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PROFILE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SET&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test@test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//     profile: {&lt;/span&gt;
&lt;span class="c1"&gt;//         data: {email: 'test@test', name: 'Test'}&lt;/span&gt;
&lt;span class="c1"&gt;//     }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;


&lt;span class="c1"&gt;// Dispatch Update Email Action&lt;/span&gt;
&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;actionsCreator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PROFILE&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UPDATE_EMAIL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test2@test2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//     profile: {&lt;/span&gt;
&lt;span class="c1"&gt;//         data: {email: 'test2@test2', name: 'Test'}&lt;/span&gt;
&lt;span class="c1"&gt;//     }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;



&lt;span class="c1"&gt;// Dispatch Clear Email Action&lt;/span&gt;
&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;actionsCreator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CLEAR&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//     profile: {&lt;/span&gt;
&lt;span class="c1"&gt;//         data: null&lt;/span&gt;
&lt;span class="c1"&gt;//     }&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ruben-arushanyan/redux-cool"&gt;github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/RubenArushanyan"&gt;twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/redux-cool"&gt;npm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Avoid Procrastination and Improve Focus</title>
      <author>Javid Mougamadou</author>
      <pubDate>Wed, 14 Apr 2021 18:31:43 +0000</pubDate>
      <link>https://dev.to/javidjms/avoid-procrastination-and-improve-focus-3l63</link>
      <guid>https://dev.to/javidjms/avoid-procrastination-and-improve-focus-3l63</guid>
      <description>&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-procrastination"&gt;
  &lt;/a&gt;
  What is Procrastination?
&lt;/h3&gt;

&lt;p&gt;People who procrastinate are often mislabeled as lazy. Many of us even engage in self talk about how lazy or unfocused we are when we engage in procrastination. But procrastination is not a reflection of someone‚Äôs work ethic or their ability to focus. There‚Äôs more to it than that.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When we procrastinate, we typically put off something that we find difficult, challenging, or uncomfortable in favor of something easier or more appealing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Chronic procrastinators know that waiting will cause more harm than good. We know that this choice will ultimately lead to a worse outcome for us physically, emotionally, and otherwise, but we do it anyway&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-real-reason-we-procrastinate"&gt;
  &lt;/a&gt;
  The Real Reason We Procrastinate
&lt;/h3&gt;

&lt;p&gt;Dr. Tim Pychyl is also a professor of psychology and a member of the Procrastination Research Group at Carleton University in Ottawa. He said, ‚ÄúProcrastination is an emotion regulation problem, not a time management problem.‚Äù Sirois and Pychyl teamed up in 2013 to research the notion that people place a priority on their immediate emotional needs over those of their future selves via procrastination. Here‚Äôs what they concluded.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;People engage in this irrational cycle of chronic procrastination because of an inability to manage negative moods around a task.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When faced with an ‚Äúaversive‚Äù task, i.e. something that we find ‚Äúboring, frustrating, lacking in meaning and/or structure,‚Äù we react with negative feelings and moods. Then we have a choice. We can get through those feelings and moods via ‚Äúself-regulation‚Äù or we can succumb to the immediately protective choice of procrastination.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-problem-with-procrastination"&gt;
  &lt;/a&gt;
  The Problem with Procrastination
&lt;/h3&gt;

&lt;p&gt;We believe that when we sit down to work tomorrow, or next week, or next month before the big deadline, we will feel like doing it. But we are wrong. When we choose the temporary reprieve from boredom, frustration, or challenge and kick the can down the road to our future selves, we are only making matters cumulatively worse.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We aren‚Äôt dismissing our future selves as being unimportant or anything. We are just absolutely convinced that our future self will be better able to handle the given task.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For one thing, a constant current of anxiety and tension will be along for the entire procrastination ride. This nagging looming deadline will be churning in the background, coloring our daily mood and impacting our health and well being. The negative feelings we have about the task itself make us procrastinate. That, in turn, leads to ruminating negative thoughts about the act of procrastination itself. It‚Äôs a cycle that has a snowball effect, gathering more self blame, shame, anxiety, and stress along the way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#techniques"&gt;
  &lt;/a&gt;
  Techniques
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-daily-todo-list-dont-forget-to-readupdate-it-daily-"&gt;
  &lt;/a&gt;
  1. Daily Todo List (Don't forget to read/update it daily !)
&lt;/h3&gt;

&lt;p&gt;Make a list of 3-6 things that you want to get done during the day. Put them in order of the most important or time sensitive to the least important or time sensitive. Start working on the first task until it is finished. Check it off, mark it out, and move to the next item. Keep going until your the end of the day. Move any tasks that are left undone to the new list you will create for the next day.&lt;/p&gt;

&lt;h5&gt;Remember to start the day by reading the current list of tasks and update it if it is needed.&lt;/h5&gt;

&lt;h3&gt;
  &lt;a href="#2-digitally-declutter"&gt;
  &lt;/a&gt;
  2. Digitally Declutter
&lt;/h3&gt;

&lt;p&gt;Let‚Äôs face it. Distractions are very easily found these days. If you tend to wander into social media or headline news or your personal inbox instead of working on the more pressing task at hand, it‚Äôs time to digitally declutter your workspace.&lt;/p&gt;

&lt;p&gt;The idea here is to make it harder to get distracted by removing the devices that hold those distractions. So, let‚Äôs say you need to create an outline for an upcoming presentation and you plan to work at the breakfast counter in the kitchen. Take only your laptop into the workspace. Put your phone, tablet, and any other devices you may have in another room and make sure they are on silent.&lt;/p&gt;

&lt;p&gt;Close all tabs other than the document you are actively writing into. If you find that you cannot stop opening new windows to browse online, go old school and pull out an actual pad of paper and pen to write your outline in ink.&lt;/p&gt;

&lt;p&gt;To take this a step further, declutter your actual devices so that distractions are not as easily accessible. Remove social media apps from your devices, delete games, and create folders to organize essential apps.&lt;/p&gt;

&lt;h5&gt;Remember to keep a specific workspace based on your task in order to avoid distractions&lt;/h5&gt;

&lt;h3&gt;
  &lt;a href="#3-bundle-up"&gt;
  &lt;/a&gt;
  3. Bundle Up
&lt;/h3&gt;

&lt;p&gt;We all love a package deal. Bring the bundle up benefit into your life to get things done. This technique works very well for self care and health habits as well as household chores and responsibilities that we all find so easy to put off.&lt;/p&gt;

&lt;p&gt;We are generally only accountable to ourselves for things like working out, mowing the grass, cleaning the house, cooking healthy meals, or doing the laundry. Make these tasks less tiresome and more appealing by bundling them with something you really love.&lt;/p&gt;

&lt;p&gt;If audiobooks are your jam, only listen to them when you are cleaning the house. Catch up on your favorite podcasts only while you cut the grass or cook dinner. Watch the latest binge-worthy show only when you are on the treadmill.&lt;/p&gt;

&lt;h5&gt;Find the trick to do annoying chores in a funny way.&lt;/h5&gt;

&lt;h3&gt;
  &lt;a href="#4-set-a-timer-ex-custom-podomoro-flow"&gt;
  &lt;/a&gt;
  4. Set a Timer (Ex: Custom, Podomoro, Flow)
&lt;/h3&gt;

&lt;p&gt;People can accomplish staggering volumes of work simply by committing to show up and do the work for a set period of time, no matter what. Writers past and present have found success with time techniques but it works with a wide variety of tasks. Here‚Äôs how it works.&lt;/p&gt;

&lt;p&gt;Pick a task that you want to get done. This can be a routine, daily responsibility or a special project or work product you need to produce on a particular deadline. Decide how much time you have to work on the task each day or in this particular work period. It could be 15 minutes, 2 hours, or 60 seconds...pick a time period that makes sense for the task at hand. Set a timer for that time period and don‚Äôt stop until the timer goes off. No matter what!&lt;/p&gt;

&lt;p&gt;But, what if your kid comes in the room and needs help with their lesson? What if you need to take a bathroom break? What if the doorbell rings or your mom calls or the dog starts barking madly to go out? Look, life happens. We know that. Hit the pause button on the timer, take care of the immediate need, and get right back to it.&lt;/p&gt;

&lt;h5&gt;Remember to start the timer each time you pick a task.&lt;/h5&gt;

&lt;h3&gt;
  &lt;a href="#5-worst-thing-first"&gt;
  &lt;/a&gt;
  5. Worst Thing First
&lt;/h3&gt;

&lt;p&gt;This is a little psychological trick that is both effective and super rewarding. Think about all the things you want to do today or that should happen everyday. Take care of the task that is the least appealing as soon as humanly possible. Get it over with and move on to the things that are more engaging, easy, and fun, or just less frustrating, dull, or challenging.&lt;/p&gt;

&lt;p&gt;Once that ‚Äúworst thing‚Äù is finished and done, there will be an immediate lift in spirit and a real sense of accomplishment. Ride that wave of success forward knowing that things will only get better from there! Worst Thing First is motivating, rewarding, and really works.&lt;/p&gt;

&lt;h5&gt;Remember to not pick the easiest task first&lt;/h5&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.doit.io/procrastinate/"&gt;https://blog.doit.io/procrastinate/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>productivity</category>
      <category>zen</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 KEY LESSONS REACT TUTORIALS DON'T TEACH</title>
      <author>pawanbhayde</author>
      <pubDate>Wed, 14 Apr 2021 18:26:55 +0000</pubDate>
      <link>https://dev.to/pawanbhayde/5-key-lessons-react-tutorials-don-t-teach-dnf</link>
      <guid>https://dev.to/pawanbhayde/5-key-lessons-react-tutorials-don-t-teach-dnf</guid>
      <description>&lt;p&gt;There are many essential concepts and lessons that React developers need to know that simply aren't covered in most tutorials.&lt;/p&gt;

&lt;p&gt;I have handpicked the topics I believe are some of the most important for you to know, but few articles have dedicated the time to cover in detail.&lt;/p&gt;

&lt;p&gt;Let's take a look at five key React lessons worth knowing which you might not find elsewhere.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. How React state is actually updated&lt;/strong&gt;&lt;br&gt;
As a React developer, you know that state can be created and updated with the useState and useReducer hooks.&lt;a href="https://webdevpawan.blogspot.com/2021/04/5-key-lessons-react-tutorials-dont-teach.html"&gt;Read More&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. It's better to use multiple effects instead of one&lt;/strong&gt;&lt;br&gt;
When performing a side effect, most React developers will useEffect just once and attempt to perform multiple side effects within the same effect function.&lt;a href="https://webdevpawan.blogspot.com/2021/04/5-key-lessons-react-tutorials-dont-teach.html"&gt;Read More&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Don't optimize functions that update state (useState, useReducer)&lt;/strong&gt;&lt;br&gt;
A common task whenever we pass down a callback function from a parent component to a child component is to prevent it from being recreated, unless its arguments have changed.&lt;a href="https://webdevpawan.blogspot.com/2021/04/5-key-lessons-react-tutorials-dont-teach.html"&gt;Read More&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. The useRef hook can preserve state across renders&lt;/strong&gt;&lt;br&gt;
As React developers, it's very helpful sometimes to be able to reference a given React element with the help of a ref. We create refs in React with the help of the useRef hook.&lt;a href="https://webdevpawan.blogspot.com/2021/04/5-key-lessons-react-tutorials-dont-teach.html"&gt;Read More&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. How to prevent your React app from crashing&lt;/strong&gt;&lt;br&gt;
One of the most important lessons for React developers to know, especially if they haven't pushed a React application to the web, is what to do with uncaught errors.&lt;a href="https://webdevpawan.blogspot.com/2021/04/5-key-lessons-react-tutorials-dont-teach.html"&gt;Read More&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Related Post&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/pawanbhayde" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mZZZpr0s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--zCOCaAYW--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/610655/1a00c3e4-b6ea-4f09-9824-27097fba9b7e.jpg" alt="pawanbhayde image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pawanbhayde/css-scroll-down-animated-button-scroll-more-button-1nmg" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;CSS Scroll Down Animated Button | Scroll More Button&lt;/h2&gt;
      &lt;h3&gt;pawanbhayde „Éª Apr 13 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>TIP: Never leave your email address raw in the mailto link! Here's what to do instead</title>
      <author>Naseki</author>
      <pubDate>Wed, 14 Apr 2021 17:36:09 +0000</pubDate>
      <link>https://dev.to/naseki/tip-never-leave-your-email-address-raw-in-the-mailto-link-here-s-what-to-do-instead-1c70</link>
      <guid>https://dev.to/naseki/tip-never-leave-your-email-address-raw-in-the-mailto-link-here-s-what-to-do-instead-1c70</guid>
      <description>&lt;p&gt;Usually, when you leave your email address on your website for people to click on, you may do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"mailto:name@example.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;name@example.com&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Right?&lt;/p&gt;

&lt;p&gt;This is, however, the perfect recipe to get spam into your email!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#this-is-how-email-harvesting-works"&gt;
  &lt;/a&gt;
  This is how email harvesting works
&lt;/h1&gt;

&lt;p&gt;In order for spambots to get a nice long list of emails to annoy people to click their suspicious-looking links, they use email harvesters to curate these lists. Emails are typically found on websites where people leave theirs to be contacted.&lt;/p&gt;

&lt;p&gt;Some people think this is easy to solve simply by masking the email like &lt;code&gt;name[AT]example[DOT]com&lt;/code&gt;. This, however, doesn't solve anything due to two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The mailto link still contains the actual email address as you can't replace it with the one above. Since email harvesters look into the source code of your website, they'd still be able to get your email.&lt;/li&gt;
&lt;li&gt;Most email harvesters are advanced enough to detect common patterns like [AT] and (AT) and such, so they won't do much.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, what now?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#encode-your-email-address"&gt;
  &lt;/a&gt;
  Encode your email address
&lt;/h1&gt;

&lt;p&gt;Fortunately, there's a way to make your email address unreadable for email harvesters!&lt;/p&gt;

&lt;p&gt;You may have seen characters like &lt;code&gt;&amp;amp;amp;&lt;/code&gt; and &lt;code&gt;&amp;amp;gt;&lt;/code&gt; in HTML before. These are called &lt;strong&gt;HTML entities&lt;/strong&gt;. These are symbols that have been encoded so they won't be mistaken for HTML tags.&lt;/p&gt;

&lt;p&gt;However, what not many people know is that you can encode every single character into an HTML entity. And even better, putting these into your hrefs will convert them back into regular text for normal visitors that are visiting your website rather than looking at the source code. It's perfect for this situation!&lt;/p&gt;

&lt;p&gt;HTML entities for regular letters are made of HEX encoding. The HTML entities would look like like &lt;code&gt;&amp;amp;#HEXCODE;&lt;/code&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-do-it"&gt;
  &lt;/a&gt;
  Let's do it!
&lt;/h1&gt;

&lt;p&gt;Use &lt;a href="https://onlineutf8tools.com/convert-utf8-to-html-entities"&gt;this handy tool&lt;/a&gt; to convert! Make sure to copy the entire href link, not just your email address!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bx2J00S0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wp8z4lq06l79pradccx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bx2J00S0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wp8z4lq06l79pradccx.jpg" alt="Example screenshot of how to convert the link"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;After that, copy-paste that string into your href and you're done! Here's how it should look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"&amp;amp;#x6d;&amp;amp;#x61;&amp;amp;#x69;&amp;amp;#x6c;&amp;amp;#x74;&amp;amp;#x6f;&amp;amp;colon;&amp;amp;#x6e;&amp;amp;#x61;&amp;amp;#x6d;&amp;amp;#x65;&amp;amp;commat;&amp;amp;#x65;&amp;amp;#x78;&amp;amp;#x61;&amp;amp;#x6d;&amp;amp;#x70;&amp;amp;#x6c;&amp;amp;#x65;&amp;amp;period;&amp;amp;#x63;&amp;amp;#x6f;&amp;amp;#x6d;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My email&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This makes the whole thing a lot harder to decypher for most email harvesters. That, while still keeping the link clickable for others! On top of that, using inspect element to check the HTML gives you the decoded email, even though the source code has it encoded!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JKcxuq0B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vb34uh9ajgg3gohr8aa7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JKcxuq0B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vb34uh9ajgg3gohr8aa7.jpg" alt="Comparison of devtools and source code"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This means that it still ends up being readable for humans.&lt;/p&gt;

&lt;p&gt;It's even better if you use some non-traditional way of masking your email address in the actual text, or just don't use your email at all (like in the sample above).&lt;/p&gt;

&lt;p&gt;We're all good now! No more disappointments that you think you just got a client but it turns out to be spam!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ay3KzHPn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/85t5l2vp28xdw748e2tv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ay3KzHPn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/85t5l2vp28xdw748e2tv.gif" alt="Good job fellow dev"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading! üíª
&lt;/h1&gt;

&lt;p&gt;If you wanna stay up to date with dev, subscribe to my newsletter! I send a couple of articles and resources once a week and will let you know when I've written a new article as well.&lt;/p&gt;

&lt;p&gt;Not sure if it's for you? Read a sample newsletter &lt;a href="https://buttondown.email/Naseki/archive/time-management-ethical-resources-and-a-very-shiny-3d/"&gt;here&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://buttondown.email/Naseki"&gt;Subscribe here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>html</category>
      <category>security</category>
    </item>
    <item>
      <title>5 Key Lessons React Tutorials Don't Teach</title>
      <author>Reed Barger</author>
      <pubDate>Wed, 14 Apr 2021 17:15:50 +0000</pubDate>
      <link>https://dev.to/reedbarger/5-key-lessons-react-tutorials-don-t-teach-5pb</link>
      <guid>https://dev.to/reedbarger/5-key-lessons-react-tutorials-don-t-teach-5pb</guid>
      <description>&lt;p&gt;There are many essential concepts and lessons that React developers need to know that simply aren't covered in most tutorials.&lt;/p&gt;

&lt;p&gt;I have handpicked the topics I believe are some of the most important for you to know, but few articles have dedicated the time to cover in detail.&lt;/p&gt;

&lt;p&gt;Let's take a look at five key React lessons worth knowing which you might not find elsewhere.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Want to learn all the skills you need to become a highly-paid React developer? Check out the &lt;a href="https://reactbootcamp.com"&gt;&lt;strong&gt;React Bootcamp&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#1-how-react-state-is-actually-updated"&gt;
  &lt;/a&gt;
  1. How React state is actually updated
&lt;/h2&gt;

&lt;p&gt;As a React developer, you know that state can be created and updated with the &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useReducer&lt;/code&gt; hooks.&lt;/p&gt;

&lt;p&gt;But what happens exactly when you update a component's state with either of these hooks? Is the state updated immediately or is it done at some later time?&lt;/p&gt;

&lt;p&gt;Let's look at the following code, which it's a very simple counter application. As you would expect, you can click on the button and our counter increases by 1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt; {/&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;we&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what if we attempt to add an additional line, which also updates our count by one. What do you think will happen?&lt;/p&gt;

&lt;p&gt;When you click on the button, will our displayed count increase by one or two?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt; {/&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we run this code we see it's incremented only by one! Despite attempting to increment the count by one twice, with two separate state updates.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why does our counter display 1, despite clearly incrementing state by 1 two times?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The reason for this is that React schedules a state update to be performed when we call when we update state the first time. Because it is just scheduled and is not performed immediately (it is asynchronous and not synchronous), our &lt;code&gt;count&lt;/code&gt; variable is not updated before we attempt to update it a second time.&lt;/p&gt;

&lt;p&gt;In other words, because the state updated is scheduled, not performed immediately, the second time we called &lt;code&gt;setCount&lt;/code&gt;, &lt;code&gt;count&lt;/code&gt; is still just &lt;code&gt;0&lt;/code&gt;, not &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The way that we can fix this to update state reliably, despite state updates being asynchronous, is to use the inner function that's available within the &lt;code&gt;useState&lt;/code&gt; setter function.&lt;/p&gt;

&lt;p&gt;This allows us to get the previous state and return the value that we want it to be in the body of the inner function. When we use this pattern, we see that it's incremented by two like we originally wanted:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevCount&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;prevCount&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevCount&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;prevCount&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;addOne&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-its-better-to-use-multiple-effects-instead-of-one"&gt;
  &lt;/a&gt;
  2. It's better to use multiple effects instead of one
&lt;/h2&gt;

&lt;p&gt;When performing a side effect, most React developers will &lt;code&gt;useEffect&lt;/code&gt; just once and attempt to perform multiple side effects within the same effect function.&lt;/p&gt;

&lt;p&gt;What does that look like? Below you can see where we are fetching both post and comment data in one useEffect hook to be put in their respective state variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPosts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;comments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setComments&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// fetching post data&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setPosts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="c1"&gt;// fetching comments data&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/comments&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setComments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PostsList&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CommentsList&lt;/span&gt; &lt;span class="nx"&gt;comments&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;comments&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of attempting to cram all of your side effects into a single effect hook, just as you can use the state hook more than once, you can use several effects.&lt;/p&gt;

&lt;p&gt;Doing so allows us to separate our different actions into different effects for a better separation of concerns.&lt;/p&gt;

&lt;p&gt;A better separation of concerns is a major benefit that React hooks provide as compared to using lifecycle methods within class components. In methods like &lt;code&gt;componentDidMount&lt;/code&gt;, for example, it was necessary to include any action that we want it to be performed after our component mounted. You could not break up your side effects into multiple methods; each lifecycle method in classes can be used once and only once.&lt;/p&gt;

&lt;p&gt;The major benefit of React hooks is that we are able to break up our code based upon what it's doing. Not only can we separate actions that we are performing after render into separate into multiple effects, but we can also co-locate our state:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPosts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setPosts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;comments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setComments&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/comments&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setComments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PostsList&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CommentsList&lt;/span&gt; &lt;span class="nx"&gt;comments&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;comments&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means we can put the state hook with the effect hook that is related to this helps to organize our code much better and better understand what it's doing at a glance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-dont-optimize-functions-that-update-state-usestate-usereducer"&gt;
  &lt;/a&gt;
  3. Don't optimize functions that update state (useState, useReducer)
&lt;/h2&gt;

&lt;p&gt;A common task whenever we pass down a callback function from a parent component to a child component is to prevent it from being recreated, unless its arguments have changed.&lt;/p&gt;

&lt;p&gt;We can perform this optimization with the help of the &lt;code&gt;useCallback&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;useCallback was created specifically for callback functions that are passed to child components to make sure that they are not recreated needlessly, which incurs a performance hit on our components whenever there is a re-render.&lt;/p&gt;

&lt;p&gt;The reason for this being whenever our parent component re-renders, it will cause all child components to re-render as well. This is what causes our callback functions to be recreated on every re-render.&lt;/p&gt;

&lt;p&gt;However, if we are using a setter function to update state that we've created with the useState or useReducer hooks. We do not need to wrap that with useCallback.&lt;/p&gt;

&lt;p&gt;In other words, there is no need to do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Don't wrap setText in useCallback (it won't change as is)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSetText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Input&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;handleSetText&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSetText&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Submit&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleSetText&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSetText&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The reason is taken directly from the React documentation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;React guarantees that setState function identity is stable and won't change on re-renders. This is why it's safe to omit from the useEffect or useCallback dependency list.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Therefore, not only do we not need to optimize it unnecessarily with useCallback, but we also do not need to include it as a dependency within useEffect because it will not change.&lt;/p&gt;

&lt;p&gt;This is important to note because in many cases, it can cut down the code that we need to use and most importantly, it is an unproductive attempt to optimize your code as it can incur performance problems of its own.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-the-useref-hook-can-preserve-state-across-renders"&gt;
  &lt;/a&gt;
  4. The useRef hook can preserve state across renders
&lt;/h2&gt;

&lt;p&gt;As React developers, it's very helpful sometimes to be able to reference a given React element with the help of a ref. We create refs in React with the help of the &lt;code&gt;useRef&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;It's important to note, however, that use ref isn't just helpful for referencing to a certain DOM element. The React documentation says so itself:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The ref object that's created by useRef is a generic container with a current property that's mutable and can hold any value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are certain benefits to be able to store and update values with useRef. The reason being is that it allows us to store a value that will not be in memory that will not be erased across re-renders.&lt;/p&gt;

&lt;p&gt;If we wanted to keep track of a value across renders with the help of a simple variable, it would be reinitialized each time the component renders. However, if you use a ref, the value stored in it will remain constant across renders of your component.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What is a use case for leveraging useRef in this way?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This could be helpful in the event that we wanted to perform a given side effect on the initial render only, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;hasRendered&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasRendered&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasRendered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;perform action only once!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try running this code yourself.&lt;/p&gt;

&lt;p&gt;As you will see, no matter how many times the button is clicked, state is updated and a re-render takes place, the action we want to perform (see &lt;code&gt;console.log&lt;/code&gt;) is only performed once.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-how-to-prevent-your-react-app-from-crashing"&gt;
  &lt;/a&gt;
  5. How to prevent your React app from crashing
&lt;/h2&gt;

&lt;p&gt;One of the most important lessons for React developers to know, especially if they haven't pushed a React application to the web, is what to do with uncaught errors.&lt;/p&gt;

&lt;p&gt;In the example below, we are attempting to display a Header component in our app, but are performing an action that results in an error. Namely, attempting to get a property from a null value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;; /&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we push this code to production, we will see a blank screen exactly like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NnJGazoC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reedbarger.com/content/images/2021/04/5-key-lessons-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NnJGazoC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reedbarger.com/content/images/2021/04/5-key-lessons-1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why do we see nothing?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Again, we can find the answer for this within the React documentation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As of React 16, errors that were not caught by any error boundary will result in unmounting of the whole React component tree.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While in development, you see a big red error message with a stack trace that tells you where the error. When your application is live, however, you're just going to see a blank screen.&lt;/p&gt;

&lt;p&gt;This is not the desired behavior that you want for your application.&lt;/p&gt;

&lt;p&gt;But there is a way to fix it, or at least show them something that tells the user that an error took place if the application accidentally crashes. You can wrap your component tree in what's called an error boundary.&lt;/p&gt;

&lt;p&gt;Error boundaries are components that allow us to catch errors and show users a fallback message that tells them that something wrong occurred. That might include instructions on how to dismiss the error (i.e. reloading the page).&lt;/p&gt;

&lt;p&gt;The way that we can use an error boundary is with the help of the package &lt;code&gt;react-error-boundary&lt;/code&gt;. We can wrap it around the component we believe is error-prone. It can also be wrapped around our entire app component tree:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-error-boundary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt; &lt;span class="nx"&gt;FallbackComponent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ErrorFallback&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ErrorBoundary&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ErrorFallback&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;alert&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Oops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;there&lt;/span&gt; &lt;span class="nx"&gt;was&lt;/span&gt; &lt;span class="nx"&gt;an&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also display the error message however you like and style it just like you would any normal component.&lt;/p&gt;

&lt;p&gt;The result that we get when an error does occur is much better:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ijshelc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reedbarger.com/content/images/2021/04/5-key-lessons-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ijshelc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reedbarger.com/content/images/2021/04/5-key-lessons-2.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enjoy-this-post-join-the-react-bootcamp"&gt;
  &lt;/a&gt;
  Enjoy this post? Join The React Bootcamp
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="http://bit.ly/join-react-bootcamp"&gt;The React Bootcamp&lt;/a&gt;&lt;/strong&gt; takes everything you should know about learning React and bundles it into one comprehensive package, including videos, cheatsheets, plus special bonuses.&lt;/p&gt;

&lt;p&gt;Gain the insider information hundreds of developers have already used to master React, find their dream jobs, and take control of their future:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bit.ly/join-react-bootcamp"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w2usNUi9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://reedbarger.nyc3.digitaloceanspaces.com/react-bootcamp-banner.png" alt="The React Bootcamp"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Click here to be notified when it opens&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>#3 of 100DaysOfCode </title>
      <author>atulit023</author>
      <pubDate>Wed, 14 Apr 2021 17:14:52 +0000</pubDate>
      <link>https://dev.to/icecoffee/3-of-100daysofcode-2ofe</link>
      <guid>https://dev.to/icecoffee/3-of-100daysofcode-2ofe</guid>
      <description>&lt;p&gt;Third-Day, well that was pretty mindboggling. I made another project using React and, I feel great about this one. üòÄ&lt;/p&gt;

&lt;p&gt;The syntax is quite overwhelming but still not as bad as callback hell and the schemas in MongoDB so it's Ok.&lt;/p&gt;

&lt;p&gt;Anyway, I learned the following things today.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TC39 is the technical community that makes yearly releases of ECMAScript. - more of a did you know‚ùì really&lt;/li&gt;
&lt;li&gt;Classes in ES6.&lt;/li&gt;
&lt;li&gt;fetch &lt;em&gt;API&lt;/em&gt;, &lt;em&gt;promises&lt;/em&gt;, &lt;em&gt;async&lt;/em&gt;, and &lt;em&gt;await&lt;/em&gt;. 
Just enough to make the app working otherwise I have no idea how they work&lt;/li&gt;
&lt;li&gt;Class Component in React - This one is the hero to the day.

&lt;ul&gt;
&lt;li&gt;functionality of constructor and this in the class component &lt;/li&gt;
&lt;li&gt;what is &lt;em&gt;React.Component&lt;/em&gt; class &lt;/li&gt;
&lt;li&gt;super() constructor &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;render() - A class component must have a render() function&lt;/li&gt;
&lt;li&gt;'&lt;em&gt;props&lt;/em&gt;' keyword (plural) in class component not &lt;del&gt;&lt;em&gt;prop&lt;/em&gt;&lt;/del&gt;
&lt;/li&gt;
&lt;li&gt;Styling in react

&lt;ul&gt;
&lt;li&gt;Its value. &lt;/li&gt;
&lt;li&gt;And the fact that there is no double curly braces syntax to pass styles in the &lt;em&gt;style&lt;/em&gt; property, there we are just passing a javascript object and outer curly braces denotes that it's a dynamic expression syntax&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;properties inside a 'state' in a class component has to be an object, it can't be of any other data type&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;class field&lt;/em&gt; - for example
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;profiles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="c1"&gt;// just some variable name&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;something like that can be replaced by something like this (lol slick code üòÇ)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;profiles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Input in react

&lt;ul&gt;
&lt;li&gt;via normal DOM API (i.e. querySelector())&lt;/li&gt;
&lt;li&gt;via ref() - react syntax &lt;/li&gt;
&lt;li&gt;via controlled elements - exciting one &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The issue I face today is in line 67 of the &lt;a href="https://github.com/icecoffee-dev/-3_100DaysOfCode_GithubCardsApp/blob/main/github%20Cards%20App-Class%20Components/GithubCardsApp%20Complete.jsx"&gt;completed file&lt;/a&gt; If anyone wanna check it out.&lt;/p&gt;

&lt;p&gt;Their instead of this,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;addNewProfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;profileData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;prevState&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;profiles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;profiles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;profileData&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I tried to push values directly in the array without using setState()&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;addNewProfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;profileData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;profiles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;profileData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;// it didn't gave an error but the DOM also never updated itself. &lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yeah, and this about sums it up.&lt;br&gt;
The part that I most struggled with is the input one but it was quite simple actually, the only thing that I am lacking right now is practice and I am sure after making some more projects, I'll be able to master this.&lt;/p&gt;

&lt;p&gt;üëâ This is my today's &lt;a href="https://github.com/icecoffee-dev/-3_100DaysOfCode_GithubCardsApp/tree/main/github%20Cards%20App-Class%20Components"&gt;work&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üëâ You can build and run the files on this &lt;a href="https://jscomplete.com/playground"&gt;playground&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Thanks for reading this and joining me, üòÄ&lt;br&gt;
Wish me luck.ü§ó&lt;br&gt;
Have a beautiful day. üåª&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>react</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
