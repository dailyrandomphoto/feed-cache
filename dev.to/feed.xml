<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Easy to use software Documentation Builder</title>
      <author>Martin Tonev</author>
      <pubDate>Sun, 19 Dec 2021 03:19:34 +0000</pubDate>
      <link>https://dev.to/martintonev/easy-to-use-software-documentation-builder-51ab</link>
      <guid>https://dev.to/martintonev/easy-to-use-software-documentation-builder-51ab</guid>
      <description>&lt;p&gt;I`ve created this product because I always struggle with generating documentation in HTML or Word format.&lt;br&gt;
It is just a bit boring to make a menu and all the connected sections. Also, there are always so many revisions you end with 10 different files.&lt;/p&gt;

&lt;p&gt;So I create an online tool to build the navigation and storing the text after I quickly add my&lt;br&gt;
navigation and text I can share the URL to the product or export it to PDF.&lt;/p&gt;

&lt;p&gt;Also, I can manage all the revisions in one place&lt;/p&gt;

&lt;p&gt;It just saves time and boring stuff to do every time you lunch a new product.&lt;/p&gt;

&lt;p&gt;Check it out: &lt;a href="https://create-documentation-online.com/"&gt;https://create-documentation-online.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dev</category>
    </item>
    <item>
      <title>Secure AWS-CDK deployments with GitHub Actions</title>
      <author>Simon</author>
      <pubDate>Sun, 19 Dec 2021 02:47:23 +0000</pubDate>
      <link>https://dev.to/simonireilly/secure-aws-cdk-deployments-with-github-actions-3jfk</link>
      <guid>https://dev.to/simonireilly/secure-aws-cdk-deployments-with-github-actions-3jfk</guid>
      <description>&lt;p&gt;GitHub actions enables continuous integration, and the aws-cdk enables infrastructure as code.&lt;/p&gt;

&lt;p&gt;This guide provides a secure way to automate the deployments of aws-cdk stacks, from GitHub actions to your AWS account.&lt;/p&gt;

&lt;p&gt;It's more secure because you do not have to store long lived credentials in your GitHub account, and, because only the open ID connect with GitHubs fingerprint can assume the deployment role üëç&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Originally published &lt;a href="https://blog.simonireilly.com/posts/secure-aws-cdk-deploys-with-github-actions"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Relevant documentation for:

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services"&gt;GitHub open ID connect
&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_oidc.html"&gt;Using open ID connect with AWS IAM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h2&gt;

&lt;p&gt;We will utilise open ID connect, to grant GitHub a temporary federated identity. This identity will be trusted, to assume a role in your AWS account.&lt;/p&gt;

&lt;p&gt;When the identity (GitHub) assumes the roles, we will secure it's access by doing two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Granting a temporary aws secret key and access key, that expires in an hour.&lt;/li&gt;
&lt;li&gt;Using claims from the JWT presented by GitHub to AWS to narrow the scope of the allowed identities.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;When we are done we will have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A one-off GitHub action, that creates the identity provider and trust relationship using an aws-cdk stack.&lt;/li&gt;
&lt;li&gt;Another GitHub action that uses the identity to gain temporary access, and deploy aws-cdk stacks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-bootstrap-stack"&gt;
  &lt;/a&gt;
  Creating the bootstrap stack
&lt;/h2&gt;

&lt;p&gt;We can create a new aws-cdk application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;bootstrap

npx aws-cdk@2.x init app &lt;span class="nt"&gt;--language&lt;/span&gt; typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that we will use two components from IAM to create a provider, and a principal.&lt;/p&gt;

&lt;p&gt;We will use the principal to create a trust relationship between aws, and GitHub like so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Create an Identity provider for GitHub inside your AWS Account. This
 * allows GitHub to present itself to AWS IAM and assume a role.
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;OpenIdConnectProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MyProvider&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://token.actions.githubusercontent.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;clientIds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sts.amazonaws.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then establish the trust relationship by defining the conditions for this provider to act as a principal.&lt;/p&gt;

&lt;p&gt;I will provide an example that assumes you are &lt;a href="https://github.com/simonireilly"&gt;https://github.com/simonireilly&lt;/a&gt; and you want to deploy from all repository branches of a repo called awesome-project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;githubOrganisation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;simonireilly&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="c1"&gt;// Change this to the repo you want to push code from&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;repoName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;awesome-project&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="cm"&gt;/**
 * Create a principal for the OpenID; which can allow it to assume
 * deployment roles.
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GitHubPrincipal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;OpenIdConnectPrincipal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;withConditions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;StringLike&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;token.actions.githubusercontent.com:sub&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s2"&gt;`repo:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;githubOrganisation&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;repoName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:*`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally you want to establish the role that can be assumed by the OIDC principal. This will allow GitHub actions to use the AWS Roles, and mutate the AWS Resources you give it access to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
  * Create a deployment role that has short lived credentials. The only
  * principal that can assume this role is the GitHub Open ID provider.
  *
  * This role is granted authority to assume aws cdk roles; which are created
  * by the aws cdk v2.
  */&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Role&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GitHubActionsRole&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;assumedBy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GitHubPrincipal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Role assumed by GitHubPrincipal for deploying from CI using aws cdk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;roleName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;github-ci-role&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;maxSessionDuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Duration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hours&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;inlinePolicies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;CdkDeploymentPolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PolicyDocument&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;assignSids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;statements&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PolicyStatement&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;effect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Effect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ALLOW&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sts:AssumeRole&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
          &lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`arn:aws:iam::&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:role/cdk-*`&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;}),&lt;/span&gt;
      &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üö® These permissions may be too broad for your use case. Consider adding a permissions boundary, or, opting to use a role other than the role automatically created by the cdk for its deployments üö®&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-bootstrap"&gt;
  &lt;/a&gt;
  Deploying Bootstrap
&lt;/h2&gt;

&lt;p&gt;With a set of created access keys, you can deploy the bootstrap. This enables someone with higher privilege to setup the link for your team üëç&lt;/p&gt;

&lt;p&gt;This keeps you from storing long lived credentials in GitHub.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Bootstrap&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;AWS_ACCESS_KEY_ID&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Access&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Key&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ID&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;with&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Permissions&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;deploy&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;IAM,&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;and&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;OIDC"&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;AWS_SECRET_ACCESS_KEY&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Secret&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Access&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Key&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;with&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Permissions&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;deploy&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;IAM,&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;and&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;OIDC"&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;AWS_REGION&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Region&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;deploy&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to."&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Git clone the repository&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v1&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Configure aws credentials&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aws-actions/configure-aws-credentials@master&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;aws-access-key-id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ github.event.inputs.AWS_ACCESS_KEY_ID }}&lt;/span&gt;
          &lt;span class="na"&gt;aws-secret-access-key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ github.event.inputs.AWS_SECRET_ACCESS_KEY }}&lt;/span&gt;
          &lt;span class="na"&gt;aws-region&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ github.event.inputs.AWS_REGION }}&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;14"&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn install&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Synth stack&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn --cwd packages/bootstrap cdk synth&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy stack&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn --cwd packages/bootstrap cdk deploy --require-approval never&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you trigger this action the user must enter aws access keys and aws secrets that have the required privileges.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T03--NrZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ysob4ndwqpihfw1kxrie.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T03--NrZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ysob4ndwqpihfw1kxrie.png" alt="GitHub user interface showing drop-down to enter aws secrets" width="880" height="604"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#post-bootstrap-life"&gt;
  &lt;/a&gt;
  Post Bootstrap life
&lt;/h2&gt;

&lt;p&gt;With this stack deployed you can now ship any aws-cdk v2 deployments from the trusted repository, to the linked AWS account, without storing long lived credentials.&lt;/p&gt;

&lt;p&gt;All you need to do is instruct GitHUb actions to assume the github-ci-role role in your account, and it will get temporary credentials for one hour.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;deploy-infrastructure&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Git clone the repository&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v1&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Assume role using OIDC&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aws-actions/configure-aws-credentials@master&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;role-to-assume&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;arn:aws:iam::&amp;lt;your-account-id-here&amp;gt;:role/github-ci-role&lt;/span&gt;
          &lt;span class="na"&gt;aws-region&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ env.AWS_REGION }}&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;14"&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn install&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Synth infrastructure stack&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn --cwd packages/infrastructure cdk synth&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deploy infrastructure stack&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn --cwd packages/infrastructure cdk deploy --require-approval never&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#next-steps-might-to-be"&gt;
  &lt;/a&gt;
  Next steps might to be
&lt;/h2&gt;

&lt;p&gt;Create another bootstrapping aws cdk stack, that allows only deploying from the &lt;code&gt;main&lt;/code&gt; branch, and point this one at your production AWS account if you have one üëç&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;StringLike&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;token.actions.githubusercontent.com:sub&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="s2"&gt;`repo:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;githubOrganisation&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:ref:/refs/head/main`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#follow-up"&gt;
  &lt;/a&gt;
  Follow up
&lt;/h2&gt;

&lt;p&gt;If you are interested in this stuff, you might like &lt;a href="https://simonireilly.gitbook.io/micro-teams-practical-guide-to-the-aws-estate/"&gt;microteams&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;A guide I am writing for scale ups, that are growing from one person AWS start-ups to multi-team organisations.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>github</category>
      <category>typescript</category>
      <category>devops</category>
    </item>
    <item>
      <title>Cloud Computing </title>
      <author>Md Shahriyar Al Mustakim Mitul</author>
      <pubDate>Sun, 19 Dec 2021 02:39:11 +0000</pubDate>
      <link>https://dev.to/mitul3737/cloud-computing-81a</link>
      <guid>https://dev.to/mitul3737/cloud-computing-81a</guid>
      <description>&lt;p&gt;&lt;strong&gt;Cloud Computing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Few terms we need to know:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
Virtualization: It allows the possibility of having multiple virtual machines (VMs) each running essentially a separate operating system and applications installed on 1 physical layer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gGSTKjWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/68ezod1rjzjkwmcq6u90.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gGSTKjWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/68ezod1rjzjkwmcq6u90.png" alt=" 3VMs under 1 hardware" width="450" height="327"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Compute: It is mainly the brain which process workload&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Storage: It allows to save and store data&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Database: It allows to store structure sets of data used by applications&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Network: These resources provide the connectivity allowing all other resources (compute /storage / database ) to communicate with each other.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;so, Cloud computing is a remote virtual pool of on demand shared resources offering Compute, Storage, Database and Network services that can be rapidly deployed at scale&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloud Deployment Models&lt;/strong&gt;&lt;br&gt;
1.Public Cloud: &lt;br&gt;
Vendor makes available the use of shared infrastructure , including &lt;em&gt;Compute, Storage, Database , Network resources.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Vendors provide all backend and physical maintenance and consumers can specify the geographic region in which the it resides to aid with data access. One can access the public cloud from anywhere through internet. &lt;/p&gt;

&lt;p&gt;2.Private Cloud: &lt;br&gt;
infrastructures are privately hosted. Hardware is usually on-premise. More capital expenditure is required to acquire the hosts and datacenter. Additional resources are needed for the day to day operations and maintenance of the equipment.&lt;/p&gt;

&lt;p&gt;3.Hybrid Cloud: &lt;br&gt;
Uses both public and private cloud. It is established when a network link is configured between the private cloud to services within a public cloud.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O0V05Fvr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pncmqx952djqg498l34k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O0V05Fvr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pncmqx952djqg498l34k.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Terms to know :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;On demand resourcing: When we want to provision a resource within a cloud, it provides immediately resources .&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scalability: We can scale out environment resources both 'up and down' and 'in and out'&lt;br&gt;
Scaling up and down means the power and performance of an instance . example: using 1 instance  with greater CPU /memory power.&lt;br&gt;
Scaling in and out means adding or removing instances .&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Economy of scale: Due to huge scale of resources public cloud offerings, there are low resource costs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Flexibility and elasticity :The amount of resources, how long I want to use and what scale I want to use etc are open to me.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Utility based metering: Pay as you use. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Shared infrastructure: Multiple resources are connecting to one hardware which reduces cost.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;High available: these vendor services are very available globally&lt;br&gt;
Security: there are security provided by vendors&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Blog: &lt;a href="https://cloudacademy.com/blog/aws-shared-responsibility-model-security/"&gt;https://cloudacademy.com/blog/aws-shared-responsibility-model-security/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloud service models&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.SaaS(Software as a service): it is mainly delivery of an application that can widely distributed and accessed. ex: Google's gmail service&lt;/p&gt;

&lt;p&gt;2.PaaS( Platform as a service): &lt;br&gt;
One has access to framework form the operating system and up. The underlying architecture , host hardware , network component, OS etc are managed by vendor.&lt;/p&gt;

&lt;p&gt;3.IaaS( Infrastructure as a service): &lt;br&gt;
this allows one to architect own portion of the cloud by configuring virtual network . Given highest level of customization .&lt;br&gt;
moreover we have DRaaS, CaaS etc&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits of cloud computing&lt;/strong&gt;&lt;br&gt;
1) Migrating their business to cloud&lt;br&gt;
2) Reduces less data traffics&lt;br&gt;
3) Back up &lt;br&gt;
4) Web hosting&lt;br&gt;
5) Test/ Dev Environment&lt;br&gt;
6) Big data. data manipulation&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data center architecture&lt;/strong&gt;&lt;br&gt;
1) there are many servers globally which makes public vendors easily share services globally&lt;br&gt;
2) Physical Security: &lt;br&gt;
AWS's security: &lt;a href="https://aws.amazon.com/compliance/"&gt;https://aws.amazon.com/compliance/&lt;/a&gt;&lt;br&gt;
Microsoft: &lt;a href="https://docs.microsoft.com/en-us/compliance/"&gt;https://docs.microsoft.com/en-us/compliance/&lt;/a&gt;&lt;br&gt;
3)Network Infrastructure: AWS has (Virtual Private Clouds)VPC and Microsoft has (Virtual Network) VNet&lt;br&gt;
4) Servers : called as Instances or Virtual machine(VM)&lt;br&gt;
5) Storage: almost unlimited. &lt;/p&gt;

</description>
      <category>cloud</category>
      <category>aws</category>
      <category>community</category>
    </item>
    <item>
      <title>Life Pro Tips for TailwindCSS Projects</title>
      <author>Wade Zimmerman</author>
      <pubDate>Sun, 19 Dec 2021 01:51:44 +0000</pubDate>
      <link>https://dev.to/wadecodez/tips-to-enhance-tailwindcss-projects-34ap</link>
      <guid>https://dev.to/wadecodez/tips-to-enhance-tailwindcss-projects-34ap</guid>
      <description>&lt;p&gt;Recently, TailwindCSS released version 3.0 and the framework remains highly popular. Do you know all the little tricks for cleaner code?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S5_TiDQk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j6381quzw1d95bztbw6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S5_TiDQk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j6381quzw1d95bztbw6.png" alt="Image description" width="880" height="414"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#1-aspect-ratio"&gt;
  &lt;/a&gt;
  1. Aspect Ratio
&lt;/h1&gt;

&lt;p&gt;A clean UI requires all cards and images to be perfectly sized across all devices. There are too many screen sizes to use responsive scaling units like &lt;code&gt;em&lt;/code&gt;, &lt;code&gt;rem&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, or &lt;code&gt;vh/vw&lt;/code&gt; making media distorted on some platforms.&lt;/p&gt;

&lt;p&gt;Forcing a size for media is non-trivial with pixels but how do you force a responsive ratio? Perhaps, a profile banner is 1500x500 pixels but user uploaded content makes preserving user experiences challenging. The answer is aspect ratio containers.&lt;/p&gt;

&lt;p&gt;demo: &lt;a href="https://play.tailwindcss.com/hBXgOiGwv7"&gt;https://play.tailwindcss.com/hBXgOiGwv7&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"w-full aspect-video ..."&lt;/span&gt; 
        &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://www.youtube.com/ ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aspect ratios will force the content to grow to the width of the container while auto-scaling the height to match the ratio to &lt;code&gt;16:9&lt;/code&gt;.  A node with a width of &lt;code&gt;1920&lt;/code&gt; will have a height of &lt;code&gt;1080&lt;/code&gt; while on mobile it will scale to &lt;code&gt;320x180&lt;/code&gt;.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#2-inset-positioning"&gt;
  &lt;/a&gt;
  2. Inset Positioning
&lt;/h1&gt;

&lt;p&gt;The inset technique plays nicely with aspect ratio containers. Perhaps, a square element needs nested scrolling content. The quickest solution is to use absolute positioning on a child element with full width and full height. Regardless this will take a few class names to correctly position the child element. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tvh5gjIH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7hysv1n1nntnz3ysw2xk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tvh5gjIH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7hysv1n1nntnz3ysw2xk.png" alt="Image description" width="634" height="439"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, Tailwind developers know this technique is common. Now a single utility class will handle all the positioning. Insets will fill or partially fill the entire parent node.&lt;/p&gt;

&lt;p&gt;demo: &lt;a href="https://play.tailwindcss.com/4ZTlx80ryN"&gt;https://play.tailwindcss.com/4ZTlx80ryN&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Pin to top left corner --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative aspect-square ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute left-0 top-0 h-1/2 w-1/2 ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;01&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Span top edge --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative aspect-square ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute inset-x-0 top-0 h-1/2 ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;02&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Pin to top right corner --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative aspect-square ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute top-0 right-0 h-1/2 w-1/2 ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;03&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Span left edge --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative aspect-square ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute inset-y-0 left-0 w-1/2 ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;04&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Fill entire parent --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative aspect-square ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute inset-0 ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;05&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Span right edge --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative aspect-square ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute inset-y-0 right-0 w-1/2 ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;06&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Pin to bottom left corner --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative aspect-square ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute bottom-0 left-0 h-1/2 w-1/2 ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;07&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Span bottom edge --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative aspect-square ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute inset-x-0 bottom-0 h-1/2 ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;08&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Pin to bottom right corner --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative aspect-square ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute bottom-0 right-0 h-1/2 w-1/2 ..."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;09&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#divided-list-styling"&gt;
  &lt;/a&gt;
  Divided List Styling
&lt;/h1&gt;

&lt;p&gt;Tailwind is not perfect and often requires custom CSS to match the list styles of other popular frameworks like Boostrap. The iconic design places borders between each list item. &lt;/p&gt;

&lt;p&gt;The style is preferable because it shows a clear distinction between list items without needing complex structures like table, flexbox, or grid. Moreover, lists are more compatible across browsers.&lt;/p&gt;

&lt;p&gt;How do you quickly style a list like Bootstrap in Tailwind without writing custom CSS? Simple, use the &lt;code&gt;divide&lt;/code&gt; utility. &lt;/p&gt;

&lt;p&gt;demo: &lt;a href="https://play.tailwindcss.com/YpbjZdaJoU"&gt;https://play.tailwindcss.com/YpbjZdaJoU&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"divide-y border"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"p-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;a&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"p-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;b&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"p-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;c&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"p-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;d&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Thank you for reading my post. Now you know a few ways to reduce the number of utility classes included in your code. Here is a final product that uses all the techniques mentioned above: &lt;a href="https://play.tailwindcss.com/6mpXYGwfdE"&gt;https://play.tailwindcss.com/6mpXYGwfdE&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>tailwindcss</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to create an awesome slack approval workflow</title>
      <author>Kartik Grewal</author>
      <pubDate>Sat, 18 Dec 2021 23:29:44 +0000</pubDate>
      <link>https://dev.to/canonic/how-to-create-an-awesome-slack-approval-workflow-1gdg</link>
      <guid>https://dev.to/canonic/how-to-create-an-awesome-slack-approval-workflow-1gdg</guid>
      <description>&lt;p&gt;Slack is a very popular workplace place, to a point where now it‚Äôs become a verb ‚Äî ‚Äú&lt;strong&gt;Slack me if you need something!&lt;/strong&gt;‚Äù ‚Äî and there‚Äôs good reason for it. During these pandemic times, it‚Äôs so much more than just a chat app. &lt;/p&gt;

&lt;p&gt;Today, we‚Äôll explore how we can do even more with &lt;strong&gt;Slack Approvals&lt;/strong&gt;. We‚Äôll bring in &lt;a href="https://canonic.dev/?utm_source=dev.to&amp;amp;utm_medium=organic_article&amp;amp;utm_campaign=30daysofcanonic_uc_3&amp;amp;utm_term=header_canonic&amp;amp;utm_content=day_20"&gt;Canonic&lt;/a&gt; and use the power of slack approvals to approve or disapprove our message. We want the ability that whenever a message is added to the database, its respective slack approval message is sent, based on the response, the same gets updated in the database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-dive-in"&gt;
  &lt;/a&gt;
  Let‚Äôs dive in! üöÄ
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Create necessary slack app &amp;amp; generate tokens&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs start with getting all the slack requirements in place. We have to &lt;a href="https://api.slack.com/apps"&gt;create an app with Slack&lt;/a&gt; and generate its respective tokens.&lt;/p&gt;

&lt;p&gt;For this step, we‚Äôll follow the slack guides linked with the respective text as they‚Äôll be the best source to get all these requirements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uRkory45--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7tv7zmwvc1el1cne1gg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uRkory45--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7tv7zmwvc1el1cne1gg.png" alt="Step 1" width="880" height="336"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Starting with a slack integration workflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jump to Canonic and clone this &lt;a href="https://app.canonic.dev/projects/61be5cc3b6586d0026b16023/graph?utm_source=dev.to&amp;amp;utm_medium=organic_article&amp;amp;utm_campaign=30daysofcanonic_uc_3&amp;amp;utm_term=step2_sample&amp;amp;utm_content=day_20"&gt;sample project&lt;/a&gt; which already has slack integration added, or create one for yourself and move to the API section to manually add the slack integration for your &lt;code&gt;createMessage&lt;/code&gt; API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9FAPbHR7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqrouqqxq3s06axdz6kv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9FAPbHR7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqrouqqxq3s06axdz6kv.png" alt="Step 2" width="880" height="260"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will be asked to authenticate and add in a token (the one that we got in step 1) Once authorized you should have a green tick to reflect that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--44_aV6Qz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfu9p11rex8cq23yqpaj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--44_aV6Qz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfu9p11rex8cq23yqpaj.png" alt="Step 2" width="784" height="940"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Slack payload creation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that we have our integration set up complete and attached to our &lt;code&gt;createMessage&lt;/code&gt; API. Whenever we trigger this API, an approval message with the trigger message should be sent to slack. &lt;/p&gt;

&lt;p&gt;For this, we need to &lt;strong&gt;add our payload to slack&lt;/strong&gt;. For using this feature, we‚Äôll use a slightly different payload than we usually do for a simple chat message. Our payload should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"New approval request"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"blocks"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"header"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"plain_text"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"New request"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"emoji"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"section"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"fields"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"mrkdwn"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"actions"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"elements"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"button"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"plain_text"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"emoji"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Approve"&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"style"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"primary"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"click_me_123"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"button"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"plain_text"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"emoji"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Reject"&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"style"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"danger"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"click_me_123"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, in place of &lt;code&gt;click_me_123&lt;/code&gt;, we‚Äôll add the URL for the respective API to get triggered when someone approves or disapproves it. For that, we‚Äôll need to build a custom API. Let‚Äôs do that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Create custom API for approving/disapproving messages&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We now create a custom API in Canonic to look for the query parameters and update the respective record. Create a new API by clicking on the &lt;code&gt;+&lt;/code&gt; icon against the &lt;code&gt;Endpoints&lt;/code&gt; tab.&lt;/p&gt;

&lt;p&gt;Next, add details regarding the API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yfn7YJ-l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2cjkmbsxvod6uba3wn4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yfn7YJ-l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2cjkmbsxvod6uba3wn4.png" alt="Step 4" width="828" height="386"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go to the Code tab and add the following code to find the id for the message and add in the approval or disapproval in the database. We use query parameters to fetch the details then do the processing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;approved&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOneAndUpdate&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;$set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;approved&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;approved&lt;/span&gt; &lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;upsert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 5: Update back the message&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We deploy this project to get the API URL. Click on the top right corner saying &lt;code&gt;deploy&lt;/code&gt;, then go to the docs to get its URL.&lt;/p&gt;

&lt;p&gt;We replace &lt;code&gt;**click_me_123**&lt;/code&gt; to*&lt;em&gt;&lt;code&gt;https://messages.can.canonic.dev/api/messages/approvalornot?id=1234&amp;amp;approved=false&lt;/code&gt;&lt;/em&gt;*  in the danger button and replace the same with &lt;strong&gt;&lt;code&gt;https://messages.can.canonic.dev/api/messages/approvalornot?id=1234&amp;amp;approved=true&lt;/code&gt;.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Now whenever a user will approve or disapprove, the following URL will get triggered saving the approval of the message in the database. This can be used in place of any Micro-service which is built is to handle slack integration or become a slack server for that business.&lt;/p&gt;

&lt;p&gt;Hope this guide helps you make your day a little bit more productive!&lt;br&gt;
Check out the sample project &lt;a href="https://app.canonic.dev/projects/61be5cc3b6586d0026b16023/graph?utm_source=dev.to&amp;amp;utm_medium=organic_article&amp;amp;utm_campaign=30daysofcanonic_uc_3&amp;amp;utm_term=step5_here&amp;amp;utm_content=day_20"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thank you for reading this guide. If you happen to create any of these integrations, please remember to mention us on social media or drop us a line on our discord channel.&lt;/p&gt;

&lt;p&gt;You can also check out our other guides¬†&lt;a href="https://dev.to/canonic/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Join us on¬†&lt;a href="https://discord.gg/9dyytsM"&gt;Discord&lt;/a&gt;¬†to discuss or share with our community. Write to us for any support requests at¬†&lt;a href="https://support@canonic.dev/"&gt;support@canonic.dev&lt;/a&gt;. Check out our¬†&lt;a href="https://www.canonic.dev/30-days-of-canonic/?utm_source=dev.to&amp;amp;utm_medium=organic_article&amp;amp;utm_campaign=30daysofcanonic_uc_3&amp;amp;utm_term=conclusion_website&amp;amp;utm_content=day_20"&gt;website&lt;/a&gt;¬†to know more about Canonic.&lt;/p&gt;

</description>
      <category>slack</category>
      <category>frontend</category>
      <category>tutorial</category>
      <category>productivity</category>
    </item>
    <item>
      <title>100 Languages Speedrun: Episode 28: TeX</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Sat, 18 Dec 2021 23:15:56 +0000</pubDate>
      <link>https://dev.to/taw/100-languages-speedrun-episode-28-tex-b1j</link>
      <guid>https://dev.to/taw/100-languages-speedrun-episode-28-tex-b1j</guid>
      <description>&lt;p&gt;TeX (pronounced like "tech") is a typesetting system, which is still used for writing research papers in Mathematics, Computer Science, Physics, and related disciplines, and pretty much nothing else. Everyone else moved on to either WYSIWYG editors like Word, or to HTML, or maybe Markdown or something like that. But it still survives in its niche.&lt;/p&gt;

&lt;p&gt;Like every typesetting system, it comes with its own embedded programming language, and that's what we're going to use.&lt;/p&gt;

&lt;p&gt;Technically TeX is just the original system, and we'll also be using a lot of *TeX things (MacTeX, LaTeX, pdftex etc.), but that's meaningless distinction, so I won't mention it anymore.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello, World!
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tex"&gt;&lt;code&gt;&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;minimal&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;\newcommand\hello&lt;/span&gt;&lt;span class="na"&gt;[1]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;Hello, #1!&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;\begin{document}&lt;/span&gt;
&lt;span class="k"&gt;\hello&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;World&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;\end{document}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which with &lt;code&gt;pdflatex hello.tex&lt;/code&gt; generates a PDF page with the text "Hello, World!" (only relevant part shown):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y83B-_9f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytdimkqih32jwjupmi7h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y83B-_9f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytdimkqih32jwjupmi7h.png" alt="Hello" width="296" height="116"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What's going on here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;\documentclass{minimal}&lt;/code&gt; defines the kind of document we're making - as we're not really interested in any typesetting, we can just use &lt;code&gt;minimal&lt;/code&gt;. The most common type for actual documents would be &lt;code&gt;article&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;then follows basically equivalent of HTML &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; part&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\begin{document} ... \end{document}&lt;/code&gt; is like HTML &lt;code&gt;&amp;lt;body&amp;gt; ... &amp;lt;/body&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;We define &lt;code&gt;\hello&lt;/code&gt; command with &lt;code&gt;\newcommand\hello[1]{Hello, #1!}&lt;/code&gt; - the &lt;code&gt;[1]&lt;/code&gt; says it takes one argument, then in the function body &lt;code&gt;#1&lt;/code&gt; refers to that argument.&lt;/li&gt;
&lt;li&gt;We call the function with &lt;code&gt;\hello{World}&lt;/code&gt; - there are no parentheses here, we defined explicitly it takes exactly one argument.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#loop"&gt;
  &lt;/a&gt;
  Loop
&lt;/h3&gt;

&lt;p&gt;Let's try to setup a loop from 11 to 20. Obviously the system comes with lists already (numbered with &lt;code&gt;\begin{enumerate} \item A \item B \end{enumerate}&lt;/code&gt;, bulleted with &lt;code&gt;\begin{itemize} \item A \item B \end{itemize}&lt;/code&gt;, and all the other usual kinds), but we'll be doing a FizzBuzz shortly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tex"&gt;&lt;code&gt;&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;minimal&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\setlength&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\parindent&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;0pt&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;ifthen&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;% \numberloop{A}{B} prints all numbers from A to B&lt;/span&gt;
&lt;span class="k"&gt;\newcommand\numberloop&lt;/span&gt;&lt;span class="na"&gt;[2]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;\newcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\setcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}{&lt;/span&gt;#1&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\whiledo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\not&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\value&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}&lt;/span&gt;&amp;gt;#2&lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;\thei&lt;/span&gt;
      &lt;span class="k"&gt;\ifthenelse&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\equal&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;#2&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\thei&lt;/span&gt;&lt;span class="p"&gt;}}{&lt;/span&gt;.&lt;span class="p"&gt;}{&lt;/span&gt;,&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;\stepcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;\begin{document}&lt;/span&gt;
&lt;span class="k"&gt;\numberloop&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;10&lt;span class="p"&gt;}{&lt;/span&gt;100&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;\end{document}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which generates this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CDLhGJ2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ra56r78r6m709lflqngi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CDLhGJ2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ra56r78r6m709lflqngi.png" alt="Loop" width="880" height="131"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What's going on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TeX has annoying default of having paragraph indent, we need to get rid of it with &lt;code&gt;\setlength{\parindent}{0pt}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;we import a package called &lt;code&gt;ifthen&lt;/code&gt; with &lt;code&gt;\usepackage{ifthen}&lt;/code&gt; - it contains some control structures &lt;code&gt;\ifthenelse&lt;/code&gt; and &lt;code&gt;\whiledo&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;%&lt;/code&gt; indicates line comments&lt;/li&gt;
&lt;li&gt;we define command &lt;code&gt;\numberloop&lt;/code&gt; that takes two arguments&lt;/li&gt;
&lt;li&gt;inside it we define integer variable ("counter") &lt;code&gt;i&lt;/code&gt; and set it to &lt;code&gt;#1&lt;/code&gt; (first passed argument)&lt;/li&gt;
&lt;li&gt;there's nothing like &lt;code&gt;... &amp;lt;= ...&lt;/code&gt; in a loop, so loop condition must be &lt;code&gt;\not{... &amp;gt; ...}&lt;/code&gt; (or +1 one of the sides)&lt;/li&gt;
&lt;li&gt;inside the loop body, &lt;code&gt;\thei&lt;/code&gt; means "current value of &lt;code&gt;i&lt;/code&gt; counter"&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\ifthenelse{\equal{#2}{\thei}}{.}{,}&lt;/code&gt; prints appropriate separator - &lt;code&gt;,&lt;/code&gt; normally, but &lt;code&gt;.&lt;/code&gt; in the final iteration.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\stepcounter{i}&lt;/code&gt; increases counter &lt;code&gt;i&lt;/code&gt; by &lt;code&gt;1&lt;/code&gt; each time&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fizzbuzz"&gt;
  &lt;/a&gt;
  FizzBuzz
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tex"&gt;&lt;code&gt;&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;minimal&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\setlength&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\parindent&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;0pt&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;ifthen&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;intcalc&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;multicol&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;% \fizzbuzz{N} prints Fizz, Buzz, FizzBuzz, or N, according to the usual rules&lt;/span&gt;
&lt;span class="k"&gt;\newcommand\fizzbuzz&lt;/span&gt;&lt;span class="na"&gt;[1]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;\ifthenelse&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\equal&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\intcalcMod&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;#1&lt;span class="p"&gt;}{&lt;/span&gt;15&lt;span class="p"&gt;}}{&lt;/span&gt;0&lt;span class="p"&gt;}}{&lt;/span&gt;FizzBuzz&lt;span class="p"&gt;}{&lt;/span&gt;
    &lt;span class="k"&gt;\ifthenelse&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\equal&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\intcalcMod&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;#1&lt;span class="p"&gt;}{&lt;/span&gt;5&lt;span class="p"&gt;}}{&lt;/span&gt;0&lt;span class="p"&gt;}}{&lt;/span&gt;Buzz&lt;span class="p"&gt;}{&lt;/span&gt;
      &lt;span class="k"&gt;\ifthenelse&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\equal&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\intcalcMod&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;#1&lt;span class="p"&gt;}{&lt;/span&gt;3&lt;span class="p"&gt;}}{&lt;/span&gt;0&lt;span class="p"&gt;}}{&lt;/span&gt;Fizz&lt;span class="p"&gt;}{&lt;/span&gt;#1&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;% \fizzbuzzloop{A}{B} prints all FizzBuzz entries from A to B&lt;/span&gt;
&lt;span class="k"&gt;\newcommand\fizzbuzzloop&lt;/span&gt;&lt;span class="na"&gt;[2]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;\newcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\setcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}{&lt;/span&gt;#1&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\whiledo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\not&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\value&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}&lt;/span&gt;&amp;gt;#2&lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;\fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\thei&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;\linebreak&lt;/span&gt;
      &lt;span class="k"&gt;\stepcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;\begin{document}&lt;/span&gt;
&lt;span class="nt"&gt;\begin{multicols}&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;4&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\fizzbuzzloop&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;1&lt;span class="p"&gt;}{&lt;/span&gt;100&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;\end{multicols}&lt;/span&gt;
&lt;span class="nt"&gt;\end{document}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which generates this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mid7uFm1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83eerdqg7iwoxyzgucdg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mid7uFm1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83eerdqg7iwoxyzgucdg.png" alt="FizzBuzz" width="880" height="700"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A few things are going on here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we import package for integer math &lt;code&gt;\usepackage{intcalc}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;we import package for multi-column layout &lt;code&gt;\usepackage{multicol}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\fizzbuzz{N}&lt;/code&gt; does the FizzBuzz for one number&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\fizzbuzzloop{A}{B}&lt;/code&gt; does the FizzBuzz for all numbers from A to B, with line breaks in between&lt;/li&gt;
&lt;li&gt;we wrap it all in a 4-column layout so the screenshot looks better&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fibonacci"&gt;
  &lt;/a&gt;
  Fibonacci
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tex"&gt;&lt;code&gt;&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;minimal&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\setlength&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\parindent&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;0pt&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;ifthen&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;intcalc&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;% \fib{N} returns the Nth Fibonacci number&lt;/span&gt;
&lt;span class="k"&gt;\newcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;j&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\newcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;fiba&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\newcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;fibb&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\newcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;fibc&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\newcommand\fib&lt;/span&gt;&lt;span class="na"&gt;[1]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;\setcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;j&lt;span class="p"&gt;}{&lt;/span&gt;1&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\setcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;fiba&lt;span class="p"&gt;}{&lt;/span&gt;1&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\setcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;fibb&lt;span class="p"&gt;}{&lt;/span&gt;1&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\whiledo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\value&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;j&lt;span class="p"&gt;}&lt;/span&gt; &amp;lt; #1&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;\setcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;fibc&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\intcalcAdd&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\thefiba&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\thefibb&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="k"&gt;\setcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;fiba&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\thefibb&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;\setcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;fibb&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\thefibc&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;\stepcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;j&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\thefiba&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;% \fibloop{A}{B} prints all Fibonacci numbers from A to B&lt;/span&gt;
&lt;span class="k"&gt;\newcommand\fibloop&lt;/span&gt;&lt;span class="na"&gt;[2]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;\newcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\setcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}{&lt;/span&gt;#1&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\whiledo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\not&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\value&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}&lt;/span&gt;&amp;gt;#2&lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;\fib&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\thei&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;\linebreak&lt;/span&gt;
      &lt;span class="k"&gt;\stepcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;\begin{document}&lt;/span&gt;
&lt;span class="k"&gt;\raggedright&lt;/span&gt;
&lt;span class="k"&gt;\fibloop&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;1&lt;span class="p"&gt;}{&lt;/span&gt;20&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;\end{document}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which generates this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KW63RnVf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7imy1idwofui7ktblhs2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KW63RnVf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7imy1idwofui7ktblhs2.png" alt="Fib" width="130" height="914"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TeX has serious problems with recursion, so we do a loop calculation instead. Oh and while previous code might have implied that &lt;code&gt;\newcounter&lt;/code&gt; variables are local - they are all completely global, except for &lt;code&gt;#1&lt;/code&gt; etc. arguments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#should-you-use-tex"&gt;
  &lt;/a&gt;
  Should you use TeX?
&lt;/h3&gt;

&lt;p&gt;Only if you're forced to by your journal. Otherwise no, it's completely obsolete.&lt;/p&gt;

&lt;p&gt;Historically its primary strength was math. In particular, supporting made-up mathematical notation each researcher would come up with (the normal notation was supported by everything anyway). But nowadays, other systems can do that too. For everything else, TeX was never good.&lt;/p&gt;

&lt;p&gt;TeX also seems to largely abandoning its existing programming language and &lt;a href="https://dev.to/taw/100-languages-speedrun-episode-04-lua-1ofm"&gt;embedding much saner Lua instead&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even as an esoteric programming language, TeX's programming language doesn't really do anything too interesting. If you want a fun challenge, &lt;a href="https://dev.to/taw/100-languages-speedrun-episode-24-postscript-4i2k"&gt;writing Postscript is likely to provide a lot better one&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun"&gt;All code examples for the series will be in this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun/tree/master/episode-28-tex"&gt;Code for the TeX episode is available here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>tex</category>
      <category>latex</category>
    </item>
    <item>
      <title>Creating a WordPress blog using AWS Lightsail and Cloudflare</title>
      <author>Oksana Horlock</author>
      <pubDate>Sat, 18 Dec 2021 22:10:59 +0000</pubDate>
      <link>https://dev.to/aws-builders/creating-a-wordpress-blog-using-aws-lightsail-and-cloudflare-22mk</link>
      <guid>https://dev.to/aws-builders/creating-a-wordpress-blog-using-aws-lightsail-and-cloudflare-22mk</guid>
      <description>&lt;p&gt;I started my own blog a little more than one year ago. I  had wanted to have my own blog for a while and had a lot of ideas about how I wanted to create it and experiment with different tools and services. However, since having a child, the time I have for learning and exploring has become a really precious commodity. So I knew that the sooner I launched the website, the better. The final little nudge was reading Steve Gordon‚Äôs post about blogging which you can find &lt;a href="https://www.stevejgordon.co.uk/become-a-better-developer-through-blogging-part-1"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;This post describes how I set up a simple site for my blog. Time constraint has been the main reason why I chose using WordPress and AWS Lightsail. I was quite surprised by how easy and quick it was to set everything up. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; AWS account&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating a server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I followed this blog post up to part 6: &lt;a href="https://aws.amazon.com/getting-started/hands-on/launch-a-wordpress-website/"&gt;https://aws.amazon.com/getting-started/hands-on/launch-a-wordpress-website/&lt;/a&gt;. to create a WordPress instance and attach a static IP to it. It is very easy and clear. FYI, Bitnami is an application stack that lets you host a WordPress website. So when you select the WordPress blueprint in AWS Lightsail, you are installing all the applications necessary to run WordPress on your server.&lt;/p&gt;

&lt;p&gt;I had bought a template to use, so after logging in to WordPress admin dashboard, I navigated to Appearance-&amp;gt;Themes-&amp;gt;Add new -&amp;gt;Upload, and uploaded my theme. The website was up on the internet and could be navigated to on the Internet by using its IP address! Wasn‚Äôt it supereasy?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Registering a domain name/creating DNS records&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I didn‚Äôt have a domain name, so I registered oxiehorlock.com using AWS Route 53, which is a Domain Name Service. Before you register a domain, you should check the pricing here: &lt;a href="https://d32ze2gidvkk54.cloudfront.net/Amazon_Route_53_Domain_Registration_Pricing_20140731.pdf"&gt;https://d32ze2gidvkk54.cloudfront.net/Amazon_Route_53_Domain_Registration_Pricing_20140731.pdf&lt;/a&gt;.  It varies depending on the top-level domain (the last part of the url, for example, .com or .org.uk). When registering a domain, a public hosted zone is created for you. This hosted zone has records about routing Internet traffic for your domain/subdomains. Two records will be created by default:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;type NS record ‚Äì a nameserver record; it tells the Internet where to go to find out a domain‚Äôs IP address. There are several NS values ‚Äì this is to ensure that if one name server is not available, the queries can go to another one.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;type SOA ‚Äì a Start of Authority record; it contains some DNS information about the hosted zone, such as name name server that created the record, a serial number that you change when you can increment when you update the zone, retry interval and so on (info on record types AWS supports is &lt;a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html"&gt;here&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following that I created an A record in my hosted zone. An A record is the most fundamental record and it routes traffic to a resource such as a web server. I mapped my brand spanking new domain name to the static IP of my WordPress instance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zvtVeci1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nyxon2x0cucldzh27bh9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zvtVeci1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nyxon2x0cucldzh27bh9.png" alt="Image description" width="880" height="605"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that oxiehorlock.com was navigable on the Internet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Making the site secure&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First of all, I restricted access for port 22 to my own IP address (so that nobody else could SSH into the instance). I also didn‚Äôt want anyone to be able to access the empty blog so I restricted HTTP/HTTPS access to my own IP address too. These rules can be changed using the Networking tab of the Lightsail Console:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zAhx5v0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kuyrs6f7lxjej24tgy07.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zAhx5v0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kuyrs6f7lxjej24tgy07.png" alt="Image description" width="880" height="509"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I followed these tutorials to create an SSL certificate, firewall rules and securing the site using Cloudflare:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-using-lets-encrypt-certificates-with-wordpress#link-the-lets-encrypt-certificate-files-in-the-apache-directory-wordpress"&gt;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-using-lets-encrypt-certificates-with-wordpress#link-the-lets-encrypt-certificate-files-in-the-apache-directory-wordpress&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dannys.cloud/hardening-a-wordpress-website-on-aws-lightsail"&gt;https://dannys.cloud/hardening-a-wordpress-website-on-aws-lightsail&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Useful tip:&lt;/em&gt; since the instance runs on Linux, I had to use CLI. Since I didn't have a lot of experience with it at the point I was doing the setup, it was slightly tricky to edit and save files. The easiest way for me was to run &lt;em&gt;sudo nano path/to/file&lt;/em&gt; command, edit the file, type &lt;em&gt;Ctrl+X&lt;/em&gt;, and then Y or N, or &lt;em&gt;Ctrl+C&lt;/em&gt; to Cancel.&lt;/p&gt;

&lt;p&gt;I also removed Bitnami banner from the bottom right hand corner of the site pages by following the steps from this guide: &lt;a href="https://docs.bitnami.com/aws/how-to/bitnami-remove-banner/"&gt;https://docs.bitnami.com/aws/how-to/bitnami-remove-banner/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although there is no need to change your DNS from Route53 to Cloudflare, after some time I did it for the sake of experiment, since I had not had much experience with anything to do with DNS before. &lt;br&gt;
To be able to use Cloudflare for DNS management, AWS name servers for the NS record in your hosted zone need to be changed to Cloudflare name servers. You would think that you would just go to the hosted zone, select the NS record from the list, and edit it, right? However, after waiting for a couple of days for the record to be updated, I started investigating what was wrong. It turned out the records needed to be changed from the Registered domains page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4BPFpo5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlg3v85n1ejgpzki0az5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4BPFpo5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlg3v85n1ejgpzki0az5.png" alt="Image description" width="880" height="274"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From the moment you change your DNS provider, you will need to put all the DNS records there.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Costs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The pricing for deploying a WordPress on AWS Lightsail in the way that I did comprises:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;domain registration cost ($12)&lt;/li&gt;
&lt;li&gt;a monthly instance plan ($3.50)&lt;/li&gt;
&lt;li&gt;half a dollar per hosted zone per month&lt;/li&gt;
&lt;li&gt;DNS queries less than half a dollar per 1 000 000 000 queries (this will also include you using the site, for example amending the theme).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I sincerely hope my experience will help somebody out there to make deploying a WordPress website on AWS Lightsail a plan sailing.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>awscommunity</category>
      <category>lightsail</category>
    </item>
    <item>
      <title>Tips For Taking Your Product Photography On A White Background</title>
      <author>Sonam Singh</author>
      <pubDate>Sat, 18 Dec 2021 22:04:44 +0000</pubDate>
      <link>https://dev.to/sonamsingh/tips-for-taking-your-product-photography-on-a-white-background-1g91</link>
      <guid>https://dev.to/sonamsingh/tips-for-taking-your-product-photography-on-a-white-background-1g91</guid>
      <description>&lt;p&gt;The best way to make your products look great and create a sense of value is through high-quality visual presentation. This includes having professional photos that show off every detail, but it can be hard for small store owners without access or funds like this option since they need the proper tools in order to do so themselves. Here we will learn the tips for taking product photography with white background.&lt;/p&gt;

&lt;p&gt;When you need a spot to highlight your company or product, adding white background photography can make all the difference. It helps to highlight the essential features of the product, which will eventually help grab the attention of the viewers out there.&lt;br&gt;
You can turn a mediocre product photo into something that will make people want to buy your products with just one click. All you need are some white walls and an idea of what it is they‚Äôre selling.&lt;/p&gt;

&lt;p&gt;Here are some tips to help you capture photos on a white background:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Required Peripherals&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It will not be possible for you to turn a product, idea, or anything into something noticeable without having the right peripherals. Make sure you have these peripherals before you start another photoshoot.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Camera&lt;/strong&gt;&lt;br&gt;
It really matters that the photographer understands the requirements of the photoshoot. It really depends upon the requirements about the type of camera to be used. Full-frame DSLR cameras are too big to lug around and set up. You can start with whatever you‚Äôve got handy, experiment on a new camera over time until the style speaks for itself without investing in an expensive system right away!&lt;/p&gt;

&lt;p&gt;However, if you have decided to invest in basic DSLR cameras, you can start from Nikon D3500 or Fujifilm X-T200. It will help you in grasping the ideas of photography in the beginning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tripod&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mounting your camera to a tripod is an essential step in the photography process. Once you have it secured, there are some things that will remain fixed and keep everything else from moving around while capturing images of varying modes like high dynamic range imaging or focus stacking which require several shots taken at different points on whatever subject matter interests you most today.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;White Bounce Cards&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Window light has a bright side where the sun hits it, and shadows on either side. To make things more interesting for &lt;a href="https://www.amzonestep.com/services/amazon-product-photography"&gt;Amazon Product Photography&lt;/a&gt;, make use of white bounce cards ( made out of foam boards ) that put an extra bit of illumination into those dark areas so they can be relieved in their product shots. It is an excellent choice because it‚Äôs rigid and can also be easily cleaned if needed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A smooth surface is required for your product to stay stable throughout the photoshoot. Consider getting a table with one that is wide but also long enough. The ideal size would be somewhere between 24 and 27 inches in width so it‚Äôs not too small nor too big for your needs!`&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ideal Room&lt;/strong&gt;&lt;br&gt;
The perfect room for product photography is a window that‚Äôs next to a wall. The larger the better as you‚Äôll get more light from strong naturalistic shadows, and being closer will create softer overall tones with darker backgrounds while farther away will result in an even brighter illumination where the shadows are sharper yet lighter in detail.&lt;/p&gt;

&lt;p&gt;Capturing Professional Photos On A White Background&lt;br&gt;
When it comes to selling your products, more than 90% of consumers say that visual appearance is an important factor in buying decisions. Let‚Äôs into some professional tips you should follow to capture your next masterpiece:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setting up the Table&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that you gathered all the required materials, it‚Äôs time to shoot! The first thing you need to do is place the table close to the window without intersecting any shadows from these windowsills. Next, make sure that your setup goes right or left of this window at 90 degrees angle, depending on which direction light will be hitting the subject.&lt;/p&gt;

&lt;p&gt;With natural light, the best way to get a different mood is by rotating your window. You can try putting it at an angle of 45 degrees or even straight onto the set with no obstruction for that clean and fresh feel!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adjusting the Camera&lt;/strong&gt;&lt;br&gt;
Every camera is a little different. For some, the default setting will work just fine, and they don‚Äôt need to adjust any settings on their own. However, if you‚Äôre looking for more control over what gets captured or want an idea of how your photos are coming out then the following tweaks to your setting might help out:&lt;/p&gt;

&lt;p&gt;Set your white balance (WB) to Automatic. This will allow you more control of colors and lighting for a better end result.&lt;/p&gt;

&lt;p&gt;Turn Off your flash setting. This will stop any potential glare on the camera lens and ensure that you get intense exposure to whatever is in front.&lt;/p&gt;

&lt;p&gt;Raw files are the largest a camera can shoot, and when edited in software such as Photoshop or Aperture will give you maximum image quality. If your point-and-shoot has this setting, use it!&lt;/p&gt;

&lt;p&gt;You can set your ISO to 100 which will result in less noise. The higher the numbers are, the more sensitive they become and thus pick up on any light that might be present.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setting up the Product&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are many little details that can trip you up when setting your product. One of the most important is making sure to center yourself in front of all reflective surfaces, such as bottles with labels on them and mirrors above head height.&lt;/p&gt;

&lt;p&gt;This can be difficult because there are often many tiny movements needed for each element, but it will go much smoother if done correctly from day one.&lt;/p&gt;

&lt;p&gt;If your product positioning is perfect then you can try using white cards as a light modifier too. You will be blown away by the way this simple white card lights up your product. The light bounces off of it and fills in all shadows, so experiment with different angles for maximum effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Capturing and Evaluating the Photo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A picture is worth a thousand words, but it‚Äôs even more than just that. Once you take the photo and look at what has been created with your camera; this will allow for the experience of both education in which skills can be improved through experimentation on various ways to make an image better over time.&lt;/p&gt;

&lt;p&gt;After conducting several trials and errors, you might have finalized some of the photos for your product. For a better idea of how your images look, upload them onto the computer. The back of the camera sometimes misses details that are important for photography and can give unclear pictures, so I suggest using Adobe Lightroom, which provides many editing options to help fix this problem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Taking product photos on a white background can help you create more professional images for your products. Whether it is in an advertisement, website, or social media post, putting the product on a white background will make them stand out and appear clean&lt;br&gt;
If you are looking forward to seeking professional Product photography for amazon, social media, or E-Commerce stores, contact Amz One Step today as they provide one of the most professional services in the marketplace.&lt;/p&gt;

</description>
      <category>management</category>
    </item>
    <item>
      <title>The first 10 apps you install on a new computer?</title>
      <author>Jasterix</author>
      <pubDate>Sat, 18 Dec 2021 21:23:49 +0000</pubDate>
      <link>https://dev.to/jasterix/the-first-10-apps-you-install-on-a-new-computer-20d4</link>
      <guid>https://dev.to/jasterix/the-first-10-apps-you-install-on-a-new-computer-20d4</guid>
      <description>&lt;p&gt;I recently bought a new MacBook and don't know where to start. I learned how to code on my old MacBook air and installed everything from any list of apps I found online. &lt;/p&gt;

&lt;p&gt;But after random keys stopped working, it felt like a good opportunity to put my book away and get more comfortable working in a Windows environment.&lt;/p&gt;

&lt;p&gt;Instead, I just found myself writing less code because logging onto my Surface felt like work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EAm7k_f4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/8ikWPrZSPHcAAAAC/thats-the-worst-thing-happen-the-worst.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EAm7k_f4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/8ikWPrZSPHcAAAAC/thats-the-worst-thing-happen-the-worst.gif" alt="Thats The Worst Thing Happen This Is The Worst GIF" width="498" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But now that I've bought a new MacBook, I don't really know how to kick things off again.&lt;/p&gt;

&lt;p&gt;I installed the basics:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;VS Code&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;Bear and RemNote&lt;/li&gt;
&lt;li&gt;Top Notch&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But after that, I'm drawing a blank. &lt;/p&gt;

&lt;p&gt;My old laptop was decked out so much it was running out of space. But this new one is precious. It deserves only the finest apps. This is why I'm seeking some inspiration from the Dev community. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-your-top-10-apps-for-a-fresh-macbook"&gt;
  &lt;/a&gt;
  What are your top 10 apps for a fresh MacBook?
&lt;/h3&gt;

&lt;p&gt;If you had to chooser only 10 apps, what are fave apps for coding, productivity, or anything else that brings you joy? Nothing questionable or that's impossible to remove down the line.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PcXA7ReU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/1TSHxNUZh1FdzUpFWK/giphy.gif%3Fcid%3Decf05e47dikullq5nwyt3mxmiulj3iiapackcwitmumid9t3%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PcXA7ReU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/1TSHxNUZh1FdzUpFWK/giphy.gif%3Fcid%3Decf05e47dikullq5nwyt3mxmiulj3iiapackcwitmumid9t3%26rid%3Dgiphy.gif%26ct%3Dg" alt="wish list gif" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by Ron Lach from Pexels&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>help</category>
      <category>productivity</category>
    </item>
    <item>
      <title>CSS (Cascading Style Sheets) of the website</title>
      <author>Rakib Rahman</author>
      <pubDate>Sat, 18 Dec 2021 21:15:18 +0000</pubDate>
      <link>https://dev.to/rakib11/css-cascading-style-sheets-of-the-website-2h3p</link>
      <guid>https://dev.to/rakib11/css-cascading-style-sheets-of-the-website-2h3p</guid>
      <description>&lt;p&gt;‚ÄúThere are three responses to a piece of design ‚Äì yes, no, and WOW! Wow is the one to aim for.‚Äù ‚Äì Milton Glaser&lt;/p&gt;

&lt;p&gt;Graphic design is one of the important parts of a website. When you, the landlord, step to build your own house. You need to coordinate with the architect, civil engineer, mechanic and so on, where the architect plans, designs and looks after the construction of buildings, same as a graphic designer.&lt;/p&gt;

&lt;p&gt;Website hosting is a massive combination of developers and designers. For building a secured and functional website like Daraz, Evaly, Foodpanda etc. you have to hire all the specialists. For an e-commerce website, all the users are searching products and storing the desired one in his/her profile is the work of a Back-end web developer. The visual of a website is the manipulation of a Front-end web developer. Web designers suggest design / illustration according to the website / organization. If you present a comfortable design and function, you can hold on to the customers more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Plain CSS:&lt;/strong&gt; Plain CSS (Cascading Style Sheets) is the simplest and core concept of designing a website. Three types, internal, external, and inline styles in this function.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Internal CSS:
For internal CSS, you have to add your needed styles within the  tag. Id and class selector gives the written design to the exact content.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;body { background-color: gray } &lt;br&gt;
p {&lt;br&gt;&lt;br&gt;
color: red;&lt;br&gt;&lt;br&gt;
margin: 60px&lt;br&gt;
}&lt;br&gt;
.class1 {&lt;br&gt;
    color: orange&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;But these codes create the page longer and make the website slow.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;External CSS:
In the external css, the styles are coded into a css file which is more clean and decorated than internal CSS. The css file will attach with the  section.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;h1 {&lt;br&gt;&lt;br&gt;
width: 50%;&lt;br&gt;&lt;br&gt;
background:#A3C4E5 &lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;The css file can be applied to multiple pages but too many .css files will slow down the website.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inline CSS: You can add CSS in every html tag attribute. For specific changes and updates, it is easy to implement. But this option is not recommended because of the structure. When you add the attribute to every element, the coded page becomes confused.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Welcome to the website&lt;/h1&gt;

&lt;p&gt;I recommend External CSS which is more smart than others. You can use any CSS to your webpage which is sharable and organized. Others one are lengthy processes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS Framework:&lt;/strong&gt; CSS framework is a library with setup code for UI developers. The plain CSS is time consuming. In this situation, we don‚Äôt need to code the basic CSS because the framework gives us ready-made CSS properties. For a small website, the developer uses other frameworks with the help of documentation. But the documentation will be possible to change / update with the situation, then the design will hampered shortly.&lt;/p&gt;

&lt;p&gt;14 Best CSS Frameworks for Front-End Developers:&lt;br&gt;
Bootstrap&lt;br&gt;
Foundation&lt;br&gt;
Bulma&lt;br&gt;
UIkit&lt;br&gt;
Semantic UI&lt;br&gt;
Susy&lt;br&gt;
Materialize&lt;br&gt;
Pure.&lt;br&gt;
( Source: &lt;a href="https://geekflare.com/best-css-frameworks/"&gt;https://geekflare.com/best-css-frameworks/&lt;/a&gt; )&lt;/p&gt;

&lt;p&gt;But the established farm will build a personal CSS Framework by developers. That is restricted for unauthorized people. They build / change it with their own favor.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>css</category>
      <category>design</category>
    </item>
    <item>
      <title>How I passed the AWS Certified Solutions Architect ‚Äî Associate (SAA-C02) Exam?</title>
      <author>Abhishek Upadhyaya</author>
      <pubDate>Sat, 18 Dec 2021 20:50:04 +0000</pubDate>
      <link>https://dev.to/abhishekupd/how-did-i-pass-the-aws-certified-solutions-architect-associate-saa-c02-exam-2me5</link>
      <guid>https://dev.to/abhishekupd/how-did-i-pass-the-aws-certified-solutions-architect-associate-saa-c02-exam-2me5</guid>
      <description>&lt;p&gt;&lt;strong&gt;AWS Solutions Architect ‚Äî Associate&lt;/strong&gt; certification is a sought after certification in the industry. In this article, I share my experience of preparing for the exam, and some helpful tips.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_eYyK6tC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5jfneuvk2tz45fyyuik4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_eYyK6tC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5jfneuvk2tz45fyyuik4.png" alt="AWS Solutions Architect Associate (image source: https://aws.amazon.com/certification/certified-solutions-architect-associate/)" width="512" height="512"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#my-experience"&gt;
  &lt;/a&gt;
  My Experience
&lt;/h3&gt;

&lt;p&gt;I passed the exam in &lt;a href="https://www.credly.com/earner/earned/badge/b2a9f3fa-04fd-425e-9148-2b014b7197b2"&gt;November 2021&lt;/a&gt;. Here is what I felt about the exam:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The exam seems to be heavily focused on &lt;strong&gt;VPC&lt;/strong&gt; and &lt;strong&gt;EC2&lt;/strong&gt; components of AWS. You may have seen this mentioned in almost all online posts or threads that you‚Äôve read about exam preparation. It is absolutely &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I found that the exam questions are mostly focused on situations about transitioning from on-premise architecture to cloud architecture. That‚Äôs also the reason why there are more questions about EC2 and VPC architecture. So, while going through AWS services, think about scenarios where each of the services could be a replacement for services used in different types of on-premises architectures.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I think having a high level understanding of where each AWS services fit within different categories makes it easier to tackle exam questions. For example: as I already had an experience using AWS services for a few years before I took the exam, I classified the services in four main domains - &lt;strong&gt;Storage&lt;/strong&gt;, &lt;strong&gt;Compute&lt;/strong&gt;, &lt;strong&gt;Identity&lt;/strong&gt;, &lt;strong&gt;Security&lt;/strong&gt;. By doing so, I didn‚Äôt have to memorize each and every detail of all the services.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#exam-tips"&gt;
  &lt;/a&gt;
  Exam Tips
&lt;/h3&gt;

&lt;p&gt;In general, prepare for this exam just like you would prepare for any other exam, but also consider following tips:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It is helpful to review some topics everyday. Since the &lt;strong&gt;Associate Certificate&lt;/strong&gt; exam is not heavily focused on scenario based questions as compared to the &lt;strong&gt;Professional Certificate&lt;/strong&gt; exam, you want to be familiar with all the AWS topics mentioned in &lt;a href="https://d1.awsstatic.com/training-and-certification/docs-sa-assoc/AWS-Certified-Solutions-Architect-Associate_Exam-Guide.pdf"&gt;the exam guide&lt;/a&gt;. So, it is an excellent idea to go over &lt;a href="https://aws.amazon.com/faqs/"&gt;AWS FAQs&lt;/a&gt;. Remember, your certification won‚Äôt be worth much if you do not have hands-on experience with using the AWS services. So, while going through the topics, make sure to try them out in AWS console or the CLI.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go through practice tests a few times before the exam. I used the practice tests available on &lt;a href="https://www.oreilly.com/library/view/aws-certified-solutions/9781119558439/"&gt;O‚ÄôReilly Learning&lt;/a&gt;. You could find similar tests on some other sites. Even though the following book is related to SAA-C01 Exam, it still has relevant content for SAA-C02.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Focus on &lt;strong&gt;VPC&lt;/strong&gt;, &lt;strong&gt;EC2&lt;/strong&gt;, and &lt;strong&gt;resilient architecture&lt;/strong&gt;. As of November, 2021, the &lt;strong&gt;Design Resilient Architectures&lt;/strong&gt; domain was worth 30% of the exam. Questions related to VPC, and EC2 components come up in the &lt;strong&gt;Design High-Performing Architectures&lt;/strong&gt; domain as well. In general, it's critical to understand the VPC architecture, and how some application on the internet can communicate with your application within the VPC and vice-versa.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;blockquote&gt;
&lt;p&gt;Overall, if you have been using AWS services for at least a year, you should be able to pass the exam by reviewing the topics and preparing for about a month. It is crucial that you focus on the topics related to the services that you don‚Äôt have hands-on experience with.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;em&gt;Note: This article was first published on &lt;a href="https://abhishekupd.medium.com/how-i-passed-aws-certified-solutions-architect-associate-exam-d1679c19365c"&gt;my Medium blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>certifications</category>
      <category>cloudservices</category>
      <category>devops</category>
    </item>
    <item>
      <title>How to get a summary of the a page in Wikipedia?ü§î</title>
      <author>Phoenix</author>
      <pubDate>Sat, 18 Dec 2021 20:29:28 +0000</pubDate>
      <link>https://dev.to/00000/how-to-get-a-summary-of-the-a-page-in-wikipedia-39im</link>
      <guid>https://dev.to/00000/how-to-get-a-summary-of-the-a-page-in-wikipedia-39im</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hi-friends"&gt;
  &lt;/a&gt;
  Hi, friends!
&lt;/h2&gt;

&lt;p&gt;You Can use the Wikipedia API for this work;&lt;/p&gt;

&lt;p&gt;Look this Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests as rq

Query = "iran"#What Do You Want To Search In wikipedia
Lang = "en"#Your Language
Url = f"https://{Lang}.wikipedia.org/api/rest_v1/page/summary/{Query}"

Result = rq.get(Url).json()['extract']

print(str(Result))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run and See The Result.&lt;/p&gt;

&lt;p&gt;Do not forget to like!&lt;br&gt;
Bye until the next postüëã&lt;/p&gt;

</description>
      <category>python</category>
    </item>
  </channel>
</rss>
