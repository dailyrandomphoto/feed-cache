<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Setting up Rails to Send Emails with Amazon SES</title>
      <author>David Morales</author>
      <pubDate>Wed, 10 Mar 2021 16:05:56 +0000</pubDate>
      <link>https://dev.to/davidmles/setting-up-rails-to-send-emails-with-amazon-ses-ifm</link>
      <guid>https://dev.to/davidmles/setting-up-rails-to-send-emails-with-amazon-ses-ifm</guid>
      <description>&lt;p&gt;The Amazon Simple Email Service is a cloud service inside AWS (Amazon Web Services) to send and receive email. I have used it to send emails, and it worked flawlessly. It has a reasonable maximum sending quota, and it’s pretty fast for a modest web application.&lt;/p&gt;

&lt;p&gt;It has serious competitors, especially the service from MailChimp: Mandrill. But since they switched it to an add-on for MailChimp premium users, Amazon SES is, in my opinion, the first choice for small and medium web applications.&lt;/p&gt;

&lt;p&gt;Initially, all users are placed in the Amazon SES sandbox (a test environment) to ensure the quality of service and avoid fraud. This has real limiting quotas for big applications, so a request must be filled to Amazon support to move out of the sandbox and get higher limits.&lt;/p&gt;

&lt;p&gt;Before going on, you will need to sign up for an Amazon Web Services account. If you haven’t have one, go create one for yourself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#verifying-your-domain" class="anchor"&gt;
  &lt;/a&gt;
  Verifying your domain
&lt;/h2&gt;

&lt;p&gt;The first step is &lt;a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domain-procedure.html"&gt;verifying the domain the emails will be sent from&lt;/a&gt; to prove the ownership. Don’t forget to generate DKIM settings, it is recommended to increase your domain trust.&lt;/p&gt;

&lt;p&gt;This step will require to add some DNS records, so you will need access to your DNS panel.&lt;/p&gt;

&lt;p&gt;Once all records are added, you will have to wait for them to propagate to the other internet DNS servers. This can take up to 24 hours to complete. For now you will see your domain listed in Amazon SES console as “pending verification”. Don’t worry, Amazon will check it automatically later on and verify your domain.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-smtp-credentials" class="anchor"&gt;
  &lt;/a&gt;
  Creating the SMTP credentials
&lt;/h2&gt;

&lt;p&gt;In order to use Amazon SES to send your emails you will need to authenticate using an SMTP endpoint.&lt;/p&gt;

&lt;p&gt;Please go to your “SMTP Settings” page in your SES console. Here you can see your server name, note it down somewhere.&lt;/p&gt;

&lt;p&gt;Click the “Create My SMTP Credentials” button. Amazon will ask you for a new IAS user name (IAS stands for Identity and Access Management), but they will provide you with a default one that you can safely accept. Click the “Create” button at the very bottom of the page.&lt;/p&gt;

&lt;p&gt;Your credentials are now created! You can see them by unhiding them clicking the corresponding link.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LUAn5-ck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/euz1axmma88indlsg2qb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LUAn5-ck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/euz1axmma88indlsg2qb.png" alt="Screen Shot 2021-03-10 at 16.44.39"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;There you will see your SMTP username and password. If you need to save a copy, click the “Download Credentials” button at the very bottom of this page, because you will not have access to these settings once this page is closed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-your-rails-application" class="anchor"&gt;
  &lt;/a&gt;
  Configuring your Rails application
&lt;/h2&gt;

&lt;p&gt;Open your &lt;code&gt;config/environments/production.rb&lt;/code&gt; file and add this code inside the configure block:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;config.x.mail_from = %(Your site name &amp;lt;no-reply@yoursite-domain.com&amp;gt;)
config.action_mailer.default_url_options = { host: 'yoursite-domain.com' }
config.action_mailer.smtp_settings = { address: 'email-smtp.eu-west-1.amazonaws.com', user_name: 'your_smtp_username', password: 'your_smtp_password' }
config.action_mailer.raise_delivery_errors = true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sending-your-emails" class="anchor"&gt;
  &lt;/a&gt;
  Sending your emails
&lt;/h2&gt;

&lt;p&gt;Your new account is still in the Amazon SES sandbox. That means that you can only send email to addresses using your verified domain. This is intended to test the service and your application.&lt;/p&gt;

&lt;p&gt;If you want to test the service sending an email to an email address of yours, you will have to add and verify it in the “Email Addresses” in the “Identity Management” section of your SES console.&lt;/p&gt;

&lt;p&gt;So click the “Verify a New Email Address” button. Enter an email of yours and you will receive a verification email. Click on the link you will find inside that email that you have received. That’s it! You now have a verified email recipient to test the service with. Bear in mind that you should send the test email from this address too.&lt;/p&gt;

&lt;p&gt;When you are happy with it, go to “Sending Statistics” in the “Email Sending” section in your SES console. You will find a button to open a request to move out of the sandbox. When it’s accepted, your application will be able to send emails to any email address in the Internet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Alright! We have set up our Amazon SES service and our Rails application to work together. Really. You don’t have to make any other modification, just use Rails email sending methods as usual and it will work.&lt;/p&gt;

&lt;p&gt;With this article I wanted to show how easy is to configure and use a service like this. If you ever want to switch to another service, I’m sure the process will be similar. At least from Rails’ side you’ll only need to adapt your SMTP settings.&lt;/p&gt;

&lt;p&gt;Happy email sending!&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>email</category>
      <category>ses</category>
    </item>
    <item>
      <title>Mock a SQS queue with moto</title>
      <author>drewmullen</author>
      <pubDate>Wed, 10 Mar 2021 14:39:47 +0000</pubDate>
      <link>https://dev.to/drewmullen/mock-a-sqs-queue-with-moto-4ppd</link>
      <guid>https://dev.to/drewmullen/mock-a-sqs-queue-with-moto-4ppd</guid>
      <description>&lt;p&gt;Below is simple example code to mock the aws sqs api. This can be useful for development so you dont have to actually manage a real SQS queue / connectivity / IAM permissions until you're ready. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#apppy" class="anchor"&gt;
  &lt;/a&gt;
  app.py
&lt;/h1&gt;

&lt;p&gt;A simple function to write a message to a preexisting queue&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;QUEUE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'QUEUE_URL'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'&amp;lt;default value&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;sqs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'sqs'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;region_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'us-east-1'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;MessageBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;QueueUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QUEUE_URL&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conftestpy" class="anchor"&gt;
  &lt;/a&gt;
  conftest.py
&lt;/h1&gt;

&lt;p&gt;Pytest fixtures to mock up the aws sqs API. &lt;code&gt;aws_credentials()&lt;/code&gt; also ensures that your pytest functions will not actually write to aws resources.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;REGION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'us-east-'&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'function'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;aws_credentials&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="s"&gt;"""Mocked AWS Credentials for moto."""&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'AWS_ACCESS_KEY_ID'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'testing'&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'AWS_SECRET_ACCESS_KEY'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'testing'&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'AWS_SECURITY_TOKEN'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'testing'&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'AWS_SESSION_TOKEN'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'testing'&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'function'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sqs_client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aws_credentials&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# setup
&lt;/span&gt;    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;mock_sqs&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'sqs'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;region_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;REGION&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# teardown
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#testsqspy" class="anchor"&gt;
  &lt;/a&gt;
  test_sqs.py
&lt;/h1&gt;

&lt;p&gt;An example test function. Create a queue using the mock client from conftest.py (notice &lt;code&gt;sqs_client&lt;/code&gt; parameter matches the conftest function name &lt;code&gt;sqs_client&lt;/code&gt;), invoke your python module function &lt;code&gt;app.write_message()&lt;/code&gt;. Validate the returned message matches what you sent&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_write_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sqs_client&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqs_client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_queue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QueueName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'test-msg-sender'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;queue_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'QueueUrl'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# override function global URL variable
&lt;/span&gt;    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QUEUE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queue_url&lt;/span&gt;
    &lt;span class="n"&gt;expected_msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;'msg'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'this is a test'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected_msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sqs_messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqs_client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;receive_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QueueUrl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;queue_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sqs_messages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Messages'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'Body'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;expected_msg&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#extra" class="anchor"&gt;
  &lt;/a&gt;
  Extra
&lt;/h2&gt;

&lt;p&gt;In case you wanted to see my file structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;├── README.md
├── app.py
├── requirements.txt
├── requirements_dev.txt
└── tests
    ├── __init__.py
    ├── conftest.py
    └── unit
        ├── __init__.py
        └── test_sqs.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#thank-you" class="anchor"&gt;
  &lt;/a&gt;
  Thank you
&lt;/h2&gt;

&lt;p&gt;kudos to &lt;a href="https://qxf2.com/blog/mocking-out-aws-sqs-using-moto"&gt;Arunkumar Muralidharan&lt;/a&gt; who got me started&lt;/p&gt;

</description>
      <category>python</category>
      <category>moto</category>
      <category>boto3</category>
      <category>aws</category>
    </item>
    <item>
      <title>Git that Code!</title>
      <author>Maegan Wilson</author>
      <pubDate>Wed, 10 Mar 2021 14:10:04 +0000</pubDate>
      <link>https://dev.to/maeganwilson_/git-that-code-2heh</link>
      <guid>https://dev.to/maeganwilson_/git-that-code-2heh</guid>
      <description>&lt;p&gt;Welcome to "Git that Code!" The 2nd post in my Git series. In this post, I'm going to talk about the popular remote servers, GitHub, GitLab, and BitBucket, how to get your code on the server, and retrieve code from it. Let's get started!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4KwLqLXGPn8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#remote-server-options" class="anchor"&gt;
  &lt;/a&gt;
  Remote Server Options
&lt;/h1&gt;

&lt;p&gt;There are 3 Git server options that you hear about, well you might actually only hear about the first 2. You could also roll your own, but that's a bit out of the scope here. So, here are some options that are free and offer quite a bit.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitHub&lt;/li&gt;
&lt;li&gt;GitLab&lt;/li&gt;
&lt;li&gt;BitBucket&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are just the most "popular" options and each have their pluses and minuses, but here are some general features that each offer on their free tiers.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Free, unlimited private repos (where the code lives)&lt;/li&gt;
&lt;li&gt;Issue tracking&lt;/li&gt;
&lt;li&gt;Wiki per repo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now here is what each is mainly known for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;GitHub&lt;/strong&gt;: Open source software. Most people put their OSS on GitHub for others to contribute to or use&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;GitLab&lt;/strong&gt;: Contains more devop options like Continuious Integration and more access levels&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;BitBucket&lt;/strong&gt;: Has unlimited private repos and integrates well with JIRA and other atlassian software&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post, I'll be demoing using GitHub, but it is relatively the same on all 3 platforms.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-get-code-to-the-server" class="anchor"&gt;
  &lt;/a&gt;
  How to get code to the server
&lt;/h1&gt;

&lt;p&gt;Now, that we know where to store code, let's talk about getting code onto the server. To get code onto the server, you must &lt;code&gt;push&lt;/code&gt; the code into a repository.&lt;/p&gt;

&lt;p&gt;What I like to do is start the repo in your choice of server, mine is GitHub and then get the repo onto my computer, but in the last &lt;a href="https://cctplus.xyz/2021/03/02/giting_started"&gt;post&lt;/a&gt; I walked through making a git repo locally, so let's get that repo onto GitHub.&lt;/p&gt;

&lt;p&gt;The first thing I need to do is make a blank repository. This repository is going to be where the code will be stored.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open your browser of choice&lt;/li&gt;
&lt;li&gt;Navigate to your server&lt;/li&gt;
&lt;li&gt;Sign in&lt;/li&gt;
&lt;li&gt;Create a new repository&lt;/li&gt;
&lt;li&gt;Don't check any of these boxes, but make sure to give your repo a name.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, this is the remote repo that needs to be added to our local repo. GitHub gives us some handy quick setup which is what we are going to follow.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open your terminal app&lt;/li&gt;
&lt;li&gt;Navigate to your local repository&lt;/li&gt;
&lt;li&gt;Add a remote url to the local git repository &lt;code&gt;git remote add origin&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Now we need to create a branch locally &lt;code&gt;git branch -M main&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Then, we &lt;code&gt;push&lt;/code&gt; it to the server. basically we are uploading it to the server now. &lt;code&gt;git push -u origin main&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now the code should be in my GitHub repo. Let's refresh and &lt;strong&gt;BAM&lt;/strong&gt; it's there.&lt;/p&gt;

&lt;p&gt;After commits have been made, we need to run &lt;code&gt;git push&lt;/code&gt; which will push the commits to the remote server.&lt;/p&gt;

&lt;p&gt;When do you push your code? All the time. Sometimes I do it after a long session. Sometimes I do it after each commit. Just make sure your code in the remote server is as up to date as possible. In case things go south, you want a way o bring that work back and the history back.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-get-the-code-from-the-server" class="anchor"&gt;
  &lt;/a&gt;
  How to get the code from the server
&lt;/h1&gt;

&lt;p&gt;We just talked about pushing code to the server, now let's talk about pulling and cloning code from the server. There are two basic commands to get the code from the server. They are &lt;code&gt;git clone&lt;/code&gt; and &lt;code&gt;git pull&lt;/code&gt;. Each are used in different scenarios.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git clone&lt;/code&gt; is &lt;strong&gt;mainly&lt;/strong&gt; used to get a repository from the server that doesn't exist on the local computer. If you stumble upon a project on  GitHub that you want to hack on, then you clone it to your machine.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git pull&lt;/code&gt; is &lt;strong&gt;mainly&lt;/strong&gt; used to get changes to a repository that you are working on locally. It can be used if you're working on a team or make a change on the web that you need on your computer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's walk through an example of cloning a repo. I'll clone my &lt;code&gt;hello-world-js&lt;/code&gt; repo from forever ago.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open terminal&lt;/li&gt;
&lt;li&gt;Navigate where you want to store the repo for me that'll be my developer folder&lt;/li&gt;
&lt;li&gt;Grab the URL to clone from the repo&lt;/li&gt;
&lt;li&gt;In the terminal type the command &lt;code&gt;git clone git@github.com:maeganwilson/hello-world-js.git&lt;/code&gt; and press enter&lt;/li&gt;
&lt;li&gt;DONE!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, we can edit the file and push it back.&lt;/p&gt;

&lt;p&gt;Alright, cloning was kinda easy, now let's try pulling. Like I said, pulling can only happen when there are changes on the server that you need to git. So, I'm going to make some changes in GitHub.com in the iHog repo.&lt;/p&gt;

&lt;p&gt;Now, in my terminal, I'm going to change my directory to iHog and then run &lt;code&gt;git pull&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the terminal, we see how many changes were made and a bit more.&lt;/p&gt;




&lt;p&gt;That's a very basic overview of using a remote server and how to pull and clone code.&lt;/p&gt;

&lt;p&gt;In the next post, I'm going to cover branches and not the outside tree kind.&lt;/p&gt;




&lt;p&gt;If you want to chat with me and point out some tips and tricks, you can watch me work on iOS apps on Tuesday, Thursday, and Friday mornings at &lt;a href="http://twitch.tv/maeganwilson_"&gt;twitch.tv/maeganwilson_&lt;/a&gt; Make sure to drop by and say hi!&lt;/p&gt;

</description>
      <category>git</category>
    </item>
    <item>
      <title>Sharing common code between Rails controllers with `Scoped` pattern</title>
      <author>matt swanson</author>
      <pubDate>Wed, 10 Mar 2021 13:00:00 +0000</pubDate>
      <link>https://dev.to/swanson/sharing-common-code-between-rails-controllers-with-scoped-pattern-471m</link>
      <guid>https://dev.to/swanson/sharing-common-code-between-rails-controllers-with-scoped-pattern-471m</guid>
      <description>&lt;p&gt;If you follow a strict REST / nested resources approach to building your Rails app, you might get sick of repeating common controller actions.&lt;/p&gt;

&lt;p&gt;Try the &lt;code&gt;Scoped&lt;/code&gt; concern pattern: a place to put shared code (setting variables, authorization) and slim down your controllers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;This particular pattern comes from DHH and Basecamp – a codebase that p&lt;a href="https://twitter.com/dhh/status/964244090224128001"&gt;rides itself of using lots of tiny concerns&lt;/a&gt; to share bits of behavior.&lt;/p&gt;

&lt;p&gt;While the savings of repeating the same &lt;code&gt;before_action&lt;/code&gt;s to look up a &lt;code&gt;Channel&lt;/code&gt; would be a fine benefit on it’s own, the naming convention of &lt;code&gt;Scoped&lt;/code&gt; is such a great, sharp name. Playlists are “scoped” to a channel so it makes total sense that the corresponding controller would be “channel scoped”.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;ChannelScoped&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Concern&lt;/span&gt;

  &lt;span class="n"&gt;included&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;before_action&lt;/span&gt; &lt;span class="ss"&gt;:set_channel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:authorize_channel&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_channel&lt;/span&gt;
    &lt;span class="vi"&gt;@channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:channel_id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;authorize_channel&lt;/span&gt;
    &lt;span class="n"&gt;authorize&lt;/span&gt; &lt;span class="vi"&gt;@channel&lt;/span&gt; &lt;span class="c1"&gt;# check that user has access, etc&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Channels::SubscriptionsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;ChannelScoped&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Channels::VideosController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;ChannelScoped&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Channels::PlaylistsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;ChannelScoped&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#additional-resources" class="anchor"&gt;
  &lt;/a&gt;
  Additional Resources
&lt;/h2&gt;

&lt;p&gt;DHH Gist: &lt;a href="https://gist.github.com/dhh/10022098"&gt;Models for Nested Resources&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://twitter.com/_swanson"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0llgMsYy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://boringrails.com/images/twitter-banner.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Top 10 Date Pickers in React</title>
      <author>deji adesoga</author>
      <pubDate>Wed, 10 Mar 2021 12:13:05 +0000</pubDate>
      <link>https://dev.to/desoga/top-10-date-pickers-in-react-9hm</link>
      <guid>https://dev.to/desoga/top-10-date-pickers-in-react-9hm</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Never bend your head. Always hold it high. Look the world straight in the eye.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;- Helen Keller&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-content" class="anchor"&gt;
  &lt;/a&gt;
  Table of Content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="#Introduction"&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#y0c/react-datepicker"&gt;&lt;strong&gt;10). @ y0c/react-datepicker&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#materialui-daterange-picker"&gt;&lt;strong&gt;9). materialui-daterange-picker&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#React-DateTime-Picker"&gt;&lt;strong&gt;8). React-DateTime-Picker&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#react-date-range"&gt;&lt;strong&gt;7). react-date-range&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#react-date-picker"&gt;&lt;strong&gt;6). react-date-picker&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#react-big-calendar"&gt;&lt;strong&gt;5). react-big-calendar&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#react-datetime"&gt;&lt;strong&gt;4). react-datetime&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#react-day-picker"&gt;&lt;strong&gt;3). react-day-picker&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#material-ui/pickers"&gt;&lt;strong&gt;2). @material-ui/pickers&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#reactdatepicker"&gt;&lt;strong&gt;1). React Date Picker&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#conclusion"&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;A Date Picker is a form of graphical user interface that allows users to select a date from a calendar and/or time from a time range. The common practice in which a date picker is implemented is by providing a text-box field, which when clicked upon to enter a date, displays a pop-up calendar, such that when one of the characters on the calendar is selected, it displays the value inside the text input field.&lt;/p&gt;

&lt;p&gt;Some of the advantages of using a date picker include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Entering dates becomes easier for the user and you can control the format of the data you receive.&lt;/li&gt;
&lt;li&gt;  Only valid dates can be entered.&lt;/li&gt;
&lt;li&gt;  Dates are properly formated to avoid confusion.&lt;/li&gt;
&lt;li&gt;  Date Pickers can help users out by including common holidays, for instance depending on the country chosen and integration of their own calendar.&lt;/li&gt;
&lt;li&gt;  Making the user enter a date by merely clicking on a date in the pop-up calendar as opposed to having to take their hand off the mouse to type in a date, reducing the chances of error in the process.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this tutorial, we will take a look at the top ten date pickers in react, using the estimated weekly downloads from the least number to the most on &lt;a href="https://www.npmjs.com/"&gt;NPM&lt;/a&gt;.&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#10-y0creactdatepicker" class="anchor"&gt;
  &lt;/a&gt;
  10). @ y0c/react-datepicker
&lt;/h2&gt;

&lt;p&gt;This date picker is a flexible, reusable, mobile-friendly DatePicker component for React. Its previous versions rely on &lt;strong&gt;moment.js,&lt;/strong&gt; but now it is changed to &lt;strong&gt;Day.js&lt;/strong&gt; because of bundle size issues.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#brief-overview" class="anchor"&gt;
  &lt;/a&gt;
  Brief Overview:
&lt;/h3&gt;
&lt;h6&gt;
  &lt;a href="#version%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Version  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;1.0.4&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#license%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;License  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;MIT&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#estimatedweekly-downloads%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Estimated-Weekly -Downloads &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;677&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#unpackedsize" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Unpacked-size&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;154kb&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#link-to-repository" class="anchor"&gt;
  &lt;/a&gt;
  Link To Repository
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://github.com/y0c/react-datepicker"&gt;@yoc/react-&lt;/a&gt;date picker&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#code-demo-example" class="anchor"&gt;
  &lt;/a&gt;
  Code Demo / Example
&lt;/h3&gt;

&lt;p&gt;In this short tutorial, I'll be showing us how we can install, display and get the values of the date that is selected in the DatePicker.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#step-1" class="anchor"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h4&gt;

&lt;p&gt;We will need to install React, this can be done trough Create-React-App. I wrote an article on how to install it &lt;a href="https://thecodeangle.com/angular-vs-react-vs-vue-getting-started/#reactinstallation"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once that is done, we will need to navigate into the path of our folder in our terminal and run the npm command to install our Date-Picker package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i @y0c/react-datepicker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-2" class="anchor"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  app.js
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;DatePicker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;RangeDatePicker&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@y0c/react-datepicker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@y0c/react-datepicker/assets/styles/calendar.scss&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;YocReactDatePicker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onChangeValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dateValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toDate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dateValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onChangeRangeValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;YOC&lt;/span&gt; &lt;span class="nx"&gt;DatePicker&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DatePicker&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onChangeValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;YOC&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="nx"&gt;Range&lt;/span&gt; &lt;span class="nx"&gt;Picker&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;RangeDatePicker&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onChangeRangeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;date&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;YocReactDatePicker&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we did here was to create a new file. After this, we had to import &lt;strong&gt;React&lt;/strong&gt;, &lt;strong&gt;DatePicker&lt;/strong&gt;, &lt;strong&gt;RangeDatePicker&lt;/strong&gt; as well as the assets for the &lt;strong&gt;CSS.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Next, we created a functional component that has two variables. The first one is called &lt;strong&gt;onChangeValue&lt;/strong&gt; which takes in an argument, while the second one is called &lt;strong&gt;onChangeRangeValue. &lt;/strong&gt;These variables allow us to log the data for the date in the console.&lt;/p&gt;

&lt;p&gt;Finally in our code, we display the date pickers by calling both the &lt;strong&gt;&lt;em&gt;&lt;/em&gt;&lt;/strong&gt; and the &lt;strong&gt;&lt;/strong&gt; that was imported earlier.&lt;/p&gt;

&lt;p&gt;Each one has an &lt;strong&gt;onChange&lt;/strong&gt; prop that takes in the variables that we created earlier.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  Result
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EJdFni7C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EJdFni7C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-1.gif" alt="a gif displaying the result of the above code sample"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#possible-errors" class="anchor"&gt;
  &lt;/a&gt;
  Possible Errors
&lt;/h4&gt;

&lt;p&gt;There is a chance you may get an error that says, &lt;strong&gt;&lt;em&gt;ERROR Cannot find module 'node-sass'.&lt;/em&gt;&lt;/strong&gt; All you have to do when you get this error message is to run the command &lt;code&gt;npm install node-sass&lt;/code&gt; in your terminal or command line.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9%C2%A0materialuidaterangepicker" class="anchor"&gt;
  &lt;/a&gt;
  9). materialui-daterange-picker
&lt;/h2&gt;

&lt;p&gt;This is a react date range picker that makes use of @material-ui. Material-UI is the most popular React component library, with millions of users worldwide.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#brief-overview" class="anchor"&gt;
  &lt;/a&gt;
  Brief Overview:
&lt;/h3&gt;

&lt;h6&gt;
  &lt;a href="#version%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Version  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;1.1.92&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#license%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;License  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;MIT&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#estimatedweekly-downloads%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Estimated-Weekly -Downloads &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;5,135&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#unpackedsize" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Unpacked-size&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;1.12 MB&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#link-to-repository" class="anchor"&gt;
  &lt;/a&gt;
  Link To Repository
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://github.com/jungsoft/materialui-daterange-picker#readme"&gt;materialui-daterange-picker&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-demo-example" class="anchor"&gt;
  &lt;/a&gt;
  Code Demo / Example
&lt;/h3&gt;

&lt;p&gt;In this short tutorial, I'll be showing us how we can install, display and get the values of the date that is selected in the DatePicker.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-1" class="anchor"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h4&gt;

&lt;p&gt;We will need to install React, this can be done trough Create-React-App. I wrote an article on how to install it &lt;a href="https://thecodeangle.com/angular-vs-react-vs-vue-getting-started/#reactinstallation"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once that is done, we will need to navigate into the path of our folder in our terminal and run the npm command to install our Date-Picker package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i materialui-daterange-picker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-2" class="anchor"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;app.js&lt;/em&gt;
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;DateRangePicker&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;materialui-daterange-picker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MaterialUiDateRange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setOpen&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setOpen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;


  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setDateRange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endDate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endDate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Material&lt;/span&gt; &lt;span class="nx"&gt;UI&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="nx"&gt;Range&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DateRangePicker&lt;/span&gt;
        &lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setDateRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MaterialUiDateRange&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we import &lt;strong&gt;React&lt;/strong&gt; and the &lt;strong&gt;DateRangePicker&lt;/strong&gt; as expected. Then we created a functional component. In this component, we declared a React hook called &lt;strong&gt;useState&lt;/strong&gt; that takes in a variable(open) and a function(setOpen).&lt;/p&gt;

&lt;p&gt;We state the &lt;strong&gt;useState&lt;/strong&gt; to &lt;strong&gt;true&lt;/strong&gt; by default because that is how our date picker will get displayed on the page.&lt;/p&gt;

&lt;p&gt;Next up, we assigned an anonymous function to a variable called toggle. This makes sure that our date picker is always open no matter the state.&lt;/p&gt;

&lt;p&gt;We then create another variable called &lt;strong&gt;setDateRange.&lt;/strong&gt; This variable takes in an anonymous function that logs and alert the value of the date selected. We get the value for both the start date and the end date.&lt;/p&gt;

&lt;p&gt;Finally in our return, we assign each props in the &amp;lt;&lt;strong&gt;DateRangePicker&lt;/strong&gt; /&amp;gt; component to each of the variables.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  Result
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1nDlUNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1nDlUNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-2.gif" alt="Gif showing the result of the code above"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-reactdatetimepicker" class="anchor"&gt;
  &lt;/a&gt;
  8). React-DateTime-Picker
&lt;/h2&gt;

&lt;p&gt;This is a  fast, lightweight and easy to style date picker that only provides support for modern browsers. It is only compatible with  16.3 or later. If you use an older version of React, please refer to the table below to find a suitable React-DateTime-Picker version.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;React version&lt;/th&gt;
&lt;th&gt;Newest compatible React-DateTime-Picker version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;≥16.3&lt;/td&gt;
&lt;td&gt;latest&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;≥16.0&lt;/td&gt;
&lt;td&gt;2.x&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#brief-overview" class="anchor"&gt;
  &lt;/a&gt;
  Brief Overview:
&lt;/h3&gt;

&lt;h6&gt;
  &lt;a href="#version%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Version  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;3.1.0&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#license%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;License  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;MIT&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#estimatedweekly-downloads%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Estimated-Weekly -Downloads &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;20,973&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#unpackedsize" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Unpacked-size&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;193 kB&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#link-to-repository" class="anchor"&gt;
  &lt;/a&gt;
  Link To Repository
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://github.com/wojtekmaj/react-datetime-picker#readme"&gt;react-datetime-picker&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-demo-example" class="anchor"&gt;
  &lt;/a&gt;
  Code Demo / Example
&lt;/h3&gt;

&lt;p&gt;In this short tutorial, I’ll be showing us how we can install, display and get the values of the date that is selected in the DatePicker.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-1" class="anchor"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h4&gt;

&lt;p&gt;We will need to install React, this can be done trough Create-React-App. I wrote an article on how to install it &lt;a href="https://thecodeangle.com/angular-vs-react-vs-vue-getting-started/#reactinstallation"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once that is done, we will need to navigate into the path of our folder in our terminal and run the npm command to install our Date-Picker package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react-datetime-picker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-2" class="anchor"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;app.js&lt;/em&gt;
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;DateTimePicker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-datetime-picker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ReactDateTimePicker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getDateValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;


  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="nx"&gt;Time&lt;/span&gt; &lt;span class="nx"&gt;Picker&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DateTimePicker&lt;/span&gt;
        &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getDateValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ReactDateTimePicker&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the above, we import &lt;strong&gt;React&lt;/strong&gt;, &lt;strong&gt;useState&lt;/strong&gt; and &lt;strong&gt;DateTimePicker&lt;/strong&gt;, then we created a functional component. Then we declared a React hook called &lt;strong&gt;useState&lt;/strong&gt; that takes in a variable(value) and a function(onChange).&lt;/p&gt;

&lt;p&gt;The value takes in the value of the current date which will be displayed by default in the input field.&lt;/p&gt;

&lt;p&gt;Next up we created a variable called &lt;strong&gt;getDateValue&lt;/strong&gt;. This variable takes in an anonymous function that enables us to log and alert the value of the selected date. Also, the &lt;strong&gt;onChange&lt;/strong&gt; function is called inside the anonymous function, this makes the date values in the input field change based on the date that was selected.&lt;/p&gt;

&lt;p&gt;Lastly, in our return, we pass in the variables to the props inside the &lt;strong&gt;&lt;/strong&gt; component.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  Result
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nAUexGv9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-3-1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nAUexGv9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-3-1.gif" alt="Gif to show result of the code above"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#7-reactdaterange" class="anchor"&gt;
  &lt;/a&gt;
  7). react-date-range
&lt;/h2&gt;

&lt;p&gt;This is a React Date Picker component for choosing dates and date ranges. It makes use of date-fns for date operations. Some of the qualities of this date picker include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Stateless date operations&lt;/li&gt;
&lt;li&gt;  Highly configurable&lt;/li&gt;
&lt;li&gt;  Multiple range selection&lt;/li&gt;
&lt;li&gt;  Based on native js dates&lt;/li&gt;
&lt;li&gt;  Drag n Drop selection&lt;/li&gt;
&lt;li&gt;  Keyboard friendly&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#brief-overview" class="anchor"&gt;
  &lt;/a&gt;
  Brief Overview:
&lt;/h3&gt;
&lt;h6&gt;
  &lt;a href="#version%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Version  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;1.1.3&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#license%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;License  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;MIT&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#estimatedweekly-downloads%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Estimated-Weekly -Downloads &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;63,883&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#unpackedsize" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Unpacked-size&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;1.92 MB&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#link-to-repository" class="anchor"&gt;
  &lt;/a&gt;
  Link To Repository
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://github.com/hypeserver/react-date-range#readme"&gt;react-date-range&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#code-demo-example" class="anchor"&gt;
  &lt;/a&gt;
  Code Demo / Example
&lt;/h3&gt;

&lt;p&gt;In this short tutorial, I’ll be showing us how we can install, display and get the values of the date that is selected in the DatePicker.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#step-1" class="anchor"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h4&gt;

&lt;p&gt;We will need to install React, this can be done trough Create-React-App. I wrote an article on how to install it &lt;a href="https://thecodeangle.com/angular-vs-react-vs-vue-getting-started/#reactinstallation"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once that is done, we will need to navigate into the path of our folder in our terminal and run the npm command to install our Date-Picker package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react-date-range
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-2" class="anchor"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;app.js&lt;/em&gt;
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-date-range/dist/styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// main style file&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-date-range/dist/theme/default.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// theme css file&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Calendar&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-date-range&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ReactDateRange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSelect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;


  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="nx"&gt;Range&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Calendar&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSelect&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ReactDateRange&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first thing we did was import &lt;strong&gt;React&lt;/strong&gt;, the CSS files for the theme and also the necessary component from &lt;strong&gt;react-date-range.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Next, we created a function called &lt;strong&gt;handleSelect&lt;/strong&gt;, that helps log the date values to the console.&lt;/p&gt;

&lt;p&gt;Finally, in our return, our first component called &lt;strong&gt;&lt;/strong&gt; we declared some props and assigned some variables to it. The first is the date prop that takes in a new Date value, second is the &lt;strong&gt;onChange&lt;/strong&gt; prop that takes in the &lt;strong&gt;handleSelect&lt;/strong&gt; variable that logs out the date values to the console.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  Result
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QYIVvXXO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QYIVvXXO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-4.gif" alt="Gif showing the result of the above code"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#6-reactdatepicker" class="anchor"&gt;
  &lt;/a&gt;
  6). react-date-picker
&lt;/h2&gt;

&lt;p&gt;This is a  fast, lightweight and easy to style date picker that only provides support for modern browsers. With this date picker you can pick days, months, years, or even decades.&lt;/p&gt;

&lt;p&gt;It is only compatible with  16.3 or later. If you use an older version of React, please refer to the table below to find a suitable React-DateTime-Picker version.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;React version&lt;/th&gt;
&lt;th&gt;Newest compatible React-Date-Picker version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;≥16.3&lt;/td&gt;
&lt;td&gt;latest&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;≥16.0&lt;/td&gt;
&lt;td&gt;7.x&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#brief-overview" class="anchor"&gt;
  &lt;/a&gt;
  Brief Overview:
&lt;/h3&gt;
&lt;h6&gt;
  &lt;a href="#version%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Version  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;8.0.7&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#license%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;License  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;MIT&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#estimatedweekly-downloads%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Estimated-Weekly -Downloads &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;78,779&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#unpackedsize" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Unpacked-size&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;209 kB&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#link-to-repository" class="anchor"&gt;
  &lt;/a&gt;
  Link To Repository
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://github.com/wojtekmaj/react-date-picker#readme"&gt;react-date-picker &lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#code-demo-example" class="anchor"&gt;
  &lt;/a&gt;
  Code Demo / Example
&lt;/h3&gt;

&lt;p&gt;In this short tutorial, I’ll be showing us how we can install, display and get the values of the date that is selected in the DatePicker.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#step-1" class="anchor"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h4&gt;

&lt;p&gt;We will need to install React, this can be done trough Create-React-App. I wrote an article on how to install it &lt;a href="https://thecodeangle.com/angular-vs-react-vs-vue-getting-started/#reactinstallation"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once that is done, we will need to navigate into the path of our folder in our terminal and run the npm command to install our Date-Picker package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react-date-picker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-2" class="anchor"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;app.js&lt;/em&gt;
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;DatePicker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-date-picker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ReactDatePicker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dateValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="nx"&gt;Picker&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DatePicker&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dateValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ReactDatePicker&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the above, we import &lt;strong&gt;React&lt;/strong&gt;, &lt;strong&gt;useState&lt;/strong&gt; and &lt;strong&gt;DatePicker&lt;/strong&gt;, then we created a functional component. Next, we declared a React hook called &lt;strong&gt;useState&lt;/strong&gt; that takes in a variable(value) and a function(onChange).&lt;/p&gt;

&lt;p&gt;The value takes in the result of the current date which will be displayed by default in the input field.&lt;/p&gt;

&lt;p&gt;Next up we created a variable called &lt;strong&gt;dateValue&lt;/strong&gt; . This variable takes in an anonymous function that enables us to log and alert the value of the selected date. Also, the &lt;strong&gt;onChange&lt;/strong&gt; function is called inside the anonymous function, this makes the date values in the input field change based on the date that was selected.&lt;/p&gt;

&lt;p&gt;Lastly, in our return, we pass in the variables to the props inside the &amp;lt;&lt;strong&gt;DatePicker&lt;/strong&gt; /&amp;gt; component.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  Result
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X4EzB0-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X4EzB0-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-5.gif" alt="Gif showing results of the above code"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#5-reactbigcalendar" class="anchor"&gt;
  &lt;/a&gt;
  5). react-big-calendar
&lt;/h2&gt;

&lt;p&gt;This is an events calendar component built for React and made for modern browsers (read: IE10+) and uses flexbox over the classic tables-based approach.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;react-big-calendar&lt;/strong&gt; makes use of three options for handling the date formatting and culture localization, depending on your preference of &lt;strong&gt;DateTime&lt;/strong&gt; libraries. You can use either the &lt;a href="https://momentjs.com/"&gt;Moment.js&lt;/a&gt;, &lt;a href="https://github.com/jquery/globalize"&gt;Globalize.js&lt;/a&gt; or &lt;a href="https://date-fns.org/"&gt;date-fns&lt;/a&gt; localizers.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#brief-overview" class="anchor"&gt;
  &lt;/a&gt;
  Brief Overview:
&lt;/h3&gt;
&lt;h6&gt;
  &lt;a href="#version%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Version  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;0.32.0&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#license%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;License  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;MIT&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#estimatedweekly-downloads%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Estimated-Weekly -Downloads &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;126,292&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#unpackedsize" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Unpacked-size&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;1.13 MB&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#link-to-repository" class="anchor"&gt;
  &lt;/a&gt;
  Link To Repository
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://github.com/jquense/react-big-calendar#readme"&gt;react-date-calendar&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#code-demo-example" class="anchor"&gt;
  &lt;/a&gt;
  Code Demo / Example
&lt;/h3&gt;

&lt;p&gt;In this short tutorial, I’ll be showing us how we can install, display and get the values of the date that is selected in the DatePicker.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#step-1" class="anchor"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h4&gt;

&lt;p&gt;We will need to install React, this can be done trough Create-React-App. I wrote an article on how to install it &lt;a href="https://thecodeangle.com/angular-vs-react-vs-vue-getting-started/#reactinstallation"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once that is done, we will need to navigate into the path of our folder in our terminal and run the npm command to install our Date-Picker package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react-big-calendar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-2" class="anchor"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;app.js&lt;/em&gt;
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Calendar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;momentLocalizer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-big-calendar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;moment&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;moment&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-big-calendar/lib/css/react-big-calendar.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ReactBigCalendar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;moment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;en-GB&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;localizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;momentLocalizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;moment&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myEventsList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;moment&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toDate&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="na"&gt;end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;moment&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;days&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toDate&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Play Nintendo Switch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="nx"&gt;Big&lt;/span&gt; &lt;span class="nx"&gt;Calendar&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Calendar&lt;/span&gt;
        &lt;span class="nx"&gt;localizer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;localizer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;myEventsList&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ReactBigCalendar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the above, we import &lt;strong&gt;React&lt;/strong&gt;, the necessary dependencies from &lt;strong&gt;react-big-calendar&lt;/strong&gt;, &lt;strong&gt;moment.js&lt;/strong&gt; as well as the needed &lt;strong&gt;CSS&lt;/strong&gt; assets.&lt;/p&gt;

&lt;p&gt;Next up we set the structure for &lt;strong&gt;moment.js&lt;/strong&gt;, after which we declare a variable called &lt;strong&gt;myEventsList&lt;/strong&gt;. This variable contains an array of objects that sets a start-date, end-date as well as the title of the event to take place on those days.&lt;/p&gt;

&lt;p&gt;Finally, we return our &amp;lt;&lt;strong&gt;Calendar&lt;/strong&gt; /&amp;gt; component which contains the props in which we passed the date and also the list of events.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#results" class="anchor"&gt;
  &lt;/a&gt;
  Results
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kq7e4s8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kq7e4s8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-6.gif" alt="Gif showing results of the above code"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-reactdatetime" class="anchor"&gt;
  &lt;/a&gt;
  4). react-datetime
&lt;/h2&gt;

&lt;p&gt;This Date-Picker can be used as a date picker, time picker or both at the same time. It is &lt;strong&gt;highly customizable&lt;/strong&gt; and it even allows to edit date's milliseconds.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#brief-overview" class="anchor"&gt;
  &lt;/a&gt;
  Brief Overview:
&lt;/h3&gt;
&lt;h6&gt;
  &lt;a href="#version%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Version  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;3.0.4&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#license%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;License  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;MIT&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#estimatedweekly-downloads%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Estimated-Weekly -Downloads &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;207,604&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#unpackedsize" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Unpacked-size&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;296 kB&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#link-to-repository" class="anchor"&gt;
  &lt;/a&gt;
  Link To Repository
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/react-datetime"&gt;react-datetime&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#code-demo-example" class="anchor"&gt;
  &lt;/a&gt;
  Code Demo / Example
&lt;/h3&gt;

&lt;p&gt;In this short tutorial, I’ll be showing us how we can install, display and get the values of the date that is selected in the DatePicker.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#step-1" class="anchor"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h4&gt;

&lt;p&gt;We will need to install React, this can be done trough Create-React-App. I wrote an article on how to install it &lt;a href="https://thecodeangle.com/angular-vs-react-vs-vue-getting-started/#reactinstallation"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once that is done, we will need to navigate into the path of our folder in our terminal and run the npm command to install our Date-Picker package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react-datetime
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-2" class="anchor"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;app.js&lt;/em&gt;
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-datetime/css/react-datetime.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Datetime&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-datetime&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ReactDateTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;setDateTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dateValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toDate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dateValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dateValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="nx"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Datetime&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setDateTime&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setDateTime&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ReactDateTime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we import &lt;strong&gt;React&lt;/strong&gt;, the &lt;strong&gt;CSS&lt;/strong&gt; assets and &lt;strong&gt;Datetime&lt;/strong&gt; from the &lt;strong&gt;react-datetime&lt;/strong&gt; library.&lt;/p&gt;

&lt;p&gt;Inside our functional component, we created a variable called &lt;strong&gt;setDateTime&lt;/strong&gt;. This variable takes in an anonymous function that will display the values of the date both inside the browser console and the alert box.&lt;/p&gt;

&lt;p&gt;Finally, in our return, we create our &amp;lt;&lt;strong&gt;Datetime&lt;/strong&gt; /&amp;gt; component and assign the necessary props to it, which makes our date-picker functional.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#results" class="anchor"&gt;
  &lt;/a&gt;
  Results
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6d7c1neW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6d7c1neW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-7.gif" alt="Gif showing results of the above code"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-reactdaypicker" class="anchor"&gt;
  &lt;/a&gt;
  3). react-day-picker
&lt;/h2&gt;

&lt;p&gt;This is a date-picker that is highly customizable, localizable, with ARIA support, no external dependencies.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#brief-overview" class="anchor"&gt;
  &lt;/a&gt;
  Brief Overview:
&lt;/h3&gt;
&lt;h6&gt;
  &lt;a href="#version%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Version  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;7.4.8&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#license%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;License  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;MIT&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#estimatedweekly-downloads%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Estimated-Weekly -Downloads &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;454,148&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#unpackedsize" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Unpacked-size&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;686 kB&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#link-to-repository" class="anchor"&gt;
  &lt;/a&gt;
  Link To Repository
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://github.com/gpbl/react-day-picker"&gt;react-day-picker&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#code-demo-example" class="anchor"&gt;
  &lt;/a&gt;
  Code Demo / Example
&lt;/h3&gt;

&lt;p&gt;In this short tutorial, I’ll be showing us how we can install, display and get the values of the date that is selected in the DatePicker.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#step-1" class="anchor"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h4&gt;

&lt;p&gt;We will need to install React, this can be done trough Create-React-App. I wrote an article on how to install it &lt;a href="https://thecodeangle.com/angular-vs-react-vs-vue-getting-started/#reactinstallation"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once that is done, we will need to navigate into the path of our folder in our terminal and run the npm command to install our Date-Picker package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react-day-picker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-2" class="anchor"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;app.js&lt;/em&gt;
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;DayPickerInput&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-day-picker/DayPickerInput&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-day-picker/lib/style.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ReactDayPicker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onDayChangeInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;DayPickerInput&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DayPickerInput&lt;/span&gt;
        &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DD/MM/YYYY&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DD/MM/YYYY&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;onDayChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onDayChangeInput&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ReactDayPicker&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the above code, we import &lt;strong&gt;React&lt;/strong&gt;, the &lt;strong&gt;DayPickerInput&lt;/strong&gt; and the &lt;strong&gt;CSS&lt;/strong&gt; assets.&lt;/p&gt;

&lt;p&gt;In our functional component, we created a variable called &lt;strong&gt;onDayChangeInput&lt;/strong&gt;. Inside this variable is an anonymous function that logs the date valued to the console as well as showing an alert box.&lt;/p&gt;

&lt;p&gt;Then finally, in our return, we include the props in our &amp;lt;&lt;strong&gt;DayPickerInput&lt;/strong&gt; /&amp;gt; component.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  Result
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tQovgzyk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tQovgzyk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-8.gif" alt="Gif showing the result of the above code"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-materialuipickers" class="anchor"&gt;
  &lt;/a&gt;
  2). @material-ui/pickers
&lt;/h2&gt;

&lt;p&gt;This date-picker is an accessible, customizable, delightful date &amp;amp; time pickers for React. It is one of the most high-quality date-picker out there.&lt;/p&gt;

&lt;p&gt;It is based on Material-UI, the world’s most popular React component library.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#brief-overview" class="anchor"&gt;
  &lt;/a&gt;
  Brief Overview:
&lt;/h3&gt;
&lt;h6&gt;
  &lt;a href="#version%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Version  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;3.2.10&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#license%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;License  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;MIT&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#estimatedweekly-downloads%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Estimated-Weekly -Downloads &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;608,421&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#unpackedsize" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Unpacked-size&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;1.49 MB&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#link-to-repository" class="anchor"&gt;
  &lt;/a&gt;
  Link To Repository
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://github.com/mui-org/material-ui-pickers"&gt;material-ui pickers&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#code-demo-example" class="anchor"&gt;
  &lt;/a&gt;
  Code Demo / Example
&lt;/h3&gt;

&lt;p&gt;In this short tutorial, I’ll be showing us how we can install, display and get the values of the date that is selected in the DatePicker.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#step-1" class="anchor"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h4&gt;

&lt;p&gt;We will need to install React, this can be done trough Create-React-App. I wrote an article on how to install it &lt;a href="https://thecodeangle.com/angular-vs-react-vs-vue-getting-started/#reactinstallation"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once that is done, we will need to navigate into the path of our folder in our terminal and run the npm command to install our Date-Picker package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i @material-ui/pickers
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-2" class="anchor"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;app.js&lt;/em&gt;
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;DateFnsUtils&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@date-io/date-fns&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// choose your lib&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;DatePicker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;TimePicker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;DateTimePicker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;MuiPickersUtilsProvider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@material-ui/pickers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MaterialUiPickers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;selectedDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleDateChange&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dateChangeValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;handleDateChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dateValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dateValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dateValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Material&lt;/span&gt; &lt;span class="nx"&gt;UI&lt;/span&gt; &lt;span class="nx"&gt;Pickers&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MuiPickersUtilsProvider&lt;/span&gt; &lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;DateFnsUtils&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DatePicker&lt;/span&gt;
          &lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;static&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;selectedDate&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dateChangeValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TimePicker&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;selectedDate&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dateChangeValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DateTimePicker&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;selectedDate&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dateChangeValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/MuiPickersUtilsProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MaterialUiPickers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above shows how we import the necessary dependencies to run the project.&lt;/p&gt;

&lt;p&gt;Then in our functional component, we created a &lt;strong&gt;useState&lt;/strong&gt; hook that has a variable and a function called &lt;strong&gt;selectedDate&lt;/strong&gt; and &lt;strong&gt;handleDateChange&lt;/strong&gt; respectively.&lt;/p&gt;

&lt;p&gt;Next, we created a variable called &lt;strong&gt;dateChangeValue&lt;/strong&gt; that holds an anonymous function. Inside this function we do three things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  We call the &lt;strong&gt;handleDateChange&lt;/strong&gt; function from our &lt;strong&gt;useSate&lt;/strong&gt;, this helps us update the change event on the date-picker, shown on the page.&lt;/li&gt;
&lt;li&gt;  Next up we log and alert the value of the date that is clicked on the date-picker.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally. in our return, we have a &amp;lt;&lt;strong&gt;DatePicker&lt;/strong&gt; /&amp;gt;,&amp;lt;&lt;strong&gt;TimePicker&lt;/strong&gt; /&amp;gt; and a &amp;lt;&lt;strong&gt;DateTimePicker&lt;/strong&gt; /&amp;gt;. Each of these components takes in props like &lt;strong&gt;value&lt;/strong&gt; and &lt;strong&gt;onChange&lt;/strong&gt; that have the appropriate variables assigned to them.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  Result
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l-Io8uO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l-Io8uO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-9.gif" alt="Gif showing the result of the code above"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#possible-errors" class="anchor"&gt;
  &lt;/a&gt;
  Possible Errors
&lt;/h4&gt;

&lt;p&gt;There is a possibility you run into this error: &lt;strong&gt;Module not found: Can't resolve '@date-io/date-fns'&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When that happens, you can run the following commands to solve the issue:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm i --save date-fns@next @date-io/date-fns@1.x
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-react-date-picker" class="anchor"&gt;
  &lt;/a&gt;
  1). React Date Picker
&lt;/h2&gt;

&lt;p&gt;This is a simple and reusable Datepicker component made for React. It is one of the most popular packages around the web, with hundreds of thousands of weekly downloads.&lt;/p&gt;

&lt;p&gt;This date picker relies on &lt;a href="https://date-fns.org/v2.0.0-alpha.18/docs/I18n"&gt;date-fns internationalization&lt;/a&gt; to localize its display components. By default, the date picker will use the locale globally set, which is English.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#brief-overview" class="anchor"&gt;
  &lt;/a&gt;
  Brief Overview:
&lt;/h3&gt;

&lt;h6&gt;
  &lt;a href="#version%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Version  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;3.6.0&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#license%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;License  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;MIT&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#estimatedweekly-downloads%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Estimated-Weekly -Downloads &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;835,537&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#unpackedsize" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Unpacked-size&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;509 kB&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#link-to-repository" class="anchor"&gt;
  &lt;/a&gt;
  Link To Repository
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://github.com/Hacker0x01/react-datepicker"&gt;react-datepicker&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-demo-example" class="anchor"&gt;
  &lt;/a&gt;
  Code Demo / Example
&lt;/h3&gt;

&lt;p&gt;In this short tutorial, I’ll be showing us how we can install, display and get the values of the date that is selected in the DatePicker.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-1" class="anchor"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h4&gt;

&lt;p&gt;We will need to install React, this can be done trough Create-React-App. I wrote an article on how to install it &lt;a href="https://thecodeangle.com/angular-vs-react-vs-vue-getting-started/#reactinstallation"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once that is done, we will need to navigate into the path of our folder in our terminal and run the npm command to install our Date-Picker package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react-datepicker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-2" class="anchor"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;app.js&lt;/em&gt;
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;DatePicker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-datepicker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-datepicker/dist/react-datepicker.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ReactDatePicker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;startDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setStartDate&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getDateValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setStartDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="nx"&gt;Picker&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DatePicker&lt;/span&gt;
        &lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;startDate&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getDateValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ReactDatePicker&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above we import all the necessary dependencies. Then in the functional component, we create a &lt;strong&gt;useState&lt;/strong&gt; hook. This hook takes in a variable and a function called &lt;strong&gt;startDate&lt;/strong&gt; and &lt;strong&gt;setStartDate&lt;/strong&gt; respectively.&lt;/p&gt;

&lt;p&gt;Next, we create a variable with an anonymous function called &lt;strong&gt;getDateValue.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this variable, the &lt;strong&gt;setStartDate&lt;/strong&gt; function from the &lt;strong&gt;useState&lt;/strong&gt; is updated with the value of the current date as they change on the page. We also log and alert the date values on the console.&lt;/p&gt;

&lt;p&gt;Finally in our return, we declare our &amp;lt;&lt;strong&gt;DatePicker&lt;/strong&gt; /&amp;gt; component and assign the necessary props to it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  Result
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6oe5cu32--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-10.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6oe5cu32--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-10.gif" alt="Gif showing result of the code above"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So that is it for the top Date pickers in React. Date pickers are very popular and important components in the Frontend Development world. It is really great that we have so many Date Pickers out there, and we can easily implement anyone that seems like the right fit for our project.&lt;/p&gt;

&lt;p&gt;If you have any difficulties in implementing any of the Date Picker discussed above, feel free to drop your issue in the comment section.&lt;/p&gt;

&lt;p&gt;Also if you are looking for an open-source project to contribute to, a lot of the above Date Pickers provide an excellent opportunity for you to do so.&lt;/p&gt;

&lt;p&gt;Also, &lt;a href="https://github.com/desoga10/date-pickers"&gt;here&lt;/a&gt; is the GitHub link to the code examples used in the article.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Subscribe to my&lt;/em&gt; &lt;a href="https://www.youtube.com/channel/UChi_aILZkMMx8_KlVAsbI7g"&gt;&lt;em&gt;Youtube Channel&lt;/em&gt;&lt;/a&gt; &lt;em&gt;for more tutorials on web development content.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Events and Event Emitter in Node.js </title>
      <author>Ditikrushna Giri</author>
      <pubDate>Wed, 10 Mar 2021 11:45:27 +0000</pubDate>
      <link>https://dev.to/ditikrushna/events-and-event-emitter-in-node-js-2ek5</link>
      <guid>https://dev.to/ditikrushna/events-and-event-emitter-in-node-js-2ek5</guid>
      <description>&lt;p&gt;One of the core concepts of a node is the concept of events. In fact, a lot of nodes' core functionality is based on this concept of events.&lt;/p&gt;

&lt;p&gt;Definition: &lt;br&gt;
The event is basically a signal that indicates that something has happened in our applications.&lt;/p&gt;

&lt;p&gt;Example :&lt;br&gt;
In node, we have a class called HTTP that we can use to build a web server so we listen on a given port, and every time we receive a request on that port that HTTP class raises an event. Now our job is to respond to that event which basically involves reading that request and returning the right response. &lt;/p&gt;

&lt;p&gt;Let's see how we can work with the event emitter: &lt;/p&gt;

&lt;p&gt;Step-1: &lt;br&gt;
 let's load the events modules : &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const  EventEmitter  =  require('events');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; In terms of naming the first letter of every word in uppercase this is a convention that indicates that this event emitter is a class, not a function or simple value.&lt;/p&gt;

&lt;p&gt;When we call the &lt;code&gt;require&lt;/code&gt; function we get the event emitter class. Now, we need to create an instance of this class. And that can be done with the following piece of code &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const emitter = new EventEmitter() ;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This emitter has a bunch of methods use this &lt;a href="https://nodejs.org/api/events.html#events_class_eventemitter"&gt;link&lt;/a&gt; for all list of events that offer emitter class. &lt;/p&gt;

&lt;p&gt;Even though we have more than ten methods most of the time we use only two of these methods one is &lt;strong&gt;emit&lt;/strong&gt; that we use to raise an event. If you do not know the meaning of the &lt;strong&gt;emit&lt;/strong&gt;: means making noise or produce something in our case we are going to making noise in our application. We are signaling that an event has happened.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;emitter.emit('')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We pass an argument that is the name of the event let say &lt;strong&gt;messageLogged&lt;/strong&gt; in the future we are going to extend our loger module and every time we log a message we are going to raise an event called &lt;strong&gt;message logged&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Now , if we run the following codes nothing is going to append : &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const EventEmitter = require('events')
const emitter = new EventEmitter();
emitter.emit('messageLogged');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;because we have raised an event here but nowhere in our application we have registered a listener that is interested in that event. &lt;br&gt;
&lt;strong&gt;Listener:&lt;/strong&gt;  is a function that will be called when that event is raised. &lt;/p&gt;

&lt;p&gt;Let's register a listener that will be called when the message log event is raised for that we will use the &lt;strong&gt;on&lt;/strong&gt; method and that takes two arguments first one will be the name of the event in our case &lt;strong&gt;messageLogged&lt;/strong&gt; and the second one is a callback function or the actual listener.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const EventEmitter = require('events')
const emitter = new EventEmitter();
//Register a listener 
emitter.on('messageLogged',function(){
  console.log("Listener is called")
});
emitter.emit('messageLogged');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The order is important here if you register listener after calling the &lt;strong&gt;emit&lt;/strong&gt; method nothing would have happened because when we call the &lt;strong&gt;emit&lt;/strong&gt; method the &lt;strong&gt;emitter&lt;/strong&gt; iterates over all the registered listeners and calls them synchronously. &lt;/p&gt;

&lt;p&gt;This is the basis of raising events and handling them using event emitter class. &lt;/p&gt;

&lt;p&gt;Happy Coding ;) &lt;/p&gt;

</description>
      <category>node</category>
      <category>backend</category>
      <category>eventemitter</category>
      <category>basic</category>
    </item>
    <item>
      <title>Show off your Workspace 👩🏻‍💻💯</title>
      <author>Sarthak Sharma</author>
      <pubDate>Wed, 10 Mar 2021 10:36:20 +0000</pubDate>
      <link>https://dev.to/xenoxdev/show-off-your-workspace-5a95</link>
      <guid>https://dev.to/xenoxdev/show-off-your-workspace-5a95</guid>
      <description>&lt;p&gt;After the &lt;strong&gt;&lt;em&gt;&lt;a href="https://dev.to/xenoxdev/show-off-your-vscode-setup-5no"&gt;"Show off Your VSCode Setup"&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;&lt;a href="https://dev.to/xenoxdev/show-off-your-terminal-setup-3c9e"&gt;"Show off Your terminal Setup"&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;    it's time for Workspaces. This month we are back to our office. Here is a picture of my Workspace these days.&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tco8p4Lo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EwAxoVuUYAEoK28.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--DLARNBwr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1357550397120868352/C0-T9dBU_normal.jpg" alt="𝙎𝙖𝙧𝙩𝙝𝙖𝙠 𝙎𝙝𝙖𝙧𝙢𝙖 🚀 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        𝙎𝙖𝙧𝙩𝙝𝙖𝙠 𝙎𝙝𝙖𝙧𝙢𝙖 🚀
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/sarthology"&gt;@sarthology&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      It’s good to be back in office. ✨🚀💯&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/WorkFromAnywhere"&gt;#WorkFromAnywhere&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/CodeNewbies"&gt;#CodeNewbies&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/DEVCommunity"&gt;#DEVCommunity&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      04:51 AM - 09 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1369148873201963011" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1369148873201963011" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1369148873201963011" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;I'm so excited to see your workspaces. Also, what are the gears that you use?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/TJGuxhJebvx0Plog5e/giphy-downsized-large.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/TJGuxhJebvx0Plog5e/giphy-downsized-large.gif" alt=""&gt;&lt;/a&gt; &lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>discuss</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Make tests a part of your app</title>
      <author>Nikita Sobolev</author>
      <pubDate>Wed, 10 Mar 2021 09:30:05 +0000</pubDate>
      <link>https://dev.to/sobolevn/make-tests-a-part-of-your-app-8nm</link>
      <guid>https://dev.to/sobolevn/make-tests-a-part-of-your-app-8nm</guid>
      <description>&lt;p&gt;&lt;strong&gt;Originally published in my blog&lt;/strong&gt;: &lt;a href="https://sobolevn.me/2021/02/make-tests-a-part-of-your-app"&gt;https://sobolevn.me/2021/02/make-tests-a-part-of-your-app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today I am going to discuss quite a new idea for Python users, an idea of making tests a valuable part of your application.&lt;/p&gt;

&lt;p&gt;Let's jump into it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#current-status" class="anchor"&gt;
  &lt;/a&gt;
  Current status
&lt;/h2&gt;

&lt;p&gt;Right now the status-quo for source code/tests dualism is that you ship source code to your library users and most often do not include your tests in any manner.&lt;/p&gt;

&lt;p&gt;Sometimes people also attach the &lt;code&gt;tests/&lt;/code&gt; folder to a release, so they are just laying around just in case. Most of the time they are useless to the end-user.&lt;/p&gt;

&lt;p&gt;And what is the most important part of it all is that our users are often find themselves in a situation when they have to reimplement some tests for library-specific things.&lt;/p&gt;

&lt;p&gt;Let me give you an example: you have a Django view for authorized users only.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.decorators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;login_required&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;login_required&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HttpRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;HttpRespose&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, in our tests we would have to write at least two tests:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For the successful auth case and our business logic&lt;/li&gt;
&lt;li&gt;For the failed auth case&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Wouldn't it be amazing if we could just skip the second one and rely on some existing test-logic that we can re-use from the library itself?&lt;/p&gt;

&lt;p&gt;Imagine an API like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# tests/test_views/test_my_view.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;myapp.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;my_view&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_authed_successfully&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""Test case for our own logic."""&lt;/span&gt;

&lt;span class="c1"&gt;# Not authed case:
&lt;/span&gt;&lt;span class="n"&gt;my_view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test_not_authed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then - boom - we have our second use-case tested with just a single line of code!&lt;/p&gt;

&lt;p&gt;And it goes further than this. For example, in Django you can stack function &lt;a href="https://docs.djangoproject.com/en/3.1/topics/http/decorators/"&gt;decorators&lt;/a&gt; to do multiple things. Imagine this situation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.decorators.cache&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;never_cache&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.decorators&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;login_required&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.decorators.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;require_http_methods&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;require_http_methods&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;login_required&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;never_cache&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HttpRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;HttpRespose&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, the API might be a little more magical to include a test for all the possible cases:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# tests/test_views/test_my_view.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;myapp.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;my_view&lt;/span&gt;

&lt;span class="n"&gt;my_view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_tests&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And it can potentially execute:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tests for http methods that are not allowed&lt;/li&gt;
&lt;li&gt;Tests for http methods that are allowed&lt;/li&gt;
&lt;li&gt;Test that &lt;code&gt;Cache-Control&lt;/code&gt; header is there and has a correct value&lt;/li&gt;
&lt;li&gt;Test that unauthorized users are not allowed&lt;/li&gt;
&lt;li&gt;And possibly others!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All you have to do is testing your green path with a possibility to customize some particular generated test cases if you have some specifics, like returning a custom http code for unauthorized users.&lt;/p&gt;

&lt;p&gt;The bad part of this chapter is that the discussed API does not exist. And probably won't ever exist in Django.&lt;/p&gt;

&lt;p&gt;But, there are other less-known projects (but ones that I help to maintain) that already have these features. Let's see what you can do with them!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deal" class="anchor"&gt;
  &lt;/a&gt;
  deal
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/life4/deal"&gt;&lt;code&gt;deal&lt;/code&gt;&lt;/a&gt; is a library for &lt;a href="https://en.wikipedia.org/wiki/Design_by_contract"&gt;Design-by-Contract&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In other words, it allows decorating your functions and classes with some extra checks that are not representable by types (at least in Python-land).&lt;/p&gt;

&lt;p&gt;Let's say you have a function to divide two positive integers (which are just &lt;code&gt;int&lt;/code&gt; in Python):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;deal&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ZeroDivisionError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# this function can raise if `b=0`, it is ok
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It has all the contract information in the function's definition:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;@deal.pre(lambda a, b: a &amp;gt;= 0 and b &amp;gt;= 0)&lt;/code&gt; checks that passed arguments are positive&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;@deal.raises(ZeroDivisionError)&lt;/code&gt; allows this function to explicitly raise &lt;code&gt;ZeroDivisionError&lt;/code&gt; without breaking the contract, by default functions cannot raise any exceptions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: type annotations like in &lt;code&gt;(a: int, b: int) -&amp;gt; float&lt;/code&gt; are not enforced, you should use &lt;code&gt;mypy&lt;/code&gt; to catch typing errors.&lt;/p&gt;

&lt;p&gt;Usage (remember, it is still just a function!):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# ok
&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# ok, runtime ZeroDivisionError
&lt;/span&gt;
&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# not ok
# deal.PreContractError: expected a &amp;gt;= 0 and b &amp;gt;= 0 (where a=-1, b=1)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok, the simple use-case is clear. Now, let's put a bug in this function on purpose:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;deal&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ZeroDivisionError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# this function can raise if `b=0`, it is ok
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# Custom, in real life this would be a bug in our logic:
&lt;/span&gt;        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Oh no! Bug happened!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Luckily, &lt;code&gt;deal&lt;/code&gt; follows the core idea of this article and ships tests with itself. To run them all we need to do is write just a single test case:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;deal&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;my_lib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;div&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cases&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# That's all we have to do to test deal-based functions!
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;case&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;case&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's what the output would be like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;» pytest test_deal.py
============================= test session starts ==============================
collected 1 item

test_deal.py F                                                            [100%]

=================================== FAILURES ===================================
___________________________________ test_div ___________________________________

a = 51, b = 0

    @deal.raises(ZeroDivisionError)
    @deal.pre(lambda a, b: a &amp;gt;= 0 and b &amp;gt;= 0)
    def div(a: int, b: int) -&amp;gt; float:
        if a &amp;gt; 50:
&amp;gt;           raise Exception('Oh no! Bug happened!')
E           Exception: Oh no! Bug happened!

test_deal.py:8: Exception
============================== 1 failed in 0.35s ===============================
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see our tests did find the bug! But how?&lt;/p&gt;

&lt;p&gt;There are a lot of questions to ask:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Where did the data for the test come from?
It comes from another awesome library called &lt;a href="https://github.com/HypothesisWorks/hypothesis"&gt;&lt;code&gt;hypothesis&lt;/code&gt;&lt;/a&gt;. It smartly generates lots of different test data according to some specific rules we define.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our case, we have two rules. First rule generate two &lt;code&gt;int&lt;/code&gt; arguments as defined in &lt;code&gt;def div(a: int, b: int)&lt;/code&gt;. The second rule is that these integers must be &lt;code&gt;&amp;gt;= 0&lt;/code&gt; as defined in &lt;code&gt;@deal.pre(lambda a, b: a &amp;gt;= 0 and b &amp;gt;= 0)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can control how many examples would be generated and do other small tweaks.&lt;br&gt;
  More about it is in the &lt;a href="https://deal.readthedocs.io/basic/tests.html"&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Why &lt;code&gt;ZeroDivisionError&lt;/code&gt; didn't break the test while raw &lt;code&gt;Exception&lt;/code&gt; did?&lt;br&gt;
Because that's how contracts work: you clearly define all possible cases. If something strange happens - the contract is violated. In our example, &lt;code&gt;ZeroDivisionError&lt;/code&gt; is a part of the contract via &lt;code&gt;deal.raises&lt;/code&gt; decorator. So, we know that it can (and will) happen. That's why we don't treat it as a test failure, while raw &lt;code&gt;Exception&lt;/code&gt; is not a part of our contract and we treat it as a failure.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Will it find all bugs in my code?&lt;br&gt;
That's the most interesting question. And the answer is &lt;strong&gt;no&lt;/strong&gt;. Sad, but true.&lt;br&gt;
There are endless use-cases, logic, combitations, and bugs in them. And I know for sure that it is impossible to catch all bugs your app has.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But, in reality, it will catch &lt;strong&gt;a lot&lt;/strong&gt; of bugs. In my opinion, it is still worth it.&lt;/p&gt;

&lt;p&gt;We can even go one step further and represent our contracts as &lt;a href="https://github.com/Z3Prover/z3"&gt;Theorems to be proved&lt;/a&gt;.&lt;br&gt;
For example, &lt;code&gt;deal&lt;/code&gt; has an ongoing research companion project - &lt;a href="https://github.com/orsinium-labs/deal-solver"&gt;&lt;code&gt;deal-solver&lt;/code&gt;&lt;/a&gt; - that can help with that. But, this is a subject for another article of its own, so let's move on for now.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#drypythonreturns" class="anchor"&gt;
  &lt;/a&gt;
  dry-python/returns
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/dry-python/returns"&gt;&lt;code&gt;dry-python/returns&lt;/code&gt;&lt;/a&gt; is a library with primitives that make typed functional programming in Python easier.&lt;/p&gt;

&lt;p&gt;Inside we have a bunch of interfaces that our users can extend for their own primitives/objects. In the recent article about &lt;a href="https://sobolevn.me/2020/10/higher-kinded-types-in-python"&gt;Higher Kinded Types&lt;/a&gt; I have shown how this can be done in a type-safe way.&lt;/p&gt;

&lt;p&gt;Now, I am going to show that it is not enough on its own. And most likely you will need some extra laws on how your objects should behave.&lt;/p&gt;

&lt;p&gt;We call this feature "Monad laws as values".&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#identity-laws" class="anchor"&gt;
  &lt;/a&gt;
  Identity laws
&lt;/h3&gt;

&lt;p&gt;Let's start from the easiest Higher Kinded Interface we have: &lt;a href="https://github.com/dry-python/returns/blob/master/returns/interfaces/equable.py"&gt;&lt;code&gt;Equable&lt;/code&gt;&lt;/a&gt;. It is an interface that allows type-safe equality checks. Because you can use &lt;code&gt;==&lt;/code&gt; for everything in Python. But, our &lt;code&gt;.equals()&lt;/code&gt; method will allow us to only check the object of the same type which has real values inside.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;returns.io&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;IO&lt;/span&gt;

&lt;span class="n"&gt;IO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;# type-checks, but pointless, always false
&lt;/span&gt;
&lt;span class="n"&gt;IO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# does not type-check at all
# error: Argument 1 has incompatible type "int";
# expected "KindN[IO[Any], Any, Any, Any]"
&lt;/span&gt;
&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IO&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;IO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# ok, might be true or false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's how it looks like at the moment:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;_EqualType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'_EqualType'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Equable'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Equable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;abstractmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_EqualType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_EqualType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;"""Type-safe equality check for values of the same type."""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's say we want to create a bad implementation for this interface (because of science):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;returns.interfaces.equable&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Equable&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Equable&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inner_value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_inner_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inner_value&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Example'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;  &lt;span class="c1"&gt;# it breaks how `.equals` is supposed to be used!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is clearly wrong because it always returns &lt;code&gt;False&lt;/code&gt; without actually checking the &lt;code&gt;inner_value&lt;/code&gt; of an object. But, it still satisfies the interface definition: it will type-check. That's how we can tell that just the interface is not enough. We need to test the implementation as well.&lt;/p&gt;

&lt;p&gt;But, equality has known laws from math to catch cases like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reflexive law: a value must be equal to itself&lt;/li&gt;
&lt;li&gt;Symmetry law: &lt;code&gt;a.equals(b) == b.equals(a)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Transitivity law: if &lt;code&gt;a&lt;/code&gt; equals &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; equals &lt;code&gt;c&lt;/code&gt;, then &lt;code&gt;a&lt;/code&gt; equals &lt;code&gt;c&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can create a test that will ensure that our implementation holds these laws. Or we might forget about it. Or make a mistake in our test logic.&lt;/p&gt;

&lt;p&gt;That's why it is important for library authors to think about their users and ship tests with their apps.&lt;/p&gt;

&lt;p&gt;For example, we encode laws into the interface definition itself:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;abc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;abstractmethod&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ClassVar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing_extensions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;final&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;returns.primitives.laws&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;Law&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Law1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Law2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Law3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Lawful&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;LawSpecDef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;law_definition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;_EqualType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'_EqualType'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Equable'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;final&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_LawSpec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LawSpecDef&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# LOOKATME: our laws def!
&lt;/span&gt;    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;law_definition&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reflexive_law&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_EqualType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;"""Value should be equal to itself."""&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;law_definition&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;symmetry_law&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_EqualType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_EqualType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;"""If ``A == B`` then ``B == A``."""&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;law_definition&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;transitivity_law&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_EqualType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_EqualType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;third&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_EqualType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;"""If ``A == B`` and ``B == C`` then ``A == C``."""&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;third&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;third&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Equable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Lawful&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Equable'&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="n"&gt;_laws&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ClassVar&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Law&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;Law1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_LawSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reflexive_law&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;Law2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_LawSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;symmetry_law&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;Law3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_LawSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transitivity_law&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;abstractmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_EqualType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_EqualType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;"""Type-safe equality check for values of the same type."""&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's what I call "making tests a part of your app"!&lt;/p&gt;

&lt;p&gt;Now, when we have laws in place, the only thing left to do is to enforce them. But, we need some data to do that. Luckily, we have &lt;code&gt;hypothesis&lt;/code&gt; that can generate lots of random data for us.&lt;/p&gt;

&lt;p&gt;So, here's what we are going to do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We will pass a class definition that has &lt;code&gt;_laws&lt;/code&gt; property defined&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;hypothesis&lt;/code&gt; will get all its laws&lt;/li&gt;
&lt;li&gt;For each law we will generate a unique test case&lt;/li&gt;
&lt;li&gt;For each test case we will generate lots of input data to be sure that the law holds for any possible input&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://github.com/dry-python/returns/blob/master/returns/contrib/hypothesis/laws.py"&gt;Source code&lt;/a&gt; for ones who are interested in the implementation details.&lt;/p&gt;

&lt;p&gt;And we should provide a simple API for an end-user to do all these in one function call! That's what we came up with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# test_example.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;returns.contrib.hypothesis.laws&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;check_all_laws&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;your_app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Example&lt;/span&gt;

&lt;span class="n"&gt;check_all_laws&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;use_init&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here's the result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;» pytest test_example.py
============================ test session starts ===============================
collected 3 items

test_example.py .F.                                                   [100%]

=================================== FAILURES ===================================
____________________ test_Example_equable_reflexive_law _____________________
first = &amp;lt;ex.Example object at 0x104d61b90&amp;gt;

    @law_definition
    def reflexive_law(
        first: _EqualType,
    ) -&amp;gt; None:
        """Value should be equal to itself."""
&amp;gt;       assert first.equals(first)
E       AssertionError

returns/interfaces/equable.py:32: AssertionError
========================= 1 failed, 2 passed in 0.22s ==========================
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see &lt;code&gt;test_Example_equable_reflexive_law&lt;/code&gt; fails, because &lt;code&gt;equals&lt;/code&gt; always returns &lt;code&gt;False&lt;/code&gt; in our &lt;code&gt;Example&lt;/code&gt; class. And &lt;code&gt;reflexive_law&lt;/code&gt; which states &lt;code&gt;(a == a) is True&lt;/code&gt; does not hold.&lt;/p&gt;

&lt;p&gt;We can refactor &lt;code&gt;Example&lt;/code&gt; to use the correct logic with actually checking &lt;code&gt;inner_value&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Equable&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inner_value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_inner_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inner_value&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Example'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_inner_value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_inner_value&lt;/span&gt;  &lt;span class="c1"&gt;# no we are talking!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And run our tests once again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;» pytest test_example.py
============================= test session starts ==============================
collected 3 items

test_example.py ...                                                   [100%]

============================== 3 passed in 1.57s ===============================
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, we didn't actually write a single test for &lt;code&gt;Example&lt;/code&gt;. Instead, we wrote laws once and for all future implementations! That's how caring about users looks like.&lt;/p&gt;

&lt;p&gt;And again, awesome &lt;code&gt;hypothesis&lt;/code&gt; helps us by generating random data to feed it into our tests (that's why the package is called &lt;code&gt;returns.contrib.hypothesis.laws&lt;/code&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-functional-laws" class="anchor"&gt;
  &lt;/a&gt;
  Other functional laws
&lt;/h3&gt;

&lt;p&gt;Of course, &lt;code&gt;Equable&lt;/code&gt; is not the only interface we have in &lt;code&gt;dry-python/returns&lt;/code&gt;, we have &lt;a href="https://github.com/dry-python/returns/tree/master/returns/interfaces"&gt;lots of them&lt;/a&gt;, covering most of the traditional functional instances, read our &lt;a href="https://returns.readthedocs.io/en/latest/pages/interfaces.html"&gt;docs&lt;/a&gt; if you are interested.&lt;/p&gt;

&lt;p&gt;These interfaces will help people if they are wondering what &lt;a href="https://github.com/dry-python/returns/blob/master/returns/interfaces/container.py"&gt;&lt;code&gt;Monad&lt;/code&gt;&lt;/a&gt; actually is and what laws it has.&lt;/p&gt;

&lt;p&gt;Most of them have laws attached to the definition. This helps our users to be sure that their implementations are correct with as few steps as possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Shipping tests with your app might be a very cool feature in some use-cases.&lt;/p&gt;

&lt;p&gt;And use-cases are really-really different! As I have shown, they can vary from Web frameworks to architecture tools and math-ish libraries.&lt;/p&gt;

&lt;p&gt;I would love to see more of this in the future. I hope that I have shown possible benefits for current and future library authors.&lt;/p&gt;

</description>
      <category>python</category>
      <category>django</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Create Chrome Extension With HTML, CSS, and JavaScript</title>
      <author>Suraj Vishwakarma</author>
      <pubDate>Wed, 10 Mar 2021 06:41:06 +0000</pubDate>
      <link>https://dev.to/surajondev/create-chrome-extension-with-html-css-and-javascript-4ofd</link>
      <guid>https://dev.to/surajondev/create-chrome-extension-with-html-css-and-javascript-4ofd</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Google Chrome is one of the most loved browsers for developers as well as general users. I use Google Chrome across all my devices and it helps me to sync Bookmarks, Browser History, Password Manager, and Much more.&lt;/p&gt;

&lt;p&gt;For Desktop, there are many things you can do apart from browsing on the internet. You can test your webpage and all. Google Chrome becomes more powerful with the use of extensions. &lt;/p&gt;

&lt;p&gt;So today, we are going to look into how you can create your very first Google Chrome extension with the use of HTML, CSS, and JavaScript.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setup" class="anchor"&gt;
  &lt;/a&gt;
  Setup
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#requirement" class="anchor"&gt;
  &lt;/a&gt;
  Requirement
&lt;/h2&gt;

&lt;p&gt;Requirements are few for getting started with Chrome Extension. The list is here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Google Chrome Extensions (For testing purposes)&lt;/li&gt;
&lt;li&gt;Text Editor (I prefer VS Code, you can use others according to you)&lt;/li&gt;
&lt;li&gt;Basic Knowledge about HTML, CSS, and JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#chrome-extension" class="anchor"&gt;
  &lt;/a&gt;
  Chrome Extension
&lt;/h1&gt;

&lt;p&gt;We are going to develop a calculator app for our very first Chrome extension. If you know how to make a calculator for a web app, the tutorial will be easy for you. Now, You only need to know "How to setup the extension?"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#manifestjson" class="anchor"&gt;
  &lt;/a&gt;
  manifest.json
&lt;/h2&gt;

&lt;p&gt;Every app needs a manifest—a JSON-formatted file named manifest.json that describes the app. This file will helps your app to manage permission, storage, manifest version, landing pages, name, icons, and many more.&lt;/p&gt;

&lt;p&gt;Here is the code for manifest&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;manifest_version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Calculator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Calculate Anywhere&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;icons&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;128&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;img/icons128.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;48&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;img/icons48.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;16&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;img/icons16.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;browser_action&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default_icon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;img/icons16.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default_popup&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;popup.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content_security_policy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;script-src 'self' 'unsafe-eval'; object-src 'self'&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#explanation" class="anchor"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;manifest_version: You are defining the version of manifest that you are going to use. We are currently using 2, but recently Google had launched version 3.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;name: It is the name of your app. Currently, we are calling it "Calculator."&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;description: As the name tells, you will describe your extension here. Few sentences for describing the extension is enough. For Now, we are giving it "Calculate Anywhere."&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;icons: You need to provide src for the icon of your extension. You need to give the source for different sizes of the icon. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;browser_actions : &lt;br&gt;
We use browser_action to put the extension to the toolbar, which is right to the address bar. The browser action has an icon, a tooltip, a badge, and a popup.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;default_icon: Source for the image of the icon.&lt;/li&gt;
&lt;li&gt;default_popup: It is the source to the landing page of the extension. It has to be in HTML format. You can name it according to you. For me, it is "popup.html."&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;content_security_policy: It is declared to allow some function that chrome extension considered miscellaneous. I have used eval() function to calculate the equation that I highly don't recommend using for commercial purposes. You can use a separate function for calculation purposes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We need only this much for our calculator extension. Let's move to the next destination that is popup.html&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#popuphtml-popupjs-and-stylecss" class="anchor"&gt;
  &lt;/a&gt;
  popup.html, popup.js, and style.css
&lt;/h2&gt;

&lt;p&gt;Now we are in the comfort zone. We can write HTML as you write. I am not going to stretch the HTML, CSS, and JavaScript parts.&lt;/p&gt;

&lt;p&gt;You can see the entire code in my Github repo here.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/surajondev"&gt;
        surajondev
      &lt;/a&gt; / &lt;a href="https://github.com/surajondev/extension-calculator"&gt;
        extension-calculator
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Google Chrome Extension for doing the calculation
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Google Chrome Extension&lt;/h1&gt;
&lt;h1&gt;
Introduction&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4f78eaf952e344816d2e7736a5f6812297bac9c8f4183eb3f6aa5d9df2be070c/68747470733a2f2f702e6b696e64706e672e636f6d2f706963632f732f37372d3737323131305f63616c63756c61746f722d69636f6e2d706e672d63616c63756c61746f722d69636f6e2d7472616e73706172656e742d706e672e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/4f78eaf952e344816d2e7736a5f6812297bac9c8f4183eb3f6aa5d9df2be070c/68747470733a2f2f702e6b696e64706e672e636f6d2f706963632f732f37372d3737323131305f63616c63756c61746f722d69636f6e2d706e672d63616c63756c61746f722d69636f6e2d7472616e73706172656e742d706e672e706e67"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Calculator&lt;/h3&gt;
&lt;h1&gt;
Describtion&lt;/h1&gt;
&lt;p&gt;The project is for the tutorial purpose regarding &lt;strong&gt;How to create google chrome extension&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
Read the article&lt;/h3&gt;
&lt;p&gt;Blog : &lt;a href="https://daily.dev/blog/create-chrome-extension-with-html-css-and-javascript" rel="nofollow"&gt;Create a Chrome Extension with HTML, CSS, and JavaScript&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
ScreenShot&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/3baf743e78f80c7fb36b5c24039193c07ae77962784c3f53850a10a827665d4d/68747470733a2f2f6173736574732e776562736974652d66696c65732e636f6d2f3565306631313434393330613862633861616365353236632f3630326664633961386563303161383437396436313063645f63616c63756c61746f722e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/3baf743e78f80c7fb36b5c24039193c07ae77962784c3f53850a10a827665d4d/68747470733a2f2f6173736574732e776562736974652d66696c65732e636f6d2f3565306631313434393330613862633861616365353236632f3630326664633961386563303161383437396436313063645f63616c63756c61746f722e706e67"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
Installation&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Clone this project &lt;code&gt;git clone &lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Go to extenion manager in chrome&lt;/li&gt;
&lt;li&gt;Load the extension into the chrome&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
Licence&lt;/h1&gt;
&lt;p&gt;MIT LICENCE
Read &lt;code&gt;Licence&lt;/code&gt; document for more details&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/surajondev/extension-calculator"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#codepen-code-for-popuphtml-stylecss-and-popupjs" class="anchor"&gt;
  &lt;/a&gt;
  Codepen Code for popup.html, style.css and popup.js
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/surajsrv11/embed/xxEmXEW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-extension-in-the-chrome" class="anchor"&gt;
  &lt;/a&gt;
  Installing Extension in the Chrome
&lt;/h2&gt;

&lt;p&gt;For checking purposes, we are initially going to install the app locally into our system.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, visit chrome://extensions to open the extension manager&lt;/li&gt;
&lt;li&gt;Click the Load unpacked extension button. A file dialog appears.&lt;/li&gt;
&lt;li&gt;In the file dialog, choose the myapp(Directory containing manifest.json) directory. Unless you get an error dialog, you've now installed the app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nw1cp-pl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sr1i5yxihsgp2px5x3o7.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nw1cp-pl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sr1i5yxihsgp2px5x3o7.PNG" alt="Calculator Extension"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After successful installing, the extension will look like this.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#last-note" class="anchor"&gt;
  &lt;/a&gt;
  Last Note
&lt;/h1&gt;

&lt;p&gt;After successful installing, the extension will look like this.&lt;/p&gt;

&lt;p&gt;If you get an error, check your code and try to solve it. If You are encountering any trouble, you can contact me here.&lt;/p&gt;

&lt;p&gt;I hope you find this post helpful and Thank you for reading the blog post.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Keep your code well organized. How I structure my web project</title>
      <author>pazvanti</author>
      <pubDate>Wed, 10 Mar 2021 05:37:33 +0000</pubDate>
      <link>https://dev.to/pazvanti/keep-your-code-well-organized-how-i-structure-my-web-project-2773</link>
      <guid>https://dev.to/pazvanti/keep-your-code-well-organized-how-i-structure-my-web-project-2773</guid>
      <description>&lt;p&gt;&lt;em&gt;Article originally posted on my personal website at &lt;a href="https://petrepopescu.tech/2021/02/keep-your-code-well-organized-how-i-structure-my-web-project/"&gt;How to organize your web project&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It is easy to get carried away and just write code. The code may even work as intended but trust me that, in 6 months time, you won’t know anymore what it does and where to find a specific functionality. Unless you have a clean and clear structure. I am not necessarily talking about the classes itself, but the way to properly organize functionalities in packages so that, when a change is needed 6 or 12 month later, you know exactly where to look.&lt;/p&gt;

&lt;p&gt;I will be using a web server application as an example and will explain pitfalls and how to avoid them. Some may seem obvious, nevertheless I feel obligated to point them out. Many times you will see wrongly placed functionality, especially in legacy code. Furthermore, it is not always a clear and clean line between two places and both may seem right, so consistency is key in these situations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#main-parts-of-a-web-application" class="anchor"&gt;
  &lt;/a&gt;
  Main parts of a web application
&lt;/h3&gt;

&lt;p&gt;Web applications usually have a few key main components that interact with each other. These are the controllers that handle the requests, the services that processes the data and the data access layer responsible for persisting and retrieving stored data. Let’s take a look over each component.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#controller" class="anchor"&gt;
  &lt;/a&gt;
  Controller
&lt;/h3&gt;

&lt;p&gt;This is the main entry point of the application and it is usually mapped to one or more endpoints that are accessible via the web browser. The controller receives the HTTP request and it will return an HTTP response back to the client. It does not matter if you are using Spring, Play or any other framework, the controller should be the one to handle the request and only the request.&lt;/p&gt;

&lt;p&gt;One frequently encountered mistake is doing business logic inside the controller. I strongly believe that this not the right way of doing thigs and that only validating the request should be done here, the actual business logic being the services responsibility. Furthermore, the request should not be submitted to the services unless it is absolutely necessary. Instead use a mapper to transform the request into one or more data objects and those should be passed down to the service.&lt;/p&gt;

&lt;p&gt;The main responsibilities of the controller should only be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Receiving the request&lt;/li&gt;
&lt;li&gt;Validating it&lt;/li&gt;
&lt;li&gt;Mapping the request to an internal data object (here it should delegate the request to a mapper)&lt;/li&gt;
&lt;li&gt;Calling the service&lt;/li&gt;
&lt;li&gt;Mapping the result object to the HTTP response&lt;/li&gt;
&lt;li&gt;Returning the response&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#service" class="anchor"&gt;
  &lt;/a&gt;
  Service
&lt;/h3&gt;

&lt;p&gt;The service is the component that is responsible for doing the business logic. Any calculations, business validations, and business operations should be handled here. A service can call and delegate part of the functionality to other services, with the exception of data persistence, something that should be done buy the DAO.&lt;/p&gt;

&lt;p&gt;Here it can be easy to have God classes which do many (unrelated) things. It is normal to have many services that interact with one another. Try to split up your classes based on what they do and not over extend a service’s responsibility. Do you manage users? Have a ‘Users’ service. Does your site allow posting of articles, have an ‘Articles’ service. What about comments? You guessed it, a ‘Comments’ service. Yes, you need a logged in user to post an articles, so the ‘Article’ and ‘Users’ services can interact with one another, but don’t do the ‘submitNewArticle(User user, String articleText)’ method inside the Users service just because you use a User object.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data" class="anchor"&gt;
  &lt;/a&gt;
  Data
&lt;/h3&gt;

&lt;p&gt;This is the part of the application that handles the persisted and transmitted data. This is where we should keep Domain Objects (DO), Transfer Objects (DTO), Access Layer (DAO), and, at least in my case, filters needed. Keep in mind that these should be properly arranged into packages. Don’t keep classes that have different responsibilities in the same packages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#others" class="anchor"&gt;
  &lt;/a&gt;
  Others
&lt;/h3&gt;

&lt;p&gt;This is the basic structure, however each application has its own needs. That is why other top-level packages should be created when needed. Furthermore, the main three parts presented here can be further divided into other parts in order to make things clear and to make the code easier to maintain.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Article originally posted on my personal website at &lt;a href="https://petrepopescu.tech/2021/02/keep-your-code-well-organized-how-i-structure-my-web-project/"&gt;How to organize your web project&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>webdev</category>
      <category>webservice</category>
      <category>cleancode</category>
    </item>
    <item>
      <title>Full Stack Reddit Clone - Spring Boot, React, Electron App - Part 8</title>
      <author>Aaron C. Beasley</author>
      <pubDate>Wed, 10 Mar 2021 04:38:38 +0000</pubDate>
      <link>https://dev.to/maxicb/full-stack-reddit-clone-spring-boot-react-electron-app-part-8-oa7</link>
      <guid>https://dev.to/maxicb/full-stack-reddit-clone-spring-boot-react-electron-app-part-8-oa7</guid>
      <description>&lt;h1&gt;
  &lt;a href="#full-stack-reddit-clone-spring-boot-react-electron-app-part-8" class="anchor"&gt;
  &lt;/a&gt;
  Full Stack Reddit Clone - Spring Boot, React, Electron App - Part 8
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Welcome to Part 8 of creating a Reddit clone using Spring Boot, and React.&lt;/p&gt;

&lt;p&gt;What are we building in this part?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vote DTO&lt;/li&gt;
&lt;li&gt;Vote Exception&lt;/li&gt;
&lt;li&gt;Vote Service&lt;/li&gt;
&lt;li&gt;Vote Controller&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In &lt;a href="https://dev.to/maxicb/full-stack-reddit-clone-spring-boot-react-electron-app-part-3-4a4n"&gt;Part 7&lt;/a&gt; we added the CREATE &amp;amp;&amp;amp; READ endpoints for creating and reading comments!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#important-links" class="anchor"&gt;
  &lt;/a&gt;
  Important Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Backend Source: &lt;a href="https://github.com/MaxiCB/vox-nobis/tree/master/backend"&gt;https://github.com/MaxiCB/vox-nobis/tree/master/backend&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Frontend Source: &lt;a href="https://github.com/MaxiCB/vox-nobis/tree/master/client"&gt;https://github.com/MaxiCB/vox-nobis/tree/master/client&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Live URL: In Progress&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#part-1-vote-dto" class="anchor"&gt;
  &lt;/a&gt;
  Part 1: Vote DTO 📨
&lt;/h2&gt;

&lt;p&gt;Let's cover our the DTO's we will need for receiving and sending Vote information. Inside &lt;strong&gt;com.your-name.backend.dto&lt;/strong&gt; we will create the following class.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VoteDTO: Handles creation of the data that will be sent from the client to the API.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
import com.maxicb.backend.model.VoteType;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class VoteDTO {
    private VoteType voteType;
    private Long id;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#part-2-vote-exception" class="anchor"&gt;
  &lt;/a&gt;
  Part 2: Vote Exception 🚫
&lt;/h2&gt;

&lt;p&gt;Let's cover our custom exceptions we will need. Inside &lt;strong&gt;com.your-name.backend.exception&lt;/strong&gt; we will create the following class.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VoteException: Handles exceptions related to looking for a invalid user.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.maxicb.backend.exception;

public class VoteException extends RuntimeException {
        public VoteException(String message) {
            super(message);
        }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#part-3-vote-service" class="anchor"&gt;
  &lt;/a&gt;
  Part 3: Vote Service 🌎
&lt;/h2&gt;

&lt;p&gt;Let's cover the vote service our application will have. Inside &lt;strong&gt;com.your-name.backend.services&lt;/strong&gt; add the following class.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VoteService: Hold the logic for mapping data to and from DTO's, and adding votes to a post.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.maxicb.backend.service;

import com.maxicb.backend.dto.VoteDTO;
import com.maxicb.backend.exception.PostNotFoundException;
import com.maxicb.backend.model.Post;
import com.maxicb.backend.model.Vote;
import com.maxicb.backend.repository.PostRepository;
import com.maxicb.backend.repository.VoteRepository;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Optional;

import static com.maxicb.backend.model.VoteType.UPVOTE;

@Service
@AllArgsConstructor
public class VoteService {
    private final VoteRepository voteRepository;
    private final PostRepository postRepository;
    private final AuthService authService;

    private Vote maptoVote(VoteDTO voteDTO, Post post) {
        return Vote.builder()
                .voteType(voteDTO.getVoteType())
                .post(post)
                .user(authService.getCurrentUser())
                .build();
    }

    @Transactional
    public void vote(VoteDTO voteDTO) {
        Post post = postRepository.findById(voteDTO.getId())
                .orElseThrow(() -&amp;gt; new PostNotFoundException("Post not found with id:" + voteDTO.getId()));
        Optional&amp;lt;Vote&amp;gt; votePostAndUser = voteRepository.findTopByPostAndUserOrderByVoteIdDesc(post, authService.getCurrentUser());
        if(votePostAndUser.isPresent() &amp;amp;&amp;amp; votePostAndUser.get().getVoteType().equals(voteDTO.getVoteType())) {
            throw new PostNotFoundException("You've already " + voteDTO.getVoteType() + "'d this post");
        }
        if(UPVOTE.equals(voteDTO.getVoteType())) {
            post.setVoteCount(post.getVoteCount() + 1);
        } else {
            post.setVoteCount(post.getVoteCount() - 1);
        }
        voteRepository.save(maptoVote(voteDTO, post));
        postRepository.save(post);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#part-4-vote-controller" class="anchor"&gt;
  &lt;/a&gt;
  Part 4: Vote Controller 🌐
&lt;/h2&gt;

&lt;p&gt;Let's cover the vote controller our application will have. Inside &lt;strong&gt;com.your-name.backend.controller&lt;/strong&gt; add the following class.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VoteController: Hold the endpoints adding votes to a specific post.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.maxicb.backend.controller;

import com.maxicb.backend.dto.VoteDTO;
import com.maxicb.backend.service.VoteService;
import lombok.AllArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/vote")
@AllArgsConstructor
public class VoteController {

    private final VoteService voteService;

    @PostMapping
    public ResponseEntity&amp;lt;Void&amp;gt; vote(@RequestBody VoteDTO voteDTO) {
        voteService.vote(voteDTO);
        return new ResponseEntity&amp;lt;&amp;gt;(HttpStatus.OK);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion 🔍
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;To ensure everything is configured correctly you can run the application, and ensure there are no error in the console. Towards the bottom of the console you should see output similar to below&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZgbYnXkN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mcnzflm8vjwnvjcx40sh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZgbYnXkN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mcnzflm8vjwnvjcx40sh.PNG" alt="Alt Text" title="Successful Run"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If there are no error's in the console you can test the voting logic by sending a post request to &lt;strong&gt;&lt;a href="http://localhost:8080/api/vote"&gt;http://localhost:8080/api/vote&lt;/a&gt;&lt;/strong&gt; with the following data. You will still have to follow the same steps covered in the previous parts to login to an account to make post's, as well as create a subreddit, and valid post to add a comment to.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "voteType": "UPVOTE",
    "id": &amp;lt;post-id&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;You can now make a GET reguest to &lt;strong&gt;&lt;a href="http://localhost:8080/api/posts/"&gt;http://localhost:8080/api/posts/&lt;/a&gt;&lt;/strong&gt; to see the voteCount change on the post you just upvoted.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "postId": 9,
    "postTitle": "Testing Post",
    "url": "URL",
    "description": "DESCRIPTION",
    "userName": "USERNAME",
    "subredditName": "/r/NAME",
    "voteCount": 1,
    "commentCount": 1,
    "duration": "4 hours ago",
    "upVote": true,
    "downVote": false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In this article we implemented the logic for voting on post's!.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#next" class="anchor"&gt;
  &lt;/a&gt;
  Next
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#follow-to-get-informed-when-part-nine-is-released-where-we-will-cover-the-post-voting-functionality-if-you-have-any-questions-be-sure-to-leave-a-comment" class="anchor"&gt;
  &lt;/a&gt;
  Follow to get informed when part nine is released, where we will cover the post voting functionality! If you have any questions be sure to leave a comment!
&lt;/h3&gt;

</description>
      <category>react</category>
      <category>java</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>An Intro to Redux</title>
      <author>Zac Haluza</author>
      <pubDate>Wed, 10 Mar 2021 02:30:08 +0000</pubDate>
      <link>https://dev.to/zhaluza/an-intro-to-redux-1heg</link>
      <guid>https://dev.to/zhaluza/an-intro-to-redux-1heg</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally published at &lt;a href="https://haluza.dev/blog/an-introduction-to-redux"&gt;haluza.dev&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you'll get out of this article:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learn why developers use external libraries to manage state in React&lt;/li&gt;
&lt;li&gt;Understand the fundamentals of Redux&lt;/li&gt;
&lt;li&gt;Apply Redux concepts to a simple counter app&lt;/li&gt;
&lt;li&gt;Learn how Redux Toolkit simplifies Redux setup&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;This article is for you if:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You're familiar with the basics of React&lt;/li&gt;
&lt;li&gt;You know how to manage React state with hooks and/or state objects&lt;/li&gt;
&lt;li&gt;You're new to state management libaries like Redux and MobX&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;If you're wondering why this article discusses vanilla Redux and not Redux Toolkit, please read &lt;a href="#why-this-article-uses-vanilla-redux"&gt;my explanation in the afterword&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why-do-we-need-redux"&gt;Why Do We Need Redux?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-does-redux-work"&gt;How Does Redux Work?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#understanding-redux-in-an-app"&gt;Understanding Redux in an App&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#Actions-&amp;amp;-Action-Creators"&gt;Actions &amp;amp; Action Creators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reducers"&gt;Reducers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#store"&gt;Store&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#connecting-the-app-to-the-store"&gt;Connecting the App to the Store&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#next-steps"&gt;Next Steps&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#read-you-might-not-need-redux"&gt;Read "You Might Not Need Redux"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#build-an-app-with-redux"&gt;Build an App With Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#explore-redux-toolkit"&gt;Explore Redux Toolkit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#why-this-article-uses-vanilla-redux"&gt;Afterword: Why This Article Uses Vanilla Redux&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction &lt;span id="introduction"&gt;&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;State management is one of the core concepts of React. It's also one of the most complicated. This isn't necessarily because managing state in React is tricky; rather, there are so many different ways to do it!&lt;/p&gt;

&lt;p&gt;In this article I'm going to assume that you're comfortable managing state within a component, but are relatively new to Redux.&lt;/p&gt;

&lt;p&gt;At the simplest level, Redux lets you do two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Manage state from a single location in your app&lt;/li&gt;
&lt;li&gt;Access this state anywhere in your app, without passing it from component to component&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To understand why this is so important, let's take a moment to imagine we've been hired to create a new hit app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-need-redux" class="anchor"&gt;
  &lt;/a&gt;
  Why Do We Need Redux? &lt;span id="why-do-we-need-redux"&gt;&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;Our product manager wants us to build an app called Counter. It's fast, sleek, and consists of a single component. (Think of how small the bundle size is!)&lt;br&gt;
Check out the code below, or click &lt;a href="https://codesandbox.io/s/usestate-counter-example-djq6s?file=/src/App.js"&gt;here&lt;/a&gt; to view this as an app on CodeSandbox.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;prevCount&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decrement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;prevCount&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;No&lt;/span&gt; &lt;span class="nx"&gt;Redux&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;decrement&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;-&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;+&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Reset&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside this tiny &lt;code&gt;App&lt;/code&gt; component, we're creating a single &lt;code&gt;count&lt;/code&gt; state for our counter, initializing it to &lt;code&gt;0&lt;/code&gt;, and defining methods to &lt;code&gt;increment&lt;/code&gt;, &lt;code&gt;decrement&lt;/code&gt;, and &lt;code&gt;reset&lt;/code&gt; it.&lt;/p&gt;

&lt;p&gt;Then we're implementing the counter inside the same component.&lt;/p&gt;

&lt;p&gt;If your React apps are all as simple as this one, you'll never need to use a state management solution like Redux. However, I can all but guarantee that you'll work on an app in which &lt;code&gt;useState&lt;/code&gt; or &lt;code&gt;setState&lt;/code&gt; alone won't cut it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-2-complex-counter" class="anchor"&gt;
  &lt;/a&gt;
  Example 2: Complex Counter
&lt;/h3&gt;

&lt;p&gt;Turns out our counter app was massively popular — it's time to introduce the&lt;br&gt;
world to Counter 2.0!&lt;/p&gt;

&lt;p&gt;Here's the mockup our product manager just gave us. Note that it's a &lt;em&gt;little&lt;/em&gt; more complicated than what we were working with before:&lt;/p&gt;

&lt;p&gt;&lt;a href=""&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RGArdyhV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dbvsstxde/image/upload/v1614696165/haluza.dev/Redux%2520Post/complicated-app_g62nrb.png" alt="Mockup-for-a-complicated-app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To save you some stress, we aren't going to code this app out. Instead, I want you to think of the different types of state that we would need to manage inside this app. Off the top of my head, here are the key types of state we would need to manage:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All of the counters in the app, as well as their current values. We could store the counter values inside an array to keep track of the counters more easily.&lt;/li&gt;
&lt;li&gt;Login-related info, such as the user's name, so we could display it in the
UI.&lt;/li&gt;
&lt;li&gt;The current color theme (light mode or dark mode)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Previously, we stored all of our state logic inside our &lt;code&gt;App.js&lt;/code&gt; file. Now, however, our state is a little bigger. Below you'll see our current state represented as an object. Why did I use an object? Keep that question in mind as you read on.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;counters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;colorTheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, that doesn't seem so bad. But hold on — don't we also need to include methods to trigger state changes?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setUsername&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// logic to set the username when someone logs in&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// logic to add a counter&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;removeCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// logic to remove a counter at a certain index&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// logic to increment a specific counter&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decrement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// logic to decrement a specific counter&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// logic to reset a specific counter&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've just defined the basic business logic for our application. We already have some problems.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Our &lt;code&gt;App.js&lt;/code&gt; component is going to get crowded if we move it all there.&lt;/li&gt;
&lt;li&gt;It's going to get even more crowded if we start adding more state and logic
to our app.&lt;/li&gt;
&lt;li&gt;We'll also need to pass our state and methods down to our components. And if
we nest components inside other components (for example, &lt;code&gt;App&lt;/code&gt; -&amp;gt;
&lt;code&gt;CounterContainer&lt;/code&gt; -&amp;gt; &lt;code&gt;Counter&lt;/code&gt;), we run the risk of introducing
&lt;a href="https://kentcdodds.com/blog/prop-drilling"&gt;prop drilling&lt;/a&gt; into our app.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Wouldn't it be easier if we had one central place to store our state and our state-related methods, like adding counters and changing the color theme? And wouldn't it also be great if we could grab state and methods directly from this central store, instead of passing them through component after component?&lt;/p&gt;

&lt;p&gt;This is where Redux comes in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-redux-work" class="anchor"&gt;
  &lt;/a&gt;
  How Does Redux Work? &lt;span id="how-does-redux-work"&gt;&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;Counter 2.0 shows us some very common state management issues that can occur in&lt;br&gt;
React apps when they grow more complex. Redux helps solve these problems by&lt;br&gt;
handling state management in a very opinionated and clearly defined flow.&lt;/p&gt;

&lt;p&gt;Here's how Redux's "one-way data flow" works. Just soak it in — it's OK if it doesn't make sense yet.&lt;/p&gt;

&lt;p&gt;&lt;a href=""&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eU-ZUk5r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dbvsstxde/image/upload/v1614696165/haluza.dev/Redux%2520Post/redux-diagram_un9kun.png" alt="redux-flow-diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's translate this image into a series of written steps. For now, let's imagine that we've implemented Redux inside a simple counter app, like Counter 1.0.&lt;/p&gt;

&lt;p&gt;This is what happens when a user clicks on the button to increment the counter from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The app &lt;strong&gt;dispatches&lt;/strong&gt; an &lt;strong&gt;action&lt;/strong&gt;. The action is a function called &lt;code&gt;increment&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The action is sent to the &lt;strong&gt;store&lt;/strong&gt;, which holds the app's state inside an object.&lt;/li&gt;
&lt;li&gt;The store updates the state using a &lt;strong&gt;reducer function&lt;/strong&gt; (more on that
later).

&lt;ul&gt;
&lt;li&gt;In this case, the &lt;code&gt;count&lt;/code&gt; state is increased to &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The store sends the updated state back to the UI. The counter now displays &lt;code&gt;1&lt;/code&gt; instead of &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Actions, stores, reducers... This is getting extremely abstract. To make these concepts more tangible, let's see an how Redux works inside a React app.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#understanding-redux-in-an-app" class="anchor"&gt;
  &lt;/a&gt;
  Understanding Redux in an App &lt;span id="understanding-redux-in-an-app"&gt;&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;Remember Counter 2.0? Our product manager decided to scrap it because it was too complicated. Now they want us to build the much simpler and much prettier Counter 3.0. Oh, and they want us to use Redux!&lt;/p&gt;

&lt;p&gt;Here's what the finished app looks like. Before moving on, poke around inside the app and get a feel for its functionality. Inside the &lt;code&gt;redux&lt;/code&gt; directory, you'll find some files with familiar sounding names, like &lt;code&gt;reducer.js&lt;/code&gt;, &lt;code&gt;actionCreators.js&lt;/code&gt;, and &lt;code&gt;store.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/4rpht"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We're going to explore the following concepts inside the Counter 3.0 app:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reducers&lt;/li&gt;
&lt;li&gt;Actions (and action creators)&lt;/li&gt;
&lt;li&gt;Store&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's take a look at that Redux flow diagram again. It's important to keep these concepts in mind as you explore the app.&lt;/p&gt;

&lt;p&gt;&lt;a href=""&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eU-ZUk5r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dbvsstxde/image/upload/v1614696165/haluza.dev/Redux%2520Post/redux-diagram_un9kun.png" alt="redux-flow-diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#actions-amp-action-creators" class="anchor"&gt;
  &lt;/a&gt;
  Actions &amp;amp; Action Creators &lt;span id="actions-&amp;amp;-action-creators"&gt;&lt;/span&gt;
&lt;/h3&gt;

&lt;p&gt;Before I explain what an action or an action creator is, let's look at a simplified version of the &lt;code&gt;actionCreators.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;incrementCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INCREMENT_COUNTER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decrementCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DECREMENT_COUNTER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resetCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;RESET_COUNTER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setCustomCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;customCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_CUSTOM_COUNT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;customCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we've created functions to define four events we can trigger with our app:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Increment the count&lt;/li&gt;
&lt;li&gt;Decrement the count&lt;/li&gt;
&lt;li&gt;Reset the count&lt;/li&gt;
&lt;li&gt;Set the count to a custom number&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these events corresponds to a button in the app.&lt;/p&gt;

&lt;p&gt;These functions are called &lt;strong&gt;action creators&lt;/strong&gt;. Each action creators returns an object called an &lt;strong&gt;action&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are two basic types of actions.&lt;/p&gt;

&lt;p&gt;The first contains only a &lt;code&gt;type&lt;/code&gt; property. Think of it as the action's&lt;br&gt;
&lt;strong&gt;label&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INCREMENT_COUNTER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The second contains a &lt;code&gt;type&lt;/code&gt; property as well as a &lt;code&gt;payload&lt;/code&gt; property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SET_CUSTOM_COUNT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;67&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The name &lt;code&gt;payload&lt;/code&gt; is an apt description. It's the value(s) we want to use when we update the state. In the case of our &lt;code&gt;SET_CUSTOM_COUNT&lt;/code&gt; action, we're updating the &lt;code&gt;count&lt;/code&gt; state to &lt;code&gt;67&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Why don't any of our other actions contain payloads? Simple: they don't need them. We'll see why when we learn about reducers next.&lt;/p&gt;

&lt;p&gt;Where do we trigger our reducers? Right inside the app. Here's the code for our "increment" button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;incrementCounter&lt;/span&gt;&lt;span class="p"&gt;())}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;+&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll discuss the &lt;code&gt;dispatch&lt;/code&gt; method later. But in a nutshell, here's what happens when a user clicks the &lt;code&gt;+&lt;/code&gt; button to increment the counter.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;incrementCounter&lt;/code&gt; function (action creator) is executed.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;incrementCounter&lt;/code&gt; returns an object with a &lt;code&gt;type&lt;/code&gt; property of
&lt;code&gt;INCREMENT_COUNTER&lt;/code&gt;. This object is our &lt;strong&gt;action.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;The action is sent to the &lt;strong&gt;reducer.&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#reducer" class="anchor"&gt;
  &lt;/a&gt;
  Reducer &lt;span id="reducer"&gt;&lt;/span&gt;
&lt;/h3&gt;

&lt;p&gt;This is where it starts to come together.&lt;/p&gt;

&lt;p&gt;What's the reducer? It's simply a function that controls your app's state.&lt;/p&gt;

&lt;p&gt;It's often written as a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch"&gt;switch statement&lt;/a&gt;, as is the one in this app, but that's simply a common convention, not a requirement.&lt;/p&gt;

&lt;p&gt;Here's what our reducer looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;counterReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INCREMENT_COUNTER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DECREMENT_COUNTER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;RESET_COUNTER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_CUSTOM_COUNT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's a lot to take in. Let's walk through this chunk of code step by step.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, we define our &lt;code&gt;initialState&lt;/code&gt; as an object above the reducer.&lt;/li&gt;
&lt;li&gt;Next, the reducer function accepts two parameters: &lt;code&gt;state&lt;/code&gt; and &lt;code&gt;action&lt;/code&gt;.

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;state&lt;/code&gt; - the &lt;code&gt;initialState&lt;/code&gt; object is this parameter's default value.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;action&lt;/code&gt; - this refers to whatever action that was just returned by the action creator.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;We create a switch statement. Inside this statement, we return an &lt;strong&gt;object&lt;/strong&gt; depending on the action's type property.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If a user opens the app and chooses to increment the counter, what happens?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The app dispatches the &lt;code&gt;incrementCounter&lt;/code&gt; action creator:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;incrementCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INCREMENT_COUNTER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;incrementCounter&lt;/code&gt; action creator returns an object (an &lt;strong&gt;action&lt;/strong&gt;) with a &lt;code&gt;type&lt;/code&gt; property of &lt;code&gt;INCREMENT_COUNTER&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INCREMENT_COUNTER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Our &lt;strong&gt;reducer&lt;/strong&gt; function is invoked, accepting &lt;code&gt;initialState&lt;/code&gt; and the action object as parameters. In pseudocode, it looks something like this:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;incrementAction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INCREMENT_COUNTER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;counterReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;incrementAction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;reducer&lt;/strong&gt; looks at the action's &lt;code&gt;type&lt;/code&gt; property and sees if it matches any of its cases. Bingo - we hit the &lt;code&gt;INCREMENT_COUNTER&lt;/code&gt; case.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INCREMENT_COUNTER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// other cases here...&lt;/span&gt;

  &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The reducer returns an object with a single property, &lt;code&gt;count&lt;/code&gt;. To calculate the value, it grabs the current value of &lt;code&gt;count&lt;/code&gt; from the current state object (which is &lt;code&gt;0&lt;/code&gt; now) and adds &lt;code&gt;1&lt;/code&gt; to it.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hold on — that looks a lot like our &lt;code&gt;initialState&lt;/code&gt; object!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Our initial state object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// The object returned by the reducer&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's right. The reducer returns the updated state. In more technical terms, it replaces the previous state object with a new state object containing updated values. This is because Redux state is &lt;strong&gt;immutable&lt;/strong&gt; (key interview term!). You should never directly modify your Redux state inside your reducer. Instead, you should return a brand new object, like we do here.&lt;/p&gt;

&lt;p&gt;This updated state object is now available for our app to use. But how does our app have access to the state?&lt;/p&gt;

&lt;p&gt;It's time to learn about the store.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#store" class="anchor"&gt;
  &lt;/a&gt;
  Store &lt;span id="store"&gt;&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;Here's what Counter 3.0's store looks like. Brace yourself... it's 4 lines of code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;counterReducer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./reducer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counterReducer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Still, we only need to look at one line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counterReducer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A Redux store is simply an object that holds your app's state. &lt;strong&gt;Your app&lt;br&gt;
should only contain one store.&lt;/strong&gt; This is a &lt;strong&gt;HUGE&lt;/strong&gt; part of what makes Redux an appealing state solution. Your store becomes a &lt;strong&gt;single source of truth&lt;/strong&gt; for your app's state.&lt;/p&gt;

&lt;p&gt;Remember the phrase "single source of truth." It's an easy way to sum up the benefits of Redux. Plus, it's another great phrase to use in interviews.&lt;/p&gt;

&lt;p&gt;In the line of code above, Redux's &lt;code&gt;createStore&lt;/code&gt; function takes in your reducer and uses it to construct the store object.&lt;/p&gt;

&lt;p&gt;As your app grows more complex, you may want to create multiple reducers. If we add a to-do feature to our counter app, creating a separate &lt;code&gt;toDoReducer&lt;/code&gt; where&lt;br&gt;
we store our state and methods for our app's "to-do" functionality.&lt;/p&gt;

&lt;p&gt;Fortunately, the Redux library provides a &lt;a href="https://redux.js.org/api/combinereducers"&gt;&lt;code&gt;combineReducers&lt;/code&gt;&lt;/a&gt; function that lets you feed a multilayered reducer to your store.&lt;/p&gt;

&lt;p&gt;We're almost there! We've built our action creators, reducer, and store. Now we just need to give our app access to the store and the state inside it.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#connecting-the-app-to-the-store" class="anchor"&gt;
  &lt;/a&gt;
  Connecting the App to the Store &lt;span id="connecting-the-app-to-the-store"&gt;&lt;/span&gt;
&lt;/h3&gt;

&lt;p&gt;There are only two steps left:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Wrap our store around our entire app, using a special wrapper component called &lt;code&gt;Provider&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Hook our components into the store with... Redux hooks!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hang in there. This is the home stretch!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wrapping the Store Around Our App&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For these last few steps, we're going to use a few features that the &lt;a href="https://react-redux.js.org/"&gt;React Redux&lt;/a&gt; library gives us. The first one is called &lt;code&gt;Provider&lt;/code&gt;, and it's a component that we wrap around our entire app. We use it in the &lt;code&gt;index.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Here's the &lt;code&gt;index.js&lt;/code&gt; file of a typical React app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's what the same file looks like when we implement the &lt;code&gt;Provider&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./redux/store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Provider&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;,
&lt;/span&gt;  &lt;span class="nx"&gt;rootElement&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This file suddenly got a lot more busy. The key difference is this chunk of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're &lt;em&gt;providing&lt;/em&gt; the entire app with access to our Redux store. And this is a big thing. It means that regardless of where we are in our app — even if we're inside a component nested a dozen layers down — we can reach directly into the store without even leaving that component.&lt;/p&gt;

&lt;p&gt;We no longer need to pass down all our state as props.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Accessing State From Inside a Component&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finally, let's look at two hooks: &lt;code&gt;useSelector&lt;/code&gt; and &lt;code&gt;useDispatch&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;useSelector&lt;/code&gt; lets us access state values inside our store (like our &lt;code&gt;count&lt;/code&gt;
state).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;useDispatch&lt;/code&gt; lets us "dispatch" action creators to our reducer. In other
words, it lets us trigger state changes, like incrementing a counter.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Think of &lt;code&gt;useSelector&lt;/code&gt; as a &lt;strong&gt;noun&lt;/strong&gt; (e.g. &lt;code&gt;count&lt;/code&gt;) and &lt;code&gt;useDispatch&lt;/code&gt; as a &lt;strong&gt;verb&lt;/strong&gt; (e.g. &lt;code&gt;incrementCounter&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Inside our app's &lt;code&gt;Counter.js&lt;/code&gt; file, we implement both of these hooks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;incrementCounter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;decrementCounter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;resetCounter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../redux/actionCreators&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSelector&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useDispatch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter-top&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;decrementCounter&lt;/span&gt;&lt;span class="p"&gt;())}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;-&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;incrementCounter&lt;/span&gt;&lt;span class="p"&gt;())}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;+&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resetCounter&lt;/span&gt;&lt;span class="p"&gt;())}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Reset&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At the top of the &lt;code&gt;Counter&lt;/code&gt; component, we do two important things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use the &lt;code&gt;useSelector&lt;/code&gt; hook to access the value of the &lt;code&gt;count&lt;/code&gt; property inside our store's &lt;code&gt;state&lt;/code&gt; object, and then save it inside a constant named &lt;code&gt;count&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Invoke the &lt;code&gt;useDispatch&lt;/code&gt; hook. The result, which we save as the constant &lt;code&gt;dispatch&lt;/code&gt;, is a reference to the &lt;code&gt;dispatch&lt;/code&gt; function in the Redux store.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's all we need to work with our store!&lt;/p&gt;

&lt;p&gt;For the &lt;code&gt;useDispatch&lt;/code&gt; hook, we do need to import any actions we're going to use, so we can invoke it as such:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;incrementCounter&lt;/span&gt;&lt;span class="p"&gt;())}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;+&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also pass a payload to the action creator if needed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setCustomCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;419&lt;/span&gt;&lt;span class="p"&gt;))}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nb"&gt;Set&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;419&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And...that's it! We've hooked our app up to our Redux store.&lt;br&gt;
&lt;a href="https://codesandbox.io/s/redux-counter-4rpht?file=/src/App.js"&gt;Here's the link&lt;/a&gt; to the finished app, in case you don't want to scroll all the way back up to the sandbox.&lt;/p&gt;

&lt;p&gt;And here's the code!&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/4rpht"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For a more detailed look at &lt;code&gt;useSelector&lt;/code&gt; and &lt;code&gt;useDispatch&lt;/code&gt;, please refer to the React Redux documentation:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://react-redux.js.org/next/api/hooks#useselector"&gt;&lt;code&gt;useSelector&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react-redux.js.org/next/api/hooks#usedispatch"&gt;&lt;code&gt;useDispatch&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary &lt;span id="summary"&gt;&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;We covered a massive amount of ground in this article.&lt;/p&gt;

&lt;p&gt;Here are the key concepts we covered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Redux is a state management library that acts as the &lt;strong&gt;single source of truth&lt;/strong&gt; for your app's state-related logic.&lt;/li&gt;
&lt;li&gt;To implement Redux, you should implement the following in your app:

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Action creators:&lt;/strong&gt; functions that are dispatched when your app triggers an action.&lt;/li&gt;
&lt;li&gt;Every action creator returns an &lt;strong&gt;action&lt;/strong&gt;, an object with instructions for updating the state.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reducers:&lt;/strong&gt; functions that take a state object and action as parameters, and return an object containing the app's updated state.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Store:&lt;/strong&gt; An object containing the entirety of your app's Redux state.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;To give your app access to the store, wrap it inside a &lt;code&gt;Provider&lt;/code&gt; component.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;useSelector&lt;/code&gt; and &lt;code&gt;useDispatch&lt;/code&gt; hook to access state and dispatch action creators from inside any component inside your app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're feeling lost, that's normal. It took me at least three separate tries to understand Redux well enough to implement it in a tiny app.&lt;/p&gt;

&lt;p&gt;If you're having trouble with these concepts, take some time to check out the excellent explanations provided in the official &lt;a href="https://redux.js.org/tutorials/essentials/part-1-overview-concepts"&gt;Redux documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps" class="anchor"&gt;
  &lt;/a&gt;
  Next Steps &lt;span id="next-steps"&gt;&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;As you're getting more comfortable with Redux, I highly recommend that you do the following:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#read-you-might-not-need-redux" class="anchor"&gt;
  &lt;/a&gt;
  Read "You Might Not Need Redux" &lt;span id="read-you-might-not-need-redux"&gt;&lt;/span&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://twitter.com/dan_abramov"&gt;Dan Abramov&lt;/a&gt; is famous for creating Redux and working on Create React App and React hooks. He also wrote a very insightful article called&lt;br&gt;
&lt;a href="https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367"&gt;&lt;em&gt;You Might Not Need Redux&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Redux is a great tool to have, but it's just that — a tool. You shouldn't use it if you don't need it. For smaller apps, React state may be enough. For larger apps, you may find yourself using a mixture of Redux state for data used globally and React state for more localized state.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#build-an-app-with-redux" class="anchor"&gt;
  &lt;/a&gt;
  Build an app with Redux &lt;span id="build-an-app-with-redux"&gt;&lt;/span&gt;
&lt;/h3&gt;

&lt;p&gt;I want you to implement Redux in a React app. I recommend keeping the app as simple as possible; this will let you focus more on the implementation of Redux, as opposed to React itself.&lt;/p&gt;

&lt;p&gt;Some ideas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build a score counter for a sports game (any sport of your choice). Give users the option to add points for either team. You can even include a winning condition (one team wins when they attain a certain number of points).&lt;/li&gt;
&lt;li&gt;Build your own counter, using Counter 3.0 (the one we just finished going
over) as a reference.&lt;/li&gt;
&lt;li&gt;Up for a challenge? Create a simplified ecommerce app with a shopping cart that displays items as you click on them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feel free to use this sandbox as a reference. It's our counter from before, to include some best practices that are explained in the comments.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/bl482"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explore-redux-toolkit" class="anchor"&gt;
  &lt;/a&gt;
  Explore Redux Toolkit &lt;span id="explore-redux-toolkit"&gt;&lt;/span&gt;
&lt;/h3&gt;

&lt;p&gt;I mentioned Redux Toolkit at the very beginning of this post. Once you're comfortable with how Redux works, you should make an effort to move to Redux Toolkit. It simplifies a lot of the code that we just wrote. After working with vanilla Redux, you'll see the benefits immediately.&lt;/p&gt;

&lt;p&gt;Redux Toolkit was built by the Redux.js team and is described as "the official, opinionated, batteries-included toolset for efficient Redux development" on &lt;a href="https://redux-toolkit.js.org/"&gt;the library's site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As someone who cut their teeth on Redux and then moved to Redux Toolkit, trust me when I say it's the way that any team should work with Redux logic.&lt;/p&gt;

&lt;p&gt;But wait - if Redux Toolkit is the modern Redux implementation you should use, why did we spend an entire article using vanilla Redux?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#afterword-why-this-article-uses-vanilla-redux-instead-of-redux-toolkit" class="anchor"&gt;
  &lt;/a&gt;
  Afterword: Why This Article Uses Vanilla Redux (Instead of Redux Toolkit) &lt;span id="why-this-article-uses-vanilla-redux"&gt;&lt;/span&gt;
&lt;/h2&gt;

&lt;p&gt;I believe that the basic Redux.js library provides the most direct way to learn how Redux works. With Redux Toolkit, you're able to leverage many new APIs that improve on Redux's functionality. However, to really grasp what these improvements are doing, and why they're so important, you need a firm understanding of how Redux works.&lt;/p&gt;

&lt;p&gt;For instance, Redux Toolkit's &lt;a href="https://redux-toolkit.js.org/api/createSlice"&gt;&lt;code&gt;createSlice&lt;/code&gt;&lt;/a&gt; API is one of my favorite features, as it removes the need to create a separate file for your action creators - it automatically generates them from your reducer. To really understand how powerful this is, you should have a solid understanding of what action creators and actions are.&lt;/p&gt;

&lt;p&gt;In other words:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vanilla Redux lets you learn Redux with the smallest amount of abstractions&lt;/li&gt;
&lt;li&gt;Redux Toolkit builds on the original Redux library with more powerful APIs, and you should use it once you understand how Redux works&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It's also worth mentioning that some teams with older codebases may still be using the older version of Redux, just as many React codebases will feature&lt;br&gt;
class-based state instead of hooks (or a mixture of the two). While this shouldn't be your motivation for learning vanilla Redux, it's definitely a side benefit that makes you more versatile.&lt;/p&gt;




&lt;p&gt;We've covered so much knowledge in this post. Take a break and let it sink in before you do anything else!&lt;/p&gt;

</description>
      <category>redux</category>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
