<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Tech Talk Notes: "Self-Care on Rails" (RailsConf 2021)</title>
      <author>Sylwia Vargas</author>
      <pubDate>Tue, 13 Apr 2021 20:15:10 +0000</pubDate>
      <link>https://dev.to/sylwiavargas/tech-talk-notes-self-care-on-rails-railsconf-2021-49ma</link>
      <guid>https://dev.to/sylwiavargas/tech-talk-notes-self-care-on-rails-railsconf-2021-49ma</guid>
      <description>&lt;p&gt;✨ &lt;strong&gt;What is this post about&lt;/strong&gt;: As a part of my professional growth, I make time to watch conference talks on Ruby, Rails, JS, React, tech writing, and tech trivia. Previously, I'd just watch them but now I will take and publish notes for future reference. This talk was a part of RailsConf 2021 that I'm participating at the time of writing. &lt;/p&gt;

&lt;p&gt;✨ &lt;strong&gt;Talk:&lt;/strong&gt; 'Self-Care on Rails' by &lt;a class="comment-mentioned-user" href="https://dev.to/bengreenberg"&gt;@bengreenberg&lt;/a&gt;
 , or &lt;a href="https://twitter.com/RabbiGreenberg"&gt;Ben Greenberg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;✨ &lt;strong&gt;One-paragraph summary&lt;/strong&gt;: This past year has been one of the most challenging years in recent memory. The pandemic has taken a toll, including on children. Adults used their professional skills to help make the year a little better for the kids in our lives: Therapists counseled, entertainers delighted, teachers educated... and Rails developers developed!&lt;/p&gt;

&lt;p&gt;✨ &lt;strong&gt;Impression&lt;/strong&gt;: I appreciate the human-side of the Rails community that Ben represents; the talk was inspiring and also grounding&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#Notes"&gt;Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#side-notes"&gt;Side Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#read-more"&gt;Read more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;"...citizens of a democracy are collectively responsible for what their society allows; they have a special duty towards those it systematically fails, and this burden falls most heavily on those most rewarded..." (Chiala Cordelli)&lt;/li&gt;
&lt;li&gt;a new initiative in the Open Source community: Hippocratic License

&lt;ul&gt;
&lt;li&gt;"...we are starting to realize that the software that we create has a real and lasting impact on the world in which we live" (&lt;a href="https://firstdonoharm.dev/"&gt;An Ethical License to Open Source&lt;/a&gt; - how will your code be used? will it be bettering the world at large?&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;"If I am not for myself, who will be for me?"

&lt;ul&gt;
&lt;li&gt;self-interest can mean asserting yourself among others and that's not a bad thing!&lt;/li&gt;
&lt;li&gt;your interest is among others and it matters&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;We are facing mental health crises (loneliness, etc.) and it's affecting all of us: adults and youths alike&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;webRTC&lt;/strong&gt;: real-time communication

&lt;ul&gt;
&lt;li&gt;open web standard and available as regular JS APIs in the majority of browsers&lt;/li&gt;
&lt;li&gt;it supports video, voice, and generic data to be sent between peers&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Ben mentioned two apps he built: 

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/nexmo-community/rails-video-watch-party-app"&gt;a video-sharing app&lt;/a&gt; he built for his son's birthday party,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bencgreenberg/school-health-declaration-automation"&gt;a gem he published&lt;/a&gt; that uses web-scraping to automate school form submission (btw. &lt;a href="https://dev.to/bengreenberg/automate-school-forms-with-web-scraping-in-ruby-2c3j"&gt;his blog post on building this&lt;/a&gt; is amazing)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;the more you help yourself, the more you help others&lt;/strong&gt; ✨&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#side-notes"&gt;
  &lt;/a&gt;
  Side notes:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I love Ben's attitude, kindness, and jokes&lt;/li&gt;
&lt;li&gt;"You can't escape JavaScript ;-; " - Ben 😹&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#read-more"&gt;
  &lt;/a&gt;
  Read more
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API"&gt;webRTC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[Blog: Automate School Forms with Web Scraping in Ruby](&lt;a href="https://dev.to/bengreenberg/automate-school-forms-with-web-scraping-in-ruby-2c3j"&gt;https://dev.to/bengreenberg/automate-school-forms-with-web-scraping-in-ruby-2c3j&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>techtalks</category>
      <category>rails</category>
    </item>
    <item>
      <title>Reflecting on My Voyage as an Intern to a Developer</title>
      <author>Shravan Kumar B</author>
      <pubDate>Tue, 13 Apr 2021 19:58:52 +0000</pubDate>
      <link>https://dev.to/imshravan/reflecting-on-my-voyage-as-an-intern-to-a-developer-1d6k</link>
      <guid>https://dev.to/imshravan/reflecting-on-my-voyage-as-an-intern-to-a-developer-1d6k</guid>
      <description>&lt;p&gt;Hi everyone! This is a revised version of my article from &lt;a href="https://ohmyscript.com/2021/04/13/reflecting-on-my-voyage-as-an-intern-to-a-developer/"&gt;my personal blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is an article that expresses a few major learnings I would like to take away and mistakes I wouldn’t want to commit again from my journey, and maybe stand out like a guide book for those who are starting their career in Software Industry. I have tried to put up my learning and takeaways from my voyage in the simplest way I can.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n0Ic3ql8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2400/1%2AcD-wC5pUgL-mSI8bpyYF9A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n0Ic3ql8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2400/1%2AcD-wC5pUgL-mSI8bpyYF9A.png"&gt;&lt;/a&gt;&lt;br&gt;Learning is a Continuum Concept, where at every level and stage of your life, you learn and take away something from your previous experiences
  &lt;/p&gt;

&lt;p&gt;I am closing in on completing two years of my career at a startup, starting as a Graduate Intern Developer to Junior Developer and what a journey it has been. I have learnt a lot during the course of this ride. I explored newer nooks of the developmental and DevOps technology. I have made mistakes and learnt from them.&lt;/p&gt;

&lt;p&gt;During the Internship experience, I encountered a bunch of challenges that are very much typical to all, who is going through a transition from the College Graduate phase to the Working Professional phase. Likewise, I am going to address the challenges that I had faced along with the changes in my perception while growing as a working professional.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some takeaways so far from my experience:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1. &lt;strong&gt;Tutorial Hell&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Initially, when we start out as newbies, it is quite common that we prefer to learn videos from Youtube Tutorials, Udemy or any other LMS application. Some might prefer following and reading from some open blogs like Freecodecamp or Medium blogs.&lt;/p&gt;

&lt;p&gt;Now, let us first understand what is Tutorials Hell?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tutorial Hell&lt;/strong&gt; is a typical situation, where you find a lot of tutorials and you are not sure about which one to follow and learn from. &lt;br&gt;
Assuming, let us say somehow you figured out which tutorial to learn from. Now you struggle with what to do/build with what you have learnt.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Initially, I had a very hard time getting through this situation. I was learning Node.js and I was very new to the Event-Driven Programming Paradigm and had a lot of confusions about fundamentals, despite I had followed one of the many tutorials available.&lt;/p&gt;

&lt;p&gt;Generally speaking, I do not have any issue with tutorials, but I find that most of the tutorials, always tend to miss 4–5 core concepts, as they expect you to have a technical grasp of the same. Those missed out concepts create a lot of voids as you go ahead.&lt;/p&gt;

&lt;p&gt;Let me give you an instance from my own experience. If you have worked on any JS-based framework/libraries, you must be knowing different ways of handling asynchronous operations (Callbacks, Promises, async-await). Those of you who do not know, do not worry, it is just 3 different ways of handling async operations. The point being, Callbacks are a real pain, whereas Promises and async-await is a better and cleaner way of writing code.&lt;/p&gt;

&lt;p&gt;Initially, when I started out writing RESTful APIs, I followed the Callback way of handling asynchronous operation, because the tutorial I had followed did not bother to speak about Promises and async-await. For around a month or so, imagine my life, handling every DB calls and asynchronous functions as callbacks. It was too difficult to write simple logic, despite the problem statement was quite straightforward.&lt;/p&gt;

&lt;p&gt;With time, as I kept exploring different technologies, one thing that I realised is that nothing beats the &lt;strong&gt;OFFICIAL DOCUMENTATION&lt;/strong&gt;. Every technology that you want to learn, has its own Learning Management System or its own Official Documentation published, which surely covers every aspect of the technology that you are learning. Since, then any technology that I want to explore, I always prefer to follow the official documentation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--171qcCU_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/300/1%2AdEaEwTrhabKDUxcmDpttDA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--171qcCU_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/300/1%2AdEaEwTrhabKDUxcmDpttDA.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;Avoid Cobwebbed by tutorials
  &lt;/p&gt;

&lt;p&gt;Finally, after we learn from the resource, follows another overwhelming situation where you are more confused about what to do with the updated knowledge portfolio?&lt;/p&gt;

&lt;p&gt;Initially, since I was already working on a project, I could easily fill in whatever I learnt to fulfil the project requirements. It allowed me to constantly learn and explore.&lt;/p&gt;

&lt;p&gt;There could be scenarios where you learn technologies out of the scope of your project you are working on. How to deal with situations in that scenario?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5sqJAlGr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AV8wl8X5-fnrwRhNX3125Hg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5sqJAlGr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AV8wl8X5-fnrwRhNX3125Hg.jpeg" alt=""&gt;&lt;/a&gt;&lt;br&gt;Difference between Knowing vs Understanding
  &lt;/p&gt;

&lt;p&gt;The best thing one should do after learning technology is &lt;strong&gt;BUILDING SOMETHING&lt;/strong&gt;. Build, Create something you want. Be it simply for fun. Does not really have to be a real-time useful product. It is simply a product that you can apply conceptual learning to practicality.&lt;/p&gt;

&lt;p&gt;If it’s a new programming language, you can explore more by trying to solve problems from HackerRank or other competitive platforms. Maintain a GitHub Repository to keep track of whatever you are learning with simple documentation for your understanding. This allows you to have your own documentation that you can look back into whenever you want. Creating and documenting the Proof of Concepts is a deal.&lt;/p&gt;

&lt;p&gt;Meanwhile, &lt;strong&gt;KEEP CODE-READING&lt;/strong&gt; from different GitHub repositories. I used to randomly code-read just to get a glimpse of different approaches to solving problems and writing code. This actually helped me improvise the way I wrote the code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7791fnIh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AG6IMBGB--Xr0iHrajQROpA.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7791fnIh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AG6IMBGB--Xr0iHrajQROpA.jpeg" alt=""&gt;&lt;/a&gt;&lt;br&gt;Open Source Contribution allows you to spread your wings and collaborate with people having different ideologies.
  &lt;/p&gt;

&lt;p&gt;Open Source Contribution allows you to spread your wings and collaborate with people having different ideologies.&lt;/p&gt;

&lt;p&gt;One more way to get through this situation is to &lt;strong&gt;CONTRIBUTE TOWARDS&lt;/strong&gt; &lt;strong&gt;OPEN SOURCE&lt;/strong&gt;. Try to search for some Open Source Projects built on top of the technology and try actively contributing towards it or recreating your own project as a Proof of Concept.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-build-products-not-junk"&gt;
  &lt;/a&gt;
  2. Build Products, not Junk
&lt;/h1&gt;

&lt;p&gt;This seriously was a huge misconception I had initially, where I thought trying to solve the problem statement and coming up with a solution, is the most important thing. Probably, because of an attitude sometimes your graduate syllabus forces you to inculcate, where finding a solution is considered important than any other factors.&lt;/p&gt;

&lt;p&gt;There are two factors that we tend to fail to focus upon, firstly &lt;strong&gt;END-USER&lt;/strong&gt; of the application and secondly &lt;strong&gt;CLARITY over USER REQUIREMENTS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hR1WCGZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2A1cujLlFONgNdPC5RtF1FrA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hR1WCGZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2A1cujLlFONgNdPC5RtF1FrA.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;What user wanted vs What you delivered
  &lt;/p&gt;

&lt;p&gt;Sometimes we fail to understand the user requirements. At times, we misinterpret given User Requirement, due to our individual perception and experience, which, of course, is not a mistake. But, it is very important to clarify what you have understood with the client/user/product-owner.&lt;/p&gt;

&lt;p&gt;It is always better to ask, in the very initial stage of the project, with the product-owner/client, whether your understanding of the requirements are accurate or not. When you question the client in the very first stage, you won’t end up building a product that was not required.&lt;/p&gt;

&lt;p&gt;Similarly whenever, requirement pitches in between the development cycle, ensure you clarify that as well, just to make sure that your project doesn’t end up going south.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9MzGs11n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/602/1%2Ax7B9p3FkuOID95MPyu3nIA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9MzGs11n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/602/1%2Ax7B9p3FkuOID95MPyu3nIA.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;&lt;strong&gt;Bad UI/UX&lt;/strong&gt;: Label [PUSH/PULL] and Handlebars.&lt;br&gt;&lt;br&gt;
Why? Do I need the handlebar to push?
  &lt;/p&gt;

&lt;p&gt;Always focus on building the product on the basis of how the product owner (End-User) wants it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zDjwg6SU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/658/1%2Ap6-KTu5kcpbD-fVBPIgE9A.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zDjwg6SU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/658/1%2Ap6-KTu5kcpbD-fVBPIgE9A.jpeg" alt=""&gt;&lt;/a&gt;&lt;br&gt;&lt;strong&gt;Bad Design Aesthetics&lt;/strong&gt;: A button showing the corresponding number and another actual button to click the floor number
  &lt;/p&gt;

&lt;p&gt;When you are building the product, ask yourself, “&lt;strong&gt;As an owner of the product, does this make my work easier? Does this solve my problem? Is this solution feasible? Is this the only approach available? Are there better approaches?&lt;/strong&gt;”.&lt;/p&gt;

&lt;p&gt;By the time, your research is done, and have it evaluated based on the above factors, you will have a conclusive and evident answer, portraying clarity over how to go about building the product with a better User Experience.&lt;/p&gt;

&lt;p&gt;Keep constantly in touch with end-user and build the product always iteratively.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-knowing-the-best-practices"&gt;
  &lt;/a&gt;
  3. Knowing the Best Practices
&lt;/h1&gt;

&lt;p&gt;To those who do not know what do I mean by &lt;strong&gt;Best Practices&lt;/strong&gt;? Best Practices are evidently proved guidelines with a strong theory behind them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x2KH9E9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2Ac6GeX3zdBru2d9yHjp-N4Q.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x2KH9E9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2Ac6GeX3zdBru2d9yHjp-N4Q.jpeg" alt="BigSur wallpaper"&gt;&lt;/a&gt;&lt;br&gt;Daily Healthy Routine is the closest analogy to the Best Practices
  &lt;/p&gt;

&lt;p&gt;Just like how we follow certain practices on daily basis like bathing, washing hands after eating, and so on, to maintain our hygiene and keep ourselves neat and tidy. Similarly, in software development, we follow a certain set of proved norms, just to ensure that the product we are building doesn’t rot with time or newer requirements.&lt;/p&gt;

&lt;p&gt;Every technology you learn, there are always best practices tagged along with it. It is quite difficult to remember all the best practices. Over time, one thing that I realised and noticed about the &lt;strong&gt;BEST PRACTICES&lt;/strong&gt; is that most of them try to learn and recollect the best practices. And fail to understand the theory behind the practice that we should follow.&lt;/p&gt;

&lt;p&gt;If you understand the theory behind the practice, it wouldn’t be difficult to remember them while implementing it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Practice tells you that things are good or bad; theory tells why.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let us take a simple instance, whenever we want to scale your project structure, how do you figure that out?&lt;br&gt;&lt;br&gt;
We have a proposed model called the &lt;strong&gt;Scaling Cube&lt;/strong&gt; Theory, which describes the basic principle behind the model and why should you consider it when scaling the project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7zut4uHe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/427/1%2Acg9znQR8I2orO8ooLMCv4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7zut4uHe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/427/1%2Acg9znQR8I2orO8ooLMCv4w.png" alt="BigSur wallpaper"&gt;&lt;/a&gt;&lt;br&gt;&lt;strong&gt;Scale Cube&lt;/strong&gt;: Service Scalability Best Practices
  &lt;/p&gt;

&lt;p&gt;Each axis of the indicates, as shown below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  X-axis: &lt;strong&gt;Scaling by cloning&lt;/strong&gt;, otherwise known as Horizontal Duplication. Usually monolithic projects when deployed, have multiple cloned copies of an application behind a load balancer. When you have only one service to deal with, we are mostly advised to go with &lt;strong&gt;&lt;em&gt;Monolithic Architecture&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;  Y-axis: &lt;strong&gt;Scaling by splitting different services&lt;/strong&gt;, known as decomposition. Usually, projects with complex problems statements and several services, are often advised to split the application into multiple distinct services. When you take this kind of decomposition approach, we call it &lt;strong&gt;&lt;em&gt;Microservice Architecture&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;  Z-axis: &lt;strong&gt;Scaling by splitting similar things&lt;/strong&gt;, known as Data Partitioning. In projects where robustness is a very high priority, improving Infrastructure from the Data Storage point of view helps a lot. In this kind of approach, there are several replicated copy of the code, but each of them is accessible only to a subset of the data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you see in the above instance, by knowing the theory behind the Scaling Cube, it is easier for us to understand which approach to be considered when we are building the project architecture, based on the business requirements of the project. When we apply Scaling Cube, it is easier to evaluate whether or not to scale the project.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-debugging"&gt;
  &lt;/a&gt;
  4. Debugging
&lt;/h1&gt;

&lt;p&gt;At the early stage of my learning, I devoted a lot of my time to debugging, since I was very new to the technology I was working on. And I did not have the grasp of the errors and crashes that followed. I always used to seek help from &lt;strong&gt;StackOverflow&lt;/strong&gt; and &lt;strong&gt;Grepper&lt;/strong&gt; extension for finding the cause and origin of the bug and do some quick fixes. As I kept exploring, I became quite familiar with some set of errors.&lt;/p&gt;

&lt;p&gt;But as I kept exploring new services and stacks, sometimes it was due to bugs in packages that I am using, it so used to happen, where I encounter some new types of error. I couldn’t afford to spend more time to debug and resolve errors, so I started following a simple backtracking method to debug called &lt;strong&gt;Five whys&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Debugging is a sort of aggravating task when you can not figure out the origin and cause of the error. The five whys method was a very basic technique, which helped me determine the root cause of the error in the easiest way, by iteratively asking the question “Why?”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xX6KQIy4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/400/1%2A9vUBXY9HW42xWutui8QeIw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xX6KQIy4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/400/1%2A9vUBXY9HW42xWutui8QeIw.png" alt="BigSur wallpaper"&gt;&lt;/a&gt;&lt;br&gt;5 Whys: Technique used by Toyota Motors for finding manufacturing defects
  &lt;/p&gt;

&lt;p&gt;I used loggers to ensure from where exactly the issue has originated. This saves a lot of time. It is important to find the origin and root cause of the error.&lt;/p&gt;

&lt;p&gt;Also ensure that you document the tracked bug, which is at the application level. It is important to document the bug, maintain the history of bug tracks and record the solution for the bug reported.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-when-you-have-to-explore-something-new-create-proof-of-concept"&gt;
  &lt;/a&gt;
  5. When you have to explore something new, create Proof of Concept
&lt;/h1&gt;

&lt;p&gt;Whenever a new problem statement pitches in, something that you have not worked on. Always create a Proof of Concept for the same. Try out different possible solutions for the same. And do some research work on the different possible solution and make a simple Proof of Concept with enough documentation(for your teammates to follow up). Have a healthy discussion and take opinions from your team.&lt;/p&gt;

&lt;p&gt;Proof of Concept is not final implementation, rather they are intended to provide proof that a given system would work effectively for the problem statement posed. Take feedback on the PoC, and also do not forget to keep them in your GitHub Repository for future reference for yourself and others.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-unit-tests-makes-your-code-better"&gt;
  &lt;/a&gt;
  6. Unit Tests makes your code better
&lt;/h1&gt;

&lt;p&gt;I learnt this the hard way, but honestly speaking, Unit tests are the best way to catch bugs. In the initial stage, I hardly knew and cared about writing Unit Tests for the APIs, I used to often find myself concentrating on completing the tasks in the expected slot with good quality.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RyqzFW3U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/225/1%2AjSLR-uO-8cBDuAvvWA6BKQ.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RyqzFW3U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/225/1%2AjSLR-uO-8cBDuAvvWA6BKQ.jpeg" alt="BigSur wallpaper"&gt;&lt;/a&gt;&lt;br&gt;&lt;strong&gt;Unit Testing&lt;/strong&gt;: Verify if the piece of code is doing what it is intended to do
  &lt;/p&gt;

&lt;p&gt;Writing Unit Tests helps you to verify that the code is doing what it is intended to do. Unit tests always help and provide strong backbone support to maintain your code and safely refactor them from time to time. Sometimes, Unit Tests helped me to discover edge cases that I have missed upon. Since the time, I have learnt to write Unit Tests, I have always made it a habit to write Unit Tests for the code I write, which gives me more confidence in the quality of the code I deliver.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-maintain-documentation"&gt;
  &lt;/a&gt;
  7. Maintain Documentation
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt; is always the best way to define a feature from the User’s perspective. Before developing the feature, document the feature first. As a developer, always maintain documentation for the feature you are building.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UovZwyV2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AP9uD6rvLW1FhNPoFOIdz6w.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UovZwyV2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AP9uD6rvLW1FhNPoFOIdz6w.jpeg" alt="BigSur wallpaper"&gt;&lt;/a&gt;&lt;br&gt;“Documentation is a love letter that you write to your future self” &lt;br&gt;
-Twitter&lt;br&gt;

  &lt;/p&gt;

&lt;p&gt;Whenever you can, ensure that you have the document written has been reviewed by the end users and stakeholders before any development begins. As and when the feature is modified during development, make sure that the corresponding changes are documented. Just as documentations are modified, so should be the Unit Tests.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#8-writing-blogs"&gt;
  &lt;/a&gt;
  8. Writing Blogs
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Writing blogs&lt;/strong&gt; is useful for many reasons. Writing blogs will help you realise if you have understood the concepts well and if you are able to explain them in a way others can understand. As developers, we mostly work on creating and adding values to the product, we are building maybe by resolving a bug or implementing new features, which most of them do, but writing blogs would help you get a better understanding of the concepts and gives you a very good feeling about helping people. Some day, someone might read your content and may be able to produce a feature required for their project through your guidance. Your experience can help someone get proper guidance.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#9-contribute-towards-open-source"&gt;
  &lt;/a&gt;
  9. Contribute towards Open Source
&lt;/h1&gt;

&lt;p&gt;Open Source has a great community built around. Contributing and being part of the Open Source Community allows me to explore and embrace newer perspectives. Contributing to Open Source helps me a lot in improvising my problem-solving skills.&lt;/p&gt;

&lt;p&gt;I get to meet like-minded people and they help me inspire to become a better developer. It is always nice to be part of a peer, passionate about developing and building products. Trust me, it feels great to have your name as a contributor to someone’s project, which boosts your positivity and confidence.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#10-always-be-open-to-continuous-learn"&gt;
  &lt;/a&gt;
  10. Always be Open to Continuous Learn
&lt;/h1&gt;

&lt;p&gt;Firstly make sure that you build upon your fundamentals. Keep your fundamentals strong. If your fundamentals are strong, switching between similar technologies and exploring them would not be a difficult task.&lt;/p&gt;

&lt;p&gt;Keep exploring new technologies. The Software and Technology Industry is an everlasting industry that keeps expanding with time. As time evolves, the industry also keeps evolving with new technology arising every new day. Always ensure you are open to switch and learn, explore and practically work on those technologies.&lt;/p&gt;

&lt;p&gt;Read Technical and Non Technical books to keep yourself aware of the revolutionary changes happening in the industry. Keep reading blogs published by Major MNCs and have an understanding of their system design and architecture and the theory behind it.&lt;/p&gt;

&lt;p&gt;I always keep exploring different technologies, because it helps me have a wider perspective. Wider perspective helps you come out with better and creative solutions. I prefer to be a &lt;strong&gt;Generalizing Specialist&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A Generalizing Specialist is jack-of-all-trades, and master of a few&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#11-be-polite"&gt;
  &lt;/a&gt;
  11. Be polite
&lt;/h1&gt;

&lt;p&gt;Life becomes much easier as a developer when you start listening to others. Always have a certain level of humility when listening to others. It is very important to be open to different perspectives and opinions.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every expert was once a beginner.&lt;/p&gt;

&lt;p&gt;You were a beginner before you reached this stage today.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Always be there for those who need your guidance and keep helping others learn and grow. In the process of guiding others and helping them expand their wings, there is a lot that you will explore and experience as well.&lt;/p&gt;

&lt;p&gt;These were some of the major takeaways from my journey as an Intern to a Developer. I hope all the beginners who are reading the article, will find these useful for your journey. Those who have already passed this phase might find it very much relatable.&lt;/p&gt;

&lt;p&gt;The post has been longer than expected, if you got this far, I appreciate your patience and thank you for your time.&lt;/p&gt;

&lt;p&gt;If you like the article, hit the like button, share the article and subscribe to the blog. If you want me to write an article on specific domain/technology I am provisioned in, feel free to drop a mail at &lt;a href="mailto:shravan@ohmyscript.com"&gt;shravan@ohmyscript.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stay tuned for my next article.&lt;/p&gt;

&lt;p&gt;That’s all for now. Thank you for reading.&lt;/p&gt;

&lt;p&gt;Signing off until next time.&lt;br&gt;&lt;br&gt;
Happy Learning.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>productivity</category>
      <category>career</category>
    </item>
    <item>
      <title>Learning from dev courses...or from side projects? </title>
      <author>Ladislav Szolik</author>
      <pubDate>Tue, 13 Apr 2021 19:43:03 +0000</pubDate>
      <link>https://dev.to/ladislavszolik/learning-from-dev-courses-or-from-side-projects-4i98</link>
      <guid>https://dev.to/ladislavszolik/learning-from-dev-courses-or-from-side-projects-4i98</guid>
      <description>&lt;p&gt;I love to complete a good course on software development or design. It makes me feel that I learned something new and I feel confident about it. 💪&lt;/p&gt;

&lt;p&gt;This last until I face a project and I realize I either forgot some parts or I don't know how to use it here. &lt;/p&gt;

&lt;p&gt;First I thought, the is a problem with my note taking technique or the course material...&lt;/p&gt;

&lt;p&gt;Then recently a friend asked me to build a web app for her small business. It was all on me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hosting&lt;/li&gt;
&lt;li&gt;landing page&lt;/li&gt;
&lt;li&gt;brand + UI design&lt;/li&gt;
&lt;li&gt;database design&lt;/li&gt;
&lt;li&gt;authentication &lt;/li&gt;
&lt;li&gt;mails&lt;/li&gt;
&lt;li&gt;i18n &lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In that half year of discussions, design and development I feel learned a tons and I thought to share with you. &lt;/p&gt;

&lt;p&gt;Having a stake in the game changed the way I build knowledge. &lt;/p&gt;

&lt;p&gt;If you haven't been responsible to build something for somebody else, I can highly recommend! Even more, I am always happy to collaborate!  &lt;/p&gt;

</description>
      <category>discuss</category>
      <category>career</category>
      <category>learning</category>
      <category>writing</category>
    </item>
    <item>
      <title>A Developer’s Guide to Analytics Implementation &amp; Testing</title>
      <author>Avo</author>
      <pubDate>Tue, 13 Apr 2021 18:31:02 +0000</pubDate>
      <link>https://dev.to/avohq/a-developer-s-guide-to-analytics-implementation-testing-3a60</link>
      <guid>https://dev.to/avohq/a-developer-s-guide-to-analytics-implementation-testing-3a60</guid>
      <description>&lt;p&gt;When working with data teams, spending chunks of our time chasing and squashing data bugs is no one's idea of a good time. Those bugs can have a huge impact on the whole product, even if they often seem insignificant, from a development perspective.&lt;/p&gt;

&lt;p&gt;We spend so much time bug-squashing because we often find ourselves put in a reactive position by mediocre data management practices. It would remove huge time-wasters for everyone if we could proactively act on data quality. One way to achieve that is becoming a data stakeholder, a role that guides better workflows from the outset. Eradicating trivial data-quality issues allows all engineers on the team to spend less time chasing frustrating bugs and more time building worthwhile code.&lt;/p&gt;

&lt;p&gt;We should follow implementation best practices; test and validate our implementation to make sure our code functions correctly, and our data is clean. This helps avoid rework down the road. So, if we’d rather create exciting new features than spend our time dealing with bad data and do-overs, here are the best practices for analytics implementation and testing to follow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#caring-about-data-analytics-implementation-and-testing-best-practices-saves-developers-time-and-frustration"&gt;
  &lt;/a&gt;
  Caring about data analytics implementation and testing best practices saves developers time and frustration
&lt;/h2&gt;

&lt;p&gt;When we care about analytics implementation and validation best practices, it prevents bad-data-mitigating rework later on. This saves a huge number of engineering hours that get wasted tracking down the error later — not to mention the frustration in trying to find what went wrong. Other parts of the company might also be waiting for corrected insights to make clear decisions, and they’re getting held up as well.&lt;/p&gt;

&lt;p&gt;One of Avo’s customers is realistically expecting to cut engineering hours spent on implementing analytics by 80%, and that time-saving largely comes from not having to chase down these bad data-bugs anymore. This makes everyone happier — from the developer implementing tracking code to the product manager analyzing the data to the CEO making data based decisions.&lt;/p&gt;

&lt;p&gt;Reworking represents a huge waste of time. Kirill Yakovenko, product manager at Termius, knows this well. Termius’ process for dealing with bad data was laborious and frustrating, &lt;a href="https://www.avo.app/customers/avo-and-mixpanel-empower-termius-developers-to-make-self-serve-data-driven-product-decisions"&gt;before they started using Avo&lt;/a&gt;, of course.&lt;/p&gt;

&lt;p&gt;“The problem with tracking mistakes,” says Yakovenko,“is that each fix takes time. It might take a month to roll out a fix for a single issue to all our applications and users.”&lt;/p&gt;

&lt;p&gt;Fixing analytics issues didn’t just waste developer hours on the fix itself; it also delayed product decisions because insights are crucial to making the right product decisions.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Caring about data analytics implementation and testing best &amp;gt;practices help prevent bad data and rework later on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Analytics implementation and validation processes often aren’t something we consider when we think of testing code because it hasn’t traditionally been a part of our main codebase, nor is it part of our job to design. But caring about data analytics implementation and testing best practices helps prevent bad data and rework later on. As more businesses recognize the importance of online business as a primary revenue source, data insights are important as ever, and product analytics solutions like &lt;a href="https://www.avo.app/amplitude"&gt;Amplitude&lt;/a&gt; and &lt;a href="https://www.avo.app/mixpanel"&gt;Mixpanel&lt;/a&gt; are becoming more critical.&lt;/p&gt;

&lt;p&gt;When trying to implement analytics, many developers report:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Incomplete implementation instructions&lt;/li&gt;
&lt;li&gt;Systems that were designed with data as an afterthought&lt;/li&gt;
&lt;li&gt;Long feedback loops of the correctness of their implementation&lt;/li&gt;
&lt;li&gt;Multiple streams of feedback from different stakeholders&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the testing side, we, and data teams, often don’t prioritize testing our code to make sure we’re not putting garbage into our data systems. Testing is time-expensive, complicated, and easy to get wrong — making it low priority. Low priority generally translates to no testing at all, which means that code either ships broken, breaks during a later update, or ships without analytics altogether 💀.&lt;/p&gt;

&lt;p&gt;However, it’s important that we take an active role in analytics implementation and testing best practices to help make our data teams and our own workdays more efficient. After all, it’s much easier for us to fix data through testing these best practices at the source than it is to make corrections downstream, especially if we’ve already shipped.&lt;/p&gt;

&lt;p&gt;Removing the frustration around data tasks, and recouping development time by tweaking these processes is valuable. Fixing bugs can take us &lt;a href="https://deepsource.io/blog/exponential-cost-of-fixing-bugs/"&gt;as much as 30x the amount of time&lt;/a&gt; to fix later on, if not caught early. Developers within our own network report that up to 30% of issues for a single team are analytics bugs. We can slash that number down to size with these best practices in the bag.&lt;/p&gt;

&lt;p&gt;Here’s how.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#five-best-practices-for-analytics-implementation-and-testing"&gt;
  &lt;/a&gt;
  Five best practices for analytics implementation and testing
&lt;/h2&gt;

&lt;p&gt;These five practices make your analytics tests and implementation more efficient and consistent. Your code can be implemented quickly, without taking shortcuts or trading accuracy for convenience. In other words, you’re beating the &lt;a href="https://blog.amplitude.com/2020-amplify-announcements#menu-item-31630:~:text=builder%E2%80%99s%20paradox%3A%20You%20can%20either%20build,and%20fall%20behind%20on%20customer%20demands"&gt;builder’s paradox&lt;/a&gt;. Think of the efficiency as the “human” process side to data testing and implementation. Easier replication of the same process or request while having clean code on the other side of that replication creates consistency. Think of the consistency as the “code” process side to analytics testing and implementation. Breaking best practices down into matters of efficiency and consistency means you’ll be able to reap the benefits of attending to analytics implementation and testing — less time spent on frustrating re-work and bugs, and more time spent on your regular development workflow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-request-full-implementation-specs-every-time"&gt;
  &lt;/a&gt;
  1. Request full implementation specs every time
&lt;/h3&gt;

&lt;p&gt;Request full implementation specs from your data team or product manager every time, so you know where the code goes in your codebase and what the goal of implementing it is.&lt;/p&gt;

&lt;p&gt;The main obstacle to straightforward implementation is that we often get ill-defined data from our product managers. Sometimes, this results in stop-gap solutions that work “well enough” but require rework later on. Other times, it generates a lot of tiresome back and forth on how to implement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The devs handle implementation as they think it should be done.&lt;/li&gt;
&lt;li&gt;The PM comes back to the devs with something else that they’d prefer.&lt;/li&gt;
&lt;li&gt;The dev redoes the same work.&lt;/li&gt;
&lt;li&gt;The cycle repeats until mutual satisfaction/breakdown.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Holistic specs makes implementation and testing more efficient by preventing confusion around necessary actions. Everyone is clear from the jump, and no back-and-forth is needed.&lt;/p&gt;

&lt;p&gt;Additionally, these guidelines for implementing your code help ensure that all tracking is consistent between multiple platforms each time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-consolidate-feedback-into-a-single-source-of-truth"&gt;
  &lt;/a&gt;
  2. Consolidate feedback into a single source of truth
&lt;/h3&gt;

&lt;p&gt;Consolidate feedback into a single source of data truth that the data team can comment on and answer questions around before the code goes to production. This involves the creation of a draft branch — or a draft version for JSON lovers — of your changes in your event analytics software or your tracking plan.&lt;/p&gt;

&lt;p&gt;Consolidate feedback to ensure that it remains directed and issue-oriented. This also allows you to gather feedback in the specific context of the suggested changes. That way, everyone can see exactly what will be changed and can give feedback on it.&lt;/p&gt;

&lt;p&gt;Feedback can come from anyone, other developers, data analysts, and product managers who all have something to say about your approach to data analytics implementation. This feedback is often ad hoc, making it difficult to track the narrative of the changes needed or questions asked. This is especially true if you don’t have a solid tracking plan and your teams are siloed.&lt;/p&gt;

&lt;p&gt;When you consolidate feedback into a single source of truth it increases implementation and testing efficiency by creating a single environment (e.g., a shared doc or an easy-to-use tool like &lt;a href="https://www.avo.app/"&gt;Avo&lt;/a&gt; 🙌) in which you can surface questions. Not only is it easier to have the relevant context then and there with descriptions, but your data team can be pulled in to answer any questions that might come up. When your data includes all relevant information that’s accessible to all stakeholders at any time, you can expect to see rapid turnaround on required changes and track any conversations about the particular changes made and the conversation about those changes.&lt;/p&gt;

&lt;p&gt;Maintaining a single source of truth also helps consistency by giving you a chance to flag issues that arise during testing. Your data team, meanwhile, gets an equal chance to flag an issue with downstream data if/when they come across it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-embrace-versioning-and-test-environments"&gt;
  &lt;/a&gt;
  3. Embrace versioning and test environments
&lt;/h3&gt;

&lt;p&gt;Embrace versioning and test environments so you can test for analytics implementation errors before that code causes problems in your codebase out in the real world. Faulty code during the product cycle is bad enough, but faulty code in your released product can negatively affect customer success and, by extension, your business’ credibility. For example, if you’re in a commerce business, I can tell you that you will not want to be the developer on call (or on the hook!) for an analytics break during the Black Friday rush.😬&lt;/p&gt;

&lt;p&gt;Development moves fast, and in the interest of time, testing environments and versioning for analytics specs are either non-existent or weak. Instead, the focus is squarely on getting to market in good time, i.e shipping fast. As a result, plenty of teams ship a product only to find out downstream that there’s an issue.&lt;/p&gt;

&lt;p&gt;Devoting attention to versioning and test environments increases the efficiency of your implementation and testing by solving problems at the source. When you scan for errors at the source by using versioning and test environments that work by comparing your product against a golden/ideal dataset and a copy of your production dataset, you can clearly see where improvements are needed. You can make them in real time and then press on with development. So long, rework! 🐬&lt;/p&gt;

&lt;p&gt;Following versioning and test environment best practices also helps with consistency by incorporating them into your standard product development cycle. It becomes the default. Having a set process for testing your code before it goes to production will help you avoid inconsistencies in implementation before it’s out in the real world. Or, as an Avo user puts it, “Fewer stupid errors with analytics.” As a result, you will consistently be able to release bug-free products that perform better, rather than chasing errors down the road.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-map-data-dependencies-and-lineages"&gt;
  &lt;/a&gt;
  4. Map data dependencies and lineages
&lt;/h3&gt;

&lt;p&gt;Create an ecosystem for mapping downstream dependencies. Knowing how updates or changes will affect dependencies ensures fewer breaking changes are made. It will also create an environment that fosters communication between teams responsible for dependencies throughout the project. &lt;/p&gt;

&lt;p&gt;You’ll gain a better understanding of why you’re implementing specific data, and you’ll have a higher stake in the success of capturing and maintaining that data. You’ll also know who to contact if any changes you make cause issues in an important metric or campaign.&lt;/p&gt;

&lt;p&gt;Data implementation is often carried out by devs who have a lot of other demands on their time, so they optimize for getting it done. Code goes to production without checks. This is not only a problem in and of itself — as analytics tracking builds on inconsistent implementation, the quality of the data suffers.&lt;/p&gt;

&lt;p&gt;When you have a better understanding of why data is being implemented, you can see how the work you’re doing is integral to heading off instances of bugs and misaligned code down the road. Not only will this cause less frustration for you, but your data team will thank you, as well as anyone who depends on the insights produced. This is anyone from marketing, product, even up to VP or executive level.&lt;/p&gt;

&lt;p&gt;Mapping dependencies and lineages ahead of time cuts down on rework and headaches that are inevitable down the line when data quality practices are poor. You can paint a representative, upfront picture of what dependencies exist in your code. Testing will then reveal any issues arising as a result of those dependencies before you’re in production. Data produced this way is tracked and tested, and therefore correct, and uniform downstream.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-use-the-right-tools-to-make-your-life-easier"&gt;
  &lt;/a&gt;
  5. Use the right tools to make your life easier
&lt;/h3&gt;

&lt;p&gt;There’s a reason the next big thing in analytics is data governance. What has been a frustrating and error-prone process is now being solved with made-for-purpose analytics governance solutions. Instead of just using manual tests, finding the right data analytics tool can streamline your testing and data management and increase your data quality. This allows you to spend more time on the code you enjoy building, and less time squashing analytics bugs.&lt;/p&gt;

&lt;p&gt;Avo is made so your data implementation is seamless. Your whole team has access to a single source of truth where data specialists can send clear, explicit implementation instructions to developers for each platform. Developers love it, as what that means in practice is: “Goodbye guesswork when implementing code!”&lt;/p&gt;

&lt;p&gt;Using a type-safe tool like Avo increases your efficiency as you no longer need to write explicit data tests every time. Instead, you immediately see if the app is getting the expected data or not. Avo can be used in unit testing as part of your full test suite. This makes it easy for you to test analytics functionality without going too far out of your way. Here you can see an example of how to &lt;a href="https://www.avo.app/docs/best-practices/unit-tests"&gt;initialize Avo in a jest test environment with JavaScript&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tools like Avo are great for your operation’s consistency. Avo’s type-safety means that, unlike a lot of other data analytics tools, you won’t have to troubleshoot your event names and metadata based on syntax. With Avo, you can trust that it’s right every time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-analytics-implementation-and-testing-best-practices-are-important-and-they-dont-have-to-suck"&gt;
  &lt;/a&gt;
  Data analytics implementation and testing best practices are important— and they don’t have to suck
&lt;/h2&gt;

&lt;p&gt;Without any kind of optimization, analytics implementation and testing is a laborious and unappetizing process. By following implementation and testing best practices you’re saving yourself from a magnitude of data bugs and unexpected code re-work. Good news! There’s a tool to help you with this. 🥑&lt;/p&gt;

&lt;p&gt;Having &lt;a href="https://www.avo.app/how-it-works"&gt;Avo&lt;/a&gt; in your tool stack minimizes the amount of valuable time required for implementation and testing episodes. It can eliminate the need for manual testing entirely. In a time when both &lt;a href="https://www.chorus.ai/blog/sales-cycle-velocity-twb"&gt;quality&lt;/a&gt; and speed to market are more important than ever, trust you’re building a better product. Try &lt;a href="https://www.avo.app/how-it-works"&gt;Avo&lt;/a&gt; today to make analytics implementation a breeze for you and your team.&lt;/p&gt;

</description>
      <category>analytics</category>
      <category>tutorial</category>
      <category>product</category>
      <category>testing</category>
    </item>
    <item>
      <title>The main client concerns about IT outsourcing and how we solve them</title>
      <author>Arateg</author>
      <pubDate>Tue, 13 Apr 2021 18:24:14 +0000</pubDate>
      <link>https://dev.to/arateg/the-main-client-concerns-about-it-outsourcing-and-how-we-solve-them-53hf</link>
      <guid>https://dev.to/arateg/the-main-client-concerns-about-it-outsourcing-and-how-we-solve-them-53hf</guid>
      <description>&lt;p&gt;Based in Belarus, our custom software engineering company has delivered more than 50 projects to industries such as healthcare, e-commerce, insurance, education, finance and banking. Since 2014, we have been providing IT outsourcing services to organizations located mainly in the USA and Europe. Collaborating with CEOs and CTOs for over 6 years, our experts have helped them address hundreds of business and technical challenges.&lt;/p&gt;

&lt;p&gt;At the moment, we are witnessing the rapid growth of IT outsourcing. Although this practice allows saving costs and accessing high expertise, there are some issues C-level executives aim to resolve. In this article, we will consider the key concerns of CEOs and CTOs when outsourcing software development tasks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-main-concerns-of-ceos-and-ctos-when-outsourcing-software-development"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The main concerns of CEOs and CTOs when outsourcing software development&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. Legitimate issues&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Legitimate issues have to be taken into account before hiring a software development outsourcing company. When drawing up a contract, you should include the clause about protecting intellectual property to prevent illegal distribution of your ideas, requirements, and know-how.&lt;/p&gt;

&lt;p&gt;Ask a potential IT service partner to sign a non-disclosure agreement before sharing business-specific goals and sending any documents, for instance, a technical specification. Write down deadlines and deliverables to ensure all stages will be completed on time. Since it is often challenging to predict the exact number of the necessary tasks—especially for long-term and complex projects—it is also important to choose a proper payment model.&lt;/p&gt;

&lt;p&gt;Here at Arateg, we always start collaboration with signing an NDA to provide our customers with data confidentiality. We consult with lawyers on all document-related issues in order to ensure proper assignment of rights and intellectual property.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Payment model&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Concluding a pricing model agreement, you and an IT service vendor will define the work scope, timeline, and project cost. It will also indicate what you actually pay for: the number of spent hours, completed tasks, or the end result and performed KPIs.&lt;/p&gt;

&lt;p&gt;Our customers said that sometimes they felt difficulties when choosing a type of an agreement: Fixed Price, Time and Material, Mixed Mode, or Dedicated Team, especially when they wanted to establish a long-term partnership with an IT outsourcing company. In this case, a high level of flexibility is crucial: while it is possible to make accurate time and budget estimations for small occasional activities, it is challenging to calculate the exact cost of building a complex product without a detailed technical specification.&lt;/p&gt;

&lt;p&gt;At Arateg, we analyze the project requirements to understand your business goals and help you draw up a pricing contract according to your needs.&lt;/p&gt;

&lt;p&gt;Read our article &lt;a href="https://arateg.com/blog/how-to-choose-best-pricing"&gt;&lt;strong&gt;“How to choose the best software development pricing model for your project.”&lt;/strong&gt;&lt;/a&gt; to learn the peculiarities of different agreements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Project management&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;How will I control software project development if an IT outsourcing company is located in the other country? This is a common concern of C-level managers that IT service vendors should address. Before delegating IT-related tasks, you should make sure a potential partner provides daily reports containing information about performed tasks, planned activities, and technical issues solved by the team.&lt;/p&gt;

&lt;p&gt;In our software engineering company, we focus on process transparency, so that you can easily control the project. We hold regular in-person and virtual meetings to discuss the required issues and show the outcome of each stage.&lt;/p&gt;

&lt;p&gt;Our experts communicate with you to get a clear understanding of your business needs, show intermediary results, and receive your feedback. We also give you access to a time tracking system, so that you can monitor deadlines and estimate the number of spent hours.&lt;/p&gt;

&lt;p&gt;See what our customers say about cooperating with Arateg.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;“We had a dedicated team of developers and the PM who was my contact person. We had weekly meetings and 1 time a month a meeting in person with the team!”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Marketing Executive at &lt;a href="https://clutch.co/profile/arateg#review-1165668"&gt;&lt;strong&gt;Ad Tech Company&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;“Arateg team is very responsive. We can reach out to them at any time over Slack or Jira. We had never the feeling that we are not heard. The communication is superb. We never lost time due to communication.”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Managing Director and Product Owner at &lt;a href="https://clutch.co/profile/arateg#review-1559162"&gt;&lt;strong&gt;food pre-ordering startup&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Deadlines&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The ability to meet deadlines is one of the key client concerns when outsourcing software development. It is especially important when the organization aims to improve time-to-market while saving product quality. To deliver the project on time, software engineers should need to analyze the customer requirements and estimate the scope of work properly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://arateg.com/blog/key-concerns-of-CEOs-and-CTOs-when-it-outsourcing"&gt;Continue reading...&lt;/a&gt;&lt;/p&gt;

</description>
      <category>startup</category>
      <category>outsourcing</category>
      <category>mobile</category>
      <category>webdev</category>
    </item>
    <item>
      <title>🦋Flutter - Next Level Routing - Error Handling</title>
      <author>Luciano Jung</author>
      <pubDate>Tue, 13 Apr 2021 18:12:47 +0000</pubDate>
      <link>https://dev.to/lucianojung/flutter-next-level-routing-error-handling-3nek</link>
      <guid>https://dev.to/lucianojung/flutter-next-level-routing-error-handling-3nek</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;If you are using a dynamic class for routing in Flutter, you may be concerned about errors. How about a static error page (404) when routing fails so the user knows what's going wrong?!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is Part 3 of 4 of my Series: 🦋Flutter - Next Level Navigation.&lt;br&gt;
If you haven't read &lt;a href="https://dev.to/lucianojung/series/12052"&gt;the other parts&lt;/a&gt; yet, I recommend you to do so.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#content"&gt;
  &lt;/a&gt;
  content
&lt;/h2&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;a href="#error-handling"&gt;Error handling&lt;/a&gt;&lt;/li&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#1-create-an-error-page"&gt;1. Create an error page&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#2-link-to-the-error-page"&gt;2. Link to the error page&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;li&gt;&lt;a href="#individualize-the-error-page"&gt;Individualize the error page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#error-handling"&gt;
  &lt;/a&gt;
  Error handling
&lt;/h2&gt;

&lt;p&gt;To catch errors while navigating within the app, we added error queries in the last post. To redirect the user to an error page now requires 2 simple steps.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-create-an-error-page"&gt;
  &lt;/a&gt;
  1. Create an error page
&lt;/h3&gt;

&lt;p&gt;To display an error page we need to create an error page. This can be done either in a separate class or directly in our previously created &lt;code&gt;RouteGenerator&lt;/code&gt; class. If the error page will be simple, I recommend the last option.&lt;/p&gt;

&lt;p&gt;For the error page we now create an internal private function &lt;code&gt;_errorRoute&lt;/code&gt;, which returns an object &lt;code&gt;Route&amp;lt;dynamic&amp;gt;&lt;/code&gt;. In the returned page we construct a scaffold object that sets our error message. This might look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kd"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_errorRoute&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MaterialPageRoute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;appBar:&lt;/span&gt; &lt;span class="n"&gt;AppBar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Error'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ERROR'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;});&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#2-link-to-the-error-page"&gt;
  &lt;/a&gt;
  2. Link to the error page
&lt;/h3&gt;

&lt;p&gt;Now, to redirect to the page in every error case we just need to return the function &lt;code&gt;_errorRoute()&lt;/code&gt; on every error. So our previously created switch-case block will be extended as follows:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RouteGenerator&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kd"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;generateRoute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RouteSettings&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;      
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;'/page2'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MaterialPageRoute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
                  &lt;span class="n"&gt;IntroductionView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;arguments:&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_errorRoute&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_errorRoute&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#individualize-the-error-page"&gt;
  &lt;/a&gt;
  Individualize the error page
&lt;/h2&gt;

&lt;p&gt;Of course, it is also possible to provide the user with more information on the error page. For example, you can make the error more concrete by trying to pass the cause of the error. This might look like the following:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kd"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_errorRoute&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MaterialPageRoute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;appBar:&lt;/span&gt; &lt;span class="n"&gt;AppBar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Error'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ERROR: '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;});&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&amp;amp;&amp;amp;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_errorRoute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;message:&lt;/span&gt; &lt;span class="s"&gt;'wrong routing name'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Remember to specify the passed error as optional as in the example, so no error can occur when navigating to the error page. I mean how ironic would that be! XD&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZkN631c2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0wtpvq02mzobtz4lx46j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZkN631c2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0wtpvq02mzobtz4lx46j.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/lucianojung"&gt;Follow me&lt;/a&gt; to not miss any following posts&lt;br&gt;
See my latest Projects on &lt;a href="https://github.com/login?return_to=%2Flucianojung"&gt;Github&lt;/a&gt; or at &lt;a href="https://lucianojung.de/#work"&gt;Lucianojung.de&lt;/a&gt;&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#you-may-also-like"&gt;
  &lt;/a&gt;
  You may also like:
&lt;/h4&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/lucianojung" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xWpDhmb2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ST6k_uJ6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/570773/4067a97a-e6f0-46c4-84d9-bf571ec88277.jpeg" alt="lucianojung image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/lucianojung/global-variable-access-in-flutter-3ijm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;🦋Flutter - Manage global variables&lt;/h2&gt;
      &lt;h3&gt;Luciano Jung ・ Feb 10 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#flutter&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#dart&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#bestpractice&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;




&lt;div class="ltag__link"&gt;
  &lt;a href="/lucianojung" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xWpDhmb2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ST6k_uJ6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/570773/4067a97a-e6f0-46c4-84d9-bf571ec88277.jpeg" alt="lucianojung image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/lucianojung/flutter-next-level-navigation-nh4" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;🦋Flutter - Next Level Navigation &lt;/h2&gt;
      &lt;h3&gt;Luciano Jung ・ Apr  4 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#flutter&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#dart&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/lucianojung" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xWpDhmb2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ST6k_uJ6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/570773/4067a97a-e6f0-46c4-84d9-bf571ec88277.jpeg" alt="lucianojung image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/lucianojung/flutter-singelton-pattern-1a38" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;🦋Flutter - Singleton Pattern&lt;/h2&gt;
      &lt;h3&gt;Luciano Jung ・ Mar 22 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#flutter&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#dart&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#pattern&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#bestpractice&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>flutter</category>
      <category>dart</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Simplifying the git forking workflow</title>
      <author>Ben Demboski</author>
      <pubDate>Tue, 13 Apr 2021 18:01:36 +0000</pubDate>
      <link>https://dev.to/bendemboski/simplifying-the-git-forking-workflow-4bkf</link>
      <guid>https://dev.to/bendemboski/simplifying-the-git-forking-workflow-4bkf</guid>
      <description>&lt;p&gt;The standard way to contribute to an open source project that you do not maintain is to fork it, create a branch in your fork where you put your code changes, and then open a pull request into the original repository. I've been doing this for years, and just discovered a tweak to the workflow that I really like and want to share with you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-git-forking-workflow"&gt;
  &lt;/a&gt;
  The git forking workflow
&lt;/h2&gt;

&lt;p&gt;This is a well established pattern that has been written up a number of times (e.g. &lt;a href="https://gist.github.com/Chaser324/ce0505fbed06b947d962"&gt;here&lt;/a&gt; and &lt;a href="https://www.atlassian.com/git/tutorials/comparing-workflows/forking-workflow"&gt;here&lt;/a&gt;), so I'll just briefly outline the process of opening a pull request, and then opening a second pull request, as I originally learned it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-pull-request"&gt;
  &lt;/a&gt;
  First pull request
&lt;/h3&gt;

&lt;p&gt;To open my first pull request, I need to first create a fork. I'll use the Ember test helpers repo as my example that I'm contributing to. Note that none of this is specific to GitHub -- it would work the same with BitBucket or any other git host. My steps are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fork the repo, so the original is at &lt;code&gt;git+ssh://git@github.com/emberjs/ember-test-helpers&lt;/code&gt; and my fork is at &lt;code&gt;git+ssh://git@github.com/bendemboski/ember-test-helpers&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone git+ssh://git@github.com/bendemboski/ember-test-helpers&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -b my-branch-1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Write code&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u origin my-branch-1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;and now I'm ready to open a pull request! This is nice and simple, but where I think it gets a little complicated is when I want to make my second pull request.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#second-pull-request"&gt;
  &lt;/a&gt;
  Second pull request
&lt;/h3&gt;

&lt;p&gt;If some time has passed, Ember test helpers' &lt;code&gt;master&lt;/code&gt; branch will have changed since I created my fork as work on the project continues -- at the very least, I hope my pull request was merged into it! So when creating my new branch, I need to make sure to branch off of the latest &lt;code&gt;master&lt;/code&gt; in the original repo, not the out-of-date one in my fork.&lt;/p&gt;

&lt;p&gt;The steps are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git remote add upstream git+ssh://git@github.com/emberjs/ember-test-helpers&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git fetch upstream master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git merge upstream/master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -b my-branch-2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Write code&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u origin my-branch-2&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Steps 1-4 are just syncing my local mirror of my fork's &lt;code&gt;master&lt;/code&gt; branch with the &lt;code&gt;master&lt;/code&gt; branch in Ember test helpers' repo. Since I don't actually do anything with my fork's &lt;code&gt;master&lt;/code&gt; branch, I could simplify this slightly:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git remote add upstream git+ssh://git@github.com/emberjs/ember-test-helpers&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git fetch upstream master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -b my-branch-2 upstream/master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Write code&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u origin my-branch-2&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#simplified-git-forking-workflow"&gt;
  &lt;/a&gt;
  Simplified git forking workflow
&lt;/h2&gt;

&lt;p&gt;The simplification involves a tweak to the workflow that is pretty minor from a mechanical/what-commands-do-I-type standpoint, but I think simplifies the mental model significantly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-pull-request"&gt;
  &lt;/a&gt;
  First pull request
&lt;/h3&gt;

&lt;p&gt;Instead of cloning my fork of the repo, I will clone the original repo and then add my fork as another remote:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fork the repo, so the original is at &lt;code&gt;git+ssh://git@github.com/emberjs/ember-test-helpers&lt;/code&gt; and my fork is at &lt;code&gt;git+ssh://git@github.com/bendemboski/ember-test-helpers&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git clone git+ssh://git@github.com/emberjs/ember-test-helpers&lt;/code&gt; &amp;lt;-- this is the key difference&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -b my-branch-1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Write code&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git remote add bendemboski git+ssh://git@github.com/bendemboski/ember-test-helpers&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u bendemboski my-branch-1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The server-side result is the same -- my fork has a &lt;code&gt;my-branch-1&lt;/code&gt; branch ready to use for a pull request into the original repo, but the local setup is different in a way that makes opening subsequent pull requests somewhat simpler.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#second-pull-request"&gt;
  &lt;/a&gt;
  Second pull request
&lt;/h3&gt;

&lt;p&gt;Since I have cloned the original repo, I sync my local &lt;code&gt;master&lt;/code&gt; branch just like I would with any other branch, simplifying the beginning of this workflow:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git checkout master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -b my-branch-2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Write code&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u bendemboski my-branch-2&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#practical-differences"&gt;
  &lt;/a&gt;
  Practical differences
&lt;/h2&gt;

&lt;p&gt;The only practical difference between these two versions of the forking workflow is that in the simplified form I'm not trying to keep my fork's &lt;code&gt;master&lt;/code&gt; up-to-date with the original repo's. In fact, I completely ignore my fork's &lt;code&gt;master&lt;/code&gt; branch and just treat my fork as a repository for pushing temporary branches to support opening pull requests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ergonomic-benefits"&gt;
  &lt;/a&gt;
  Ergonomic benefits
&lt;/h2&gt;

&lt;p&gt;Even though the pure number of commands I need to type isn't significantly reduced, in my experience, this simplifies the mental model in a way that reduces friction in the whole process of opening pull requests. The benefits I've experienced are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I don't have to worry about whether my fork's &lt;code&gt;master&lt;/code&gt; branch is up-to-date with the original repo's &lt;code&gt;master&lt;/code&gt; branch&lt;/li&gt;
&lt;li&gt;I don't have to worry about accidentally merging code into my fork's &lt;code&gt;master&lt;/code&gt; branch in a way that would require something like rebase to get back in sync with the original repo's &lt;code&gt;master&lt;/code&gt; branch&lt;/li&gt;
&lt;li&gt;I don't have to think about the fact that I'm working with a fork of a repository aside from the one time (per branch) that I have to push my branch to the remote pointing to my fork (&lt;code&gt;git push -u bendemboski ...&lt;/code&gt; instead of &lt;code&gt;git push -u origin ...&lt;/code&gt;). All of my pulling and branching operations are done just as if I owned the repository, and it's only the first time I push a branch that I have to do something different.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These may not seem like a huge deal, but for me they are, because of the mental simplification of not having to switch between two different "modes" -- the "working on an original repo" mode and the "working on a fork of a repo" mode. When I'm working in my local clone, it makes no difference and I do the same thing either way, and it's only when I need to push a new branch to somewhere remote that I have to think about the difference, and that's exactly when I &lt;em&gt;should&lt;/em&gt; be thinking about the difference!&lt;/p&gt;

&lt;p&gt;This peels off one extra layer of mental load and reduces the friction involved in the whole process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-extra-thought"&gt;
  &lt;/a&gt;
  An extra thought
&lt;/h2&gt;

&lt;p&gt;There can be good reasons to use the forking workflow even for repositories that you &lt;em&gt;can&lt;/em&gt; push to, e.g. to keep from polluting the original repository with experimental branches, etc. As the ever-insightful &lt;a href="https://twitter.com/katiegengler"&gt;@katiegengler&lt;/a&gt; pointed out in a Discord discussion, in such cases following the simplified forking workflow but cloning the original repo using the &lt;code&gt;https&lt;/code&gt; instead of &lt;code&gt;git&lt;/code&gt; URL (&lt;code&gt;git clone https://github.com/emberjs/ember-test-helpers&lt;/code&gt; instead of &lt;code&gt;git clone git+ssh://git@github.com/emberjs/ember-test-helpers&lt;/code&gt;) adds an extra layer of protection preventing you from accidentally pushing to the original repo instead of your fork.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I've found this tweak to the workflow to be a non-trivial simplification that noticeably improves my developer experience of periodically contributing to projects that I don't own. I love the open source model, and I love contributing back to projects that I have benefited from, so I'm always excited to find ways of reducing friction in the process to make me more likely to do it, and free up energy for the actual development work that's fun rather than the git mechanics that are...less fun. I'd love to hear what you think about this simplified workflow, or other ways you've found to reduce friction in contributing to open source projects.&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>bitbucket</category>
    </item>
    <item>
      <title>Build a Scalable Video Chat App with Agora in Django</title>
      <author>Kofi Mupati</author>
      <pubDate>Tue, 13 Apr 2021 18:01:27 +0000</pubDate>
      <link>https://dev.to/mupati/build-a-scalable-video-chat-app-with-agora-in-django-1lle</link>
      <guid>https://dev.to/mupati/build-a-scalable-video-chat-app-with-agora-in-django-1lle</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Django is a high-level Python Web framework that takes care of much of the hassle of Web development so that you can focus on writing your app without needing to reinvent the wheel. While Agora takes away the hassle of building a video chat application from scratch.&lt;/p&gt;

&lt;p&gt;WebRTC is only one of the ways that people can implement video chat features. Companies like &lt;a href="https://www.agora.io/en/"&gt;Agora&lt;/a&gt; also provide a fully packaged video chat SDK to provide a high-quality Real-Time Engagement video chat experience. As someone who has WebRTC development experience, I can tell you there are some limitations with WebRTC, such as:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Quality of experience:&lt;/strong&gt; Since WebRTC is transmitted over the Internet, which is a public domain, the quality of experience is hard to guarantee.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Scalability:&lt;/strong&gt; Scalability is fairly limited on group video calls due to the peer-to-peer nature of WebRTC.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After I was introduced to the Agora platform, I was impressed that setting up the same video call feature is easier with the Agora SDK than with WebRTC. I went ahead to build a video chat application with Agora and Laravel. In this article, however, I don't want Django developers to be left out so we are going to implement a video chat application with Django and Agora.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-agora-is-the-preferred-solution"&gt;
  &lt;/a&gt;
  Why Agora Is the Preferred Solution
&lt;/h1&gt;

&lt;p&gt;After building a video chat app with Agora, I want to highlight some of the advantages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There's one SDK for everything - voice, video, live streaming, screen sharing, and so on.&lt;/li&gt;


&lt;li&gt;I didn't have to set up a turn server with &lt;a href="https://github.com/coturn/coturn"&gt;coturn&lt;/a&gt; on Amazon EC2 as I did in the other implementation to relay traffic between peers on different networks.&lt;/li&gt;

&lt;li&gt;You get &lt;a href="https://www.agora.io/en/pricing/"&gt;10,000 minutes every month &lt;/a&gt;free, and this gives you the flexibility to develop your solution prototype for free.&lt;/li&gt;

&lt;li&gt;You don't have the challenge of managing the underlying infrastructure supporting the video call functionality.&lt;/li&gt;

&lt;li&gt;Intuitive API documentation is available.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Python 3.8.5&lt;/li&gt;
&lt;li&gt;An average knowledge about how to create a Django project and app. The following tutorial can help you: &lt;a href="https://docs.djangoproject.com/en/3.1/intro/tutorial01/%0A"&gt;Writing your first Django app&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt;A free pusher account on &lt;a href="https://pusher.com/"&gt;pusher.com&lt;/a&gt;
&lt;/li&gt;

&lt;li&gt;An understanding of &lt;a href="https://pusher.com/docs/channels/using_channels/presence-channels"&gt;pusher presence channels&lt;/a&gt; and the &lt;a href="https://github.com/pusher/pusher-http-python#installation"&gt;python server library&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt;Agora Developer Account: (See &lt;a href="https://www.agora.io/en/blog/how-to-get-started-with-agora"&gt;How to get started with Agora&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project Setup
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create and activate a python3 virtual environment for this project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open your terminal or command prompt and navigate to your Django project directory. We will use &lt;strong&gt;mysite&lt;/strong&gt; as the project name for this tutorial.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the necessary packages from your terminal or command prompt.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    pip install pusher python-dotenv

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a new app called agora. Run the following from your terminal.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
   python manage.py startapp agora

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the project directory i.e &lt;strong&gt;mysite&lt;/strong&gt;, run your migrations and create new super users by running the following command from your terminal.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    python manage.py migrate
// run the next command multiple times to create more users
    python manage.py createsuperuser

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Download the AgoraDynamicKey Python3 code from the Agora repository: &lt;a href="https://github.com/AgoraIO/Tools/tree/master/DynamicKey/AgoraDynamicKey/python3"&gt;AgoraDynamicKey&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Keep the downloaded folder in a location outside the project folder. Some of these files from the folder will be copied into our project when we're configuring the back end.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#configuring-the-backend"&gt;
  &lt;/a&gt;
  Configuring the Backend
&lt;/h1&gt;

&lt;p&gt;We will create the views and classes with the methods needed to generate the Agora token to establish a call. We will set up Pusher at the server-side as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-add-agora-to-the-installed-apps-in-mysitesettingspy"&gt;
  &lt;/a&gt;
  1. Add agora to the installed apps in mysite/settings.py
&lt;/h3&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#2-add-application-routes"&gt;
  &lt;/a&gt;
  2. Add application routes
&lt;/h3&gt;

&lt;p&gt;Create a file named &lt;strong&gt;urls.py&lt;/strong&gt; in the agora directory and add the following code.&lt;br&gt;
From your terminal or command prompt:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```bash

   touch agora/urls.py

```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Add the following to &lt;strong&gt;agora/urls.py&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;Register the agora app routes at the project level. Add the following code to &lt;strong&gt;mysite/urls.py&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#3-add-the-downloaded-agoradynamickey-generator-files"&gt;
  &lt;/a&gt;
  3. Add the downloaded AgoraDynamicKey generator files
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Open your command prompt, and in the &lt;strong&gt;agora&lt;/strong&gt; directory, create a sub-directory named &lt;strong&gt;agora_key&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
   &lt;span class="nb"&gt;cd &lt;/span&gt;agora
   &lt;span class="nb"&gt;mkdir &lt;/span&gt;agora_key

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy &lt;strong&gt;AccessToken.py&lt;strong&gt; and &lt;strong&gt;RtcTokenBuilder.py&lt;/strong&gt; from the &lt;strong&gt;src&lt;/strong&gt; directory in the downloaded files and add them to the &lt;strong&gt;agora_key&lt;/strong&gt; directory.&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-create-the-views-for-the-agora-app-in-agoraviewspy"&gt;
  &lt;/a&gt;
  4. Create the views for the Agora app in agora/views.py
&lt;/h3&gt;

&lt;p&gt;Add the following block of code to the &lt;strong&gt;agora/views.py&lt;/strong&gt; file.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#breakdown-of-methods-in-agoraviewspy"&gt;
  &lt;/a&gt;
  Breakdown of Methods in agora/views.py
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;index:&lt;/strong&gt; To view the video call page. Only authenticated users can view the page but non-authenticated users are redirected to the login page. We return a list of all the users apart from the currently authenticated user to be rendered on the front end.&lt;/li&gt;

&lt;li&gt;
&lt;strong&gt;pusher_auth:&lt;/strong&gt; It serves as the endpoint for authenticating the logged-in user as they join the pusher's presence channel. The ID and name of the user are returned after successful authentication with the pusher.&lt;/li&gt;

&lt;li&gt;
&lt;strong&gt;generate_agora_token:&lt;/strong&gt; To generate the Agora dynamic token. The token is used to authenticate app users when they join the agora channel to establish a call.&lt;/li&gt;

&lt;li&gt;
&lt;strong&gt;call_user:&lt;/strong&gt; This triggers a &lt;strong&gt;make-agora-call&lt;/strong&gt; event on the &lt;strong&gt;presence-online-channel&lt;/strong&gt; to which all logged-in users are subscribed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The data broadcast with the &lt;strong&gt;make-agora-call&lt;/strong&gt; event across the &lt;strong&gt;presence-online-channel&lt;/strong&gt; contains the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;userToCall:&lt;/strong&gt; This is the ID of the user who is supposed to receive a call from a caller.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;channelName:&lt;/strong&gt; This is the call channel that the caller has already joined on the front end. This is a channel created with the Agora SDK on the client-side. It is the room the caller has already joined, waiting for the callee to also join to establish a call connection.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;from:&lt;/strong&gt; The ID of the caller.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From the &lt;strong&gt;make-agora-call&lt;/strong&gt; event, a user can determine whether they are being called if the userToCall value matches their ID. We show an incoming call notification with a button to accept the call. They know who the caller is by the value of from.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#configuring-the-front%C2%A0end"&gt;
  &lt;/a&gt;
  Configuring the Front End
&lt;/h1&gt;

&lt;p&gt;We are going to create the user interface for making and receiving the video call with the ability to toggle the on and off states of the camera and the microphone.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-create-the-html-file-for-the-index%C2%A0view"&gt;
  &lt;/a&gt;
  1. Create the HTML file for the index view.
&lt;/h3&gt;

&lt;p&gt;The HTML file will contain the links to the CDN for Agora SDK, Vue.js, Pusher, Bootstrap for styling, and our custom CSS and Javascript.&lt;/p&gt;

&lt;p&gt;In your terminal navigate to the &lt;strong&gt;agora&lt;/strong&gt; directory, create a &lt;strong&gt;templates&lt;/strong&gt; directory and an &lt;strong&gt;agora&lt;/strong&gt; subdirectory within it.&lt;br&gt;
Create your &lt;strong&gt;index.html&lt;/strong&gt; file in the &lt;strong&gt;agora&lt;/strong&gt; subdirectory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    cd agora
    mkdir -p templates/agora
    touch templates/agora/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Add the following to the &lt;strong&gt;index.html&lt;/strong&gt; file:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-create-the-static%C2%A0files"&gt;
  &lt;/a&gt;
  2. Create the static files
&lt;/h3&gt;

&lt;p&gt;We have &lt;strong&gt;index.css&lt;/strong&gt; for custom styling and &lt;strong&gt;index.js;&lt;/strong&gt; our script for handling the call logic.&lt;/p&gt;

&lt;p&gt;Add the following to &lt;strong&gt;index.js&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Add the following to index.css&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#breakdown-of-the-agora-call-page"&gt;
  &lt;/a&gt;
  Breakdown of the Agora Call Page
&lt;/h4&gt;

&lt;p&gt;On the video call page, i.e &lt;strong&gt;app/templates/agora/ndex.html&lt;/strong&gt;, we display buttons that bear the name of each registered user and whether they are online or offline at the moment.&lt;/p&gt;

&lt;p&gt;To place a call, we click the button of a user with online status. An online user indicates one who is available to receive a call. For our demo, we see a list of users. The user named &lt;strong&gt;Bar&lt;/strong&gt; is indicated as being online. The caller named &lt;strong&gt;Foo&lt;/strong&gt; can call &lt;strong&gt;Bar&lt;/strong&gt; by clicking the button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YiCWg2qk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AP2jNnqj_GriDK5eL" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YiCWg2qk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AP2jNnqj_GriDK5eL" alt="Users with Call Buttons"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bar&lt;/strong&gt; gets an incoming call notification with Accept and Decline buttons and the name of the caller.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KA-SlCHE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AuLdMRCpbatnuyyt7" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KA-SlCHE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AuLdMRCpbatnuyyt7" alt="Incoming Call Notification"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From the call notification image above, we see that the caller's name is &lt;strong&gt;Foo&lt;/strong&gt;. &lt;strong&gt;Bar&lt;/strong&gt; can then accept the call for a connection to be established.&lt;/p&gt;

&lt;p&gt;The following diagram explains the call logic in terms of the code:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vrf2RK55--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2560/1%2AWWf_DkRuKz0-cFywT7uXBg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vrf2RK55--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2560/1%2AWWf_DkRuKz0-cFywT7uXBg.jpeg" alt="Call Logic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-update-env-variables-with-pusher-and-agora%C2%A0keys"&gt;
  &lt;/a&gt;
  3. Update env variables with Pusher and Agora keys
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;.env&lt;/strong&gt; file is located at the root of your project folder. Add the credentials you got from Agora and Pusher.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PUSHER_APP_ID=
PUSHER_APP_KEY=
PUSHER_APP_SECRET=
PUSHER_APP_CLUSTER=

AGORA_APP_ID=
AGORA_APP_CERTIFICATE=
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Start the Django development server from your terminal.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
    python manage.py runserver

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open two different browsers or two instances of the same browser, with one instance in incognito mode, and go to &lt;a href="http://127.0.0.1:8000&amp;lt;br&amp;gt;%0Atarget="&gt;&lt;/a&gt;&lt;a href="http://127.0.0.1:8000"&gt;http://127.0.0.1:8000&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You are presented with the Django admin login page if you are not already logged in.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After successful login, you will be taken to the Django admin dashboard. Click on the VIEW SITE link at the top right to navigate to the video call page.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In each of the browsers you opened, the other users registered on the application are displayed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In one browser, you can call the user who is logged in and on the other browser by clicking the button that bears their name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The other user is prompted to click the Accept button to fully establish the call.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#video-demonstration-of-the-video-call"&gt;
  &lt;/a&gt;
  Video Demonstration of the Video Call
&lt;/h1&gt;

&lt;p&gt;To confirm that your demo is functioning properly, see my demo video as an example of how the finished project should look and function:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/KAjVu51BKUY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;You have now implemented the video call feature in your Django application! It's not that hard, right?&lt;/p&gt;

&lt;p&gt;To include video calling functionality in your web app, you don't have to build it from scratch.&lt;/p&gt;

&lt;p&gt;Agora provides a lot of great features out of the box. It also helps businesses save development hours when implementing video chat into existing projects. The only thing a developer has to do is build a compelling front end - Agora handles the video chat back end.&lt;/p&gt;

&lt;p&gt;Link to project repository: &lt;a href="https://github.com/Mupati/agora-django-video-call"&gt;https://github.com/Mupati/agora-django-video-call&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Online Demo Link: &lt;a href="https://github.com/Mupati/agora-django-video-call"&gt;https://fleet-server.herokuapp.com/agora/login/?next=/agora/dashboard/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure the demo link or production version is served on HTTPS.&lt;/p&gt;

&lt;p&gt;Test accounts:&lt;br&gt;&lt;br&gt;
&lt;a href="mailto:foo@example.com"&gt;foo@example.com&lt;/a&gt;: DY6m7feJtbnx3ud&lt;br&gt;&lt;br&gt;
&lt;a href="mailto:bar@example.com"&gt;bar@example.com&lt;/a&gt;: Me3tm5reQpWcn3Q&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#other-resources"&gt;
  &lt;/a&gt;
  Other Resources
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#agorartc.client.html%23on"&gt;Available events on the Agora Client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For more information about Agora.io applications, take a look at the: &lt;a href="https://docs.agora.io/en/Video/run_demo_video_call_web?platform=Web"&gt;Agora Quickstart Guides&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Take a look at the complete documentation for the functions discussed above and many more: &lt;a href="https://docs.agora.io/en/Video/API%20Reference/web/index.html"&gt;Agora Web SDK API&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also invite you to &lt;a href="https://app.slack.com/client/T265K8ZT9/C263V5MFV/thread/CPQP4GMJ9-1585749906.115600"&gt;join the Agora.io Developer Slack community&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>agora</category>
      <category>videocall</category>
    </item>
    <item>
      <title>Python IDEs and code editors compilation</title>
      <author>Matvey Romanov</author>
      <pubDate>Tue, 13 Apr 2021 17:53:22 +0000</pubDate>
      <link>https://dev.to/ra1nbow1/python-ides-and-code-editors-compilation-2l3f</link>
      <guid>https://dev.to/ra1nbow1/python-ides-and-code-editors-compilation-2l3f</guid>
      <description>&lt;p&gt;Whether you are a beginner or an experienced developer, quality IDEs or code editors are useful. With them, you don't need to spend a lot of time setting up tools, and they help optimize development. In addition, constant updates help developers keep track of innovations. Let's go through the well-known IDE and code editor for Python and analyze their pros and cons.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pycharm"&gt;
  &lt;/a&gt;
  PyCharm
&lt;/h1&gt;

&lt;p&gt;Cross-platform IDE is compatible with &lt;strong&gt;Linux&lt;/strong&gt;, &lt;strong&gt;macOS&lt;/strong&gt;, and &lt;strong&gt;Windows&lt;/strong&gt;. Supports Python versions 2 (2.7) and Python 3 (3.5 and higher). It comes with testing and debugging support, refactoring features, and code navigation. It also allows you to run, debug, test, and deploy applications on remote hosts or virtual machines.&lt;/p&gt;

&lt;p&gt;The professional edition allows you to use popular frameworks and libraries for Data Science. The code editor supports &lt;strong&gt;JavaScript&lt;/strong&gt;, &lt;strong&gt;TypeScript&lt;/strong&gt;, &lt;strong&gt;CoffeeScript&lt;/strong&gt;, &lt;strong&gt;JS&lt;/strong&gt;, and &lt;strong&gt;Node.js&lt;/strong&gt;, &lt;strong&gt;AngularJS&lt;/strong&gt;, and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt; can be integrated with VCS and database tools; remote interpreters, SSH clients, Vagrant and Docker, Oracle, PostgreSQL, MySQL, and SQL Server. It also supports IPython Notebook, Anaconda, and so on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;the ability to view the entire source code with a single click;&lt;/li&gt;
&lt;li&gt;lots of plugins;&lt;/li&gt;
&lt;li&gt;easy to use;&lt;/li&gt;
&lt;li&gt;great community support;&lt;/li&gt;
&lt;li&gt;easy installation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;some chips are only available in the paid version;&lt;/li&gt;
&lt;li&gt;there may be a problem when trying to fix tools like venv;&lt;/li&gt;
&lt;li&gt;resource-intensive.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#sublime-text"&gt;
  &lt;/a&gt;
  Sublime Text
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt; is a cross-platform text editor in C++ and Python. Originally developed &lt;strong&gt;as an extension for Vim&lt;/strong&gt;. Since version 2.0, it supports &lt;strong&gt;44 major programming languages&lt;/strong&gt;, including Python. Its main principles: a minimalistic interface and an emphasis on code.&lt;/p&gt;

&lt;p&gt;It is a fast text editor for organizing code. It is easy to configure, has high performance and a powerful API. In addition, it is convenient to switch between projects, search for specific fragments in the code and go to any function or symbol.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;high performance;&lt;/li&gt;
&lt;li&gt;simple interface;&lt;/li&gt;
&lt;li&gt;supports many languages.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;no debugger;&lt;/li&gt;
&lt;li&gt;it may be difficult for beginners;&lt;/li&gt;
&lt;li&gt;you need a license.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#visual-studio-code"&gt;
  &lt;/a&gt;
  Visual Studio Code
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; is an open-source cross-platform code editor from Microsoft. Inside, there is a debugger, an IntelliSense &lt;strong&gt;code auto-completion mechanism&lt;/strong&gt;, Lint support, and integration with version control systems. As well as a built-in terminal and a large market of free extensions and the ability to work with the frameworks nunit mstest, pytest or nose.&lt;/p&gt;

&lt;p&gt;For fans of a minimalistic interface, there is a "zen mode". It only shows the file you are currently working on and hides the "extra" interface.&lt;/p&gt;

&lt;p&gt;VS Code is a &lt;strong&gt;lightweight IDE&lt;/strong&gt; that can be extended with a variety of plugins. It also adds support for new languages, themes, debugger, and so on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;almost five thousand extensions;&lt;/li&gt;
&lt;li&gt;import keyboard shortcuts from other code editors;&lt;/li&gt;
&lt;li&gt;easy;&lt;/li&gt;
&lt;li&gt;user-friendly interface.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;slow startup;&lt;/li&gt;
&lt;li&gt;slow search;&lt;/li&gt;
&lt;li&gt;performance is reduced if you install a lot of plugins.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#atom"&gt;
  &lt;/a&gt;
  Atom
&lt;/h1&gt;

&lt;p&gt;An open-source cross-platform editor written in CSS, JavaScript, HTML, and Node.js.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://atom.io/"&gt;Atom&lt;/a&gt; comes with a built-in package manager where you can download and install additional packages. And also create your own. A large community is working on creating new packages.&lt;/p&gt;

&lt;p&gt;Atom has &lt;strong&gt;Git and GitHub integration&lt;/strong&gt;, and the ability to work on code together with colleagues in real-time using Teletype.&lt;/p&gt;

&lt;p&gt;The editor has a clean and fully customizable user interface, with 8 light and dark themes pre-installed. &lt;strong&gt;You can configure everything&lt;/strong&gt;, right down to the basic functions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;fully customizable interface;&lt;/li&gt;
&lt;li&gt;built-in package manager;&lt;/li&gt;
&lt;li&gt;great community support.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;takes up a lot of RAM;&lt;/li&gt;
&lt;li&gt;need optimization;&lt;/li&gt;
&lt;li&gt;the performance is lower than that of some competitors (for example, Sublime Text).&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#thonny"&gt;
  &lt;/a&gt;
  Thonny
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://thonny.org/"&gt;Thonny&lt;/a&gt; is a free Python IDE designed specifically &lt;strong&gt;for beginners&lt;/strong&gt;. Comes with a built-in version of Python v3. x. Compatible with Linux, macOS, and Windows.&lt;/p&gt;

&lt;p&gt;The built-in debugger makes it easy to find syntax errors, such as parentheses and unclosed quotes. In addition, it is easy to use, and you do not need to know the breakpoints.&lt;/p&gt;

&lt;p&gt;Variables are represented based on a simplified model (but you can also switch to realistic ones). It also has a simple package installation interface and a record of user actions. It is useful to analyze the work at first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;simple interface;&lt;/li&gt;
&lt;li&gt;suitable for beginners;&lt;/li&gt;
&lt;li&gt;no distractions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;the basic functionality may not be enough to work with.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#spyder"&gt;
  &lt;/a&gt;
  Spyder
&lt;/h1&gt;

&lt;p&gt;An IDE designed for data analysts and engineers and compatible with Linux, macOS, and Windows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.spyder-ide.org/"&gt;Spyder&lt;/a&gt; uses a PDB debugger that displays the line, file, and state of each breakpoint. And can quickly edit variables at each point through the variable explorer. By the way, the explorer itself shows links to all objects and allows you to interact with them.&lt;/p&gt;

&lt;p&gt;The IDE comes with a large library that is loaded when installed with Anaconda. You can also download &lt;strong&gt;more than 1,500 additional Python or R data science packages&lt;/strong&gt;. Spyder also allows you to extend the functionality with third-party plugins, such as Spyder Notebook, Terminal, UnitTest, Reports, and so on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;fairly light and fast;&lt;/li&gt;
&lt;li&gt;easy to learn, suitable for beginners;&lt;/li&gt;
&lt;li&gt;suitable for research work.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;difficulties with the integration of version control systems;&lt;/li&gt;
&lt;li&gt;it is difficult to configure.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#pyzo"&gt;
  &lt;/a&gt;
  Pyzo
&lt;/h1&gt;

&lt;p&gt;An open-source cross-platform IDE for Python that strives for simplicity and interactivity.&lt;/p&gt;

&lt;p&gt;The system is based on two components: &lt;strong&gt;the shell and the tools&lt;/strong&gt;. These include the source structure, online help, workspace, project manager, and so on. The code for &lt;a href="https://pyzo.org/"&gt;Pyzo&lt;/a&gt; is written in Python 3 with a Qt GUI.&lt;/p&gt;

&lt;p&gt;The shell includes magic commands, creating multiple configurations, pip support for package management, PySide, Tk, PyQt4, GTK, fltk, and wx, post-mortem debugging, and more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;simple;&lt;/li&gt;
&lt;li&gt;good support for beginners.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;you need a distribution.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#eric-python-ide"&gt;
  &lt;/a&gt;
  Eric Python IDE
&lt;/h1&gt;

&lt;p&gt;This is a cross-platform IDE written in Python. &lt;a href="https://eric-ide.python-projects.org/"&gt;Eric&lt;/a&gt; has a powerful debugger that debugs multithreaded and multiprocessor programs. There is support for &lt;strong&gt;unit testing&lt;/strong&gt;, a built-in hex editor, an SQL browser, an icon designer, and many other tools. Thanks to the built-in Qt supports the creation of &lt;strong&gt;graphical interfaces&lt;/strong&gt; using Qt Designer.&lt;/p&gt;

&lt;p&gt;The IDE has an advanced project management system, an automatic code completion feature, and the ability to collaborate in real-time. Eric supports Mercurial and SVN version control. Git support is available through the plugin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;suitable for complex projects;&lt;/li&gt;
&lt;li&gt;spell check;&lt;/li&gt;
&lt;li&gt;the ability to work with other developers in real-time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;overloaded interface;&lt;/li&gt;
&lt;li&gt;it can be difficult to install.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#vim"&gt;
  &lt;/a&gt;
  Vim
&lt;/h1&gt;

&lt;p&gt;Cross-platform modal code editor for Python. Supports three operating modes: normal, insert mode, and command-line mode.&lt;/p&gt;

&lt;p&gt;Vim is free software that supports many plugins and extensions and works with different programming languages. It is configured by adding extensions or changing its configuration file. So, it is easy to adapt it for Python development.&lt;/p&gt;

&lt;p&gt;It also supports non-software applications that other editors don't have.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;recognition and conversion of file formats (UNIX, MS-DOS or Mac);&lt;/li&gt;
&lt;li&gt;lots of plugins;&lt;/li&gt;
&lt;li&gt;you can configure and extend it with .vimrc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;it takes time to master;&lt;/li&gt;
&lt;li&gt;not the most user-friendly interface.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Hope you enjoyed my article. Follow my &lt;a href="https://github.com/ra1nbow1"&gt;Github&lt;/a&gt; &amp;lt;3&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>productivity</category>
      <category>tools</category>
    </item>
    <item>
      <title>Write a REST API in Golang following best practices</title>
      <author>Lucas Neves Pereira</author>
      <pubDate>Tue, 13 Apr 2021 17:35:37 +0000</pubDate>
      <link>https://dev.to/lucasnevespereira/write-a-rest-api-in-golang-following-best-practices-pe9</link>
      <guid>https://dev.to/lucasnevespereira/write-a-rest-api-in-golang-following-best-practices-pe9</guid>
      <description>

&lt;p&gt;Hello there! Lately I have noticed that a lot of enterprises are starting to migrating their code base previously in Java, Python, C++ to Golang, specially for those using microservices.&lt;/p&gt;

&lt;p&gt;Therefore writing a REST API in Go is surely a skill that will be on demand, but what triggered me to write this article was to show how to build such API using the best practices.&lt;/p&gt;

&lt;p&gt;To follow those practices I had mainly two sources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;One of them was the GitHub repository for the &lt;a href="https://github.com/golang-standards/project-layout"&gt;Golang Standard for project layout&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another one was &lt;a href="https://youtu.be/rWBSMsLG8po"&gt;this video&lt;/a&gt; of &lt;a href="https://medium.com/u/f25c357b8e4c"&gt;Mat Ryer&lt;/a&gt; that explains how he writes Golang HTTP services. I did not followed every rule he had but he really inspired me to write this API.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#lets-do-this%C2%A0"&gt;
  &lt;/a&gt;
  Let's do this 👍🏼
&lt;/h3&gt;

&lt;p&gt;In this article, as an example I'll be building a very simple Students REST API. I'll try not to add a bunch of fields and methods to keep it simple and stay as minimalist as possible, still following the best practices, the goal here is really to inspire you to write and structure your Golang services in the best way possible 🙂&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#structure-the%C2%A0project"&gt;
  &lt;/a&gt;
  Structure the project
&lt;/h4&gt;

&lt;p&gt;Start by creating a folder in your machine, &lt;code&gt;mkdir students-api&lt;/code&gt;, and change your directory to that folder, &lt;code&gt;cd students-api&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now let's init a new go module by running &lt;code&gt;go mod init students-api&lt;/code&gt; , this should create a &lt;strong&gt;go.mod&lt;/strong&gt; file and now we can open your directory in your favourite code editor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--58Ax34f_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Aew6-Onu-edE9iSPySSzXSg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--58Ax34f_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Aew6-Onu-edE9iSPySSzXSg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then if I want to follow the Golang project layout standards I should create a &lt;strong&gt;cmd/server&lt;/strong&gt; directory where I'll have my &lt;strong&gt;main.go&lt;/strong&gt; that is my entry point for my app.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You may be wondering why we have a subdirectory &lt;strong&gt;server/&lt;/strong&gt; if we are already in a &lt;strong&gt;cmd/&lt;/strong&gt; directory, this is well thought to handle scalability to our project.&lt;br&gt;
For example, if later we want to build a cli for our API, in that case we could just add a &lt;strong&gt;cmd/cli&lt;/strong&gt; directory without messing with our functions in &lt;strong&gt;cmd/server/main.go &lt;/strong&gt;. If you're seeking more information about this, just check the &lt;a href="https://github.com/golang-standards/project-layout"&gt;&lt;strong&gt;golang standards&lt;/strong&gt;&lt;/a&gt; GitHub repository.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our &lt;strong&gt;main.go&lt;/strong&gt; file let's declare our package main and write a func &lt;strong&gt;Run()&lt;/strong&gt; that will run our application and return and error if there is one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NnlsdRdH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AhQjXy9CjyCmMgkQTIjV4AQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NnlsdRdH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AhQjXy9CjyCmMgkQTIjV4AQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our students API is now correctly initialised and we can move on by creating our first endpoint.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#first-endpoint"&gt;
  &lt;/a&gt;
  First Endpoint
&lt;/h4&gt;

&lt;p&gt;The first endpoint will be a &lt;strong&gt;status&lt;/strong&gt; endpoint that will check if our API is up or not. Creating and endpoint &lt;strong&gt;api/status&lt;/strong&gt; means using http, let's once again follow the project layout best practices and create and &lt;strong&gt;internal/&lt;/strong&gt; directory that will contain all of the packages and code that is private, meaning the code that we don't really want other to import into their code base. Most of our code for this project will be in our internal directory.&lt;/p&gt;

&lt;p&gt;Inside of &lt;strong&gt;internal/&lt;/strong&gt; let's create a package &lt;strong&gt;http&lt;/strong&gt; that will contain a &lt;strong&gt;handler.go&lt;/strong&gt; file where we will &lt;em&gt;"handle"&lt;/em&gt; all of our http related logic.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xZhRCRm2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Aa9_fCbobAfi4OlnQ4Klhmg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xZhRCRm2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Aa9_fCbobAfi4OlnQ4Klhmg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;⚠️ Attention! In the screenshot above I've made a mistake and called the package handler instead of &lt;/em&gt;&lt;strong&gt;&lt;em&gt;http.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this &lt;strong&gt;handler.go&lt;/strong&gt; file we're going to define a struct &lt;strong&gt;Handler&lt;/strong&gt; that will store pointers to our services later and we will had 2 more function.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  A &lt;strong&gt;NewHandler()&lt;/strong&gt; func that will insatiate the &lt;strong&gt;Handler&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;  A &lt;strong&gt;InitRoutes()&lt;/strong&gt; func that will initialise our endpoints.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'll also be using the &lt;a href="https://github.com/gorilla/mux"&gt;&lt;strong&gt;gorilla/mux&lt;/strong&gt;&lt;/a&gt; router in this project because it saves us a bit of code with the standard net/http package. So in our struct will be adding a &lt;strong&gt;Router&lt;/strong&gt; that will be a pointer to the gorilla/mux router.&lt;/p&gt;

&lt;p&gt;Make sure to run a &lt;code&gt;go get -u github.com/gorilla/mux&lt;/code&gt; to add it as a dependency.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5xPodHSL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AK4OFxO-YmkRfXbmp5WRepw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5xPodHSL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AK4OFxO-YmkRfXbmp5WRepw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;⚠️ Attention! In the screenshot above I've made a mistake and called the package handler instead of &lt;/em&gt;&lt;strong&gt;&lt;em&gt;http.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The function &lt;strong&gt;InitRoutes()&lt;/strong&gt; will be a receiver function of our &lt;strong&gt;Handler&lt;/strong&gt;, if you are coming from an &lt;em&gt;Object Oriented Programming&lt;/em&gt; background just think of &lt;strong&gt;Handler&lt;/strong&gt;as a class and &lt;strong&gt;InitRoutes()&lt;/strong&gt; as a method of the &lt;strong&gt;Handler&lt;/strong&gt; class. Moving on, since it's a receiver function of Handler we have access to it so we can call &lt;strong&gt;Router&lt;/strong&gt; and set it to &lt;strong&gt;mux.NewRouter()&lt;/strong&gt;.&lt;br&gt;
Then we can use our Handler Router and call &lt;strong&gt;HandleFunc&lt;/strong&gt; like we would with the standard net/http package but we are using the gorilla/mux router.&lt;br&gt;
In the HandleFunc method we pass the path of our status endpoint and as a second argument an anonymous function or literal function that has a response writer and a pointer to our request as argument. Once we hit the endpoint, we are just printing to the response writer "Status Up".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p8VPa1aQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Alb49OHvIE35abqCHMkLt3A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p8VPa1aQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Alb49OHvIE35abqCHMkLt3A.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;⚠️ Attention! Rename the package from handler to &lt;/em&gt;&lt;strong&gt;&lt;em&gt;http.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To test this endpoint we need to go back to our &lt;strong&gt;cmd/server/main.go&lt;/strong&gt; file and import our internal http package (we can add an alias to "rename" the import). Once our package is imported we can call our &lt;strong&gt;NewHandler()&lt;/strong&gt; method then init our routes and finally &lt;strong&gt;ListenAndServe&lt;/strong&gt; using the &lt;strong&gt;net/http&lt;/strong&gt; package to &lt;strong&gt;ListenAndServe&lt;/strong&gt; in a port of our choice passing in our internal Handler Router as a second argument. If something goes wrong we just return an error and our &lt;strong&gt;main()&lt;/strong&gt; func will handle it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T0Ymqv3g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Aqt2yl8_dMc8SIwZDt6D2tg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T0Ymqv3g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Aqt2yl8_dMc8SIwZDt6D2tg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run the server with &lt;code&gt;go run cmd/server/main.go&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--33eNWlh8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AHRKCWJoko3uVbdCACNMiVQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--33eNWlh8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AHRKCWJoko3uVbdCACNMiVQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And in a different terminal window test the endpoint by running:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;curl http://localhost:9000/api/status&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r4ddLGGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A0wS4SsWKQe6d5n_NpKufJA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r4ddLGGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A0wS4SsWKQe6d5n_NpKufJA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our first endpoint works and our students api is up! 👍🏼&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-database"&gt;
  &lt;/a&gt;
  The Database
&lt;/h4&gt;

&lt;p&gt;It is time to implement our database package. In this project I've choose to use &lt;strong&gt;PostgreSQL&lt;/strong&gt; and I'll be using &lt;strong&gt;Docker&lt;/strong&gt; to to set it up locally. I'm assuming you have Docker and PostgreSQL in your machine for this tutorial.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are not using Docker and you prefer to use PostgreSQL locally on MacOS, i recommend &lt;a href="https://eggerapps.at/postico/"&gt;&lt;strong&gt;Postico&lt;/strong&gt;&lt;/a&gt; that is a really nice client for postgre that I enjoy using.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Head over to a terminal window and run the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run ----name students-db ----env POSTGRES_PASSWORD=postgres -p 5432:5432 -d postgres&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will basically fetch a PostgreSQL image on docker hub and run it on your machine. You can run a &lt;code&gt;docker ps&lt;/code&gt; to make sure your container is running on detached mode. By the way, if you want to stop it you just have to run &lt;code&gt;docker stop students-db&lt;/code&gt; and &lt;code&gt;docker rm students-db&lt;/code&gt; to actually remove it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--myh4cya---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AABrV8h6l1MMdueGcuGS4Qw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--myh4cya---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AABrV8h6l1MMdueGcuGS4Qw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have a database running let's go back to our code and start by fetching 2 github packages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;go get -u gorm.io/gorm&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;go get -u gorm.io/driver/postgres&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://gorm.io/"&gt;Gorm&lt;/a&gt; is a ORM library to help us work with our database, I really enjoy it, is quite simple to use that's why I'm using it.&lt;/p&gt;

&lt;p&gt;Let's create a &lt;strong&gt;database&lt;/strong&gt; package inside of &lt;strong&gt;internal/&lt;/strong&gt; with a &lt;strong&gt;database.go&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;We are going to have an &lt;strong&gt;InitDatabase()&lt;/strong&gt; func that will handle our database connection that will return an instance of the &lt;strong&gt;DB&lt;/strong&gt; struct of our &lt;strong&gt;gorm&lt;/strong&gt; package (&lt;em&gt;**gorm.DB&lt;/em&gt;&lt;em&gt;) or an error. Then we will be setting up multiple variables to build our connection string for PostgreSQL. It's not good practice to hard code these values so I'll be using the **os&lt;/em&gt;* package to get environment variables that I'll be then exporting locally in my terminal for now.&lt;/p&gt;

&lt;p&gt;Once I have my connection string, I'll call the &lt;strong&gt;Open()&lt;/strong&gt; method of &lt;strong&gt;gorm&lt;/strong&gt; and open my connection string with the &lt;strong&gt;postgres driver&lt;/strong&gt; of &lt;strong&gt;gorm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LYjkkFPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ATYZuXbtMY_BYxBMFoBnEbQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LYjkkFPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ATYZuXbtMY_BYxBMFoBnEbQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's head back to &lt;strong&gt;cmd/server/main.go&lt;/strong&gt; and call &lt;strong&gt;InitDatabase()&lt;/strong&gt; in our &lt;strong&gt;Run()&lt;/strong&gt; func.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rUoi4mxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AsslyCc0lasKen9yzHJOPXg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rUoi4mxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AsslyCc0lasKen9yzHJOPXg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before run our API don't forget to export the variable we have defined in &lt;strong&gt;database.go&lt;/strong&gt; in the terminal window where you'll be running the program.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;export DB_USERNAME=postgres&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;export DB_PASSWORD=postgres&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;export DB_HOST=localhost&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;export DB_TABLE=postgres&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;export DB_PORT=5432&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--snyavRFi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A2NVMD1XnweYODd7e0YkVhA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--snyavRFi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A2NVMD1XnweYODd7e0YkVhA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's run &lt;code&gt;go run cmd/server/main.go&lt;/code&gt; and check that &lt;strong&gt;InitDatabase()&lt;/strong&gt; did not send an error.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dG7qQx11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AhnkynM0f3m9CLhU7HEYLTg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dG7qQx11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AhnkynM0f3m9CLhU7HEYLTg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looks Good 🙂 . Now it is time ti implement our student service.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-service"&gt;
  &lt;/a&gt;
  The Service
&lt;/h4&gt;

&lt;p&gt;Time to implement our student service and we are going to head back to the &lt;strong&gt;internal/&lt;/strong&gt; directory and add a subdirectory &lt;strong&gt;services/&lt;/strong&gt; and inside of it let's create a package &lt;strong&gt;student&lt;/strong&gt; containing a &lt;strong&gt;student.go&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;student.go&lt;/strong&gt; we are going to implement two structs, a &lt;strong&gt;Service&lt;/strong&gt; struct and &lt;strong&gt;Student&lt;/strong&gt; struct. The &lt;strong&gt;Service&lt;/strong&gt; struct will define our service that will contain only a field DB typed as a reference to our &lt;em&gt;**gorm.DB&lt;/em&gt;* so we can pass in our database when we instantiate it.&lt;br&gt;
The &lt;strong&gt;Student&lt;/strong&gt; will define an actual student and we will pass in an additional parameter or field of &lt;strong&gt;gorm.Model&lt;/strong&gt; so our ORM know the fields to implement in our database for a student.&lt;/p&gt;

&lt;p&gt;We are also going to create a &lt;strong&gt;NewService()&lt;/strong&gt; func with an argument &lt;strong&gt;&lt;em&gt;db&lt;/em&gt;&lt;/strong&gt; to pass in our database from &lt;strong&gt;cmd/server/main.go&lt;/strong&gt; later. This func will return an instance of our service.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FiLcxF27--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A4ZxlZMpZccLzpzwnRLs06w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FiLcxF27--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A4ZxlZMpZccLzpzwnRLs06w.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay, we have this but something is missing, an &lt;strong&gt;interface.&lt;/strong&gt; We need to implement a &lt;strong&gt;StudentService&lt;/strong&gt; interface that will tells what methods we need to implement in our service to be of type &lt;strong&gt;StudentService&lt;/strong&gt;, it is a contract we have to respect. So let's write the methods we need to have a &lt;strong&gt;StudentService&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--acZzHVPS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ARy-PMCjj5xyTEJzUpmammQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--acZzHVPS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ARy-PMCjj5xyTEJzUpmammQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now our &lt;strong&gt;StudentService&lt;/strong&gt; is defined, we just need to implement all of this methods. They will be all receivers functions of &lt;strong&gt;Service&lt;/strong&gt; so we can call them later to be assigned to our endpoints. Let's implement them!&lt;/p&gt;

&lt;p&gt;Since they are receivers of &lt;strong&gt;Service&lt;/strong&gt; we have access to the &lt;strong&gt;DB&lt;/strong&gt; field we wrote earlier. And remember that &lt;strong&gt;DB&lt;/strong&gt; is actually of type &lt;em&gt;**gorm.DB&lt;/em&gt;* so we have access to their methods and we can make our SQL queries easily 🙂&lt;/p&gt;

&lt;p&gt;For example for &lt;strong&gt;GetAllStudents()&lt;/strong&gt; we can just use the &lt;strong&gt;Find()&lt;/strong&gt; method from &lt;strong&gt;gorm&lt;/strong&gt; and write the results of it to a temporary variable &lt;strong&gt;students&lt;/strong&gt; and then return it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jQR7u_Gb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AAmHJEHftXo6JI8lTNz0HFg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jQR7u_Gb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AAmHJEHftXo6JI8lTNz0HFg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's implement the rest of our methods! I'll be pushing the actual code to a &lt;a href="https://github.com/lucasnevespereira/students-api"&gt;GitHub repository&lt;/a&gt; if you want to get it there 👍🏼&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OnNcBZnk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ANA8YLsm-dDL_KKWPCHmyqA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OnNcBZnk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ANA8YLsm-dDL_KKWPCHmyqA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8RMb5Msm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A3wpZTzPF07yTQnRrUViliA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8RMb5Msm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A3wpZTzPF07yTQnRrUViliA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perfect, now we can go back to our &lt;strong&gt;internal/http/handler.go&lt;/strong&gt; file and use our student service.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#http-endpoints-methods-amp%C2%A0json"&gt;
  &lt;/a&gt;
  HTTP Endpoints Methods &amp;amp; JSON
&lt;/h4&gt;

&lt;p&gt;In our handler file we can now create the rest of our endpoints as we did for &lt;strong&gt;api/status&lt;/strong&gt; but this time the second argument will be functions we will create and those functions will be calling our services methods that we have created previously. And for that, we are going to add a field &lt;strong&gt;Service&lt;/strong&gt; to our &lt;strong&gt;Handler&lt;/strong&gt; struct and that field will be typed as a pointer to the &lt;strong&gt;Service&lt;/strong&gt; of the &lt;strong&gt;student&lt;/strong&gt; package. Also we will pass this service in our &lt;strong&gt;NewHandler()&lt;/strong&gt; func so we can have access to it when we insatiate the handler.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gFX7mWUG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2APr1OFKWQG5TfxPUlydAp1w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gFX7mWUG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2APr1OFKWQG5TfxPUlydAp1w.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;⚠️ Attention! Rename the package from handler to &lt;/em&gt;&lt;strong&gt;&lt;em&gt;http.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's continue by adding our endpoints to &lt;strong&gt;InitRoutes()&lt;/strong&gt; and then defining the handler functions that will call our service functions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z76WWlEW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AAYXJBEvXG4fZmPWMd7LWlw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z76WWlEW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AAYXJBEvXG4fZmPWMd7LWlw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay, now let's write the body of this handlers functions and return a JSON response since this is a REST API. And here we will see that the &lt;strong&gt;gorilla/mux&lt;/strong&gt; router will save us time for example to retrieve de &lt;strong&gt;id&lt;/strong&gt; of our endpoints.&lt;/p&gt;

&lt;p&gt;For example, in &lt;strong&gt;GetStudentById&lt;/strong&gt; we can &lt;strong&gt;mux.Vars()&lt;/strong&gt; passing in our request "&lt;strong&gt;r"&lt;/strong&gt; and then get whatever parameter we passed in curly braces in our endpoint, in this case the &lt;strong&gt;{id}.&lt;br&gt;
**Once we have the id we can parsed it from string to int or uint in this case and then call our Service method and fetched the student from database.&lt;br&gt;
If there is no error we then can create a new **json&lt;/strong&gt; encoder passing in our response writer "&lt;strong&gt;w&lt;/strong&gt;" and encode the result (&lt;strong&gt;student&lt;/strong&gt;) from our service.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m52WWUj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Adi7DFhnkApMx1PJbcjpPCg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m52WWUj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Adi7DFhnkApMx1PJbcjpPCg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another thing I want to do before implement to rest of our handler functions is to improve the error handling in this function. We are just printing an error message but this is a REST API it is good practice to actually return an HTTP status code if we get an error.&lt;/p&gt;

&lt;p&gt;For that I'll create an helper function named &lt;strong&gt;respondWithError()&lt;/strong&gt; and I will also create a &lt;strong&gt;Response&lt;/strong&gt; struct that will be useful. I'll be writing this in a new file &lt;strong&gt;helper.go&lt;/strong&gt; inside of our package &lt;strong&gt;http&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;⚠️ By the way I have just noticed that I've made a mistake!! I've been calling my package &lt;strong&gt;handler&lt;/strong&gt; instead of &lt;strong&gt;http.&lt;/strong&gt; Sorry for that just rename the package to &lt;strong&gt;http&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ADeLQRWH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AQZecdOqA4HC-EmeILI_hiw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ADeLQRWH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AQZecdOqA4HC-EmeILI_hiw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I fixed my package name 👍🏼&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;respondWithError&lt;/strong&gt; I write an header with a Status Error and encode the struct &lt;strong&gt;Response&lt;/strong&gt; to json passing in a custom message with my error.&lt;/p&gt;

&lt;p&gt;We can use this back in our &lt;strong&gt;handler.go&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i_NWQ72D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AN-y0kI6NZKLIEwroSXGuGg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i_NWQ72D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AN-y0kI6NZKLIEwroSXGuGg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, we are going to set in our response header a Content-Type of &lt;strong&gt;application/json&lt;/strong&gt; plus &lt;strong&gt;UTF-8 charset&lt;/strong&gt; encoding and write an an HTTP status OK that will return 200 as code. If nothing goes wrong we don't enter in &lt;strong&gt;respondWithError&lt;/strong&gt; and the status stays &lt;strong&gt;200 ✅ &lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LywidKEw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AC1v0E6xcyMA1h5_blNZsrw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LywidKEw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AC1v0E6xcyMA1h5_blNZsrw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay, &lt;strong&gt;GetStudentById&lt;/strong&gt; is done now let's implement the rest of our functions.&lt;br&gt;
Once again the source code for this is in my &lt;a href="https://github.com/lucasnevespereira/students-api"&gt;GitHub repository&lt;/a&gt; 🙂&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PP8Di1lz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AnvHGLku2lHnCrygj9yD9LA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PP8Di1lz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AnvHGLku2lHnCrygj9yD9LA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cZvQFHs8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A8Jfyu3foKobsPJ26iQ3BZQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cZvQFHs8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A8Jfyu3foKobsPJ26iQ3BZQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ac3XlUmJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AuRbSkfnzurXMAN0TTVzvRw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ac3XlUmJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AuRbSkfnzurXMAN0TTVzvRw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay, moving on let's fix one thing in &lt;strong&gt;cmd/server/main.go&lt;/strong&gt; before testing this. Let's import our StudentService in our &lt;strong&gt;main.go&lt;/strong&gt; file and call &lt;strong&gt;NewService&lt;/strong&gt; and passing it our &lt;strong&gt;database.InitDatabase()&lt;/strong&gt; as argument. Then we just have to pass &lt;strong&gt;studentService&lt;/strong&gt; to the &lt;strong&gt;NewHandler()&lt;/strong&gt; call.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6CIERR7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AP47nJydRL686hwUIDHRzgw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6CIERR7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AP47nJydRL686hwUIDHRzgw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This reminds me, I want to handle database migrations.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#database-migrations"&gt;
  &lt;/a&gt;
  Database migrations
&lt;/h4&gt;

&lt;p&gt;Since we are using &lt;strong&gt;gorm&lt;/strong&gt; this task is quite simple, there is a method in our &lt;strong&gt;ORM&lt;/strong&gt; library that auto migrates the database when we init our database connection. Let's create a new file &lt;strong&gt;migrate.go&lt;/strong&gt; inside of our package &lt;strong&gt;database&lt;/strong&gt; in the &lt;strong&gt;internal/&lt;/strong&gt; directory.&lt;br&gt;
There we will simply write an helper function &lt;strong&gt;MigrateDB&lt;/strong&gt; that will migrate our database. We will call these function in our &lt;strong&gt;Run()&lt;/strong&gt; in &lt;strong&gt;cmd/server/main.go&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XUvYQJhf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AXMvAgx4jrprmAuSAa4U1BQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XUvYQJhf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AXMvAgx4jrprmAuSAa4U1BQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dcYbJV1R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AE6HJi69KNU8MzI1sZWr1pA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dcYbJV1R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AE6HJi69KNU8MzI1sZWr1pA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay, I think we are ready to test our endpoints, finally !&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#api-endpoints-with%C2%A0insomnia"&gt;
  &lt;/a&gt;
  API endpoints with Insomnia
&lt;/h4&gt;

&lt;p&gt;To test our endpoints I'll use a software named &lt;a href="https://insomnia.rest/"&gt;&lt;strong&gt;Insomnia&lt;/strong&gt;&lt;/a&gt;, you can also use &lt;a href="https://www.postman.com/"&gt;&lt;strong&gt;Postman&lt;/strong&gt;&lt;/a&gt; that is more famous I guess, I just enjoy using Insomnia but it is the same thing 🙂&lt;/p&gt;

&lt;p&gt;Let's run our app with &lt;code&gt;go run cmd/server/main.go&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--12zjhM57--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AEjhnYS3D0IePJ4KFzoAj4g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--12zjhM57--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AEjhnYS3D0IePJ4KFzoAj4g.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've created my endpoints in &lt;strong&gt;Insomnia&lt;/strong&gt; and I've posted a new Student and I don't get an error and I see that my preview is actually in JSON.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lxklV9sT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AL5A2FCaWJnLl8HrFBM3wsQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lxklV9sT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AL5A2FCaWJnLl8HrFBM3wsQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's test to get this student by it's school name "&lt;em&gt;Havard&lt;/em&gt;" and then it's &lt;em&gt;ID.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c75Xi40P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AVQPHA3mt8fME86xtqpAWAw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c75Xi40P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AVQPHA3mt8fME86xtqpAWAw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rLLXaApz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A4hJ6qCu-SmLopwRd3n0k4Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rLLXaApz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A4hJ6qCu-SmLopwRd3n0k4Q.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's add another student to test GET all students.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uKt1k26R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AL7errBkKao9y-sGgkG8D1Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uKt1k26R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AL7errBkKao9y-sGgkG8D1Q.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h1kY1PwK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Ay2TLBDpJFpAfFT2JMFfYKg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h1kY1PwK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Ay2TLBDpJFpAfFT2JMFfYKg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can test the rest of the endpoints 🙂 but it seems to be working just fine.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#write-some%C2%A0tests"&gt;
  &lt;/a&gt;
  Write some tests
&lt;/h4&gt;

&lt;p&gt;A good API is a well tested API, so I'll try to implement &lt;a href="https://www.katalon.com/resources-center/blog/end-to-end-e2e-testing/#:~:text=End%2Dto%2Dend%20testing%20is,pieces%20work%20together%20as%20expected."&gt;E2E Testing&lt;/a&gt; for that I'll be using the &lt;a href="https://github.com/go-resty/resty/"&gt;&lt;strong&gt;resty&lt;/strong&gt;&lt;/a&gt; library that will allow us to test our http endpoints and the &lt;strong&gt;testify/assert&lt;/strong&gt; library that will give us access to assert methods that will check if the result is equal to what we are expecting basically. Let's get this packages.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go get -u github.com/go-resty/resty/v2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;go get -u github.com/stretchr/testify/assert&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then create a package test in our root directory and add to it a &lt;strong&gt;student_test.go&lt;/strong&gt; file.&lt;br&gt;
In this file we will create a constant with our &lt;strong&gt;BASE_URL&lt;/strong&gt; so we don't have to write in all of our file. Then we will create a &lt;strong&gt;TestGetAllStudents()&lt;/strong&gt; func. There we are going to call a new "client" to simulate our user, this client is an instance of &lt;strong&gt;resty.New()&lt;/strong&gt; method.&lt;br&gt;
Then we will call the &lt;strong&gt;R()&lt;/strong&gt; method for request and make a &lt;strong&gt;GET()&lt;/strong&gt; request passing in our endpoint url.&lt;/p&gt;

&lt;p&gt;We assign a &lt;strong&gt;resp&lt;/strong&gt; and &lt;strong&gt;err&lt;/strong&gt; variable to it and if we got a error we call &lt;strong&gt;t.Fail()&lt;/strong&gt;.&lt;br&gt;
If we have no error then we &lt;strong&gt;assert.Equal()&lt;/strong&gt; comparing the status code of our &lt;strong&gt;resp&lt;/strong&gt; variable (result of the get request to out endpoint) to a &lt;strong&gt;200&lt;/strong&gt; status code.&lt;/p&gt;

&lt;p&gt;And this is basically it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oDSTf6lN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A0u85fQyiHZirSe4_B9uPVQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oDSTf6lN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A0u85fQyiHZirSe4_B9uPVQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now if we restart our app ( &lt;code&gt;go run cmd/server/main.go&lt;/code&gt; ) and we cd into the testing package and run &lt;code&gt;go test&lt;/code&gt; we can see that our test has passed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EnfUuyjs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A5tlRFmHRS1QqHGHJn-Zd8Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EnfUuyjs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A5tlRFmHRS1QqHGHJn-Zd8Q.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now to have some test coverage we just need to test the rest of our endpoints. For example, the &lt;strong&gt;TestPostStudent()&lt;/strong&gt; would look like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gzs_GVBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ARze1Hn8qHr8ujR6w-ZfqAw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gzs_GVBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ARze1Hn8qHr8ujR6w-ZfqAw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dFOWYuKj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AScIeVOCTi5cXnlxqYQIIiA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dFOWYuKj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AScIeVOCTi5cXnlxqYQIIiA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay, let's move on we are almost done 🙂&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lets-dockerize-our%C2%A0api"&gt;
  &lt;/a&gt;
  Let's Dockerize our API
&lt;/h4&gt;

&lt;p&gt;Our API is functional but every time we want to use it with our database we need to run that long command in our terminal&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run ----name students-db ----env POSTGRES_PASSWORD=postgres -p 5432:5432 -d postgres&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And then we have to export our env variables, and still hit the &lt;code&gt;go run&lt;/code&gt; to actually run our app. There is a way to simplify this and it is actually good if we want to deploy this API one day. That solution is to add Docker to our app, we will create a &lt;strong&gt;Dockerfile&lt;/strong&gt; that will be in charge of building our API and then a &lt;strong&gt;docker-compose.yml&lt;/strong&gt; file that will be in charge of creating multiple services (containers) and connecting them together. We will have 2 containers or services as you want to call it, one of them will be our PostgresSQL database and the other our API that will be buid with the help of our &lt;strong&gt;Dockerfile.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's start by creating a &lt;strong&gt;Dockerfile&lt;/strong&gt; in our root directory. In there we will just be fetching a golang image from the docker hub, then create a workspace directory inside of it, add the content of our current directory (so all of our app), build our executable and then run it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JRYiXM1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AambhpcF19JH2x2VULKwfeA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JRYiXM1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AambhpcF19JH2x2VULKwfeA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's add the &lt;strong&gt;docker-compose.yml&lt;/strong&gt; file also in our root directory. As I said before in there I have 2 services &lt;strong&gt;db&lt;/strong&gt; and &lt;strong&gt;api,&lt;/strong&gt; one based on a PostgreSQL image and another from our Dockerfile, then we map the right ports in both containers. I have a volume from my db so the database content is synced in a local folder in my machine.&lt;br&gt;
Both services are in the same network so they can communicate.&lt;br&gt;
The &lt;strong&gt;api&lt;/strong&gt; service depends on the &lt;strong&gt;db&lt;/strong&gt; service meaning it cannot start if the db does not work. And then I finally set the default bridge network as a link layer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kXUbWZAb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AY_Z2fCUeH7QBXrHg2tF3HQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kXUbWZAb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AY_Z2fCUeH7QBXrHg2tF3HQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To test this out you need to stop the previous database container we were running. Remember check with &lt;code&gt;docker ps&lt;/code&gt; if you have it running and then run a &lt;code&gt;docker stop &amp;lt;CONTAINER ID&amp;gt;&lt;/code&gt; or &lt;code&gt;docker stop &amp;lt;CONTAINER_NAME&amp;gt;&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x7XtdNfM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AGPI1wavcq7qHJwlvp4oA0w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x7XtdNfM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AGPI1wavcq7qHJwlvp4oA0w.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now all we have to do is run &lt;code&gt;docker-compose up&lt;/code&gt;to start our API, and &lt;code&gt;docker-compose down&lt;/code&gt; to stop it 🙂&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Attention:&lt;/strong&gt; The first time running docker-compose or whenever you want to rebuild the entire thing use &lt;code&gt;docker-compose up --build&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cPukxsak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A_FBedXvaq7sWDlBnhR3dQg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cPukxsak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A_FBedXvaq7sWDlBnhR3dQg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S5pUe6sk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AaB54Cv7coi18AW48pXO4Kg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S5pUe6sk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AaB54Cv7coi18AW48pXO4Kg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are reaching the end, let's just check if our endpoints are still working.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eQWlbcK7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AdpgXeYsPcg27JrfwpS-Dzg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eQWlbcK7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AdpgXeYsPcg27JrfwpS-Dzg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aYznZwSr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AE3D8DpsGhbCJJghOGX1ZeQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aYznZwSr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AE3D8DpsGhbCJJghOGX1ZeQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fr7rn3sU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AZP-8WsMj7Rf-XZOE-UKanw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fr7rn3sU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AZP-8WsMj7Rf-XZOE-UKanw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Seems to be good!&lt;br&gt;
Okay, our app is &lt;em&gt;Dockerized &lt;/em&gt;&lt;strong&gt;&lt;em&gt;,&lt;/em&gt;&lt;/strong&gt; it is a lot simpler to start our api using &lt;strong&gt;Docker 👍🏼&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion 😀
&lt;/h3&gt;

&lt;p&gt;Okay we are officially done, I know it has been a bit long but I am glad I wrote this article because I've learned a lot also by trying to explain this to you guys.&lt;/p&gt;

&lt;p&gt;Don't hesitate to check my &lt;a href="https://www.youtube.com/channel/UC7JqfPrr4nHKvbwLAdk-MgA"&gt;Youtube Channel&lt;/a&gt; or my &lt;a href="https://twitter.com/lucaasnp_"&gt;Twitter&lt;/a&gt; account and contact me if you have any questions or remarks 🙂.&lt;br&gt;
Also the &lt;a href="https://github.com/lucasnevespereira/students-api"&gt;source code&lt;/a&gt; if you need to check it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UC7JqfPrr4nHKvbwLAdk-MgA"&gt;Youtube Channel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/lucasnevespereira/students-api"&gt;Source Code&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#see-you-soon%C2%A0"&gt;
  &lt;/a&gt;
  See you soon! 👋🏼
&lt;/h4&gt;

</description>
      <category>go</category>
      <category>restapi</category>
      <category>postgres</category>
      <category>docker</category>
    </item>
    <item>
      <title>Kubernetes Hands-On Self-Paced Course (Free)</title>
      <author>Meir Gabay</author>
      <pubDate>Tue, 13 Apr 2021 17:11:14 +0000</pubDate>
      <link>https://dev.to/unfor19/kubernetes-hands-on-self-paced-course-free-111b</link>
      <guid>https://dev.to/unfor19/kubernetes-hands-on-self-paced-course-free-111b</guid>
      <description>&lt;p&gt;Create a local Kubernetes development environment on Windows and WSL2. In future versions, I'll add the relevant steps for macOS.&lt;/p&gt;

&lt;p&gt;Throughout this self-paced course, you'll gain hands-on experience with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating a local Kubernetes cluster with &lt;a href="https://minikube.sigs.k8s.io/docs/start/"&gt;minikube&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Deploying applications in Kubernetes using &lt;a href="https://kubernetes.io/docs/reference/kubectl/kubectl/"&gt;kubectl&lt;/a&gt; and this project's YAML files&lt;/li&gt;
&lt;li&gt;Serving applications securely via HTTPS with &lt;a href="https://github.com/kubernetes/ingress-nginx/"&gt;NGINX Ingress Controller&lt;/a&gt; (LoadBalancer) and &lt;a href="https://github.com/jetstack/cert-manager"&gt;cert-manager&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Managing Kubernetes resources as packages using &lt;a href="https://helm.sh/"&gt;Helm v3&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Authenticating users with Google as an Identity Provider (IdP), implementing both &lt;a href="https://oauth.net/2/"&gt;OAuth2&lt;/a&gt; and &lt;a href="https://openid.net/connect/"&gt;OAuth2+OIDC&lt;/a&gt; using &lt;a href="https://github.com/oauth2-proxy/oauth2-proxy"&gt;oauth2-proxy&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Building the containerized web-server application &lt;a href="https://github.com/unfor19/docker-cats"&gt;docker-cats&lt;/a&gt; and deploying it to the Kubernetes cluster with &lt;a href="https://kubernetes.io/docs/reference/kubectl/cheatsheet/#updating-resources"&gt;kubectl rollout&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#link-to-course"&gt;
  &lt;/a&gt;
  Link To Course
&lt;/h2&gt;

&lt;p&gt;Open-source project @ &lt;a href="https://github.com/unfor19/kubernetes-localdev"&gt;GitHub unfor19/kubernetes-localdev&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sneak-peek-of-the-architecture"&gt;
  &lt;/a&gt;
  Sneak Peek Of The Architecture
&lt;/h2&gt;

&lt;p&gt;By the end of this course, you'll deploy the below architecture on your local machine.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SM4-ttq6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d33vo9sj4p3nyc.cloudfront.net/kubernetes-localdev/kubernetes-localdev-architecture.png%3Fdummy%3Dnull" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SM4-ttq6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d33vo9sj4p3nyc.cloudfront.net/kubernetes-localdev/kubernetes-localdev-architecture.png%3Fdummy%3Dnull" alt="kubernetes-localdev-architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/unfor19/kubernetes-localdev#architecture"&gt;Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unfor19/kubernetes-localdev#requirements"&gt;Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unfor19/kubernetes-localdev#create-a-kubernetes-cluster"&gt;Create a Kubernetes Cluster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unfor19/kubernetes-localdev#enable-secured-https-access-from-windows-to-wsl2"&gt;Enable secured HTTPS access from Windows to WSL2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unfor19/kubernetes-localdev#configure-lens"&gt;Configure LENS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unfor19/kubernetes-localdev#nginx-ingress-controller"&gt;NGINX Ingress Controller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unfor19/kubernetes-localdev#support-dns-resolution-in-windows-host"&gt;Support DNS resolution in Windows host&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unfor19/kubernetes-localdev#http"&gt;HTTP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/unfor19/kubernetes-localdev#https"&gt;HTTPS&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#create-a-certificate-authority-ca-certificate-and-key"&gt;Create A Certificate Authority (CA) Certificate And Key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unfor19/kubernetes-localdev#load-ca-certificates-to-a-kubernetes-secret"&gt;Load CA Certificates To A Kubernetes Secret&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unfor19/kubernetes-localdev#install-cert-manager-and-issue-a-self-signed-certificate"&gt;Install Cert-Manager And Issue A Self-Signed Certificate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/unfor19/kubernetes-localdev#authentication---oauth2"&gt;Authentication - OAuth2&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/unfor19/kubernetes-localdev#create-googles-credentials"&gt;Create Google's Credentials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unfor19/kubernetes-localdev#create-kubernetes-secrets-for-googles-credentials"&gt;Create Kubernetes Secrets For Google's Credentials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploy-oauth2-proxy-and-protect-an-application"&gt;Deploy OAuth2-Proxy And Protect An Application&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/unfor19/kubernetes-localdev#authentication---oidc"&gt;Authentication - OIDC&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#deploy-oauth2-proxy-and-use-oidc"&gt;Deploy OAuth2-Proxy And Use OIDC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unfor19/kubernetes-localdev#authentication-summary"&gt;Authentication Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/unfor19/kubernetes-localdev#local-development-ci-and-deployment-cd"&gt;Local Development (CI) And Deployment (CD)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#build-the-application-ci"&gt;Build The Application (CI)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploy-the-application-cd"&gt;Deploy The Application (CD)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unfor19/kubernetes-localdev#cleanup"&gt;Cleanup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/unfor19/kubernetes-localdev#troubleshooting"&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>kubernetes</category>
      <category>docker</category>
      <category>devops</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Twitter Tweet Box with Character Limit Highlighting in HTML CSS &amp; JavaScript</title>
      <author>CodingNepal</author>
      <pubDate>Tue, 13 Apr 2021 17:03:26 +0000</pubDate>
      <link>https://dev.to/codingnepal/twitter-tweet-box-with-character-limit-highlighting-in-html-css-javascript-2ai8</link>
      <guid>https://dev.to/codingnepal/twitter-tweet-box-with-character-limit-highlighting-in-html-css-javascript-2ai8</guid>
      <description>&lt;p&gt;Hey friends, today in this blog you'll learn how to create a Twitter Tweet Box with Character Limit Highlighting using HTML CSS &amp;amp; JavaScript. In the earlier blog, I have shared &lt;a href="https://www.codingnepalweb.com/2021/03/limit-input-characters-using-javascript.html"&gt;how to Easily Limit Input Characters in JavaScript&lt;/a&gt;, and in this blog, you'll also learn to limit input characters but it will be more advanced than the previous one because in this Twitter tweet box there is a feature of character limit highlighting which was not in the previous project.&lt;/p&gt;

&lt;p&gt;If you have a Twitter account then you definitely know what is tweet box and how it looks like. In this project [Twitter Post Share Box or Tweet Box], on the webpage, there is a tweet box as you can see in the preview image. In this box, there is a typing area, some media icons, a characters limit counter, and a tweet button. At first, the counter will be hidden and the tweet button also disabled but once you start typing then there is visible the counter and the button also active/clickable.&lt;/p&gt;

&lt;p&gt;In this tweet box, there is a limit of 100 characters which means you can type 1-100 length/numbers of characters. Once you crossed the limit then the over characters will start highlighting, the tweet button is again disabled and the counter color is also charged into red and it shows you how many characters that you have to remove to tweet or proceed.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#video-tutorial-of-tweet-box-with-character-limit-highlighting"&gt;
  &lt;/a&gt;
  Video Tutorial of Tweet Box with Character Limit Highlighting
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=_pbuwzly6xA&amp;amp;ab_channel=CodingNepal"&gt;Click here to Watch Full Video on YouTube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can copy the codes from the given boxes or download the code files from the given link but I recommend you download the source code files instead of copying codes. &lt;a href="https://www.codingnepalweb.com/2021/04/twitter-tweet-box-with-character-limit.html"&gt;Click here to download code files.&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#html-code"&gt;
  &lt;/a&gt;
  HTML CODE:
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;!-- Created By CodingNepal - www.codingnepalweb.com --&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset="UTF-8"&amp;gt;
  &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
  &amp;lt;title&amp;gt;Twitter Tweet Box UI Design | CodingNepal&amp;lt;/title&amp;gt;
  &amp;lt;link rel="stylesheet" href="style.css"&amp;gt;
  &amp;lt;link rel="stylesheet" href="https://unicons.iconscout.com/release/v3.0.6/css/line.css"&amp;gt;
  &amp;lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"/&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div class="wrapper"&amp;gt;
    &amp;lt;div class="input-box"&amp;gt;
      &amp;lt;div class="tweet-area"&amp;gt;
        &amp;lt;span class="placeholder"&amp;gt;What's happening?&amp;lt;/span&amp;gt;
        &amp;lt;div class="input editable" contenteditable="true" spellcheck="false"&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div class="input readonly" contenteditable="true" spellcheck="false"&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class="privacy"&amp;gt;
        &amp;lt;i class="fas fa-globe-asia"&amp;gt;&amp;lt;/i&amp;gt;
        &amp;lt;span&amp;gt;Everyone can reply&amp;lt;/span&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="bottom"&amp;gt;
      &amp;lt;ul class="icons"&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;i class="uil uil-capture"&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;i class="far fa-file-image"&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;i class="fas fa-map-marker-alt"&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;i class="far fa-grin"&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;li&amp;gt;&amp;lt;i class="far fa-user"&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/li&amp;gt;
      &amp;lt;/ul&amp;gt;
      &amp;lt;div class="content"&amp;gt;
        &amp;lt;span class="counter"&amp;gt;100&amp;lt;/span&amp;gt;
        &amp;lt;button&amp;gt;Tweet&amp;lt;/button&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;script src="script.js"&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#css-code"&gt;
  &lt;/a&gt;
  CSS CODE
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&amp;amp;display=swap');
*{
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Open Sans', sans-serif;
}
body{
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  background: #1da1f2;
}
::selection{
  color: #fff;
  background: #1da1f2;
}
.wrapper{
  background: #fff;
  max-width: 475px;
  width: 100%;
  border-radius: 15px;
  padding: 25px 25px 15px 25px;
  box-shadow: 0px 10px 15px rgba(0,0,0,0.1);
}
.input-box{
  padding-top: 10px;
  border-bottom: 1px solid #e6e6e6;
}
.input-box .tweet-area{
  position: relative;
  min-height: 130px;
  max-height: 170px;
  overflow-y: auto;
}
.tweet-area::-webkit-scrollbar{
  width: 0px;
}
.tweet-area .placeholder{
  position: absolute;
  margin-top: -3px;
  font-size: 22px;
  color: #98A5B1;
  pointer-events: none;
}
.tweet-area .input{
  outline: none;
  font-size: 17px;
  min-height: inherit;
  word-wrap: break-word;
  word-break: break-all;
}
.tweet-area .editable{
  position: relative;
  z-index: 5;
}
.tweet-area .readonly{
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  color: transparent;
  background: transparent;
}
.readonly .highlight{
  background: #fd9bb0;
}
.input-box .privacy{
  color: #1da1f2;
  margin: 15px 0;
  display: inline-flex;
  align-items: center;
  padding: 7px 10px;
  border-radius: 50px;
  cursor: pointer;
  transition: background 0.2s ease;
}
.privacy:hover, .icons li:hover{
  background: #e7f5fe;
}
.privacy i{
  font-size: 18px;
}
.privacy span{
  font-size: 15px;
  font-weight: 600;
  margin-left: 7px;
}
.bottom{
  display: flex;
  margin-top: 13px;
  align-items: center;
  justify-content: space-between;
}
.bottom .icons{
  display: inline-flex;
}
.icons li{
  list-style: none;
  color: #1da1f2;
  font-size: 20px;
  margin: 0 2px;
  height: 38px;
  width: 38px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  transition: background 0.2s ease;
}
.bottom .content{
  display: flex;
  align-items: center;
  justify-content: center;
}
.bottom .counter{
  color: #333;
  display: none;
  font-weight: 500;
  margin-right: 15px;
  padding-right: 15px;
  border-right: 1px solid #aab8c2;
}
.bottom button{
  padding: 9px 18px;
  border: none;
  outline: none;
  border-radius: 50px;
  font-size: 16px;
  font-weight: 700;
  background: #1da1f2;
  color: #fff;
  cursor: pointer;
  opacity: 0.5;
  pointer-events: none;
  transition: background 0.2s ease;
}
.bottom button.active{
  opacity: 1;
  pointer-events: auto;
}
.bottom button:hover{
  background: #0d8bd9;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  JavaScript CODE
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const wrapper = document.querySelector(".wrapper"),
editableInput = wrapper.querySelector(".editable"),
readonlyInput = wrapper.querySelector(".readonly"),
placeholder = wrapper.querySelector(".placeholder"),
counter = wrapper.querySelector(".counter"),
button = wrapper.querySelector("button");

editableInput.onfocus = ()=&amp;gt;{
  placeholder.style.color = "#c5ccd3";
}
editableInput.onblur = ()=&amp;gt;{
  placeholder.style.color = "#98a5b1";
}

editableInput.onkeyup = (e)=&amp;gt;{
  let element = e.target;
  validated(element);
}
editableInput.onkeypress = (e)=&amp;gt;{
  let element = e.target;
  validated(element);
  placeholder.style.display = "none";
}

function validated(element){
  let text;
  let maxLength = 100;
  let currentlength = element.innerText.length;

  if(currentlength &amp;lt;= 0){
    placeholder.style.display = "block";
    counter.style.display = "none";
    button.classList.remove("active");
  }else{
    placeholder.style.display = "none";
    counter.style.display = "block";
    button.classList.add("active");
  }

  counter.innerText = maxLength - currentlength;

  if(currentlength &amp;gt; maxLength){
    let overText = element.innerText.substr(maxLength); //extracting over texts
    overText = `&amp;lt;span class="highlight"&amp;gt;${overText}&amp;lt;/span&amp;gt;`; //creating new span and passing over texts
    text = element.innerText.substr(0, maxLength) + overText; //passing overText value in textTag variable
    readonlyInput.style.zIndex = "1";
    counter.style.color = "#e0245e";
    button.classList.remove("active");
  }else{
    readonlyInput.style.zIndex = "-1";
    counter.style.color = "#333";
  }
  readonlyInput.innerHTML = text; //replacing innerHTML of readonly div with textTag value
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>tweetbox</category>
      <category>postbox</category>
      <category>css</category>
    </item>
  </channel>
</rss>
