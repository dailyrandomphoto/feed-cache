<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Local Shop Search - Search shop near you</title>
      <author>Nithin I Bhandari</author>
      <pubDate>Tue, 11 Jan 2022 18:43:44 +0000</pubDate>
      <link>https://dev.to/nithinibhandari1999/local-shop-search-search-shop-near-you-1135</link>
      <guid>https://dev.to/nithinibhandari1999/local-shop-search-search-shop-near-you-1135</guid>
      <description>&lt;p&gt;Local Shop Search is used to search a shop near you by a map.&lt;br&gt;
Shop keeper can add a shop and list his product.&lt;br&gt;
End-User can Search Products and can visit his shop to purchase the product.&lt;/p&gt;

&lt;p&gt;Live Website: &lt;a href="https://local-shop-search.netlify.app/search/"&gt;https://local-shop-search.netlify.app/search/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g2MlhSu0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zt9ef1wmgwts7p6q1lqe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g2MlhSu0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zt9ef1wmgwts7p6q1lqe.png" alt="Website Demo" width="880" height="409"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#tech-stack"&gt;
  &lt;/a&gt;
  Tech Stack
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;MongoDB and MongoDB Autocomplete&lt;/li&gt;
&lt;li&gt;Node JS&lt;/li&gt;
&lt;li&gt;Express JS&lt;/li&gt;
&lt;li&gt;React JS&lt;/li&gt;
&lt;li&gt;Leaflet JS&lt;/li&gt;
&lt;li&gt;Netlify for frontend and Netlify serverless backend.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#how-search-functionality-works"&gt;
  &lt;/a&gt;
  How search functionality works
&lt;/h4&gt;

&lt;p&gt;Here i am using MongoDB autocomplete nGram which offer autocomplete search and location index to search query by location.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#aggregate-query-example"&gt;
  &lt;/a&gt;
  Aggregate query example
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://github.com/NithinIBhandari1999/localshopsearch_client/blob/main/info/mongodbAggregateFunction.json"&gt;Code Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ls95c6Dr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00gpmpdqup15k9587mbn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ls95c6Dr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00gpmpdqup15k9587mbn.png" alt="MongoDB Autocomplete Query Example" width="880" height="1192"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#mongodb-autocomplete-index"&gt;
  &lt;/a&gt;
  MongoDB Autocomplete index
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://github.com/NithinIBhandari1999/localshopsearch_client/blob/main/info/mongodbSearchIndex.json"&gt;Code Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CM-8aGF7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1rph770xlkp03mr1zm2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CM-8aGF7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1rph770xlkp03mr1zm2.png" alt="MongoDB Autocomplete Index Example" width="624" height="534"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;E-Commerce Creation&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;

&lt;p&gt;Live Link: &lt;a href="https://local-shop-search.netlify.app/search/"&gt;Visit Now&lt;/a&gt;&lt;br&gt;
Read Me: &lt;a href="https://github.com/NithinIBhandari1999/localshopsearch_client/blob/main/README.md"&gt;Visit Now&lt;/a&gt;&lt;br&gt;
Local Shop Search Front end: &lt;a href="https://github.com/NithinIBhandari1999/localshopsearch_client"&gt;Visit Now&lt;/a&gt;&lt;br&gt;
Local Shop Search Back end: &lt;a href="https://github.com/NithinIBhandari1999/localshopsearch_api"&gt;Visit Now&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#how-to-deploy"&gt;
  &lt;/a&gt;
  How to deploy
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Clone frontend and backend code.&lt;/li&gt;
&lt;li&gt;Create an Imagekit account.&lt;/li&gt;
&lt;li&gt;Visit to Netlify and deploy the code, add all env variable.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>atlashackathon</category>
      <category>mongodb</category>
      <category>react</category>
      <category>node</category>
    </item>
    <item>
      <title>Simple Text Editor with main functions (using Node.js)</title>
      <author>Lucifer25x</author>
      <pubDate>Tue, 11 Jan 2022 18:41:16 +0000</pubDate>
      <link>https://dev.to/lucifer25x/simple-text-editor-with-main-functions-using-nodejs-14h6</link>
      <guid>https://dev.to/lucifer25x/simple-text-editor-with-main-functions-using-nodejs-14h6</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/Lucifer25x/simple-text-editor"&gt;Source Code&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#screenshot"&gt;
  &lt;/a&gt;
  Screenshot:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NBI1rch3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iy53lef0ku3kq62yf42s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NBI1rch3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iy53lef0ku3kq62yf42s.png" alt="Image description" width="803" height="643"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Open File&lt;/li&gt;
&lt;li&gt;Open Folder&lt;/li&gt;
&lt;li&gt;Edit File&lt;/li&gt;
&lt;li&gt;Save File&lt;/li&gt;
&lt;li&gt;Rename File/Folder&lt;/li&gt;
&lt;li&gt;Delete File/Folder&lt;/li&gt;
&lt;li&gt;Create New File&lt;/li&gt;
&lt;li&gt;Create New Folder&lt;/li&gt;
&lt;li&gt;Get location of files and folders&lt;/li&gt;
&lt;li&gt;Make Window title with file path&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#packages"&gt;
  &lt;/a&gt;
  Packages:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Electron.js&lt;/li&gt;
&lt;li&gt;Node-fs&lt;/li&gt;
&lt;li&gt;Node-path&lt;/li&gt;
&lt;li&gt;Ace.js&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#please-give-star-to-repository-and-follow"&gt;
  &lt;/a&gt;
  Please give star to repository and follow.
&lt;/h4&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>linux</category>
      <category>programming</category>
    </item>
    <item>
      <title>A Minimalistic Approach to Feature Flagging Your Web App</title>
      <author>Michael Mangialardi</author>
      <pubDate>Tue, 11 Jan 2022 18:21:44 +0000</pubDate>
      <link>https://dev.to/michaelmangial1/a-minimalistic-approach-to-feature-flagging-your-web-app-en0</link>
      <guid>https://dev.to/michaelmangial1/a-minimalistic-approach-to-feature-flagging-your-web-app-en0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-purpose"&gt;
  &lt;/a&gt;
  The Purpose
&lt;/h2&gt;

&lt;p&gt;It is a common occurrence that a product's web application needs to enable/disable features depending upon the circumstances.&lt;/p&gt;

&lt;p&gt;Some use cases include:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Wanting to merge features for an in-progress project without showing/releasing them to customers in production&lt;/li&gt;
&lt;li&gt;Wanting to preview in-progress work in staging environment&lt;/li&gt;
&lt;li&gt;Pausing features without removing them from source code&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Home.jsx&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;devFlags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;beta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;...;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;...;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are three things we need to do to make this work well:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Set a pattern for configuring dev flags locally&lt;/li&gt;
&lt;li&gt;Set a pattern for overriding dev flags in an environment&lt;/li&gt;
&lt;li&gt;Set a pattern for how to consume dev flags in the code&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#configuring-dev-flags-locally"&gt;
  &lt;/a&gt;
  Configuring Dev Flags Locally
&lt;/h2&gt;

&lt;p&gt;Dev flags are just configuration, so you can think of them as a single object that can be consumed anywhere in the codebase:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;beta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// if true, show the features for the beta launch&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, we will need to specify the "defaults" that control the live production experience and the "overrides" that control the local environment.&lt;/p&gt;

&lt;p&gt;For example, imagine you want the dev flag object to return &lt;code&gt;beta: false&lt;/code&gt; in production (before its release), but &lt;code&gt;beta: true&lt;/code&gt; locally so that you can develop features before the release.&lt;/p&gt;

&lt;p&gt;First, create a &lt;code&gt;dev-flags-default.js&lt;/code&gt; file that controls the live production experience (the default experience):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// dev-flags-defaults.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;beta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Don't show beta features in production&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, create a &lt;code&gt;dev-flags-overrides.js&lt;/code&gt; file that can specify the overrides fo the local experience:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// dev-flags-overrides.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;beta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Show beta features as you develop&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You'll want to add this file to the &lt;code&gt;.gitignore&lt;/code&gt; since the overrides should always be specific to the environment (more on that later).&lt;/p&gt;

&lt;p&gt;Finally, expose a &lt;code&gt;dev-flags.js&lt;/code&gt; file (the file that will be consumed by other files in the codebase):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// dev-flags.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;defaults&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./dev-flags-defaults.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;overrides&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./dev-flags-overrides.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;overrides&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you will be able to control what features to render based upon whether you are in a production or local environment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-dev-flags-based-on-environment"&gt;
  &lt;/a&gt;
  Configuring Dev Flags Based on Environment
&lt;/h2&gt;

&lt;p&gt;The code above expects a &lt;code&gt;dev-flags-overrides.js&lt;/code&gt; file in every environment.&lt;/p&gt;

&lt;p&gt;Obviously, you can add it manually to each local environment and instruct all the developers to do so via documentation.&lt;/p&gt;

&lt;p&gt;However, we'll have to think about how this will work when the app is deployed to various environments (i.e. staging and production).&lt;/p&gt;

&lt;p&gt;In the deployment pipeline, you'll need a step for adding the &lt;code&gt;dev-flags-overrides.js&lt;/code&gt; file with the overrides appropriate to the environment.&lt;/p&gt;

&lt;p&gt;For production, you can create a &lt;code&gt;dev-flags-overrides.js&lt;/code&gt; file that returns an empty object.&lt;/p&gt;

&lt;p&gt;For staging, you can copy the defaults and enable them as needed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consuming-dev-flags"&gt;
  &lt;/a&gt;
  Consuming Dev Flags
&lt;/h2&gt;

&lt;p&gt;Once you have the dev flags patterns set up per environment, you can start writing code that toggles features based on a flag.&lt;/p&gt;

&lt;p&gt;Since dev flags frequently control revealing features of an in-progress project, you'll want to make the &lt;code&gt;!devFlags.someFlag&lt;/code&gt; code easy to cleanup (since it will eventually go away:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Home.jsx&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;devFlags&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./dev-flags.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Bad&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;devFlags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;someFlag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;...;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;...;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Good&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;devFlags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;someFlag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;...;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;...;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then to release a feature, you can cleanup the dev flags by deleting the &lt;code&gt;!devFlags.flag&lt;/code&gt; code (as opposed to copy and pasting the code in the &lt;code&gt;if&lt;/code&gt; block in the bad example).&lt;/p&gt;

&lt;p&gt;Sometimes, you may wish to enable a dev flag to release a feature/project as opposed to cleaning it up.&lt;/p&gt;

&lt;p&gt;This may be nice so that you can quickly enable the feature, make sure everything is sound, and then delete the flag and all its references in a later commit.&lt;/p&gt;

&lt;p&gt;🎉 Now you have an organized pattern for enabling/disabling features by environment. If you don't have something like this in your codebase, follow the steps above (it's just a few small files).&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>An AWS Community Builder Story</title>
      <author>Jason Andrews</author>
      <pubDate>Tue, 11 Jan 2022 18:18:42 +0000</pubDate>
      <link>https://dev.to/aws-builders/an-aws-community-builder-story-4j0b</link>
      <guid>https://dev.to/aws-builders/an-aws-community-builder-story-4j0b</guid>
      <description>&lt;p&gt;In early 2020, I was invited to apply to become an &lt;a href="https://aws.amazon.com/developer/community/community-builders/"&gt;AWS Community Builder&lt;/a&gt;. AWS Community Builders are enthusiasts who work together to learn from each other, create content, and share information about AWS. AWS offers hundreds of services, far too many for a single person to keep up with, so AWS Community Builders work together around topics of interest. I joined the Graviton group to help educate and promote AWS Graviton processors.&lt;/p&gt;

&lt;p&gt;The application window is now open to &lt;a href="https://bit.ly/32XnsZi"&gt;join the AWS Community Builders program&lt;/a&gt; so it’s a good time to share my experience and encourage others to apply. We are always looking for more people to promote AWS Graviton processors. Every community member has a unique story, and the diversity of the members make the program unique.&lt;/p&gt;

&lt;p&gt;One way I participate is by writing articles about &lt;a href="https://dev.to/jasonrandrews"&gt;Graviton related topics&lt;/a&gt; in the &lt;a href="https://dev.to/aws-builders"&gt;AWS Community Builders area on dev.to&lt;/a&gt;. Much of the AWS Community Builder communication takes place on Slack where builders connect with AWS employees and attend presentations by AWS experts. It has been a great program and I have enjoyed the networking and learning opportunities. It was exciting to meet some of the Community Builders in person at re:Invent 2021. It was my first time attending &lt;a href="https://reinvent.awsevents.com/"&gt;re:Invent&lt;/a&gt; and it was a great experience.&lt;/p&gt;

&lt;p&gt;As an AWS Community Builder, I enjoy promoting Graviton processors and the AWS managed services that work on Graviton. Specialized compute is the future, and the time is right for the Arm architecture to make a big impact. This is happening from the smallest sensor to the largest supercomputer. AWS is doing amazing things with EC2 instances powered by Graviton processors and the AWS Nitro System. Most AWS services run on Graviton, and new instance types continue to be launched. Last month, the &lt;a href="https://aws.amazon.com/ec2/instance-types/g5g/"&gt;G5g instance type&lt;/a&gt;, the first to pair Graviton2 with NVIDIA GPUs was launched. The &lt;a href="https://github.com/aws/aws-graviton-getting-started"&gt;GitHub getting started with Graviton&lt;/a&gt; is a good place to find out more, including the latest &lt;a href="https://github.com/aws/aws-graviton-getting-started/blob/main/managed_services.md"&gt;managed services available on Graviton&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One of my goals as a Community Builder is to find software which is not available on the Arm architecture and find ways to get it working on Arm.&lt;/p&gt;

&lt;p&gt;Last fall there were two contests available to motivate application migration to Amazon EC2 instances powered by Arm-based Graviton2 processors. The &lt;a href="https://aws.amazon.com/ec2/graviton/challenge/"&gt;Graviton Challenge&lt;/a&gt; and the &lt;a href="https://awsgraviton.devpost.com/"&gt;AWS Graviton Hackathon&lt;/a&gt; provided a little motivation (and prizes) for developers to migrate applications and benefit from the up to 40% better price performance compared to fifth generation x86-based instances.&lt;/p&gt;

&lt;p&gt;Not wanting to miss out on the fun, I spent some time thinking about what kind of applications would have been candidates for the contests. Turns out, it’s more challenging than anticipated to identify applications that don't already work on the Arm architecture, are not completely trivial to migrate, and are not so complex that it would take more time than contests allow.&lt;/p&gt;

&lt;p&gt;It got me thinking about the state of the Arm software ecosystem. The good news is the amount of software that works on Arm is huge. Linux distributions like Ubuntu and Amazon Linux include thousands of software packages that just work.&lt;/p&gt;

&lt;p&gt;Another significant contributor to the vast amount of software that already works on the Arm architecture is Raspberry Pi. Access to a very low cost board running Linux made it easy to port software to Arm. The success of Raspberry Pi and its availability enabled software to work when Arm servers and laptops came to market. Browsing software projects often shows Raspberry Pi has been a supported platform for a long time, and often the only Arm based platform mentioned.&lt;/p&gt;

&lt;p&gt;I didn’t enter either of the contests, but I served as a judge for the Graviton Hackathon. The projects were impressive. My favorite was a port of Gitpod to Graviton2. I tried this myself and it was difficult. It uses Kubernetes and relies on many layers of container images which are not available for Arm.&lt;/p&gt;

&lt;p&gt;As an AWS Community Builder, it’s interesting for me to work with companies and open-source projects to help them find resources to port to Arm. One of the projects I was interested in and didn’t work on Arm was Kasm Workspaces. &lt;a href="https://kasmweb.com/"&gt;Kasm&lt;/a&gt; provides a container streaming platform based on the &lt;a href="https://github.com/kasmtech/KasmVNC"&gt;KasmVNC open-source project&lt;/a&gt;. I set out to see if Kasm could be brought to Arm.&lt;/p&gt;

&lt;p&gt;To get things started I contacted Kasm to see if there was interest in Arm support, and it turned out they had users asking, but never quite finished it. If machine availability was an issue I offered to provide a Graviton2 AWS instance using my AWS supplied Community Builder credits. Kasm took me up on the offer and managed to port almost all the application in just a few days. There is still 1 Javascript package which does not run on Arm, but Kasm made their first &lt;a href="https://kasmweb.com/downloads.html"&gt;official product release supporting Arm&lt;/a&gt; in December 2021.&lt;/p&gt;

&lt;p&gt;Next, I offered to participate in testing the initial port to Arm and to provide feedback.&lt;/p&gt;

&lt;p&gt;As an emerging company, Kasm is interested to reach new users and always looking for new ways to find more users. I recommended they write a press release and have it approved by Arm. I connected Kasm to the Arm outbound marketing team who approved the PR and it was &lt;a href="https://www.prnewswire.com/news-releases/kasm-technologies-collaborates-with-arm-to-build-arm-powered-remote-work-solutions-301429534.html"&gt;published in November&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I also recommended Kasm enter the Graviton Challenge, which they did. As a result Kasm won a trip to re:Invent and gave a presentation about their experience moving to the Arm architecture.&lt;/p&gt;

&lt;p&gt;To continue our collaboration I contributed some small changes to KasmVNC on GitHub to use &lt;a href="https://github.com/DLTcollab/sse2neon"&gt;sse2neon&lt;/a&gt; for a performance critical part of the application which uses SSE intrinsics and needed to be changed to NEON intrinsics.&lt;/p&gt;

&lt;p&gt;This week Kasm will join Arm Innovation Coffee. It’s a &lt;a href="https://www.youtube.com/watch?v=dPpLT2MqHx8"&gt;live show on YouTube&lt;/a&gt; and is a lot of fun. Tune in to find out more. &lt;/p&gt;

&lt;p&gt;Relationships like these may seem small, but this is what makes the Arm ecosystem and the AWS Community Builder program so strong. Congratulations to Kasm for the great work in 2021. &lt;/p&gt;

&lt;p&gt;Last month, AWS announced the next generation Graviton processor, &lt;a href="https://www.youtube.com/watch?v=Fvh4djznuuM"&gt;Graviton3&lt;/a&gt;, is now available in preview in the &lt;a href="https://aws.amazon.com/ec2/instance-types/c7g/"&gt;C7g EC2 instance type&lt;/a&gt;. Graviton2 was announced just two years ago with the &lt;a href="https://www.arm.com/products/silicon-ip-cpu/neoverse/neoverse-n1"&gt;Neoverse-N1&lt;/a&gt; CPU. It was only 3 years ago that the AWS journey to Arm started with A1 instances (based on Cortex-A72). That year, I was at DockerCon giving demos of containers on AWS A1 instances and very few people could identify Arm at all. This year at re:Invent everybody was talking about Graviton and Arm. I heard many stories about moving applications to Arm and the price performance benefits of Graviton.&lt;/p&gt;

&lt;p&gt;The Community Builder program gives me a great place to promote Graviton. Perhaps someday, Graviton will be the primary architecture for every application running on AWS. &lt;/p&gt;

&lt;p&gt;Thanks for reading my story, now it's your chance to &lt;a href="https://bit.ly/32XnsZi"&gt;become an AWS Community Builder&lt;/a&gt; and write your story.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h8K_3Awf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a00fszj9t5cjphmtfy7e.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h8K_3Awf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a00fszj9t5cjphmtfy7e.jpg" alt="AWS Community Builders" width="880" height="609"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>arm</category>
    </item>
    <item>
      <title>Data Lake explained</title>
      <author>Barbara</author>
      <pubDate>Tue, 11 Jan 2022 17:45:40 +0000</pubDate>
      <link>https://dev.to/barbara/data-lake-explained-3cel</link>
      <guid>https://dev.to/barbara/data-lake-explained-3cel</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-the-famous-analogy"&gt;
  &lt;/a&gt;
  WHAT - the famous analogy
&lt;/h2&gt;

&lt;p&gt;A data warehouse is like a producer of water where you are handed bottled water in a particular size and shape of a bottle. Whereas a data lake is a place where many streams of water flow into it and it's up to everyone to get the water the way he wants it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  WHY
&lt;/h2&gt;

&lt;p&gt;The data lake is &lt;em&gt;the new&lt;/em&gt; data warehouse. It shares the goals of the data warehouse of supporting business insights beyond the day-to-day transaction data handling. The main factors for the evolution of the data warehouse are the following ones:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#abundance-of-unstructured-data"&gt;
  &lt;/a&gt;
  Abundance of Unstructured Data
&lt;/h3&gt;

&lt;p&gt;As we are collecting more and more data (text, xml, json, song, voice, sensor data...). That is why we need to find a better way to process it. &lt;br&gt;
It is possible to transform data during the ETL process. But if we are deciding on a particular form of transformation, we might not have the flexibility we need afterwards for analysis. This applies for deep json structures, where we do not want to distill only some elements. Another example would be text/pdf documents that need to be stored as blobs, but are useless unless processed to extract some metrics.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-rise-of-big-data-technologies"&gt;
  &lt;/a&gt;
  The Rise of Big Data Technologies
&lt;/h3&gt;

&lt;p&gt;The HDFS (Hadoop Distributed File System) made it possible to store Petabytes of data on commodity hardware. It has less cost per TB compared to a MPP (Massive Parallel Programming) database, like &lt;a href="https://dev.to/barbara/redshift-2l6h"&gt;Redshift&lt;/a&gt;.&lt;br&gt;
Thanks to new processing tools like MapReduce or &lt;a href="https://dev.to/barbara/spark-for-beginners-and-you-24ea"&gt;Spark&lt;/a&gt; we can process data at scale on the same hardware used for storage.&lt;br&gt;
&lt;em&gt;Schema-On-Read&lt;/em&gt; makes it possible to do data analytics &lt;em&gt;without&lt;/em&gt; inserting  into a &lt;em&gt;predefined schema&lt;/em&gt; or process unstructured text.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#new-roles-and-advanced-analytics"&gt;
  &lt;/a&gt;
  New Roles and Advanced Analytics
&lt;/h3&gt;

&lt;p&gt;As data is treated as the new oil, people want to get out the most value of it. A data scientist often needs to represent and join data sets together from external sources. For this case the clean consistent and performant model a data-warehouse architecture provides for business users does not work. The data lake needs to cope with these agile and ad-hoc nature data exploration activities. Also machine learning or natural language processing needs to access the data in a different form than ie a &lt;a href="https://en.wikipedia.org/wiki/Star_schema"&gt;star schema&lt;/a&gt; provides.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  BENEFITS
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#lower-costs-more-possibilities"&gt;
  &lt;/a&gt;
  Lower costs - more possibilities
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;ETL Offloading&lt;/em&gt;: Same hardware for storage and processing, a big data cluster. There is no more need for a special ETL grid or additional storage for an staging area.&lt;/li&gt;
&lt;li&gt;Dimensional modelling with conformed dimensions or data marts for &lt;em&gt;high/known-value data&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Low cost per TB makes it possible to store &lt;em&gt;low/unknown value data&lt;/em&gt; for analytics&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#schemaonread"&gt;
  &lt;/a&gt;
  Schema-on-Read
&lt;/h3&gt;

&lt;p&gt;With the big data tools in the hadoop ecosystem, like Spark, it is as easy to work with a file as it is to work with a database, but without creating and inserting into a database. This is called &lt;em&gt;schema-on-read&lt;/em&gt;, as for the schema of a table it is either inferred or specified and the data is not inserted into it, but upon read the data is checked against the specified schema.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#spark-example-schema-inference"&gt;
  &lt;/a&gt;
  Spark - Example Schema Inference
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dfExample = spark.read.csv("data/example.csv", 
                            inferSchema=True,
                            header=true,
                            sep=";"
                           )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The schema is inferenced, but we want to make sure the type is set correctly. For a example a date field should not be set as a string.&lt;/p&gt;

&lt;p&gt;To better control types and malformed data, we can specify a schema (&lt;em&gt;StructType&lt;/em&gt;), to make sure everything is correct. It is still &lt;em&gt;schema-on-read&lt;/em&gt; though. &lt;br&gt;
We also can specify what should happen to a row that is not conform to our schema. The options are drop it, replace with null or fail.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exampleSchema = StructType([
                 StructField("id", IntegerType()),
                 StructField("amount", IntegerType()),
                 StructField("info", StringType()),
                 StructField("date", DateType())
                ])

dfExample = spark.read.csv("data/example.csv", 
                            schema=exampleSchema,
                            sep=";",
                            mode="DROPMALFORMED"
                           )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that we can do direct querying on the fly without database insertions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dfExample.groupBy("info")\
         .sum("amount")\ 
         .orderBy(desc("sum(amount)"))\
         .show(3)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also write SQL with creating a temporary table. Nothing will be written to a database here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dfExample.createOrReplaceTempView("example")
spark.sql("""
          SELECT info, sum(amount) as total_amount
          FROM example
          GROUP BY info
          ORDER BY total_amount desc 
          """).show(3)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#unstructured-data-support"&gt;
  &lt;/a&gt;
  Unstructured data support
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://dev.to/barbara/spark-for-beginners-and-you-24ea"&gt;Spark&lt;/a&gt; can read and write files in&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;text-based formats&lt;/li&gt;
&lt;li&gt;binary formats like Avro (saves space) and &lt;a href="https://www.upsolver.com/blog/apache-parquet-why-use"&gt;Parquet&lt;/a&gt;, that is a columnar storage and&lt;/li&gt;
&lt;li&gt;compressed formats like gzip and snappy
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dfText = spark.read.text("text.gz")
dfSample = spark.read.csv("sample.csv")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Spark can read and write files from a variety of file systems (local, HDFS, S3...) and a variety of databases (SQL, MongoDB, Cassandra, Neo4j...)&lt;/p&gt;

&lt;p&gt;Everything that is exposed in a single abstraction - the dataframe - can be processed with SQL.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#issues"&gt;
  &lt;/a&gt;
  ISSUES
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A data lake can easily transform into an chaotic data garbage dump.&lt;/li&gt;
&lt;li&gt;Data governance is hard to implement as a data lake can be used for cross-department data and external data.&lt;/li&gt;
&lt;li&gt;Sometimes it is unclear for what cases a data lake should replace, offload or work in parallel with a data warehouse or data marts. In all cases dimensional modelling is a valuable practice. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-data-lake-summary"&gt;
  &lt;/a&gt;
  The Data Lake - SUMMARY
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;All types of data are welcome.&lt;/li&gt;
&lt;li&gt;Data is stored "as-is", transformations are done later. &lt;em&gt;Extract-Load-Transform&lt;/em&gt; - ELT instead of ETL.&lt;/li&gt;
&lt;li&gt;Data is processed with &lt;em&gt;schema-on-read&lt;/em&gt;. There is no predefined star-schema before the transformation&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;massive parallelism&lt;/em&gt; and &lt;em&gt;scalability&lt;/em&gt; come out of the box with all big data processing tools. We can use &lt;em&gt;columnar storage&lt;/em&gt; (parquet) without expensive MPP databases.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VeMmQ5yk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/st294h5xpd671gb2zwpe.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VeMmQ5yk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/st294h5xpd671gb2zwpe.jpg" alt="sketch data lake" width="880" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comparison"&gt;
  &lt;/a&gt;
  COMPARISON
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Data Warehouse&lt;/th&gt;
&lt;th&gt;Data Lake&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Data form&lt;/td&gt;
&lt;td&gt;Tabular format&lt;/td&gt;
&lt;td&gt;All formats&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data value&lt;/td&gt;
&lt;td&gt;High only&lt;/td&gt;
&lt;td&gt;High-value, medium-value and to-be-discovered&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ingestion&lt;/td&gt;
&lt;td&gt;ETL&lt;/td&gt;
&lt;td&gt;ELT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data model&lt;/td&gt;
&lt;td&gt;Star- and snowflake with conformed dimensions or data-marts and OLAP cubes&lt;/td&gt;
&lt;td&gt;All representations are possible&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Schema&lt;/td&gt;
&lt;td&gt;Schema-on-write (Known before ingestion)&lt;/td&gt;
&lt;td&gt;Schema-on-read (On the fly at the time of the analysis)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Technology&lt;/td&gt;
&lt;td&gt;MPP databases, expensive with disks and connectivity&lt;/td&gt;
&lt;td&gt;Commodity hardware with parallelism as first principle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data Quality&lt;/td&gt;
&lt;td&gt;High with effort for consistency and clear rules for accessibility&lt;/td&gt;
&lt;td&gt;Mixed, everything is possible&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Users&lt;/td&gt;
&lt;td&gt;Business analysts&lt;/td&gt;
&lt;td&gt;Data scientists, Business analysts &amp;amp; ML engineers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Analytics&lt;/td&gt;
&lt;td&gt;Reports and Business Intelligence visualisations&lt;/td&gt;
&lt;td&gt;Machine Learning, graph analytics and data exploration&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>bigdata</category>
      <category>beginners</category>
      <category>spark</category>
      <category>analytics</category>
    </item>
    <item>
      <title>Introduction to Graphene Python. Build a GraphQL API with Python</title>
      <author>Ssali Jonathan</author>
      <pubDate>Tue, 11 Jan 2022 16:59:57 +0000</pubDate>
      <link>https://dev.to/jod35/introduction-to-graphene-python-build-a-graphql-api-with-python-17i4</link>
      <guid>https://dev.to/jod35/introduction-to-graphene-python-build-a-graphql-api-with-python-17i4</guid>
      <description>&lt;p&gt;&lt;a href="https://youtu.be/QJhiMSUFgDM"&gt;https://youtu.be/QJhiMSUFgDM&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>graphql</category>
      <category>graphene</category>
    </item>
    <item>
      <title>Yummiz</title>
      <author>Naeema Bargir</author>
      <pubDate>Tue, 11 Jan 2022 16:59:31 +0000</pubDate>
      <link>https://dev.to/naeema21/yummiz-aai</link>
      <guid>https://dev.to/naeema21/yummiz-aai</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;A web application that lists different varieties of food recipe in which users can search add their own recipe as well as so the whole process with intergradient.&lt;br&gt;
For which backend connection I have use REST API developed in Node Js and express and for Database  connection MongoDB had used and for frontend React Js.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category-own-adventure"&gt;
  &lt;/a&gt;
  Submission Category: Own Adventure
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;

&lt;p&gt;Backend : (&lt;a href="https://github.com/Naeema21/api-yummiz.git"&gt;https://github.com/Naeema21/api-yummiz.git&lt;/a&gt;)&lt;br&gt;
Frontend: (&lt;a href="https://github.com/Naeema21/yummiz.git"&gt;https://github.com/Naeema21/yummiz.git&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;Link to Preview :(&lt;a href="https://yummizz.herokuapp.com/"&gt;https://yummizz.herokuapp.com/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;&lt;br&gt;
Home page&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tEVHAz6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsx90qw5un4d3kdhcj32.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tEVHAz6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsx90qw5un4d3kdhcj32.png" alt="Image description" width="880" height="329"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add Recipe Page&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fw8w75dx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qq92jpedjwhcc9tyweho.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fw8w75dx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qq92jpedjwhcc9tyweho.png" alt="Image description" width="880" height="378"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>atlashackathon</category>
    </item>
    <item>
      <title>1 line of code: How to convert spaces to tabs</title>
      <author>martin krause</author>
      <pubDate>Tue, 11 Jan 2022 16:55:19 +0000</pubDate>
      <link>https://dev.to/martinkr/1-line-of-code-how-to-convert-spaces-to-tabs-aml</link>
      <guid>https://dev.to/martinkr/1-line-of-code-how-to-convert-spaces-to-tabs-aml</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;spacesToTabs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tabsize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;` {&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;tabsize&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;}`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;g&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Returns the string and replaces all tabs with the given amount of spaces (&lt;code&gt;tab size&lt;/code&gt;).&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-repository-amp-npm-package"&gt;
  &lt;/a&gt;
  The repository &amp;amp; npm package
&lt;/h2&gt;

&lt;p&gt;You can find the all the utility functions from this series at &lt;a href="https://github.com/martinkr/onelinecode"&gt;github.com/martinkr/onelinecode&lt;/a&gt;&lt;br&gt;
The library is also published to &lt;a href="https://www.npmjs.com/package/@onelinecode/onelinecode"&gt;npm as @onelinecode&lt;/a&gt; for your convenience.&lt;/p&gt;

&lt;p&gt;The code and the npm package will be updated every time I publish a new article.&lt;/p&gt;




&lt;p&gt;Follow me on &lt;a href="http://twitter.com/_martinkr"&gt;Twitter: @martinkr&lt;/a&gt; and consider to &lt;a href="https://www.buymeacoffee.com/martinkr"&gt;buy me a coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@zoo_monkey"&gt;zoo_monkey&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fuji"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://modernfrontend.dev/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cH97ToOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://modernfrontend.dev/banner/banner_583-111.png" alt="Subscribe to the weekly modern frontend development newsletter" width="583" height="111"&gt;&lt;/a&gt;&lt;/p&gt;




</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Thumb Rules of Unit Testing</title>
      <author>Talina Shrotriya</author>
      <pubDate>Tue, 11 Jan 2022 16:45:07 +0000</pubDate>
      <link>https://dev.to/talina/thumb-rules-of-unit-testing-45of</link>
      <guid>https://dev.to/talina/thumb-rules-of-unit-testing-45of</guid>
      <description>&lt;p&gt;My ideas on writing meaningful unit tests were crystallized when I read &lt;a href="https://martinfowler.com/articles/practical-test-pyramid.html#UnitTests"&gt;"The Practical Test Pyramid"&lt;/a&gt; today.&lt;/p&gt;

&lt;p&gt;As a novice programmer, I went in mindlessly, not knowing how to test my code.&lt;/p&gt;

&lt;p&gt;The Practical Test Pyramid is an excellent guide, but I want to emphasize unit testing today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-write-unit-tests"&gt;
  &lt;/a&gt;
  Why Write Unit Tests?
&lt;/h2&gt;

&lt;p&gt;As the name suggests - you test a &lt;strong&gt;"unit"&lt;/strong&gt; of your code.&lt;/p&gt;

&lt;p&gt;Unit tests are beneficial in ensuring the code works as intended - it is the first step towards being confident about the logic.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Unit tests have the narrowest scope of all the tests in your test suite.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A service accesses a database to perform &lt;strong&gt;a set of computations&lt;/strong&gt;; the unit tests will cover all edge cases for the performed computations. The access to the database is &lt;strong&gt;"assumed"&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-write-good-unit-tests"&gt;
  &lt;/a&gt;
  How to Write Good Unit Tests?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#cover-nontrivial-cases"&gt;
  &lt;/a&gt;
  Cover Non-Trivial Cases
&lt;/h3&gt;

&lt;p&gt;Test for all edge cases in the code.&lt;/p&gt;

&lt;p&gt;Typically, you won't test if input deserialization works unless you've written the library itself.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;When it comes to unit testing, aim for &lt;strong&gt;confidence coverage&lt;/strong&gt; and not code coverage.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#test-for-observable-behavior"&gt;
  &lt;/a&gt;
  Test for Observable Behavior
&lt;/h3&gt;

&lt;p&gt;Loosely couple tests and code. Refactoring code is a common practice, but refactoring unit tests is stressful.&lt;/p&gt;

&lt;p&gt;Unit tests should always answer two questions -&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is the input?&lt;br&gt;
&lt;em&gt;Is the output expected?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  Structure
&lt;/h3&gt;

&lt;p&gt;Tests, like your code, should be easy to read and understand.&lt;/p&gt;

&lt;p&gt;Most supporters of TDD derive code from tests. Hence, a readable structure goes a long way in translating behaviour into code.&lt;/p&gt;

&lt;p&gt;Use &lt;a href="https://martinfowler.com/bliki/GivenWhenThen.html"&gt;"Given, When, Then"&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Given an input X&lt;/li&gt;
&lt;li&gt;When function Y executes&lt;/li&gt;
&lt;li&gt;Then the outcome is Z&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ensure you maintain a delicate balance between &lt;strong&gt;DRY(Don't Repeat Yourself)&lt;/strong&gt; and &lt;strong&gt;DAMP(Descriptive and Meaningful Phrases)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/6453235/what-does-damp-not-dry-mean-when-talking-about-unit-tests"&gt;Read more about why repetition is acceptable in tests.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testdoubles"&gt;
  &lt;/a&gt;
  TestDoubles
&lt;/h3&gt;

&lt;p&gt;We can use various &lt;a href="https://martinfowler.com/bliki/TestDouble.html"&gt;TestDoubles&lt;/a&gt; to replace production objects for testing purposes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;em&gt;stubs&lt;/em&gt; in cases where branching logic doesn't matter. 
We don't care if the database write fails.&lt;/li&gt;
&lt;li&gt;Use &lt;em&gt;mocks&lt;/em&gt; when the order and the output matter. 
We care if the database write fails the second time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More at &lt;a href="https://martinfowler.com/articles/mocksArentStubs.html"&gt;Mocks aren't Stubs.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me know how you write unit tests in the comments!&lt;/p&gt;

</description>
      <category>testing</category>
      <category>codequality</category>
      <category>programming</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Custom Reack Hooks: useAudio</title>
      <author>Ludal 🚀</author>
      <pubDate>Tue, 11 Jan 2022 15:44:59 +0000</pubDate>
      <link>https://dev.to/iamludal/custom-reack-hooks-useaudio-565j</link>
      <guid>https://dev.to/iamludal/custom-reack-hooks-useaudio-565j</guid>
      <description>&lt;p&gt;In the last episode of the &lt;a href="https://dev.to/iamludal/series/14964"&gt;Custom React Hooks&lt;/a&gt; series, we’ve discovered the &lt;a href="https://dev.to/iamludal/custom-react-hooks-usenetworkstate-1kj6"&gt;useNetworkState&lt;/a&gt; hook to simplify the user’s network state management. Today, we’ll explore another useful custom hook: &lt;code&gt;useAudio&lt;/code&gt;. Ready? Let’s go!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#motivation"&gt;Motivation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#implementation"&gt;Implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#usage"&gt;Usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#support-me"&gt;Support Me&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;Why would you ever need such a hook? We’ll, I’ll give you two examples. The first one is my personal website, &lt;a href="https://iamludal.fr"&gt;iamludal.fr&lt;/a&gt; (I swear this is not self-promotion 🙄), built with React, which top navigation bar contains a button to switch between light and dark theme. Actually, if you turn up the sound a little bit, you might hear a switch sound. This sound comes from this custom hook. The second example is the &lt;a href="https://typospeed.iamludal.fr"&gt;Typospeed&lt;/a&gt; game (not self-promotion either), where you can hear sounds when removing a word (actually, Typospeed was built with &lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt;, but you get the idea). In both examples, we need to play some sounds, and we don’t want to repeat ourselves by manually instantiating a new audio, settings its volume, its playback rate...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;audio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Audio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/switch.mp3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;playbackRate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;
    &lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;volume&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;play&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Play Sound&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;👎 We don’t want write all this code every time we need to use audio sounds. Also, we have to use the &lt;code&gt;useRef&lt;/code&gt; hook in this situation and keep track of its current value in order to not recreate the audio instance at each component re-render.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That being said, we now have a sufficient reason to implement our new custom hook. Let’s get our hands dirty! 👨🏻‍💻&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;As we said in the previous part, we don’t want to repeat ourselves (and this is the major goal of custom hooks). Therefore, our function will take optional parameters for our audio instance (which can be either static or dynamic), corresponding to additional options.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;audio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAudio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/switch.mp3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;volume&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, we don’t want to bother with the &lt;code&gt;.current&lt;/code&gt; property: we have to extract this logic inside the new hook. This way, we will be able to interact with the audio instance directly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;play&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pause&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hence the skeleton will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useAudio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;audio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Audio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the first and basic version of the hook. If you don’t need to have additional options, you’re ready to go. But we will add another parameter to this hook: an options object. Each time a given property of that object changes, we have to update our instance. This way, the options can be updated dynamically from outside — with another hook, such as &lt;code&gt;useState&lt;/code&gt;. The final hook implementation now looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useAudio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;volume&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;playbackRate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;audio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Audio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;volume&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;volume&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;volume&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;playbackRate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;playbackRate&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;playbackRate&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;ℹ️ If you need any other options, feel free to add them depending on your needs. For instance, you could add an array parameter for the &lt;code&gt;play&lt;/code&gt; method in order to only play a specific part of the audio (particularly useful when you have one audio file with multiple sounds, which is a technique used by some games).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our hook is now ready to be used. 🤘&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;Back to our first example, the code can now be simplified as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;audio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAudio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/switch.mp3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;volume&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;playbackRate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;play&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Play Sound&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We’ve abstracted out all the logic inside this new hook, which leads to a simpler, cleaner and more readable code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope this hook will be useful to you for your projects. If you have any questions, feel free to ask them in the comments section. With that being said, thank you for reading me, and I’ll see you next time for a new custom hook. 🤗&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Source code&lt;/strong&gt; available on &lt;a href="https://codesandbox.io/s/custom-react-hooks-usesound-5b74v?file=/src/hooks/useAudio.ts"&gt;CodeSanbox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/5b74v"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#support-me"&gt;
  &lt;/a&gt;
  Support Me
&lt;/h2&gt;

&lt;p&gt;If you wish to support me, you can click the following link to buy me a coffee (which I will then probably turn into a new custom hook... ☕).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/iamludal"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q5uSfQdQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrazozi77j0mdf192de3.png" alt="Buy me a coffee" width="545" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Simplify your code and save money with Lambda Event Filters</title>
      <author>Maurice</author>
      <pubDate>Tue, 11 Jan 2022 15:42:23 +0000</pubDate>
      <link>https://dev.to/aws-builders/simplify-your-code-and-save-money-with-lambda-event-filters-3f5d</link>
      <guid>https://dev.to/aws-builders/simplify-your-code-and-save-money-with-lambda-event-filters-3f5d</guid>
      <description>&lt;p&gt;In this post I'm going to explore how the new event filters in AWS Lambda can be used to implement the data model for a video streaming website in DynamoDB. I'll explain why this feature makes your code simpler and allows you to save money in the process.&lt;/p&gt;

&lt;p&gt;At the end of 2021 AWS launched a new feature for Lambda functions: &lt;a href="https://aws.amazon.com/blogs/compute/filtering-event-sources-for-aws-lambda-functions/"&gt;event filters for different kind of event sources&lt;/a&gt;. When you used an event source in the past, any event coming from it would trigger your code and you needed to figure out in your code if you wanted to act on it. This added some boilerplate code to your lambda functions and some cost to your AWS bill, because often your code would be invoked needlessly.&lt;/p&gt;

&lt;p&gt;With the launch of event filters this changes for some data sources. AWS now allows you to filter events for SQS, Kinesis and DynamoDB &lt;em&gt;before&lt;/em&gt; they hit your Lambda function. This allows you to offload this undifferentiated heavy lifting to AWS at no additional cost and at the same time simplify your own code, because you can throw out (big parts at least) of the existing filter code. Let's see how this can be used.&lt;/p&gt;

&lt;p&gt;Since I'm a big fan of DynamoDB I focused on a DynamoDB use case here. DynamoDB is not great at computing aggregates on the fly. That's why we typically have aggregate items that hold statistical information and are updated asynchronously through a Lambda function whenever data changes in the table. An example for this are video statistics on a YouTube-like video-streaming website. This is what we'll explore now.&lt;/p&gt;

&lt;p&gt;Our video website wants to collect and share certain statistics about videos and users. Each video can be liked or disliked and viewed by users. We want to track the number of likes, dislikes, and views as well as the total viewing-duration per video. For each user we also want to keep track of how many videos the liked, disliked, and viewed as well as their total viewing duration. Synchronously managing these aggregates at scale is challenging at best.&lt;/p&gt;

&lt;p&gt;That's why we borrow a pattern from event sourcing: we write view and vote events to the table and asynchronously update these statistics in the background using streams.&lt;/p&gt;

&lt;p&gt;Let's check out our data model for the platform. I'm using DynamoDB as the database and following the single table design paradigm here. If you want to learn more about that, check out my&lt;a href="https://aws-blog.de/2021/03/dynamodb-in-15-minutes.html"&gt; introduction to DynamoDB&lt;/a&gt; and the &lt;a href="https://aws-blog.de/2021/03/modelling-a-product-catalog-in-dynamodb.html"&gt;single table design pattern&lt;/a&gt;. The base table has a composite primary key made up of the partition (PK) and sort key (SK). There is also a global secondary index (GSI1) with the partition key GSI1PK and sort key GSI1SK. This allows us to lay out our data as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sb1-nzLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/08fx8w2ozbgq8nwr4drt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sb1-nzLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/08fx8w2ozbgq8nwr4drt.png" alt="Base Table" width="880" height="848"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This can be a bit overwhelming at first, but we'll walk through it. In the base table, each user has their own item collection that's identified by the key &lt;code&gt;USER#&amp;lt;userId&amp;gt;&lt;/code&gt; and in that item collection, we first see the summary item that contains the aggregates for that user. Then we have different view items, each of which is identified by the video id it belongs to and when it was stored. That's because we can watch videos multiple times: &lt;code&gt;VIDEO#&amp;lt;videoId&amp;gt;#VIEW#&amp;lt;timestamp&amp;gt;&lt;/code&gt; . Each view item contains the duration in seconds as well. &lt;/p&gt;

&lt;p&gt;Then there are also vote items that are identified by the video id: &lt;code&gt;VIDEO#&amp;lt;videoId&amp;gt;#VOTE&lt;/code&gt;. The vote items contain the &lt;code&gt;voteType&lt;/code&gt; that tells us if it's a like or dislike. We don't store a timestamp in the key, because we want to make sure there aren't multiple likes or dislikes per video by a single user.&lt;/p&gt;

&lt;p&gt;There is also an item collection for each video (&lt;code&gt;VIDEO#&amp;lt;videoId&amp;gt;&lt;/code&gt;) that only contains the summary item with the statistics for the video. If we look at our global secondary index, we can see that the perspective changes. Here we can see the view and vote records per video in a single item collection.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yGGjKgGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/675v0bq54ylcmitv4wb2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yGGjKgGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/675v0bq54ylcmitv4wb2.png" alt="GSI1 View" width="880" height="653"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This table layout allows for a variety of access patterns such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Give me the statistics per videoId&lt;/li&gt;
&lt;li&gt;Give me the statistics per userId&lt;/li&gt;
&lt;li&gt;Give me all views per videoId&lt;/li&gt;
&lt;li&gt;Give me all likes per videoId&lt;/li&gt;
&lt;li&gt;Give me all dislikes per videoId&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we've talked about the data model, let's see how we can create and update the aggregate records. Essentially whenever a new record of type &lt;code&gt;VOTE&lt;/code&gt; is added to the table, we need to update the like and dislike counters on the video and user the record refers to. The same is true for new &lt;code&gt;VIEW&lt;/code&gt; records. When the &lt;code&gt;USER_SUMMARY&lt;/code&gt; or &lt;code&gt;VIDEO_SUMMARY&lt;/code&gt; items are updated, we don't need to do anything. I've provided some &lt;a href="https://github.com/MauriceBrg/snippets/tree/main/dynamodb-streams-lambda-filter"&gt;code on Github&lt;/a&gt; that implements this architecture if you want to follow along.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8yd9-A7M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fkohwruczlh0i8gzt95u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8yd9-A7M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fkohwruczlh0i8gzt95u.png" alt="Architecture" width="880" height="568"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code is a CDK app that creates a DynamoDB table with the required keys as well as two Lambda functions that update the like and view counters. Each Lambda function is connected with a filter to the DynamoDB stream and only responds to the relevant records. At the time of writing this, the higher level DynamoDB event source in the CDK doesn't support the filter criteria parameter yet, so we create this filter through the lower level Event Source Mapping object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Filters aren't yet (CDK v2.3.0) supported for DynamoDB, we have to
# go to the low level CFN stuff here
&lt;/span&gt;&lt;span class="n"&gt;_lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CfnEventSourceMapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"update-view-counters-event-source"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;function_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;update_view_counters_lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;function_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;event_source_arn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data_table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;table_stream_arn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;starting_position&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"LATEST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;batch_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;filter_criteria&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"Filters"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;"Pattern"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                    &lt;span class="c1"&gt;# Only capture view events here
&lt;/span&gt;                    &lt;span class="s"&gt;"dynamodb"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"NewImage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"S"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"VIEW"&lt;/span&gt;&lt;span class="p"&gt;]}}},&lt;/span&gt;  
                    &lt;span class="s"&gt;"eventName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"INSERT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"REMOVE"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is an example that captures only &lt;code&gt;INSERT&lt;/code&gt; and &lt;code&gt;REMOVE&lt;/code&gt; events from the stream if the record has &lt;code&gt;VIEW&lt;/code&gt; as a value in the &lt;code&gt;dynamodb.NewImage.type.S&lt;/code&gt; key. You can also do more advanced filters here, &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html"&gt;take a look at the docs&lt;/a&gt; for reference. There are also two python scripts that complete the demo. The &lt;code&gt;event_generator.py&lt;/code&gt; generates random view and vote events and stores them in the table, while the &lt;code&gt;table_summary.py&lt;/code&gt; periodically queries the user and video summaries and displays them in the console.&lt;/p&gt;

&lt;p&gt;If you start the event generator, you'll see something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python3 event_generator.py
USER 0 likes VIDEO 5
USER 0 watches VIDEO 6
USER 2 watches VIDEO 2
USER 3 watches VIDEO 3
USER 4 dislikes VIDEO 9
USER 0 watches VIDEO 4
USER 0 likes VIDEO 8
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now start the table summary script in another tab and you'll see the view and like/dislike counters change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;|----------+----------+----------+----------+----------|
|videoId   |views     |duration  |likes     |dislikes  |
|----------+----------+----------+----------+----------|
|0         |44        |3389      |5         |1         |
|----------+----------+----------+----------+----------|
|1         |40        |2985      |4         |2         |
|----------+----------+----------+----------+----------|
|2         |40        |3280      |4         |3         |
|----------+----------+----------+----------+----------|
# [...]
|----------+----------+----------+----------+----------|
|9         |41        |3000      |3         |2         |
|----------+----------+----------+----------+----------|
Fetched at 2022-01-02T17:05:29


|----------+----------+----------+----------+----------|
|userId    |views     |duration  |likes     |dislikes  |
|----------+----------+----------+----------+----------|
|0         |83        |6193      |9         |2         |
|----------+----------+----------+----------+----------|
|1         |85        |6002      |5         |6         |
|----------+----------+----------+----------+----------|
|2         |96        |7502      |9         |2         |
|----------+----------+----------+----------+----------|
|3         |71        |5283      |8         |4         |
|----------+----------+----------+----------+----------|
|4         |88        |7009      |6         |7         |
|----------+----------+----------+----------+----------|
Fetched at 2022-01-02T17:05:29

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One more nice thing besides the reduced number of needless invocations is that I can make more assumptions about the kind of data I'm getting in my Lambda functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lambda_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c1"&gt;# We can work on the assumption that we only get items
&lt;/span&gt;    &lt;span class="c1"&gt;# in NewImage with a type of "VIEW", that means we can
&lt;/span&gt;    &lt;span class="c1"&gt;# rely on userId, videoId, and duration being present.
&lt;/span&gt;    &lt;span class="c1"&gt;# We can also assume we get a single record.
&lt;/span&gt;
    &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Records"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"dynamodb"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"NewImage"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;event_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Records"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"eventName"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# INSERT or REMOVE
&lt;/span&gt;    &lt;span class="n"&gt;user_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"userId"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"S"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;video_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"videoId"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"S"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;duration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"duration"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"N"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I encourage you to check out the &lt;a href="https://github.com/MauriceBrg/snippets/tree/main/dynamodb-streams-lambda-filter"&gt;code on Github&lt;/a&gt; and play around with it yourself. It's a neat feature that doesn't come at additional costs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;In this post we've taken a look at the new event filtering feature in Lambda and how it can be used to reduce cost through avoiding unnecessary invocations and simplify your code by allowing you to outsource your event filtering logic to AWS.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed the post and for any feedback, questions or concerns, feel free to reach &lt;/p&gt;

</description>
      <category>aws</category>
      <category>lambda</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Paracetamol.js💊| #3: ¿Qué imprime este código? </title>
      <author>Cristian Fernando </author>
      <pubDate>Tue, 11 Jan 2022 15:33:33 +0000</pubDate>
      <link>https://dev.to/duxtech/paracetamoljs-2-que-imprime-este-codigo-3cfc</link>
      <guid>https://dev.to/duxtech/paracetamoljs-2-que-imprime-este-codigo-3cfc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#qu%C3%A9-crees-que-imprime-el-siguiente-c%C3%B3digo"&gt;
  &lt;/a&gt;
  &lt;strong&gt;¿Qué crees que imprime el siguiente código?&lt;/strong&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;frutas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mango&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Manzana&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Naranja&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Pera&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;pera&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;frutas&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pera&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;a) &lt;code&gt;Uncaught TypeError : cannot read property&lt;/code&gt;&lt;br&gt;
b) &lt;code&gt;TypeError: null is not an object (evaluating)&lt;/code&gt;&lt;br&gt;
c) &lt;code&gt;Naranja&lt;/code&gt;&lt;br&gt;
d) &lt;code&gt;Pera&lt;/code&gt;&lt;/p&gt;




&lt;p&gt;Te dejo la solución en el primer comentario.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>spanish</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
