<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Survivorship Bias</title>
      <author>Muhammad Fauzan</author>
      <pubDate>Tue, 24 Aug 2021 13:59:19 +0000</pubDate>
      <link>https://dev.to/fncolon/survivorship-bias-535a</link>
      <guid>https://dev.to/fncolon/survivorship-bias-535a</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Kegagalan adalah keberhasilan yang tertunda - Quote by Prankster&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Kegagalan itu dimana saja&lt;/strong&gt;, tidak ada keberhasilan yang tertunda, kata itu hanya membuat anda optimis dengan kegagalan, optimislah pada keberhasilan!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#survivorship-bias"&gt;
  &lt;/a&gt;
  Survivorship Bias
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Survivorship bias&lt;/strong&gt; atau &lt;strong&gt;survival bias&lt;/strong&gt; adalah kesalahan logika karena berkonsentrasi pada orang atau hal yang berhasil melewati beberapa proses dan mengabaikan yang tidak, biasanya karena kurangnya pengamatan. Hal ini dapat menyebabkan beberapa kesimpulan yang salah dalam beberapa cara yang berbeda. Ini adalah bentuk dari &lt;a href="https://en.wikipedia.org/wiki/Selection_bias"&gt;&lt;strong&gt;selection bias&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cerita-survivorship-bias"&gt;
  &lt;/a&gt;
  Cerita Survivorship Bias
&lt;/h2&gt;

&lt;p&gt;Survivorship Bias ini sangat erat dengan budaya indonesia yang sering membandingkan anaknya dengan anak orang lain, "ih si A bisa MTK kamu engga", "ih si B bisa IPA, masa kamu bisanya seni doang", padahal setiap anak punya potensi yang berbeda, yang bisa seni doang juga pasti bisa jadi sukses kok seperti &lt;strong&gt;Jeef Kons&lt;/strong&gt; dan &lt;strong&gt;Hajime Isayama&lt;/strong&gt;, tunggu, saya baru saja memperkenalkan &lt;strong&gt;survivorship bias&lt;/strong&gt;, dimana setiap anak yang walaupun bisa seni doang, pasti bisa jadi sukses kok seperti &lt;strong&gt;Jeef Kons&lt;/strong&gt; dan &lt;strong&gt;Hajime Isayama&lt;/strong&gt;, haha, plot twist bukan?&lt;/p&gt;

&lt;p&gt;Paragraf diatas saya memperkenalkan secara objektif apa itu survivorship bias, sebenarnya masih banyak lagi bentuk survivorship bias, seperti seminar 1 tahun menjadi pengusaha hebat, pengusaha hebat yang mana dulu, hebat karena emang punya modal yang banyak karena di environment orang berkecukupan atau emang hebat karena usaha dari 0? perlu dicari tahu dan ditanyakan pada pembicaranya.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cara-menghindari-survivorship-bias"&gt;
  &lt;/a&gt;
  Cara menghindari survivorship bias
&lt;/h2&gt;

&lt;p&gt;Caranya simple, stop memandang rendah dirimu sendiri, stop juga memandang tinggi dirimu sendiri dan memandang rendah orang lain, jadi orang normal yang berkolaborasi bukannya lebih enak? kalau di dunia pemrograman itu ibaratnya tanpa harus ngejek tools atau framework orang lain, siapa tau orang lain tersebut ternyata punya versi terbaik dari cara mengembangkan aplikasi menggunakan tools atau framework tersebut? hayoloh kamu kena skakmat langsung. Ya pakai aja tools atau framework yang kamu suka dan dari hasil research kamu atau kesepakatan tim itu bagus, itu sudah cukup. Tanpa harus mengejek atau menghina orang lain yang memakai tools atau framework lain.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#penutup"&gt;
  &lt;/a&gt;
  Penutup
&lt;/h2&gt;

&lt;p&gt;Setelah mengikuti bacaan diatas, kita jadi tahu kan bahwa membandingkan kita dengan orang lain itu perbuatan yang bias, ya selagi masih hidup, keep humble aja “Stay hungry, stay young, stay foolish, stay curious, and above all, stay humble because just when you think you got all the answers, is the moment when some bitter twist of fate in the universe will remind you that you very much don't.”, tapi jadi humble juga gk saya paksakan, pokonya jadi versi terbaik dari diri kamu dan apa yang kamu punya.&lt;/p&gt;

&lt;p&gt;Makasih, wikipedia dan pembaca.&lt;/p&gt;

</description>
      <category>motivation</category>
      <category>bias</category>
      <category>survive</category>
    </item>
    <item>
      <title>Case Study: Internal Tools at Raspberry Pi</title>
      <author>Monika Ambrozowicz</author>
      <pubDate>Tue, 24 Aug 2021 13:47:05 +0000</pubDate>
      <link>https://dev.to/forestadmin/case-study-internal-tools-at-raspberry-pi-38kk</link>
      <guid>https://dev.to/forestadmin/case-study-internal-tools-at-raspberry-pi-38kk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#executive-summary"&gt;
  &lt;/a&gt;
  Executive Summary
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Raspberry Pi, the creator of famous tiny computers sold in over 40 million units around the world, has chosen Forest Admin as an internal tool solution to manage the network of trusted resellers and design partners.&lt;/li&gt;
&lt;li&gt;In the past, the development team at Raspberry Pi has built internal tools from scratch, then got started with Forest Admin using Lumber and a separate Node.js admin application, and eventually migrated to Forest Admin for Rails applications.&lt;/li&gt;
&lt;li&gt;Forest Admin saved Raspberry Pi a significant amount of time and resources by letting developers focus on the core product, and by automating the work of operations teams.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#about-raspberry-pi"&gt;
  &lt;/a&gt;
  About Raspberry Pi
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Raspberry Pi&lt;/strong&gt; is famous for its single-board, credit card-sized, low-cost, and powerful personal computers, sold in more than forty million copies around the world. Thanks to its tiny size and high performance, Raspberry Pi can become fully functional desktop computers, industrial controllers, robots, even retro games consoles. Such versatility makes them truly special, and it shouldn’t come as a surprise that Raspberry Pi computers are everywhere, including the International Space Station.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cy_Mpr2e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wfiawbik5949lkffxqg8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cy_Mpr2e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wfiawbik5949lkffxqg8.jpg" alt="Raspberry Pi 4: A $35 dual-display computer."&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Raspberry Pi 4: A $35 dual-display computer.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#challenges-that-made-raspberry-pi-seeking-a-robust-and-flexible-internal-tool-solution"&gt;
  &lt;/a&gt;
  Challenges that made Raspberry Pi seeking a robust and flexible internal tool solution
&lt;/h2&gt;

&lt;p&gt;Raspberry Pi offers a wide portfolio of products, including ready-to-use computer kits, microcontroller boards and chips, cameras, touch displays, and various accessories such as cases, power supplies, and educational materials. Every item can be easily ordered online: Raspberry Pi’s official website signposts customers to a global network of trusted businesses called Raspberry Pi Approved Resellers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sHm1K0lh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/07/raspberry-pi-4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sHm1K0lh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/07/raspberry-pi-4.png" alt="Raspberry Pi 4: A $35 dual-display computer."&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Raspberry Pi 4: A $35 dual-display computer.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Raspberry Pi needs an internal tool to handle the process that starts from clicking on ‘Buy now’ to the final purchase on the reseller’s website. Thanks to Forest Admin, Raspberry Pi can have one application dedicated to administering its data and one dedicated to serving it in a read-only fashion. This way, the company can delegate responsibility for user accounts, etc. to Forest Admin and keep the APIs as simple and focused as possible.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2uVwgtx3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/07/raspberry-pi-400-1-.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2uVwgtx3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/07/raspberry-pi-400-1-.jpeg" alt="Raspberry Pi 4: A $35 dual-display computer."&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Raspberry Pi 400, the newest addition to the Raspberry Pi’s portfolio, is a powerful computer built into a neat and portable keyboard.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Raspberry Pi also leverages Forest Admin to manage its operations with Approved Design Partners. This network is in charge of helping businesses that use Raspberry Pi to jump-start the design process of their products.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#forest-admin-the-ideal-admin-panel-solution"&gt;
  &lt;/a&gt;
  Forest Admin: The ideal admin panel solution
&lt;/h2&gt;

&lt;p&gt;As Raspberry Pi handles a large number of reseller links for each product, their staff needs to download and upload links as CSV files, sanitizing the data and associating it with the correct reseller, product, and country as it is imported. For such operations that are tight to a very specific use case, Raspberry Pi needed an admin panel that is highly configurable and flexible. That’s why they quickly set up &lt;a href="https://docs.forestadmin.com/documentation/reference-guide/actions/create-and-manage-smart-actions?utm_source=referral&amp;amp;utm_medium=devto&amp;amp;utm_campaign=devto-organic"&gt;Forest Admin Smart Actions&lt;/a&gt; that allowed Raspberry Pi to both add and update existing links in bulk without staff having to update each record individually in the admin panel.&lt;/p&gt;

&lt;p&gt;Raspberry Pi relies on Forest Admin's Data View to manage products, countries, approved resellers, design partners, and product links, using &lt;a href="https://blog.forestadmin.com/introducing-in-app-ruby-on-rails-support-on-forest-admin/?utm_source=referral&amp;amp;utm_medium=devto&amp;amp;utm_campaign=devto-organic"&gt;Rails Liana&lt;/a&gt; with a Rails API to power the integration. Its staff share CSV exports with the resellers who can then add their own links before they are imported back into the system.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yVXAZU6b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/07/forest-admin-data-dashboard-1-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yVXAZU6b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://s3-eu-west-1.amazonaws.com/blog.forestadmin.com/2021/07/forest-admin-data-dashboard-1-.png" alt="An example of the Data View in Forest Admin from the demo account."&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;An example of the Data View in Forest Admin from the demo account. Forest Admin doesn’t have access to customer data.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When Raspberry Pi got started with Forest Admin, they used &lt;a href="https://docs.forestadmin.com/documentation/getting-started/installation?utm_source=referral&amp;amp;utm_medium=devto&amp;amp;utm_campaign=devto-organic#install-using-a-database-as-your-datasource"&gt;Lumber and a separate Node.js admin application&lt;/a&gt;, just like in this video: &lt;a href="https://www.youtube.com/watch?v=8ajGzG8QGn0"&gt;https://www.youtube.com/watch?v=8ajGzG8QGn0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, Raspberry Pi made a decision to migrate using a &lt;a href="https://docs.forestadmin.com/documentation/getting-started/installation?utm_source=referral&amp;amp;utm_medium=devto&amp;amp;utm_campaign=devto-organic#install-using-a-rails-app-as-your-datasource"&gt;Rails app as a data source&lt;/a&gt;. Here is what one of the developers working on the project said about the move: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By migrating to Rails Liana we were able to consolidate our infrastructure and run a single Rails application that serves both our various product pages and provides the API necessary for Forest Admin. By relying on Forest Admin's single sign-on functionality with Google, we don't need to maintain our own authentication and permission system, avoiding yet another user account for our staff and keeping our application code entirely focused on our business problems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://..."&gt;Read how to install Forest Admin for Rails app.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#are-you-looking-for-an-internal-tool-solution-i-highly-recommend-trying-forest-admin-for-free"&gt;
  &lt;/a&gt;
  Are you looking for an internal tool solution? I highly recommend &lt;a href="https://app.forestadmin.com/signup?utm_source=referral&amp;amp;utm_medium=devto&amp;amp;utm_campaign=devto-organic"&gt;trying Forest Admin for free&lt;/a&gt;
&lt;/h2&gt;

</description>
    </item>
    <item>
      <title>Git-based vs API-first CMS</title>
      <author>Shada </author>
      <pubDate>Tue, 24 Aug 2021 13:10:59 +0000</pubDate>
      <link>https://dev.to/strapi/git-based-vs-api-first-cms-8k4</link>
      <guid>https://dev.to/strapi/git-based-vs-api-first-cms-8k4</guid>
      <description>&lt;p&gt;Content management system (CMS) platforms have been at the forefront of content creation for nearly two decades. However, a lot has changed since the release of WordPress in 2004. New technologies have been introduced and CMSs have evolved, decoupling where the content is managed from where it’s displayed.&lt;/p&gt;

&lt;p&gt;Even though WordPress is &lt;a href="https://w3techs.com/technologies/details/cm-wordpress"&gt;still in high use&lt;/a&gt;, it has a lot of drawbacks. To achieve better performance, higher reliability, greater security, and the freedom of displaying your content wherever and however you want, you may need to move to a &lt;a href="https://strapi.io/headless-cms-guide"&gt;headless CMS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To do that, you’ll need first to decide which type of headless CMS you want to use—Git-based or API-driven?&lt;/p&gt;

&lt;p&gt;In this post I’ll compare both types of headless CMS platforms, focusing on the differences between them, the pros and cons, and the use cases, to help you make your decision.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-headless-cmss-work"&gt;
  &lt;/a&gt;
  How Do Headless CMSs Work?
&lt;/h2&gt;

&lt;p&gt;To better understand different types of CMSs, you first have to know the technologies that power them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gitbased"&gt;
  &lt;/a&gt;
  Git-Based
&lt;/h3&gt;

&lt;p&gt;Git-based CMSs are built upon the Git version control system (VCS).&lt;/p&gt;

&lt;p&gt;Git stores your files and their history of changes in a repository. It allows you to branch out, merge, clone, react to changes, and in general easily manage your content—especially the text element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MP3QQ9FY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/uyMcCGi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MP3QQ9FY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/uyMcCGi.png" alt="Git-based CMS architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In a Git-based CMS, you manage your content through mentioned Git functionalities or the Git-powered editor right in your CMS. Then, on selected changes, the CMS processes the new or updated content and automatically builds and updates your frontend (website or app, for instance). That’s usually done through integration with large Git providers like GitHub or GitLab.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apifirst"&gt;
  &lt;/a&gt;
  API-First
&lt;/h3&gt;

&lt;p&gt;API-first CMSs work as unified pieces of software, serving content through an Application Programming Interface (API).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2GVsZ4SE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Js82usp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2GVsZ4SE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Js82usp.png" alt="API-first CMS architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Developers can use the API (usually REST or GraphQL) to build the required frontend or other types of integrations. Reactions to specific updates and other outputs from the CMS also need to be directly handled.&lt;/p&gt;

&lt;p&gt;The content storage, editor, and general management are all handled by the CMS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-you-use-a-gitbased-cms"&gt;
  &lt;/a&gt;
  If You Use a Git-Based CMS
&lt;/h2&gt;

&lt;p&gt;Each type of headless CMS offers benefits and drawbacks. Here are the pros and cons of a Git-based CMS. As you’ll see, its biggest strengths and weaknesses come from the Git VCS powering it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;The baked-in features of Git:&lt;/strong&gt; Full version control, auto backup, clean control structure.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Integrated development:&lt;/strong&gt; As Git is already the go-to VCS for software development, it’s easy to keep your frontend code right beside your content, keeping everything centralized.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;No lock-in:&lt;/strong&gt; Git is an open-source tool and industry standard allowing you to switch between Git cloud providers and Git-based CMSs relatively easily.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Easy setup:&lt;/strong&gt; Especially if you’re already used to working with Git, setting up Git-based CMS is relatively simple.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;A limited number of front-ends:&lt;/strong&gt; Due to its implementation as Git integration, a Git-based CMS doesn’t scale well for multiple, especially diverse, frontends.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Hard to use with complex or frequently updated content:&lt;/strong&gt; Git is also not a place for frequent live content and heavy static assets due to its update model and the Git architecture, respectively.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Limited querying options:&lt;/strong&gt; It depends on the CMS, but Git-based platforms usually have limited data querying options, limiting the front-end customization potential.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#if-you-use-an-apifirst-cms"&gt;
  &lt;/a&gt;
  If You Use an API-First CMS
&lt;/h2&gt;

&lt;p&gt;The advantages and disadvantages of API-first CMSs vary greatly from the Git-based CMSs. Not only are they based on a different foundation, but as unified pieces of software, they can be different even from each other. &lt;/p&gt;

&lt;p&gt;Because of this, some API-first CMS platforms might have pros and cons that others might not have. Still, some general points apply to most of them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Well-suited for multiple frontends:&lt;/strong&gt; Single, headless CMSs can easily serve different frontends with the help of API.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Great customizability and choice:&lt;/strong&gt; As API-first CMSs are usually built from the ground up, there are many solutions available to choose from. You can even build custom CMSs on top of more advanced APIs.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Easily handles large data:&lt;/strong&gt; This might vary depending on the CMS, but API-first platforms can usually handle larger data sets than Git-based platforms.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Can handle frequently updated content:&lt;/strong&gt; Without Git in the way, updates can be delivered quickly and even more specifically designed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;No Git features guaranteed:&lt;/strong&gt; Since Git isn’t part of the CMS architecture, you have to think twice about things like versioning or backup.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Storage and usage limits:&lt;/strong&gt; As API-first CMSs are more integrated, you can expect them to come with costly limits on storage and usage.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fewer formatting options:&lt;/strong&gt; As with all locked-in CMSs, you’ll be limited only to the formatting options you’re given.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;More dependent on developers:&lt;/strong&gt; Even though API is great for custom frontends, it requires more custom handling and developer involvement.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#opportunities-and-challenges"&gt;
  &lt;/a&gt;
  Opportunities and Challenges
&lt;/h2&gt;

&lt;p&gt;Each type of headless CMS presents opportunities and challenges to the developer. How can you make the most out of either a Git-based or API-first CMS, and what bottlenecks can you expect as you go?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-power-of-gitbased-cmss"&gt;
  &lt;/a&gt;
  The Power of Git-Based CMSs
&lt;/h3&gt;

&lt;p&gt;The benefits of powering a CMS through Git cannot be understated.&lt;/p&gt;

&lt;p&gt;From the start, you’ll be working with a system you’re probably very familiar with. From version control to its open-source nature and multiple integrations to content formatting flexibility,  you’ve got everything you need to set up all kinds of great websites quickly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#seo-and-scalability"&gt;
  &lt;/a&gt;
  SEO and Scalability
&lt;/h3&gt;

&lt;p&gt;However, with content format flexibility also comes more responsibilities, like handling SEO optimizations yourself. That’s something &lt;a href="https://strapi.io/blog/headless-cms-strapi-seo-best-practices"&gt;API-first CMSs will often do automatically&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As for scalability, when going with a Git-based CMS, consider the future of your product. Plan the correct content format ahead of time. Know what frontends you’ll need to handle, how large your data set will get, and whether you’ll host frequently updated content, among other issues. A Git-based CMS doesn’t scale well for certain medium and larger or multiple frontends, so keep this in mind.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-flexibility-of-apifirst-cmss"&gt;
  &lt;/a&gt;
  The Flexibility of API-First CMSs
&lt;/h2&gt;

&lt;p&gt;Using an API-first CMS allows access to opportunities that aren’t possible with Git. It’s much more scalable, can drive multiple diverse frontends, and can even integrate with unique consumer devices like smart speakers. With API, you can do pretty much anything given enough time and the right tools.&lt;/p&gt;

&lt;p&gt;Additionally, API-first CMSs are better suited for handling heavy static assets and frequent content updates. Even if that’s not something you need currently, it’s important to consider as your content grows.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#developerheavy-and-higher-costs"&gt;
  &lt;/a&gt;
  Developer-Heavy and Higher Costs
&lt;/h3&gt;

&lt;p&gt;A drawback to all those API benefits is the fact that it drives higher reliance on developers. Whether that’s a deal breaker or not depends on your situation and use case.&lt;/p&gt;

&lt;p&gt;API-first CMSs offer a more closed, proprietary model than Git, and along with that come higher costs. However, the amount and quality of provided services might be worth it for your use case.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use Cases
&lt;/h2&gt;

&lt;p&gt;Speaking of use cases, what exact products and services can you develop with either headless CMS?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#static-websites"&gt;
  &lt;/a&gt;
  Static Websites
&lt;/h3&gt;

&lt;p&gt;Static websites are among the most popular sites for coupling with headless CMSs. For all the blogs, landing pages, newsletter pages, documentation, and other elements, both Git-based and API-first CMSs will work well—particularly the Git-based ones, given their simplicity and fast setup.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ecommerce"&gt;
  &lt;/a&gt;
  E-Commerce
&lt;/h3&gt;

&lt;p&gt;The type of CMS recommended for e-commerce sites will vary depending on how often you need to update your content. For simple, infrequently updated, small- to medium-sized stores, a Git-based CMS will do just fine. If you’re looking at scalability and planning for future growth, though, you should consider investing in an API-first CMS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiplatform"&gt;
  &lt;/a&gt;
  Multi-Platform
&lt;/h3&gt;

&lt;p&gt;For multi-platform products with multiple frontends, API-first CMS is definitely the way to go. It will require more developer involvement, but with good API, you’ll get access to a huge variety of platforms.&lt;/p&gt;

&lt;p&gt;However, depending on the type of multi-platform support you’re after, Git-based CMS could still be an option. Custom Git integration can work if you want your content to be available not only on your website but also through RSS, in PDF formats, or cross-posted to other websites.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multisource"&gt;
  &lt;/a&gt;
  Multi-Source
&lt;/h3&gt;

&lt;p&gt;If in addition to targeting multiple platforms, you also have multiple content sources, API-first CMSs offer one more feature worth considering—content federation.&lt;/p&gt;

&lt;p&gt;With the right API (usually offered in GraphQL), you can utilize content federation to pull your content for multiple sources and access it all through a unified API-first CMS. That’s a huge advantage for large publications and a huge relief for content management.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Depending on your needs, there’s a use for both Git-based and API-first CMSs. While Git is great for rapid setup, guaranteed versioning, and simplicity of use, API-first CMSs provide more features, are more scalable, and offer more flexibility for future planning.&lt;/p&gt;

&lt;p&gt;Whichever you choose, headless CMSs can make a huge difference in content creation and management for your site. Consider your technical and business needs so you can choose the CMS with the features you most require. &lt;/p&gt;

</description>
      <category>git</category>
      <category>api</category>
      <category>cms</category>
      <category>headlesscms</category>
    </item>
    <item>
      <title>Everything you need to know about OpenTelemetry Java agent</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Tue, 24 Aug 2021 13:00:55 +0000</pubDate>
      <link>https://dev.to/signoz/everything-you-need-to-know-about-opentelemetry-java-agent-4o3n</link>
      <guid>https://dev.to/signoz/everything-you-need-to-know-about-opentelemetry-java-agent-4o3n</guid>
      <description>&lt;p&gt;OpenTelemetry emerged as a single project after the merging of OpenCensus(from Google) and OpenTracing(from Uber) into a single project. The project aims to make telemetry data(logs, metrics, and traces) a built-in feature of cloud-native software applications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The OpenTelemetry Java agent enables Java applications to generate and capture telemetry data automatically. This article gives you a solid overview of the OpenTelemetry Java agent, including how it works. But first, let's take a short detour to understand what OpenTelemetry is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-opentelemetry"&gt;
  &lt;/a&gt;
  What is OpenTelemetry?
&lt;/h2&gt;

&lt;p&gt;OpenTelemetry is a collection of code - a set of APIs, SDKs, tooling, and integrations that help you generate and manage telemetry data. It helps you generate, emit, collect, process, and export telemetry data.&lt;/p&gt;

&lt;p&gt;The telemetry data captured with OpenTelemetry enables observability for your systems and applications. It also aims to standardize this process. The data you collect with OpenTelemetry is vendor-agnostic and can be exported in many formats.&lt;/p&gt;

&lt;p&gt;OpenTelemetry does not come with a backend analysis tool. For storage, analysis, and visualization of telemetry data, you can use a full-stack observability platform like &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-we-generate-telemetry-data-using-opentelemetry"&gt;
  &lt;/a&gt;
  How do we generate telemetry data using OpenTelemetry?
&lt;/h2&gt;

&lt;p&gt;Telemetry data is generated using a process called instrumentation. OpenTelemetry provides instrumentation libraries for both manual and automatic instrumentation. These libraries are specific to the languages that they are used for. Instructions for setting up instrumentation also vary with programming languages.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;OpenTelemetry defines instrumentation libraries as libraries that enable observability for another library.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#opentelemetry-java-libraries"&gt;
  &lt;/a&gt;
  OpenTelemetry Java libraries
&lt;/h2&gt;

&lt;p&gt;For Java applications, OpenTelemetry provides three repositories:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/open-telemetry/opentelemetry-java" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;opentelemetry-java&lt;/b&gt;&lt;/a&gt;&lt;br&gt;This repo is the main OpenTelemetry Java SDK and provides components for manual instrumentation. Top-level components include OpenTelemetry API, extensions, SDK, bridge layers for OpenTracing and OpenCensus.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/open-telemetry/opentelemetry-java-instrumentation" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;opentelemetry-java-instrumentation&lt;/b&gt;&lt;/a&gt;&lt;br&gt;This is the sibling project of opentelemetry-java and provides the all-in-one, easy-to-install auto instrumentation Java agent. The OpenTelemetry Java agent enables you to capture telemetry data from many popular libraries and frameworks. You need to attach it to any Java 8+ application. We will learn more about the Java agent below.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/open-telemetry/opentelemetry-java-contrib" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;opentelemetry-java-contrib&lt;/b&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
OpenTelemetry java provides this repo to cover JVM-based applications and workflows that don't fit into the scope of opentelemetry-java and opentelemetry-java-instrumentation.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-opentelemetry-java-agent"&gt;
  &lt;/a&gt;
  What is OpenTelemetry Java agent?
&lt;/h2&gt;

&lt;p&gt;OpenTelemetry has a very handy Java JAR agent that can be attached to any Java 8+ application for instrumenting Java applications. The Java JAR agent can detect a number of popular libraries and frameworks and instrument it right out of the box for generating telemetry data.&lt;/p&gt;

&lt;p&gt;OpenTelemetry collectors capture the generated telemetry data, which can then be exported in its desired format. If you're using &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt;, then you can use the default OTLP exporters. The Java agent and the exporter can be configured via the command line with some environment variables. You will not need to make any changes to your code, and that's why it is so convenient to get started with the OpenTelemetry Java agent.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-use-opentelemetry-java-agent"&gt;
  &lt;/a&gt;
  How to use OpenTelemetry Java agent?
&lt;/h2&gt;

&lt;p&gt;The Java agent needs to be downloaded and distributed for each host that you want to monitor.&lt;/p&gt;

&lt;p&gt;Steps to use the OpenTelemetry Java agent:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Download and distribute the &lt;a href="https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent-all.jar"&gt;latest Java JAR agent&lt;/a&gt; to each monitored host and service.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prepare environment variables like the service name of your monitored service and endpoint to where you will export your data&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Attach the agent to the jar of your application while running it&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're exporting your data to an observability tool like &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt;, you will have to specify the IP address of the host machine where SigNoz is hosted. SigNoz listens to incoming data at port number: 4317. So remember to allow incoming requests to port number 4317 where SigNoz is hosted.&lt;/p&gt;

&lt;p&gt;Examples of some of the environment variables to take care of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;OTEL_TRACES_EXPORTER=otlp
OTEL_METRICS_EXPORTER=none
OTEL_EXPORTER_OTLP_ENDPOINT=&amp;lt;IP of SigNoz Backend&amp;gt;:4317
OTEL_RESOURCE_ATTRIBUTES="service.name=SERVICE_NAME"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see how the command looks like when you want to run the Java agent attached to an application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;OTEL_METRICS_EXPORTER=none
OTEL_EXPORTER_OTLP_ENDPOINT="http://&amp;lt;IP of SigNoz&amp;gt;:4317"
OTEL_RESOURCE_ATTRIBUTES=service.name=javaApp
java -javaagent:/path/to/opentelemetry-javaagent-all.jar -jar target/*.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The path to the Java agent JAR file needs to be replaced with the location of the file downloaded. For example, for my local, the command looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;OTEL_METRICS_EXPORTER=none
OTEL_EXPORTER_OTLP_ENDPOINT="http://&amp;lt;IP of SigNoz&amp;gt;:4317"
OTEL_RESOURCE_ATTRIBUTES=service.name=javaApp
java -javaagent:/Users/Downloads/to/opentelemetry-javaagent-all.jar -jar target/*.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And with that, the OpenTelemetry Java agent will dynamically inject bytecode to capture telemetry from a number of popular libraries and frameworks. Let's see what some of the libraries and frameworks included in the list are.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#list-of-libraries-and-frameworks-supported-by-opentelemetry-java-agent"&gt;
  &lt;/a&gt;
  List of libraries and frameworks supported by OpenTelemetry Java agent
&lt;/h2&gt;

&lt;p&gt;The supported libraries and frameworks supported by OpenTelemetry Java agent for automatic instrumentation includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Akka HTTP 10.0+&lt;/li&gt;
&lt;li&gt;Apache HttpClient 2.0+&lt;/li&gt;
&lt;li&gt;AWS Lambda 1.0+&lt;/li&gt;
&lt;li&gt;AWS SDK 1.11.x and 2.2.0+&lt;/li&gt;
&lt;li&gt;Cassandra Driver 3.0+&lt;/li&gt;
&lt;li&gt;Elasticsearch API 5.0+&lt;/li&gt;
&lt;li&gt;Elasticsearch REST Client 5.0+&lt;/li&gt;
&lt;li&gt;gRPC 1.6+&lt;/li&gt;
&lt;li&gt;JDBC Java 8+&lt;/li&gt;
&lt;li&gt;Jedis 1.4+&lt;/li&gt;
&lt;li&gt;Kafka 0.11+&lt;/li&gt;
&lt;li&gt;Kubernetes Client 7.0+&lt;/li&gt;
&lt;li&gt;MongoDB Driver 3.1+&lt;/li&gt;
&lt;li&gt;OkHttp 3.0+&lt;/li&gt;
&lt;li&gt;RabbitMQ Client 2.7+&lt;/li&gt;
&lt;li&gt;Spark Web Framework 2.3+&lt;/li&gt;
&lt;li&gt;Spring Web Services 2.0+&lt;/li&gt;
&lt;li&gt;Vert.x 3.0+&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of the popular application servers supported by the Java agent include Glassfish, JBoss EAP, Jetty, Payara, Tomcat, TomEE, Weblogic, and Wildfly.&lt;/p&gt;

&lt;p&gt;You can find the complete list of supported libraries and frameworks supported by OpenTelemetry Java agent at &lt;a href="https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/main/docs/supported-libraries.md#libraries--frameworks" rel="noopener noreferrer nofollow"&gt;opentelemetry-java-instrumentation&lt;/a&gt; GitHub repo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The OpenTelemetry Java Jar agent provides a quick and convenient way to enable your Java application for observability. With out-of-box instrumentation for many popular libraries, the Java agent can be a good starting point for instrumenting your apps with OpenTelemetry.&lt;/p&gt;

&lt;p&gt;As mentioned earlier, OpenTelemetry is a vendor-agnostic instrumentation library. So the telemetry data is portable. You can configure it to export in many different formats. A tool like &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt; supports the default OTLP formats and is a perfect choice for sending your telemetry data. It also comes with a visualization layer where you can visualize charts like the popular RED metrics and distributed tracing with flame graphs and Gantt charts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0vq7cMA8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1qgy9r8vvzy5r8ivpo1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0vq7cMA8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u1qgy9r8vvzy5r8ivpo1.png" alt="SigNoz UI"&gt;&lt;/a&gt;SigNoz Dashboard with visualization of the popular RED metrics for your application (Number of requests, rate of error &amp;amp; duration)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GQ-jub8H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gts0usvvuv34lv6orr4u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GQ-jub8H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gts0usvvuv34lv6orr4u.png" alt="Flamegraphs"&gt;&lt;/a&gt;Flamegraphs and Gantt Charts for visualizing distributed tracing&lt;/p&gt;

&lt;p&gt;Read how to monitor your Spring Boot application with OpenTelemetry Java agent and SigNoz 👇&lt;br&gt;&lt;br&gt;
&lt;a href="https://signoz.io/blog/opentelemetry-spring-boot/"&gt;Monitor your Spring Boot application with OpenTelemetry and SigNoz&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>monitoring</category>
      <category>java</category>
      <category>opentelemetry</category>
    </item>
    <item>
      <title>Microsoft Server Üzerinde SQLite Kurulumu</title>
      <author>Zeki Ahmet Bayar</author>
      <pubDate>Tue, 24 Aug 2021 12:43:10 +0000</pubDate>
      <link>https://dev.to/aciklab/microsoft-server-uzerinde-sqlite-kurulumu-23k0</link>
      <guid>https://dev.to/aciklab/microsoft-server-uzerinde-sqlite-kurulumu-23k0</guid>
      <description>&lt;p&gt;SQLite bilindiği gibi çokça tercih edilen bir veri tabanı yazılımı. Diğer veri tabanı yazılımlarına göre daha sade olması ile öne çıkan SQLite'ın Microsoft Server 2016 üzerinde bir Powershell scripti içerisinde nasıl kullanılacağını beraber inceleyelim.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#versiyon-kontrol%C3%BC"&gt;
  &lt;/a&gt;
  Versiyon kontrolü
&lt;/h3&gt;

&lt;p&gt;Bu aşamada sistemimizle alakalı bazı versiyon bilgilerini öğreneceğiz. Bu bilgiler bize bir sonraki adım olan indirme adımında hangi SQLite versiyonunu indireceğimize karar verirken yardımcı olacak.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;PS&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;IntPtr&lt;/span&gt;&lt;span class="p"&gt;]::&lt;/span&gt;&lt;span class="nx"&gt;Size&lt;/span&gt;&lt;span class="w"&gt; 

&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;komutu sisteminizin kaç bit görmemize yardımcı olur. Bu komuttan 8 çıktısını alıyorsanız 64, 4 çıktısını alıyorsanız 32 bit bir sisteme sahip olduğunuz anlamına gelir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;PS&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;$PSVersionTable&lt;/span&gt;&lt;span class="w"&gt;


&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="w"&gt;                           &lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;&lt;span class="w"&gt;                                                                                                                                                                                                                             
&lt;/span&gt;&lt;span class="o"&gt;----&lt;/span&gt;&lt;span class="w"&gt;                           &lt;/span&gt;&lt;span class="o"&gt;-----&lt;/span&gt;&lt;span class="w"&gt;                                                                                                                                                                                                                             
&lt;/span&gt;&lt;span class="n"&gt;PSVersion&lt;/span&gt;&lt;span class="w"&gt;                      &lt;/span&gt;&lt;span class="nx"&gt;5.1.14393.693&lt;/span&gt;&lt;span class="w"&gt;                                                                                                                                                                                                                     
&lt;/span&gt;&lt;span class="n"&gt;PSEdition&lt;/span&gt;&lt;span class="w"&gt;                      &lt;/span&gt;&lt;span class="nx"&gt;Desktop&lt;/span&gt;&lt;span class="w"&gt;                                                                                                                                                                                                                           
&lt;/span&gt;&lt;span class="n"&gt;PSCompatibleVersions&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;                                                                                                                                                                                                           
&lt;/span&gt;&lt;span class="n"&gt;BuildVersion&lt;/span&gt;&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="nx"&gt;10.0.14393.693&lt;/span&gt;&lt;span class="w"&gt;                                                                                                                                                                                                                    
&lt;/span&gt;&lt;span class="n"&gt;CLRVersion&lt;/span&gt;&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="nx"&gt;4.0.30319.42000&lt;/span&gt;&lt;span class="w"&gt;                                                                                                                                                                                                                   
&lt;/span&gt;&lt;span class="n"&gt;WSManStackVersion&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="nx"&gt;3.0&lt;/span&gt;&lt;span class="w"&gt;                                                                                                                                                                                                                               
&lt;/span&gt;&lt;span class="n"&gt;PSRemotingProtocolVersion&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;2.3&lt;/span&gt;&lt;span class="w"&gt;                                                                                                                                                                                                                               
&lt;/span&gt;&lt;span class="n"&gt;SerializationVersion&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="nx"&gt;1.1.0.1&lt;/span&gt;&lt;span class="w"&gt;            
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;komut çıktısında ise ihtiyacımız olan CLRVersion bilgisi. Örneğin yukarıdaki çıktı için bu bilgi bize .NET 4.0 sürümünü kullanmamız gerektiğini ifade ediyor.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uygun-sqlite-s%C3%BCr%C3%BCm%C3%BCn%C3%BCn-i%CC%87ndirilmesi"&gt;
  &lt;/a&gt;
  Uygun SQLite Sürümünün İndirilmesi
&lt;/h3&gt;

&lt;p&gt;SQLite &lt;a href="https://system.data.sqlite.org/index.html/doc/trunk/www/downloads.wiki"&gt;indirme bağlantısına&lt;/a&gt; giderek edindiğimiz versiyon bilgilerine göre sistemimize uygun SQLite sürümünü indirelim. Bu işlem tarayıcı ya da komut satırı üzerinden gerçekleştirilebilir.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--alIohtq3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6jdo3tybx0gqtc04dj0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--alIohtq3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a6jdo3tybx0gqtc04dj0.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PS&amp;gt; [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
PS&amp;gt; Invoke-WebRequest -Uri "https://system.data.sqlite.org/blobs/1.0.114.0/sqlite-netFx45-binary-bundle-Win32-2012-1.0.114.0.zip" -OutFile C:\Windows\Temp\sqlite.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sıkıştırılmış dosya indirildikten sonra arayüz ya da komut satırı üzerinden ilgili dizine çıkartılmalıdır.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir C:\Windows\sqlite
Expand-Archive C:\Temp\sqlite.zip -DestinationPath C:\Windows\sqlite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#i%CC%87ndirilen-dosyan%C4%B1n-sisteme-eklenmesi"&gt;
  &lt;/a&gt;
  İndirilen Dosyanın Sisteme Eklenmesi
&lt;/h3&gt;

&lt;p&gt;İndirilen SQLite dosyasının aşağıdaki gibi sisteme eklenmesi gerekmektedir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PS&amp;gt; Add-Type -Path "C:\Windows\sqlite\System.Data.SQLite.dll"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>sql</category>
      <category>sqlite</category>
      <category>powershell</category>
    </item>
    <item>
      <title>My Widow's mite: The "this" keyword in Javascript</title>
      <author>Qliqsee</author>
      <pubDate>Tue, 24 Aug 2021 12:39:07 +0000</pubDate>
      <link>https://dev.to/agboola_iyanu/my-widow-s-mite-the-this-keyword-in-javascript-1n86</link>
      <guid>https://dev.to/agboola_iyanu/my-widow-s-mite-the-this-keyword-in-javascript-1n86</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;“Truly I tell you, this poor widow has put more into the treasury than all the others.&lt;br&gt;
They all gave out of their wealth; but she, out of her poverty, put in everything— all she had to live on.”&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Mark 12: 43-44&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Warning, this is the most naïve approach but in the end, I hope to better help you understand the &lt;em&gt;this&lt;/em&gt; keyword even in cases where it proves most elusive to understand.&lt;/p&gt;

&lt;p&gt;I'm writing this passionately because I've witnessed firsthand, the muddling that comes with the &lt;em&gt;this&lt;/em&gt; keyword in context and reference.&lt;/p&gt;

&lt;p&gt;The word &lt;em&gt;This&lt;/em&gt; by itself  is a demonstrative pronoun which is used for indicating (point to) something. To understand you need to first grasp the concept of pronouns and how it saves you from looking like a complete fool on a daily basis 😁.&lt;/p&gt;

&lt;p&gt;Consider this example: &lt;em&gt;Richard scored highest in the test because Richard read all through the night.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Implementing the concept of pronouns as a sane person would, we write: &lt;em&gt;Richard scored highest in the test because&lt;/em&gt; &lt;strong&gt;he&lt;/strong&gt; &lt;em&gt;read all through the night.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Notice how we didn't reuse &lt;em&gt;Richard&lt;/em&gt;, we do this because we don't want people to run away from us. Trust me, any guy that does otherwise should bid farewell to his chances of landing a pretty model-like girlfriend 🤦‍♂️.&lt;/p&gt;

&lt;p&gt;So it is in JavaScript and programming in general, hence the need for a referent. The &lt;em&gt;this&lt;/em&gt; basically refers to an object (an antecedent) which is the subject in the context of an executing code. &lt;/p&gt;

&lt;p&gt;Here is an example to help you further understand:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Richard Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Farming&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;jobFunction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;'s occupation is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;jobFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Richard Doe's occupation is Farming&lt;/span&gt;

  &lt;span class="c1"&gt;// But of course this would also work&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Richard Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Farming&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;jobFunction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;'s occupation is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;jobFunction&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//Richard Doe's occupation is Farming&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our code becomes superfluous writing it the second way as &lt;em&gt;person.name&lt;/em&gt; and &lt;em&gt;person.job&lt;/em&gt;, definitely a turnoff 🤮. Especially since there could be another global variable &lt;em&gt;person&lt;/em&gt; that we might not be aware of and this could lead to difficult-to-debug errors in our code. So we use the &lt;em&gt;this&lt;/em&gt; keyword to avoid ambiguity and emphasize precision, yeah and also for aesthetics (at least in my own case).&lt;/p&gt;

&lt;p&gt;Like objects all JavaScript functions have properties. And when executing, they get the &lt;em&gt;this&lt;/em&gt; property __ a variable with the value of the object that invokes the function where &lt;em&gt;this&lt;/em&gt; is used.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;When in strict mode, "this" holds the value of undefined in the global scope and anonymous in functions that aren't bound to any object.&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gotcha"&gt;
  &lt;/a&gt;
  GOTCHA
&lt;/h2&gt;

&lt;p&gt;To expunge every confusion it is important that you understand this one principle; &lt;strong&gt;this&lt;/strong&gt; &lt;em&gt;is not assigned a value until an object invokes the function where this is defined&lt;/em&gt;.&lt;br&gt;
In most cases &lt;em&gt;this&lt;/em&gt; assumes the value of the object that invokes it. There are only few instances or scenarios when &lt;em&gt;this&lt;/em&gt; does not have the value of the invoking object and I'll touch on some of them here and drop a link to an article for a more in-depth and probably more comprehensive article.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#this-in-global-scope"&gt;
  &lt;/a&gt;
  &lt;em&gt;this&lt;/em&gt; in global scope
&lt;/h3&gt;

&lt;p&gt;This is getting too lengthy yeah? Just one more section with few points and we are done, &lt;strong&gt;Arigato&lt;/strong&gt; 🙏.&lt;/p&gt;

&lt;p&gt;In the global scope all global variables and functions are defined in the window object. Hence, in the global scope &lt;em&gt;this&lt;/em&gt; will have the value of the global window object (except in strict mode).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// in the global scope&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;purple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//purple&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;in strict mode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;purple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="c1"&gt;//Cannot set property 'color' of undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here comes the tricky part, now I'll be touching on some scenarios where the &lt;em&gt;this&lt;/em&gt; keyword becomes confusing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; When "this" is used in a method passed as a callback.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Things get touch hairy when we pass a method (that uses &lt;em&gt;this&lt;/em&gt;) as a parameter to be used as a call back function.&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="c1"&gt;// here is an object with a clickhandler method that is called when a button is clicked&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;farmers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Richard Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Farmer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
    &lt;span class="na"&gt;clickHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;farmers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is a &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;farmers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//button here is an object&lt;/span&gt;
  &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clickHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//the click() method here is a method on the button object and&lt;/span&gt;
  &lt;span class="c1"&gt;// Cannot read property '0' of undefined because there is no farmers property on the button object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;this&lt;/em&gt; here is undefined because &lt;em&gt;button&lt;/em&gt; is an object all by itself and &lt;em&gt;person.clickHandler()&lt;/em&gt; is a method we are passing to &lt;em&gt;button&lt;/em&gt;'s click method as a callback. This implies that the &lt;em&gt;person.clickHandler()&lt;/em&gt; will no longer refer to the person object. &lt;em&gt;this&lt;/em&gt; here will now refer to the object where the &lt;em&gt;person.clickHandler()&lt;/em&gt; method is executed which is the button object.&lt;/p&gt;

&lt;p&gt;Hence it is lucid that when the context changes the &lt;em&gt;this&lt;/em&gt; keyword will no longer refer to the object where &lt;em&gt;this&lt;/em&gt; was originally defined but to the object that invokes the method where &lt;em&gt;this&lt;/em&gt; was defined.&lt;/p&gt;

&lt;p&gt;An approach to resolving this problem is to use the bind method. We will bind the &lt;em&gt;clickhandler()&lt;/em&gt; method to the person object.&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="c1"&gt;// An alternative approach&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;farmers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Richard Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Farmer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
    &lt;span class="na"&gt;clickHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;farmers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is a &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;farmers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//button here is an object&lt;/span&gt;
  &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clickHandler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;//the click() method here is a method on the button object and&lt;/span&gt;
  &lt;span class="c1"&gt;//Richard Doe is a Farmer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;When &lt;em&gt;this&lt;/em&gt; is used inside a closure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Closures are inner functions basically and it is expedient you grasp that closures can't access the &lt;em&gt;this&lt;/em&gt; variable of outer functions by using the &lt;em&gt;this&lt;/em&gt; keyword because the &lt;em&gt;this&lt;/em&gt; varaible can be accessed only by the function itself.&lt;/p&gt;

&lt;p&gt;See this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;farmersMotto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Farming is our pride&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;farmers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Richard Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Farmer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rachael Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Farmer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;clickHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;farmers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Our motto as farmers is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;farmersMotto&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Our motto as farmers is undefined&lt;/span&gt;
        &lt;span class="c1"&gt;//why?&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [object window]&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clickHandler&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;this&lt;/em&gt; inside an anonymous function is bound to the global window object because  it cannot access the outer function's &lt;em&gt;this&lt;/em&gt;(when strict mode is not in use)&lt;/p&gt;

&lt;p&gt;Resolving this on the other hand is quite easy, just set the &lt;em&gt;this&lt;/em&gt; value to a variable before entering the anonymous function. This is a fairly popular approach amongst developers.&lt;/p&gt;

&lt;p&gt;See this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;farmersMotto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Farming is our pride&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;farmers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Richard Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Farmer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rachael Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Farmer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;clickHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;thisPerson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;farmers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Our motto as farmers is: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;thisPerson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;farmersMotto&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Our motto as farmers is: Farming is our pride&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clickHandler&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;this&lt;/em&gt; when a method is assigned to a variable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// This data variable is a global variable&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;farmers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rachael Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Farming&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}];&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// this data variable is a property on the Person object&lt;/span&gt;
    &lt;span class="na"&gt;farmers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Richard Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Farming&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
    &lt;span class="na"&gt;showData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;farmers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;'s job is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;farmers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// Assign the person.showData to a variable&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;showPersonsData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showData&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;//&lt;/span&gt;
  &lt;span class="nx"&gt;showPersonsData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Rachael Doe's job is Farming (from the global data array)&lt;/span&gt;
  &lt;span class="c1"&gt;//The output we desire is: Richard Doe's job is Farming. &lt;/span&gt;
  &lt;span class="c1"&gt;//so how do we fix this?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A quick fix to this will be to use the bind method.&lt;/p&gt;

&lt;p&gt;Like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// This data variable is a global variable&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;farmers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rachael Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Farming&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}];&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// this data variable is a property on the Person object&lt;/span&gt;
    &lt;span class="na"&gt;farmers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Richard Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Farming&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
    &lt;span class="na"&gt;showData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;farmers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;'s job is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;farmers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// Assign the person.showData to a variable&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;showPersonsData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;//&lt;/span&gt;
  &lt;span class="nx"&gt;showPersonsData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Richard Doe's job is Farming (from the global data array)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, there  are other cases of the Javascript &lt;em&gt;this&lt;/em&gt; keyword errors and fixes. I recommend you read &lt;a href="https://www.javascripttutorial.net/javascript-apply-method/"&gt;this article&lt;/a&gt; for an in-depth understanding of the &lt;em&gt;this&lt;/em&gt; keyword.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-note"&gt;
  &lt;/a&gt;
  Final Note
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aDoq0QBo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwo2jd9y4c8ne3baghsx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDoq0QBo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwo2jd9y4c8ne3baghsx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm inexperienced myself but I hope I have been able to help you out with the little I know. Lemme know what you think 👋.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In everything I did, I showed you that by this kind of hard work we must help the weak, remembering the words the Lord Jesus himself said: ‘It is more blessed to give than to receive.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Act 20:35&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>functional</category>
      <category>beginners</category>
      <category>believer</category>
    </item>
    <item>
      <title>Interviews are about telling a story</title>
      <author>Laurie</author>
      <pubDate>Tue, 24 Aug 2021 12:34:23 +0000</pubDate>
      <link>https://dev.to/laurieontech/interviews-are-about-telling-a-story-21no</link>
      <guid>https://dev.to/laurieontech/interviews-are-about-telling-a-story-21no</guid>
      <description>&lt;p&gt;Last week I was in &lt;a href="https://twitter.com/DThompsonDev"&gt;Danny Thompson's&lt;/a&gt; twitter space talking about tech interviews. One piece of advice I gave was about preparing for conversational interviews and the types of questions you get asked.&lt;/p&gt;

&lt;p&gt;Apparently, people wanted to learn more!  And as always, I'm happy to oblige.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tech-interviews-arent-only-about-code"&gt;
  &lt;/a&gt;
  Tech Interviews aren't only about code
&lt;/h2&gt;

&lt;p&gt;You may be familiar with guides for studying and preparing to ace tech interviews. Oftentimes they focus on algorithms and data structures. You'll also find write-ups and websites on studying for systems design interviews and other abstract exercises. Prepping for these types of questions are great. However, they aren't the only type of interview rounds you're likely to encounter.&lt;/p&gt;

&lt;p&gt;In most interview processes you'll have rounds that are very conversational in nature. They're typically a mix of technical and people skills questions. This post is about setting yourself up for success in these interviews.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-type-of-questions-can-you-expect"&gt;
  &lt;/a&gt;
  What type of questions can you expect?
&lt;/h2&gt;

&lt;p&gt;The interviewer in conversational rounds can be anyone from a manager to a colleague to a skip level director. However, their goal is often the same. How do you collaborate? How do you communicate? What level of experience do you have handling challenges that are both technical and people-focused?&lt;/p&gt;

&lt;p&gt;Examples of the types of questions they might ask are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tell me about a time where you had to say no to a request?&lt;/li&gt;
&lt;li&gt;Have you ever had to give feedback to a more senior engineer? Can you tell me about that?&lt;/li&gt;
&lt;li&gt;What mistakes have you made in implementing a system? What would you do differently next time?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are hundreds of these types of questions, but you get the idea.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-a-good-answer-look-like"&gt;
  &lt;/a&gt;
  What does a good answer look like?
&lt;/h2&gt;

&lt;p&gt;Sometimes these answers explicitly ask for a story, e.g. "tell me about a time". Sometimes it's less overt and they say "how would you handle". In either case, having a real life example you can point to helps ground your answer and show the experience you have.&lt;/p&gt;

&lt;p&gt;Stories should have a beginning, a middle and an end. They should show a positive outcome or an outcome where you can point to the mistakes that were made and what you'd do differently. They also need to be clear, concise and effective. Most importantly, the story needs to clearly connect to the question being asked.&lt;/p&gt;

&lt;p&gt;This sounds like a lot to ask on the spot! You have to think about the question, come up with an anecdote, package it well, and relay it back to the interviewer. All in 5 or so minutes, maybe less. Yikes!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How?!
&lt;/h2&gt;

&lt;p&gt;This is where my original advice comes into play. You don't need to think of every question you might be asked. But you should think of some stories ahead of time.&lt;/p&gt;

&lt;p&gt;Have 3-5 stories in your back pocket going into an interview. They should highlight different aspects of your collaboration and communication style so that they can fit the questions being asked.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A story where you did everything right&lt;/li&gt;
&lt;li&gt;A story where you did something wrong and learned from it&lt;/li&gt;
&lt;li&gt;A story involving a peer&lt;/li&gt;
&lt;li&gt;A story involving management&lt;/li&gt;
&lt;li&gt;A story involving another team, company, or external player&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This list isn't exhaustive, but it will help you start thinking about some good anecdotes. Once you've zeroed in on your stories you can start to practice talking about them.&lt;/p&gt;

&lt;p&gt;When prepping a story consider an interview enviroment. You want to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Get to the point quickly - remove any extraneous or overly detailed pieces of information&lt;/li&gt;
&lt;li&gt;Be clear - beginning, middle and end, make sure that your point comes across&lt;/li&gt;
&lt;li&gt;Connect to the question - this takes some practice, but try and mention the keywords of the question as you're concluding the story and drive home how it connects&lt;/li&gt;
&lt;li&gt;Show off - this doesn't mean you should brag, but try and show yourself in a positive light, even when the story involves a misadventure&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thinking through all of this ahead of time will give you confidence going into these types of interviews. You won't be stuck trying to think of a good anecdote in live time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#important-caveats"&gt;
  &lt;/a&gt;
  Important caveats
&lt;/h2&gt;

&lt;p&gt;There are a couple mistakes to avoid.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;If they ask for a time you weren't successful, don't use a story where you were. Always have a story for when you messed up. Be able to analyze what you could have done differently, but don't avoid the point of the question.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You don't need to be an engineer to answer these questions well. If you are a career changer you can tell a story involving retail managers, your fellow line cook, the military. Whatever it is, this is a great opportunity to show how your current experience relates to the role and why you have more to offer than someone straight out of school.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#interviews-are-about-you"&gt;
  &lt;/a&gt;
  Interviews are about you
&lt;/h2&gt;

&lt;p&gt;For all the flaws with technical interviews, conversational interviews are different. You don't need to be the most outgoing person in the room or have studied a textbook worth of potential questions. A few focused areas of prep will help you show off your skills and experience.&lt;/p&gt;

</description>
      <category>career</category>
      <category>interview</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>5 Things to do before making the build for Production. (React JS)</title>
      <author>Atul Bhatt</author>
      <pubDate>Tue, 24 Aug 2021 12:25:58 +0000</pubDate>
      <link>https://dev.to/atulbhattsystem32/5-things-to-do-before-making-the-build-for-production-react-js-j8b</link>
      <guid>https://dev.to/atulbhattsystem32/5-things-to-do-before-making-the-build-for-production-react-js-j8b</guid>
      <description>&lt;p&gt;This article is not something you might not already know but maybe you might not have it all listed in a one place. There can be more things that I'll surely be missing in this article which I would like you to mention down in the comments so that I can compile another part to this article. And this is a beginner level post.&lt;/p&gt;

&lt;p&gt;So let's start on listing the things that I feel one should do before pushing their production build. These are the things that I have used for the react project I have built but they are definitely the points which can surely be helpful in other projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Clearing all the &lt;code&gt;console.logs&lt;/code&gt; that are absolutely not intended for the users. And it's rare that &lt;code&gt;console.logs&lt;/code&gt; are there for users.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Remove all the &lt;code&gt;commented code&lt;/code&gt; which doesn't serves any purpose or in the end is just misleading. Comments are meant for giving extra context to why something has been done not the other way around.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9C7MQvmU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ttpxsa5z79q4077anq4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9C7MQvmU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ttpxsa5z79q4077anq4.png" alt="Screenshot (309)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The above screenshot depicts how there is a &lt;code&gt;useless console log&lt;/code&gt; which the developer might have used for the &lt;code&gt;testing purpose&lt;/code&gt; which should be &lt;code&gt;removed&lt;/code&gt; once everything is wrapped up in development and the project is ready for getting into production.&lt;/p&gt;

&lt;p&gt;Another thing worth keeping note is the commented code which serves no purpose in the end.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Removing all the &lt;code&gt;unused npm packages&lt;/code&gt; and &lt;code&gt;libraries&lt;/code&gt; that are installed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; Deleting all the &lt;code&gt;unused files&lt;/code&gt; that are just clogging up.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It might feel overwhelming to find all the unused packages and files manually but don't you worry.&lt;br&gt;
As the diamond cuts the diamond, in the same way we will use another package to remove the dead files. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can follow the packages below:&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/depcheck"&gt;depcheck&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/unimported"&gt;unimported&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KmXtWWmb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/935ega4ef8386v4uqz5k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KmXtWWmb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/935ega4ef8386v4uqz5k.png" alt="Screenshot (119)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; Check how the build works by &lt;code&gt;serving the build&lt;/code&gt; in react. I know that I used to create a build and then push it to staging server to check how it will behave there because I wasn't aware of the fact that React offers this functionality. It's always good to check your build before pushing it to the server.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NzF2Hvkt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfijqotdyhfohsq6zfqk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NzF2Hvkt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfijqotdyhfohsq6zfqk.png" alt="Screenshot (310)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So basically this is not about improving the code or optimizing it. These things go hand in hand when you are doing development.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The goal🎯 of this article is primarily on giving the finishing touch to your React Web App before making it live in the production.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I hope this article was helpful to you. I would be more than happy to receive your feedback on this article. Thanks for your precious time reading this. Stay tuned for more insightful reading by me.😊&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>writing</category>
    </item>
    <item>
      <title>All about .NET MAUI (+15 NEW Features)🏅</title>
      <author>Dotnetsafer</author>
      <pubDate>Tue, 24 Aug 2021 11:56:37 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/all-about-net-maui-15-new-features-4dge</link>
      <guid>https://dev.to/dotnetsafer/all-about-net-maui-15-new-features-4dge</guid>
      <description>&lt;p&gt;.NET MAUI means &lt;strong&gt;.NET Multi-Platform&lt;/strong&gt; App User Interface and allows us to build native desktop and mobile apps with a single code base. .NET MAUI will be running on .NET 6, which will be released in &lt;strong&gt;November 2021.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;According to Microsoft, .NET MAUI is an &lt;strong&gt;evolution&lt;/strong&gt; of Xamarin Forms with rebuilt controls from the group up for performance and extensibility.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#whats-the-difference-between-net-maui-and-xamarin-forms"&gt;
  &lt;/a&gt;
  What’s the difference between .NET MAUI and Xamarin Forms?
&lt;/h2&gt;

&lt;p&gt;With .NET MAUI based on .NET 6, the evolution of Xamarin Forms will be integrated into the new world of a single .NET.&lt;/p&gt;

&lt;p&gt;With .NET 6 native app development becomes part of .NET like other frameworks such as &lt;strong&gt;ASP.NET Core&lt;/strong&gt; already have with &lt;strong&gt;.NET 5.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In .NET MAUI, &lt;strong&gt;all your code is in a single project&lt;/strong&gt; compared to Xamarin Forms, where you had to have a project for every platform. It should reduce complexity and make it an overall better developer experience.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#net-maui-features-lets-start-with-basics"&gt;
  &lt;/a&gt;
  🟢.NET MAUI features: Let’s start with basics
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#support"&gt;
  &lt;/a&gt;
  🟢Support
&lt;/h3&gt;

&lt;p&gt;.NET 6 will be released in November 2021 and will be supported for three years, as a Long Term Support (LTS) release. The platform matrix has been significantly expanded compared to .NET 5.&lt;/p&gt;

&lt;p&gt;The additions are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Android.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;iOS.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mac&lt;/strong&gt; and &lt;strong&gt;Mac Catalyst&lt;/strong&gt;, for x64 and Apple Silicon (AKA “M1”).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows Arm64 (specifically &lt;strong&gt;Windows Desktop&lt;/strong&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;.NET 6 Debian container images are based on Debian 11 (“bullseye”), which is currently in testing.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#startup"&gt;
  &lt;/a&gt;
  🟢 Startup
&lt;/h3&gt;

&lt;p&gt;The .NET MAUI applications will use a Startup class that will allow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Configure&lt;/strong&gt; method to pipe service registration, handler registration, or application customization processes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Be able to &lt;strong&gt;create&lt;/strong&gt; a custom HostBuilder.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For instance 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IAppHostBuilder&lt;/span&gt; &lt;span class="n"&gt;appBuilder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;     
  &lt;span class="n"&gt;appBuilder&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;appBuilder&lt;/span&gt;         
 &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;UseCompatibilityRenderers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;         
 &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UseMauiApp&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, if you don’t want to customize anything special, or you want to use your own dependency container or something, you can.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#accessibility"&gt;
  &lt;/a&gt;
  🟢 Accessibility
&lt;/h3&gt;

&lt;p&gt;Adding more control and improving the accessibility &lt;strong&gt;API&lt;/strong&gt; to avoid confusion in addition to aligning the behavior in all cases and platforms is one of the priorities in one of the sections with such importance as accessibility.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Entry&lt;/span&gt;     
  &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Entry text TH"&lt;/span&gt;     
  &lt;span class="n"&gt;FontSize&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"14"&lt;/span&gt;     
  &lt;span class="n"&gt;SemanticProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Description&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Description text"&lt;/span&gt;    
  &lt;span class="n"&gt;SemanticProperties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Hint&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Hint text"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The concept of &lt;strong&gt;SemanticProperties&lt;/strong&gt; is added. Microsoft are talking about a series of properties that add extra information to Views to allow it to correctly interpret what happens when using the screen reader, or keyboard navigation.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#workload-installation"&gt;
  &lt;/a&gt;
  🟢 Workload Installation
&lt;/h3&gt;

&lt;p&gt;As part of &lt;strong&gt;.NET&lt;/strong&gt; unification, Microsoft have introduced the concept of SDK workloads to enable specific developer scenarios on top of the .NET SDK. In previous preview the underlying SDKs for &lt;strong&gt;iOS, Mac Catalyst, macOS, Android&lt;/strong&gt; were enabled. Now they are introducing the maui, maui-desktop, maui-mobile and workloads. The first will acquire and install all the required SDKs for building .NET MAUI applications.&lt;/p&gt;

&lt;p&gt;In the near future &lt;strong&gt;Visual Studio 2022&lt;/strong&gt; will include these with its installer.&lt;/p&gt;

&lt;p&gt;If you want use them, just open a CLI and check what you have installed 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;dotnet&lt;/span&gt; &lt;span class="n"&gt;sdk&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H5osV6Yb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2A7MQ88aV7HyNHMpcD0SNfCA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H5osV6Yb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2A7MQ88aV7HyNHMpcD0SNfCA.png" alt="Checking dotnet sdk version&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After verifying what’s installed, you can see how the additional workloads are running 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;dotnet&lt;/span&gt; &lt;span class="n"&gt;workload&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FfwOWmXe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AQPgx0DyQUuNW_lnFWeMZfw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FfwOWmXe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AQPgx0DyQUuNW_lnFWeMZfw.png" alt="Checking additional workloads&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally to install .NET MAUI you need to execute 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;dotnet&lt;/span&gt; &lt;span class="n"&gt;workload&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;maui&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#net-maui-features-ui-and-ux"&gt;
  &lt;/a&gt;
  🟡.NET MAUI features: UI and UX
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#shared-fonts-images-and-app-icons"&gt;
  &lt;/a&gt;
  🟡Shared fonts, images, and app icons
&lt;/h3&gt;

&lt;p&gt;Fonts and images can be placed in one location in your solution and .NET MAUI will enable them to natively work on all platforms you target. These are tracked in your *.csproj as SharedImage and SharedFont.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ItemGroup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SharedImage&lt;/span&gt; &lt;span class="n"&gt;Include&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"appicon.svg"&lt;/span&gt; &lt;span class="n"&gt;ForegroundFile&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"appiconfg.svg"&lt;/span&gt; &lt;span class="n"&gt;IsAppIcon&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SharedFont&lt;/span&gt; &lt;span class="n"&gt;Include&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Resources\Fonts\ionicons.ttf"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;ItemGroup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both accept wildcards to include all files within a location.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ItemGroup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SharedImage&lt;/span&gt; &lt;span class="n"&gt;Include&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"appicon.svg"&lt;/span&gt; &lt;span class="n"&gt;ForegroundFile&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"appiconfg.svg"&lt;/span&gt; &lt;span class="n"&gt;IsAppIcon&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SharedImage&lt;/span&gt; &lt;span class="n"&gt;Include&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Resources\Images*"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SharedFont&lt;/span&gt; &lt;span class="n"&gt;Include&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Resources\Fonts*"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;ItemGroup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#font-scaling"&gt;
  &lt;/a&gt;
  🟡 Font Scaling
&lt;/h3&gt;

&lt;p&gt;All controls across all platforms now have font scaling enabled by default. This means as your application users adjust their text scaling preferences in the OS, your &lt;strong&gt;UI&lt;/strong&gt; will reflect their choice. This produces a more accessible app by default.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DUN_GIjI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AN6J5nyt4BkCfJep908esRQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DUN_GIjI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AN6J5nyt4BkCfJep908esRQ.png" alt=".NET MAUI font scaling feature&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each control has an added FontAutoScalingEnabled, and it even works with FontImageSource or your font icons. Setting a FontSize is your 100% size, and to lock it in you’ll set FontAutoScalingEnabled =”false" 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;VerticalStackLayout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt;
    &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Scaling disabled"&lt;/span&gt;
    &lt;span class="n"&gt;FontSize&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"18"&lt;/span&gt;
    &lt;span class="n"&gt;FontAutoScalingEnabled&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"False"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt;
    &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Scaling enabled"&lt;/span&gt;
    &lt;span class="n"&gt;FontSize&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"18"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;VerticalStackLayout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#new-layouts"&gt;
  &lt;/a&gt;
  🟡 New Layouts
&lt;/h3&gt;

&lt;p&gt;Microsoft also tells us that the layouts that have been used in the &lt;strong&gt;.NET MAUI&lt;/strong&gt; are the &lt;strong&gt;Xamarin.Forms&lt;/strong&gt; layouts. They say they started with that approach to quickly get the user interface on screen and focus on completing their library of &lt;strong&gt;UI 40&lt;/strong&gt; controls.&lt;/p&gt;

&lt;p&gt;At the same time, they have been creating streamlined layouts based on a new LayoutManager approach that employs its long &lt;strong&gt;7 years&lt;/strong&gt; of Xamarin.Forms design training to optimize consistency, performance, and maintainability.&lt;/p&gt;

&lt;p&gt;One of the updates that you may have noticed is the leveling out of the default spacing values in these layouts: &lt;strong&gt;0&lt;/strong&gt;. If you’ve used the legacy layouts, then you already know the different arbitrary values previously set there. Zero sets a clearer expectation and prompts you to set your preferred values that best suit your design needs.&lt;/p&gt;

&lt;p&gt;A very easy way is 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ResourceDictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Style&lt;/span&gt; &lt;span class="n"&gt;TargetType&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"StackLayout"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Setter&lt;/span&gt; &lt;span class="n"&gt;Property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Spacing"&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"6"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Style&lt;/span&gt; &lt;span class="n"&gt;TargetType&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Grid"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Setter&lt;/span&gt; &lt;span class="n"&gt;Property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"ColumnSpacing"&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"6"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Setter&lt;/span&gt; &lt;span class="n"&gt;Property&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"RowSpacing"&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"6"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;ResourceDictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#native-alerts"&gt;
  &lt;/a&gt;
  🟡 Native Alerts
&lt;/h3&gt;

&lt;p&gt;Each platform has a native way of displaying alerts to users. These can be simple informational popups, simple input forms, and even action sheets with multiple options to guide a user.&lt;br&gt;
These are available from any Page in a .NET MAUI application. 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nf"&gt;DisplayAlert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Alert"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"You have been alerted"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"OK"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wqGRHQEd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/459/1%2AFEud8Hr07E3yTupU2A_rJw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wqGRHQEd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/459/1%2AFEud8Hr07E3yTupU2A_rJw.png" alt=".NET MAUI new alert feature"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#clipping"&gt;
  &lt;/a&gt;
  🟡 Clipping
&lt;/h3&gt;

&lt;p&gt;When you need to mask content you can now add shapes to the clipping region of a layout or view. The most common use for this is to make a circle image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5mOlPBA---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2A4HZuLcl8LBX0d1JsHagZXg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5mOlPBA---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2A4HZuLcl8LBX0d1JsHagZXg.png" alt="Clipping function in .NET MAUI"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#gestures"&gt;
  &lt;/a&gt;
  🟡Gestures
&lt;/h3&gt;

&lt;p&gt;Gesture recognizers allow you to apply tap, pinch, pan, swipe, and drag-and-drop to any view instance. You can apply them easily in &lt;strong&gt;XAML.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GestureRecognizers&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TapGestureRecognizer&lt;/span&gt; &lt;span class="n"&gt;NumberOfTapsRequired&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="n"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"{Binding OnTileTapped}"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GestureRecognizers&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="n"&gt;Grid&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="p"&gt;--&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tCMn1OL4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1050/1%2A3rZ4xnBHEzrplaASsczMtQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tCMn1OL4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1050/1%2A3rZ4xnBHEzrplaASsczMtQ.gif" alt=".NET MAUI gestures"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#splash-screen"&gt;
  &lt;/a&gt;
  🟡 Splash Screen
&lt;/h3&gt;

&lt;p&gt;On mobile platforms especially you want your first screen to appear as quickly as possible, and this is done by implementing a static splash screen. &lt;strong&gt;.NET MAUI&lt;/strong&gt; now has a single place to describe your splash screen for all platforms that support them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MauiSplashScreen&lt;/span&gt; &lt;span class="n"&gt;Include&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Resources\appiconfg.svg"&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#512BD4"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0FiZDjaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/900/1%2AiU1Ic31XPhM6ZPyGQ96bLw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0FiZDjaJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/900/1%2AiU1Ic31XPhM6ZPyGQ96bLw.png" alt=".NET MAUI splash screen"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#new-control-handlers"&gt;
  &lt;/a&gt;
  🟡 New Control Handlers
&lt;/h3&gt;

&lt;p&gt;They have introduced the first controls and properties that implement a new handler approach. These include partial implementations of &lt;strong&gt;Button, Label, and Entry, Slider, and Switch.&lt;/strong&gt; They are now accepting pull requests to fill out complete implementations, and several contributors have already successfully contributed.&lt;/p&gt;

&lt;p&gt;The HelloMaui sample application now runs from a single project to macOS, iOS, and Android showcasing the current set of ported controls.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;macOS&lt;/strong&gt; 👇&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1GbmOZnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AHx6JuzXFekHJ093Dud-zQA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1GbmOZnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1050/1%2AHx6JuzXFekHJ093Dud-zQA.png" alt=".NET MAUI Control handlers (macOS)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;iOS&lt;/strong&gt; 👇&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IGKXB2HC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/449/1%2AWfra-g6uuRkDBNTjmCYLzA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IGKXB2HC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/449/1%2AWfra-g6uuRkDBNTjmCYLzA.png" alt=".NET MAUI Control handlers (iOS)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Android&lt;/strong&gt; 👇&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UzxDORYG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/422/1%2A4fKSw3HBCMtZoxE4rAnhTw.png" alt=".NET MAUI Control handlers (Android)"&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#net-maui-better-improvements"&gt;
  &lt;/a&gt;
  🟠 .NET MAUI: Better improvements
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#mac-catalyst"&gt;
  &lt;/a&gt;
  🟠 Mac Catalyst
&lt;/h3&gt;

&lt;p&gt;You can add the following TargetFramework settings to your project to build for macOS desktop, using Mac Catalyst.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TargetFrameworks&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;net6&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;net6&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ios&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;TargetFrameworks&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TargetFrameworks&lt;/span&gt; &lt;span class="n"&gt;Condition&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;" '$(OS)' != 'Windows_NT' "&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TargetFrameworks&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="n"&gt;net6&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;maccatalyst&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;TargetFrameworks&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#single-project-and-windows"&gt;
  &lt;/a&gt;
  🟠 Single Project and Windows
&lt;/h3&gt;

&lt;p&gt;Microsoft have made a few updates to single project based on developer feedback and Windows support to adopt the latest features.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The NuGet package is replaced with the .NET MAUI workload (true in the .csproj).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Single project solutions now nest individual platforms within a “Platforms” folder for tidy organization.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Updated to Windows App SDK 0.8.1 RC. Use the latest Visual Studio 2022 compatible extension from the marketplace.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AV5aw6xO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/783/1%2AqMgirzF3t1OY7XyGCB8W-g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AV5aw6xO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/783/1%2AqMgirzF3t1OY7XyGCB8W-g.png" alt=".NET MAUI single project and Windows"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-top-of-net-maui"&gt;
  &lt;/a&gt;
  🔴 The TOP of .NET MAUI
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#net-hot-reload"&gt;
  &lt;/a&gt;
  🔴 .NET Hot Reload
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;.NET Hot Reload&lt;/strong&gt; is a new experience that enables you to make live edits to your &lt;strong&gt;.NET MAUI&lt;/strong&gt; app’s source code while it is running, reducing the number of times you need to rebuild your app.&lt;br&gt;
To start testing this feature install both &lt;strong&gt;.NET 6 Preview 4&lt;/strong&gt; and Visual Studio 2019 version 16.11 Preview 1. Start your app through the Visual Studio debugger (&lt;strong&gt;F5&lt;/strong&gt;) targeting a WinUI 3 host. Once your app is running, you’ll now have the new option to make code changes and apply them using our new &lt;strong&gt;“apply code changes”&lt;/strong&gt; button as illustrated below.&lt;/p&gt;

&lt;p&gt;In coming releases &lt;strong&gt;.NET Hot Reload&lt;/strong&gt; will also be available for Android, iOS, and macOS, and we’ll be integrating &lt;strong&gt;XAML Hot Reload&lt;/strong&gt; and the Live Visual Tree as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WbSAWSAd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1050/1%2AYH4fGom4aqIhMUy_zGx9CQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WbSAWSAd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/1050/1%2AYH4fGom4aqIhMUy_zGx9CQ.gif" alt=".NET MAUI Hot Reload feature"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclution"&gt;
  &lt;/a&gt;
  🔹 Conclution:
&lt;/h2&gt;

&lt;p&gt;.NET MAUI has only a few months left to go officially. The latest features mentioned by Microsoft in the Previews are very powerful. At the moment we still have a little left to have it and apparently it will greatly facilitate developers to program web, console or mobile applications.&lt;/p&gt;

&lt;p&gt;What do you think?🤔&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>programming</category>
    </item>
    <item>
      <title>Cloud IDE</title>
      <author>Dawei Ma</author>
      <pubDate>Tue, 24 Aug 2021 11:32:42 +0000</pubDate>
      <link>https://dev.to/aws-builders/cloud-ide-3l0k</link>
      <guid>https://dev.to/aws-builders/cloud-ide-3l0k</guid>
      <description>&lt;p&gt;A while back, the GitHub Twitter posted the following Tweet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bPwl12Yg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.bmpi.dev/0dd20034-d46f-8910-a6dc-cf71802979f4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bPwl12Yg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.bmpi.dev/0dd20034-d46f-8910-a6dc-cf71802979f4.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you press &lt;code&gt;.&lt;/code&gt; on any GitHub Repo page, you will automatically be redirected to the &lt;code&gt;github.dev&lt;/code&gt; which is a web version of VSCode and will automatically clone the code of the repo. In this web VSCode you can even install some specific plugins (you can't install plugins that require external dependencies) to make it easier to read the code. Because this site is official, VSCode is automatically bound to your GitHub account, so developers can read, edit, and commit code in it without having to open a local IDE. github1s), an open source project with similar functionality.&lt;/p&gt;

&lt;p&gt;VSCode's team leader Erich Gamma (one of the authors of JUnit, one of the authors of Design Patterns, and an Eclipse architect) joined Microsoft in 2011 with the following job description.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Envision new paradigms for online developer tooling that will be as successful as the IDE has been for the desktop.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then came the birth of VSCode. We can say that VSCode is designed to be a cloud-based IDE from its inception.&lt;/p&gt;

&lt;p&gt;Why use a cloud IDE, it is due to some problems in local development environment, such as&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Environment differences: There are some differences between Mac and Linux, especially when using popular Linux kernel-based technologies like Docker on Mac, which can make the whole experience worse.&lt;/li&gt;
&lt;li&gt;Performance issues: Local development machines generally need to run a lot of software, such as some office and communication app, so the performance is not high enough to stretch.&lt;/li&gt;
&lt;li&gt;Stability problem: The local development machine takes a long time to restart, and it takes a lot of time to set up the development environment after each restart, which wastes a lot of time.&lt;/li&gt;
&lt;li&gt;Dependency issues: If the development environment relies on some specific cloud infrastructure, network communication can be troublesome. Whereas on cloud hosting, it is naturally in a network environment with other cloud infrastructures and the environment is simple to set up.&lt;/li&gt;
&lt;li&gt;Network issues: Modern software development is standing on the shoulders of giants, and a lot of software relies on a large number of libraries, frameworks, and runtime, and these dependencies require fast network speeds to download. Generally cloud hosting has better network performance than a home or office network.&lt;/li&gt;
&lt;li&gt;Security issues: There is a risk of leakage of code or keys placed in the local development environment, such as the loss of code or keys when a developer's development machine is stolen.&lt;/li&gt;
&lt;li&gt;Storage issues: Local development machines have limited disk storage and do not scale well. And the cloud host's disks are easily expandable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The ultimate solution to these problems is to move the development environment to the cloud, and the most important thing to develop in the cloud is the need for a good IDE support, which has led to a strong demand for cloud IDEs in the industry.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cloud-ide"&gt;
  &lt;/a&gt;
  Cloud IDE
&lt;/h2&gt;

&lt;p&gt;Before we talk about the cloud IDE let's understand some of the main functional points of the IDE, as shown in the following figure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AZZCKAYr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.bmpi.dev/b203c603-cc39-3ee0-3ce4-9ed3d7022777.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AZZCKAYr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.bmpi.dev/b203c603-cc39-3ee0-3ce4-9ed3d7022777.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A good IDE should of course let the programmer write the code to write the cool, see the code to see the smooth. And to achieve this purpose, it is essential to support the following feature points.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Excellent text editing features, supporting keyboard custom layout.&lt;/li&gt;
&lt;li&gt;Code hint functions, such as syntax highlighting, code jumping, error hints, etc..&lt;/li&gt;
&lt;li&gt;Debugging features.&lt;/li&gt;
&lt;li&gt;Multi-programming language support.&lt;/li&gt;
&lt;li&gt;Code completion function.&lt;/li&gt;
&lt;li&gt;Code refactoring capabilities.&lt;/li&gt;
&lt;li&gt;Extension capabilities, support for user-defined or provided plug-ins.&lt;/li&gt;
&lt;li&gt;Good ecology.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In desktop IDEs, these features are not a problem, and there are many IDEs that support them, such as Visual Studio, Eclipse, IntelliJ IDEA, NetBeans and Xcode. But in the dimension of online support, none of these older IDEs can.&lt;/p&gt;

&lt;p&gt;The requirements for cloud IDEs in the early industry were also not high, so there were about three broad categories of cloud IDEs, as follows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NFs4z3RF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.bmpi.dev/6743ed9b-5ffa-3032-1e3e-12aa383e5ec6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NFs4z3RF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.bmpi.dev/6743ed9b-5ffa-3032-1e3e-12aa383e5ec6.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Online editors. Web online editors, mainly CodePen and JSFiddle, make it easy to do online development of front-end pages. But this is far from the desktop IDE experience.&lt;/li&gt;
&lt;li&gt;Repl.it and Jupyter are the main online &lt;a href="https://en.wikipedia.org/wiki/Read-eval-print_loop"&gt;REPL&lt;/a&gt;. REPL is at most one of the many features supported by desktop IDEs, and its usage scenario is suitable for writing some validation type There is still a long way to go before an engineered code development experience.&lt;/li&gt;
&lt;li&gt;Cloud IDEs with limited functionality, mainly AWS Cloud9, are already very good for code development, even seamlessly using cloud infrastructure, and are suitable for collaborative code development at scale. However, these cloud IDEs are generally not scalable, for example, some plugins cannot be installed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, Github Codespaces uses VSCode combined with Azure cloud servers to give developers a desktop IDE experience and the ability to install plugins. Also, in a &lt;a href="https://insights.stackoverflow.com/survey/2021"&gt;2021 Developer Survey&lt;/a&gt; questionnaire from StackOverflow, the most popular developer community, the &lt;code&gt;Integrated development environment (IDE)&lt;/code&gt; section of a StackOverflow &lt;a href=""&gt;2021 Developer Survey&lt;/a&gt; survey (with more than 80,000 developer survey responses), VSCode was voted the most popular IDE with 71% of the votes (up to 50% in 2019).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fU5OiB49--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.bmpi.dev/ef162e34-50e9-e7bd-e1aa-1de4b80a27b8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fU5OiB49--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.bmpi.dev/ef162e34-50e9-e7bd-e1aa-1de4b80a27b8.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It seems that VSCode achieves the ultimate goal that cloud IDEs are trying to achieve: &lt;strong&gt;the same development experience as desktop IDEs&lt;/strong&gt;. The question here is why VSCode?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-vscode"&gt;
  &lt;/a&gt;
  Why VSCode
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#good-design"&gt;
  &lt;/a&gt;
  Good Design
&lt;/h3&gt;

&lt;p&gt;The VSCode remote development model is shown in the following figure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KzOQnNZ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.bmpi.dev/4c5f0a02-139f-1bb5-5dbd-46c1af97f60a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KzOQnNZ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.bmpi.dev/4c5f0a02-139f-1bb5-5dbd-46c1af97f60a.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The CS architecture is designed to give VSCode the ability to use remote servers or containers. The local VSCode is only responsible for the UI interface and theme display, while other things such as plug-ins, program runs, terminal processes and debuggers are run on the remote server. The separation of interface display and computation is a very important point for implementing a cloud IDE.&lt;/p&gt;

&lt;p&gt;The CS architecture design is also reflected in the code prompting. By developing the &lt;code&gt;Language Server Protocol&lt;/code&gt; standard protocol, the VSCode core does not need to parse ASTs of multiple programming languages or implement multiple programming language parsers, but delegates these functions to the plug-ins of each language, ensuring that the core is very small and stable.&lt;/p&gt;

&lt;p&gt;The same design is also reflected in the Debugger and the &lt;code&gt;Debug Adaptor Protocol&lt;/code&gt; standard protocol.&lt;/p&gt;

&lt;p&gt;More analysis of the architecture can be found in my article &lt;a href="https://dev.to/dev/vscode-plugin-development-notes/"&gt;VSCode Plugin Development Notes&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cross-platform"&gt;
  &lt;/a&gt;
  Cross Platform
&lt;/h3&gt;

&lt;p&gt;VSCode was formerly known as &lt;a href="https://github.com/Microsoft/monaco-editor"&gt;monaco-editor&lt;/a&gt; online editor. As a web software, it need to use &lt;code&gt;Electron&lt;/code&gt; technology to achieve cross-platform functionality. So the desktop VSCode and the server-side Web version of VSCode are actually one code base.&lt;/p&gt;

&lt;p&gt;Because it is a web software, there is a third-party Repo &lt;a href="https://github.com/cdr/code-server"&gt;code-server&lt;/a&gt; and a VSCode running in the browser.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-source"&gt;
  &lt;/a&gt;
  Open source
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/microsoft/vscode"&gt;VSCode&lt;/a&gt; Without open source, it could have ended very differently. It was Microsoft's gorgeous turnaround and enthusiastic embrace of open source that opened the door for VSCode to go global, or it could have ended up as one of Microsoft's many internal projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-cloud-ide-based-on-aws-with-pulumi"&gt;
  &lt;/a&gt;
  Build Cloud IDE based on AWS with Pulumi
&lt;/h2&gt;

&lt;p&gt;Thanks to VSCode's open source and web features, we can quickly build a VSCode-based personal cloud IDE that is comparable to &lt;a href="https://github.com/features/codespaces"&gt;Github Codespaces&lt;/a&gt;, but much cheaper.&lt;/p&gt;

&lt;p&gt;My implementation can be found in this &lt;a href="https://github.com/bmpi-dev/code.bmpi.dev/tree/master/server"&gt;Repo&lt;/a&gt;. The architecture is as follows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gRX_yMi4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.bmpi.dev/dafdc38a-8e97-7daa-d860-4ad78c4d182b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gRX_yMi4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.bmpi.dev/dafdc38a-8e97-7daa-d860-4ad78c4d182b.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Prerequisites.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;An AWS account with the AWS CLI installed and AWS Credentials configured locally. The AWS account needs to have rights to access to EC2.&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://www.pulumi.com/"&gt;Pulumi&lt;/a&gt; account and create a project; (if you are not familiar with Pulumi, you can refer to this article &lt;a href="https://dev.to/dev/pulumi-aws-serverless-hugo-site-vists/"&gt;Implementing static blog access statistics based on Serverless&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Very simple to use (thanks to the power of Pulumi and AWS CLI).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/bmpi-dev/code.bmpi.dev.git
&lt;span class="nb"&gt;cd &lt;/span&gt;code.bmpi.dev/server
pulumi up &lt;span class="c"&gt;# Set up AWS EC2 with Pulumi&lt;/span&gt;
./run work &lt;span class="c"&gt;# Open remote VSCode&lt;/span&gt;
./run rest &lt;span class="c"&gt;# Shut down the remote VSCode&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If &lt;code&gt;./run open_tunnel&lt;/code&gt; cannot connect to the tunnel while the server is still up, you can run it again after the server is up to establish the tunnel connection.&lt;/p&gt;

&lt;p&gt;You need to enter the VSCode login password for the first time access, by executing &lt;code&gt;sh connect-server.sh&lt;/code&gt; and then execute &lt;code&gt;cat ~/.config/code-server/config.yaml | grep password:&lt;/code&gt; to get the login password.&lt;/p&gt;

&lt;p&gt;You can start using the remote VSCode by accessing &lt;code&gt;http://localhost:8888/&lt;/code&gt; through your browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZMskZnJv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.bmpi.dev/db6642d4-1224-d743-c881-314dd043e318.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZMskZnJv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.bmpi.dev/db6642d4-1224-d743-c881-314dd043e318.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don't need this environment for a while, remember to hibernate it via &lt;code&gt;./run rest&lt;/code&gt; to hibernate the cloud server. After the server is shut down, AWS does not bill the EC2 instance, but only the storage volumes for a very cheap fee.&lt;/p&gt;

&lt;p&gt;If you don't need the environment at all and want to destroy all resources so that AWS doesn't continue to charge, just run &lt;code&gt;pulumi destroy&lt;/code&gt; to delete all AWS resources.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-fees"&gt;
  &lt;/a&gt;
  About fees
&lt;/h2&gt;

&lt;p&gt;Take an AWS EC2 T2.Medium instance (2 cores 4GB RAM + 50GB storage) as an example. For 5 hours of development per day and 100 hours per month for 20 days, the total cost is $0.0464 * 100 + $0.1 * 50 = $9.64. The same server configuration with Github Codespaces costs $21.50, 2.23 times bigger than our.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-future-of-cloud-ide"&gt;
  &lt;/a&gt;
  The future of Cloud IDE
&lt;/h2&gt;

&lt;p&gt;Cloud IDE represents the future of an R&amp;amp;D model. The possible development trends of this R&amp;amp;D model are as follows.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Standardized development environment. A set of cloud IDE development environment can be standardized for batch configuration and used out of the box, significantly reducing the time consumption of developers in configuring the development environment.&lt;/li&gt;
&lt;li&gt;Customized development environment. The development environment can be customized to meet the needs of different types of projects.&lt;/li&gt;
&lt;li&gt;Elastic development environment. The configuration of the development environment relies on the automatic elastic expansion of the cloud service, and the configuration can be dynamically adjusted to meet the dynamic needs of the development environment for resource allocation.&lt;/li&gt;
&lt;li&gt;Intelligent development environment. Relying on the cloud server's machine learning analysis of specific code repositories, it can better achieve intelligent tips to assist development, similar to &lt;a href="https://copilot.github.com/"&gt;GitHub Copilot&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Secure development environment. The code and infrastructure configuration are stored on the cloud server, which can greatly reduce the risk of code or environment key leakage caused by developer negligence. With a good system security configuration of the cloud server, the security risk of the development environment can be reduced.&lt;/li&gt;
&lt;li&gt;Ready-to-use development environment. No need for a specific development machine, just a computer with a browser to access the cloud IDE to start development.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a nutshell.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Cloud IDE, Coding Anytime Anywhere.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://zhuanlan.zhihu.com/p/145981067"&gt;Large-scale IDE technology architecture from VSCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://holisticsecurity.io/2020/09/06/implementing-vscode-based-on-cloud-with-aws-cdk/"&gt;Implementing VSCode-based (Code-Server) on Cloud with AWS CDK&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>aws</category>
      <category>vscode</category>
      <category>pulumi</category>
      <category>tools</category>
    </item>
    <item>
      <title>Three Tips To Understand Chaos Engineering</title>
      <author>Mike Levan</author>
      <pubDate>Tue, 24 Aug 2021 11:31:26 +0000</pubDate>
      <link>https://dev.to/thenjdevopsguy/three-tips-to-understand-chaos-engineering-1eoc</link>
      <guid>https://dev.to/thenjdevopsguy/three-tips-to-understand-chaos-engineering-1eoc</guid>
      <description>&lt;p&gt;Chaos Engineering is extremely new from a name and process perspective, but it's not new to technology. Engineers have been doing the types of testing, experimentation, and research you'd see in Chaos Engineering for years. Since the beginning of computers, there have been several tests completed in production and development environments, but here's the key difference:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Chaos Engineering is planned and it's a role carved out for these types of tests.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The typical testing you'll see in most environments is done by the engineer working on the product. Whether they're in software, DevOps, cloud, architecture, etc., the testing is typically done by them.&lt;/p&gt;

&lt;p&gt;The question then becomes - why would we need chaos engineering and how can we understand it?&lt;/p&gt;

&lt;p&gt;In this blog post, you'll learn just that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-chaos-engineering"&gt;
  &lt;/a&gt;
  Why Chaos Engineering
&lt;/h2&gt;

&lt;p&gt;Most engineers if they've worked in cloud, DevOps, SRE, and sysadmin environments have been woken up in the middle of the night. Whether it's for an application that went down or a server that couldn't handle the load, the engineer is woken up and has to solve the issue. For anyone that's been through this, you can probably say with confidence that it's quite annoying.&lt;/p&gt;

&lt;p&gt;A few questions pop up those nights:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Why wasn't this tested for the load?&lt;/li&gt;
&lt;li&gt;Why is this server so small for this type of application?&lt;/li&gt;
&lt;li&gt;What could've caused this? Where are the logs?&lt;/li&gt;
&lt;li&gt;Does this need some sort of scaling or high availability?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And many other questions...&lt;/p&gt;

&lt;p&gt;These questions, including the hundreds of others, are what is answered by a Chaos Engineer.&lt;/p&gt;

&lt;p&gt;Chaos Engineering is to answer the &lt;em&gt;what if&lt;/em&gt; and &lt;em&gt;why&lt;/em&gt; questions. It's to ensure that whatever is thrown at a distributed system, microservice architecture, cloud environment, and application can withstand the impact.&lt;/p&gt;

&lt;p&gt;Chaos Engineers take the approach of finding the problems, typically, in a step-by-step manner:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start by defining the ready-state. What the environment is supposed to look like and how you're expecting it to perform.&lt;/li&gt;
&lt;li&gt;Create a hypothesis and conduct research for both the testing/staging experimental environment and the production environment&lt;/li&gt;
&lt;li&gt;Perform tests and experiments that implement real-world issues. Two perfect examples are 1) what if a region goes down in AWS? 2) What if the Kubernetes cluster goes down?&lt;/li&gt;
&lt;li&gt;Take what you learned from the hypothesis/research, compare it to the ready-state from step 1, and see if everything went as planned. If it didn't, you know you have to iterate. For example, if you took down a Kubernetes cluster and it didn't failover to another cluster, you know that must be implemented.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Chaos Engineering is all about testing, research, and making a production environment as stable as possible so no one gets the 2:00 AM calls, no applications go down, and users stay happy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#experiments-in-and-out-of-production"&gt;
  &lt;/a&gt;
  Experiments in and out of Production
&lt;/h2&gt;

&lt;p&gt;You'll sometimes hear Chaos Engineers or DevOps/SRE folks performing Chaos tests where they claim that they just throw a bunch of hiccups/experiments into production and see what happens. They probably say this because it sounds cool, but it's not the actual way to do it (and it's most likely not the way they do it either).&lt;/p&gt;

&lt;p&gt;Chaos Engineering, more importantly, testing in and out of production, is all about controlled experiments. The end goal is to run the experiments in production, but you can't do that without testing and running said experiments in a dev/test/staging environment. Otherwise, management and engineering leads will never allow you the opportunity to implement this again.&lt;/p&gt;

&lt;p&gt;Instead, think about Chaos testing in a straightforward, yet concise way:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The goal is to find holes and vulnerabilities in a system and/or application&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The holes and vulnerabilities come in all shapes and sizes - the network isn't set up to take a packet storm hit, the servers won't scale out if the application requires more resources, Kubernetes pods won't come back online if they're all killed, and many other types of holes/vulnerabilities. Your job is to come up with a way to find/stop as many holes/vulnerabilities as possible. &lt;/p&gt;

&lt;p&gt;Start in a controlled environment (testing/staging) and once you're comfortable, have all of the research, and the experiments are passing, you can move to production.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-experiment"&gt;
  &lt;/a&gt;
  How to Experiment
&lt;/h2&gt;

&lt;p&gt;Experimenting on an application or system isn't as simple as running a test from your &lt;a href="http://localhost"&gt;localhost&lt;/a&gt; for 5 minutes, seeing that the app works, and saying yep, we're good to go. It's far more complex than that. In most environments, there are tens of hundreds of things that can go wrong. You can't possibly know all of them, but it's your job to find them.&lt;/p&gt;

&lt;p&gt;Think about experimentation for a system like a medical researcher would. Whether they're working on some sort of vaccine, cure, or controlled substance, it's their job to find any single thing that can go wrong with it. Why? Because lives are at stake. &lt;/p&gt;

&lt;p&gt;In tech, no one's life is at stake. However, people's livelihood is. If an application or platform constantly goes down, users will stop using it. Without users, the organization makes no money. Without money, the organization can't keep its doors open. Without its doors open, you can't get paid.&lt;/p&gt;

&lt;p&gt;It's everyone's job, in one way, shape, or form, to help this effort in an organization, but it's your job to ensure that doesn't happen from an engineering perspective.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automated-tests"&gt;
  &lt;/a&gt;
  Automated Tests
&lt;/h2&gt;

&lt;p&gt;From what you read about Chaos tests, it can almost sound like QA (Quality Assurance). It really shouldn't be looked at like that though. It should be looked at more as an R&amp;amp;D (Research and Development) type of role, but for tech folks. Because of that, you don't really want to do Chaos testing in a manual QA style. Instead, you want to automate the workflow.&lt;/p&gt;

&lt;p&gt;Keep in mind that you cannot automate something that you've never done manually because you don't know how it's supposed to work. Manually running your first Chaos tests is perfectly normal.&lt;/p&gt;

&lt;p&gt;A lot of the Chaos Engineer platforms do have schedules that you can set up to run tests automatically, and you can also do this yourself. If you find a platform that doesn't have schedules, it most likely has some sort of API. At that point, you can write some automation code to say, kick off a test at a certain time. Maybe get a little experimental with it, put it in a cron job that runs on a Lambda Function, and have the Chaos test run automatically! The possibilities for automating the workflow are endless.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#chaos-platform-references"&gt;
  &lt;/a&gt;
  Chaos Platform References
&lt;/h2&gt;

&lt;p&gt;If you're interested in Chaos Engineering, I recommend a few platforms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gremlin&lt;/li&gt;
&lt;li&gt;Chaos Mesh&lt;/li&gt;
&lt;li&gt;Chaos Monkey&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Chaos testing is fun, exciting, and genuinely helps an organization meet its goals. It's certainly an up-and-coming career, but I believe it will take off in the next 1-3 years.&lt;/p&gt;

</description>
      <category>chaosengineer</category>
      <category>devops</category>
      <category>sre</category>
      <category>cloudnative</category>
    </item>
    <item>
      <title>Básico de corotinas em Kotlin</title>
      <author>Ederson Ferreira</author>
      <pubDate>Tue, 24 Aug 2021 11:22:10 +0000</pubDate>
      <link>https://dev.to/kotlinautas/basico-de-corotinas-em-kotlin-50a8</link>
      <guid>https://dev.to/kotlinautas/basico-de-corotinas-em-kotlin-50a8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#kotlinautas"&gt;
  &lt;/a&gt;
  Kotlinautas
&lt;/h2&gt;

&lt;p&gt;Esse conteúdo é oferecido e distribuído pela comunidade &lt;a href="https://twitter.com/kotlinautas/"&gt;Kotlinautas&lt;/a&gt;, uma comunidade brasileira que busca oferecer conteúdo gratuito sobre a linguagem Kotlin em um espaço plural.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BE6z6Pw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jreawpvk6whxigcpmctf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BE6z6Pw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jreawpvk6whxigcpmctf.png" alt="capa Kotlinautas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-qu%C3%AA-s%C3%A3o-corotinas"&gt;
  &lt;/a&gt;
  O quê são corotinas?
&lt;/h2&gt;

&lt;p&gt;Corotinas (ou &lt;em&gt;Coroutines&lt;/em&gt;) são um bloco de código que rodam concorrentemente com o resto do código, isso significa que podemos rodar dois blocos de código ao mesmo tempo, podendo assim ao mesmo  tempo ler quanto enviar para um servidor por exemplo. Vamos ver mais sobre corotinas na prática durante o artigo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#materiais"&gt;
  &lt;/a&gt;
  Materiais
&lt;/h2&gt;

&lt;p&gt;Será necessário ter o &lt;a href="https://www.jetbrains.com/idea/"&gt;IntelliJ&lt;/a&gt; instalado na máquina e um conhecimento básico sobre a linguagem &lt;a href="https://kotlinlang.org/"&gt;Kotlin&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#criando-um-projeto-com-corotinas"&gt;
  &lt;/a&gt;
  Criando um projeto com Corotinas
&lt;/h2&gt;

&lt;p&gt;Abra seu IntelliJ no menu inicial e clique em &lt;em&gt;New Project&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3a63hFO7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cyipebjncu4l9q33v0w1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3a63hFO7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cyipebjncu4l9q33v0w1.png" alt="botão New Project no menu inicial do IntelliJ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Depois, selecione a opção &lt;strong&gt;Kotlin DSL build script&lt;/strong&gt;, selecione também a opção &lt;strong&gt;Kotlin/JVM&lt;/strong&gt;, e opicionalmente remova a primeira opção &lt;strong&gt;Java&lt;/strong&gt;. Essa opção não vai mudar em nada, pois ela dá suporte do Gradle á linguagem Java, mas apenas iremos usar Kotlin.&lt;/p&gt;

&lt;p&gt;Após isso, clique em &lt;strong&gt;Next&lt;/strong&gt; e escreva o nome do projeto e a localização na sua máquina. Essas duas opção são completamente pessoais, caso não tenha nenhuma ideia, coloque algo como &lt;strong&gt;Corotinas&lt;/strong&gt; apenas como identificação.&lt;/p&gt;

&lt;p&gt;Agora, com o projeto aberto, vá ao aquivo &lt;code&gt;build.gradle.kts&lt;/code&gt; e adicione a dependência &lt;code&gt;implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.1")&lt;/code&gt;, com a seção &lt;code&gt;dependencies&lt;/code&gt; ficando assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;dependencies&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kotlin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"stdlib"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nf"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora, clique no elefante no canto superior direito para carregar as alterações no Gradle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vU9RoGar--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nkf14hqf488c3wjt9uty.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vU9RoGar--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nkf14hqf488c3wjt9uty.png" alt="Elefante do Gradle no canto superior direito"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Após isso, poderemos começar a programar. Você pode criar um arquivo em &lt;code&gt;src/main/kotlin/&lt;/code&gt; chamado &lt;code&gt;main.kt&lt;/code&gt; para ser o arquivo principal da aplicação.&lt;/p&gt;

&lt;p&gt;Mas com qualquer nome de arquivo, como você irá usar as corotinas, sempre se lembre de importar a biblioteca de corotinas no começo do arquivo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#primeira-corotina"&gt;
  &lt;/a&gt;
  Primeira Corotina
&lt;/h2&gt;

&lt;p&gt;Vamos criar o primeiro exemplo, vamos criar uma corotina que irá rodar paralelamente com o código principal, o código principal apenas irá mostrar um "Olá", enquanto o código da corotina irá esperar um segundo, e após isso, irá mostrar um "Mundo!". Podemos fazer isso da seguinte forma:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.*&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Mundo!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Olá"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Coloque esse código no seu IntelliJ e rode. O output esperado desse código é esse:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Olá
Mundo!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos explicar o quê esse código está fazendo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;RunBlocking&lt;/code&gt; é um bloco que irá armazenar todas as corotinas de uma parte do código, como se criasse um contexto diferente do normal da &lt;code&gt;main&lt;/code&gt;. Todas as corotinas devem estar dentro de um bloco &lt;code&gt;runBlocking&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;launch&lt;/code&gt; irá iniciar uma corotina, que irá funcionar concorrentemente (ao mesmo tempo) e independente do resto do código, podemos inserir quantos blocos &lt;code&gt;launch&lt;/code&gt; que quisermos dentro de um mesmo código;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;delay&lt;/code&gt; é uma função que faz a corotina esperar por um tempo em milisegundos, e voltar com o processamento após esse tempo. Essa função recebe um número do tipo &lt;code&gt;Long&lt;/code&gt;, que pode ser criado colocando um &lt;code&gt;L&lt;/code&gt; no final de um número;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O &lt;code&gt;runBlocking&lt;/code&gt; guarda um &lt;code&gt;launch&lt;/code&gt; dentro, iniciando uma nova corotina, que a primeira instrução é o &lt;code&gt;delay(1000L)&lt;/code&gt;, fazendo que a corotina espere por um segundo (1000 milisegundos), enquanto isso o código principal continua, mandando um &lt;code&gt;Olá&lt;/code&gt; na tela. E após um segundo da corotina rodando, a proxima e ultima instrução manda um &lt;code&gt;Mundo!&lt;/code&gt; na tela.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#refatorando-para-uma-fun%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Refatorando para uma função
&lt;/h2&gt;

&lt;p&gt;Agora vamos transformar o conteúdo de dentro do bloco &lt;code&gt;launch&lt;/code&gt; em uma função. Para isso, iremos precisar usar um &lt;code&gt;suspend&lt;/code&gt; antes da função. (Função de suspensão)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Mas, o quê é esse &lt;code&gt;suspend&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;funções com &lt;code&gt;suspend&lt;/code&gt; são funções que podem ser usadas normalmente dentro de corotinas, mas podem usar algumas funções especiais, como a função &lt;code&gt;delay&lt;/code&gt; que como foi explicado mais cedo, serve para fazer a corotina esperar um tempo em milisegundos.&lt;/p&gt;

&lt;p&gt;Com isso em mente, vamos criar a função:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;escreverMundo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Mundo!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E agora na &lt;code&gt;main&lt;/code&gt;, vamos tirar tudo de dentro do bloco &lt;code&gt;launch&lt;/code&gt; e rodar a função &lt;code&gt;escreverMundo()&lt;/code&gt; dentro:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;escreverMundo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Olá"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pronto! Agora nosso código está mais organizado, diminuindo o código da função &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#escopo-de-corotinas"&gt;
  &lt;/a&gt;
  Escopo de Corotinas
&lt;/h2&gt;

&lt;p&gt;Podemos também criar um escopo onde iremos armazenar corotinas dentro. Esse escopo se chama &lt;code&gt;coroutineScope&lt;/code&gt;. Esse bloco é muito parecido com o bloco &lt;code&gt;runBlocking&lt;/code&gt;, mas tem uma diferença, enquanto o &lt;code&gt;runBlocking&lt;/code&gt; bloqueia a thread em uso enquanto está esperando algo, o &lt;code&gt;coroutineScope&lt;/code&gt; libera a thread para outros usos enquanto espera algo.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Como o &lt;code&gt;coroutineScope&lt;/code&gt; consegue fazer isso?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Porque o &lt;code&gt;coroutineScope&lt;/code&gt; é uma função de suspensão, enquanto o &lt;code&gt;runBlocking&lt;/code&gt; é uma função normal. Por isso &lt;code&gt;coroutineScope&lt;/code&gt; tem essas habilidades especiais.&lt;/p&gt;

&lt;p&gt;Agora, vamos mudar a função &lt;code&gt;escreverMundo&lt;/code&gt;, para fazer que essa função use os poderes de um &lt;code&gt;coroutineScope&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;escreverMundo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;coroutineScope&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Mundo!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Já se passaram 4 segundos né?"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Olá"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Agora, a função &lt;code&gt;escreverMundo&lt;/code&gt; recebe uma &lt;code&gt;coroutineScope&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Como uma &lt;code&gt;coroutineScope&lt;/code&gt;, podemos colocar vários blocos &lt;code&gt;launch&lt;/code&gt; dentro. No caso, há dois blocos;&lt;/li&gt;
&lt;li&gt;O primeiro bloco, espera por um segundo e depois escreve um &lt;code&gt;Mundo!&lt;/code&gt; na tela;&lt;/li&gt;
&lt;li&gt;O segundo bloco espera por 4 segundos, e depois escreve na tela &lt;code&gt;Já se passaram 4 segundos né?&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;E abaixo destes dois blocos, há a instrução para escrever um &lt;code&gt;Olá&lt;/code&gt; na tela.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por conta que essas três partes serão executadas ao mesmo tempo, primeiro irá aparecer &lt;code&gt;Olá&lt;/code&gt;, depois de um segundo &lt;code&gt;Mundo!&lt;/code&gt;, e depois de 4 segundos que o programa começou a rodar, irá aparecer o &lt;code&gt;Já se passaram 4 segundos né?&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Mas para que esse código rode corretamente, também precisamos mudar a função &lt;code&gt;main&lt;/code&gt; adaptando para que possamos usar a função &lt;code&gt;escreverMundo&lt;/code&gt; como &lt;code&gt;coroutineScope&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;escreverMundo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora, removemos o &lt;code&gt;launch&lt;/code&gt; pois ele irá impedir que a &lt;code&gt;main&lt;/code&gt; rode corretamente.&lt;/p&gt;

&lt;p&gt;O resultado esperado do programa agora é:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Olá
Mundo!
Já se passaram 4 segundos né?
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos fazer uma experiência, vamos remover o &lt;code&gt;println("Olá")&lt;/code&gt; na função &lt;code&gt;escreverMundo&lt;/code&gt;, e vamos colocar no final da função &lt;code&gt;main&lt;/code&gt;, dessa maneira:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.*&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;escreverMundo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Olá"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;escreverMundo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;coroutineScope&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Mundo!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Já se passaram 4 segundos né?"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O resultado desse código é:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mundo!
Já se passaram 4 segundos né?
Olá
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Como a função &lt;code&gt;runBlocking&lt;/code&gt; bloqueia a thread enquanto está rodando, primeiro, todas as instruções de &lt;code&gt;escreverMundo&lt;/code&gt; são rodadas, e após isso que o código irá continuar, mandando o &lt;code&gt;Olá&lt;/code&gt; na tela.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Com todos esses recursos, dá pra fazer bastante coisa usando escopos de corotinas com &lt;code&gt;coroutineScope&lt;/code&gt;, iniciar partes do código com corotinas com &lt;code&gt;runBlocking&lt;/code&gt;, iniciar uma corotina com &lt;code&gt;launch&lt;/code&gt;, e fazer uma corotina esperar um tempo com &lt;code&gt;delay&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jobs-tarefas"&gt;
  &lt;/a&gt;
  Jobs (Tarefas)
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Jobs&lt;/strong&gt; ou tarefas são instâncias de corotinas, que podem ser manipuladas para por exemplo, cancelar a corotina, esperar a corotina terminar todo o processamento para que o código principal continue,etc. Vamos ver esse exemplo abaixo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.*&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;tarefa&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Mundo!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Olá"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tarefa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Fim"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;main&lt;/code&gt; recebe um bloco &lt;code&gt;runBlocking&lt;/code&gt;, podendo assim usar as corotinas dentro;&lt;/li&gt;
&lt;li&gt;é criada uma variável chamada &lt;code&gt;tarefa&lt;/code&gt; que recebe uma corotina em um bloco &lt;code&gt;launch&lt;/code&gt;. Com isso, a corotina é iniciada e o código principal continua;&lt;/li&gt;
&lt;li&gt;Após isso, é escrito na tela um &lt;code&gt;Olá&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;A função &lt;code&gt;tarefa.join()&lt;/code&gt; faz com que a corotina &lt;code&gt;tarefa&lt;/code&gt; tenha de terminar para que o código principal continue, com isso a instrução &lt;code&gt;println("Fim")&lt;/code&gt; apenas irá rodar depois da corotina &lt;code&gt;tarefa&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Após isso, a corotina espera um segundo, com a instrução &lt;code&gt;delay(1000L)&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;E ao final da corotina &lt;code&gt;tarefa&lt;/code&gt;, é escrito um &lt;code&gt;Mundo!&lt;/code&gt; na tela;&lt;/li&gt;
&lt;li&gt;E depois da corotina &lt;code&gt;tarefa&lt;/code&gt; ter acabado, é escrito um &lt;code&gt;Fim&lt;/code&gt; na tela.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Com isso em mente, o output esperado é&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Olá
Mundo!
Fim
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Mas, e se eu quiser que a corotina &lt;code&gt;tarefa&lt;/code&gt; rode junto com o código da função &lt;code&gt;main&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Podemos fazer isso mudando na linha 9 de &lt;code&gt;tarefa.join()&lt;/code&gt; para &lt;code&gt;tarefa.start()&lt;/code&gt;, com isso o nosso código ficará assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.*&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;tarefa&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Mundo!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Olá"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tarefa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Fim"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O output esperado dessa maneira é:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Olá
Fim
Mundo!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Isso acontece pois enquanto a função &lt;code&gt;tarefa.join()&lt;/code&gt; suspende a thread (&lt;code&gt;main&lt;/code&gt; no caso) enquanto roda, a função &lt;code&gt;tarefa.start()&lt;/code&gt; apenas inicia uma corotina (no caso a corotina &lt;code&gt;tarefa&lt;/code&gt;), e continua a rodar o código principal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cancelando-tarefas"&gt;
  &lt;/a&gt;
  Cancelando tarefas
&lt;/h2&gt;

&lt;p&gt;Agora vamos aprender a como cancelar uma tarefa, esse conhecimento é útil para aplicações que irão rodar por muito tempo sem parar, e vão precisar iniciar e fechar corotinas constantemente, como por exemplo, uma aplicação web feita em &lt;a href="https://ktor.io/"&gt;Ktor&lt;/a&gt;. (Caso você tenha interesse em Ktor, leia esse artigo da Kotlinautas &lt;a href="https://dev.to/kotlinautas/criando-uma-api-com-ktor-8le"&gt;Criando uma API com Ktor&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Primeiro, vamos criar uma &lt;code&gt;main&lt;/code&gt; que recebe um &lt;code&gt;runBlocking&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.*&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora, vamos criar uma variável &lt;code&gt;tarefa&lt;/code&gt; que recebe um &lt;code&gt;launch&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;tarefa&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tarefa: Estou rodando fazem $i vezes"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;A variável &lt;code&gt;tarefa&lt;/code&gt; recebe um &lt;code&gt;launch&lt;/code&gt;, logo sendo uma corotina;&lt;/li&gt;
&lt;li&gt;Dentro da corotina, há um &lt;code&gt;repeat(1000)&lt;/code&gt;, esse &lt;code&gt;repeat&lt;/code&gt; inicia um código que irá rodar por um número determinado de vezes, no caso, 1000 vezes;&lt;/li&gt;
&lt;li&gt;E dentro desse bloco, é mostrado na tela um texto &lt;code&gt;tarefa: Estou rodando fazem $i vezes&lt;/code&gt;, sendo &lt;code&gt;$i&lt;/code&gt; o número de vezes que o &lt;code&gt;repeat&lt;/code&gt; já repetiu;&lt;/li&gt;
&lt;li&gt;Depois desse texto ser mostrado na tela, a corotina é suspensa por 500 milesegundos (meio segundo);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora, vamos fazer que a &lt;code&gt;main&lt;/code&gt; espere um tempo, escreva na tela que não deseja mais esperar que a corotina &lt;code&gt;tarefa&lt;/code&gt; termine seu processamento, cancele a corotina &lt;code&gt;tarefa&lt;/code&gt;, e feche a &lt;code&gt;main&lt;/code&gt; em seguida;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.*&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;tarefa&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tarefa: Estou rodando fazem $i vezes"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1300L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"main: Não quero mais esperar pela tarefa!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tarefa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;tarefa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"main: Agora eu posso fechar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Agora, a &lt;code&gt;main&lt;/code&gt; espera 1.3 segundos, e após isso, será mostrado na tela um texto &lt;code&gt;main: Não quero mais esperar pela tarefa!&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Após isso, é usada a função &lt;code&gt;tarefa.cancel()&lt;/code&gt; para cancelar a corotina, fazendo a corotina &lt;code&gt;tarefa&lt;/code&gt; terminar;&lt;/li&gt;
&lt;li&gt;Para fazer que o resto do código rode apenas quando a corotina for completamente cancelada, é usada a função &lt;code&gt;tarefa.join()&lt;/code&gt; novamente;&lt;/li&gt;
&lt;li&gt;Após isso, a &lt;code&gt;main&lt;/code&gt; escreve na tela &lt;code&gt;main: Agora eu posso fechar&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O output esperado desse programa é:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tarefa: Estou rodando fazem 0 vezes
tarefa: Estou rodando fazem 1 vezes
tarefa: Estou rodando fazem 2 vezes
main: Não quero mais esperar pela tarefa!
main: Agora eu posso fechar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Segundo a própria &lt;a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html"&gt;documentação do Kotlin&lt;/a&gt;, a função &lt;code&gt;.cancel()&lt;/code&gt; cancela a tarefa (corotina sendo armazenada em uma variável), incluindo todas as corotinas iniciadas por essa.&lt;/p&gt;

&lt;p&gt;Mas não é toda corotina que pode ser cancelada dessa maneira, vamos ver o exemplo á seguir:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.*&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;tarefa&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isActive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tarefa: Estou rodando!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"main: Não quero mais esperar pela tarefa!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tarefa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;tarefa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"main: Agora eu posso fechar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Agora, ao invés de um &lt;code&gt;repeat(1000)&lt;/code&gt;, temos um &lt;code&gt;while(isActive)&lt;/code&gt;, &lt;code&gt;isActive&lt;/code&gt; é uma variável interna da corotina, que sempre é verdadeira enquanto a corotina não terminou ou não foi cancelada. Logo, quando usamos &lt;code&gt;tarefa.cancel()&lt;/code&gt;, a variável &lt;code&gt;isActive&lt;/code&gt; se torna falsa e a corotina é cancelada.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O output esperado desse programa é:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tarefa: Estou rodando!
tarefa: Estou rodando!
tarefa: Estou rodando!
tarefa: Estou rodando!
tarefa: Estou rodando!
main: Não quero mais esperar pela tarefa!
main: Agora eu posso fechar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usando-um-raw-try-endraw-e-raw-finally-endraw-dentro-de-uma-corotina"&gt;
  &lt;/a&gt;
  Usando um &lt;code&gt;try&lt;/code&gt; e &lt;code&gt;finally&lt;/code&gt; dentro de uma corotina
&lt;/h2&gt;

&lt;p&gt;Caso queiramos que a corotina faça algo antes de ser cancelada, podemos usar um bloco &lt;code&gt;try&lt;/code&gt; com o código da corotina, e depois do &lt;code&gt;try&lt;/code&gt;, dentro de um &lt;code&gt;finally&lt;/code&gt; o código que irá rodar quando a corotina for cancelada.&lt;/p&gt;

&lt;p&gt;Vamos usar o seguinte exemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.*&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;tarefa&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
                    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isActive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tarefa: Estou rodando fazem $i vezes"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tarefa: terminando corotina tarefa"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"main: Não quero mais esperar pela tarefa!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tarefa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;tarefa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"main: Agora eu posso fechar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Agora, todo o código da corotina &lt;code&gt;tarefa&lt;/code&gt; está dentro de um &lt;code&gt;try&lt;/code&gt;, que é o mesmo código do exemplo anterior sobre &lt;code&gt;isActive&lt;/code&gt;, mas agora, após o &lt;code&gt;try&lt;/code&gt;, dentro de um &lt;code&gt;finally&lt;/code&gt;, mostramos na tela &lt;code&gt;tarefa: terminando corotina tarefa&lt;/code&gt;, mostrando esse conceito;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O output do programa é:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tarefa: Estou rodando fazem 0 vezes
tarefa: Estou rodando fazem 1 vezes
tarefa: Estou rodando fazem 2 vezes
tarefa: Estou rodando fazem 3 vezes
tarefa: Estou rodando fazem 4 vezes
main: Não quero mais esperar pela tarefa!
tarefa: terminando corotina tarefa
main: Agora eu posso fechar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;as linha 18 e 19 podem ser refatoradas em uma só, pois há o método &lt;code&gt;cancelAndJoin()&lt;/code&gt;, que cancela a corotina e espera pelo seu fechamento. Com isso, o nosso código ficará assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.*&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;tarefa&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isActive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tarefa: Estou rodando fazem $i vezes"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tarefa: terminando corotina tarefa"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"main: Não quero mais esperar pela tarefa!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tarefa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cancelAndJoin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"main: Agora eu posso fechar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#timeout"&gt;
  &lt;/a&gt;
  Timeout
&lt;/h2&gt;

&lt;p&gt;É possível de criar corotinas com tempo máximo de existência, isso pode ser feito com &lt;code&gt;withTimeout&lt;/code&gt;, informando um tempo do tipo &lt;code&gt;Long&lt;/code&gt;, vamos supor o seguinte código:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.*&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;withTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1300L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Estou dormindo há $i ..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Caso você tente rodar esse código, irá resultar neste erro:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;I'm sleeping 0 ...
I'm sleeping 1 ...
I'm sleeping 2 ...
Exception in thread "main" kotlinx.coroutines.TimeoutCancellationException: Timed out waiting for 1300 ms
    at kotlinx.coroutines.TimeoutKt.TimeoutCancellationException(Timeout.kt:186)
    at kotlinx.coroutines.TimeoutCoroutine.run(Timeout.kt:156)
    at kotlinx.coroutines.EventLoopImplBase$DelayedRunnableTask.run(EventLoop.common.kt:497)
    at kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.common.kt:274)
    at kotlinx.coroutines.DefaultExecutor.run(DefaultExecutor.kt:69)
    at java.base/java.lang.Thread.run(Thread.java:829)

Process finished with exit code 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nesse código, é usada a função &lt;code&gt;withTimeout&lt;/code&gt;, que deixa fixo o tempo que uma corotina pode rodar. Caso esse tempo passe, é retornado um erro, sendo &lt;code&gt;kotlinx.coroutines.TimeoutCancellationException&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Caso você queria que esse timeout não resulte em um erro, é possível se se usar a função &lt;code&gt;withTimeoutOrNull&lt;/code&gt;, dessa maneira:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.*&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;resultado&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;withTimeoutOrNull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1300L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Estou dormindo $i ..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="s"&gt;"Feito"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Resultado é $resultado"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Com isso, caso esse timeout resulte em um erro, a variável &lt;code&gt;resultado&lt;/code&gt; receberá o valor &lt;code&gt;null&lt;/code&gt;, mas caso deletemos a linha 7, que é uma espera na corotina que aumenta elevadamente o tempo de processamento, ultrapassando o valor determinado de 1.3 segundos pelo &lt;code&gt;withTimeoutOrNull&lt;/code&gt; o valor de &lt;code&gt;resultado&lt;/code&gt; será &lt;code&gt;Feito&lt;/code&gt; pois a corotina rodou sem problema nenhum. Dessa maneira, o código ficará assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.*&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;resultado&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;withTimeoutOrNull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1300L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Estou dormindo $i ..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="s"&gt;"Feito"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Resultado é $resultado"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#explorando-mais-sobre-fun%C3%A7%C3%B5es-de-suspens%C3%A3o"&gt;
  &lt;/a&gt;
  Explorando mais sobre funções de suspensão
&lt;/h2&gt;

&lt;p&gt;Vamos supor que temos duas funções, uma que retorna o número &lt;code&gt;10&lt;/code&gt;, e outra que retorna o número &lt;code&gt;20&lt;/code&gt;, e essas duas funções esperam por um segundo usando a função &lt;code&gt;delay&lt;/code&gt;. Por conta dessas funções terem que pausar a sua execução, terão que ser funções de suspensão, tendo um &lt;code&gt;suspend&lt;/code&gt; na frente. Dessa maneira:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;funçãoNúmeroUm&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;funçãoNúmeroDois&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos criar uma &lt;code&gt;main&lt;/code&gt;, que irá medir o tempo de execução total do código, criar duas variáveis, cada uma sendo o retorno dessas duas funções, e mostrar o resultado dessa maneira:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlin.system.measureTimeMillis&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;tempo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;measureTimeMillis&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;um&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;funçãoNúmeroUm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;dois&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;funçãoNúmeroDois&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A soma é ${um + dois}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Feito em $tempo milisegundos"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;import kotlin.system.measureTimeMillis&lt;/code&gt; importa a função que irá medir o tempo do código;&lt;/li&gt;
&lt;li&gt;O retorno das duas funções criadas anteriormente são armazenadas nas variáveis &lt;code&gt;um&lt;/code&gt; e &lt;code&gt;dois&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;A soma dessas duas variáveis é mostrada na tela;&lt;/li&gt;
&lt;li&gt;O tempo total dessas operações é guardado na variável &lt;code&gt;tempo&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;E o valor dessa variável &lt;code&gt;tempo&lt;/code&gt; é mostrada na tela;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O output desse código será algo parecido com isso:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;A soma é 30
Feito em 2008 milisegundos
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;E se eu quiser rodar essas duas funções ao mesmo tempo, economizando tempo de processamento?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Isso pode ser feito usando a função &lt;code&gt;async&lt;/code&gt;. A função &lt;code&gt;async&lt;/code&gt; inicia uma corotina como a função &lt;code&gt;launch&lt;/code&gt;, mas que pode receber um valor como retorno. Por isso é interessante usar &lt;code&gt;async&lt;/code&gt; nesses casos, pois poderemos guardar o retorno de funções de suspensão dentro de variáveis.&lt;/p&gt;

&lt;p&gt;Vamos ver como a nossa função &lt;code&gt;main&lt;/code&gt; ficará com a função &lt;code&gt;async&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;tempo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;measureTimeMillis&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;um&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;funçãoNúmeroUm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;dois&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;funçãoNúmeroDois&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A soma é ${um.await() + dois.await()}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Feito em $tempo milisegundos"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Agora, as funções &lt;code&gt;funçãoNúmeroUm&lt;/code&gt; e &lt;code&gt;funçãoNúmeroDois&lt;/code&gt; estão dentro de &lt;code&gt;async&lt;/code&gt;, instânciando uma nova corotina (tarefa) para cada função;&lt;/li&gt;
&lt;li&gt;Para pegar o valor de &lt;code&gt;um&lt;/code&gt; e &lt;code&gt;dois&lt;/code&gt;, é usada a função &lt;code&gt;.await()&lt;/code&gt;, que pega o resultado de dentro da corotina;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora, o código roda na metade do tempo pois as duas funções estão rodando ao mesmo tempo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;A soma é 30
Feito em 1015 milisegundos
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#estruturando-concorr%C3%AAncias-com-raw-async-endraw-"&gt;
  &lt;/a&gt;
  Estruturando concorrências com &lt;code&gt;async&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Podemos melhorar ainda mais o código acima, estruturando essa concorrência em uma função, dessa maneira:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;soma&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;coroutineScope&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;um&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;funçãoNúmeroUm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;dois&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;funçãoNúmeroDois&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;um&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;await&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dois&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;await&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Criamos uma função &lt;code&gt;soma&lt;/code&gt; que é um &lt;code&gt;coroutineScope&lt;/code&gt;, esse escopo é muito interessante de ser usado nesse tipo de caso pois se uma corotina de dentro desse escopo falhar, todas as outras também irão falhar. No caso, as duas corotinas precisam dar um resultado válido para a função retornar o número coretamente.&lt;/li&gt;
&lt;li&gt;E o retorno da função pega o valor das variáveis &lt;code&gt;um&lt;/code&gt; e &lt;code&gt;dois&lt;/code&gt;, e soma, retornando o resultado esperado de &lt;code&gt;30&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora também podemos mudar a função &lt;code&gt;main&lt;/code&gt; para usar a função &lt;code&gt;soma&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;tempo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;measureTimeMillis&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A soma é ${soma()}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Feito em $tempo milisegundos"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora temos um código mais bem estruturado, seguro, e com seu output igual ainda:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;A soma é 30
Feito em 1016 milisegundos
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;E se alguma corotina der um erro, como posso tratar esse erro usando &lt;code&gt;coroutineScope&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vamos mudar a &lt;code&gt;funçãoNúmeroDois&lt;/code&gt; para que essa função obrigatoriamente retorne um erro, dessa maneira:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;funçãoNúmeroDois&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nc"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Função com erro esperado"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Dessa maneira, obrigatoriamente, a &lt;code&gt;funçãoNúmeroDois&lt;/code&gt; retorna um erro do tipo &lt;code&gt;Função com erro esperado&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Caso você tente rodar o código dessa maneira, dará um erro por conta da &lt;code&gt;funçãoNúmeroDois&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Exception in thread "main" java.lang.Exception: Função com erro esperado
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para resolver isso, pode ser usado com bloco &lt;code&gt;try&lt;/code&gt; com um &lt;code&gt;catch&lt;/code&gt;, dessa maneira, tratando o erro. Vamos mudar a função &lt;code&gt;main&lt;/code&gt; mas tratando o erro:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;runBlocking&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;tempo&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;measureTimeMillis&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A soma é ${soma()}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Feito em $tempo milisegundos"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;erro&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Ocorreu um erro: $erro"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora, o output do programa é:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Ocorreu um erro: java.lang.Exception: Função com erro esperado
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Mesmo que o erro &lt;code&gt;Função com erro esperado&lt;/code&gt; tenha acontecido, a &lt;code&gt;main&lt;/code&gt; fechou sem problemas, pois os blocos &lt;code&gt;try&lt;/code&gt; e &lt;code&gt;catch&lt;/code&gt; trataram o erro.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finaliza%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Finalização
&lt;/h2&gt;

&lt;p&gt;Esse é o básico sobre corotinas no Kotlin. Há muito mais detalhes e conteúdos que podem ser abordados, mas para um artigo introdutório isso já é suficiente.&lt;/p&gt;

&lt;p&gt;Obrigado por ler 💙&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>backend</category>
    </item>
  </channel>
</rss>
