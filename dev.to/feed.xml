<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Ping-Pong: Score Keeper</title>
      <author>Argen Turatbek</author>
      <pubDate>Wed, 22 Dec 2021 05:22:36 +0000</pubDate>
      <link>https://dev.to/northpolicy/ping-pong-score-keeper-1f4g</link>
      <guid>https://dev.to/northpolicy/ping-pong-score-keeper-1f4g</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/argenturatbek/embed/LYzjLrY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>Website performance cheat sheet</title>
      <author>Carlo Gino Catapang</author>
      <pubDate>Wed, 22 Dec 2021 04:47:45 +0000</pubDate>
      <link>https://dev.to/codegino/how-to-improve-the-performance-of-your-website-1637</link>
      <guid>https://dev.to/codegino/how-to-improve-the-performance-of-your-website-1637</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lcp"&gt;(LCP) Largest Contentful Paint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fcp"&gt;(FCP) First Contentful Paint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cls"&gt;(CLS) Cumulative Layout Shift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tbt"&gt;(TBT) Total Blocking Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#others"&gt;Other performance consideration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Use &lt;a href="https://developers.google.com/web/tools/lighthouse"&gt;Lighthouse&lt;/a&gt; to check your website's performance. You will see the same exact information in the Performance report.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Web performance is the measure of a website's performance from the user's perspective. A website could have high download speeds, but if it takes too long to load, the user would perceive it as slow. That is why web performance includes not only download speed and throughput but also page load times and interactivity.&lt;/p&gt;



&lt;p&gt;This blog contains a list of things to consider when improving your website's performance which is categorized in the following metrics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Largest Contentful Paint&lt;/li&gt;
&lt;li&gt;First Contentful Paint&lt;/li&gt;
&lt;li&gt;Cumulative Layout Shift&lt;/li&gt;
&lt;li&gt;Total Blocking Time&lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;
  &lt;a href="#lcp-largest-contentful-paint"&gt;
  &lt;/a&gt;
  LCP (Largest Contentful Paint) &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#what-is-lcp"&gt;
  &lt;/a&gt;
  What is LCP?
&lt;/h4&gt;

&lt;p&gt;The Largest Contentful Paint (LCP) metric reports the render time of the largest image or text block visible within the viewport, relative to when the page first started loading.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Largest Contentful Paint (LCP) is an important, user-centric metric for measuring perceived load speed because it marks the point in the page load timeline when the page's main content has likely loaded—a fast LCP helps reassure the user that the page is useful.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To learn more about LCP, check the &lt;a href="https://web.dev/lcp/"&gt;original article&lt;/a&gt; where I copy-pasted the descriptions above.&lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#what-can-we-do-to-improve-lcp"&gt;
  &lt;/a&gt;
  What can we do to improve LCP?
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Reduce unused JavaScript&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reduce unused JavaScript and defer loading scripts until they are required to decrease bytes consumed by network activity.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/unused-javascript/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Use video formats for animated content&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Large GIFs are inefficient for delivering animated content. Consider using &lt;code&gt;MPEG4/WebM&lt;/code&gt; videos for animations and &lt;code&gt;PNG/WebP&lt;/code&gt; for static images instead of &lt;code&gt;GIF&lt;/code&gt; to save network bytes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/efficient-animated-content/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Preload Largest Contentful Paint image&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Preload the image used by the LCP element in order to improve your LCP time&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/optimize-lcp/#preload-important-resources"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Avoids enormous network payloads&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Large network payloads cost users real money and are highly correlated with long load times.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/total-byte-weight/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Avoid chaining critical requests&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Critical Request Chains below show you what resources are loaded with a high priority. Consider reducing the length of chains, reducing the download size of resources, or deferring the download of unnecessary resources to improve page load.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/critical-request-chains/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Largest Contentful Paint element&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the largest contentful element painted within the viewport.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/lighthouse-largest-contentful-paint/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#fpc-first-contentful-paint"&gt;
  &lt;/a&gt;
  FPC (First Contentful Paint)  &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#what-is-fcp"&gt;
  &lt;/a&gt;
  What is FCP?
&lt;/h4&gt;

&lt;p&gt;The First Contentful Paint (FCP) metric measures the time from when the page starts loading to when any part of the page's content is rendered on the screen. For this metric, "content" refers to text, images (including background images), &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; elements, or non-white &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; elements.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;First Contentful Paint (FCP) is an important, user-centric metric for measuring perceived load speed because it marks the first point in the page load timeline where the user can see anything on the screen—a fast FCP helps reassure the user that something is happening.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To learn more about FCP, check the &lt;a href="https://web.dev/fcp/"&gt;original article&lt;/a&gt; where I copy-pasted the descriptions above.&lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#what-can-we-do-to-improve-fcp"&gt;
  &lt;/a&gt;
  What can we do to improve FCP?
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: If you check the Chrome's Lighthouse report, you will see that everything in &lt;code&gt;FCP&lt;/code&gt; is also in &lt;code&gt;LCP&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Meaning, the following list below can be included in the list in &lt;code&gt;LCP&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Eliminate render-blocking resources&lt;/strong&gt;
Resources are blocking the first paint of your page. Consider delivering critical JS/CSS inline and deferring all non-critical JS/styles.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://web.dev/render-blocking-resources/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Minify CSS&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Minifying CSS files can reduce network payload sizes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/unminified-css/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Minify JavaScript&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Minifying JavaScript files can reduce payload sizes and script parse time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/unminified-javascript/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Reduce unused CSS&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reduce unused rules from stylesheets and defer CSS not used for above-the-fold content to decrease bytes consumed by network activity.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/unused-css-rules/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Enable text compression&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Text-based resources should be served with compression (gzip, deflate or brotli) to minimize total network bytes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/uses-text-compression/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Preconnect to required origins&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider adding &lt;code&gt;preconnect&lt;/code&gt; or &lt;code&gt;dns-prefetch&lt;/code&gt; resource hints to establish early connections to important third-party origins.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/uses-rel-preconnect/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Initial server response time was short&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep the server response time for the main document short because all other requests depend on it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/time-to-first-byte/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Avoid multiple page redirects&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Redirects introduce additional delays before the page can be loaded.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/redirects/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Preload key requests&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider using &lt;code&gt;&amp;lt;link rel=preload&amp;gt;&lt;/code&gt; to prioritize fetching resources that are currently requested later in page load.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/uses-rel-preload/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Avoid chaining critical requests&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Critical Request Chains below show you what resources are loaded with a high priority. Consider reducing the length of chains, reducing the download size of resources, or deferring the download of unnecessary resources to improve page load.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/critical-request-chains/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;All text remains visible during webfont loads&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Leverage the font-display CSS feature to ensure text is user-visible while webfonts are loading.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/font-display/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#cls-cumulative-layout-shift"&gt;
  &lt;/a&gt;
  CLS (Cumulative Layout Shift) &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#what-is-cls"&gt;
  &lt;/a&gt;
  What is CLS?
&lt;/h4&gt;

&lt;p&gt;CLS is a measure of the largest burst of layout shift scores for every unexpected layout shift that occurs during the entire lifespan of a page.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cumulative Layout Shift (CLS) is an important, user-centric metric for measuring visual stability because it helps quantify how often users experience unexpected layout shifts—a low CLS helps ensure that the page is delightful.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To learn more about CLS, check the &lt;a href="https://web.dev/cls/"&gt;original article&lt;/a&gt; where I copy-pasted the descriptions above.&lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#what-can-we-do-to-improve-cls"&gt;
  &lt;/a&gt;
  What can we do to improve CLS?
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Avoid non-composited animations&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Animations which are not composited can be janky and increase CLS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/non-composited-animations/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Avoid large layout shifts&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These DOM elements contribute most to the CLS of the page.&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Image elements have explicit &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Set an explicit width and height on image elements to reduce layout shifts and improve CLS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/optimize-cls/#images-without-dimensions"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#tbt-total-blocking-time"&gt;
  &lt;/a&gt;
  TBT (Total Blocking Time) &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#what-is-tbt"&gt;
  &lt;/a&gt;
  What is TBT?
&lt;/h4&gt;

&lt;p&gt;The Total Blocking Time (TBT) metric measures the total amount of time between First Contentful Paint (FCP) and Time to Interactive (TTI) where the main thread was blocked for long enough to prevent input responsiveness.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Total Blocking Time (TBT) is an important lab metric for measuring load responsiveness because it helps quantify the severity of how non-interactive a page is prior to it becoming reliably interactive—a low TBT helps ensure that the page is usable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To learn more about TBT, check the &lt;a href="https://web.dev/tbt/"&gt;original article&lt;/a&gt; where I copy-pasted the descriptions above.&lt;/p&gt;



&lt;h4&gt;
  &lt;a href="#what-can-we-do-to-improve-tbt"&gt;
  &lt;/a&gt;
  What can we do to improve TBT?
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Avoid long main-thread tasks&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lists the longest tasks on the main thread, useful for identifying worst contributors to input delay.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/long-tasks-devtools/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Remove duplicate modules in JavaScript bundles&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remove large, duplicate JavaScript modules from bundles to reduce unnecessary bytes consumed by network activity.&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Avoid serving legacy JavaScript to modern browsers&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Polyfills and transforms enable legacy browsers to use new JavaScript features. However, many aren't necessary for modern browsers. For your bundled JavaScript, adopt a modern script deployment strategy using module/nomodule feature detection to reduce the amount of code shipped to modern browsers, while retaining support for legacy browsers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://philipwalton.com/articles/deploying-es2015-code-in-production-today/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Avoids an excessive DOM size&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A large DOM will increase memory usage, cause longer &lt;a href="https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations"&gt;style calculations&lt;/a&gt;, and produce costly &lt;a href="https://developers.google.com/speed/docs/insights/browser-reflow"&gt;layout reflows&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/dom-size/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;JavaScript execution time&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider reducing the time spent parsing, compiling, and executing JS. You may find delivering smaller JS payloads helps with this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/bootup-time/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Minimizes main-thread work&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider reducing the time spent parsing, compiling and executing JS. You may find delivering smaller JS payloads helps with this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/mainthread-work-breakdown/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Minimize third-party usage&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Third-party code can significantly impact load performance. Limit the number of redundant third-party providers and try to load third-party code after your page has primarily finished loading.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/loading-third-party-javascript"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Lazy load third-party resources with facades&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some third-party embeds can be lazy loaded. Consider replacing them with a facade until they are required.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/third-party-facades/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Has a &lt;code&gt;&amp;lt;meta name="viewport"&amp;gt;&lt;/code&gt; tag with &lt;code&gt;width&lt;/code&gt; or &lt;code&gt;initial-scale&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A &lt;code&gt;&amp;lt;meta name="viewport"&amp;gt;&lt;/code&gt; not only optimizes your app for mobile screen sizes, but also prevents &lt;a href="https://developers.google.com/web/updates/2013/12/300ms-tap-delay-gone-away"&gt;a 300 millisecond delay to user input&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/viewport/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#other-performance-consideration"&gt;
  &lt;/a&gt;
  Other performance consideration  &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Avoids &lt;code&gt;document.write()&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For users on slow connections, external scripts dynamically injected via &lt;code&gt;document.write()&lt;/code&gt; can delay page load by tens of seconds.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/no-document-write/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Keep request counts low and transfer sizes small&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To set budgets for the quantity and size of page resources, add a budget.json file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/use-lighthouse-for-performance-budgets/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;User Timing marks and measures&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider instrumenting your app with the User Timing API to measure your app's real-world performance during key user experiences.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/user-timings/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Properly size images&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Serve images that are appropriately-sized to save cellular data and improve load time&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/uses-responsive-images/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Defer offscreen images&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider lazy-loading offscreen and hidden images after all critical resources have finished loading to lower time to interactive.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/offscreen-images/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Efficiently encode images&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Optimized images load faster and consume less cellular data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/uses-optimized-images/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Serve images in next-gen formats&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Image formats like WebP and AVIF often provide better compression than PNG or JPEG, which means faster downloads and less data consumption.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/uses-webp-images/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Use &lt;code&gt;HTTP/2&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;HTTP/2&lt;/code&gt; offers many benefits over &lt;code&gt;HTTP/1.1&lt;/code&gt;, including binary headers and multiplexing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/uses-http2/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Uses efficient cache policy on static assets&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A long cache lifetime can speed up repeat visits to your page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/uses-long-cache-ttl/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Largest Contentful Paint image was not lazily loaded&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Above-the-fold images that are lazily loaded render later in the page lifecycle, which can delay the largest contentful paint.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/lcp-lazy-loading/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Uses passive listeners to improve scrolling performance&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider marking your touch and wheel event listeners as &lt;code&gt;passive&lt;/code&gt; to improve your page's scroll performance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/uses-passive-event-listeners/"&gt;Learn more&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-next-more-copypasting"&gt;
  &lt;/a&gt;
  What's next (&lt;em&gt;More copy-pasting&lt;/em&gt;)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Best practices&lt;/li&gt;
&lt;li&gt;Accessibility&lt;/li&gt;
&lt;li&gt;SEO&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>performance</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>VSCode CSS Variable Autocomplete</title>
      <author>Vu Nguyen</author>
      <pubDate>Wed, 22 Dec 2021 04:10:33 +0000</pubDate>
      <link>https://dev.to/vunguyendev/vscode-css-variable-autocomplete-3960</link>
      <guid>https://dev.to/vunguyendev/vscode-css-variable-autocomplete-3960</guid>
      <description>&lt;h2&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem:
&lt;/h2&gt;

&lt;p&gt;As a developer I love intellisense and autocomplete, it's fast, precise and I rely on it a lot because I actually dont remember all the options.&lt;/p&gt;

&lt;p&gt;But, something is missing with css variables, vscode does not support autocomplete if the variables on another file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=vunguyentuan.vscode-css-variables"&gt;CSS Variable Autocomplete Extension&lt;/a&gt; to rescue.&lt;/p&gt;

&lt;p&gt;The extension will scan all the css-like files(support SASS, LESS, CSS) and create a dictionary of all variables.&lt;/p&gt;

&lt;p&gt;Then use the variables dictionary to show all the completion.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1PlD7--m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/vunguyentuan/vscode-css-variables/raw/master/demo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1PlD7--m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/vunguyentuan/vscode-css-variables/raw/master/demo.gif" alt="Demo" width="880" height="646"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  Whats next?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Color preview box beside variable, it would be nice to know the color value of the variable&lt;/li&gt;
&lt;li&gt;Your suggestion&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>vscode</category>
      <category>css</category>
      <category>autocomplete</category>
      <category>cssvariable</category>
    </item>
    <item>
      <title>Progressive Enhancement in Django vs Remix</title>
      <author>Zach Taylor</author>
      <pubDate>Wed, 22 Dec 2021 03:55:38 +0000</pubDate>
      <link>https://dev.to/zachtylr21/progressive-enhancement-in-django-vs-remix-4lmb</link>
      <guid>https://dev.to/zachtylr21/progressive-enhancement-in-django-vs-remix-4lmb</guid>
      <description>&lt;p&gt;In this post, I want to tell you a quick story about one of the reasons I love Remix: super simple progressive enhancement.&lt;/p&gt;

&lt;p&gt;A couple years ago, my team at work was tasked with creating a new application that would be used internally by our sales reps. The tool needed to allow reps to quickly search through our available products and build quotes to send to customers. For various reasons, we decided to build the app with Django.&lt;/p&gt;

&lt;p&gt;Django is awesome. One thing I love about Django (and similar frameworks like Rails) is that you render your HTML server-side. The way you do this in Django is with their &lt;a href="https://docs.djangoproject.com/en/3.2/ref/templates/language/"&gt;Django template language&lt;/a&gt;, which is an extension of HTML that allows you to reuse HTML files, and embed &lt;code&gt;if&lt;/code&gt; statements, &lt;code&gt;for&lt;/code&gt; loops and other custom logic. Rendering HTML server-side means you can talk directly to your database and you don't have to create "API routes" to retrieve data from the browser with JavaScript.&lt;/p&gt;

&lt;p&gt;In fact, you don't have to include any JavaScript at all in your app if you don't want to. In Django, you use HTML forms for user input, which is enough to create a functional app. This is what the first version of our quoting app at work did. There was no JavaScript; it was just server-rendered HTML with HTML forms for data mutations.&lt;/p&gt;

&lt;p&gt;However, the sales team started asking for the fancier user experiences that are expected from modern applications. In other words, they were asking for some &lt;em&gt;progressive enhancement&lt;/em&gt;. These modern user experiences simply can't be done without JavaScript on the page, and this is where Django's SSR model kind of left us hanging.&lt;/p&gt;

&lt;p&gt;JavaScript kind of feels like an afterthought in Django. Django's solution to JavaScript is to just do what you do on any web page: write some JavaScript in a file and include it with a &lt;code&gt;&amp;lt;script /&amp;gt;&lt;/code&gt; tag in your HTML. The nice thing about this is that you have full control over which JavaScript files are loaded on any given page, so your network tab stays clean.&lt;/p&gt;

&lt;p&gt;The problem with this approach is that you end up writing a lot of your server-side logic again in your JavaScript. For example, in a To-Do app, you might have a list of to-dos and a detail view that changes as you click on each one. If you want the ability to switch out the detail view client-side without making a full document request, you'll have to write some JavaScript to 1) make a request to your server to get the to-do data and 2) manually replace the old detail view in the DOM, thereby duplicating some of the render logic that was in your Django template. This also means you have to add an API route for the JavaScript to talk to. This one example is not a ton of extra work, but it can add up quickly and get messy if you need a lot of interactivity.&lt;/p&gt;

&lt;p&gt;We eventually needed enough interactivity in our quoting app that it was pretty difficult to maintain. We decided it would make our lives easier as developers to convert the entire front end to a React SPA and just use Django for the API routes and talking to the database. This solved our maintenance problems, and handling data was made easy with React Query, but I still felt like we had lost something.&lt;/p&gt;

&lt;p&gt;For one, we were now sending a lot more JavaScript across the network because all of our app logic was now client-side. For two, we now had request waterfalls and spinners all over the place, instead of a single document load with all the data already there.&lt;/p&gt;

&lt;p&gt;It was around the time I was thinking about these problems that I heard about Remix. I bought a supporter license and dove in, and I immediately knew it was the solution I was looking for.&lt;/p&gt;

&lt;p&gt;Remix gives you all the benefits of server-side rendering while also making the transition to interactivity on the client &lt;em&gt;completely seamless&lt;/em&gt;. All it takes is one &lt;code&gt;&amp;lt;Script /&amp;gt;&lt;/code&gt; element in your root route and boom, your app is now running React in the browser, doing client-side route transitions. There's no need to write any new logic at all. No extra JavaScript, no API routes, nothing. This is due to a couple things. First, since React can render HTML on the server and run in the browser, you don't have to re-create your server-rendering logic on the client. So instead of using a template language on the server and JavaScript in the browser, I can just write React code once and use it in both places. Second, Remix takes care of creating and calling API routes for you. Your &lt;code&gt;loader&lt;/code&gt; functions are used during the initial server render, and they are automatically made available as endpoints and called from the client on page or layout transitions.&lt;/p&gt;

&lt;p&gt;Remix also lets you control &lt;em&gt;which pages&lt;/em&gt; are interactive. If one page needs JavaScript but another doesn't, you can include JavaScript only on the page that needs it. This allows me to retain a lot of that control over the network tab that I had in Django.&lt;/p&gt;

&lt;p&gt;If you want to get fancy with forms and do form submissions client-side without a document refresh, you just have to switch from &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; to Remix's &lt;code&gt;&amp;lt;Form&amp;gt;&lt;/code&gt;. Remix will then prevent the default refresh behavior, call an endpoint that runs your &lt;code&gt;action&lt;/code&gt; for that route, and call all the loaders for that route so the data on the page stays up to date. It's the same behavior the browser gives you, but without the page refresh!&lt;/p&gt;

&lt;p&gt;And therein lies the reason I love Remix's approach to progressive enhancement so much. Remix doesn't stray too far from the default browser behavior, which not only means you can fall back on default browser behavior if your user has a spotty connection and JavaScript fails to load, but you also learn to think in terms of how the browser behaves, which is transferrable knowledge you can use outside of Remix.&lt;/p&gt;

&lt;p&gt;There are so many things I love about Remix, but the way it makes progressively enhancing apps with JavaScript so easy is one of my favorite things about it. Thanks for reading. 🙂&lt;/p&gt;




&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@andyjh07?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Andy Holmes&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/space?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>remix</category>
      <category>django</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Php Operator</title>
      <author>Irfan Khan</author>
      <pubDate>Wed, 22 Dec 2021 03:32:55 +0000</pubDate>
      <link>https://dev.to/irfankhan177/php-operator-4ke9</link>
      <guid>https://dev.to/irfankhan177/php-operator-4ke9</guid>
      <description>&lt;p&gt;&lt;strong&gt;Arithmetic Operators&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Arithmetic operators work with numeric values to perform common arithmetical operations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$num1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$num2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//Addition&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$num1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;$num2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//14&lt;/span&gt;
&lt;span class="c1"&gt;//Substraction&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$num1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;$num2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//2&lt;/span&gt;
&lt;span class="c1"&gt;//Multiplication&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$num1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;$num2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//48&lt;/span&gt;

&lt;span class="c1"&gt;//Division&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$num1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;$num2&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//1.33333333&lt;/span&gt;


&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Modulus&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The modulus operator, represented by the % sign, returns the remainder of the division of the first operand by the second operand:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nv"&gt;$y&lt;/span&gt; &lt;span class="c1"&gt;//2&lt;/span&gt;

&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Increment &amp;amp; Decrement&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The increment operators are used to increment a variable's value.&lt;br&gt;
The decrement operators are used to decrement a variable's value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// equivalent to $x = $x+1;&lt;/span&gt;

&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// equivalent to $x = $x-1;&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Increment and decrement operators either precede or follow a variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// post-increment &lt;/span&gt;

&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// post-decrement &lt;/span&gt;
&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// pre-increment &lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// pre-decrement&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The difference is that the post-increment returns the original value before it changes the variable, while the pre-increment changes the variable first and then returns the value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$a&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// $a=3,  $b=2&lt;/span&gt;

&lt;span class="nv"&gt;$a&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// $a=3,  $b=3&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>php</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Bash Scripting Concepts: Part 2 of 2</title>
      <author>SerDigital64</author>
      <pubDate>Wed, 22 Dec 2021 03:07:56 +0000</pubDate>
      <link>https://dev.to/serdigital64/bash-scripting-concepts-part-2-of-2-3j0f</link>
      <guid>https://dev.to/serdigital64/bash-scripting-concepts-part-2-of-2-3j0f</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;This is the second part of the tutorial. If not done already, please read the first part: &lt;a href="https://dev.to/serdigital64/bash-scripting-concepts-part-1-of-2-28fk"&gt;Bash Scripting Concepts: Part 1 of 2&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-with-loops"&gt;
  &lt;/a&gt;
  Working with loops
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Bash&lt;/strong&gt; provides three ways of creating loops:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;for&lt;/code&gt;: loop for a predefined number of times&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;while&lt;/code&gt;: loop while the exit condition is true. The condition is evaluated before executing tasks.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;until&lt;/code&gt;: loop until the exit condition is true. The condition is evaluated after executing tasks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to the loop condition, Bash provides two statements that can be used to control the loop execution flow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;break&lt;/code&gt;: forces the loop to stop.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;continue&lt;/code&gt;: forces the loop to skip remaining tasks and start the next iteration.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#command-raw-while-endraw-"&gt;
  &lt;/a&gt;
  Command: &lt;code&gt;while&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;In the following example, the loop iterates 5 times. The loop condition is evaluated after all commands in the code block are executed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;declare&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;span class="nb"&gt;declare&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="nv"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;5

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;count &amp;lt;&lt;span class="o"&gt;=&lt;/span&gt; max&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
  &lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'counter: %s\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;count &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#command-raw-until-endraw-"&gt;
  &lt;/a&gt;
  Command: &lt;code&gt;until&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Using the same structure as in the &lt;code&gt;while&lt;/code&gt; example, notice that now the loop iterates 4 times only. This is because the loop condition is evaluated before executing the code block:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;declare&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;span class="nb"&gt;declare&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="nv"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;5

&lt;span class="k"&gt;until&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;count &lt;span class="o"&gt;==&lt;/span&gt; max&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
  &lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'counter: %s\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;count &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#command-raw-for-endraw-"&gt;
  &lt;/a&gt;
  Command: &lt;code&gt;for&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;In the case of the &lt;code&gt;for&lt;/code&gt; loop the iteration is predefined. Instead of having a loop condition, the loop variable &lt;code&gt;count&lt;/code&gt; will be assigned each value in the list:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;declare&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; count

&lt;span class="k"&gt;for &lt;/span&gt;count &lt;span class="k"&gt;in &lt;/span&gt;1 2 3 4 5 &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
  &lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'counter: %s\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#working-with-conditionals"&gt;
  &lt;/a&gt;
  Working with conditionals
&lt;/h2&gt;

&lt;p&gt;Bash provides the following options for implementing conditional execution:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;||&lt;/code&gt;: (logical OR) evaluates the execution of two commands and sets the exit status to zero if any associated exit status is zero.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;: (logical AND) evaluates the execution of two commands and sets the exit status to zero if all associated exit statuses are zero.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\!&lt;/code&gt;: (logical NOT) evaluates the execution of a command and sets the exit status to zero if the associated exit status is not zero.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;(( ))&lt;/code&gt;: performs logical evaluation on the integer expression and sets the exit status to zero if true&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;[[ ]]&lt;/code&gt;: evaluates the literal expression and sets the exit status to zero if true.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;if&lt;/code&gt;: executes a command and if the exit status is zero then performs additional actions.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;case&lt;/code&gt;: compares the provided value against a list of patterns and executes the commands upon match.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As mentioned before, &lt;strong&gt;Bash&lt;/strong&gt; interprets the exit status of commands as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;0&lt;/code&gt;: true&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;gt;0&lt;/code&gt;: false&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the following examples &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; are external commands that emulates true and false values (exist status 0 and 1 respectively)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#logical-or-raw-endraw-"&gt;
  &lt;/a&gt;
  Logical OR: &lt;code&gt;||&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;false
printf&lt;/span&gt; &lt;span class="s1"&gt;'evaluation result of (true || false): %s\n'&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;true
printf&lt;/span&gt; &lt;span class="s1"&gt;'evaluation result of (true || true): %s\n'&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;false
printf&lt;/span&gt; &lt;span class="s1"&gt;'evaluation result of (false || false): %s\n'&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;true
printf&lt;/span&gt; &lt;span class="s1"&gt;'evaluation result of (false || true): %s\n'&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#logical-and-raw-ampamp-endraw-"&gt;
  &lt;/a&gt;
  Logical AND: &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;false
printf&lt;/span&gt; &lt;span class="s1"&gt;'evaluation result of (true &amp;amp;&amp;amp; false): %s\n'&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;true
printf&lt;/span&gt; &lt;span class="s1"&gt;'evaluation result of (true &amp;amp;&amp;amp; true): %s\n'&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;false
printf&lt;/span&gt; &lt;span class="s1"&gt;'evaluation result of (false &amp;amp;&amp;amp; false): %s\n'&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;true
printf&lt;/span&gt; &lt;span class="s1"&gt;'evaluation result of (false &amp;amp;&amp;amp; true): %s\n'&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#logical-not-raw-endraw-"&gt;
  &lt;/a&gt;
  Logical NOT: &lt;code&gt;!&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nb"&gt;true
printf&lt;/span&gt; &lt;span class="s1"&gt;'evaluation result of (! true): %s\n'&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nb"&gt;false
printf&lt;/span&gt; &lt;span class="s1"&gt;'evaluation result of (! false): %s\n'&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#arithmetic-expression-evaluation-raw-endraw-"&gt;
  &lt;/a&gt;
  Arithmetic Expression Evaluation: &lt;code&gt;(( ))&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;(( ))&lt;/code&gt; form accepts several logical operators. Some of them are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;==&lt;/code&gt;: equal&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;!=&lt;/code&gt;: not equal&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;gt;&lt;/code&gt;: greater than&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;&lt;/code&gt;: less than&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;gt;=&lt;/code&gt;: greater than or equal&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;=&lt;/code&gt;: less than or equal
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;declare&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$RANDOM&lt;/span&gt;
&lt;span class="o"&gt;((&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 5000 &lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'evaluation result of (( %s &amp;gt; 5000 )): %s\n'&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#expression-evaluation-raw-endraw-"&gt;
  &lt;/a&gt;
  Expression Evaluation: &lt;code&gt;[[ ]]&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;[[ ]]&lt;/code&gt; form accepts several logical operators and tests. Some of them are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;==&lt;/code&gt;: equal&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;!=&lt;/code&gt;: not equal&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-z&lt;/code&gt;: string is empty&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-n&lt;/code&gt;: string is not empty&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-f&lt;/code&gt;: path is a file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt; the special character &lt;code&gt;*&lt;/code&gt; can be used as a wildcard to match zero or more characters to the right.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;declare test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$RANDOM&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; 1&lt;span class="k"&gt;*&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'evaluation result of [[ "%s" == 1* ]]: %s\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#command-raw-if-endraw-"&gt;
  &lt;/a&gt;
  Command: &lt;code&gt;if&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;In the following example, arithmetic evaluation is used. Notice that quotes are not required within &lt;code&gt;(( ))&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;declare&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RANDOM&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; 10000 &lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
  &lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'test value (%s) is equal or greater than 10000\n'&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; 5000 &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &amp;lt; 10000 &lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
  &lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'test value (%s) is between 5001 and 9999\n'&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else
  &lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'test value (%s) is less than than 5001\n'&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#command-raw-case-endraw-"&gt;
  &lt;/a&gt;
  Command: &lt;code&gt;case&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;declare&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RANDOM&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="k"&gt;in
  &lt;/span&gt;1&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;2&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'Random number (%s) starts with 1 or 2\n'&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
  3&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'Random number (%s) starts with 3\n'&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
  &lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'Random number (%s) does not start with 1,2 or 3\n'&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
&lt;span class="k"&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#redirecting-data-flows"&gt;
  &lt;/a&gt;
  Redirecting data flows
&lt;/h2&gt;

&lt;p&gt;Bash provides two alternatives for establishing data flows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Redirection

&lt;ul&gt;
&lt;li&gt;Set read source for &lt;strong&gt;STDIN&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Set write destination for &lt;strong&gt;STDOUT&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Set write destination for &lt;strong&gt;STDERR&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Pipelines: integrate two commands by plugging the &lt;strong&gt;STDOUT&lt;/strong&gt; from the first one to the &lt;strong&gt;STDIN&lt;/strong&gt; of the second one&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#redirection"&gt;
  &lt;/a&gt;
  Redirection
&lt;/h3&gt;

&lt;p&gt;In the following example, two functions will communicate with each other using a common file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;readonly &lt;/span&gt;&lt;span class="nv"&gt;DATA_BRIDGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;mktemp&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;produce_data&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'produce_data(): write data to the temporary file (%s) by redirectin the STDOUT of the printf command\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DATA_BRIDGE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'[sample data]\n'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DATA_BRIDGE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;ingest_data&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'ingest_data(): read data from the temporary file (%s) by redirecting the STDIN of the cat command: '&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DATA_BRIDGE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;cat&lt;/span&gt; &amp;lt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DATA_BRIDGE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

produce_data
ingest_data

&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;DATA_BRIDGE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#pipelines"&gt;
  &lt;/a&gt;
  Pipelines
&lt;/h3&gt;

&lt;p&gt;This example shows an alternative way of integrating both functions using pipelines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;produce_data&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'[sample data]\n'&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function &lt;/span&gt;ingest_data&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;cat&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'Integrate functions produce_data() and ingest_data() by piping their STDIN and STDOUT: '&lt;/span&gt;
produce_data | ingest_data

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;Discover advanced features by exploring the &lt;a href="https://www.gnu.org/software/bash/manual/html_node/index.html#SEC_Contents"&gt;Bash Reference Manual&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;jobs&lt;/li&gt;
&lt;li&gt;signals&lt;/li&gt;
&lt;li&gt;traps&lt;/li&gt;
&lt;li&gt;parallelism&lt;/li&gt;
&lt;li&gt;error handling&lt;/li&gt;
&lt;li&gt;configuration settings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Organize your code by choosing a coding style. For example: &lt;a href="https://google.github.io/styleguide/shellguide.html"&gt;Google Shell Style Guide&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enhance script's quality by incorporating linter and testing tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.shellcheck.net/"&gt;Shell Check&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bats-core/bats-core"&gt;Basts-Core&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#copyright-information"&gt;
  &lt;/a&gt;
  Copyright information
&lt;/h2&gt;

&lt;p&gt;This article is licensed under a &lt;a href="http://creativecommons.org/licenses/by/4.0/"&gt;Creative Commons Attribution 4.0 International License&lt;/a&gt;. For copyright information on the product or products mentioned inhere refer to their respective owner.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;p&gt;Opinions presented in this article are personal and belong solely to me, and do not represent people or organizations associated with me in a professional or personal way. All the information on this site is provided "as is" with no guarantee of completeness, accuracy or the results obtained from the use of this information.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Bash Scripting Concepts: Part 1 of 2</title>
      <author>SerDigital64</author>
      <pubDate>Wed, 22 Dec 2021 03:06:52 +0000</pubDate>
      <link>https://dev.to/serdigital64/bash-scripting-concepts-part-1-of-2-28fk</link>
      <guid>https://dev.to/serdigital64/bash-scripting-concepts-part-1-of-2-28fk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Bash&lt;/strong&gt; is a tool that provides a text-based user interface for managing operating system resources. It's also the run-time environment for a simple interpreted programming language that can be used to create &lt;strong&gt;scripts&lt;/strong&gt; for automating tasks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bash&lt;/strong&gt; is the evolution of the popular &lt;strong&gt;Born Shell (sh)&lt;/strong&gt;, a de facto standard among Unix-like operating systems. It provides all the features of its predecessor plus a new set of built-ins and configuration settings.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-bash"&gt;
  &lt;/a&gt;
  Using Bash
&lt;/h2&gt;

&lt;p&gt;There are three common use cases for &lt;strong&gt;Bash&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;User shell&lt;/strong&gt;: configured at the operating system level, provides the shell for user login, either local or remote.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Script run-time&lt;/strong&gt;: provides the execution run-time for &lt;strong&gt;Bash&lt;/strong&gt; scripts&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Temporal shell&lt;/strong&gt;: provides an interactive shell session on top of the user shell. The new session is a sub-process of the actual user or a different user when using privilege delegation tools such as SuDO.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This tutorial will focus on the &lt;strong&gt;scripts run-time&lt;/strong&gt; use case.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#script-structure"&gt;
  &lt;/a&gt;
  Script structure
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Bash&lt;/strong&gt; scripts are text files describing a sequence of commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Commands can be either built-in or external Linux apps.&lt;/li&gt;
&lt;li&gt;Commands are separated from each other by the new-line character (standard line separator for Linux/Unix systems).&lt;/li&gt;
&lt;li&gt;Long lines can be split using the scape character &lt;code&gt;\&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Commands can be grouped on the same line using the semicolon separator &lt;code&gt;;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Commands and arguments are separated using one or more spaces.&lt;/li&gt;
&lt;li&gt;Although not required, it's recommended that the first line of the script contains: &lt;code&gt;#!/bin/bash&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Script files must have execution and read permissions if used directly, or just read-only permissions if called using &lt;strong&gt;Bash&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'echo and printf are built-in commands'&lt;/span&gt;

&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'pwd is an external Linux command that shows the current directory: '&lt;/span&gt;
&lt;span class="nb"&gt;pwd

printf&lt;/span&gt; &lt;span class="s1"&gt;'multiple '&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'commands '&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'on the same line\n'&lt;/span&gt;

&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'%s %s %s\n'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="s1"&gt;'single command'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="s1"&gt;'using multiple'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="s1"&gt;'lines'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-variables"&gt;
  &lt;/a&gt;
  Using Variables
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#declaration"&gt;
  &lt;/a&gt;
  Declaration
&lt;/h3&gt;

&lt;p&gt;Variables in Bash are created using a declaration command and the equal &lt;code&gt;=&lt;/code&gt; symbol to associate the variable name to its value. Notice that there should be no spaces before and after the assignment symbol:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;declare variable_name='variable value'&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bash provides the following built-in commands for declaring variables:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;th&gt;Scope&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;export&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Declare global variables&lt;/td&gt;
&lt;td&gt;Script-wide and sub-processes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;readonly&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Declare readonly variables (constants)&lt;/td&gt;
&lt;td&gt;Script-wide&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;declare&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Declare script level variables&lt;/td&gt;
&lt;td&gt;Script-wide&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;local&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Declare function level variables&lt;/td&gt;
&lt;td&gt;Function-wide&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Consider the following best practices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Declare variables at the beginning of the code block.&lt;/li&gt;
&lt;li&gt;Declare and initialize all the variables that the script will use.&lt;/li&gt;
&lt;li&gt;Readonly and exported variables should be named using all uppercase.&lt;/li&gt;
&lt;li&gt;Use single quotes for static content.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#retreive-variables-value"&gt;
  &lt;/a&gt;
  Retreive variable's value
&lt;/h3&gt;

&lt;p&gt;To use the value of a variable, prepend the dollar symbol &lt;code&gt;$&lt;/code&gt; to the name of the variable surrounded by brackets &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As a best-practice, surround variable expansion with double quotes:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;echo "${test_variable}"&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Bash&lt;/strong&gt; also provides processing functions that can be used for altering the value before the expansion.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;declare &lt;/span&gt;&lt;span class="nv"&gt;var1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'word1'&lt;/span&gt;
&lt;span class="nb"&gt;declare &lt;/span&gt;&lt;span class="nv"&gt;var2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'WORD2'&lt;/span&gt;
&lt;span class="nb"&gt;declare &lt;/span&gt;&lt;span class="nv"&gt;var3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'AbCdE/12345'&lt;/span&gt;

&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'replace value with its length: "${#var1}" = "%s"\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;var1&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'right strip from pattern: "${var3##*/}" = "%s"\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;var3&lt;/span&gt;&lt;span class="p"&gt;##*/&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'left strip from pattern: "${var3%%/*}" = "%s"\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;var3&lt;/span&gt;&lt;span class="p"&gt;%%/*&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'convert to uppercase: "${var1^^}" = "%s"\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;var1&lt;/span&gt;&lt;span class="p"&gt;^^&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'convert to lowercase: "${var2,,}" = "%s"\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;var2&lt;/span&gt;&lt;span class="p"&gt;,,&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#data-types"&gt;
  &lt;/a&gt;
  Data Types
&lt;/h3&gt;

&lt;p&gt;Bash supports four data types:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Declaration command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;declare&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;integer&lt;/td&gt;
&lt;td&gt;declare -i&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;td&gt;declare -a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;associative array&lt;/td&gt;
&lt;td&gt;declare -A&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Even though there is no explicit boolean data type, &lt;strong&gt;Bash&lt;/strong&gt; interprets the exit status of commands as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;exit status == 0: true&lt;/li&gt;
&lt;li&gt;exit status &amp;gt; 0: false&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;p&gt;Parameters are special variables that are automatically created when a function or script is called with arguments.&lt;/p&gt;

&lt;p&gt;The variable name is created by using a single number to represent the position of the word in the argument list:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;bash say_hello.bash 'to' 'my' 'little' 'friend'&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;declare &lt;/span&gt;&lt;span class="nv"&gt;msg1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="c"&gt;# Variable $1: assigned to the first variable&lt;/span&gt;
&lt;span class="nb"&gt;declare &lt;/span&gt;&lt;span class="nv"&gt;msg2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="c"&gt;# Variable $2: assigned to the second variable&lt;/span&gt;
&lt;span class="nb"&gt;declare &lt;/span&gt;&lt;span class="nv"&gt;msg3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$3&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="c"&gt;# Variable $3: assigned to the third variable&lt;/span&gt;
&lt;span class="nb"&gt;declare &lt;/span&gt;&lt;span class="nv"&gt;msg4&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$4&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="c"&gt;# Variable $4: assigned to the forth variable&lt;/span&gt;

&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'say hello %s %s %s %s\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;msg1&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;msg2&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;msg3&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;msg4&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#shell-expansion"&gt;
  &lt;/a&gt;
  Shell Expansion
&lt;/h3&gt;

&lt;p&gt;In addition to variables &lt;strong&gt;Bash&lt;/strong&gt; provides additional features for generating dynamic values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;$( )&lt;/code&gt;: Command Expansion: Execute the command in a sub-process and expand its STDOUT.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$(( ))&lt;/code&gt;: Arithmetic Expansion: Evaluate the arithmetic expression and use the resulting value for the expansion.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$(&amp;lt; )&lt;/code&gt;: File Expansion: Read the content of a file and use it for the expansion.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'Command Expansion: "$(echo hello-world)" = "%s"\n\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'hello-world'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'Arithmetic Expansion:  "$(( 2 + 2 ))" = %s\n\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="k"&gt;))&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'File Expansion: "$(&amp;lt;/etc/os-release)"\n %s\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&amp;lt;/etc/os-release&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#working-with-processes"&gt;
  &lt;/a&gt;
  Working with processes
&lt;/h2&gt;

&lt;p&gt;Before going into the details, let's review the following key concepts about Unix processes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A process is a running app that is executed from an already running process (parent). For scripts, the parent process is the one running the &lt;strong&gt;Bash&lt;/strong&gt; run-time.&lt;/li&gt;
&lt;li&gt;The Operating System assigns unique integer identifiers to each process (&lt;strong&gt;PID&lt;/strong&gt;: Process ID).&lt;/li&gt;
&lt;li&gt;Processes have 3 data paths:

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;STDIN&lt;/strong&gt;: standard input: process can read data from this path.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;STDOUT&lt;/strong&gt;: standard output: process can write data to this path.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;STDERR&lt;/strong&gt;:: standard error: process can write error diagnostic data to this path.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Exit status: numeric value that represents the final execution status of the process. In general:

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;0&lt;/code&gt;: successful execution&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;gt;0&lt;/code&gt;: failed execution. The app can assign different numbers to further describe the error.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Bash&lt;/strong&gt; provides the following features for interacting with processes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Variables: show process information

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;$?&lt;/code&gt;: exit status of the last executed command&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$BASHPID&lt;/code&gt;: PID of the current &lt;strong&gt;Bash&lt;/strong&gt; process&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Redirection: redirect the data flow from the STDIN, STDOUT, and STDERR&lt;/li&gt;
&lt;li&gt;Pipelines: integrate two processes by creating a pipe between the STDOUT from one to the STDIN of the other&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additional features are available but no covered in the current tutorial (jobs, signals, traps, parallelism, etc.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementing-functions"&gt;
  &lt;/a&gt;
  Implementing Functions
&lt;/h2&gt;

&lt;p&gt;To declare a function in Bash use the following structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &amp;lt;FUNCTION_NAME&amp;gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &amp;lt;COMMANDS&amp;gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &amp;lt;EXIT_STATUS&amp;gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Functions in Bash behave in a similar way to scripts and commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Can be called directly from the script or command line&lt;/li&gt;
&lt;li&gt;Use positional parameters that are automatically assigned to &lt;code&gt;$N&lt;/code&gt; variables&lt;/li&gt;
&lt;li&gt;Have exit status&lt;/li&gt;
&lt;li&gt;Can send data to STDOUT and STDERR&lt;/li&gt;
&lt;li&gt;Can receive data from STDIN&lt;/li&gt;
&lt;li&gt;Can be used in complex command sequences (&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's create a function with all the concepts seen so far:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;readonly &lt;/span&gt;&lt;span class="nv"&gt;TEST_READONLY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'content of this variable is constant and can not be modified afterwords'&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;TEST_EXPORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'content of this variable is visible everywhere'&lt;/span&gt;
&lt;span class="nb"&gt;declare &lt;/span&gt;&lt;span class="nv"&gt;test_declare&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'this variable is declared at the script level'&lt;/span&gt;
&lt;span class="nb"&gt;declare&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="nv"&gt;function_result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0

&lt;span class="k"&gt;function &lt;/span&gt;test_function&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;test_parameter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;test_parameter_default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;2&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="nv"&gt;default&lt;/span&gt;&lt;span class="p"&gt;-value&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;test_local&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'this variable is available only inside this function'&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;test_static&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;  &lt;span class="c"&gt;# initialize a static variable&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;test_dynamic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt; &lt;span class="c"&gt;# initialize a dynamic variable&lt;/span&gt;

  &lt;span class="nv"&gt;test_static&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'this variable has static content'&lt;/span&gt;
  &lt;span class="nv"&gt;test_dynamic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'this dynamic variable is assigned at execution time'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'Show variable content from inside a function:\n\n'&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'  first parameter: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test_parameter&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'  second parameter, default value: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test_parameter_default&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'  local static variable: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test_static&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'  local dynamic variable: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test_dynamic&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'  exported variable: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TEST_EXPORT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'  readonly variable: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TEST_READONLY&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'  declared variable: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test_declare&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  &lt;span class="k"&gt;return &lt;/span&gt;5

&lt;span class="o"&gt;}&lt;/span&gt;

test_function &lt;span class="s1"&gt;'this value is assigned to the first parameter'&lt;/span&gt;
&lt;span class="nv"&gt;function_result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;

&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'\nShow the same variables but outside the function:\n\n'&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'  local variable: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test_local&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'  local static variable: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test_static&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'  local dynamic variable: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test_dynamic&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'  exported variable: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TEST_EXPORT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'  readonly variable: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TEST_READONLY&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'  declared variable: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;test_declare&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'\nShow the exit status (return value) of the function: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;function_result&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'\nShow current PID of the Bash run-time: [%s]\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASHPID&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;Continue reading the second part of the tutorial: &lt;a href="https://dev.to/serdigital64/bash-scripting-concepts-part-2-of-2-3j0f"&gt;Bash Scripting Concepts: Part 2 of 2&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#copyright-information"&gt;
  &lt;/a&gt;
  Copyright information
&lt;/h2&gt;

&lt;p&gt;This article is licensed under a &lt;a href="http://creativecommons.org/licenses/by/4.0/"&gt;Creative Commons Attribution 4.0 International License&lt;/a&gt;. For copyright information on the product or products mentioned inhere refer to their respective owner.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;p&gt;Opinions presented in this article are personal and belong solely to me, and do not represent people or organizations associated with me in a professional or personal way. All the information on this site is provided "as is" with no guarantee of completeness, accuracy or the results obtained from the use of this information.&lt;/p&gt;

</description>
      <category>bash</category>
    </item>
    <item>
      <title>How to use MongoDB locally with VS Code</title>
      <author>Michael Hungbo</author>
      <pubDate>Wed, 22 Dec 2021 02:59:17 +0000</pubDate>
      <link>https://dev.to/heymich/how-to-use-mongodb-locally-with-vs-code-jgm</link>
      <guid>https://dev.to/heymich/how-to-use-mongodb-locally-with-vs-code-jgm</guid>
      <description>&lt;p&gt;Recently, a friend asked me if it's possible to work with their MongoDB databases and Atlas clusters locally without the internet and my answer to that was yes. So, I decided to create a guide to show them how and any other persons who might want to test their collections and perform all kinds of database operations with their MongoDB database using VS Code as the editor.&lt;/p&gt;

&lt;p&gt;Installing the MongoDB Community Server Edition allows us to host MongoDB databases locally unlike Atlas which is a cloud hosted database option. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#download-and-install-mongodb-community-server-edition-50"&gt;
  &lt;/a&gt;
  Download and Install MongoDB Community Server Edition 5.0
&lt;/h3&gt;

&lt;p&gt;Visit the download &lt;a href="https://docs.mongodb.com/manual/administration/install-community/"&gt;website&lt;/a&gt; to download and install MongoDB Community Edition for your OS. You can follow this guide to install MongoDB for Windows OS but the process is pretty much the same for other OS.&lt;br&gt;
For Windows, you can download the &lt;code&gt;.msi&lt;/code&gt; installation file &lt;a href="https://www.mongodb.com/try/download/community?tck=docs_server&amp;amp;_ga=2.236173761.1153293086.1639815683-1594733346.1639815683"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The download page should look something like below:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_FYszJBx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idcras0bnyadefokil39.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_FYszJBx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idcras0bnyadefokil39.png" alt="MongoDB Installation Page" width="880" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Run the downloaded installer&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choose &lt;code&gt;Custom&lt;/code&gt; when prompted for the installation type&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At the &lt;code&gt;Service Configuration&lt;/code&gt; pane, select *&lt;em&gt;Install MongoDB as a Service *&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#install-the-mongodb-extension-for-vs-code"&gt;
  &lt;/a&gt;
  Install the MongoDB extension for VS Code
&lt;/h3&gt;

&lt;p&gt;The MongoDB extension for VS Code allows us to create playgrounds to interact and perform query operations on our data and collections and giving us the results on the fly at the click of a button (which is supercool!).&lt;br&gt;
To install, open the extension tab on VS Code and search for &lt;code&gt;MongoDB for VS Code&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The extension looks something like below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kl5ZBwRX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6kdx6j3tccqqfuw646o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kl5ZBwRX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6kdx6j3tccqqfuw646o.png" alt="MongoDB VS Code extension" width="880" height="325"&gt;&lt;/a&gt;&lt;br&gt;
As you can see, it's already installed for me so you can just go ahead and install it.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#connect-to-a-mongodb-deployment"&gt;
  &lt;/a&gt;
  Connect to a MongoDB deployment
&lt;/h3&gt;

&lt;p&gt;In VS Code, open the MongoDB interactive panel by clicking on the leaf icon on the left sidebar menu, then click on create a connection to connect to a database instance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m51UPu5S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whlwdjvok3ikddcmh23v.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m51UPu5S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whlwdjvok3ikddcmh23v.jpg" alt="MongoDB VS Code Panel" width="880" height="401"&gt;&lt;/a&gt;&lt;br&gt;
Note: To connect to a deployment using a &lt;code&gt;connection string&lt;/code&gt;, you must have a MongoDB cluster running on your machine or have one in the cloud using Atlas. We'll create one for this guide in a moment.&lt;/p&gt;

&lt;p&gt;An example connection string for a local deployment looks like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uE9Nd2YE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bad9n0409gk2i5wwv0lw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uE9Nd2YE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bad9n0409gk2i5wwv0lw.png" alt="MongoDB VS Code successful connection" width="405" height="57"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;localhost&lt;/strong&gt;: specifies our host&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;27017&lt;/strong&gt;: the default port used by mongodb&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;myDatabase&lt;/strong&gt;: is the name of our local database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To create a sample database named &lt;code&gt;myDatabase&lt;/code&gt; locally, we can either use &lt;code&gt;MongoDB Compass&lt;/code&gt;, a graphical interface for working with databases or &lt;code&gt;mongosh&lt;/code&gt; (Mongo Shell). For this guide, we'll use mongosh.&lt;/p&gt;

&lt;p&gt;Note: You can also connect to a cloud database instance, for example, a MongoDB Atlas cluster.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#download-and-install-mongosh"&gt;
  &lt;/a&gt;
  Download and install Mongosh
&lt;/h3&gt;

&lt;p&gt;Mongosh (MongoDB Shell) is a JavaScript REPL command line tool for interacting with MongoDB offline and online deployments. What this means is that it allows us to run valid JS code right in the command line to query your database. You can download and install Mongosh &lt;a href="https://docs.mongodb.com/mongodb-shell/install/#std-label-mdb-shell-install"&gt;here&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;On successful installation, you should see this panel:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jZ2L6suw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lllt96wy7tljje399e4g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jZ2L6suw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lllt96wy7tljje399e4g.png" alt="Mongo Shell" width="252" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, open command prompt on windows and type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; mongosh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should get the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Current Mongosh Log ID: 61bfbc4837f8722b10f9e21e
Connecting to:          mongodb://127.0.0.1:27017/?directConnection&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&amp;amp;serverSelectionTimeoutMS&lt;span class="o"&gt;=&lt;/span&gt;2000
Using MongoDB:          5.0.5
Using Mongosh:          1.1.7

For mongosh info see: https://docs.mongodb.com/mongodb-shell/

&lt;span class="nt"&gt;------&lt;/span&gt;
   The server generated these startup warnings when booting:
   2021-12-18T10:24:36.928-08:00: Access control is not enabled &lt;span class="k"&gt;for &lt;/span&gt;the database. Read and write access to data and configuration is unrestricted
&lt;span class="nt"&gt;------&lt;/span&gt;

&lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;test&lt;/code&gt; shown at the bottom of the result is the default database created for us by mongosh. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To Create a new database, run the following command on the cmd:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;use myDatabase
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This automatically creates a new database called &lt;code&gt;myDatabase&lt;/code&gt; for us. Which returns:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; use myDatabase
switched to db myDatabase

myDatabase&amp;gt;   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#great-now-lets-connect"&gt;
  &lt;/a&gt;
  Great. Now, let's connect
&lt;/h3&gt;

&lt;p&gt;Remember the connection string we talked about earlier? Good. We're going to use that on VS Code to connect to our newly created database.&lt;br&gt;
The connection string for our database will be: &lt;code&gt;mongodb://localhost:27017/myDatabase&lt;/code&gt;, paste this in the text bar at the top of the window, that is, step 3 in the diagram below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GOWXCHfV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2x584se5r7hpfk9lhz8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GOWXCHfV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2x584se5r7hpfk9lhz8.jpg" alt="Connection String" width="880" height="401"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Upon a successful connection, you should see the following changes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XdvuUt84--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e96r2t1hdaem7nx4awuz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XdvuUt84--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e96r2t1hdaem7nx4awuz.jpg" alt="MongoDB connected in VS Code" width="880" height="400"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Congratulations! You have just created a local MongoDB database and connected to it from VS Code, successfully!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#play-with-your-database"&gt;
  &lt;/a&gt;
  Play with your database
&lt;/h3&gt;

&lt;p&gt;To perform queries and other database operations on our new database, we can create a &lt;code&gt;Playground&lt;/code&gt; in VS Code to do these.&lt;/p&gt;

&lt;p&gt;Click on the green &lt;code&gt;create playground&lt;/code&gt; button in VS Code to create a playground.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OoTrsIz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z9iu0gv3aja49xurf4pk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OoTrsIz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z9iu0gv3aja49xurf4pk.jpg" alt="MongoDB Playground" width="880" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your newly opened editor tab should look like below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FtZKng_M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gdh8vutko9levek5w282.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FtZKng_M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gdh8vutko9levek5w282.jpg" alt="MongoDB Playground" width="880" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Delete the content in the default template and paste the following to test our &lt;code&gt;myDatabase&lt;/code&gt; database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Select the database to use&lt;/span&gt;
&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myDatabase&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Insert a few documents in the continents collection&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;continents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertMany&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;africa&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nigeria&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;asia&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;India&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;southAmerica&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Colombia&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="c1"&gt;// Return all the fields in the continents collection&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;continents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Write other queries and operations ...&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Click on the play button at the top-right side to run the code. A new panel should be opened with our results like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5DhQyaVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ieymsciubm173tegz0mf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5DhQyaVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ieymsciubm173tegz0mf.png" alt="Results pane" width="880" height="401"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#congratulations-you-made-it"&gt;
  &lt;/a&gt;
  Congratulations, you made it!
&lt;/h3&gt;

&lt;p&gt;There you have it. Now you can work with your MongoDB databases locally using VS Code, perform database operations and see the results on the fly! Isn't that awesome? Yeah, it is.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.mongodb.com/mongodb-vscode/"&gt;MongoDB for VS Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.mongodb.com/mongodb-vscode/connect/"&gt;Connecting to your MongoDB deployment&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#follow-me-for-more-content-on-javascript-and-react"&gt;
  &lt;/a&gt;
  Follow me for more content on JavaScript and React!
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#you-can-also-say-hi-on-twitter"&gt;
  &lt;/a&gt;
  You can also say hi on &lt;a href="https://twitter.com/michaelhungbo"&gt;Twitter&lt;/a&gt; 🙂
&lt;/h3&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>database</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>5 online resources you didn't know you needed </title>
      <author>Kris Krazy</author>
      <pubDate>Wed, 22 Dec 2021 02:30:29 +0000</pubDate>
      <link>https://dev.to/krisxkrazy/5-online-resources-you-didnt-know-you-needed-2kj7</link>
      <guid>https://dev.to/krisxkrazy/5-online-resources-you-didnt-know-you-needed-2kj7</guid>
      <description>&lt;h4&gt;
  &lt;a href="#1-emaildrop"&gt;
  &lt;/a&gt;
  &lt;strong&gt;#1 Emaildrop&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Assuming you are like me and tired of the constant spam, and marketing emails here's a solution. Emaildrop.com servers a temporary online inbox. You just open the url and without signing up for anything it drops you in a inbox. You then give spam sites, and other sites you don't want to have personal info this address. You will receive mail in your browser to this address until you hit random/custom to change the the link to your inbox. Check out emaildrop.com below!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.emaildrop.io/"&gt;https://www.emaildrop.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--esnHdb1N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0mn0b70ttx99l5ulay6n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--esnHdb1N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0mn0b70ttx99l5ulay6n.jpg" alt="Image description" width="612" height="408"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-123movies"&gt;
  &lt;/a&gt;
  &lt;strong&gt;#2 123Movies&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;As a lot of us busy quite often we rarely get time away from craft. However 123movies brings a large catalog of old, new, and still in theater movies to watch on demand. No sign up, no hassle. The best part is. It's free. free, free free free.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ww5.0123movie.net/home.html"&gt;https://ww5.0123movie.net/home.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I95ltWMW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/btj1jeqk3frd540wajo1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I95ltWMW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/btj1jeqk3frd540wajo1.jpg" alt="Image description" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-claritus"&gt;
  &lt;/a&gt;
  &lt;strong&gt;#3 Claritus&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Tracking your net worth, is never a easy/inexpensive task. Well actually it is. With claritus you can freely track your net worth in one free UI. It can sync with your bank accounts including paypal and cash app. Store the worth of assets, and cryptocurrency. It is very easy to catalog transactions through the website, a over all straightforward process.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://claritus.io"&gt;https://claritus.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MKZKJxeE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uls08i98ua2in6crwpoy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MKZKJxeE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uls08i98ua2in6crwpoy.jpg" alt="Image description" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-skillshare"&gt;
  &lt;/a&gt;
  &lt;strong&gt;#4 Skillshare&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Imagine if you had your music prodigy friend as a on demand tutor to teach you lesson by lesson when you are ready. Well this is the foundation skillshare is built upon. Skillshare allows you to spend time learning all types of skills from advanced people working in those fields. The courses are their for you to pick up at any time, and totally to be completed at whatever pace you feel like. Skillshare may be the only payed item on this list with a starter subscription coming in at $13.99 a month billed $168 annually. However I do believe that skillshare has the potential to add great value to your life, by helping you to refine skills you already had, and dabble in skills you have never had the chance to. Also feel free to start your own course and earn a % of your viewers.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.skillshare.com/"&gt;https://www.skillshare.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bJaUzIL6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88snivrrl0n6uju971i1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bJaUzIL6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88snivrrl0n6uju971i1.jpg" alt="Image description" width="694" height="296"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-fiverr"&gt;
  &lt;/a&gt;
  &lt;strong&gt;#5 Fiverr&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Their are a tremendous amount of good online side hustles. However I'd have to say that fiverr ranks above quite a lot of them. Fiverr is a website where you can setup and sell numerous different things, from something as simple as file conversion, to building a website, or discord bot for someone. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.fiverr.com"&gt;https://www.fiverr.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mERWJGgp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rks2rgn05xe5ct3uwzuj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mERWJGgp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rks2rgn05xe5ct3uwzuj.jpg" alt="Image description" width="750" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#hope-you-enjoyed"&gt;
  &lt;/a&gt;
  Hope You Enjoyed!!!
&lt;/h5&gt;

&lt;p&gt;feel free to add other resources that would fit on this list in the comments, and maybe I will make a pt. 2&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ulDtlosp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwttiyrlf8fw3iaua1em.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ulDtlosp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwttiyrlf8fw3iaua1em.gif" alt="Image description" width="480" height="278"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>news</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Tutorial Android Studio: Agregar Notificaciones de firebase</title>
      <author>Rodrigo Garcia Trejo</author>
      <pubDate>Wed, 22 Dec 2021 01:11:16 +0000</pubDate>
      <link>https://dev.to/fynio/tutorial-android-studio-agregar-notificaciones-de-firebase-4klb</link>
      <guid>https://dev.to/fynio/tutorial-android-studio-agregar-notificaciones-de-firebase-4klb</guid>
      <description>&lt;h1&gt;
  &lt;a href="#bienvenidos-a-un-nuevo-tutorial"&gt;
  &lt;/a&gt;
  Bienvenidos a un nuevo tutorial
&lt;/h1&gt;

&lt;p&gt;En esta ocasión les enseñare a agregar notificaciones utilizando firebase en android studio paso a paso:&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#firebase"&gt;
  &lt;/a&gt;
  firebase
&lt;/h1&gt;

&lt;p&gt;Primero necesitamos un proyecto en firebase para eso iremos a su página web llamada firebase console &lt;a href="https://console.firebase.google.com/u/0/"&gt;click aquí&lt;/a&gt; y creamos un nuevo proyecto y le asignamos un nombre&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qjSM8qOk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3egfvd2d56w0azdnunfw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qjSM8qOk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3egfvd2d56w0azdnunfw.jpg" alt="Creando proyecto" width="880" height="451"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Después agregaremos una app a nuestro proyecto creado tipo android &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HesDRM11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxoi2817j2sjjg04x9mg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HesDRM11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxoi2817j2sjjg04x9mg.png" alt="Android" width="880" height="511"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Después de seleccionar la opción Android debemos de agregar el nombre de nuestro proyecto y si desean pueden poner un nombre a tu proyecto.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RhKvqRoQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9w4bcogwys2ltqp02v61.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RhKvqRoQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9w4bcogwys2ltqp02v61.png" alt="Ingresando un nombre" width="880" height="433"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Descargamos el archivo google.service.json y lo agregamos en nuestra aplicacion en la carpeta app para eso debemos seleccionar la opcion de ver Project  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DiHF8rS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ln4l965zrfh6se6z1os.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DiHF8rS0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ln4l965zrfh6se6z1os.png" alt="googlse service json" width="880" height="432"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En la misma carpeta App en el archivo build.gradle agregamos dos apply&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Quedando de la siguiente manera&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v43PJoTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1blumjg9spr66qanctte.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v43PJoTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1blumjg9spr66qanctte.png" alt="Agregando Apply Apply" width="880" height="371"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En la sección de dependencias del mismo archivo build_gradle &lt;br&gt;
agregamos lo siguiente:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    implementation platform('com.google.firebase:firebase-bom:29.0.1')
    implementation 'com.google.firebase:firebase-bom:29.0.1'
    implementation 'com.google.firebase:firebase-messaging:23.0.0'
    implementation 'com.google.firebase:firebase-analytics'

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Quedando de la siguiente manera&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OulICfld--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfo9l9ywf8r49pl9u2qd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OulICfld--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfo9l9ywf8r49pl9u2qd.png" alt="implements" width="880" height="391"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Y le damos en sincronizar.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#myfirebasemessagingservice"&gt;
  &lt;/a&gt;
  MyFirebaseMessagingService
&lt;/h1&gt;

&lt;p&gt;Cambiaremos de vista de &lt;strong&gt;Project&lt;/strong&gt; a &lt;strong&gt;Android&lt;/strong&gt; y creamos una Java Class llamada &lt;strong&gt;MyFirebaseMessagingService&lt;/strong&gt; e ingresamos el siguiente código.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.example.administracionsedecohidalgo;

import com.google.firebase.messaging.FirebaseMessagingService;

public class MyFirebaseMessagingService extends FirebaseMessagingService {

    private static final String TAG = "MyFirebaseMsgService";


}


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Quedando de la siguiente manera:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A78n6RaA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqaoti745j7cuvayjnr0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A78n6RaA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqaoti745j7cuvayjnr0.png" alt="MyFirebaseMessagingService" width="880" height="311"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#androidmanifestxml"&gt;
  &lt;/a&gt;
  AndroidManifest.xml
&lt;/h1&gt;

&lt;p&gt;En este archivo &lt;strong&gt;AndroidManifest.xml&lt;/strong&gt; agregaremos permisos de Internet debajo de donde aparece la etiqueta &lt;strong&gt;package&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;uses-permission android:name="android.permission.INTERNET" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Quedando el código de la siguiente manera:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4uM7CsSN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yycjrp7c8hs14dzgl8ar.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4uM7CsSN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yycjrp7c8hs14dzgl8ar.png" alt="8" width="822" height="290"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En la etiqueta &lt;strong&gt;&amp;lt;application&lt;/strong&gt; agregamos 2 etiquetas Meta-data&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;meta-data
       android:name="firebase_messaging_auto_init_enabled"
       android:value="false" /&amp;gt;
 &amp;lt;meta-data
       android:name="firebase_analytics_collection_enabled"
       android:value="false" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Quedando de la siguiente manera:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SLPEVT-y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymq9gpq7lf9g49vid0d0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SLPEVT-y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymq9gpq7lf9g49vid0d0.png" alt="9" width="844" height="416"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Antes de cerrar la etiqueta &lt;strong&gt;&lt;/strong&gt; agregamos el siguiente código el cual manda llamar la clase MyFirebaseMessagingService que creamos anteriormente:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        &amp;lt;service
            android:name=".MyFirebaseMessagingService"
            android:exported="false"&amp;gt;
            &amp;lt;intent-filter&amp;gt;
                &amp;lt;action android:name="com.google.firebase.MESSAGING_EVENT" /&amp;gt;
            &amp;lt;/intent-filter&amp;gt;
        &amp;lt;/service&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1u8aEMOI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/at1xd4gkd7hzmy95rzsw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1u8aEMOI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/at1xd4gkd7hzmy95rzsw.png" alt="10" width="880" height="363"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Eso es todo lo que tenemos que agregar en nuestra aplicación de Android studio. Solo nos resta ir a firabase en la sección Cloud Messaging  y en la opción &lt;strong&gt;Send your first message&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ihoodu-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p1l1gns9cny2e367nc9r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ihoodu-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p1l1gns9cny2e367nc9r.png" alt="11" width="880" height="445"&gt;&lt;/a&gt;&lt;br&gt;
Al darle clic nos mostrará una ventana para redactar la notificación&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A1cUU7np--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wnbyw3s5src7upo27r0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A1cUU7np--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wnbyw3s5src7upo27r0.png" alt="12" width="880" height="588"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Entonces escribimos un titulo y texto que queramos agregar y le damos en siguiente.&lt;/p&gt;

&lt;p&gt;Posteriormente selecciona la aplicación que hemos creado en firabase y le damos en siguiente&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W-bLkamM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9cg2dxd3uibf0eweye4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W-bLkamM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9cg2dxd3uibf0eweye4.png" alt="13" width="880" height="592"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Todos los demás campos de los siguientes pasos los dejaremos como están solo daremos siguiente, siguiente, hasta llegar al ultimo paso &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N8PpQ8ED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6pbl3agqomlxaib55gc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N8PpQ8ED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6pbl3agqomlxaib55gc.png" alt="14" width="880" height="559"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Damos clic en revisar &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7ZewqpK8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/487kblequgtrtuo84aau.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7ZewqpK8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/487kblequgtrtuo84aau.png" alt="15" width="880" height="568"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Y en publicar&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--phl60zJG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6w77d00i87dzthn96gh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--phl60zJG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6w77d00i87dzthn96gh.png" alt="16" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#eso-es-todo"&gt;
  &lt;/a&gt;
  ESO ES TODO!!
&lt;/h1&gt;

&lt;p&gt;Nos tiene que llegar una notificación en nuestro celular.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AI8t7B5H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d233agpexu45ze1quqwg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AI8t7B5H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d233agpexu45ze1quqwg.png" alt="17" width="540" height="1170"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#si-todo-te-sali%C3%B3-bien-reg%C3%A1lame-un-like"&gt;
  &lt;/a&gt;
  Si todo te salió bien regálame un like
&lt;/h2&gt;

</description>
      <category>firebase</category>
      <category>android</category>
      <category>minitutorial</category>
      <category>espanol</category>
    </item>
    <item>
      <title>100 días de código: 49, mongoDB university como meta intermedia.</title>
      <author>Daro</author>
      <pubDate>Wed, 22 Dec 2021 00:31:27 +0000</pubDate>
      <link>https://dev.to/darito/100-dias-de-codigo-49-mongodb-university-como-meta-intermedia-57c7</link>
      <guid>https://dev.to/darito/100-dias-de-codigo-49-mongodb-university-como-meta-intermedia-57c7</guid>
      <description>&lt;p&gt;Foto de &lt;a href="https://unsplash.com/@morgane_lb?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Morgane Le Breton&lt;/a&gt; en &lt;a href="https://unsplash.com/s/photos/chrismas?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¡Hey hey hey!&lt;/p&gt;

&lt;p&gt;Bienvenidos a este día 49 del reto en el cual me siento muy cerca del numero 50 y como diría patricio, casi puedo saborearlo.&lt;/p&gt;

&lt;p&gt;Al aspirar a convertirte en un desarrollador full stack un tema que es bastante recurrente es el manejo de las bases de datos. Creo que es un pilar fundamental de cualquier desarrollador ya que te permite crear, leer, actualizar y borrar datos en tus aplicaciones  de manera persistente.&lt;/p&gt;

&lt;p&gt;Cuando comienzas a entrar en el mundo de bases de datos te das cuenta de un gran poder conlleva una gran responsabilidad como diría nuestro querido amigo Spiderman (que por cierto, la película nueva es muy buena &lt;br&gt;
¿ustedes que opinan?). &lt;/p&gt;

&lt;p&gt;Volviendo al tema, existen dos tipos principales de bases de datos: SQL y NoSQL, estas te permiten administrar datos para tus aplicaciones. De las SQL destacamos que son bases de datos organizadas en tablas con campos específicos que te permiten definir desde el primer momento que tipo de datos tendra cada una de las entradas. &lt;/p&gt;

&lt;p&gt;Por otro lado tenemos las NoSQL que, aunque lo niegan en el nombre, tienen similitudes con las anteriormente mencionadas, son bases de datos basadas en documentos y, aunque una buena recomendación es decidir una estructura en la que estarán basadas las entradas, se puede omitir y crear documentos totalmente distintos (que obviamente no es algo muy recomendado). &lt;br&gt;
Muchas personas las comparan con un libro donde cada pagina de este seria un registro que puede tener la misma estructura o no y se encuentran enlazados entre ellos.&lt;/p&gt;

&lt;p&gt;De estas ultimas existe un tipo de bases de datos llamado MongoDB la cual es muy usada y que recomiendo si comienzas en el mundo de bases de datos sobre todo porque ofrece una guia o &lt;a href="https://university.mongodb.com/"&gt;universidad&lt;/a&gt; que te permite aprender de una forma mas sencilla.&lt;/p&gt;

&lt;p&gt;Yo la he tomado hace poco tiempo y puedo decirte que en unos cuantos días puedes dominar MongoDB bastante bien. Sin embargo, hacen mucho uso de la terminal en el curso por lo que no te preocupes si te toma mas tiempo al no estar acostumbrado/a ello.&lt;/p&gt;

&lt;p&gt;Ahora si sigamos con la sección regular del reto:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%C3%BAltimos-d%C3%ADas"&gt;
  &lt;/a&gt;
  Últimos días:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Como estaba aprendiendo cosas que ya había consultado anteriormente decidí saltarme a la sección de Nodejs en The Odin Project aunque se que tarde que temprano volveré a las lecciones anteriores. &lt;/li&gt;
&lt;li&gt;Practique 20 min de Touch Typing todos los días.&lt;/li&gt;
&lt;li&gt;Comencé a diseñar algunas secciones nuevas de mi pagina personal porque no terminaba de convencerme.&lt;/li&gt;
&lt;li&gt;Hice algunos ejercicios en Hacker rank.&lt;/li&gt;
&lt;li&gt;Y sobre todo aprendí un montón en la universidad de MongoDB.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#hoy"&gt;
  &lt;/a&gt;
  Hoy:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Complete el capitulo 5 de la universidad de MongoDB.&lt;/li&gt;
&lt;li&gt;Practique 30 min de Touch Typing.&lt;/li&gt;
&lt;li&gt;Avance con el diseño de mi pagina.&lt;/li&gt;
&lt;li&gt;Planifique la semana.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Siento que me estoy apresurando demasiado al adquirir conocimientos ya que me llevo solo 2 días y casi termino el curso de la universidad de MongoDB. Debo bajar el ritmo y ademas se vienen las fiestas navideñas asi que a lo mejor me tomo un par de días de descanso. &lt;/p&gt;

&lt;p&gt;Espero que tengan mucho éxito con sus proyectos. Sonrían y no olviden tomarse algo de tiempo libre para si mismos.&lt;/p&gt;

&lt;p&gt;Adiós mundo!&lt;/p&gt;

</description>
      <category>spanish</category>
      <category>100daysofcode</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to apply filters to images with Python</title>
      <author>Juan Benitez </author>
      <pubDate>Wed, 22 Dec 2021 00:01:44 +0000</pubDate>
      <link>https://dev.to/juanbenitezdev/how-to-apply-filters-to-images-with-python-3p8e</link>
      <guid>https://dev.to/juanbenitezdev/how-to-apply-filters-to-images-with-python-3p8e</guid>
      <description>&lt;p&gt;A few weeks ago, we received a new ticket: &lt;em&gt;“Users want to be able to apply filters to their pictures”&lt;/em&gt;, yes, something like Instagram does. We immediately thought about the Lightroom API, but after some research, we came to the conclusion that it doesn’t quite meet our needs. We were searching for something like a library, where we can just load the image, apply the filters and then save the new image with the filters applied, since we couldn’t find it we decided to build one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fimage"&gt;
  &lt;/a&gt;
  FImage
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/jordandjp/fimage"&gt;FImage&lt;/a&gt;&lt;/strong&gt; is a Python module to apply and create multiple filters to images, it exposes an API that you can use for applying the different color transformations to the images. It works by converting the image to an RGB matrix and applying different math formulas to it. We used &lt;a href="https://numpy.org/"&gt;NumPy&lt;/a&gt; for all the matrix operations since it is faster and optimized, and &lt;a href="https://pillow.readthedocs.io/en/stable/"&gt;Pillow&lt;/a&gt; for handling the loading and saving of the images.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-it"&gt;
  &lt;/a&gt;
  How to use it?
&lt;/h2&gt;

&lt;p&gt;First, we need to install it, for this you need to be using Python 3.6 or greater to be able to use &lt;strong&gt;FImage&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;fimage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And for these examples, I’m gonna use this picture to apply it filters:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zeWRvnBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fjk44oa9ycowudgaf6fb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zeWRvnBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fjk44oa9ycowudgaf6fb.jpg" alt="my_picture.jpg" width="500" height="750"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#applying-a-simple-filter"&gt;
  &lt;/a&gt;
  Applying a simple filter
&lt;/h3&gt;

&lt;p&gt;Create a file &lt;code&gt;app.py&lt;/code&gt; with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fimage&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FImage&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fimage.filters&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Sepia&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# replace 'my_picture.jpg' with the path to your image
&lt;/span&gt;    &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'my_picture.jpg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# apply the Sepia filter to the image
&lt;/span&gt;    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Sepia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# save the image with the applied filter
&lt;/span&gt;    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'my_picture_sepia.jpg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, just run it :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is how the new image &lt;code&gt;my_picture_sepia.jpg&lt;/code&gt; looks like after the filter was applied.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C9K_GOZe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjf09bxcipgbbjwuw9jv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C9K_GOZe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjf09bxcipgbbjwuw9jv.jpg" alt="my_picture_sepia.jpg" width="500" height="750"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#applying-multiple-filters"&gt;
  &lt;/a&gt;
  Applying multiple filters
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;FImage&lt;/strong&gt; offers more filters besides the Sepia one, even you can combine multiples filters to give a better look to your picture.&lt;/p&gt;

&lt;p&gt;Modify the file &lt;code&gt;app.py&lt;/code&gt; to import more filters from FImage&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fimage&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FImage&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fimage.filters&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Contrast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Brightness&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Saturation&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'my_picture.jpg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# apply the mutiple filters to the image
&lt;/span&gt;    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;Saturation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;Contrast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;Brightness&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# save the image with the applied filter
&lt;/span&gt;    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'my_picture_mixed.jpg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We run it by&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And our new &lt;code&gt;my_picture_mixed.jpg&lt;/code&gt; looks like&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jUllRXdm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5i3tn210bvuyf8z7lqff.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jUllRXdm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5i3tn210bvuyf8z7lqff.jpg" alt="my_picture_mixed.jpg" width="500" height="750"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The order in which the filters are passed to the &lt;code&gt;apply&lt;/code&gt; function matters, this is because the filters are applied sequentially, so the next filter will be applied over the resultant image from the previous one.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#presets"&gt;
  &lt;/a&gt;
  Presets
&lt;/h3&gt;

&lt;p&gt;Presets are just the combinations of multiple filters with already defined adjustment values.&lt;/p&gt;

&lt;p&gt;Let’s change our &lt;code&gt;app.py&lt;/code&gt; one more time to use the Presets&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fimage&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FImage&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fimage.presets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SinCity&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# replace 'my_picture.jpg' with the path to your image
&lt;/span&gt;    &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'my_picture.jpg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# apply the SinCity preset to the image
&lt;/span&gt;    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SinCity&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c1"&gt;# save the image with the applied preset
&lt;/span&gt;    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'my_picture_sincity.jpg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After we run it, we get our new &lt;code&gt;my_picture_sincity.jpg&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jnU18-ed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7e1azi4djosxguuq4r3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jnU18-ed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7e1azi4djosxguuq4r3.jpg" alt="my_picture_sincity.jpg" width="500" height="750"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#custom-presets"&gt;
  &lt;/a&gt;
  Custom Presets
&lt;/h3&gt;

&lt;p&gt;If you like the look your picture got after testing different filters and want to store this combination for applying it to more pictures, you can create your own Preset by just extending the &lt;code&gt;Preset&lt;/code&gt; Class and specifying these filters and their adjust values in it.&lt;/p&gt;

&lt;p&gt;In our &lt;code&gt;app.py&lt;/code&gt; let’s do&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fimage&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FImage&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fimage.presets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Preset&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fimage.filters&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Contrast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Brightness&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Saturation&lt;/span&gt;


&lt;span class="c1"&gt;# Create my custom preset and specify the filters to apply
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyOwnPreset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Preset&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;transformations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;Contrast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;Saturation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;Brightness&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# replace 'my_picture.jpg' with the path to your image
&lt;/span&gt;    &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'my_picture.jpg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# apply MyOwnPreset to the image
&lt;/span&gt;    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyOwnPreset&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c1"&gt;# save the image with the applied preset
&lt;/span&gt;    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'my_picture_custom.jpg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The new &lt;code&gt;my_picture_custom.jpg&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ayIbxTji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mus16gejayn3a4i4ev1o.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ayIbxTji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mus16gejayn3a4i4ev1o.jpg" alt="my_picture_custom.jpg" width="500" height="750"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is basic usage of &lt;strong&gt;FImage&lt;/strong&gt;, we are still developing it, and it would be really great any feedback or contribution you have.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jordandjp/fimage"&gt;GitHub Repo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>opensource</category>
      <category>showdev</category>
    </item>
  </channel>
</rss>
