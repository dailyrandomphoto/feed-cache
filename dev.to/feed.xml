<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Git Commit Show by Invide #season03</title>
      <author>Saurabh Rai</author>
      <pubDate>Thu, 14 Oct 2021 15:29:32 +0000</pubDate>
      <link>https://dev.to/srbhr/git-commit-show-by-invide-season03-266p</link>
      <guid>https://dev.to/srbhr/git-commit-show-by-invide-season03-266p</guid>
      <description>&lt;p&gt;&lt;strong&gt;Allow us to introduce Git Commit Show üíª One of the Leading Online Tech Conferences of the year! Is now up for it‚Äôs 3rd Season. Book the dates: 27th and 28th November, 2021. (GMT+5:30)&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;Come join us, live and interact with üë®‚Äç‚öñÔ∏èIndustry Leaders üë©‚Äçüíº in Technologyüë©‚Äçüíª, Careerüéì, and Open SourceüìÄ, to gain gargantuan knowledge in the tech domain and beyond that! &lt;br&gt;
Join us over our &lt;a href="https://discord.gg/BWeENvyktD"&gt;discord&lt;/a&gt; &lt;a href="https://www.youtube.com/c/InvideDeveloperCommunity"&gt;Youtube&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>opensource</category>
      <category>productivity</category>
      <category>career</category>
    </item>
    <item>
      <title>The Joy of Contributing to Open Source</title>
      <author>Anish De</author>
      <pubDate>Thu, 14 Oct 2021 15:12:08 +0000</pubDate>
      <link>https://dev.to/anishde12020/the-joy-of-contributing-to-open-source-34gp</link>
      <guid>https://dev.to/anishde12020/the-joy-of-contributing-to-open-source-34gp</guid>
      <description>&lt;p&gt;Back in July of this year, I made a bold decision of completely switching to Pop OS (an ubuntu-based Linux distribution) and I was faced with many hurdles. One of these was an alternative to &lt;a href="https://www.microsoft.com/en-us/p/your-phone/9nmpj99vjbwv?activetab=pivot:overviewtab"&gt;Microsoft's Your Phone application&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;After some research, I stumbled over an application called &lt;a href="https://kdeconnect.kde.org/"&gt;KDE Connect&lt;/a&gt; which turned out to be a great alternative as it not only did everything that Microsoft's Your Phone application did but had some more nifty features.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#my-first-pull-request"&gt;
  &lt;/a&gt;
  My first pull request
&lt;/h1&gt;

&lt;p&gt;As Pop OS uses Cosmic (a fork of the popular GNOME desktop environment), I was better off using &lt;a href="https://extensions.gnome.org/extension/1319/gsconnect/"&gt;GSConnect&lt;/a&gt; instead of the native KDE Connect application. GSConnect is a fork of KDE Connect which integrates well with GNOME. Everything was good until I discovered a feature that allowed me to share the URL of my current tab to my phone. This needed me to download the &lt;a href="https://chrome.google.com/webstore/detail/gsconnect/jfnifeihccihocjbfcfhicmmgpjicaec"&gt;GSConnect chrome extension&lt;/a&gt; but I use Microsoft Edge as my primary web browser. Now, chrome extensions work on Microsoft Edge as it is chromium-based but the GSConnect chrome extension made use of a feature called &lt;a href="https://developer.chrome.com/docs/apps/nativeMessaging/"&gt;native messaging&lt;/a&gt; which helped the browser extension and a program installed on the computer interact with each other. Sadly, this needs dedicated configuration for each browser (it is just a line of code). GSConnect didn't have support for Microsoft Edge at that time and hence I decided to &lt;a href="https://github.com/GSConnect/gnome-shell-extension-gsconnect/issues/1139"&gt;open an issue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A collaborator got back to me and explained the issue to me. I was a bit stuck and so asked for more help on GitHub and the same person got back to me, giving me a place to start working on the issue. I quickly figured out the problem and fixed the issue on my end. The next step was to open a pull request so I cloned the repository, made the changes, pushed the code, and opened &lt;a href="https://github.com/GSConnect/gnome-shell-extension-gsconnect/pull/1141"&gt;my first ever pull request&lt;/a&gt;. I did mess up with the code style because I had forgotten to read the contributing guide and hence didn't run the linter checks. Anyways, a member got back to me and I fixed the problem and then my pull request was merged üéâ.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-joy-when-my-pull-request-got-merged"&gt;
  &lt;/a&gt;
  The joy when my pull request got merged
&lt;/h2&gt;

&lt;p&gt;As soon as I saw the notification that my pull request had been merged, I felt the joy of contributing to an application used by many people. This is the moment you realize that you are not working for nothing, you are getting happiness from helping others and you are learning a lot yourself. Contributing to open-source also adds to your portfolio, it shows that you care about the project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-learning"&gt;
  &lt;/a&gt;
  The learning
&lt;/h2&gt;

&lt;p&gt;When I opened the issue, I didn't know anything about native messaging in chrome extensions but from discovering this bug to fixing it, I learned a lot about how native messaging works and how open-source contributions work.&lt;/p&gt;

&lt;p&gt;I have talked about the perks of contributing to open-source in &lt;a href="https://blog.anishde.dev/open-source-in-everyday-life"&gt;my last article&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#getting-started-with-contributing-to-opensource"&gt;
  &lt;/a&gt;
  Getting Started with contributing to open-source
&lt;/h1&gt;

&lt;p&gt;It is not hard to experience the joy of contributing to open-source. Look for issues that you might want to work on and if you find one which you want to work on, it is as simple as making the changes and opening a pull request (make sure to follow the repository's contributing guide if it has one). Also, check out &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest&lt;/a&gt; where you open 4 &lt;strong&gt;valid&lt;/strong&gt; pull requests on participating repositories and if you are the first 50k to do so, you get some swag. Do check out &lt;a href="https://ayushirawat.com/beginners-guide-to-hacktoberfest-2021"&gt;this guide on getting started with Hacktoberfest&lt;/a&gt; by &lt;a href="https://twitter.com/notifications"&gt;Ayushi Rawat&lt;/a&gt; if you feel stuck.&lt;/p&gt;

&lt;p&gt;Feel free to comment down if you feel like I missed something or you got a question. You can also reach out to me on &lt;a href="https://twitter.com/AnishDe12020"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy contributing :D&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>hacktoberfest</category>
    </item>
    <item>
      <title>HarperDB in the Real World </title>
      <author>Margo McCabe</author>
      <pubDate>Thu, 14 Oct 2021 15:11:03 +0000</pubDate>
      <link>https://dev.to/harperdb/harperdb-in-the-real-world-4f84</link>
      <guid>https://dev.to/harperdb/harperdb-in-the-real-world-4f84</guid>
      <description>&lt;p&gt;By now you may be familiar with &lt;a href="https://harperdb.io/"&gt;HarperDB&lt;/a&gt; and how we‚Äôre different from &lt;a href="https://dev.to/harperdb/database-architectures-use-cases-explained-5711"&gt;other databases out there&lt;/a&gt;, but you might be wondering how folks are currently using HarperDB in real-world applications. Or, if you already have a database of choice that‚Äôs working well, you may be wondering why you would take the plunge to try something new. Fair enough! To provide some clarity, I‚Äôd like to share a few examples of how HarperDB is currently being used in production. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quotes-from-harperdb-users"&gt;
  &lt;/a&gt;
  Quotes from HarperDB Users
&lt;/h2&gt;

&lt;p&gt;"I‚Äôm planning to break out a Monolith and use HarperDB as my datasource for the Front End part of the Platform solution I‚Äôm refactoring. One of the main reasons for considering HarperDB, as a Solutions Architect, the amount of time that is required from DEV to PROD to setup is close to none and not to mention that it is easy to adopt it and start working towards a deliverable from Day 1. All of my PoC‚Äôs, for Front End, Middleware or BackEnd, use a local HarperDB instance to start off."&lt;br&gt;
-&lt;em&gt;Rick Limon, Framework Science, Mexico&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;‚ÄúI found out about HarperDB in a Tweet which mentioned how using Flutter with HarperDB was the ultimate combo and believe me they were not telling lies. I have used HarperDB for several projects now which has turned out great. I am currently using HarperDB to remake the Domino's pizza app for android and I can say for a fact everything has been running smooth as expected. I chose HarperDB because of their great response time and how easy it is to integrate due to the cloud functions, and on no occasion have I been let down or has anyone I referred given back a report contrary to what I told them HarperDB does. For that reason I stand with HarperDB‚Äù&lt;br&gt;
-&lt;em&gt;Collins, Nigeria&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;"We started looking at all the different databases that are scalable like Couchbase and a bunch of others, but we ended up focusing on HarperDB because of the flexibility... HarperDB scales beautifully; a containerized version of HarperDB tied to persistent storage allows me to scale HarperDB to meet my performance goals. The workload it can perform is amazing, and the ability to actually scale horizontally is amazing as well because it‚Äôs not typical for database engines.‚Äù&lt;br&gt;
-&lt;em&gt;Ron Lewis, Lumen Technologies, USA&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;‚ÄúI am a front end developer, currently the maintainer of an open source project... as a real time stream framework for geo-distributed system, we decide to use HarperDB as our database in scenarios of AI / IoT / Virtual Office.‚Äù&lt;br&gt;
-&lt;em&gt;Yona&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;‚ÄúI plan on using HarperDB for my side project (A web application for SCD NGOs). This will be used for the following sections: blog section of application, gallery section, other similar pages as well.‚Äù &lt;br&gt;
-&lt;em&gt;Emmanuel Kolawole, Estonia&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;‚ÄúWe are trying to improve our data processes, and I am excited to use HarperDB to store our data and plug it to Tableau dashboards!‚Äù &lt;br&gt;
-&lt;em&gt;James&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;‚ÄúHere are a few things from my journey with HarperDB:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I came to know about it from the &lt;a href="https://townhall.hashnode.com/harperdb-hashnode-hackathon-winners"&gt;Hashnode hackathon&lt;/a&gt;, I made an application where people send birthday wishes to a person and all of them are curated in a single place, &lt;a href="https://vishwall.vercel.app/vishwall/Nivetha/wishes"&gt;for example this&lt;/a&gt; these are some of the wishes my friend received, they are in a regional language (Tamil).&lt;/li&gt;
&lt;li&gt;Then I also made another application for good luck, I used to feel worried before job interviews, so I added a few quotes in the database, and decided to make &lt;a href="https://deepakr-28.github.io/wishyougoodluck/"&gt;this application&lt;/a&gt;, people can get some confidence boost here.&lt;/li&gt;
&lt;li&gt;Since the fetch operation is really easy in HarperDB, this is my go-to platform for storing access tokens for api's which should not be displayed in public, tokens that are refreshed with each session. HarperDB is really convenient, in my workplace we use Azure SQL mostly, but I use HarperDB for all the prototyping and testing. &lt;/li&gt;
&lt;li&gt;I liked Firebase too, but learning curve of HarperDB is smaller compared to Firebase, which is really cool.‚Äù&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-&lt;em&gt;Deepak Rawat, India&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;‚ÄúI am loving my experience with HarperDB so far, I am working on a number of GPS related projects as well as some PWA‚Äôs that are going to be utilizing HarperDB.‚Äù&lt;br&gt;
-&lt;em&gt;Jason, USA&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#case-studies"&gt;
  &lt;/a&gt;
  Case Studies
&lt;/h2&gt;

&lt;p&gt;In addition to quotes from devs in the community, I wanted to share a couple case studies where you can read about HarperDB projects in greater depth. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#us-army-accelerating-tactical-edge-with-harperdb"&gt;
  &lt;/a&gt;
  US Army: Accelerating Tactical Edge with HarperDB
&lt;/h4&gt;

&lt;p&gt;HarperDB has partnered with &lt;a href="https://www.command-cs.com/"&gt;Command Cyber Solutions&lt;/a&gt; to provide the Army with an innovative solution that will enhance the Army‚Äôs tactical edge and data orchestration capabilities. Command Cyber will leverage HarperDB to develop an edge-based analytics platform that can capture facial recognition data and distribute it to other HarperDB nodes for real-time alerting and detection.&lt;/p&gt;

&lt;p&gt;HarperDB will be deployed on the extreme edge, a mobile command center, and a server to not only collect and orchestrate data throughout the nodes, but also propagate rules engines and AI models from the command center to the edge to update logic and thresholds on the fly. This will allow the Army to adjust the priority level of the faces detected from the command center in case a high threat is found. In addition, priority levels of faces detected will be automatically upgraded when they are captured in high sensitivity areas.&lt;/p&gt;

&lt;p&gt;If interested, you can &lt;a href="https://harperdb.io/harperdb-army-case-study/"&gt;view and download the one-pager here&lt;/a&gt; to learn more about the Army case study.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#high-speed-data-monitoring-with-casne-engineering"&gt;
  &lt;/a&gt;
  High Speed Data Monitoring with Casne Engineering
&lt;/h4&gt;

&lt;p&gt;HarperDB and &lt;a href="https://casne.com/"&gt;Casne Engineering&lt;/a&gt; partnered to develop high performance data acquisition and in line analytics capabilities that enable organizations to capture sub-second data streams from industrial control systems like PLC‚Äôs and SCADA systems. The solution then filters out the massive amounts of irrelevant data at the edge, and forwards only the pertinent or anomaly data for use in OT historians and machine learning applications. &lt;/p&gt;

&lt;p&gt;This high frequency in-line analytics approach allows operators to gain actual real-time insights and detect anomalies that would normally be missed using traditional low frequency data collection techniques. HarperDB‚Äôs data management solution enables organizations to efficiently collect, process, and analyze data streams in conjunction with other unstructured data including machine vision, geospatial, and Internet data feeds. &lt;/p&gt;

&lt;p&gt;HarperDB and Casne recently completed a project for a client in the utilities / energy sector, where they were able to capture high resolution data to predict and prevent equipment failures and downtime with a single data management solution from plant to cloud. &lt;/p&gt;

&lt;p&gt;If interested, you can &lt;a href="https://harperdb.io/download-harperdb-casne-casestudy/"&gt;view and download the one-pager here&lt;/a&gt; to learn more about this case study.&lt;/p&gt;

&lt;p&gt;You can read about other industries that greatly benefit from high-performing, low-latency, geo-distributed databases like HarperDB in &lt;a href="https://dev.to/harperdb/industries-that-need-a-high-performing-low-latency-distributed-database-5cn4"&gt;this article&lt;/a&gt; as well. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#developer-examples-featured-projects"&gt;
  &lt;/a&gt;
  Developer Examples / Featured Projects
&lt;/h2&gt;

&lt;p&gt;Lastly, I thought it might be helpful to share a few tutorials and other resources where you can follow along to build cool things with HarperDB: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://harperdb.io/product/featured-projects/"&gt;Featured projects&lt;/a&gt; on our website&lt;/li&gt;
&lt;li&gt;All &lt;a href="https://hashnode.com/n/harperdbhackathon"&gt;Hashnode-HarperDB Hackathon project submissions&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLlgTMTKsypS7FCGm3jAzq6VppF8-AtzPh"&gt;Livestream / code along events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A few specific tutorials: 

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://blog.hrithwik.me/how-i-used-harperdb-custom-functions-to-build-a-web-app-for-my-newsletter"&gt;How I used HarperDB Custom Functions to build a web app for my newsletter&lt;/a&gt; by Hrithwik Bharadwaj&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://apoorvtyagi.tech/building-microservices-using-spring-boot-harperdb-and-deploying-it-on-aws"&gt;Building Microservices using Spring Boot + HarperDB and Deploying it on AWS&lt;/a&gt; by &lt;a class="mentioned-user" href="https://dev.to/apoorvtyagi"&gt;@apoorvtyagi&lt;/a&gt;
 &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://catalins.tech/build-a-rest-api-with-harperdb-and-fastifyjs"&gt;Build A REST API With HarperDB and FastifyJS&lt;/a&gt; by Catalin Pit&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/lordghostx/building-a-contact-manager-with-python-flask-and-harperdb-1h53"&gt;Building a Contact Manager with Python, Flask, and HarperDB&lt;/a&gt; by &lt;a class="mentioned-user" href="https://dev.to/lordghostx"&gt;@lordghostx&lt;/a&gt;
 &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://blog.greenroots.info/create-a-serverless-book-library-app-with-harperdb-and-gatsbyjs"&gt;Create a serverless book library app with HarperDB and Gatsbyjs&lt;/a&gt; by &lt;a class="mentioned-user" href="https://dev.to/atapas"&gt;@atapas&lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;So, what do you think, is there anything in here that piques your interest or at least helps to provide some clarity as to why and how folks are using HarperDB? What are your thoughts? &lt;/p&gt;

&lt;p&gt;If you‚Äôre currently working with HarperDB, we‚Äôd love to hear from you! Share a bit about your project or experience in the comments below.&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>showdev</category>
      <category>programming</category>
      <category>database</category>
    </item>
    <item>
      <title>Stop Writing JavaScript Like This
</title>
      <author>Ruben Gabrielyan</author>
      <pubDate>Thu, 14 Oct 2021 14:53:16 +0000</pubDate>
      <link>https://dev.to/rubengabrielian/stop-writing-javascript-like-this-8po</link>
      <guid>https://dev.to/rubengabrielian/stop-writing-javascript-like-this-8po</guid>
      <description>&lt;p&gt;Most of us are used to writing JavaScript code for a long time. But we might not have updated ourselves with new features which can solve your issues with minimal code. These techniques can help you write clean and optimized JavaScript Code. Today, I‚Äôll be summarizing some optimized JavaScript code snippets which can help you develop your skills.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-shorthand-for-if-with-multiple-conditions"&gt;
  &lt;/a&gt;
  1. Shorthand for if with multiple || conditions
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (fruit === 'apple' || fruit === 'orange' || fruit === 'banana' || fruit ==='grapes') {
    //code
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of using multiple || (OR) conditions, we can use an array with the values and use the includes() method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (['apple', 'orange', 'banana', 'grapes'].includes(fruit)) {
   //code
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-shorthand-for-if-with-multiple-ampamp-conditions"&gt;
  &lt;/a&gt;
  2. Shorthand for if with multiple &amp;amp;&amp;amp; conditions
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if(obj &amp;amp;&amp;amp; obj.address &amp;amp;&amp;amp; obj.address.postalCode) {
    console.log(obj.address.postalCode)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use optional chaining (?.) to replace this snippet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(obj?.address?.postalCode);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-shorthand-for-null-undefined-and-empty-if-checks"&gt;
  &lt;/a&gt;
  3. Shorthand for null, undefined, and empty if checks
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (first !== null || first !== undefined || first !== '') {
    let second = first;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of writing so many checks, we can write it better this way using ||&lt;br&gt;
(OR) operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const second = first || '';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-shorthand-for-switch-case"&gt;
  &lt;/a&gt;
  4. Shorthand for switch case
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;switch (number) {
  case 1:
     return 'one';
  case 2:
     return 'two';
  default:
     return;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use a map/ object to write it in a cleaner way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const data = {
  1: 'one',
  2: 'two'
};
//Access it using
data[num]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-shorthand-for-functions-with-a-single-line"&gt;
  &lt;/a&gt;
  5. Shorthand for functions with a single line
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function doubleOf(value) {
  return 2 * value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use the arrow function to shorten it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const doubleOf = (value) =&amp;gt; 2 * value
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#buy-me-a-coffee"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.buymeacoffee.com/rubengabriel"&gt;Buy me a coffee&lt;/a&gt;
&lt;/h1&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>JavaScript Framework TodoMVC Size Comparison</title>
      <author>Ryan Carniato</author>
      <pubDate>Thu, 14 Oct 2021 14:13:08 +0000</pubDate>
      <link>https://dev.to/this-is-learning/javascript-framework-todomvc-size-comparison-504f</link>
      <guid>https://dev.to/this-is-learning/javascript-framework-todomvc-size-comparison-504f</guid>
      <description>&lt;p&gt;Size in JavaScript Frameworks is actually a pretty tricky thing to estimate. &lt;/p&gt;

&lt;p&gt;Even nailing down the size of runtimes is unclear. You might go to bundlephobia.com but the size there can be misleading. With tree-shaking not all code is included. Bundlephobia also doesn't include sub-modules. Things like &lt;code&gt;svelte/motion&lt;/code&gt; or &lt;code&gt;preact/hooks&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There isn't only the size of the runtime but the size of the component code. Not all components are equal. Templates in each framework compile differently. Evan You, creator of Vue put together a &lt;a href="https://github.com/yyx990803/vue-svelte-size-analysis"&gt;comparison between Svelte and Vue&lt;/a&gt; which was pretty illuminating.&lt;/p&gt;

&lt;p&gt;I decided to take his process and methodology and apply it in addition to &lt;a href="https://preactjs.com"&gt;Preact&lt;/a&gt;, &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt;, and &lt;a href="https://solidjs.com"&gt;Solid&lt;/a&gt;. So let's begin.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I'm the author of Solid, so be aware of that in terms of any potential bias I might show. I'm trying to keep things as equal as I can.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#the-setup"&gt;
  &lt;/a&gt;
  The Setup
&lt;/h2&gt;

&lt;p&gt;The test looks at the size of the library(vendor) bundle and the component code for &lt;a href="https://todomvc.com/"&gt;TodoMVC&lt;/a&gt;. Every framework has a version and the requirements are well laid out so each is relatively the same.&lt;/p&gt;

&lt;p&gt;I first looked at using only official demos, but Preact and React still use class components that are larger and not as representative of modern development. This did mean an increase in library size for Preact(3.81kb -&amp;gt; 4.39kb), which doesn't contain hooks as part of its main package but is definitely worthwhile for this test. In the end, I couldn't find a Hooks implementation I was happy with so I rolled my own implementation which I based off Solid's. You can find all the implementations &lt;a href="https://gist.github.com/ryansolid/aa5bd12ed4e2f9d592c4b23e58d6fa85"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Vendor chunks are pulled from &lt;a href="https://vite.dev"&gt;Vite&lt;/a&gt; which supports all tested frameworks. For component code I used &lt;a href="https://sfc.vuejs.org/"&gt;Vue&lt;/a&gt;, &lt;a href="https://svelte.dev/repl/"&gt;Svelte&lt;/a&gt;, &lt;a href="https://playground.solidjs.com"&gt;Solid&lt;/a&gt;'s REPLs and Terser REPL to minify. For Preact and React I used rollup to generate the compiled code.&lt;/p&gt;

&lt;p&gt;This process is much less rigorous than the benchmarks I typically do. Honestly coding style and available demo code put in a reasonable amount of variance. But I think it is still approximately in line.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h2&gt;

&lt;p&gt;First step is to get the size of the component and vendor code for each. TodoMVC is a pretty reasonable example as it involves basic state handling, conditional and loop rendering, forms, and even serialization to local storage. In so we get a much better idea of what the base size of each framework is than Bundlephobia.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Preact&lt;/th&gt;
&lt;th&gt;React&lt;/th&gt;
&lt;th&gt;Solid&lt;/th&gt;
&lt;th&gt;Svelte&lt;/th&gt;
&lt;th&gt;Vue&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;component size (brotli)&lt;/td&gt;
&lt;td&gt;1.21kb&lt;/td&gt;
&lt;td&gt;1.23kb&lt;/td&gt;
&lt;td&gt;1.26kb&lt;/td&gt;
&lt;td&gt;1.88kb&lt;/td&gt;
&lt;td&gt;1.10kb&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vendor size (brotli)&lt;/td&gt;
&lt;td&gt;4.39kb&lt;/td&gt;
&lt;td&gt;36.22kb&lt;/td&gt;
&lt;td&gt;3.86kb&lt;/td&gt;
&lt;td&gt;1.85kb&lt;/td&gt;
&lt;td&gt;16.89kb&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;In general, mutable is smaller than immutable state, and VDOM-less libraries generate more JavaScript for their templates. Vue's components generate the least code, edging out the JSX libraries and Svelte &lt;/p&gt;

&lt;p&gt;Svelte's runtime really is small at 1.85kb. Preact core might be smaller than Solid, but with hooks in tow, the reactive framework ends up being the tinier one.&lt;/p&gt;

&lt;p&gt;From this, it is easy to calculate the size of each framework at N number of TodoMVCs + vendor chunk.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;10&lt;/th&gt;
&lt;th&gt;20&lt;/th&gt;
&lt;th&gt;40&lt;/th&gt;
&lt;th&gt;80&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Svelte&lt;/td&gt;
&lt;td&gt;3.73kb&lt;/td&gt;
&lt;td&gt;11.25kb&lt;/td&gt;
&lt;td&gt;20.65kb&lt;/td&gt;
&lt;td&gt;39.45kb&lt;/td&gt;
&lt;td&gt;77.05kb&lt;/td&gt;
&lt;td&gt;152.25kb&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Solid&lt;/td&gt;
&lt;td&gt;5.12kb&lt;/td&gt;
&lt;td&gt;10.16kb&lt;/td&gt;
&lt;td&gt;16.46kb&lt;/td&gt;
&lt;td&gt;29.06kb&lt;/td&gt;
&lt;td&gt;54.26kb&lt;/td&gt;
&lt;td&gt;104.66kb&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Preact&lt;/td&gt;
&lt;td&gt;5.60kb&lt;/td&gt;
&lt;td&gt;10.44kb&lt;/td&gt;
&lt;td&gt;16.49kb&lt;/td&gt;
&lt;td&gt;28.59kb&lt;/td&gt;
&lt;td&gt;52.79kb&lt;/td&gt;
&lt;td&gt;101.19kb&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vue&lt;/td&gt;
&lt;td&gt;17.99kb&lt;/td&gt;
&lt;td&gt;22.39kb&lt;/td&gt;
&lt;td&gt;27.89kb&lt;/td&gt;
&lt;td&gt;38.89kb&lt;/td&gt;
&lt;td&gt;60.89kb&lt;/td&gt;
&lt;td&gt;104.89kb&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;React&lt;/td&gt;
&lt;td&gt;37.45kb&lt;/td&gt;
&lt;td&gt;42.37kb&lt;/td&gt;
&lt;td&gt;48.52kb&lt;/td&gt;
&lt;td&gt;60.82kb&lt;/td&gt;
&lt;td&gt;85.42kb&lt;/td&gt;
&lt;td&gt;134.62kb&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;While Svelte starts the charge in the lead, it is quickly overtaken by Solid, who passes the crown on to Preact. Preact is the smallest for a good chunk of the table before ultimately Vue is.&lt;/p&gt;

&lt;p&gt;So putting the inflection points in a table:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Svelte&lt;/th&gt;
&lt;th&gt;Solid&lt;/th&gt;
&lt;th&gt;Preact&lt;/th&gt;
&lt;th&gt;Vue&lt;/th&gt;
&lt;th&gt;React&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Svelte&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;3.2&lt;/td&gt;
&lt;td&gt;3.8&lt;/td&gt;
&lt;td&gt;19.3&lt;/td&gt;
&lt;td&gt;52.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Solid&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;10.6&lt;/td&gt;
&lt;td&gt;81.4&lt;/td&gt;
&lt;td&gt;1078.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Preact&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;113.6&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vue&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;React&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;This is the point each framework gets larger than the next. From 0-3 TodoMVCs, Svelte is the smallest. From 3 to 10 Solid is the smallest. 10-113 TodoMVCs Preact is. And more than 113 TodoMVC's Vue is.&lt;/p&gt;

&lt;p&gt;Preact and Vue never intersect with React, and even for Solid that does it is only after about 1080 TodoMVC's.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#analysis"&gt;
  &lt;/a&gt;
  Analysis
&lt;/h2&gt;

&lt;p&gt;TodoMVC as a single component is on the larger side and typical implementations do it in 3-4 components so I wouldn't view these component numbers necessarily to be the number of components. But it is easy to see each framework has its sweet spot.&lt;/p&gt;

&lt;p&gt;Size's biggest impact comes during the initial page load. Other code split routes can be lazy-loaded as desired, but initial page load is a cost that every site takes upfront. If you subscribe to the thinking present in Addy Osmani's &lt;a href="https://medium.com/dev-channel/the-cost-of-javascript-84009f51e99e"&gt;The Cost of JavaScript&lt;/a&gt; series and Alex Russell's &lt;a href="https://infrequently.org/2017/10/can-you-afford-it-real-world-web-performance-budgets/"&gt;Can You Afford It?: Real-world Web Performance Budgets&lt;/a&gt; we really should be aiming to keep initial page load JavaScript under 130kb. &lt;/p&gt;

&lt;p&gt;If this is a SPA that budget includes data fetching, state libraries, and router. It's not uncommon for that to be an additional 20 to 25kb JS with most frameworks. Reactive ones like Svelte, Solid, and Vue may have state management built-in but even then when you consider 3rd party utility libraries for formatting I'd say our framework and component code should be less than 100kb.&lt;/p&gt;

&lt;p&gt;At that budget, just how many TodoMVCs does each framework allow for?&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;React&lt;/th&gt;
&lt;th&gt;Vue&lt;/th&gt;
&lt;th&gt;Preact&lt;/th&gt;
&lt;th&gt;Solid&lt;/th&gt;
&lt;th&gt;Svelte&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10kb&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;4.6&lt;/td&gt;
&lt;td&gt;4.7&lt;/td&gt;
&lt;td&gt;4.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20kb&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;2.8&lt;/td&gt;
&lt;td&gt;12.9&lt;/td&gt;
&lt;td&gt;12.4&lt;/td&gt;
&lt;td&gt;9.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;40kb&lt;/td&gt;
&lt;td&gt;3.1&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;29.4&lt;/td&gt;
&lt;td&gt;28.7&lt;/td&gt;
&lt;td&gt;20.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;70kb&lt;/td&gt;
&lt;td&gt;27.5&lt;/td&gt;
&lt;td&gt;48.3&lt;/td&gt;
&lt;td&gt;54.2&lt;/td&gt;
&lt;td&gt;52.5&lt;/td&gt;
&lt;td&gt;36.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;100kb&lt;/td&gt;
&lt;td&gt;51.9&lt;/td&gt;
&lt;td&gt;75.6&lt;/td&gt;
&lt;td&gt;79.0&lt;/td&gt;
&lt;td&gt;76.3&lt;/td&gt;
&lt;td&gt;52.2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Well at 100kb React and Svelte are actually almost identical. And Vue, Preact, and Solid are right next to each other with almost 33% more budget available to them. But that's the upper end. At 40kb Preact and Solid can deliver pretty heft sites with a similar advantage over Vue and Svelte, at a range React isn't even really an option.&lt;/p&gt;

&lt;p&gt;Alex's goal was 5 seconds TTI on a slower device and network. For some industries like eCommerce that target should be more like 3 seconds. 70kb - 25kb = ~45kb budget here. How can a larger library like React even compete?&lt;/p&gt;

&lt;p&gt;React Server components carry about ~8kb more on top of React's current runtime already price them out of this conversation. Multi-Page Meta-Frameworks like &lt;a href="https://astro.build/"&gt;Astro&lt;/a&gt; which remove the need for routing, and possibly other 3rd party libraries, are likely just barely enough. But even amazing tools like Astro bring ~9kb with them when there is JavaScript to load.&lt;/p&gt;

&lt;p&gt;But for the other's there is more room to play. A simple site might only 5-10 islands on a given page any option is good there. Even full SPAs for smaller libraries like Preact, Svelte, or Solid are well within a happy range.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;In the ranges that matter, all frameworks are pretty comparable. Svelte might ultimately load more JavaScript across many pages for a really large app, but the others are close enough that on the larger side it won't be felt.&lt;/p&gt;

&lt;p&gt;Looking across the board Preact is the winner on size still. Solid comes close enough that that difference wouldn't be noticed, but Preact deserves the nod. React is priced out of the smaller targets or performance-sensitive ones but once an app gets large enough its size isn't noticeable. Vue sort lands right down the middle in this range, although ultimately it might send the least JavaScript in a really large app.&lt;/p&gt;

&lt;p&gt;Keep in mind this comparison is pretty rough and should be only seen as an estimate. I only regret not being able to put the time in to look at more libraries. Unsurprisingly a lot of TodoMVC examples are written MVC style which is unfair for this comparison or use stores like Redux. I wasn't prepared to write a bunch myself (Preact and React were enough). So this will have to stand.&lt;/p&gt;

&lt;p&gt;Hopefully, this gives you enough to think about until the next time the conversation of size comes up. Or maybe by then, it will be a completely different conversation given the way &lt;a href="https://markojs.com"&gt;Marko&lt;/a&gt; and &lt;a href="https://github.com/BuilderIO/qwik"&gt;Qwik&lt;/a&gt; have been completely shattering the way we measure JavaScript Framework code being sent to the browser.&lt;/p&gt;




&lt;p&gt;Full source for the TodoMVC examples used in this article found &lt;a href="https://gist.github.com/ryansolid/aa5bd12ed4e2f9d592c4b23e58d6fa85"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>vue</category>
    </item>
    <item>
      <title>Export and run other machine learning models</title>
      <author>David Mezzetti</author>
      <pubDate>Thu, 14 Oct 2021 14:04:21 +0000</pubDate>
      <link>https://dev.to/neuml/export-and-run-other-machine-learning-models-3b86</link>
      <guid>https://dev.to/neuml/export-and-run-other-machine-learning-models-3b86</guid>
      <description>&lt;p&gt;&lt;a href="https://colab.research.google.com/github/neuml/txtai/blob/master/examples/21_Export_and_run_other_machine_learning_models.ipynb"&gt;&lt;img src="https://camo.githubusercontent.com/84f0493939e0c4de4e6dbe113251b4bfb5353e57134ffd9fcab6b8714514d4d1/68747470733a2f2f636f6c61622e72657365617263682e676f6f676c652e636f6d2f6173736574732f636f6c61622d62616467652e737667" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article is part of a tutorial series on &lt;a href="https://github.com/neuml/txtai"&gt;txtai&lt;/a&gt;, an AI-powered semantic search platform.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;txtai primarily has support for &lt;a href="https://github.com/huggingface/transformers"&gt;Hugging Face Transformers&lt;/a&gt; and &lt;a href="https://github.com/microsoft/onnxruntime"&gt;ONNX&lt;/a&gt; models. This enables txtai to hook into the rich model framework available in Python, export this functionality via the API to other languages (JavaScript, Java, Go, Rust) and even export and natively load models with ONNX.&lt;/p&gt;

&lt;p&gt;What about other machine learning frameworks? Say we have an existing TF-IDF + Logistic Regression model that has been well tuned. Can this model be exported to ONNX and used in txtai for labeling and similarity queries? Or what about a simple PyTorch text classifier? Yes, both of these can be done!&lt;/p&gt;

&lt;p&gt;With the &lt;a href="https://github.com/onnx/onnxmltools"&gt;onnxmltools&lt;/a&gt; library, traditional models from &lt;a href="https://scikit-learn.org/stable/"&gt;scikit-learn&lt;/a&gt;, &lt;a href="https://xgboost.readthedocs.io/en/latest/"&gt;XGBoost&lt;/a&gt; and others can be exported to ONNX and loaded with txtai. Additionally, Hugging Face's trainer module can train generic PyTorch modules. This notebook will walk through all these examples.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#install-dependencies"&gt;
  &lt;/a&gt;
  Install dependencies
&lt;/h1&gt;

&lt;p&gt;Install &lt;code&gt;txtai&lt;/code&gt; and all dependencies. Since this article uses ONNX exports, we need to install the pipeline extras package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;txtai[pipeline,similarity] datasets
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#train-a-tfidf-logistic-regression-model"&gt;
  &lt;/a&gt;
  Train a TF-IDF + Logistic Regression model
&lt;/h1&gt;

&lt;p&gt;For this example, we'll load the emotion dataset from Hugging Face datasets and build a TF-IDF + Logistic Regression model with scikit-learn.&lt;/p&gt;

&lt;p&gt;The emotion dataset has the following labels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sadness (0)&lt;/li&gt;
&lt;li&gt;joy (1)&lt;/li&gt;
&lt;li&gt;love (2)&lt;/li&gt;
&lt;li&gt;anger (3)&lt;/li&gt;
&lt;li&gt;fear (4)&lt;/li&gt;
&lt;li&gt;surprise (5)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datasets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dataset&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.feature_extraction.text&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TfidfVectorizer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.linear_model&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LogisticRegression&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.pipeline&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Pipeline&lt;/span&gt;

&lt;span class="n"&gt;ds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;load_dataset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"emotion"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Train the model
&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pipeline&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'tfidf'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TfidfVectorizer&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'lr'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LogisticRegression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_iter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"train"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"train"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"label"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# Determine accuracy on validation set
&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"validation"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"validation"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"label"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Accuracy ="&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"validation"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Accuracy = 0.8595
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;86% accuracy - not too bad! While we all get caught up in deep learning and advanced methods, good ole TF-IDF + Logistic Regression is still a solid performer and runs much faster. If that level of accuracy works, no reason to overcomplicate things.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#export-and-load-with-txtai"&gt;
  &lt;/a&gt;
  Export and load with txtai
&lt;/h1&gt;

&lt;p&gt;The next section exports this model to ONNX and shows how the model can be used for similarity queries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;txtai.pipeline&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Labels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MLOnnx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Similarity&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"input_ids"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokenizer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multilabel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Load models into similarity pipeline
&lt;/span&gt;    &lt;span class="n"&gt;similarity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Similarity&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokenizer&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Add labels to model
&lt;/span&gt;    &lt;span class="n"&gt;similarity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id2label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"sadness"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"joy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"love"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"anger"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"fear"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"surprise"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;similarity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label2id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;similarity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id2label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="n"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"that caught me off guard"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"I didn t see that coming"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"i feel bad"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"What a wonderful goal!"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;scores&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;similarity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"joy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multilabel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Export to ONNX
&lt;/span&gt;&lt;span class="n"&gt;onnx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MLOnnx&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;onnx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Create labels pipeline using scikit-learn ONNX model
&lt;/span&gt;&lt;span class="n"&gt;sklabels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Labels&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Add labels to model
&lt;/span&gt;&lt;span class="n"&gt;sklabels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id2label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"sadness"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"joy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"love"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"anger"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"fear"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"surprise"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;sklabels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label2id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sklabels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pipeline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id2label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;# Run test query using model
&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokenize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;What a wonderful goal! 0.909473717212677
I didn t see that coming 0.47113093733787537
that caught me off guard 0.42067453265190125
i feel bad 0.019547615200281143
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;txtai can use a standard text classification model for similarity queries, where the label(s) are a list of fixed queries. The output above shows the best results for the query "joy".&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#train-a-pytorch-model"&gt;
  &lt;/a&gt;
  Train a PyTorch model
&lt;/h1&gt;

&lt;p&gt;The next section defines a simple PyTorch text classifier. The transformers library has a trainer package that supports training PyTorch models, assuming some standard conventions/naming is used.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Set predictable seeds
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;torch&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;torch&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;torch.nn&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CrossEntropyLoss&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;transformers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AutoConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AutoTokenizer&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;txtai.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Registry&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;txtai.pipeline&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HFTrainer&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;transformers.modeling_outputs&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SequenceClassifierOutput&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'PYTHONHASHSEED'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manual_seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cuda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manual_seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;torch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backends&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cudnn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deterministic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Simple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vocab&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dimensions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AutoConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_pretrained&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"bert-base-uncased"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;embedding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EmbeddingBag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vocab&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dimensions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;classifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Linear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dimensions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_weights&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init_weights&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;initrange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;embedding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniform_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;initrange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;initrange&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;classifier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniform_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;initrange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;initrange&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;classifier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bias&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zero_&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_ids&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;embeddings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;embedding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_ids&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;logits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;classifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;embeddings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;loss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;loss_fct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CrossEntropyLoss&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;loss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loss_fct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;SequenceClassifierOutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;logits&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;logits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Set seed for reproducibility
&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Define model
&lt;/span&gt;&lt;span class="n"&gt;tokenizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AutoTokenizer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_pretrained&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"bert-base-uncased"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Simple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokenizer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vocab_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"train"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"label"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;# Train model
&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HFTrainer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokenizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokenizer&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"train"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;per_device_train_batch_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;learning_rate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_train_epochs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;logging_steps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Register custom model to fully support pipelines
&lt;/span&gt;&lt;span class="n"&gt;Registry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Create labels pipeline using PyTorch model
&lt;/span&gt;&lt;span class="n"&gt;thlabels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Labels&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokenizer&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Determine accuracy on validation set
&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"label"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;thlabels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"validation"&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Accuracy = "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"validation"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Accuracy =  0.883
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;88% accuracy this time. Pretty good for such a simple network and something that could definitely be improved upon. &lt;/p&gt;

&lt;p&gt;Once again let's run similarity queries using this model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokenizer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;What a wonderful goal! 1.0
that caught me off guard 0.9998751878738403
I didn t see that coming 0.7328283190727234
i feel bad 5.2972134609891875e-19
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Same result order as with the scikit-learn model with scoring variations which is expected given this is a completely different model.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pooled-embeddings"&gt;
  &lt;/a&gt;
  Pooled embeddings
&lt;/h1&gt;

&lt;p&gt;The PyTorch model above consists of an embeddings layer with a linear classifier on top of it. What if we take that embeddings layer and use it for similarity queries? Let's give it a try.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;txtai.embeddings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Embeddings&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SimpleEmbeddings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;embeddings&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;embeddings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;embeddings&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;input_ids&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;embeddings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_ids&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;

&lt;span class="n"&gt;embeddings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Embeddings&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;"method"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"pooling"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"path"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SimpleEmbeddings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;embedding&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"tokenizer"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"bert-base-uncased"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;embeddings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;similarity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mad"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Glad you found it"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Happy to see you"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"I'm angry"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[(2, 0.8323876857757568), (1, -0.11010512709617615), (0, -0.16152513027191162)]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Definitely looks like the embeddings have stored knowledge. Could these embeddings be good enough to build a semantic search index, especially for sentiment based data, given the training dataset? Possibly. It certainly would run faster than a standard transformer model (see below). &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#train-a-transformer-model-and-compare-accuracyspeed"&gt;
  &lt;/a&gt;
  Train a transformer model and compare accuracy/speed
&lt;/h1&gt;

&lt;p&gt;Let's train a standard transformer sequence classifier and compare the accuracy/speed between the two.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;train&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HFTrainer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokenizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"microsoft/xtremedistil-l6-h384-uncased"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"train"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;logging_steps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;tflabels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Labels&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokenizer&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Determine accuracy on validation set
&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"label"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;tflabels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"validation"&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Accuracy = "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"validation"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Accuracy =  0.93
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As expected, the accuracy is better. The model above is a distilled model and even better accuracy can be obtained with a model like "roberta-base" with the tradeoff being increased training/inference time. &lt;/p&gt;

&lt;p&gt;Speaking of speed, let's compare the speed of these models.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="c1"&gt;# Test inputs
&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Testing speed of %d items"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;r1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sklabels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multilabel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"TF-IDF + Logistic Regression time ="&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;r2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;thlabels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"PyTorch time ="&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;r3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tflabels&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Transformers time ="&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Compare model results
&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"index: %d"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r3&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Testing speed of 2000 items
TF-IDF + Logistic Regression time = 1.116208791732788
PyTorch time = 2.2385385036468506
Transformers time = 15.705108880996704 

index: 0
(0, 0.7258279323577881)
(0, 1.0)
(0, 0.998250424861908) 

index: 1
(0, 0.854256272315979)
(0, 1.0)
(0, 0.9981004595756531) 

index: 2
(0, 0.6306578516960144)
(0, 0.9999700784683228)
(0, 0.9981676340103149) 

index: 3
(1, 0.554378092288971)
(1, 0.9998960494995117)
(1, 0.9985388517379761) 

index: 4
(0, 0.8961835503578186)
(0, 1.0)
(0, 0.9981957077980042) 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h1&gt;

&lt;p&gt;This notebook showed how frameworks outside of Transformers and ONNX can be used as models in txtai.&lt;/p&gt;

&lt;p&gt;As seen in the section above, TF-IDF + Logistic Regression is 16 times faster than a distilled Transformers model. A simple PyTorch network is 8 times faster. Depending on your accuracy requirements, it may make sense to use a simpler model to get better runtime performance.&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>machinelearning</category>
      <category>nlp</category>
      <category>python</category>
    </item>
    <item>
      <title>How to setup and test Postman API Collection</title>
      <author>daspecialman</author>
      <pubDate>Thu, 14 Oct 2021 13:58:59 +0000</pubDate>
      <link>https://dev.to/daspecialman/how-to-setup-and-test-postman-api-collection-j1k</link>
      <guid>https://dev.to/daspecialman/how-to-setup-and-test-postman-api-collection-j1k</guid>
      <description>&lt;p&gt;If you are a frontend developer, you have likely encountered the need to test your API before integration. For experienced developers, this is not an issue, but for the newbies, it could get confusing. &lt;/p&gt;

&lt;p&gt;Whenever we onboard new interns in the dev department of &lt;a href="https://specialmansolution.com"&gt;Special Man Global Solution LTD&lt;/a&gt; and they are assigned a task, especially a frontend task, the first challenge is how to test the API, and I am always happy to guide them through it. &lt;/p&gt;

&lt;p&gt;In this article, I will share a brief on how you can test API endpoints using &lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt; to help you consume &lt;a href="https://www.infoworld.com/article/3269878/what-is-an-api-application-programming-interfaces-explained.html"&gt;API&lt;/a&gt; appropriately.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessing-the-collection"&gt;
  &lt;/a&gt;
  Accessing the collection
&lt;/h2&gt;

&lt;p&gt;First, you are giving a collection URL for the Postman. When you open it, you will see something like this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UWA85AFg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f123di9czptmmsrhkxjn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UWA85AFg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f123di9czptmmsrhkxjn.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-and-2-the-request-endpoint-and-folder"&gt;
  &lt;/a&gt;
  1 and 2. The Request Endpoint and Folder
&lt;/h3&gt;

&lt;p&gt;This section shows the arrangement of the API endpoints. Here they are grouped in folders. Inside the folder, there is the actual endpoint. Showing the endpoint name and the request method. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-the-environment"&gt;
  &lt;/a&gt;
  3. The Environment
&lt;/h3&gt;

&lt;p&gt;This shows any environment setup that contains all variables the Postman collection is set up with. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-specification"&gt;
  &lt;/a&gt;
  4. Specification
&lt;/h3&gt;

&lt;p&gt;This allows you to select the preferred pattern or specification you want to view the endpoint request with.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-documentation-body"&gt;
  &lt;/a&gt;
  5. Documentation Body
&lt;/h3&gt;

&lt;p&gt;This is the documentation body that describes guides you need to know to be able to consume the request.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-run-in-postman"&gt;
  &lt;/a&gt;
  6. Run in Postman
&lt;/h3&gt;

&lt;p&gt;This allows you to test the API on the web or your local PC.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-request-definition"&gt;
  &lt;/a&gt;
  7. Request Definition
&lt;/h3&gt;

&lt;p&gt;This shows you the request definition depending on the pattern or specification you selected above.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-the-endpoint"&gt;
  &lt;/a&gt;
  Testing the endpoint
&lt;/h2&gt;

&lt;p&gt;Click on run in Postman, then Postman for the web.&lt;br&gt;
Select your preferred workspace&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g9P2SckJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fq9cpmznbom1jyt7ocki.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g9P2SckJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fq9cpmznbom1jyt7ocki.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then click on the endpoint you want to test, make sure the method, body and data type are correct, then click on send, you will see the data show.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#request-with-jwt-authentication"&gt;
  &lt;/a&gt;
  Request with JWT Authentication
&lt;/h2&gt;

&lt;p&gt;If your endpoint is protected using JWT; you will need to set the auth on Postman else you will be getting unauthorized error.&lt;br&gt;
Login using the login endpoint, copy the JSON Web Token, then click on the collection, under Authorization tab, sent:&lt;br&gt;
&lt;strong&gt;Type&lt;/strong&gt; = Bearer Token&lt;br&gt;
&lt;strong&gt;Token&lt;/strong&gt; = The JWT token you copied.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q2H_X9s2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/euklaxin4vbne4dsq0b9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q2H_X9s2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/euklaxin4vbne4dsq0b9.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With this you can access all the endpoints, if you encounter more issues, you inform the backend team to get them fixed.&lt;/p&gt;

&lt;p&gt;I hope this article can help you set up and test API endpoints before integration on your frontend project.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The API documentation used here is from &lt;a href="https://thestartupintern.com"&gt;The StartUp Intern's Refinery Program&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>postman</category>
      <category>javascript</category>
      <category>frontend</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Why Django For Backend Than PHP(Laravel)</title>
      <author>Joseph Mania</author>
      <pubDate>Thu, 14 Oct 2021 13:48:00 +0000</pubDate>
      <link>https://dev.to/maniamartial/why-django-for-backend-than-phplaravel-3536</link>
      <guid>https://dev.to/maniamartial/why-django-for-backend-than-phplaravel-3536</guid>
      <description>&lt;p&gt;The topic really interested me in Quora as developers from both groups defended their tools. Before developing a system, you must select the best tools to use. Have in mind the effects of each, both the advantages and disadvantages.&lt;/p&gt;

&lt;p&gt;Don‚Äôt be too choosy. Each tool was created for a specific purpose. What you might accomplish with PHP might or might not happen with Django. But both are server languages. I have never touched PHP because of the negative talks from people. But from the compilation I have made, here is my reason why I would rather work with Django than PHP.&lt;/p&gt;

&lt;p&gt;Easier Integration with AI, DS, and ML projects&lt;/p&gt;

&lt;p&gt;Of course, we are living in the world of AI where people are developing projects using artificial intelligence. Machine learning technology is trending daily. Since the most common language used is Python, it becomes easier to integrate with that application. Django as a python framework makes the work look much simpler than you might work with PHP.&lt;/p&gt;

&lt;p&gt;Security&lt;/p&gt;

&lt;p&gt;Many people have abandoned the use of WordPress because they have a PHP backend. The language has leaked and is most of the time prone to hackers. Django comes with strong built-in security. This is a rare case where you will hear about a leak in the Django server application&lt;/p&gt;

&lt;p&gt;Django is easier to Learn&lt;/p&gt;

&lt;p&gt;Yes, both PHP and Python are easier to understand when you dedicate your maximum time to them. Python syntax is much easier to read and understand. While in a rush for server language, opt to pick python Django. If you have the basics of python, it will be much simpler.&lt;/p&gt;

&lt;p&gt;Django is faster than PHP&lt;/p&gt;

&lt;p&gt;Python is powerful in general. So it can be used for complex projects, with its numerous libraries. It‚Äôs faster when developing a site and also the running time. If you are new to server language, kindly work with Django. But when it comes to deployment, things turn out different. I would rather advise you to stick to what you have been doing if you ever worked with PHP. Django calls upon a specific environment in order to run.&lt;/p&gt;

&lt;p&gt;Time management&lt;/p&gt;

&lt;p&gt;If you want to build a web application quickly and deploy it, then Django might be your best choice. Although you might face a variety of problems, that is common to almost everyone. Are you comfortable using Django, then come solve problems as fast as possible?&lt;/p&gt;

&lt;p&gt;Handle complex tasks&lt;/p&gt;

&lt;p&gt;This is an attribute related to the vast community of python Django. The framework keeps growing daily as new packages are added. Python is a memory efficient language that takes up less space.&lt;/p&gt;

&lt;p&gt;Although the comparison might sound biased, the fact remain we can‚Äôt compare Django with PHP. One is a framework while the php is programming language. However, both can build awesome backend servers. Have a tool then dig deeper to understand what it can do.&lt;/p&gt;

&lt;p&gt;All the same, AI projects are the most popular technologies. This means Django will have space to exist in the coming years.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>Asking Question</title>
      <author>BerniceAbena</author>
      <pubDate>Thu, 14 Oct 2021 13:39:10 +0000</pubDate>
      <link>https://dev.to/berniceabena/asking-question-4l58</link>
      <guid>https://dev.to/berniceabena/asking-question-4l58</guid>
      <description>&lt;p&gt;What is the difference between Block and Inline Elements?&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>What's the deal with align-items: baseline? </title>
      <author>Max Antonucci</author>
      <pubDate>Thu, 14 Oct 2021 13:15:25 +0000</pubDate>
      <link>https://dev.to/maxwell_dev/whats-the-deal-with-align-items-baseline-5eef</link>
      <guid>https://dev.to/maxwell_dev/whats-the-deal-with-align-items-baseline-5eef</guid>
      <description>&lt;p&gt;I can't count the number of times flexbox has made an otherwise painful design layout easy. My only qualm was having to calculate margins and paddings to space elements in a flex container. But now that &lt;code&gt;gap&lt;/code&gt; has gotten good browser support, even that's no longer an issue.&lt;/p&gt;

&lt;p&gt;But while it doesn't inconvenience me anywhere, it still surprises me.&lt;/p&gt;

&lt;p&gt;Take the &lt;code&gt;align-items&lt;/code&gt; property. When you have a row of items in a flex container, it controls how they line up in that row. I know how the most common values you'd give it work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;stretch&lt;/code&gt; is the default value, and it makes each one the height of the tallest element in that row&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;flex-start&lt;/code&gt; aligns each element to the top of that row&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;flex-end&lt;/code&gt; aligns each element to the end of the row&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;center&lt;/code&gt; aligns each element along the row's center axis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--htWLB2aL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.maxwellantonucci.com/assets/images/posts/flex-align-baseline/flex-align-basics.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--htWLB2aL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.maxwellantonucci.com/assets/images/posts/flex-align-baseline/flex-align-basics.png" alt="Some hand-drawn examples showing how the four basic values for align-items work."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But an article I read mentioned the &lt;code&gt;baseline&lt;/code&gt; value, and I didn't know that one. My own site's article listing is a flex container, so I threw on &lt;code&gt;align-items: baseline&lt;/code&gt; out of curiosity.&lt;/p&gt;

&lt;p&gt;The result...was unexpected.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZyrOfPeJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FBMCth_VkAIweL0.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--xK4GQCTA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1358498538129342467/wZnU2SXq_normal.jpg" alt="Max Antonucci profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Max Antonucci
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/maxwell_dev"&gt;@maxwell_dev&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I'm not understand why flexbox's "align-item: baseline" is doing this. Can anyone explain it? 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:49 PM - 08 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1446503004912295939" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1446503004912295939" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1446503004912295939" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;This confused me since the results looked inconsistent. I was guessing flexbox was aligning things by a particular element. But I checked each element and nothing explained the alignment in each row. How could an alignment changed by a single rule give me such random results?&lt;/p&gt;

&lt;p&gt;I did a few google searches to find out exactly how &lt;code&gt;baseline&lt;/code&gt; aligns content. But I got explanations that were either too sparse or too jargon-filled. So like all confused people with little self-esteem and even less to lose, I turned to Twitter. And I actually got a good answer fast.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--TfY0J4zD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1154081274946101253/x5FP9gGj_normal.jpg" alt="Bryan Robinson profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Bryan Robinson
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/brob"&gt;@brob&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/Maxwell_Dev"&gt;@Maxwell_Dev&lt;/a&gt; Looks like it's aligning the first items' baselines. Images in the first row. Images + dates in the second row. Images again in the third row
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:00 PM - 08 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1446505854354739200" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1446505854354739200" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1446505854354739200" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;This was the simple answer I'd been looking for! &lt;strong&gt;Baseline takes the first element in each flex item, and lines things up by the bottom of that element.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This also explained the inconsistency! Posts in the first and third rows all have images, so it aligned the articles based on the bottoms of those. But the middle row has two posts without images, so it went by the element that was first instead: the dates. So while the alignment rule works, the different elements make it look inconsistent.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QhFBJP7z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.maxwellantonucci.com/assets/images/posts/flex-align-baseline/baseline-align-guideline.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QhFBJP7z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.maxwellantonucci.com/assets/images/posts/flex-align-baseline/baseline-align-guideline.jpg" alt="My website's article listings with the baseline level elements emphasized to show where how the alignment works."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It also explains why the layout looks so wildly spaced in some areas. In the second post of the first row, the headline text is larger while the flex-basis is shorter. This pushes a lot of content below the baseline and creates those large gaps in the row.&lt;/p&gt;

&lt;p&gt;All this has taught me a few good lessons about when I'd want to use &lt;code&gt;align-items: baseline&lt;/code&gt; in the future.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;It's good for content with some size variation.&lt;/strong&gt; If you have images or text of different sizes, &lt;code&gt;baseline&lt;/code&gt; always aligns them at the same point. So it can add some consistency where they may otherwise be none.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;It's bad for content that has too many differences.&lt;/strong&gt; It only looks at the first element and not any elements after it. My site has shown that having varying text or elements around a baseline can create lots of empty space.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My recommendation is to use &lt;code&gt;baseline&lt;/code&gt; when your inconsistencies stay limited to the first element. Like for a list of cards that always started with headings, but you can't guarantee their font size.&lt;/p&gt;

&lt;p&gt;As for my own site, I'm going to stick with &lt;code&gt;align-items: stretch&lt;/code&gt; for now. Between optional featured images and different excerpt lengths, there's too much empty space.&lt;/p&gt;

&lt;p&gt;But as with all things flexbox, this is good to know.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://safebooru.org/index.php?page=post&amp;amp;s=view&amp;amp;id=3651800"&gt;Featured image courtesy of this link.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>css</category>
    </item>
    <item>
      <title>How to Choose a PWA Development Agency</title>
      <author>Codica</author>
      <pubDate>Thu, 14 Oct 2021 13:07:14 +0000</pubDate>
      <link>https://dev.to/codicacom/how-to-choose-a-pwa-development-agency-2dpk</link>
      <guid>https://dev.to/codicacom/how-to-choose-a-pwa-development-agency-2dpk</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally posted on &lt;a href="https://www.codica.com/blog/pwa-development-company/"&gt;Codica Blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Progressive web applications are considered one of the most important &lt;a href="https://www.codica.com/blog/top-web-development-trends/"&gt;web development trends for 2021&lt;/a&gt;. PWAs are easy to launch and maintain, being a great alternative for native apps due to their cost-efficiency.&lt;/p&gt;

&lt;p&gt;That is why PWA is a rapidly evolving technology with many software development companies that offer progressive web app development services. And the choice of the software provider for your progressive web app can be quite complicated.&lt;/p&gt;

&lt;p&gt;In this article, we will discuss the main points of choosing the software provider for building your progressive web app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why are PWAs so popular?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The ‚Äúprogressive web application‚Äù term was coined by a Chrome developer Alex Russell and a designer Frances Berriman in 2015. Alex Russell published an &lt;a href="https://infrequently.org/2015/06/progressive-apps-escaping-tabs-without-losing-our-soul/"&gt;article&lt;/a&gt; and revisited the Apple technology of mobile-aimed web apps introduced in 2007. Since that, PWA technology has been expanding and constantly improving.&lt;/p&gt;

&lt;p&gt;You can find the main factors that facilitated the spread of PWAs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Industry leaders support&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The PWA technology is supported by the biggest tech players Google and Microsoft. In particular, Google develops &lt;a href="https://web.dev/progressive-web-apps/"&gt;guidelines and tutorials&lt;/a&gt; and publishes the most fruitful &lt;a href="https://developers.google.com/web/showcase"&gt;progressive web app case studies&lt;/a&gt;. That leads to the fact that programmers are highly likely to consider PWA technology.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advanced system and browser support&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs revise the most significant improvements in the PWA industry that made it possible to create a native-like web experience:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PWAs can be installed on the home screen using almost all modern mobile browsers.&lt;/li&gt;
&lt;li&gt;Progressive web apps can be downloaded via Google Play and Samsung Galaxy store now.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zTfoX9Oh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22ir1e51cznrdltj18lx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTfoX9Oh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22ir1e51cznrdltj18lx.jpg" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.sammobile.com/"&gt;https://www.sammobile.com&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apple Pay is now supported in PWAs.&lt;/li&gt;
&lt;li&gt;Android users can receive push notifications now.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Success for specific domains&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Great examples of AliExpress, Flipkart, OLX, and many others prove that building &lt;a href="https://www.codica.com/blog/5-best-examples-of-pwa-for-e-commerce-marketplaces/"&gt;PWA for the e-commerce industry&lt;/a&gt; can be very profitable. As an example, AliExpress increased the conversion rate for iOS by 82% after launching the PWA. &lt;/p&gt;

&lt;p&gt;Below, you can see the mobile version of the AliExpress progressive web app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZgV0IKK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrw76vmcsd064bzm5ns9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZgV0IKK1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zrw76vmcsd064bzm5ns9.jpg" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other industries that successfully implemented PWA technology include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Travel;&lt;/li&gt;
&lt;li&gt;News;&lt;/li&gt;
&lt;li&gt;Social media and entertainment;&lt;/li&gt;
&lt;li&gt;Rental and housing;&lt;/li&gt;
&lt;li&gt;Beauty, health, and food.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Main aspects of choosing a PWA development company&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The web development field is constantly evolving and expanding, and the number of web developers is thus increasing. That is why the quest for a reliable software development company can be complicated. &lt;/p&gt;

&lt;p&gt;To help you find the right PWA development company, we have formulated the main requirements for the progressive web app development agencies. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Relevant experience and adoption of the best practices&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first thing to check is an experience in PWA development, so the developers should be able to build performing, smooth, and engaging PWAs. You can turn to the portfolio of the software agency to understand if it is a suitable development partner for you.&lt;/p&gt;

&lt;p&gt;By partnering with the team that has relevant experience, you will get more accurate estimates of the time and &lt;a href="https://www.codica.com/blog/progressive-web-application-development-cost-of-services-and-main-tools/"&gt;costs for the PWA development projects&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The companies that specialize in building PWAs should be aware of the best practices for the PWA development provided by Google.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Expertise in web design&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Design plays a big part in the creation of progressive web apps. To achieve an exceptional and engaging user experience in PWAs, we highly recommend following the latest &lt;a href="https://www.codica.com/blog/progressive-web-app-design-7-tips-for-great-ux-and-ui/"&gt;progressive web app design guidelines&lt;/a&gt;. They include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Giving an excellent UX and UI for both desktop and mobile devices;&lt;/li&gt;
&lt;li&gt;Getting rid of footers and leaving only essential information to the navigation bar;&lt;/li&gt;
&lt;li&gt;Allowing users to get back to the exact scroll position;&lt;/li&gt;
&lt;li&gt;Displaying touch interaction;&lt;/li&gt;
&lt;li&gt;Ensuring smooth page loading;&lt;/li&gt;
&lt;li&gt;Creating attractive splash screens and eye-catching home screen logos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Solid and up-to-date programming experience&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When searching for a PWA development agency, opt for candidates with proven experience in using the latest programming languages, frameworks, and tools.&lt;/p&gt;

&lt;p&gt;Speaking of the tech stack we use at Codica, it includes &lt;a href="https://www.codica.com/blog/how-to-create-pwa-with-react/"&gt;React&lt;/a&gt; and Vue.js for the front-end part and Ruby and Ruby on Rails for the back-end part. It helps us deliver fast-loading, engaging, and reliable PWA solutions for our clients.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Development process&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We would recommend that you choose a PWA development company that adopts agile methodology. And here is why. The agile methodology makes it easier for developers to implement new functionality and make needed amends. Also, the development process becomes transparent for both parties that results in increased project control. &lt;/p&gt;

&lt;p&gt;Lastly, &lt;a href="https://www.codica.com/blog/introducing-agile-approach/"&gt;agile product development&lt;/a&gt; helps in prioritizing the development and testing tasks and allocating resources efficiently.&lt;/p&gt;

&lt;p&gt;How Codica can assist you with PWA development&lt;br&gt;
Since 2015, Codica team has been exploring the powerful PWA technology. We subscribe to the view that this technology will remain an important part of the future of the Web. That is why the web applications our team delivers are PWAs by default.&lt;/p&gt;

&lt;p&gt;Also, recently Codica was listed among &lt;a href="https://www.codica.com/blog/codica-named-top-pwa-development-firm/"&gt;Top PWA Development Agencies&lt;/a&gt;, which is a great honor for us.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Case study: &lt;a href="https://www.codica.com/case-studies/insurance-progressive-web-application/"&gt;Insurance PWA&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, we would like to tell you about one of the progressive web apps we successfully delivered recently. It is an insurance application for bicycle riders.&lt;br&gt;
The goal was to build a user-friendly and smooth progressive web app that will allow mobile users to access the full functionality from their phones.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9KxtKg37--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v847hzh7uay7dpzv86cf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9KxtKg37--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v847hzh7uay7dpzv86cf.jpg" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our solution&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The app‚Äôs functionality can be accessed even using a poor network connection.&lt;/li&gt;
&lt;li&gt;Created user-friendly UX and pleasing UI design.&lt;/li&gt;
&lt;li&gt;Built an ultra-secure data storage thanks to blockchain integration.&lt;/li&gt;
&lt;li&gt;Implemented a unique loyalty program that offers a cashback in case users did not have any incidents over the insurance period.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Make sure that your chosen progressive web app development agency has a proven record of building successful PWAs and is great at web design.&lt;/p&gt;

&lt;p&gt;Also, if you want to get more details on how to find the right PWA development company, check our full blog article: &lt;a href="https://www.codica.com/blog/pwa-development-company/"&gt;Progressive Web App Development Agency: What to Consider to Hire the Right One?&lt;/a&gt;&lt;/p&gt;

</description>
      <category>pwa</category>
      <category>webdev</category>
      <category>guide</category>
    </item>
    <item>
      <title>Code Smell 94 - Too Many imports</title>
      <author>Maxi Contieri</author>
      <pubDate>Thu, 14 Oct 2021 13:03:40 +0000</pubDate>
      <link>https://dev.to/mcsee/code-smell-94-too-many-imports-4n14</link>
      <guid>https://dev.to/mcsee/code-smell-94-too-many-imports-4n14</guid>
      <description>&lt;p&gt;&lt;em&gt;If your class relies on too many others, it will be coupled and fragile. A long import list is a good indicator.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TL;DR: Don't import too much.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#problems"&gt;
  &lt;/a&gt;
  Problems
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Coupling&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Single Responsibility Principle violation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Low Cohesion&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#solutions"&gt;
  &lt;/a&gt;
  Solutions
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Break the class&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hide intermediate accidental implementation&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#sample-code"&gt;
  &lt;/a&gt;
  Sample Code
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#wrong"&gt;
  &lt;/a&gt;
  Wrong
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.LinkedList&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.persistence&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.ConcurrentModificationException&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Iterator&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.LinkedList&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.List&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.ListIterator&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.NoSuchElementException&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Queue&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.fermi.common.util.ClassUtil&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.fermi.Data&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//We rely on too many libraries&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Demo&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#right"&gt;
  &lt;/a&gt;
  Right
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.fermi.domainModel&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.fermi.workflow&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//We rely on few libraries&lt;/span&gt;
&lt;span class="c1"&gt;//and we hide their implementation&lt;/span&gt;
&lt;span class="c1"&gt;//So maybe transitive imports are the same&lt;/span&gt;
&lt;span class="c1"&gt;//but we don't break encapsulation&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Demo&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#detection"&gt;
  &lt;/a&gt;
  Detection
&lt;/h1&gt;

&lt;p&gt;We can set a warning threshold on our linters.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#tags"&gt;
  &lt;/a&gt;
  Tags
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Coupling&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ripple Effect&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;We need to think about dependencies when building our solutions to minimize Ripple Effect.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#relations"&gt;
  &lt;/a&gt;
  Relations
&lt;/h1&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--goWt_06h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--qOJvl4uX--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/1b94891f-70d7-43cd-9531-4a58aa009115.jpg" alt="mcsee"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/code-smell-61-coupling-to-classes-3jdk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Code Smell 61 - Coupling to Classes&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri „Éª Feb 4 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#more-info"&gt;
  &lt;/a&gt;
  More Info
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/mcsee/coupling-the-one-and-only-software-design-problem-2pd7"&gt;Coupling: The one and only software design problem&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Namespace"&gt;Namespaces on Wikipedia&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h1&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@zmachacek"&gt;Zdenƒõk Mach√°ƒçek&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/pile"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--JgqeP0oc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1276416822292684801/byTk8MoS_normal.jpg" alt="Davide Bellone üåä üó° profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Davide Bellone üåä üó°
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @bellonedavide
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      An indicator of a class that does too many things - so, that goes against SRP - is the number of imported namespaces.&lt;br&gt;&lt;br&gt;If there are too many referenced namespaces ("using" directives in C#), it means that your class is doing too many things at once.&lt;br&gt;&lt;br&gt;¬†The fewer, the better!
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      18:02 PM - 11 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1447623706767921153" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1447623706767921153" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1447623706767921153" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;blockquote&gt;
&lt;p&gt;Fools ignore complexity. Pragmatists suffer it. Some can avoid it. Geniuses remove it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Alan Perlis&lt;/em&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--goWt_06h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--qOJvl4uX--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/1b94891f-70d7-43cd-9531-4a58aa009115.jpg" alt="mcsee"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/software-engineering-great-quotes-26ci" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Software Engineering Great Quotes&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri „Éª Dec 28 '20 „Éª 13 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#quotes&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#software&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;This article is part of the CodeSmell Series.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--goWt_06h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--qOJvl4uX--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/1b94891f-70d7-43cd-9531-4a58aa009115.jpg" alt="mcsee"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/how-to-find-the-stinky-parts-of-your-code-1dbc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Find the Stinky parts of your Code&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri „Éª May 21 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codequality&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>oop</category>
      <category>programming</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
