<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>10 job interview questions every software developer should know</title>
      <author>Vikram Aditya</author>
      <pubDate>Fri, 28 May 2021 08:17:06 +0000</pubDate>
      <link>https://dev.to/square/10-job-interview-questions-every-software-developer-should-know-3l8b</link>
      <guid>https://dev.to/square/10-job-interview-questions-every-software-developer-should-know-3l8b</guid>
      <description>&lt;p&gt;So you’re looking to become a software developer and join the ranks of highly skilled professionals If you’re in the midst of your job search and need some quick tips to get better prepared for the interview, we can help with that.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#join-thevikcode-newletter-get-daily-which-will-not-be-avaible-here-httpsthevikcodesubstackcom"&gt;
  &lt;/a&gt;
  JOIN THEVIKCODE NEWLETTER ( GET DAILY WHICH WILL NOT BE AVAIBLE HERE ) - &lt;a href="https://thevikcode.substack.com/"&gt;https://thevikcode.substack.com/&lt;/a&gt;
&lt;/h6&gt;

&lt;p&gt;For some, interviews are nerve-racking and difficult. But as long as you prepare with mock interviews, you’ll be ready for anything your future employer might throw your way  – not to mention stand out from other job seekers. If you want to ace the interview and land the job, below are ten questions that every software developer should know how to answer. We’ll follow those with some tips for your interview prep, so you have every chance to edge out the competition.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#10-questions-to-expect-in-your-interview"&gt;
  &lt;/a&gt;
  10 Questions to Expect in Your Interview:
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;What is responsive design? Explain the difference between fixed and fluid layouts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Describe a time where you had to convince a teammate to change their code for a project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is an example of a sandbox? What’s the purpose of one?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do you communicate your progress to your team?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What tools do you like to use to design, develop and debug applications?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What is the best way to collaborate on a coding project?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Describe a time you got something wrong while coding. What did you do about it?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Have you ever worked with someone who didn’t give as much effort as other team members? How did you handle it?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Give an example of a well designed website or product with good user experience. Why do you like it?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Have you ever had a bug in your code that was already in production? How did you communicate/fix the issue?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#tips-for-nailing-your-software-developer-interview"&gt;
  &lt;/a&gt;
  Tips for Nailing Your Software Developer Interview
&lt;/h4&gt;

&lt;p&gt;Getting the job relies on so many factors: your experience, culture fit with the company, and even just dumb luck. But you can give yourself every competitive advantage by going into the interview prepared. Here are some reminders to keep in mind if you’re in the running for your dream developer gig.&lt;/p&gt;

&lt;p&gt;-If you don’t know the answer, just be honest. Developer interviews can get very technical, very fast. If you don’t know the answer to a question, be transparent and tell them that – but remind them that you’re excited to learn. You could even describe another skill that you learned on the last job (or taught yourself) to demonstrate your initiative.&lt;/p&gt;

&lt;p&gt;-Ask questions of your own. Great developers are in high demand. You might get more interview requests, or even competing job offers. So get all of the information you need to decide if the company is a good fit for you, too.&lt;/p&gt;

&lt;p&gt;-Be ready to show off your portfolio. You should have a few of your best projects in one place, like Github. Even if you’ve never had a true developer job, there are other ways to build a portfolio&lt;/p&gt;

&lt;p&gt;These were some general interview questions every programmer should know...&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>devops</category>
    </item>
    <item>
      <title>Solution: Maximum Erasure Value</title>
      <author>seanpgallivan</author>
      <pubDate>Fri, 28 May 2021 08:13:30 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-maximum-erasure-value-1kod</link>
      <guid>https://dev.to/seanpgallivan/solution-maximum-erasure-value-1kod</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/maximum-erasure-value/discuss/1235716"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-1695-medium-maximum-erasure-value"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/maximum-erasure-value/"&gt;Leetcode Problem #1695 (&lt;em&gt;Medium&lt;/em&gt;): Maximum Erasure Value&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You are given an array of positive integers &lt;code&gt;nums&lt;/code&gt; and want to erase a subarray containing &lt;strong&gt;unique elements&lt;/strong&gt;. The score you get by erasing the subarray is equal to the sum of its elements.&lt;/p&gt;

&lt;p&gt;Return &lt;em&gt;the &lt;strong&gt;maximum score&lt;/strong&gt; you can get by erasing &lt;strong&gt;exactly one&lt;/strong&gt; subarray&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;An array &lt;code&gt;b&lt;/code&gt; is called to be a subarray of &lt;code&gt;a&lt;/code&gt; if it forms a contiguous subsequence of &lt;code&gt;a&lt;/code&gt;, that is, if it is equal to &lt;code&gt;a[l],a[l+1],...,a[r]&lt;/code&gt; for some &lt;code&gt;(l,r)&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;nums = [4,2,4,5,6]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;The optimal subarray here is [2,4,5,6].&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;nums = [5,2,1,2,5,2,1,2,5]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;The optimal subarray here is [5,2,1] or [1,2,5].&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;lt;= nums.length &amp;lt;= 10^5&lt;/li&gt;
&lt;li&gt;1 &amp;lt;= nums[i] &amp;lt;= 10^4&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Like most problems that ask about a contiguous subarray, this problem naturally calls for a &lt;strong&gt;2-pointer sliding window&lt;/strong&gt; approach. There are a few ways we can keep track of the contents of the sliding window, but since the constraint upon &lt;strong&gt;nums[i]&lt;/strong&gt; is fairly small, we can use the faster &lt;strong&gt;arraymap&lt;/strong&gt; (&lt;strong&gt;nmap&lt;/strong&gt;) method, rather than a &lt;strong&gt;hashmap&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So as we iterate our sliding window through &lt;strong&gt;nums&lt;/strong&gt;, we'll move our &lt;strong&gt;right&lt;/strong&gt; pointer forward, increasing the counter for the appropriate number in &lt;strong&gt;nmap&lt;/strong&gt;. If that bucket in &lt;strong&gt;nmap&lt;/strong&gt; goes above &lt;strong&gt;1&lt;/strong&gt;, then we know that the newly-added number isn't unique in our sliding window, so we need to increase the &lt;strong&gt;left&lt;/strong&gt; pointer until the counter is reduced back to &lt;strong&gt;1&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We should also, of course, keep track of the sum &lt;strong&gt;total&lt;/strong&gt; of the sliding window. At each iteration, once we've confirmed the uniqueness of the contents of the sliding window, we should also update our &lt;strong&gt;best&lt;/strong&gt; result so far. Then, once we're done, we can just &lt;strong&gt;return best&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Time Complexity: O(N)&lt;/strong&gt; where &lt;strong&gt;N&lt;/strong&gt; is the length of &lt;strong&gt;nums&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Space Complexity: O(10001)&lt;/strong&gt; for &lt;strong&gt;nmap&lt;/strong&gt; keeping track of numbers from &lt;strong&gt;0&lt;/strong&gt; to &lt;strong&gt;10^4&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;maximumUniqueSubarray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;nmap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Int8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10001&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;nmap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nmap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;nmap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="nx"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;best&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;best&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;maximumUniqueSubarray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;nmap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;nmap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;nmap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;nmap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;maximumUniqueSubarray&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;short&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;nmap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10001&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;nmap&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;]]++;&lt;/span&gt;
            &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nmap&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;nmap&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;]]--;&lt;/span&gt;
                &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;++];&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maximumUniqueSubarray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;nmap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10001&lt;/span&gt;&lt;span class="p"&gt;]{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;nmap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nmap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;nmap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>On Meritocracy</title>
      <author>James Seconde</author>
      <pubDate>Fri, 28 May 2021 07:40:55 +0000</pubDate>
      <link>https://dev.to/secondej/on-meritocracy-1gh7</link>
      <guid>https://dev.to/secondej/on-meritocracy-1gh7</guid>
      <description>&lt;p&gt;I am a product of the PHP community - it's how I got into software development, it's why I have my career, it's why I now do Developer Relations.&lt;/p&gt;

&lt;p&gt;There are three factors that made me choose this path. They are all from the same conference, in 2012. Those factors are three specific speakers:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Jenny Wong&lt;/li&gt;
&lt;li&gt;Lorna Mitchell&lt;/li&gt;
&lt;li&gt;Jessica Rose&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You see, the thing is, to my naive eyes at that point in my tech career it didn't strike me as at all different in any way that these three people were not men. What I had failed to acknowledge is the reason &lt;em&gt;why&lt;/em&gt; there was such a top line-up at PHPUK 2012. The reason was because it was being curated by people who were levelling up the field by doing research and getting the best people in to speak that represented what the community -should- look like due to the talent out there. Only now, with a lot more experience from networking with communities and developers have I realised that sexism is absolutely rampant in the field I am supposed to call my home. But why hadn't I noticed?&lt;/p&gt;

&lt;p&gt;Let's talk about the "CIS-white-man-privilege" card.&lt;/p&gt;

&lt;p&gt;To some, using these terms may cause an inevitable groan that conjure up other terms from the other side of the fence such as "Social Justice Warrior". My role here, however, is to convince you (if you've groaned) that this card exists, so I'll back it up with evidence of my experiences.&lt;/p&gt;

&lt;p&gt;I wanted to be a developer, so I went to meetups. I went to conferences. I spoke with other developers. I confidently bagged a backend developer role, entering as a junior, in my 30's. I have no CS degree, I had no experience as a software developer at the time. I was enthusiastic, eager to learn. That's all you need right?&lt;/p&gt;

&lt;p&gt;When entering into tech this way and getting into Developer Relations, again I was confident. I wanted to do it, I started speaking, I started writing. I convinced a business to let me do these things. I started my own meetup. I did all of these things without being challenged. And the reason &lt;em&gt;why&lt;/em&gt; I hadn't been challenged is because I'd got wind that tech was a meritocracy: that "Uncle" Bob Martin had said it was all about the code. Nothing more, nothing less.&lt;/p&gt;

&lt;p&gt;It's not though, is it? It's not a meritocracy:&lt;/p&gt;

&lt;p&gt;I've not been at a conference as a developer and been mistaken for a recruiter or sales because of my gender.&lt;/p&gt;

&lt;p&gt;When building my public brand, I've not had direct messages on Twitter advising me that right now, my best option is to quit tech and raise children at home.&lt;/p&gt;

&lt;p&gt;After speaking at events, I've not had unsolicited emails with twenty five bullet points on advice about how to make my talk better.&lt;/p&gt;

&lt;p&gt;I've not had to justify my position as being a software developer by being questioned in-depth about a super-abstract computer science concept because I made a passing remark in conversation.&lt;/p&gt;

&lt;p&gt;Yes, these are real world cases, so we need to stop pretending this doesn't happen. If you think it doesn't happen, the important line I want you to acknowledge is that the truth is &lt;em&gt;"it doesn't happen to me"&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I first started encountering things like this in my first agency environment, where the Christmas party, consisting of about 55 developers -of which only two were not male- decended into (I'm not joking here) an arm-wrestling contest. At that company I also vividly remember an individual in management assessing the looks of a visiting recruiter out loud to no response. The blank response resulted in them exclaiming, "was that sexist? It was probably sexist. Ah, well", and everyone turned their chairs back to their screens.&lt;/p&gt;

&lt;p&gt;This isn't the industry I want to work in. I mean, this is behind closed doors - if you want to see it in public, I'd say &lt;a href="https://twitter.com/zuzana_kunckova"&gt;Zuzana Kunckova&lt;/a&gt; announcing the creation of the Larabelles community for non-male Laravel developers was a pretty good example. I'm not going to post the link, but a ton of developers dogpiled in with "why is there a need for this, we're all equal? This is dividing us and is pointless". &lt;/p&gt;

&lt;p&gt;It wasn't the right question. The right question should have been, "what has made non-male developers feel like they need to set up a new community with an emphasis on it being a safe environment?" That's the real question, and the ones they were asking answered the question I put forward perfectly.&lt;/p&gt;

&lt;p&gt;There is one final example of this to give, and it's important to me because it is the reason I have finally written an article like this.&lt;/p&gt;

&lt;p&gt;This article was written for &lt;a href="https://unbreak.tech/"&gt;unbreak.tech&lt;/a&gt;, an initative from &lt;a href="https://twitter.com/whitep4nth3r"&gt;whitep4nth3r&lt;/a&gt; that was created after a twitch raid that saw her enduring a shocking wave of sexual harrassment. Non-male tech streamers should not have to experience this in these times. This is appalling. My regret when writing this article is that, on seeing this being unbreak being created, I haven't taken as much action as I could have.&lt;/p&gt;

&lt;p&gt;One of my objectives with this article is to point out how bad things are, still, in 2021. The other is showing how we can change things.&lt;/p&gt;

&lt;p&gt;In my talk of 2019 on elitism in tech, I advocated for steering away from what I described as "gatekeeper hell" by using &lt;a href="https://en.wikipedia.org/wiki/Nudge_theory"&gt;nudge theory&lt;/a&gt;. We all have a small part to play in 'nudging' people away from outdated stereotypes. But does it work?&lt;/p&gt;

&lt;p&gt;Yes, it does. We need allies within our ranks to lead by example. The example I always go to is &lt;a href="https://twitter.com/SamanthaGeitz/status/1167065400502345728"&gt;Samantha Geitz's story about her first Laracon experience.&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We need more leaders like Matt. &lt;/p&gt;

&lt;p&gt;We need more allies. &lt;/p&gt;

&lt;p&gt;We all need to do our bit.&lt;/p&gt;

</description>
      <category>devrel</category>
      <category>community</category>
      <category>culture</category>
    </item>
    <item>
      <title>JavaScript Oddities and Secrets you need to know</title>
      <author>Rahul</author>
      <pubDate>Fri, 28 May 2021 07:33:59 +0000</pubDate>
      <link>https://dev.to/rahxuls/javascript-oddities-and-secrets-you-need-to-know-313p</link>
      <guid>https://dev.to/rahxuls/javascript-oddities-and-secrets-you-need-to-know-313p</guid>
      <description>&lt;p&gt;In this post, I will cover some things that are cool and most of you're unaware of. Let' see them. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#null-is-an-object"&gt;
  &lt;/a&gt;
  Null is an Object
&lt;/h3&gt;

&lt;p&gt;Null is an object. Despite this, null is not considered as an instance of an object. This brings us back to sanity, because if null is the absence of value, then it obviously can't be an instance of anything. Hence, the following evaluates to false:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// alerts 'object'&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// evaluates false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#nan-is-a-number"&gt;
  &lt;/a&gt;
  NaN is a Number
&lt;/h3&gt;

&lt;p&gt;NaN is not equal to anything. The only way to confirm that something is NaN is through the function &lt;code&gt;isNaN()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="kc"&gt;NaN&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// alerts 'Number'&lt;/span&gt;
&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;NaN&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;NaN&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// evaluated false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#replate-can-accept-callback-function"&gt;
  &lt;/a&gt;
  Replate() can accept callback function
&lt;/h3&gt;

&lt;p&gt;This is one of JavaScript's bect keep secrets and it arrived in v1.3 Most usages of replace() looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10 13 21 48 52&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\d&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; 
&lt;span class="c1"&gt;// replace all numbers with *&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the simple replacement: a string, an asterisk. But what if we wanted more control over how and when our replacements take place? What if we wanted to replace only the number under 3? This can't be achieved with ReGex alone. We need to jump into the callback function to evaluate each match.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10 13 21 48 52&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\d&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}));&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For every match made, JavaScript calls our callback function, passing the match as an argument. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#undefined-can-be-defined"&gt;
  &lt;/a&gt;
  Undefined can be defined
&lt;/h3&gt;

&lt;p&gt;Strange as it might sound, undefined is not a reserved word in JavaScript, even though it has special meaning and is the only way to determine whether a variable is undefined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// foo string&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#an-array-with-no-keys-faleabout-truthy-and-false"&gt;
  &lt;/a&gt;
  An array with no keys == fale(about truthy and false)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// evaluates true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In JavaScript, every non-boolean value has a built-in boolean flag that is called on when the value is asked to behave like a boolean. False, zero, null, undefined, empty strings and NaN all end up becoming false - not permanently, just for the given expression. &lt;/p&gt;

&lt;p&gt;--&lt;/p&gt;

&lt;p&gt;Thanks for Reading, If you like this post please comment😎. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to create a notification badge with CSS ?</title>
      <author>murtuza</author>
      <pubDate>Fri, 28 May 2021 06:32:55 +0000</pubDate>
      <link>https://dev.to/murtuzaalisurti/how-to-create-a-notification-badge-with-css-only-2nf8</link>
      <guid>https://dev.to/murtuzaalisurti/how-to-create-a-notification-badge-with-css-only-2nf8</guid>
      <description>&lt;p&gt;Notification badges annoy me most of the times by popping up every now and then and I am pretty sure most of you experience similar thing, but anyways, let's see how we can create a notification badge using CSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-html"&gt;
  &lt;/a&gt;
  Step 1: HTML
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wKXO2ge7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ktqhofthxj3s9niv6wn0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wKXO2ge7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ktqhofthxj3s9niv6wn0.png" alt="html markup"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The element with a class '&lt;em&gt;base&lt;/em&gt;' will act as a profile image or an icon upon which we will position the notification indicator element having a class '&lt;em&gt;indicator&lt;/em&gt;'.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-css"&gt;
  &lt;/a&gt;
  Step 2: CSS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OhJlu4qM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6g8srct3wac5itp7r0zc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OhJlu4qM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6g8srct3wac5itp7r0zc.png" alt="css"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First of all, we have to set up the height and width of the main '&lt;em&gt;base&lt;/em&gt;' element. Then we set the border-radius property to 50%. Border radius rounds the edges of the border by a specified amount. In our case the height and width of the element are equal and so, when we apply border radius of 50%, a square looking element will transform to a circle.&lt;/p&gt;

&lt;p&gt;After applying a background color, the base element will look like a circle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---KGHRCCP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4gklfzuooiohhgkaexk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---KGHRCCP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4gklfzuooiohhgkaexk.png" alt="circle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, set the position of the base element to '&lt;em&gt;relative&lt;/em&gt;' which means that it will be positioned relative to its current position. This will not change anything but we want this property to position the child elements, more on that in a second.&lt;/p&gt;

&lt;p&gt;You can also add an image instead of a background color to the base element, just like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dkzr9A8w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7idhaujbdn0h9085a3d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dkzr9A8w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7idhaujbdn0h9085a3d.png" alt="css"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's design the indicator.&lt;/p&gt;

&lt;p&gt;First of all, set the position of the indicator as '&lt;em&gt;absolute&lt;/em&gt;' which means that it will be positioned inside the ancestor element which has its position as '&lt;em&gt;relative&lt;/em&gt;'.&lt;/p&gt;

&lt;p&gt;Then, we will define the final location of the indicator by setting the values of &lt;em&gt;top, bottom, right and left&lt;/em&gt; properties of the indicator.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8W2gB6Q0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qfqdmfx3hwjgrn85qg5v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8W2gB6Q0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qfqdmfx3hwjgrn85qg5v.png" alt="css"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The '&lt;em&gt;bottom&lt;/em&gt;' property will offset the '&lt;em&gt;indicator&lt;/em&gt;' element by 60% of the height of the '&lt;em&gt;base&lt;/em&gt;' element from the bottom of the '&lt;em&gt;base&lt;/em&gt;' element.&lt;/p&gt;

&lt;p&gt;Similarly, the '&lt;em&gt;left&lt;/em&gt;' property will offset the '&lt;em&gt;indicator&lt;/em&gt;' element by 60% of the width of the '&lt;em&gt;base&lt;/em&gt;' element from the left of the '&lt;em&gt;base&lt;/em&gt;' element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0bNJMwR6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7r3um4t3cdzle5esi3sg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0bNJMwR6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7r3um4t3cdzle5esi3sg.png" alt="result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we will add a border having the color same as the '&lt;em&gt;body&lt;/em&gt;' element having a border-radius of 50%.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Soe50yt3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cy0zrt0jhi4sow29g3f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Soe50yt3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cy0zrt0jhi4sow29g3f.png" alt="css"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, we will style the notification counter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--suFdPkTa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7g024r8zt02ktfrdrhzk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--suFdPkTa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7g024r8zt02ktfrdrhzk.png" alt="css"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to center the notification count number, we can add '&lt;em&gt;flex&lt;/em&gt;' properties to its parent element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ggawgNr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bj6u344un13bwo2c1s6c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ggawgNr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bj6u344un13bwo2c1s6c.png" alt="css"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The final output will be:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MMD-2fz6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1c8qilqsqbzzhb45ish1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MMD-2fz6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1c8qilqsqbzzhb45ish1.png" alt="final output"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Taking Advantage of the platform with Sutil and Web Components</title>
      <author>Angel D. Munoz</author>
      <pubDate>Fri, 28 May 2021 06:11:53 +0000</pubDate>
      <link>https://dev.to/tunaxor/taking-advantage-of-the-platform-with-sutil-and-web-components-5hm0</link>
      <guid>https://dev.to/tunaxor/taking-advantage-of-the-platform-with-sutil-and-web-components-5hm0</guid>
      <description>&lt;p&gt;Hello everyone, here we are once again with another F# blog post. &lt;/p&gt;

&lt;p&gt;This time I want to bring attention to a project that has caught my eye and fits my way of doing web development from F#&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/davedawkins"&gt;
        davedawkins
      &lt;/a&gt; / &lt;a href="https://github.com/davedawkins/Sutil"&gt;
        Sutil
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      An experiment in applying the Svelte design to native Fable
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Sutil (was Sveltish) &lt;a href="https://www.nuget.org/packages/Sutil" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/975fe2fc9284dd7893c6cfd22be3a9da05dd0d7e1ad4cf1489c0c8b86c2e5223/68747470733a2f2f696d672e736869656c64732e696f2f6e756765742f762f537574696c2e7376673f6d61784167653d3026636f6c6f72423d627269676874677265656e" alt="Nuget"&gt;&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;An experiment in applying the design principles from &lt;a href="https://svelte.dev/" rel="nofollow"&gt;Svelte&lt;/a&gt; to native Fable, mixed with &lt;a href="https://github.com/elmish/elmish"&gt;Elmish&lt;/a&gt; and &lt;a href="https://github.com/Zaid-Ajaj/Feliz"&gt;Feliz&lt;/a&gt;. Sutil has no JS dependencies (such as React).&lt;/p&gt;
&lt;p&gt;A Feliz-style DSL is supplied by &lt;a href="https://github.com/alfonsogarciacaro/Feliz.Engine"&gt;Feliz.Engine&lt;/a&gt;.
Sutil implements Elmish by importing parts of &lt;a href="https://github.com/elmish/elmish"&gt;Elmish&lt;/a&gt;.
Transitions and most examples are ported directly from &lt;a href="https://svelte.dev/" rel="nofollow"&gt;Svelte&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;At first I thought that we might make use of a Fable compiler plugin to generate boilerplate, but it turns out that F# does a pretty good job of that itself.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://davedawkins.github.io/Sutil/" rel="nofollow"&gt;Sutil website&lt;/a&gt; for &lt;a href="https://davedawkins.github.io/Sutil/#examples-animation" rel="nofollow"&gt;demos&lt;/a&gt; and documentation for &lt;a href="https://davedawkins.github.io/Sutil/#documentation-installation" rel="nofollow"&gt;getting started&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/davedawkins/Sutil"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;p&gt;Sutil is an abstraction over &lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt; in contrast to &lt;a href="https://zaid-ajaj.github.io/Feliz/"&gt;Feliz&lt;/a&gt; which is an abstraction over &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; both projects allow you to do web development the only (and radical) difference is that when you do your F# there's a different engine under the hood when you website runs.&lt;/p&gt;

&lt;p&gt;If you have control over the SPA you're building you can use whatever you want that is for sure but, let's say you work for a company who has multiple products and then something like this happens:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We're going to go under a transformation process, we will create a design system for our branding and all of our applications will use the same core components, we have formed a team that has chosen the &lt;em&gt;Lit | Stencil | FAST&lt;/em&gt; library, don't worry you will be slowly replacing parts of existing applications with these core components in the future.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since web components work on all modern browsers and are framework agnostic since they work as native tags e.g. you can use them inside Vue, Aurelia, Angular, Svelte, you name it (even react with some caveats).&lt;/p&gt;

&lt;p&gt;So now you have to make company's components work with your existing (or new) Fable SPA's.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The source code for this post can be found in this repository&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/AngelMunoz"&gt;
        AngelMunoz
      &lt;/a&gt; / &lt;a href="https://github.com/AngelMunoz/sutil-and-web-components"&gt;
        sutil-and-web-components
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h2&gt;
Sutil Template for Elmish&lt;/h2&gt;
&lt;p&gt;This is a Sutil (&lt;strong&gt;Svelte&lt;/strong&gt;) application template which kind of shows a bit how you can* structure sutil applications and work with stores&lt;/p&gt;
&lt;h2&gt;
Check out these files&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Main.fs&lt;/li&gt;
&lt;li&gt;App.fs&lt;/li&gt;
&lt;li&gt;Components/Skeleton.fs&lt;/li&gt;
&lt;li&gt;Pages/Home.fs&lt;/li&gt;
&lt;li&gt;styles.css&lt;/li&gt;
&lt;li&gt;snowpack.config.js&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Quick Start&lt;/h3&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;dotnet tool restore
pnpm install # or npm install or yarn install
pnpm start # or npm run start or yarn run start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;* this is not a strict way to do it it's just &lt;em&gt;A Way&lt;/em&gt; to do it so feel free to remove/add whatever you need in your day to day&lt;/p&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
  &lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/AngelMunoz/sutil-and-web-components"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#a-word-on-web-component-distribution"&gt;
  &lt;/a&gt;
  A word on Web Component Distribution
&lt;/h3&gt;

&lt;p&gt;Web components are usually distributed as ES Modules (sometimes with polyfills to port back to older browsers) and are often easy to install&lt;/p&gt;

&lt;blockquote&gt;

&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.0.0-beta.41/dist/themes/base.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.0.0-beta.41/dist/shoelace.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;p&gt;Just drop those tags and you can start using shoelace components in your application, no bundling, no Webpack, no preprocessors no whatever you fear from the JS ecosystem. which make them compelling in some places where no JS frameworks are actually that useful (e.g. server side rendered applications or multi page apps)&lt;/p&gt;

&lt;p&gt;In our case we're building a Sutil SPA which it means we're likely using a bundling system like Snowpack/Webpack so we will have to do the classic  &lt;code&gt;npm install @shoelace-style/shoelace&lt;/code&gt; and then import every component we want with side effects because we don't want our app bundle to grow massively in size.&lt;/p&gt;

&lt;p&gt;Now back to the integration, web components are often registered like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="cm"&gt;/*... */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;different libraries define them different but the &lt;code&gt;customElements.register&lt;/code&gt; is for EVERY component out there.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;therefore most of the time what you'll see when dealing with web components will be a single import&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-component.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;In our case I'll be using &lt;a href="https://shoelace.style/"&gt;Shoelace&lt;/a&gt; as the web component library in this repo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Having that said, if we take a look at &lt;code&gt;Main.fs&lt;/code&gt;. We're importing  each component as needed&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Fable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Core&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Sutil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;DOM&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Fable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;JsInterop&lt;/span&gt;

&lt;span class="n"&gt;importSideEffects&lt;/span&gt; &lt;span class="s2"&gt;"./styles.css"&lt;/span&gt;
&lt;span class="n"&gt;importSideEffects&lt;/span&gt; &lt;span class="s2"&gt;"@shoelace-style/shoelace/dist/themes/base.css"&lt;/span&gt;

&lt;span class="n"&gt;importDefault&lt;/span&gt; &lt;span class="s2"&gt;"@shoelace-style/shoelace/dist/components/button/button.js"&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ignore&lt;/span&gt;

&lt;span class="n"&gt;importDefault&lt;/span&gt; &lt;span class="s2"&gt;"@shoelace-style/shoelace/dist/components/skeleton/skeleton.js"&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ignore&lt;/span&gt;

&lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ImportMember&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"@shoelace-style/shoelace/dist/utilities/base-path.js"&lt;/span&gt;&lt;span class="o"&gt;)&amp;gt;]&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;setBasePath&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;unit&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jsNative&lt;/span&gt;

&lt;span class="c1"&gt;// this requires a specific configuration for shoelace&lt;/span&gt;
&lt;span class="c1"&gt;// check snowpack.config.js&lt;/span&gt;
&lt;span class="n"&gt;setBasePath&lt;/span&gt; &lt;span class="s2"&gt;"shoelace"&lt;/span&gt;

&lt;span class="c1"&gt;// Start the app&lt;/span&gt;
&lt;span class="nn"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mountElement&lt;/span&gt; &lt;span class="s2"&gt;"sutil-app"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Usually we would use importSideEffects "the-library/component.js" (like above) but the documentation of shoelace says that we should do default imports with their particular implementation to prevent bloated bundles and enable tree shaking hence why we import and ignore at the same time.&lt;/p&gt;

&lt;p&gt;Please note the &lt;code&gt;.js&lt;/code&gt; at the end (it's very important for snowpack to work properly, you can ignore it in the case of other bundlers as far as i know)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What we just did is to import the library's (either third party or your company's initiative one) components into the browser, now every time we write a &lt;code&gt;sl-button&lt;/code&gt; or &lt;code&gt;sl-skeleton&lt;/code&gt; the browser will understand that a custom element will be rendered.&lt;/p&gt;

&lt;p&gt;Generally speaking Web Components work in the following way&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pass attributes for values&lt;/p&gt;

&lt;p&gt;which can set internally a property, please note also that properties are not the same as attributes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Emit Events/CustomEvents so you can update attributes/properties as you need&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;There are some cases where web components need you to call a method of that instance so you will have to query for a reference of that element to get the instance and then invoke the method. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That means that 80%-95% (based on my not comprobable experience) of the time you would just define attributes and listen for events.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-web-components-in-sutil"&gt;
  &lt;/a&gt;
  Using Web Components In Sutil
&lt;/h3&gt;

&lt;p&gt;The Sutil DSL is very complete and permissive where needed i.e. you can use &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Css.custom("align-self", "stretch")&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Attr.custom("some-attribute", "my-value")&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Html.custom("my-tag", [])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on "event-name" handler modifiers&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onCustomEvent&amp;lt;'T&amp;gt; "event-name" handler modifiers&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you can't find a property in the Sutil DSL you can report it to the repository but with these helpers you can easily continue working without having to wait for a fix.&lt;/p&gt;

&lt;p&gt;There are several ways we can use these web components but we'll start with the most raw one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="nn"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"sl-button"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;type'&lt;/span&gt; &lt;span class="s2"&gt;"sucess"&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s2"&gt;"This is a Web Component Button"&lt;/span&gt;
    &lt;span class="n"&gt;onClick&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="s2"&gt;"Hey success!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Check &lt;a href="https://shoelace.style/components/button"&gt;https://shoelace.style/components/button&lt;/a&gt; for the component documentation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Cool that should give us a green button on our screen if we imported the button in the main file&lt;/p&gt;

&lt;p&gt;let's try a circle button with an icon&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="nn"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"sl-button"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nn"&gt;Attr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"circle"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="nn"&gt;Attr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"size"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"large"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="n"&gt;onClick&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="s2"&gt;"Hey circle!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;
     &lt;span class="nn"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"sl-icon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nn"&gt;Attr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"gear"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this should give us something like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1T6ZquKy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wehd9c25xezfapxgsgza.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1T6ZquKy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wehd9c25xezfapxgsgza.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;no effort at all well perhaps a few keystrokes but that's it no need for wrappers, no need for bindings just the standard sutil bindings. let's try something fancier, something that emits an event let's try a menu&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;printValue&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="c1"&gt;// current work around until a new release with `onCustomEvent&amp;lt;'T&amp;gt;` is out&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;event&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:?&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;CustomEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;{|&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;{|&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|}&lt;/span&gt; &lt;span class="o"&gt;|}&amp;gt;)&lt;/span&gt;

    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="k"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detail&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt; &lt;span class="k"&gt;event&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="s2"&gt;"Got: {event.item.value}"&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;printfn&lt;/span&gt; &lt;span class="s2"&gt;"Got nothing"&lt;/span&gt;

&lt;span class="nn"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="s2"&gt;"sl-menu"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nn"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"sl-menu-item"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nn"&gt;Attr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="s2"&gt;"First"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s2"&gt;"First"&lt;/span&gt; &lt;span class="o"&gt;])&lt;/span&gt;
    &lt;span class="nn"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"sl-menu-item"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nn"&gt;Attr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="s2"&gt;"Second"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s2"&gt;"Second"&lt;/span&gt; &lt;span class="o"&gt;])&lt;/span&gt;
    &lt;span class="nn"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"sl-menu-divider"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="s2"&gt;"sl-select"&lt;/span&gt; &lt;span class="n"&gt;printValue&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Although, we know here that we want to know the &lt;code&gt;value&lt;/code&gt; property sometimes to have proper support for the element type we will need to create a proper binding&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;handling custom events isn't that hard either even if we had to put a workaround which shouldn't be the case once the next release of Sutil (at the current time of writing) is out.&lt;/p&gt;

&lt;p&gt;There are some components that are a little bit more complex like a drawer or a dialog which have actual methods for those elements you will need to write a small binding or if the component allows it act on it with its attributes/properties&lt;/p&gt;

&lt;p&gt;let's check a dialog as an example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;SlDialog&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;inherit&lt;/span&gt; &lt;span class="nc"&gt;HTMLElement&lt;/span&gt;

  &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;unit&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;JS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;unit&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;member&lt;/span&gt; &lt;span class="n"&gt;hide&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;unit&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;JS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;unit&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;openDialog&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;dialog&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;querySelector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"sl-dialog"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dialog&lt;/span&gt; &lt;span class="o"&gt;:?&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;SlDialog&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ignore&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;closeDialog&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;:?&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;HTMLElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parentElement&lt;/span&gt; &lt;span class="o"&gt;:?&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;SlDialog&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;hide&lt;/span&gt; &lt;span class="bp"&gt;()&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ignore&lt;/span&gt;

&lt;span class="nn"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"sl-button"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;type'&lt;/span&gt; &lt;span class="s2"&gt;"warning"&lt;/span&gt;
      &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s2"&gt;"Open Dialog"&lt;/span&gt;
      &lt;span class="n"&gt;onClick&lt;/span&gt; &lt;span class="n"&gt;openDialog&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nn"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"sl-dialog"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nn"&gt;Attr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"label"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"My Dialog"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nn"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;"sl-button"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;type'&lt;/span&gt; &lt;span class="s2"&gt;"primary"&lt;/span&gt;
          &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="s2"&gt;"Close"&lt;/span&gt;
          &lt;span class="nn"&gt;Attr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"slot"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"footer"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="n"&gt;onClick&lt;/span&gt; &lt;span class="n"&gt;closeDialog&lt;/span&gt; &lt;span class="bp"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="o"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I think this might be the "worst case" scenario given that you would have to manually query for the element in the DOM, then add a binding (which is just extending HTMLElement) the simpler way in the case of this library is just to change the open attribute/property.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;p&gt;When dealing with web components (either from our design system or third party individual components) we want to do a few things&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the Element via Script Tag or ESModule Import&lt;/li&gt;
&lt;li&gt;Use any of the following to define your element, its attributes and react to its changes

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Html.custom("", [])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Attr.custom("", "")&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on "event-name" handler []&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;style the css parts it has&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;while I didn't touch styling, you'll find that I overrode some variables in the styles.css file at the bottom&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-color-scheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--su-background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2f2f2f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c"&gt;/* The following are defined by the shoelace library and changed by us to
       let the component adapt to our color scheme */&lt;/span&gt;
    &lt;span class="py"&gt;--sl-color-gray-700&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--su-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="py"&gt;--sl-color-primary-500&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--su-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If there's need for a styling write up as well let me know.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing thoughts
&lt;/h2&gt;

&lt;p&gt;If you like the React way of doing things (which fits completely in the functional programming realm) feel free to visit the (extremely good, even if you're not choosing Feliz give it a read) &lt;a href="https://zaid-ajaj.github.io/the-elmish-book/#/"&gt;Elmish Book&lt;/a&gt; which can give you a really good guidance on how to develop SPA's with F# and the &lt;a href="https://fable.io/"&gt;Fable Compiler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you like svelte or you don't want to do everything react style (hooks, context, etc) then Sutil offers you an alternative that is quite compelling based on observables and works as any other framework. That means you can go back to certain browser API's that are automatically ruled out when using React like the Events and CustomEvents. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components"&gt;Web Components&lt;/a&gt; are not ruled out but react &lt;a href="https://reactjs.org/docs/web-components.html"&gt;has some friction&lt;/a&gt; with them.&lt;/p&gt;

&lt;p&gt;Let me know what you think! ping me on twitter or in the comments below 😁 have an awesome weekend!&lt;/p&gt;

</description>
      <category>fsharp</category>
      <category>svelte</category>
      <category>webcomponents</category>
      <category>litelement</category>
    </item>
    <item>
      <title>Keycloak on Distroless</title>
      <author>Λ\: Davin Kevin</author>
      <pubDate>Fri, 28 May 2021 06:04:52 +0000</pubDate>
      <link>https://dev.to/stack-labs/keycloak-on-distroless-12ng</link>
      <guid>https://dev.to/stack-labs/keycloak-on-distroless-12ng</guid>
      <description>&lt;p&gt;&lt;strong&gt;Keycloak&lt;/strong&gt; is a wonderful piece of software, managed with success by RedHat, to be used as an Identity and Access Management software. RedHat distribute it as a zip package to be run on a machine with a JVM installed or as a container. Nowadays, container is a simpler solution, especially if you are using an orchestrator like &lt;a href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Keycloak&lt;/strong&gt; image is available on the &lt;a href="https://hub.docker.com/r/jboss/keycloak/"&gt;DockerHub&lt;/a&gt; or &lt;a href="https://quay.io/repository/keycloak/keycloak"&gt;Quay&lt;/a&gt;. It  provides an important level of configuration through environment variables, which is useful if you are not familiar with &lt;strong&gt;WildFly&lt;/strong&gt; configuration. But, this solution has an important downside, especially for a tool dedicated to security… tags are not maintained at OS level over time and has many vulnerabilities.&lt;/p&gt;

&lt;p&gt;You can see below, a lot of vulnerabilities in the latest &lt;strong&gt;Keycloak&lt;/strong&gt; image, especially at the OS level. In some case, you can't choose to rely on so many vulnerabilities and need to fix that, or at least reduce them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;trivy image jboss/keycloak:13.0.1
2021-05-26T19:23:14.416+0200    INFO    Detected OS: redhat
2021-05-26T19:23:14.416+0200    INFO    Detecting RHEL/CentOS vulnerabilities...
2021-05-26T19:23:14.432+0200    INFO    Number of PL dependency files: 621

jboss/keycloak:13.0.1 &lt;span class="o"&gt;(&lt;/span&gt;redhat 8.4&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;==================================&lt;/span&gt;
Total: 118 &lt;span class="o"&gt;(&lt;/span&gt;UNKNOWN: 0, LOW: 49, MEDIUM: 67, HIGH: 2, CRITICAL: 0&lt;span class="o"&gt;)&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Number of CVEs in an image evolves over time, so reports in this article can be way different if you run it by yourself.&lt;/p&gt;

&lt;p&gt;On one side, you can choose to upgrade every packages in the image manually, hoping a fix is available in the official CentOS registry. Another solution is to change the &lt;em&gt;base image&lt;/em&gt; to something with less vulnerability like &lt;a href="https://github.com/GoogleContainerTools/distroless"&gt;Google Distroless&lt;/a&gt;. Those images only contain the runtime for your application and nothing less… no shell, no package manager, nothing… just your runtime. For &lt;strong&gt;Keycloak&lt;/strong&gt;, we will use the &lt;a href="https://github.com/GoogleContainerTools/distroless/tree/main/java"&gt;Distroless Java&lt;/a&gt; image to sanitize our workload.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kC_vTSbk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1qjax5xrl53le9h72piu.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kC_vTSbk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1qjax5xrl53le9h72piu.jpeg" alt="Nothing in distroless"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#crafting-the-best-dockerfile-possible"&gt;
  &lt;/a&gt;
  Crafting the best Dockerfile possible
&lt;/h1&gt;

&lt;p&gt;The original &lt;strong&gt;Keycloak&lt;/strong&gt; image use a lot of &lt;code&gt;bash&lt;/code&gt; scripts to configure the whole system. This is a good idea, but here, we don't have any shell in our &lt;strong&gt;Distroless&lt;/strong&gt; base image, so we will have to extract the application, and the way to launch it from &lt;strong&gt;scratch&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#moving-keycloak-into-distroless"&gt;
  &lt;/a&gt;
  Moving Keycloak into Distroless
&lt;/h2&gt;

&lt;p&gt;If we analyse the &lt;code&gt;jboss/keycloak:13.0.1&lt;/code&gt; image with &lt;a href="https://github.com/wagoodman/dive"&gt;Dive&lt;/a&gt;, we can see all &lt;strong&gt;Keycloak&lt;/strong&gt; related files are stored into &lt;code&gt;/opt/jboss/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Av5yPa5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kyd201hv91x9uww7sku.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Av5yPa5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kyd201hv91x9uww7sku.png" alt="dive"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will copy them into our distroless then, with the following &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; jboss/keycloak:13.0.1 as base&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; gcr.io/distroless/java:11-nonroot&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --chown=nonroot:nonroot --from=base /opt/jboss /opt/jboss&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The execution is pretty simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker build &lt;span class="nt"&gt;-t&lt;/span&gt; keycloak-distroless &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;+] Building 0.6s &lt;span class="o"&gt;(&lt;/span&gt;8/8&lt;span class="o"&gt;)&lt;/span&gt; FINISHED
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;internal] load build definition from Dockerfile                       0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; transferring dockerfile: 37B                                        0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;internal] load .dockerignore                                          0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; transferring context: 2B                                            0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;internal] load metadata &lt;span class="k"&gt;for &lt;/span&gt;gcr.io/distroless/java:11-nonroot         0.5s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;internal] load metadata &lt;span class="k"&gt;for &lt;/span&gt;docker.io/jboss/keycloak:13.0.1           0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;base 1/1] FROM docker.io/jboss/keycloak:13.0.1                        0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;stage-1 1/2] FROM gcr.io/distroless/java:11-nonroot@sha256:07d017944  0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; CACHED &lt;span class="o"&gt;[&lt;/span&gt;stage-1 2/2] COPY &lt;span class="nt"&gt;--chown&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nonroot:nonroot &lt;span class="nt"&gt;--from&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;base /opt/jb  0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; exporting to image                                                     0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; exporting layers                                                    0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; writing image sha256:06e849f0ab369043be9c071a446484e2a699a114dd988  0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; naming to docker.io/library/keycloak-distroless                     0.0s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sadly, if we are launching it like this, we will see the following error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; 8080:8080 keycloak-distroless
Error: &lt;span class="nt"&gt;-jar&lt;/span&gt; requires jar file specification
Usage: java &lt;span class="o"&gt;[&lt;/span&gt;options] &amp;lt;mainclass&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;args...]
           &lt;span class="o"&gt;(&lt;/span&gt;to execute a class&lt;span class="o"&gt;)&lt;/span&gt;
   or  java &lt;span class="o"&gt;[&lt;/span&gt;options] &lt;span class="nt"&gt;-jar&lt;/span&gt; &amp;lt;jarfile&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;args...]
           &lt;span class="o"&gt;(&lt;/span&gt;to execute a jar file&lt;span class="o"&gt;)&lt;/span&gt;
   or  java &lt;span class="o"&gt;[&lt;/span&gt;options] &lt;span class="nt"&gt;-m&lt;/span&gt; &amp;lt;module&amp;gt;[/&amp;lt;mainclass&amp;gt;] &lt;span class="o"&gt;[&lt;/span&gt;args...]
       java &lt;span class="o"&gt;[&lt;/span&gt;options] &lt;span class="nt"&gt;--module&lt;/span&gt; &amp;lt;module&amp;gt;[/&amp;lt;mainclass&amp;gt;] &lt;span class="o"&gt;[&lt;/span&gt;args...]
           &lt;span class="o"&gt;(&lt;/span&gt;to execute the main class &lt;span class="k"&gt;in &lt;/span&gt;a module&lt;span class="o"&gt;)&lt;/span&gt;
   or  java &lt;span class="o"&gt;[&lt;/span&gt;options] &amp;lt;sourcefile&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;args]
           &lt;span class="o"&gt;(&lt;/span&gt;to execute a single source-file program&lt;span class="o"&gt;)&lt;/span&gt;

 Arguments following the main class, &lt;span class="nb"&gt;source &lt;/span&gt;file, &lt;span class="nt"&gt;-jar&lt;/span&gt; &amp;lt;jarfile&amp;gt;,
 &lt;span class="nt"&gt;-m&lt;/span&gt; or &lt;span class="nt"&gt;--module&lt;/span&gt; &amp;lt;module&amp;gt;/&amp;lt;mainclass&amp;gt; are passed as the arguments to
 main class.
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is because the default &lt;code&gt;ENTRYPOINT&lt;/code&gt; of this &lt;strong&gt;distroless&lt;/strong&gt; image want to launch a (fat) &lt;strong&gt;JAR&lt;/strong&gt;, but keycloak is more complex than this, so we will have to find the right &lt;code&gt;ENTRYPOINT&lt;/code&gt; for our use case.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generating-the-entrypoint"&gt;
  &lt;/a&gt;
  Generating the ENTRYPOINT
&lt;/h2&gt;

&lt;p&gt;For this one, we will use the original image to &lt;em&gt;see&lt;/em&gt; how Keycloak is launched in its natural state. To do that, we will edit the &lt;code&gt;standalone.sh&lt;/code&gt; file to make it more verbose and copy the &lt;code&gt;java&lt;/code&gt; command generated from it. We will follow &lt;a href="https://hub.docker.com/r/jboss/keycloak/"&gt;the official documentation&lt;/a&gt; to launch keycloak, but we will log into the container to do our magic trick:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Starting the container with the minimal configuration and log into it thanks to the custom entrypoint&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;DB_VENDOR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;h2 &lt;span class="nt"&gt;--entrypoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;bash jboss/keycloak:13.0.1
&lt;span class="c"&gt;# From here, we are IN the Keycloak image!&lt;/span&gt;
&lt;span class="c"&gt;# The following command update the standalone.sh file to be a lot verbose&lt;/span&gt;
bash-4.4&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; inplace &lt;span class="s1"&gt;'NR==2 {print "set -x"} 1'&lt;/span&gt; /opt/jboss/keycloak/bin/standalone.sh
&lt;span class="c"&gt;# Finally, we will launch keycloak from here and stop it when we found the line starting with "++ java"&lt;/span&gt;
bash-4.4&lt;span class="nv"&gt;$ &lt;/span&gt;/opt/jboss/tools/docker-entrypoint.sh

&lt;span class="o"&gt;=========================================================================&lt;/span&gt;

  Using Embedded H2 database

&lt;span class="o"&gt;=========================================================================&lt;/span&gt;

+ &lt;span class="nv"&gt;DEBUG_MODE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
+ &lt;span class="nv"&gt;DEBUG_PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;8787
+ &lt;span class="nv"&gt;GC_LOG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
+ &lt;span class="nv"&gt;SERVER_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
+ &lt;span class="s1"&gt;'['&lt;/span&gt; 3 &lt;span class="nt"&gt;-gt&lt;/span&gt; 0 &lt;span class="s1"&gt;']'&lt;/span&gt;
+ &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
+ &lt;span class="nv"&gt;SERVER_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;'-Djboss.bind.address=172.17.0.2'&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;
+ &lt;span class="nb"&gt;shift&lt;/span&gt;
+ &lt;span class="s1"&gt;'['&lt;/span&gt; 2 &lt;span class="nt"&gt;-gt&lt;/span&gt; 0 &lt;span class="s1"&gt;']'&lt;/span&gt;
+ &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
+ &lt;span class="nv"&gt;SERVER_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;'-Djboss.bind.address=172.17.0.2'&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;'-Djboss.bind.address.private=172.17.0.2'&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;
+ &lt;span class="nb"&gt;shift&lt;/span&gt;
+ &lt;span class="s1"&gt;'['&lt;/span&gt; 1 &lt;span class="nt"&gt;-gt&lt;/span&gt; 0 &lt;span class="s1"&gt;']'&lt;/span&gt;
+ &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
+ &lt;span class="nv"&gt;SERVER_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;'-Djboss.bind.address=172.17.0.2'&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;'-Djboss.bind.address.private=172.17.0.2'&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;'-c=standalone-ha.xml'&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;
+ &lt;span class="nb"&gt;shift&lt;/span&gt;
+ &lt;span class="s1"&gt;'['&lt;/span&gt; 0 &lt;span class="nt"&gt;-gt&lt;/span&gt; 0 &lt;span class="s1"&gt;']'&lt;/span&gt;
++ &lt;span class="nb"&gt;dirname&lt;/span&gt; /opt/jboss/keycloak/bin/standalone.sh
+ &lt;span class="nv"&gt;DIRNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/jboss/keycloak/bin
++ &lt;span class="nb"&gt;basename&lt;/span&gt; /opt/jboss/keycloak/bin/standalone.sh
+ &lt;span class="nv"&gt;PROGNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;standalone.sh
+ &lt;span class="nv"&gt;GREP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;grep&lt;/span&gt;
+ &lt;span class="nb"&gt;.&lt;/span&gt; /opt/jboss/keycloak/bin/common.sh
++ &lt;span class="s1"&gt;'['&lt;/span&gt; x &lt;span class="o"&gt;=&lt;/span&gt; x &lt;span class="s1"&gt;']'&lt;/span&gt;
++ &lt;span class="nv"&gt;COMMON_CONF&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/jboss/keycloak/bin/common.conf
++ &lt;span class="s1"&gt;'['&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; /opt/jboss/keycloak/bin/common.conf &lt;span class="s1"&gt;']'&lt;/span&gt;
+ &lt;span class="nv"&gt;MAX_FD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;maximum
+ &lt;span class="nv"&gt;MALLOC_ARENA_MAX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
+ &lt;span class="nb"&gt;export &lt;/span&gt;MALLOC_ARENA_MAX
+ &lt;span class="nv"&gt;cygwin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
+ &lt;span class="nv"&gt;darwin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
+ &lt;span class="nv"&gt;linux&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
+ &lt;span class="nv"&gt;solaris&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
+ &lt;span class="nv"&gt;freebsd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
+ &lt;span class="nv"&gt;other&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;
+ &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="nb"&gt;uname&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
++ &lt;span class="nb"&gt;uname&lt;/span&gt;
+ &lt;span class="nv"&gt;linux&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
+ &lt;span class="nb"&gt;false&lt;/span&gt;
++ &lt;span class="nb"&gt;cd&lt;/span&gt; /opt/jboss/keycloak/bin/..
++ &lt;span class="nb"&gt;pwd&lt;/span&gt;
+ &lt;span class="nv"&gt;RESOLVED_JBOSS_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/jboss/keycloak
+ &lt;span class="s1"&gt;'['&lt;/span&gt; x/opt/jboss/keycloak &lt;span class="o"&gt;=&lt;/span&gt; x &lt;span class="s1"&gt;']'&lt;/span&gt;
++ &lt;span class="nb"&gt;cd&lt;/span&gt; /opt/jboss/keycloak
++ &lt;span class="nb"&gt;pwd&lt;/span&gt;
+ &lt;span class="nv"&gt;SANITIZED_JBOSS_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/jboss/keycloak
+ &lt;span class="s1"&gt;'['&lt;/span&gt; /opt/jboss/keycloak &lt;span class="s1"&gt;'!='&lt;/span&gt; /opt/jboss/keycloak &lt;span class="s1"&gt;']'&lt;/span&gt;
+ &lt;span class="nb"&gt;export &lt;/span&gt;JBOSS_HOME
+ &lt;span class="s1"&gt;'['&lt;/span&gt; x &lt;span class="o"&gt;=&lt;/span&gt; x &lt;span class="s1"&gt;']'&lt;/span&gt;
+ &lt;span class="nv"&gt;RUN_CONF&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/jboss/keycloak/bin/standalone.conf
+ &lt;span class="s1"&gt;'['&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; /opt/jboss/keycloak/bin/standalone.conf &lt;span class="s1"&gt;']'&lt;/span&gt;
+ &lt;span class="nb"&gt;.&lt;/span&gt; /opt/jboss/keycloak/bin/standalone.conf
++ &lt;span class="s1"&gt;'['&lt;/span&gt; x &lt;span class="o"&gt;=&lt;/span&gt; x &lt;span class="s1"&gt;']'&lt;/span&gt;
++ &lt;span class="nv"&gt;JBOSS_MODULES_SYSTEM_PKGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;org.jboss.byteman
++ &lt;span class="s1"&gt;'['&lt;/span&gt; x &lt;span class="o"&gt;=&lt;/span&gt; x &lt;span class="s1"&gt;']'&lt;/span&gt;
++ &lt;span class="nv"&gt;JAVA_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'-Xms64m -Xmx512m -XX:MetaspaceSize=96M -XX:MaxMetaspaceSize=256m -Djava.net.preferIPv4Stack=true'&lt;/span&gt;
++ &lt;span class="nv"&gt;JAVA_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'-Xms64m -Xmx512m -XX:MetaspaceSize=96M -XX:MaxMetaspaceSize=256m -Djava.net.preferIPv4Stack=true -Djboss.modules.system.pkgs=org.jboss.byteman -Djava.awt.headless=true'&lt;/span&gt;
++ &lt;span class="nv"&gt;JAVA_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'-Xms64m -Xmx512m -XX:MetaspaceSize=96M -XX:MaxMetaspaceSize=256m -Djava.net.preferIPv4Stack=true -Djboss.modules.system.pkgs=org.jboss.byteman -Djava.awt.headless=true '&lt;/span&gt;
+ &lt;span class="s1"&gt;'['&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="s1"&gt;']'&lt;/span&gt;
+ &lt;span class="s1"&gt;'['&lt;/span&gt; x &lt;span class="o"&gt;=&lt;/span&gt; x &lt;span class="s1"&gt;']'&lt;/span&gt;
+ &lt;span class="s1"&gt;'['&lt;/span&gt; x &lt;span class="s1"&gt;'!='&lt;/span&gt; x &lt;span class="s1"&gt;']'&lt;/span&gt;
+ &lt;span class="nv"&gt;JAVA&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;java
+ &lt;span class="nb"&gt;true&lt;/span&gt;
+ &lt;span class="nv"&gt;CONSOLIDATED_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'-Xms64m -Xmx512m -XX:MetaspaceSize=96M -XX:MaxMetaspaceSize=256m -Djava.net.preferIPv4Stack=true -Djboss.modules.system.pkgs=org.jboss.byteman -Djava.awt.headless=true   '&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;'-Djboss.bind.address=172.17.0.2'&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;'-Djboss.bind.address.private=172.17.0.2'&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;'-c=standalone-ha.xml'&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;
+ &lt;span class="k"&gt;for &lt;/span&gt;var &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$CONSOLIDATED_OPTS&lt;/span&gt;
++ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-Xms64m&lt;/span&gt;
++ &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="se"&gt;\'&lt;/span&gt;
+ &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;-Xms64m&lt;/span&gt;
+ &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;$p&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
+ &lt;span class="k"&gt;for &lt;/span&gt;var &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$CONSOLIDATED_OPTS&lt;/span&gt;
++ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-Xmx512m&lt;/span&gt;
++ &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="se"&gt;\'&lt;/span&gt;
+ &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;-Xmx512m&lt;/span&gt;
+ &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;$p&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
+ &lt;span class="k"&gt;for &lt;/span&gt;var &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$CONSOLIDATED_OPTS&lt;/span&gt;
++ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-XX&lt;/span&gt;:MetaspaceSize&lt;span class="o"&gt;=&lt;/span&gt;96M
++ &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="se"&gt;\'&lt;/span&gt;
+ &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;-XX&lt;/span&gt;:MetaspaceSize&lt;span class="o"&gt;=&lt;/span&gt;96M
+ &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;$p&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
+ &lt;span class="k"&gt;for &lt;/span&gt;var &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$CONSOLIDATED_OPTS&lt;/span&gt;
++ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-XX&lt;/span&gt;:MaxMetaspaceSize&lt;span class="o"&gt;=&lt;/span&gt;256m
++ &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="se"&gt;\'&lt;/span&gt;
+ &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;-XX&lt;/span&gt;:MaxMetaspaceSize&lt;span class="o"&gt;=&lt;/span&gt;256m
+ &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;$p&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
+ &lt;span class="k"&gt;for &lt;/span&gt;var &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$CONSOLIDATED_OPTS&lt;/span&gt;
++ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-Djava&lt;/span&gt;.net.preferIPv4Stack&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
++ &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="se"&gt;\'&lt;/span&gt;
+ &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;-Djava&lt;/span&gt;.net.preferIPv4Stack&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
+ &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;$p&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
+ &lt;span class="k"&gt;for &lt;/span&gt;var &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$CONSOLIDATED_OPTS&lt;/span&gt;
++ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-Djboss&lt;/span&gt;.modules.system.pkgs&lt;span class="o"&gt;=&lt;/span&gt;org.jboss.byteman
++ &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="se"&gt;\'&lt;/span&gt;
+ &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;-Djboss&lt;/span&gt;.modules.system.pkgs&lt;span class="o"&gt;=&lt;/span&gt;org.jboss.byteman
+ &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;$p&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
+ &lt;span class="k"&gt;for &lt;/span&gt;var &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$CONSOLIDATED_OPTS&lt;/span&gt;
++ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-Djava&lt;/span&gt;.awt.headless&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
++ &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="se"&gt;\'&lt;/span&gt;
+ &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;-Djava&lt;/span&gt;.awt.headless&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
+ &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;$p&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
+ &lt;span class="k"&gt;for &lt;/span&gt;var &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$CONSOLIDATED_OPTS&lt;/span&gt;
++ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;'-Djboss.bind.address=172.17.0.2'&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;
++ &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="se"&gt;\'&lt;/span&gt;
+ &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;-Djboss&lt;/span&gt;.bind.address&lt;span class="o"&gt;=&lt;/span&gt;172.17.0.2
+ &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;$p&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
+ &lt;span class="k"&gt;for &lt;/span&gt;var &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$CONSOLIDATED_OPTS&lt;/span&gt;
++ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;'-Djboss.bind.address.private=172.17.0.2'&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;
++ &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="se"&gt;\'&lt;/span&gt;
+ &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;-Djboss&lt;/span&gt;.bind.address.private&lt;span class="o"&gt;=&lt;/span&gt;172.17.0.2
+ &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;$p&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
+ &lt;span class="k"&gt;for &lt;/span&gt;var &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$CONSOLIDATED_OPTS&lt;/span&gt;
++ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;'-c=standalone-ha.xml'&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;
++ &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="se"&gt;\'&lt;/span&gt;
+ &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;-c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;standalone-ha.xml
+ &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;$p&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
+ &lt;span class="nb"&gt;false&lt;/span&gt;
+ &lt;span class="nb"&gt;false&lt;/span&gt;
+ &lt;span class="nb"&gt;false&lt;/span&gt;
+ &lt;span class="nb"&gt;false&lt;/span&gt;
+ &lt;span class="s1"&gt;'['&lt;/span&gt; x &lt;span class="o"&gt;=&lt;/span&gt; x &lt;span class="s1"&gt;']'&lt;/span&gt;
+ &lt;span class="nv"&gt;JBOSS_BASE_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/jboss/keycloak/standalone
+ &lt;span class="s1"&gt;'['&lt;/span&gt; x &lt;span class="o"&gt;=&lt;/span&gt; x &lt;span class="s1"&gt;']'&lt;/span&gt;
+ &lt;span class="nv"&gt;JBOSS_LOG_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/jboss/keycloak/standalone/log
+ &lt;span class="s1"&gt;'['&lt;/span&gt; x &lt;span class="o"&gt;=&lt;/span&gt; x &lt;span class="s1"&gt;']'&lt;/span&gt;
+ &lt;span class="nv"&gt;JBOSS_CONFIG_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/jboss/keycloak/standalone/configuration
+ &lt;span class="s1"&gt;'['&lt;/span&gt; x &lt;span class="o"&gt;=&lt;/span&gt; x &lt;span class="s1"&gt;']'&lt;/span&gt;
+ &lt;span class="nv"&gt;JBOSS_MODULEPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/jboss/keycloak/modules
+ &lt;span class="nb"&gt;false&lt;/span&gt;
+ &lt;span class="s1"&gt;'['&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt; &lt;span class="s1"&gt;'!='&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="s1"&gt;']'&lt;/span&gt;
++ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-Xms64m&lt;/span&gt; &lt;span class="nt"&gt;-Xmx512m&lt;/span&gt; &lt;span class="nt"&gt;-XX&lt;/span&gt;:MetaspaceSize&lt;span class="o"&gt;=&lt;/span&gt;96M &lt;span class="nt"&gt;-XX&lt;/span&gt;:MaxMetaspaceSize&lt;span class="o"&gt;=&lt;/span&gt;256m &lt;span class="nt"&gt;-Djava&lt;/span&gt;.net.preferIPv4Stack&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="nt"&gt;-Djboss&lt;/span&gt;.modules.system.pkgs&lt;span class="o"&gt;=&lt;/span&gt;org.jboss.byteman &lt;span class="nt"&gt;-Djava&lt;/span&gt;.awt.headless&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
++ &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="s1"&gt;'\-d64'&lt;/span&gt;
+ &lt;span class="nv"&gt;JVM_D64_OPTION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
++ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-Xms64m&lt;/span&gt; &lt;span class="nt"&gt;-Xmx512m&lt;/span&gt; &lt;span class="nt"&gt;-XX&lt;/span&gt;:MetaspaceSize&lt;span class="o"&gt;=&lt;/span&gt;96M &lt;span class="nt"&gt;-XX&lt;/span&gt;:MaxMetaspaceSize&lt;span class="o"&gt;=&lt;/span&gt;256m &lt;span class="nt"&gt;-Djava&lt;/span&gt;.net.preferIPv4Stack&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="nt"&gt;-Djboss&lt;/span&gt;.modules.system.pkgs&lt;span class="o"&gt;=&lt;/span&gt;org.jboss.byteman &lt;span class="nt"&gt;-Djava&lt;/span&gt;.awt.headless&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
++ &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="s1"&gt;'\-d32'&lt;/span&gt;
+ &lt;span class="nv"&gt;JVM_D32_OPTION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
++ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-Xms64m&lt;/span&gt; &lt;span class="nt"&gt;-Xmx512m&lt;/span&gt; &lt;span class="nt"&gt;-XX&lt;/span&gt;:MetaspaceSize&lt;span class="o"&gt;=&lt;/span&gt;96M &lt;span class="nt"&gt;-XX&lt;/span&gt;:MaxMetaspaceSize&lt;span class="o"&gt;=&lt;/span&gt;256m &lt;span class="nt"&gt;-Djava&lt;/span&gt;.net.preferIPv4Stack&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="nt"&gt;-Djboss&lt;/span&gt;.modules.system.pkgs&lt;span class="o"&gt;=&lt;/span&gt;org.jboss.byteman &lt;span class="nt"&gt;-Djava&lt;/span&gt;.awt.headless&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
++ &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="s1"&gt;'\-server'&lt;/span&gt;
+ &lt;span class="nv"&gt;SERVER_SET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
++ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-Xms64m&lt;/span&gt; &lt;span class="nt"&gt;-Xmx512m&lt;/span&gt; &lt;span class="nt"&gt;-XX&lt;/span&gt;:MetaspaceSize&lt;span class="o"&gt;=&lt;/span&gt;96M &lt;span class="nt"&gt;-XX&lt;/span&gt;:MaxMetaspaceSize&lt;span class="o"&gt;=&lt;/span&gt;256m &lt;span class="nt"&gt;-Djava&lt;/span&gt;.net.preferIPv4Stack&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="nt"&gt;-Djboss&lt;/span&gt;.modules.system.pkgs&lt;span class="o"&gt;=&lt;/span&gt;org.jboss.byteman &lt;span class="nt"&gt;-Djava&lt;/span&gt;.awt.headless&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
++ &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="s1"&gt;'\-client'&lt;/span&gt;
+ &lt;span class="nv"&gt;CLIENT_SET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
+ &lt;span class="s1"&gt;'['&lt;/span&gt; x &lt;span class="s1"&gt;'!='&lt;/span&gt; x &lt;span class="s1"&gt;']'&lt;/span&gt;
+ &lt;span class="s1"&gt;'['&lt;/span&gt; x &lt;span class="s1"&gt;'!='&lt;/span&gt; x &lt;span class="s1"&gt;']'&lt;/span&gt;
+ &lt;span class="nb"&gt;false&lt;/span&gt;
+ &lt;span class="s1"&gt;'['&lt;/span&gt; x &lt;span class="o"&gt;=&lt;/span&gt; x &lt;span class="nt"&gt;-a&lt;/span&gt; x &lt;span class="o"&gt;=&lt;/span&gt; x &lt;span class="s1"&gt;']'&lt;/span&gt;
+ &lt;span class="nb"&gt;false&lt;/span&gt;
+ &lt;span class="nv"&gt;PREPEND_JAVA_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;' -server'&lt;/span&gt;
+ setModularJdk
+ java &lt;span class="nt"&gt;--add-modules&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;java.se &lt;span class="nt"&gt;-version&lt;/span&gt;
+ &lt;span class="nv"&gt;MODULAR_JDK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
+ &lt;span class="s1"&gt;'['&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="s1"&gt;']'&lt;/span&gt;
+ setDefaultModularJvmOptions &lt;span class="nt"&gt;-Xms64m&lt;/span&gt; &lt;span class="nt"&gt;-Xmx512m&lt;/span&gt; &lt;span class="nt"&gt;-XX&lt;/span&gt;:MetaspaceSize&lt;span class="o"&gt;=&lt;/span&gt;96M &lt;span class="nt"&gt;-XX&lt;/span&gt;:MaxMetaspaceSize&lt;span class="o"&gt;=&lt;/span&gt;256m &lt;span class="nt"&gt;-Djava&lt;/span&gt;.net.preferIPv4Stack&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="nt"&gt;-Djboss&lt;/span&gt;.modules.system.pkgs&lt;span class="o"&gt;=&lt;/span&gt;org.jboss.byteman &lt;span class="nt"&gt;-Djava&lt;/span&gt;.awt.headless&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
+ setModularJdk
+ java &lt;span class="nt"&gt;--add-modules&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;java.se &lt;span class="nt"&gt;-version&lt;/span&gt;
+ &lt;span class="nv"&gt;MODULAR_JDK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
+ &lt;span class="s1"&gt;'['&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="s1"&gt;']'&lt;/span&gt;
++ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-Xms64m&lt;/span&gt; &lt;span class="nt"&gt;-Xmx512m&lt;/span&gt; &lt;span class="nt"&gt;-XX&lt;/span&gt;:MetaspaceSize&lt;span class="o"&gt;=&lt;/span&gt;96M &lt;span class="nt"&gt;-XX&lt;/span&gt;:MaxMetaspaceSize&lt;span class="o"&gt;=&lt;/span&gt;256m &lt;span class="nt"&gt;-Djava&lt;/span&gt;.net.preferIPv4Stack&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="nt"&gt;-Djboss&lt;/span&gt;.modules.system.pkgs&lt;span class="o"&gt;=&lt;/span&gt;org.jboss.byteman &lt;span class="nt"&gt;-Djava&lt;/span&gt;.awt.headless&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
++ &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="s1"&gt;'\-\-add\-modules'&lt;/span&gt;
+ &lt;span class="nv"&gt;DEFAULT_MODULAR_JVM_OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
+ &lt;span class="s1"&gt;'['&lt;/span&gt; x &lt;span class="o"&gt;=&lt;/span&gt; x &lt;span class="s1"&gt;']'&lt;/span&gt;
+ &lt;span class="nv"&gt;DEFAULT_MODULAR_JVM_OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;' --add-exports=java.base/sun.nio.ch=ALL-UNNAMED'&lt;/span&gt;
+ &lt;span class="nv"&gt;DEFAULT_MODULAR_JVM_OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;' --add-exports=java.base/sun.nio.ch=ALL-UNNAMED --add-exports=jdk.unsupported/sun.misc=ALL-UNNAMED'&lt;/span&gt;
+ &lt;span class="nv"&gt;DEFAULT_MODULAR_JVM_OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;' --add-exports=java.base/sun.nio.ch=ALL-UNNAMED --add-exports=jdk.unsupported/sun.misc=ALL-UNNAMED --add-exports=jdk.unsupported/sun.reflect=ALL-UNNAMED'&lt;/span&gt;
+ &lt;span class="nv"&gt;JAVA_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'-Xms64m -Xmx512m -XX:MetaspaceSize=96M -XX:MaxMetaspaceSize=256m -Djava.net.preferIPv4Stack=true -Djboss.modules.system.pkgs=org.jboss.byteman -Djava.awt.headless=true   --add-exports=java.base/sun.nio.ch=ALL-UNNAMED --add-exports=jdk.unsupported/sun.misc=ALL-UNNAMED --add-exports=jdk.unsupported/sun.reflect=ALL-UNNAMED'&lt;/span&gt;
+ &lt;span class="nv"&gt;JAVA_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;' -server -Xms64m -Xmx512m -XX:MetaspaceSize=96M -XX:MaxMetaspaceSize=256m -Djava.net.preferIPv4Stack=true -Djboss.modules.system.pkgs=org.jboss.byteman -Djava.awt.headless=true   --add-exports=java.base/sun.nio.ch=ALL-UNNAMED --add-exports=jdk.unsupported/sun.misc=ALL-UNNAMED --add-exports=jdk.unsupported/sun.reflect=ALL-UNNAMED'&lt;/span&gt;
++ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-server&lt;/span&gt; &lt;span class="nt"&gt;-Xms64m&lt;/span&gt; &lt;span class="nt"&gt;-Xmx512m&lt;/span&gt; &lt;span class="nt"&gt;-XX&lt;/span&gt;:MetaspaceSize&lt;span class="o"&gt;=&lt;/span&gt;96M &lt;span class="nt"&gt;-XX&lt;/span&gt;:MaxMetaspaceSize&lt;span class="o"&gt;=&lt;/span&gt;256m &lt;span class="nt"&gt;-Djava&lt;/span&gt;.net.preferIPv4Stack&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="nt"&gt;-Djboss&lt;/span&gt;.modules.system.pkgs&lt;span class="o"&gt;=&lt;/span&gt;org.jboss.byteman &lt;span class="nt"&gt;-Djava&lt;/span&gt;.awt.headless&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="nt"&gt;--add-exports&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;java.base/sun.nio.ch&lt;span class="o"&gt;=&lt;/span&gt;ALL-UNNAMED &lt;span class="nt"&gt;--add-exports&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;jdk.unsupported/sun.misc&lt;span class="o"&gt;=&lt;/span&gt;ALL-UNNAMED &lt;span class="nt"&gt;--add-exports&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;jdk.unsupported/sun.reflect&lt;span class="o"&gt;=&lt;/span&gt;ALL-UNNAMED
++ &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="s1"&gt;'java\.security\.manager'&lt;/span&gt;
+ &lt;span class="nv"&gt;SECURITY_MANAGER_SET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
+ &lt;span class="s1"&gt;'['&lt;/span&gt; x &lt;span class="s1"&gt;'!='&lt;/span&gt; x &lt;span class="s1"&gt;']'&lt;/span&gt;
+ &lt;span class="nv"&gt;MODULE_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
+ &lt;span class="s1"&gt;'['&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="s1"&gt;']'&lt;/span&gt;
++ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
++ &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="s1"&gt;'\-javaagent:'&lt;/span&gt;
+ &lt;span class="nv"&gt;AGENT_SET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
+ &lt;span class="s1"&gt;'['&lt;/span&gt; x &lt;span class="s1"&gt;'!='&lt;/span&gt; x &lt;span class="s1"&gt;']'&lt;/span&gt;
+ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;=========================================================================&lt;/span&gt;
&lt;span class="o"&gt;=========================================================================&lt;/span&gt;
+ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;

+ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'  JBoss Bootstrap Environment'&lt;/span&gt;
  JBoss Bootstrap Environment
+ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;

+ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'  JBOSS_HOME: /opt/jboss/keycloak'&lt;/span&gt;
  JBOSS_HOME: /opt/jboss/keycloak
+ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;

+ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'  JAVA: java'&lt;/span&gt;
  JAVA: java
+ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;

+ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'  JAVA_OPTS:  -server -Xms64m -Xmx512m -XX:MetaspaceSize=96M -XX:MaxMetaspaceSize=256m -Djava.net.preferIPv4Stack=true -Djboss.modules.system.pkgs=org.jboss.byteman -Djava.awt.headless=true   --add-exports=java.base/sun.nio.ch=ALL-UNNAMED --add-exports=jdk.unsupported/sun.misc=ALL-UNNAMED --add-exports=jdk.unsupported/sun.reflect=ALL-UNNAMED'&lt;/span&gt;
  JAVA_OPTS:  &lt;span class="nt"&gt;-server&lt;/span&gt; &lt;span class="nt"&gt;-Xms64m&lt;/span&gt; &lt;span class="nt"&gt;-Xmx512m&lt;/span&gt; &lt;span class="nt"&gt;-XX&lt;/span&gt;:MetaspaceSize&lt;span class="o"&gt;=&lt;/span&gt;96M &lt;span class="nt"&gt;-XX&lt;/span&gt;:MaxMetaspaceSize&lt;span class="o"&gt;=&lt;/span&gt;256m &lt;span class="nt"&gt;-Djava&lt;/span&gt;.net.preferIPv4Stack&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="nt"&gt;-Djboss&lt;/span&gt;.modules.system.pkgs&lt;span class="o"&gt;=&lt;/span&gt;org.jboss.byteman &lt;span class="nt"&gt;-Djava&lt;/span&gt;.awt.headless&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;   &lt;span class="nt"&gt;--add-exports&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;java.base/sun.nio.ch&lt;span class="o"&gt;=&lt;/span&gt;ALL-UNNAMED &lt;span class="nt"&gt;--add-exports&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;jdk.unsupported/sun.misc&lt;span class="o"&gt;=&lt;/span&gt;ALL-UNNAMED &lt;span class="nt"&gt;--add-exports&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;jdk.unsupported/sun.reflect&lt;span class="o"&gt;=&lt;/span&gt;ALL-UNNAMED
+ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;

+ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;=========================================================================&lt;/span&gt;
&lt;span class="o"&gt;=========================================================================&lt;/span&gt;
+ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;

+ &lt;span class="nb"&gt;true&lt;/span&gt;
+ &lt;span class="s1"&gt;'['&lt;/span&gt; x1 &lt;span class="o"&gt;=&lt;/span&gt; x &lt;span class="s1"&gt;']'&lt;/span&gt;
+ &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s1"&gt;'"java"'&lt;/span&gt; &lt;span class="s1"&gt;'-D"[Standalone]"'&lt;/span&gt; &lt;span class="nt"&gt;-server&lt;/span&gt; &lt;span class="nt"&gt;-Xms64m&lt;/span&gt; &lt;span class="nt"&gt;-Xmx512m&lt;/span&gt; &lt;span class="nt"&gt;-XX&lt;/span&gt;:MetaspaceSize&lt;span class="o"&gt;=&lt;/span&gt;96M &lt;span class="nt"&gt;-XX&lt;/span&gt;:MaxMetaspaceSize&lt;span class="o"&gt;=&lt;/span&gt;256m &lt;span class="nt"&gt;-Djava&lt;/span&gt;.net.preferIPv4Stack&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="nt"&gt;-Djboss&lt;/span&gt;.modules.system.pkgs&lt;span class="o"&gt;=&lt;/span&gt;org.jboss.byteman &lt;span class="nt"&gt;-Djava&lt;/span&gt;.awt.headless&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="nt"&gt;--add-exports&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;java.base/sun.nio.ch&lt;span class="o"&gt;=&lt;/span&gt;ALL-UNNAMED &lt;span class="nt"&gt;--add-exports&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;jdk.unsupported/sun.misc&lt;span class="o"&gt;=&lt;/span&gt;ALL-UNNAMED &lt;span class="nt"&gt;--add-exports&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;jdk.unsupported/sun.reflect&lt;span class="o"&gt;=&lt;/span&gt;ALL-UNNAMED &lt;span class="s1"&gt;'"-Dorg.jboss.boot.log.file=/opt/jboss/keycloak/standalone/log/server.log"'&lt;/span&gt; &lt;span class="s1"&gt;'"-Dlogging.configuration=file:/opt/jboss/keycloak/standalone/configuration/logging.properties"'&lt;/span&gt; &lt;span class="nt"&gt;-jar&lt;/span&gt; &lt;span class="s1"&gt;'"/opt/jboss/keycloak/jboss-modules.jar"'&lt;/span&gt; &lt;span class="nt"&gt;-mp&lt;/span&gt; &lt;span class="s1"&gt;'"/opt/jboss/keycloak/modules"'&lt;/span&gt; org.jboss.as.standalone &lt;span class="s1"&gt;'-Djboss.home.dir="/opt/jboss/keycloak"'&lt;/span&gt; &lt;span class="s1"&gt;'-Djboss.server.base.dir="/opt/jboss/keycloak/standalone"'&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;'-Djboss.bind.address=172.17.0.2'&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;'-Djboss.bind.address.private=172.17.0.2'&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;'-c=standalone-ha.xml'&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt; &lt;span class="s1"&gt;'&amp;amp;'&lt;/span&gt;
+ &lt;span class="nv"&gt;JBOSS_PID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;122
+ &lt;span class="nb"&gt;trap&lt;/span&gt; &lt;span class="s1"&gt;'kill -HUP  122'&lt;/span&gt; HUP
++ java &lt;span class="s1"&gt;'-D[Standalone]'&lt;/span&gt; &lt;span class="nt"&gt;-server&lt;/span&gt; &lt;span class="nt"&gt;-Xms64m&lt;/span&gt; &lt;span class="nt"&gt;-Xmx512m&lt;/span&gt; &lt;span class="nt"&gt;-XX&lt;/span&gt;:MetaspaceSize&lt;span class="o"&gt;=&lt;/span&gt;96M &lt;span class="nt"&gt;-XX&lt;/span&gt;:MaxMetaspaceSize&lt;span class="o"&gt;=&lt;/span&gt;256m &lt;span class="nt"&gt;-Djava&lt;/span&gt;.net.preferIPv4Stack&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="nt"&gt;-Djboss&lt;/span&gt;.modules.system.pkgs&lt;span class="o"&gt;=&lt;/span&gt;org.jboss.byteman &lt;span class="nt"&gt;-Djava&lt;/span&gt;.awt.headless&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; &lt;span class="nt"&gt;--add-exports&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;java.base/sun.nio.ch&lt;span class="o"&gt;=&lt;/span&gt;ALL-UNNAMED &lt;span class="nt"&gt;--add-exports&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;jdk.unsupported/sun.misc&lt;span class="o"&gt;=&lt;/span&gt;ALL-UNNAMED &lt;span class="nt"&gt;--add-exports&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;jdk.unsupported/sun.reflect&lt;span class="o"&gt;=&lt;/span&gt;ALL-UNNAMED &lt;span class="nt"&gt;-Dorg&lt;/span&gt;.jboss.boot.log.file&lt;span class="o"&gt;=&lt;/span&gt;/opt/jboss/keycloak/standalone/log/server.log &lt;span class="nt"&gt;-Dlogging&lt;/span&gt;.configuration&lt;span class="o"&gt;=&lt;/span&gt;file:/opt/jboss/keycloak/standalone/configuration/logging.properties &lt;span class="nt"&gt;-jar&lt;/span&gt; /opt/jboss/keycloak/jboss-modules.jar &lt;span class="nt"&gt;-mp&lt;/span&gt; /opt/jboss/keycloak/modules org.jboss.as.standalone &lt;span class="nt"&gt;-Djboss&lt;/span&gt;.home.dir&lt;span class="o"&gt;=&lt;/span&gt;/opt/jboss/keycloak &lt;span class="nt"&gt;-Djboss&lt;/span&gt;.server.base.dir&lt;span class="o"&gt;=&lt;/span&gt;/opt/jboss/keycloak/standalone &lt;span class="nt"&gt;-Djboss&lt;/span&gt;.bind.address&lt;span class="o"&gt;=&lt;/span&gt;172.17.0.2 &lt;span class="nt"&gt;-Djboss&lt;/span&gt;.bind.address.private&lt;span class="o"&gt;=&lt;/span&gt;172.17.0.2 &lt;span class="nt"&gt;-c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;standalone-ha.xml
+ &lt;span class="nb"&gt;trap&lt;/span&gt; &lt;span class="s1"&gt;'kill -TERM 122'&lt;/span&gt; INT
+ &lt;span class="nb"&gt;trap&lt;/span&gt; &lt;span class="s1"&gt;'kill -QUIT 122'&lt;/span&gt; QUIT
+ &lt;span class="nb"&gt;trap&lt;/span&gt; &lt;span class="s1"&gt;'kill -PIPE 122'&lt;/span&gt; PIPE
+ &lt;span class="nb"&gt;trap&lt;/span&gt; &lt;span class="s1"&gt;'kill -TERM 122'&lt;/span&gt; TERM
+ &lt;span class="s1"&gt;'['&lt;/span&gt; x &lt;span class="s1"&gt;'!='&lt;/span&gt; x &lt;span class="s1"&gt;']'&lt;/span&gt;
+ &lt;span class="nv"&gt;WAIT_STATUS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;128
+ &lt;span class="s1"&gt;'['&lt;/span&gt; 128 &lt;span class="nt"&gt;-ge&lt;/span&gt; 128 &lt;span class="s1"&gt;']'&lt;/span&gt;
+ &lt;span class="nb"&gt;wait &lt;/span&gt;122
18:08:24,393 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.modules] &lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="p"&gt;)&lt;/span&gt; JBoss Modules version 1.11.0.Final
18:08:25,034 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.msc] &lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt; JBoss MSC version 1.4.12.Final
18:08:25,050 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.threads] &lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt; JBoss Threads version 2.4.0.Final
18:08:25,219 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.as] &lt;span class="o"&gt;(&lt;/span&gt;MSC service thread 1-2&lt;span class="o"&gt;)&lt;/span&gt; WFLYSRV0049: Keycloak 13.0.1 &lt;span class="o"&gt;(&lt;/span&gt;WildFly Core 15.0.1.Final&lt;span class="o"&gt;)&lt;/span&gt; starting
18:08:25,412 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.vfs] &lt;span class="o"&gt;(&lt;/span&gt;MSC service thread 1-4&lt;span class="o"&gt;)&lt;/span&gt; VFS000002: Failed to clean existing content &lt;span class="k"&gt;for &lt;/span&gt;temp file provider of &lt;span class="nb"&gt;type &lt;/span&gt;temp. Enable DEBUG level log to find what caused this
18:08:26,228 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.wildfly.security] &lt;span class="o"&gt;(&lt;/span&gt;ServerService Thread Pool &lt;span class="nt"&gt;--&lt;/span&gt; 22&lt;span class="o"&gt;)&lt;/span&gt; ELY00001: WildFly Elytron version 1.15.3.Final
^C
bash-4.4&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the huge starting log, we can see the following command, starting with &lt;code&gt;++ java&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;java '-D[Standalone]' -server -Xms64m -Xmx512m -XX:MetaspaceSize=96M -XX:MaxMetaspaceSize=256m -Djava.net.preferIPv4Stack=true -Djboss.modules.system.pkgs=org.jboss.byteman -Djava.awt.headless=true --add-exports=java.base/sun.nio.ch=ALL-UNNAMED --add-exports=jdk.unsupported/sun.misc=ALL-UNNAMED --add-exports=jdk.unsupported/sun.reflect=ALL-UNNAMED -Dorg.jboss.boot.log.file=/opt/jboss/keycloak/standalone/log/server.log -Dlogging.configuration=file:/opt/jboss/keycloak/standalone/configuration/logging.properties -jar /opt/jboss/keycloak/jboss-modules.jar -mp /opt/jboss/keycloak/modules org.jboss.as.standalone -Djboss.home.dir=/opt/jboss/keycloak -Djboss.server.base.dir=/opt/jboss/keycloak/standalone -Djboss.bind.address=172.17.0.2 -Djboss.bind.address.private=172.17.0.2 -c=standalone-ha.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the &lt;code&gt;java&lt;/code&gt; command we will put inside our &lt;code&gt;Dockerfile&lt;/code&gt;, as an &lt;code&gt;ENTRYPOINT&lt;/code&gt; to make &lt;strong&gt;Keycloak&lt;/strong&gt; start.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; jboss/keycloak:13.0.1 as base&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; gcr.io/distroless/java:11-nonroot&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --chown=nonroot:nonroot --from=base /opt/jboss /opt/jboss&lt;/span&gt;

&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; [ "java", "-D[Standalone]", "-server", "-Xms64m", "-Xmx512m", "-XX:MetaspaceSize=96M", "-XX:MaxMetaspaceSize=256m", "-Djava.net.preferIPv4Stack=true", "-Djboss.modules.system.pkgs=org.jboss.byteman", "-Djava.awt.headless=true", "--add-exports=java.base/sun.nio.ch=ALL-UNNAMED", "--add-exports=jdk.unsupported/sun.misc=ALL-UNNAMED", "--add-exports=jdk.unsupported/sun.reflect=ALL-UNNAMED", "-Dorg.jboss.boot.log.file=/opt/jboss/keycloak/standalone/log/server.log", "-Dlogging.configuration=file:/opt/jboss/keycloak/standalone/configuration/logging.properties", "-jar", "/opt/jboss/keycloak/jboss-modules.jar", "-mp", "/opt/jboss/keycloak/modules", "org.jboss.as.standalone", "-Djboss.home.dir=/opt/jboss/keycloak", "-Djboss.server.base.dir=/opt/jboss/keycloak/standalone", "-Djboss.bind.address=0.0.0.0", "-Djboss.bind.address.private=1720.0.0.0", "-c=standalone.xml" ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: You can tune this command to increase or decrease the memory setup, the private/public bind address of your keycloak instance and many other parameters. Here, we changed the configuration file used (&lt;code&gt;-c=standalone.xml&lt;/code&gt; instead of &lt;code&gt;-c=standalone-ha.xml&lt;/code&gt; for simplicity reasons) and the bound ip adresses (to &lt;code&gt;0.0.0.0&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;If we build and run this, we will be able to access the Keycloak UI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker build &lt;span class="nt"&gt;-t&lt;/span&gt; keycloak-distroless &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;+] Building 0.6s &lt;span class="o"&gt;(&lt;/span&gt;8/8&lt;span class="o"&gt;)&lt;/span&gt; FINISHED
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;internal] load build definition from Dockerfile                       0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; transferring dockerfile: 37B                                        0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;internal] load .dockerignore                                          0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; transferring context: 2B                                            0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;internal] load metadata &lt;span class="k"&gt;for &lt;/span&gt;gcr.io/distroless/java:11-nonroot         0.5s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;internal] load metadata &lt;span class="k"&gt;for &lt;/span&gt;docker.io/jboss/keycloak:13.0.1           0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;base 1/1] FROM docker.io/jboss/keycloak:13.0.1                        0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;stage-1 1/2] FROM gcr.io/distroless/java:11-nonroot@sha256:07d017944  0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; CACHED &lt;span class="o"&gt;[&lt;/span&gt;stage-1 2/2] COPY &lt;span class="nt"&gt;--chown&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;nonroot:nonroot &lt;span class="nt"&gt;--from&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;base /opt/jb  0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; exporting to image                                                     0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; exporting layers                                                    0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; writing image sha256:100908720c19018f2408bb53a5d78ef3d9eb51391b165  0.0s
 &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; naming to docker.io/library/keycloak-distroless                     0.0s

&lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; 8080:8080 keycloak-distroless
18:15:22,645 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.modules] &lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt; JBoss Modules version 1.11.0.Final
18:15:23,283 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.msc] &lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt; JBoss MSC version 1.4.12.Final
18:15:23,292 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.threads] &lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt; JBoss Threads version 2.4.0.Final
18:15:23,452 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.as] &lt;span class="o"&gt;(&lt;/span&gt;MSC service thread 1-2&lt;span class="o"&gt;)&lt;/span&gt; WFLYSRV0049: Keycloak 13.0.1 &lt;span class="o"&gt;(&lt;/span&gt;WildFly Core 15.0.1.Final&lt;span class="o"&gt;)&lt;/span&gt; starting
18:15:23,694 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.vfs] &lt;span class="o"&gt;(&lt;/span&gt;MSC service thread 1-5&lt;span class="o"&gt;)&lt;/span&gt; VFS000002: Failed to clean existing content &lt;span class="k"&gt;for &lt;/span&gt;temp file provider of &lt;span class="nb"&gt;type &lt;/span&gt;temp. Enable DEBUG level log to find what caused this
18:15:24,457 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.wildfly.security] &lt;span class="o"&gt;(&lt;/span&gt;ServerService Thread Pool &lt;span class="nt"&gt;--&lt;/span&gt; 22&lt;span class="o"&gt;)&lt;/span&gt; ELY00001: WildFly Elytron version 1.15.3.Final
...
...
18:15:44,642 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.wildfly.extension.undertow] &lt;span class="o"&gt;(&lt;/span&gt;ServerService Thread Pool &lt;span class="nt"&gt;--&lt;/span&gt; 66&lt;span class="o"&gt;)&lt;/span&gt; WFLYUT0021: Registered web context: &lt;span class="s1"&gt;'/auth'&lt;/span&gt; &lt;span class="k"&gt;for &lt;/span&gt;server &lt;span class="s1"&gt;'default-server'&lt;/span&gt;
18:15:44,778 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.as.server] &lt;span class="o"&gt;(&lt;/span&gt;ServerService Thread Pool &lt;span class="nt"&gt;--&lt;/span&gt; 46&lt;span class="o"&gt;)&lt;/span&gt; WFLYSRV0010: Deployed &lt;span class="s2"&gt;"keycloak-server.war"&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;runtime-name : &lt;span class="s2"&gt;"keycloak-server.war"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
18:15:44,886 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.as.server] &lt;span class="o"&gt;(&lt;/span&gt;Controller Boot Thread&lt;span class="o"&gt;)&lt;/span&gt; WFLYSRV0212: Resuming server
18:15:44,892 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.as] &lt;span class="o"&gt;(&lt;/span&gt;Controller Boot Thread&lt;span class="o"&gt;)&lt;/span&gt; WFLYSRV0025: Keycloak 13.0.1 &lt;span class="o"&gt;(&lt;/span&gt;WildFly Core 15.0.1.Final&lt;span class="o"&gt;)&lt;/span&gt; started &lt;span class="k"&gt;in &lt;/span&gt;22800ms - Started 692 of 977 services &lt;span class="o"&gt;(&lt;/span&gt;686 services are lazy, passive or on-demand&lt;span class="o"&gt;)&lt;/span&gt;
18:15:44,896 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.as] &lt;span class="o"&gt;(&lt;/span&gt;Controller Boot Thread&lt;span class="o"&gt;)&lt;/span&gt; WFLYSRV0060: Http management interface listening on http://127.0.0.1:9990/management
18:15:44,896 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.as] &lt;span class="o"&gt;(&lt;/span&gt;Controller Boot Thread&lt;span class="o"&gt;)&lt;/span&gt; WFLYSRV0051: Admin console listening on http://127.0.0.1:9990
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we try to access &lt;code&gt;http://localhost:8080/&lt;/code&gt;, we can see the following page 🎉.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DGmNCISv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4lk0ikvc8fpzw4yl1uby.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DGmNCISv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4lk0ikvc8fpzw4yl1uby.png" alt="keycloak-ui-from-distroless"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a good start, but this is just the minimal setup with &lt;code&gt;H2&lt;/code&gt; database, we often want something more robust for production!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generating-the-perfect-configuration"&gt;
  &lt;/a&gt;
  Generating the perfect configuration
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;jboss/keycloak&lt;/code&gt; image use a lot of environment variables to configure keycloak (and the underlying &lt;code&gt;standalone.xml&lt;/code&gt;) for you… but in our case, we can't use that because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We don't have a &lt;code&gt;shell&lt;/code&gt; to run those scripts.&lt;/li&gt;
&lt;li&gt;We don't want to run those scripts at every startup / scale-up.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, we will have to &lt;em&gt;steal&lt;/em&gt; the generated &lt;code&gt;standalone.xml&lt;/code&gt; file from the original container, post start-up, and include it in our container. For this example, I will use &lt;code&gt;PostgreSQL&lt;/code&gt; as our main database.&lt;/p&gt;

&lt;p&gt;To do this, I will use two shells side-by-side, one to launch Keycloak, and the other one to fetch the configuration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# In the first shell&lt;/span&gt;
&lt;span class="c"&gt;# Creation of a docker network&lt;/span&gt;
first-shell&lt;span class="nv"&gt;$ &lt;/span&gt;docker network create keycloak-network
4da77163731b584bef2c6d0b00386b9d62e31fa216204c6c6795f66e109ba1a6
&lt;span class="c"&gt;# Launching PostgreSQL linked to the network previously created&lt;/span&gt;
first-shell&lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nt"&gt;--name&lt;/span&gt; postgres &lt;span class="nt"&gt;--net&lt;/span&gt; keycloak-network &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;POSTGRES_DB&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;keycloak &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;POSTGRES_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;keycloak &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;password postgres
229816da42707e772542f1b089c616a2333a6fbe1aea2be7efe658d6f2c934a1
first-shell&lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;--name&lt;/span&gt; keycloak &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;DB_ADDR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;postgres &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;DB_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;keycloak &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;DB_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;password &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;KEYCLOAK_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;foo &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;KEYCLOAK_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;bar &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--net&lt;/span&gt; keycloak-network jboss/keycloak:13.0.1

&lt;span class="o"&gt;=========================================================================&lt;/span&gt;

  Using PostgreSQL database

&lt;span class="o"&gt;=========================================================================&lt;/span&gt;

18:32:25,172 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.modules] &lt;span class="o"&gt;(&lt;/span&gt;CLI &lt;span class="nb"&gt;command &lt;/span&gt;executor&lt;span class="o"&gt;)&lt;/span&gt; JBoss Modules version 1.11.0.Final
18:32:25,279 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.msc] &lt;span class="o"&gt;(&lt;/span&gt;CLI &lt;span class="nb"&gt;command &lt;/span&gt;executor&lt;span class="o"&gt;)&lt;/span&gt; JBoss MSC version 1.4.12.Final
18:32:25,302 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.threads] &lt;span class="o"&gt;(&lt;/span&gt;CLI &lt;span class="nb"&gt;command &lt;/span&gt;executor&lt;span class="o"&gt;)&lt;/span&gt; JBoss Threads version 2.4.0.Final
18:32:25,453 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.as] &lt;span class="o"&gt;(&lt;/span&gt;MSC service thread 1-2&lt;span class="o"&gt;)&lt;/span&gt; WFLYSRV0049: Keycloak 13.0.1 &lt;span class="o"&gt;(&lt;/span&gt;WildFly Core 15.0.1.Final&lt;span class="o"&gt;)&lt;/span&gt; starting
...
18:32:59,128 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.as] &lt;span class="o"&gt;(&lt;/span&gt;Controller Boot Thread&lt;span class="o"&gt;)&lt;/span&gt; WFLYSRV0060: Http management interface listening on http://127.0.0.1:9990/management
18:32:59,129 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.as] &lt;span class="o"&gt;(&lt;/span&gt;Controller Boot Thread&lt;span class="o"&gt;)&lt;/span&gt; WFLYSRV0051: Admin console listening on http://127.0.0.1:9990 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In another shell, while the previous is still running, we will execute the following command to get the &lt;code&gt;standalone.xml&lt;/code&gt; file used to configure &lt;strong&gt;Keycloak&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;second-shell&lt;span class="nv"&gt;$ &lt;/span&gt;docker &lt;span class="nb"&gt;cp &lt;/span&gt;keycloak:/opt/jboss/keycloak/standalone/configuration/standalone.xml &lt;span class="nb"&gt;.&lt;/span&gt;
second-shell&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;standalone.xml
&lt;span class="c"&gt;# We can now stop the keycloak container&lt;/span&gt;
second-shell&lt;span class="nv"&gt;$ &lt;/span&gt;docker stop keycloak
keycloak
second-shell&lt;span class="err"&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we will start the &lt;strong&gt;Distroless Keycloak&lt;/strong&gt; and mount the &lt;code&gt;standalone.xml&lt;/code&gt; inside the container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;DB_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;keycloak &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;DB_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;password &lt;span class="nt"&gt;--net&lt;/span&gt; keycloak-network &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;pwd&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;/standalone.xml:/opt/jboss/keycloak/standalone/configuration/standalone.xml &lt;span class="nt"&gt;-p&lt;/span&gt; 8080:8080 keycloak-distroless
19:42:20,707 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.modules] &lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt; JBoss Modules version 1.11.0.Final
19:42:21,317 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.msc] &lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt; JBoss MSC version 1.4.12.Final
19:42:21,329 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.threads] &lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt; JBoss Threads version 2.4.0.Final
19:42:21,470 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.as] &lt;span class="o"&gt;(&lt;/span&gt;MSC service thread 1-2&lt;span class="o"&gt;)&lt;/span&gt; WFLYSRV0049: Keycloak 13.0.1 &lt;span class="o"&gt;(&lt;/span&gt;WildFly Core 15.0.1.Final&lt;span class="o"&gt;)&lt;/span&gt; starting
19:42:21,651 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.vfs] &lt;span class="o"&gt;(&lt;/span&gt;MSC service thread 1-1&lt;span class="o"&gt;)&lt;/span&gt; VFS000002: Failed to clean existing content &lt;span class="k"&gt;for &lt;/span&gt;temp file provider of &lt;span class="nb"&gt;type &lt;/span&gt;temp. Enable DEBUG level log to find what caused this
19:42:22,577 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.wildfly.security] &lt;span class="o"&gt;(&lt;/span&gt;ServerService Thread Pool &lt;span class="nt"&gt;--&lt;/span&gt; 20&lt;span class="o"&gt;)&lt;/span&gt; ELY00001: WildFly Elytron version 1.15.3.Final
...
19:43:58,356 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.as] &lt;span class="o"&gt;(&lt;/span&gt;Controller Boot Thread&lt;span class="o"&gt;)&lt;/span&gt; WFLYSRV0025: Keycloak 13.0.1 &lt;span class="o"&gt;(&lt;/span&gt;WildFly Core 15.0.1.Final&lt;span class="o"&gt;)&lt;/span&gt; started &lt;span class="k"&gt;in &lt;/span&gt;17828ms - Started 595 of 873 services &lt;span class="o"&gt;(&lt;/span&gt;584 services are lazy, passive or on-demand&lt;span class="o"&gt;)&lt;/span&gt;
19:43:58,362 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.as] &lt;span class="o"&gt;(&lt;/span&gt;Controller Boot Thread&lt;span class="o"&gt;)&lt;/span&gt; WFLYSRV0060: Http management interface listening on http://127.0.0.1:9990/management
19:43:58,363 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.as] &lt;span class="o"&gt;(&lt;/span&gt;Controller Boot Thread&lt;span class="o"&gt;)&lt;/span&gt; WFLYSRV0051: Admin console listening on http://127.0.0.1:9990
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And &lt;strong&gt;Voila&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mYI3fOmI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8o9no0uv4590wnqpnra.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mYI3fOmI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8o9no0uv4590wnqpnra.png" alt="keycloak-auth"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jXjJvbTA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jky6d1pt4milf243xcup.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jXjJvbTA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jky6d1pt4milf243xcup.png" alt="keycloak-login"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D6xQbD7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6stjtu120ximoqrklovd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D6xQbD7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6stjtu120ximoqrklovd.png" alt="keycloak-ui"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#what-about-security"&gt;
  &lt;/a&gt;
  What about security?
&lt;/h1&gt;

&lt;p&gt;The original and main purpose of this manipulation is to reduce the number of CVEs present in our image. We will be able to compare it using &lt;a href="https://github.com/aquasecurity/trivy"&gt;trivy&lt;/a&gt; again on our newly image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;trivy image keycloak-distroless
2021-05-26T21:11:15.959+0200    INFO    Detected OS: debian
2021-05-26T21:11:15.959+0200    INFO    Detecting Debian vulnerabilities...
2021-05-26T21:11:15.963+0200    INFO    Number of PL dependency files: 621
2021-05-26T21:11:15.963+0200    INFO    Detecting jar vulnerabilities...

keycloak-distroless &lt;span class="o"&gt;(&lt;/span&gt;debian 10.9&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=================================&lt;/span&gt;
Total: 27 &lt;span class="o"&gt;(&lt;/span&gt;UNKNOWN: 0, LOW: 23, MEDIUM: 3, HIGH: 1, CRITICAL: 0&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see, our image contain fewer vulnerabilities, at &lt;code&gt;LOW&lt;/code&gt;, &lt;code&gt;MEDIUM&lt;/code&gt; or &lt;code&gt;HIGH&lt;/code&gt; level. Again, this depends on &lt;em&gt;when&lt;/em&gt; you are doing this analysis. With the solution provided in this article, you'll be able to rebuild your keycloak on a new, up-to-date, &lt;strong&gt;Distroless base&lt;/strong&gt; image without &lt;em&gt;updating&lt;/em&gt; keycloak. With the original keycloak image, the keycloak version is tied to the OS version (and security flaws).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The &lt;code&gt;jboss/keycloak:13.0.1&lt;/code&gt; was released few hours before the creation of this article while the &lt;code&gt;distroless/java-debian10:non-root&lt;/code&gt; was released 1 month ago. This is the worst comparison scenario possible for the &lt;strong&gt;Distroless&lt;/strong&gt; base image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i7VvNvha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xg69znq0rbkaxirtjxky.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i7VvNvha--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xg69znq0rbkaxirtjxky.png" alt="dive-distroless"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another benefit of this alternative is to create a smaller image for keycloak. The previous &lt;code&gt;dive&lt;/code&gt; reports stated &lt;code&gt;698 MB&lt;/code&gt; for the official image when our custom image weight only &lt;code&gt;519 MB&lt;/code&gt;, so around &lt;code&gt;179 MB&lt;/code&gt; reduction 🏋️‍♂️, and I'm sure we can remove almost &lt;code&gt;100MB&lt;/code&gt; by removing all useless binaries in the image (useless drivers, command line tools, documentation…).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;With this article, you should be able to build, from the official &lt;code&gt;jboss/keycloak&lt;/code&gt; image a custom one based on the &lt;strong&gt;Distroless/java&lt;/strong&gt; and even fix CVEs by doing it again when a new version of &lt;strong&gt;Distroless/java&lt;/strong&gt; image is released.&lt;/p&gt;

&lt;p&gt;I hope you liked it, you can find all the sample files from this article in this &lt;strong&gt;GitLab&lt;/strong&gt; repository: &lt;a href="https://gitlab.com/davinkevin/keycloak-distroless"&gt;davinkevin/keycloak-distroless&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>keycloak</category>
      <category>docker</category>
      <category>security</category>
      <category>java</category>
    </item>
    <item>
      <title>Top 8 Self-Improvement Tips To Grow as a Software Engineer (Developer)...</title>
      <author>Ankur Tyagi</author>
      <pubDate>Fri, 28 May 2021 05:26:14 +0000</pubDate>
      <link>https://dev.to/tyaga001/top-8-self-improvement-tips-to-grow-as-a-software-engineer-developer-4fda</link>
      <guid>https://dev.to/tyaga001/top-8-self-improvement-tips-to-grow-as-a-software-engineer-developer-4fda</guid>
      <description>&lt;p&gt;Many developers will neglect to do what will make us the best possible version of ourselves.&lt;/p&gt;

&lt;p&gt;Make the most of yourself....for that is all there is of you...&lt;/p&gt;

&lt;p&gt;Remember:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Motivation is what gets you started...Habit is what keeps you going...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#1-be-thankful-for-what-you-have"&gt;
  &lt;/a&gt;
  1- Be Thankful For What You Have...
&lt;/h2&gt;

&lt;p&gt;It’s difficult to focus on self-improvement when you fail to recognize what you already have in life. &lt;/p&gt;

&lt;p&gt;Take time out of your day to sit and reflect:&lt;/p&gt;

&lt;p&gt;What you have, &lt;br&gt;
Where you are, &lt;br&gt;
How you get here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-be-kind-to-yourself"&gt;
  &lt;/a&gt;
  2- Be Kind To Yourself...
&lt;/h2&gt;

&lt;p&gt;If you constantly have hundreds of things on your to-do list, you will never finish it and will constantly feel overwhelmed.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Don’t forget to appreciate yourself....&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Be kind. &lt;br&gt;
Love. &lt;br&gt;
Breathe.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-stop-comparing-yourself-to-others"&gt;
  &lt;/a&gt;
  3- Stop Comparing Yourself To Others...
&lt;/h2&gt;

&lt;p&gt;Stay focused on your own lane – it’s the only one that matters.&lt;/p&gt;

&lt;p&gt;Instead, compare yourself to your past self and look at how far you’ve come on your journey.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Stop worrying about what other people are thinking about you!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#4-do-a-screen-detox"&gt;
  &lt;/a&gt;
  4- Do A Screen Detox...
&lt;/h2&gt;

&lt;p&gt;Schedule screen time detox. &lt;/p&gt;

&lt;p&gt;We all spend far too much time on social media and sometimes a little time disconnected can do the world of good.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Don’t take your health for granted. Don’t take your body for granted.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Take rest.&lt;br&gt;
Take time off.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-learn-to-say-no"&gt;
  &lt;/a&gt;
  5- Learn To Say No...
&lt;/h2&gt;

&lt;p&gt;Setting boundaries by saying ‘no’ to people in your life can be one of the most difficult things to start doing. &lt;/p&gt;

&lt;p&gt;But you know...&lt;/p&gt;

&lt;p&gt;Saying NO can be the ultimate self-care.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Learn to say no, and deal with the discomfort that can sometimes come with it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#6-top-5-things-list"&gt;
  &lt;/a&gt;
  6- Top 5 Things List...
&lt;/h2&gt;

&lt;p&gt;-Things you’re grateful for&lt;br&gt;
 -Good things that happened today&lt;br&gt;
 -Things you learned today&lt;br&gt;
 -Memories you want to remember today&lt;/p&gt;

&lt;p&gt;Practice gratitude, &lt;br&gt;
Practice generosity, &lt;br&gt;
Practice positivity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-make-a-plan"&gt;
  &lt;/a&gt;
  7- Make A Plan...
&lt;/h2&gt;

&lt;p&gt;Create a plan for everything. &lt;/p&gt;

&lt;p&gt;I know that may sound really tedious! But I promise you that amazing things happen when you create a plan, take action and go into it with a positive mindset.&lt;/p&gt;

&lt;p&gt;Set Goals.&lt;br&gt;
Create an action plan.&lt;br&gt;
Execute.&lt;br&gt;
Repeat...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-find-people-you-admire"&gt;
  &lt;/a&gt;
  8- Find People You Admire...
&lt;/h2&gt;

&lt;p&gt;Who do you look up to? &lt;br&gt;
Who do you aspire to be like? &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We all need people we aspire to in one way or another. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It gives us something (or someone) tangible to work towards.&lt;/p&gt;

&lt;p&gt;Thanks for reading guys...&lt;/p&gt;

&lt;p&gt;I'm writing threads weekly on Twitter to help you to become a better software engineer (developer)...&lt;/p&gt;

&lt;p&gt;"Don't miss out" Follow your mentor on  &lt;a href="https://twitter.com/TheAnkurTyagi"&gt;Twitter&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;For more awesome blogs: &lt;br&gt;
Checkout --&amp;gt;  &lt;a href="https://theankurtyagi.com/"&gt;My website&lt;/a&gt; &lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>career</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Three real-world examples of distributed Elixir (pt. 1)</title>
      <author>Ricardo García Vega</author>
      <pubDate>Fri, 28 May 2021 05:22:59 +0000</pubDate>
      <link>https://dev.to/bigardone/three-real-world-examples-of-distributed-elixir-pt-1-9j6</link>
      <guid>https://dev.to/bigardone/three-real-world-examples-of-distributed-elixir-pt-1-9j6</guid>
      <description>&lt;p&gt;While deploying any project to a production environment, you can either scale&lt;br&gt;
it vertically (adding more resources to the single instance where it is running) or horizontally (adding multiple instances).&lt;br&gt;
If you don't like putting all the eggs in a single basket and choose the horizontal approach, Elixir offers all the necessary&lt;br&gt;
distributed features that you need out of the box without&lt;br&gt;
any additional dependencies, letting you build a cluster between the different instances of your application.&lt;/p&gt;

&lt;p&gt;Clustering your service allows you to do very interesting stuff, from spawning new processes in any instance to sending messages between cluster nodes,&lt;br&gt;
letting you build very creative solutions. Although this might sound complex, in reality, it is straightforward to achieve since&lt;br&gt;
these distributed capabilities are integrated into the language that you already know,&lt;br&gt;
letting you design your applications in a totally different way. Along with these post series, we will explore three different&lt;br&gt;
real-world use cases of distributed Elixir, but before, let's go back to the basics and see how to build an Elixir cluster.&lt;br&gt;
Let's get cracking!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#building-a-simple-cluster"&gt;
  &lt;/a&gt;
  Building a simple cluster
&lt;/h2&gt;

&lt;p&gt;Let's generate a basic OTP application, and start iterating from there:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;➜ mix new simple_cluster --sup
...
➜ cd simple_cluster
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To build the cluster, we need two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To provide a name for the current application instance.&lt;/li&gt;
&lt;li&gt;To connect the different nodes once the application starts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first one is straightforward, and we can achieve it by adding the &lt;code&gt;--name&lt;/code&gt; argument to the start command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;➜ iex --name n1@127.0.0.1 -S mix
Erlang/OTP 24 [erts-12.0.1] [source] [64-bit] [smp:12:12] [ds:12:12:10] [async-threads:1] [jit]

Interactive Elixir (1.12.0) - press Ctrl+C to exit (type h() ENTER for help)
iex(n1@127.0.0.1)1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Easy, right? Please note the iex prompt &lt;code&gt;iex(n1@127.0.0.1)1&amp;gt;&lt;/code&gt; containing the node name we just assigned. Let's start a new node in a different terminal window setting the &lt;code&gt;n2&lt;/code&gt; name:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;➜ iex --name n2@127.0.0.1 -S mix
Erlang/OTP 24 [erts-12.0.1] [source] [64-bit] [smp:12:12] [ds:12:12:10] [async-threads:1] [jit]

Interactive Elixir (1.12.0) - press Ctrl+C to exit (type h() ENTER for help)
iex(n2@127.0.0.1)1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now that we have both nodes up and running, let's create the cluster by manually connecting the nodes using Elixir's &lt;a href="https://hexdocs.pm/elixir/1.12/Node.html#connect/1"&gt;Node.connect/1&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;:"n2@127.0.0.1"&lt;/span&gt;
&lt;span class="no"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And the same from &lt;code&gt;n2&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt; &lt;span class="ss"&gt;:"n1@127.0.0.1"&lt;/span&gt;
&lt;span class="no"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To confirm that everything went fine, let's run &lt;a href="https://hexdocs.pm/elixir/1.12/Node.html#list/0"&gt;Node.list/0&lt;/a&gt; on each node, which returns the list of nodes to which the current instance has connected:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:"n2@127.0.0.1"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:"n1@127.0.0.1"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Our first clustered application is ready, yay! However, connecting manually to each of the nodes from &lt;code&gt;iex&lt;/code&gt; is less than ideal. There is a more convenient way of doing it, which is adding a &lt;a href="https://erlang.org/doc/man/config.html"&gt;sys.config&lt;/a&gt; file to the root of the project with the following content:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erlang"&gt;&lt;code&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="n"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;sync_nodes_optional&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;'n1@127.0.0.1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;'n2@127.0.0.1'&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;sync_nodes_timeout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]}&lt;/span&gt;
&lt;span class="p"&gt;].&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This file sets default values on the application start, in this particular case:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;sync_nodes_optional&lt;/code&gt;: the list of possible nodes in the cluster.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sync_nodes_timeout&lt;/code&gt;: the timeout to synchronize the nodes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To apply this configuration, let's start each node setting the &lt;code&gt;--erl&lt;/code&gt; parameter with the configuration file:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="err"&gt;➜&lt;/span&gt; &lt;span class="n"&gt;iex&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;erl&lt;/span&gt; &lt;span class="s2"&gt;"-config sys.config"&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="no"&gt;S&lt;/span&gt; &lt;span class="n"&gt;mix&lt;/span&gt;
&lt;span class="no"&gt;Erlang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="no"&gt;OTP&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;erts&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;12.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;smp:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;ds:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ss"&gt;threads:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;jit&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="no"&gt;Interactive&lt;/span&gt; &lt;span class="no"&gt;Elixir&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.12&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;press&lt;/span&gt; &lt;span class="no"&gt;Ctrl&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="no"&gt;C&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="k"&gt;exit&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="no"&gt;ENTER&lt;/span&gt; &lt;span class="n"&gt;for&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="err"&gt;➜&lt;/span&gt; &lt;span class="n"&gt;iex&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;erl&lt;/span&gt; &lt;span class="s2"&gt;"-config sys.config"&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="no"&gt;S&lt;/span&gt; &lt;span class="n"&gt;mix&lt;/span&gt;
&lt;span class="no"&gt;Erlang&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="no"&gt;OTP&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;erts&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;12.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bit&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;smp:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;ds:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ss"&gt;threads:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;jit&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="no"&gt;Interactive&lt;/span&gt; &lt;span class="no"&gt;Elixir&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.12&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;press&lt;/span&gt; &lt;span class="no"&gt;Ctrl&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="no"&gt;C&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="k"&gt;exit&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="no"&gt;ENTER&lt;/span&gt; &lt;span class="n"&gt;for&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To confirm that the nodes are connected, let's create a module that spawns a process on each node that observes any change in the cluster membership:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ./lib/simple_cluster/observer.ex&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;GenServer&lt;/span&gt;
  &lt;span class="kn"&gt;require&lt;/span&gt; &lt;span class="no"&gt;Logger&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;start_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;GenServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;__MODULE__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{})&lt;/span&gt;

  &lt;span class="nv"&gt;@impl&lt;/span&gt; &lt;span class="no"&gt;GenServer&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="ss"&gt;:net_kernel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;monitor_nodes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="nv"&gt;@impl&lt;/span&gt; &lt;span class="no"&gt;GenServer&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;handle_info&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:nodedown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;# A node left the cluster&lt;/span&gt;
    &lt;span class="no"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"--- Node down: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:noreply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;handle_info&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:nodeup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="c1"&gt;# A new node joined the cluster&lt;/span&gt;
    &lt;span class="no"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"--- Node up: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:noreply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This simple GenServer calls &lt;a href="https://erlang.org/doc/man/net_kernel.html#monitor_nodes-1"&gt;:net_kernel.monitor_nodes/1&lt;/a&gt; on its initialization, subscribing to any node status change in the cluster. Therefore, it receives both &lt;code&gt;{:nodeup, node}&lt;/code&gt; and &lt;code&gt;{:nodedown, node}&lt;/code&gt; messages whenever a node joins or leaves the cluster. Let's add this generic server to the main supervision tree of the application:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ./lib/simple_cluster/application.ex&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;SimpleCluster&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Application&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;Application&lt;/span&gt;

  &lt;span class="nv"&gt;@impl&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="no"&gt;SimpleCluster&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Observer&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;strategy:&lt;/span&gt; &lt;span class="ss"&gt;:one_for_one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name:&lt;/span&gt; &lt;span class="no"&gt;SimpleCluster&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Supervisor&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="no"&gt;Supervisor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's start again our two nodes and see what happens. If we start &lt;code&gt;n2&lt;/code&gt;, we can see the following log message in &lt;code&gt;n1&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;06:02:40.129 [info]  --- Node up: n2@127.0.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If we stop &lt;code&gt;n2&lt;/code&gt;, we can see the corresponding logger message:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;06:05:22.051 [info]  --- Node down: n2@127.0.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To test out communication between the nodes, let's add a new module that sends a message to all the nodes in the cluster, printing the result:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="c1"&gt;# .lib/simple_cluster/ping.ex&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;SimpleCluster&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Ping&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;GenServer&lt;/span&gt;
  &lt;span class="kn"&gt;require&lt;/span&gt; &lt;span class="no"&gt;Logger&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;start_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;GenServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;__MODULE__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;%{},&lt;/span&gt; &lt;span class="ss"&gt;name:&lt;/span&gt; &lt;span class="bp"&gt;__MODULE__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;ping&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="no"&gt;GenServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="bp"&gt;__MODULE__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;&amp;amp;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="ss"&gt;:ping&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="nv"&gt;@impl&lt;/span&gt; &lt;span class="no"&gt;GenServer&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nv"&gt;@impl&lt;/span&gt; &lt;span class="no"&gt;GenServer&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;handle_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:ping&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="no"&gt;Logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"--- Receiving ping from &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="ss"&gt;:pong&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This GenServer has two different parts. First of all, it exposes a public &lt;code&gt;ping/0&lt;/code&gt; function, which takes all the nodes in the cluster and sends them a &lt;code&gt;:ping&lt;/code&gt; message using &lt;a href="https://hexdocs.pm/elixir/1.12/GenServer.html#call/3"&gt;GenServer.call/3&lt;/a&gt;. This function accepts the following as the first parameter:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;atom&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;By using &lt;code&gt;{__MODULE__, &amp;amp;1}&lt;/code&gt; we are saying: Send &lt;code&gt;:ping&lt;/code&gt; to the process with the name &lt;code&gt;SimpleCluster.Ping&lt;/code&gt; in the node &lt;code&gt;&amp;amp;1&lt;/code&gt;. This takes us to the second part of the module, the callback &lt;code&gt;handle_call(:ping, from, state)&lt;/code&gt;, which receives the incoming message logging the sender and responding with a &lt;code&gt;{:ok, node(), :pong}&lt;/code&gt; tuple. Let's add this module to the main supervision tree, restart our instances and see it in action:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ./lib/simple_cluster/application.ex&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;SimpleCluster&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Application&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="no"&gt;SimpleCluster&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Observer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="no"&gt;SimpleCluster&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Ping&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iex(n1@127.0.0.1)1&amp;gt; SimpleCluster.Ping.ping

06:33:19.704 [info]  [{:ok, :"n2@127.0.0.1", :pong}]
:ok
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iex(n2@127.0.0.1)1&amp;gt;
06:33:19.701 [info]  --- Receiving ping from {#PID&amp;lt;6589.174.0&amp;gt;, [:alias | #Reference&amp;lt;6589.2917998909.4144300034.261849&amp;gt;]}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Nodes have automagically connected, and processes can communicate between them as we expected. Nevertheless, this is again far from ideal in a real-world application deployed into a production environment. How would we handle dynamic IPs? How would we manage new nodes connecting or leaving the cluster? Thankfully there is a library that addresses this for us.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#automatic-cluster-formation-with-raw-libcluster-endraw-"&gt;
  &lt;/a&gt;
  Automatic cluster formation with &lt;code&gt;libcluster&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;libcluster provides a mechanism for automatically forming clusters of Erlang nodes, with either static or dynamic node membership, offering a wide variety of strategies and even letting you create your own. We will not dive too deep into its internal details in this series, but you can look at its different strategies in its official docs. To use it, let's get rid of the &lt;code&gt;sys.config&lt;/code&gt; file, and add &lt;code&gt;libcluster&lt;/code&gt; to our application dependencies:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;➜ rm sys.config
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="c1"&gt;# mix.exs&lt;/span&gt;

&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;SimpleCluster&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;MixProject&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;Mix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Project&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;

  &lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;deps&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:libcluster&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"~&amp;gt; 3.3"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Don't forget to run the corresponding &lt;code&gt;mix deps.get&lt;/code&gt; :P. To create the cluster, libcluster uses &lt;a href="https://hexdocs.pm/libcluster/readme.html#clustering"&gt;different strategies&lt;/a&gt;, and in this particular case, we will use the &lt;a href="https://hexdocs.pm/libcluster/Cluster.Strategy.Epmd.html"&gt;Cluster.Strategy.Epmd&lt;/a&gt; strategy, in which we can set the list of hosts as we did with the former &lt;code&gt;sys.config&lt;/code&gt; file. Let's go ahead and add the cluster supervisor and its configuration to the main supervision tree:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ./lib/simple_cluster/application.ex&lt;/span&gt;
&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;SimpleCluster&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Application&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="no"&gt;Application&lt;/span&gt;

  &lt;span class="nv"&gt;@impl&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="no"&gt;Cluster&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Supervisor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;topologies&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;name:&lt;/span&gt; &lt;span class="no"&gt;SimpleCluster&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;ClusterSupervisor&lt;/span&gt;&lt;span class="p"&gt;]]},&lt;/span&gt;
      &lt;span class="no"&gt;SimpleCluster&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Observer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="no"&gt;SimpleCluster&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Ping&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;strategy:&lt;/span&gt; &lt;span class="ss"&gt;:one_for_one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name:&lt;/span&gt; &lt;span class="no"&gt;LibclusterCluster&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Supervisor&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="no"&gt;Supervisor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;topologies&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="ss"&gt;example:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="ss"&gt;strategy:&lt;/span&gt; &lt;span class="no"&gt;Cluster&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Strategy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;Epmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;config:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="ss"&gt;hosts:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="ss"&gt;:"n1@127.0.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="ss"&gt;:"n2@127.0.0.1"&lt;/span&gt;
          &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now we can start both nodes without the &lt;code&gt;--erl&lt;/code&gt; flag:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;➜ iex --name n1@127.0.0.1 -S mix
Erlang/OTP 24 [erts-12.0.1] [source] [64-bit] [smp:12:12] [ds:12:12:10] [async-threads:1] [jit]

07:06:38.384 [warn]  [libcluster:example] unable to connect to :"n2@127.0.0.1"
Interactive Elixir (1.12.0) - press Ctrl+C to exit (type h() ENTER for help)
iex(n1@127.0.0.1)1&amp;gt;
07:06:56.968 [info]  --- Node up: n2@127.0.0.1
iex(n1@127.0.0.1)2&amp;gt; SimpleCluster.Ping.ping()
:ok

07:07:36.098 [info]  [{:ok, :"n2@127.0.0.1", :pong}]
07:10:10.305 [info]  --- Node down: n2@127.0.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Everything is working like before, yay! Now that we have ready the basics of a clustered Elixir application, in the following posts&lt;br&gt;
we will implement three creative solutions around it, starting with the most simple one in which we will build a singleton process&lt;br&gt;
across the cluster in charge of executing a periodic task.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/bigardone"&gt;
        bigardone
      &lt;/a&gt; / &lt;a href="https://github.com/bigardone/distributed-elixir-examples"&gt;
        distributed-elixir-examples
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Code examples for the "Three real-world examples of distributed Elixir" blog series
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>elixir</category>
    </item>
    <item>
      <title>JavaScript Chapter 7 - Events in JavaScript</title>
      <author>Dzun N</author>
      <pubDate>Fri, 28 May 2021 05:05:15 +0000</pubDate>
      <link>https://dev.to/dzun_n/javascript-chapter-7-events-in-javascript-456o</link>
      <guid>https://dev.to/dzun_n/javascript-chapter-7-events-in-javascript-456o</guid>
      <description>&lt;p&gt;Hello friends 👋👋. See you again at the basic JavaScript tutorial. This time according to the title, we will discuss events in JavaScript, just go to the material.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-and-understanding-javascript"&gt;
  &lt;/a&gt;
  INTRODUCTION AND UNDERSTANDING JAVASCRIPT
&lt;/h2&gt;

&lt;p&gt;Hello friends. This time, according to the title, we will discuss Events in Javascript. Do you know what an event is? An event is something the user does that triggers the nets of code. Surely my friend is still confused by this understanding. I will explain again bye, Suppose we have a button on a website or application that we build. And we want to give an action when the button is clicked. So the event here is an "event". For example, when the button is clicked it will display a sentence. So the event is a click. The following events are contained in javascript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#kinds-of-events-in-javascript"&gt;
  &lt;/a&gt;
  Kinds of Events in Javascript
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;onclick&lt;/code&gt; = event when an html element is clicked&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onchange&lt;/code&gt; = event when an html element changes&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onmouseover&lt;/code&gt; = event if an html element is placed the mouse cursor&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onmouseout&lt;/code&gt; = event if when the mouse cursor leaves the html element&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onkeydown&lt;/code&gt; = is an event if when an HTML element occurs&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onload&lt;/code&gt; = event when the element or page is loaded
Well, we will discuss some of the Javascript events described above.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-make-a-javascript-event"&gt;
  &lt;/a&gt;
  HOW TO MAKE A JAVASCRIPT EVENT
&lt;/h2&gt;

&lt;p&gt;To create an event with javascript, we can add attributes with the event names above, to the html element that we want to give an event for example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-event-on-javascript"&gt;
  &lt;/a&gt;
  EXAMPLE EVENT ON JAVASCRIPT
&lt;/h2&gt;

&lt;p&gt;For example I will create a click event on a button. So I want to display a sentence when the button is clicked:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nK3lwy-_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xnmg7dc0g5glk2vjo2ga.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nK3lwy-_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xnmg7dc0g5glk2vjo2ga.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Try my friend, pay attention to the example above, there is a button that we give when the event is clicked.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"show_name()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Click here&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When this button is clicked it will run the &lt;code&gt;show_name()&lt;/code&gt; function. So then we create a function name show.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;tampil_nama&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;&lt;span class="nx"&gt;dicument&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementByid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hasil&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;h3&amp;gt;Nama Saya Dzun&amp;lt;/h3&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The content of the function &lt;code&gt;show_name()&lt;/code&gt; is to display the sentence "My name is Yogi" in the result id element.&lt;/p&gt;

&lt;p&gt;Look at the following picture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U-SVYRrZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3u7lqpgyujlq67srzqh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U-SVYRrZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3u7lqpgyujlq67srzqh.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cFNdZv2r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/orjwk8apmzihtwh3ceqs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cFNdZv2r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/orjwk8apmzihtwh3ceqs.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After clicking the "button" it will appear under the "My name is Dzun" button.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  CONCLUSION
&lt;/h2&gt;

&lt;p&gt;In conclusion, there are 6 events in javascript and the one I example above is the onclick event. So when we click the button, the contents of the function will appear more or less like that and you can develop it yourself according to your creativity. So, until this article on learning Javascript, Thank you  &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Create Chrome Desktop Notfications with JavaScript in 100 seconds</title>
      <author>Richard Wynn</author>
      <pubDate>Fri, 28 May 2021 04:44:17 +0000</pubDate>
      <link>https://dev.to/richardwynn/create-chrome-desktop-notfications-with-javascript-in-100-seconds-1i57</link>
      <guid>https://dev.to/richardwynn/create-chrome-desktop-notfications-with-javascript-in-100-seconds-1i57</guid>
      <description>&lt;p&gt;In this article, I will show you steps to create a simple Chrome Desktop Notification looked like the image below by using JavaScript &lt;strong&gt;just in 100 seconds&lt;/strong&gt; ⏰ Let's count down!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8pK7bMP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v9g0ueoqs70qpgbx0ogp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8pK7bMP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v9g0ueoqs70qpgbx0ogp.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#openfilefolder-repository"&gt;
  &lt;/a&gt;
  📂 Repository
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You can download the source code of this article on my Github: &lt;a href="https://github.com/richard-wynn/simple-chrome-desktop-notifications"&gt;https://github.com/richard-wynn/simple-chrome-desktop-notifications&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#wrench-necessary-stuffs"&gt;
  &lt;/a&gt;
  🔧 Necessary Stuffs
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://code.visualstudio.com"&gt;Visual Studio Code&lt;/a&gt;&lt;/strong&gt; with &lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;Live Server&lt;/a&gt;&lt;/strong&gt; extension installed&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://www.google.com/chrome"&gt;Google Chrome&lt;/a&gt;&lt;/strong&gt;, of course 😁&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#computer-its-coding-time"&gt;
  &lt;/a&gt;
  💻 It's Coding Time!
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#indexhtml"&gt;
  &lt;/a&gt;
  index.html
&lt;/h3&gt;

&lt;p&gt;Create an &lt;code&gt;index.html&lt;/code&gt; file with the following content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"script.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Simple Chrome Desktop Notification&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"btn-show-notification"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Notify Me!&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#scriptjs"&gt;
  &lt;/a&gt;
  script.js
&lt;/h3&gt;

&lt;p&gt;Next, create a &lt;code&gt;script.js&lt;/code&gt; file inside the same folder with the &lt;code&gt;index.html&lt;/code&gt; file above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DOMContentLoaded&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Request desktop notifications permission on page load&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Desktop notifications are not available in your browser.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;permission&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;granted&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestPermission&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showNotification&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;permission&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;granted&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestPermission&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Simple Chrome Desktop Notification&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ltr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notification&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Notification&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="nx"&gt;notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://www.google.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#btn-show-notification&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;showNotification&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#its-running-time"&gt;
  &lt;/a&gt;
  It's Running Time!
&lt;/h2&gt;

&lt;p&gt;In &lt;strong&gt;Visual Studio Code&lt;/strong&gt;, go to &lt;code&gt;View&lt;/code&gt; -&amp;gt; &lt;code&gt;Command Palette...&lt;/code&gt; and type &lt;code&gt;Live Server: Open with Live Server&lt;/code&gt; then press &lt;code&gt;Enter&lt;/code&gt;, a new page will be shown:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fin1egAc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yzmk8b0qlklw93b7trkm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fin1egAc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yzmk8b0qlklw93b7trkm.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;code&gt;Notify Me!&lt;/code&gt; and hurray, a notification appears:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vkIL9Az3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tu5hnw97ccyb5uqpq4l0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vkIL9Az3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tu5hnw97ccyb5uqpq4l0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just simple as it is 😉 Hope this will help in case you need to use desktop notifications for your website(s).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#iphone-keep-in-touch"&gt;
  &lt;/a&gt;
  📱 Keep in Touch
&lt;/h2&gt;

&lt;p&gt;If you like this article, don't forget to follow and stay in touch with my latest ones in the future by following me via:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Twitter:&lt;/strong&gt; &lt;a href="https://twitter.com/RichardWynn01"&gt;https://twitter.com/RichardWynn01&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Medium&lt;/strong&gt;: &lt;a href="https://richard-wynn.medium.com"&gt;https://richard-wynn.medium.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href="https://github.com/richard-wynn"&gt;https://github.com/richard-wynn&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>tutorial</category>
      <category>notification</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Set Up Firebase Authentication in React from Scratch</title>
      <author>Swayam Singh</author>
      <pubDate>Fri, 28 May 2021 04:43:18 +0000</pubDate>
      <link>https://dev.to/_s_w_a_y_a_m_/how-to-set-up-firebase-authentication-in-react-from-scratch-gph</link>
      <guid>https://dev.to/_s_w_a_y_a_m_/how-to-set-up-firebase-authentication-in-react-from-scratch-gph</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview:
&lt;/h2&gt;

&lt;p&gt;User authentication is a must if you are building a platform that stores some private data of users like a social media app. At the same time, it’s kind of tricky to implement. In this article, we will be discussing how we can use Firebase to create a fully functional and secure user authentication.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#agenda"&gt;
  &lt;/a&gt;
  Agenda:
&lt;/h2&gt;

&lt;p&gt;Following is the list of features we will build later on in this article.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Sign Up&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Log In&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dashboard&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Log Out&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Forget Password&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Protected Routes&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Familiar with React environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Basic knowledge of &lt;strong&gt;Context API.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Basic knowledge of routing in React.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lets-go-with-the-flow"&gt;
  &lt;/a&gt;
  Let’s go with the flow
&lt;/h2&gt;

&lt;p&gt;So firstly, we need to create a React app. Navigate into the &lt;code&gt;Desktop&lt;/code&gt; folder inside the terminal and type &lt;code&gt;npx create-react-app &amp;lt;give any name&amp;gt;&lt;/code&gt; . Inside the &lt;code&gt;src&lt;/code&gt; folder, just keep &lt;code&gt;index.js&lt;/code&gt; and &lt;code&gt;App.js&lt;/code&gt;, delete the rest — we don’t need them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-firebase"&gt;
  &lt;/a&gt;
  Setting up Firebase:
&lt;/h3&gt;

&lt;p&gt;Okay, so now, visit &lt;a href="https://firebase.google.com/"&gt;firebase&lt;/a&gt; and click on &lt;strong&gt;go to console&lt;/strong&gt; there, you click on &lt;strong&gt;Add Project&lt;/strong&gt; and give it any name you want.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qKwqSfRh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039535195/-HUE6byJa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qKwqSfRh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039535195/-HUE6byJa.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;continue&lt;/strong&gt; and disable &lt;strong&gt;google analytics&lt;/strong&gt; again click on &lt;strong&gt;continue&lt;/strong&gt; . It’ll take some time to process and when it’s done, our Firebase app is now ready.&lt;/p&gt;

&lt;p&gt;Now, we need to integrate it with our React web app. Click on &lt;strong&gt;web icon&lt;/strong&gt;.  Then, it’ll ask you to enter another name of the project for integration. Don’t worry, it can be any name you want.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BRMpXL9d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039537714/yiyyfUFux.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BRMpXL9d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039537714/yiyyfUFux.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;Register app&lt;/strong&gt; Now, Firebase will give you some keys and other configuration settings so that you can connect your React app with Firebase services.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Bkv-c4H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039540377/78t5sc13f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Bkv-c4H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039540377/78t5sc13f.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Configuration file will be different for you. Also, don’t use the above keys. &lt;strong&gt;This demo app will be deleted after this article.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We will use them later. Now, let’s set up authentication. Navigate to the home page of your firebase app and click on &lt;strong&gt;authentication&lt;/strong&gt;. Then, click on &lt;strong&gt;Get Started&lt;/strong&gt;. It’ll show you some methods that you can use to create user authentication. In this article, we will be using the &lt;strong&gt;Email/Password&lt;/strong&gt; method. So, click on it. Then hit &lt;strong&gt;enable&lt;/strong&gt; only for the first option and click &lt;strong&gt;save&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Great! Now we have a method for authentication and a config file to connect the app. Let’s go to our favourite code editor and start coding!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#danger-code-ahead"&gt;
  &lt;/a&gt;
  Danger! Code ahead
&lt;/h2&gt;

&lt;p&gt;First, we are going to create a &lt;code&gt;.env.local&lt;/code&gt; file for storing our Firebase configuration details. Putting them openly naked inside your code will make it easy for hackers to access your Firebase app. Inside our react-app, create a &lt;code&gt;.env.local&lt;/code&gt; file and store only the keys and values that are inside the variable &lt;strong&gt;firebaseConfig&lt;/strong&gt;, as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---o3aiKk3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039543224/hjRwnes9E.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---o3aiKk3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039543224/hjRwnes9E.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In React, naming of environment variables start with REACT_APP&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Great! Now, it’s time to connect it. For that, we are going to use the &lt;strong&gt;firebase&lt;/strong&gt; module. And below is the list of all the modules we’ll be using for this entire project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;react-router-dom&lt;/code&gt; for working with different routes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;bootstrap&lt;/code&gt; for styling&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;react-bootstrap&lt;/code&gt; for pre-built styled-components&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;firebase&lt;/code&gt; for working with Firebase&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, go ahead and install them all at once using the command:&lt;code&gt;npm i react-router-dom bootstrap react-bootstrap firebase&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;Inside react-app, create a file &lt;code&gt;firebase.js&lt;/code&gt; for making the connection with Firebase.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---VQ0FT3q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039545881/pi7vVGxsU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---VQ0FT3q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039545881/pi7vVGxsU.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have been observant, then this file is very similar to the file that Firebase gave us for creating a connection. Yeah, we just used the &lt;code&gt;firebase&lt;/code&gt; module instead of an external JavaScript script. We initialised the app with environment variables stored in &lt;code&gt;.env.local&lt;/code&gt; file and &lt;code&gt;app.auth()&lt;/code&gt; is stored inside &lt;code&gt;auth&lt;/code&gt; which will be responsible for calling several methods like &lt;strong&gt;login, signup, logout, etc.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Very well. Now, it’s time to set up the **Context API **so that we can just define our authentication methods in one file and access them in the relevant components. Inside the &lt;code&gt;src&lt;/code&gt; folder, create another folder with the name **context **and inside it, create a file &lt;code&gt;authContext.js&lt;/code&gt; as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--79wz6O0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039548839/1hvTM-ory.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--79wz6O0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039548839/1hvTM-ory.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basic knowledge of &lt;strong&gt;Context API&lt;/strong&gt; is mentioned in the prerequisites. But still, I’m explaining it. Above, you can see the basic structure of the context JavaScript file. Firstly, we create a context using &lt;code&gt;React.createContext()&lt;/code&gt; . It gives us two things — &lt;strong&gt;Provider and Consumer&lt;/strong&gt;. For now, we are only concerned with &lt;strong&gt;Provider&lt;/strong&gt; which enables us to pass the value in it and use them in any component.&lt;/p&gt;

&lt;p&gt;Component &lt;code&gt;AuthProvider&lt;/code&gt; returns the &lt;code&gt;&amp;lt;AuthContext.Provider&amp;gt;;&lt;/code&gt; component with a &lt;code&gt;value&lt;/code&gt; prop that contains the values we want to pass, &lt;code&gt;{children}&lt;/code&gt; refers to the root component which will be wrapped by the &lt;strong&gt;Provider&lt;/strong&gt; In the end, we created a custom hook &lt;code&gt;useAuth()&lt;/code&gt; which directly gives you all of the passed values.&lt;/p&gt;

&lt;p&gt;Now, let’s start creating our authentication methods inside &lt;strong&gt;authContext.js&lt;/strong&gt; and pass them to &lt;strong&gt;Provider&lt;/strong&gt; . Replace the comment in the above code with the following lines.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AkwahlYS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039551115/_n5-pSrdr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AkwahlYS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039551115/_n5-pSrdr.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see that firstly, we create two states for storing &lt;code&gt;currentUser&lt;/code&gt; that had info about logged in user and &lt;code&gt;loading&lt;/code&gt; for displaying &lt;code&gt;{children}&lt;/code&gt; after it is set to false. So, instead of simply rendering &lt;code&gt;{children}&lt;/code&gt; inside &lt;code&gt;&amp;lt;AuthContext.Provider&amp;gt;&lt;/code&gt;, change it to &lt;code&gt;{!loading &amp;amp;&amp;amp; children}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As I said earlier, all the authentication methods will be stored inside &lt;code&gt;auth&lt;/code&gt; from &lt;strong&gt;firebase.js&lt;/strong&gt;. So, we used &lt;code&gt;auth&lt;/code&gt; to call different methods and stored them inside respective functions so that when needed, we can call them. &lt;code&gt;useEffect()&lt;/code&gt; contains an event handler that continuously listens to the authentication state like when the user logs in and when they sign out. According to that, it sets the &lt;code&gt;currentUser&lt;/code&gt; state to logged in user or &lt;code&gt;undefined&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;&lt;code&gt;auth.onAuthStateChanged()&lt;/code&gt; is an event handler. Whenever that component loads, &lt;code&gt;useEffect()&lt;/code&gt; sets that handler for use many times. It may cause a memory leak and make your app slow. For dealing with this, &lt;code&gt;auth.onAuthStateChanged()&lt;/code&gt; returns a &lt;code&gt;unsubscribe&lt;/code&gt; method that can unsubscribe you from the event handler as the component unloads.&lt;/p&gt;

&lt;p&gt;After that, we just pass all the methods and states to values prop inside &lt;strong&gt;Provider.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, we need to wrap our root component with &lt;code&gt;AuthProvider&lt;/code&gt; component. In this app, we’ll be wrapping our &lt;code&gt;App&lt;/code&gt; component. So, open &lt;strong&gt;index.js&lt;/strong&gt; and do the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nKYAiJUS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039553368/2HT7GCkPK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nKYAiJUS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039553368/2HT7GCkPK.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now our &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt; will be &lt;code&gt;{children}&lt;/code&gt; for &lt;code&gt;&amp;lt;AuthProvider&amp;gt;&lt;/code&gt; . You can see I also imported a bootstrap CSS file for giving style to each of our components. But you can create your own custom style sheet if you want. In this article, we are just focusing on functionality.&lt;/p&gt;

&lt;p&gt;Till now, we have been dealing with the functionality setup. So, it’s time to create components for each method. Create a folder inside &lt;code&gt;src&lt;/code&gt; folder with the name as &lt;code&gt;components&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#signup-component"&gt;
  &lt;/a&gt;
  Sign-up component:
&lt;/h2&gt;

&lt;p&gt;Firstly, we are going to deal with the sign-up component. So, inside the &lt;code&gt;components&lt;/code&gt; folder, create a file with the name &lt;strong&gt;signup.js&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We will create a form with three fields — &lt;strong&gt;email, password, confirm-password&lt;/strong&gt; and check &lt;strong&gt;if confirm-passowrd matches with password&lt;/strong&gt; . Only then are we going to call the signup method from &lt;strong&gt;authContext.js&lt;/strong&gt; If the signup succeeded, then we redirect our user to the &lt;strong&gt;dashboard&lt;/strong&gt; component (going to create this later).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3B_OupV0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039555712/YWuSdq_gy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3B_OupV0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039555712/YWuSdq_gy.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As I mentioned earlier in article, our custom hook &lt;code&gt;useAuth()&lt;/code&gt; will be used to receive passed values in context and in this component, we are using the &lt;strong&gt;signup&lt;/strong&gt; method created inside &lt;strong&gt;authContext.js&lt;/strong&gt; . &lt;code&gt;Link&lt;/code&gt; is used to take the user to the &lt;strong&gt;login&lt;/strong&gt; page if they already had an account and the &lt;code&gt;useHistory&lt;/code&gt; hook is used for redirecting the user after successfully registering.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;emailRef&lt;/code&gt; , &lt;code&gt;passwordRef&lt;/code&gt; and &lt;code&gt;passwordConfirmRef&lt;/code&gt; are used as references for respective input fields, and later, we destructure the &lt;strong&gt;signup&lt;/strong&gt; method from the &lt;code&gt;useAuth&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;Now, take a look at the function &lt;code&gt;handleSubmit&lt;/code&gt;. It’s an &lt;code&gt;async&lt;/code&gt; function because authentication methods from Firebase return a &lt;strong&gt;promise&lt;/strong&gt; So, we are using &lt;code&gt;async / await&lt;/code&gt; to handle it. Here, first we are checking if the password and confirmPassword are the same. And then, inside the &lt;code&gt;try / catch&lt;/code&gt; block, we are calling the &lt;strong&gt;signup&lt;/strong&gt; function by passing the &lt;strong&gt;email&lt;/strong&gt; and &lt;strong&gt;password&lt;/strong&gt; entered by the user.&lt;/p&gt;

&lt;p&gt;That is our functionality for &lt;strong&gt;signup&lt;/strong&gt; So now, inside return, let’s create the form and other UIs. We are using &lt;strong&gt;bootstrap cards&lt;/strong&gt; and &lt;strong&gt;form&lt;/strong&gt; for styling purposes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AFhSD60E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039558266/SaccRLdou.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AFhSD60E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039558266/SaccRLdou.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just go line by line. The code is very simple. All we are doing is using &lt;strong&gt;bootstrap&lt;/strong&gt; components and creating the form. In the end, we created a link to the &lt;strong&gt;login&lt;/strong&gt; component if the user already has an account. That’s it. Our &lt;strong&gt;signup&lt;/strong&gt; component is ready.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#login-component"&gt;
  &lt;/a&gt;
  Login Component:
&lt;/h2&gt;

&lt;p&gt;Create a file inside the &lt;strong&gt;component&lt;/strong&gt; folder and name it &lt;strong&gt;login.js.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This component will be pretty much the same as the &lt;strong&gt;signup&lt;/strong&gt; component. The only difference is we are calling the &lt;strong&gt;login&lt;/strong&gt; function instead of &lt;strong&gt;signup&lt;/strong&gt;  and we don’t need to have the confirm-password field here. The rest of the code in both the components will be the same.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y2FmbWas--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039560901/Widt1Ii8A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y2FmbWas--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039560901/Widt1Ii8A.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What we are returning is also very similar to &lt;strong&gt;signup&lt;/strong&gt; Except instead of creating the link to &lt;strong&gt;login&lt;/strong&gt; we ask if they are not registered, then take them to the &lt;strong&gt;signup&lt;/strong&gt; component&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WE8KCFPU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039563451/B7ntLknPB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WE8KCFPU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039563451/B7ntLknPB.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The extra thing we are allowing users is an option to reset their password by creating a link to the &lt;strong&gt;forgetPassword&lt;/strong&gt; component (going to create it later).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#forget-password-component"&gt;
  &lt;/a&gt;
  Forget Password Component:
&lt;/h2&gt;

&lt;p&gt;The way Firebase password reset works is that when the user clicks on it, they send an email to the registered email address with further instructions and a link to reset their password.&lt;/p&gt;

&lt;p&gt;The cool thing is again, the code will be pretty similar to the above component, and here we are calling the &lt;code&gt;resetpassword&lt;/code&gt; method. Go ahead and create a file with the name &lt;strong&gt;forgetpassword.js&lt;/strong&gt; and take a look below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Br4QZ_tE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039566668/0_UV3X4Va.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Br4QZ_tE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039566668/0_UV3X4Va.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we are destructuring &lt;code&gt;resetPassword&lt;/code&gt; from custom &lt;code&gt;useAuth()&lt;/code&gt; hook and had an extra state for storing messages like &lt;strong&gt;&lt;em&gt;check your inbox blah blah blah…&lt;/em&gt;&lt;/strong&gt; after successfully calling the &lt;code&gt;resetPassword&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L1whNIf2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039568977/wFIzGmY-W.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L1whNIf2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039568977/wFIzGmY-W.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nothing new. We are already familiar with this type of code and that’s it — our &lt;strong&gt;reset password&lt;/strong&gt; component is ready.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dashboard"&gt;
  &lt;/a&gt;
  Dashboard:
&lt;/h2&gt;

&lt;p&gt;For now, our dashboard just shows the email of the &lt;code&gt;currentUser&lt;/code&gt; and also contains a &lt;code&gt;logout&lt;/code&gt; button for logging out the user. You can add more functionality according to your custom project.&lt;/p&gt;

&lt;p&gt;Go ahead and create a file with the name &lt;strong&gt;dashboard.js&lt;/strong&gt; inside the &lt;strong&gt;components&lt;/strong&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PlTCpqqS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039571405/kFZaEoxQN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PlTCpqqS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039571405/kFZaEoxQN.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The thing to be notice is that here we are destructuring &lt;code&gt;logout&lt;/code&gt; and &lt;code&gt;currentUser&lt;/code&gt; for handling signing out and showing the email of the logged-in user respectively. As the user successfully logs out, we then redirect him/her to the &lt;strong&gt;login&lt;/strong&gt; component using the &lt;code&gt;useHistory()&lt;/code&gt; hook. The &lt;strong&gt;Dashboard&lt;/strong&gt; component is ready.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-routes-for-components"&gt;
  &lt;/a&gt;
  Setting up Routes for components:
&lt;/h2&gt;

&lt;p&gt;We are done with all of our components. Now let’s set up each of their routes inside &lt;strong&gt;App.js&lt;/strong&gt; using &lt;code&gt;react-router-dom&lt;/code&gt; . Open &lt;strong&gt;App.js&lt;/strong&gt; and do the following.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qO1KOfj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039574001/9VH76dG61.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qO1KOfj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039574001/9VH76dG61.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We exported &lt;code&gt;BrowserRouter&lt;/code&gt; and &lt;code&gt;Route&lt;/code&gt; for setting up routes for each of the different components, and &lt;code&gt;Switch&lt;/code&gt; for loading a single component at a time.&lt;/p&gt;

&lt;p&gt;Now, if you start the app by running &lt;code&gt;npm start&lt;/code&gt;, then you see a blank screen because the home page is empty right now. For seeing different components, go to their respective URLs. For example: &lt;a href="http://localhost:3000/signup"&gt;http://localhost:3000/signup&lt;/a&gt; will take you to:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7WYih6ob--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039576309/jeT6bec8C.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7WYih6ob--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039576309/jeT6bec8C.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And as you enter your details and click on the &lt;strong&gt;signup&lt;/strong&gt; button, you’ll be redirected to the &lt;strong&gt;dashboard&lt;/strong&gt; component&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9ddlzQgY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039578359/RMNq2pgEh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ddlzQgY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039578359/RMNq2pgEh.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, one by one, you can check out the other components too. Now we have successfully implemented authentication. You can see the list of registered users in your Firebase console under the authentication section. &lt;strong&gt;Something is still missing…&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#securing-sensitive-routes"&gt;
  &lt;/a&gt;
  Securing sensitive routes:
&lt;/h2&gt;

&lt;p&gt;Our app is working perfectly and authenticating users very well but still, something is missing, we forget something. Can you guess what?&lt;/p&gt;

&lt;p&gt;Well, if you log out the user, and try to access the &lt;strong&gt;dashboard&lt;/strong&gt; boom! You can still access it and that’s not good. We don’t want any guest user to easily access our dashboard. Although it does not contain anything right now, it might not be true in your project’s case. We still need to secure it, so that only registered users can access their dashboard.&lt;/p&gt;

&lt;p&gt;The way we can do so is to create another component. Basically a modified version of the &lt;code&gt;Route&lt;/code&gt; component from &lt;code&gt;react-router-dom&lt;/code&gt; and it’ll check whether someone is logged in or not. If it’s true, then it’ll render the &lt;strong&gt;dashboard&lt;/strong&gt; otherwise, just redirect to the &lt;strong&gt;login&lt;/strong&gt; component.&lt;/p&gt;

&lt;p&gt;Create a file with the name &lt;strong&gt;privateRoute.js&lt;/strong&gt; inside the &lt;strong&gt;components&lt;/strong&gt; folder and take look at what it’s going to contain.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AdhmUerU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039580724/pPgA8vjZh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AdhmUerU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622039580724/pPgA8vjZh.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s understand what we are doing. As I said, &lt;strong&gt;PrivateRoute&lt;/strong&gt; is a modified version of the &lt;code&gt;Route&lt;/code&gt; component which checks for &lt;code&gt;currentUser&lt;/code&gt; before setting up any route. Here, first we got hold of the &lt;code&gt;currentUser&lt;/code&gt; from &lt;code&gt;useAuth()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, we are returning the &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; component with all the props required for a normal &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; component like &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;exact&lt;/code&gt; , etc. Then it checks for &lt;code&gt;currentUser&lt;/code&gt;. If true, then it renders the &lt;strong&gt;dashboard&lt;/strong&gt; otherwise, it redirects to &lt;strong&gt;login&lt;/strong&gt; . Here, instead of using &lt;code&gt;useHistory()&lt;/code&gt; for redirecting, we’ll be using the &lt;code&gt;&amp;lt;Redirect&amp;gt;&lt;/code&gt; component from &lt;code&gt;react-router-dom&lt;/code&gt; because we need to render something if &lt;code&gt;currentUser&lt;/code&gt; is not logged in.&lt;/p&gt;

&lt;p&gt;Now, inside &lt;strong&gt;App.js&lt;/strong&gt; , import this component and replace the code line where you set up the route for the &lt;strong&gt;dashboard&lt;/strong&gt; to the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;PrivateRoute exact path=”/dashboard” component={Dashboard} /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We are done. Now if you try to access the &lt;strong&gt;dashboard&lt;/strong&gt; as a guest user, you’ll be redirected to the &lt;strong&gt;login&lt;/strong&gt; component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;That’s it. We successfully created all the basic features required for user authentication. You can upgrade it in the way you want or instead of using &lt;strong&gt;context&lt;/strong&gt; , you can go for &lt;strong&gt;Redux&lt;/strong&gt;. Firebase has got so many cool features like &lt;strong&gt;Firestore&lt;/strong&gt; , a real-time database, and much more. It really comes in handy while designing big heavy projects. We’ll be discussing more about &lt;strong&gt;Firestore&lt;/strong&gt; in future articles. Till then, stay healthy and keep coding.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;If you want the complete code files for your project, grab them from &lt;a href="https://github.com/practice404/react-components/tree/main/firebase-react-auth"&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next:
&lt;/h2&gt;

&lt;p&gt;If you are still reading, make sure to follow me on &lt;a href="https://twitter.com/_s_w_a_y_a_m_"&gt;Twitter&lt;/a&gt; as I share some cool projects and updates there and yeah don't forget I have some exciting stuff coming up every weekend. See Y'all next time and stay safe ^^ 🌻&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>firebase</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
