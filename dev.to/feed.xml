<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>React Components #day32
</title>
      <author>Al Siam</author>
      <pubDate>Tue, 02 Nov 2021 18:00:03 +0000</pubDate>
      <link>https://dev.to/alsiamworld/1-1odn</link>
      <guid>https://dev.to/alsiamworld/1-1odn</guid>
      <description>&lt;h1&gt;
  &lt;a href="#100daysofcode-day32"&gt;
  &lt;/a&gt;
  100daysofcode #day32
&lt;/h1&gt;

&lt;p&gt;React Components and Props&lt;br&gt;
=&amp;gt;Components let you split the UI into independent, reusable pieces, and think about each piece in isolation.&lt;br&gt;
Conceptually, components are like JavaScript functions. They accept arbitrary inputs (called “props”) and return React elements describing what should appear on the screen.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---zzukhFh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6807ptjpfgatxi3grsju.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---zzukhFh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6807ptjpfgatxi3grsju.png" alt="Image description" width="880" height="504"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#devcommunity"&gt;
  &lt;/a&gt;
  DEVcommunity
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#javascript-react-programming"&gt;
  &lt;/a&gt;
  javascript #react #programming
&lt;/h1&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Turning Complex Lists into Flatten Lists in Python Without Using Any Libraries</title>
      <author>Turan Kılıç</author>
      <pubDate>Tue, 02 Nov 2021 17:30:42 +0000</pubDate>
      <link>https://dev.to/toour/turning-complex-lists-into-flatten-lists-in-python-without-using-any-libraries-31c4</link>
      <guid>https://dev.to/toour/turning-complex-lists-into-flatten-lists-in-python-without-using-any-libraries-31c4</guid>
      <description>&lt;p&gt;Hello there Turan here, today I'm going to share a algorithm that turns complex lists into simple lists (flatten lists). &lt;/p&gt;

&lt;p&gt;First of all, what is a complex list? It is a list that contains different type lists inside it, looks so complex and make it hard to read. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;l = [[1,'a',['cat'],2],[[[3]],'dog'],4,5]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above list is an example of complex list, we are going to turn it into this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[1, 'a', 'cat', 2, 3, 'dog', 4, 5]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me show you the code and explain it to you ^^&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from typing import List

l = [[1,'a',['cat'],2],[[[3]],'dog'],4,5]
flat_list2 = []

def lookInside(l):                  # Takes the list type element
    for x in l:                     # For each sub-element of it
        if type(x) is not list:     # If the sub-element is not list, 
            flat_list2.append(x)    # Then add it to flat_list
        else:                       
            lookInside(x)           # Else, look inside of it again

# WE ARE STARTING HERE !!!
def makeFlat(l):                    # Getting the list 
    for e in l:                     # Checking the elements of the list
        if type(e) is list:         # If element's type is list then
            lookInside(e)           # send that element to lookInside function 
        else:
            flat_list2.append(e)    # Else, (if it is not list) append it to our new flat_list

makeFlat(l)                         # Function call, the complex list has been given to function
print(flat_list2)                   # Printing the flatten list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the code above, we can turn complex lists into simple (flatten) lists, whatever complex list contains 2nd, 3rd, 4th... degree lists. It doesn't matter for us because we are using recursive function that makes everything easier.&lt;/p&gt;

&lt;p&gt;Here how our recursive function works:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;[ 1, [2], [[3]] ] ==&amp;gt; Our function takes 1 as a normal element&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[ [2], [[3]] ] ==&amp;gt; Then for [2] we are going to our recursive function, this function looks inside of it then sees that "2" is not list, then add it to new list&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[ [[3]] ] ==&amp;gt; Then for [[3]] we are going to our recursive function, function looks at it and says that [3] is a list then send it to itself again just as [3]. After that (like [2]) it looks inside of [3] and sees that 3 is not list then add it into new list.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This goes like that :)&lt;/p&gt;

&lt;p&gt;I hope it was easy to understand for you, and i hope it helped. Thanks for reading, please leave a like and comment if you want ^^ &lt;/p&gt;

&lt;p&gt;@Publisher : &lt;a href="https://dev.to/toour"&gt;https://dev.to/toour&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Got verified on Polywork</title>
      <author>Abid</author>
      <pubDate>Tue, 02 Nov 2021 17:28:36 +0000</pubDate>
      <link>https://dev.to/kingabzpro/got-verified-on-polywork-4j41</link>
      <guid>https://dev.to/kingabzpro/got-verified-on-polywork-4j41</guid>
      <description>&lt;p&gt;I am excited to share that I am finally verified on Polywork.&lt;/p&gt;

</description>
      <category>verified</category>
      <category>socialmedia</category>
    </item>
    <item>
      <title>How to hide something on different screen sizes with Bootstrap?</title>
      <author>Ekim Cem Ülger</author>
      <pubDate>Tue, 02 Nov 2021 17:15:37 +0000</pubDate>
      <link>https://dev.to/ekimcem/how-to-hide-something-on-different-screen-sizes-with-bootstrap-3ha7</link>
      <guid>https://dev.to/ekimcem/how-to-hide-something-on-different-screen-sizes-with-bootstrap-3ha7</guid>
      <description>&lt;p&gt;Let's look at the display features with bootstrap, which is the most popular one of the frameworks when the subject is responsive web design.&lt;/p&gt;

&lt;p&gt;In order to understand the architecture of the display options of bootstrap, let’s check breakpoints.&lt;/p&gt;

&lt;p&gt;Breakpoints are the exact width pixel values that decide the screen size of the browser. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GzO3kMA1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/leg8bbegx81tt37vax78.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GzO3kMA1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/leg8bbegx81tt37vax78.png" alt="Table of Breakpoints in Bootstrap" width="632" height="246"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Table 1: Dimensions regarding the screen size.&lt;/code&gt;&lt;br&gt;
&lt;a href="https://getbootstrap.com/docs/5.1/layout/breakpoints/"&gt;Bootstrap Source Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can check the breakpoints in the table above. Those dimensions mean that if you are under 576px it means that your screen size is x-small, if your width pixel is higher than 576px it means that your screen size is small (until you reach 769 px), and it continues like this.&lt;/p&gt;

&lt;p&gt;Since Bootstrap developers used &lt;code&gt;min-width&lt;/code&gt; property of CSS while adding those breakpoints, if you only apply a display property to a small screen, it means that it will affect screen sizes small and larger than small screens. &lt;br&gt;
&lt;a href="https://getbootstrap.com/docs/5.1/layout/breakpoints/#min-width"&gt;Bootstrap min-width&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This means that; if you add &lt;code&gt;d-lg-flex&lt;/code&gt; to a class, flexbox property will be applied to lg, xl, and xxl screen sizes.&lt;/p&gt;

&lt;p&gt;In Bootstrap there is a display property called none.&lt;br&gt;
If you add a class named &lt;code&gt;d-none&lt;/code&gt; to your element it will not show the element.&lt;/p&gt;

&lt;p&gt;So if you want to hide something only on small devices, we need to assign two display classes to the HTML element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For example, you want to use a flex display property on the container:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class= container d-flex&amp;gt; … &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;code&gt;d-flex&lt;/code&gt; property will affect whole screen sizes since it has no screen class infix (check Table-1). It means that you are applying that property to x-small and larger screens.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What if we want to hide something in x-small and small screens?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So now, we want to “hide” the container unless it is a medium or larger screen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class= container d-none d-md-flex&amp;gt; … &amp;lt;div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, &lt;code&gt;d-md-flex&lt;/code&gt; property will override the d-none property after screen size reaches 769px ( which is breakpoint of medium screen)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What if we want to display something on small screens but not on large screens?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this situation, unless it is a medium screen, we want to show it as flex. If it is a medium or larger screen, we want it to be hidden.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class= container d-flex d-md-none&amp;gt; … &amp;lt;div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above, you may see that &lt;code&gt;d-flex&lt;/code&gt; property will be applied to whole screen types unless it reaches the medium screen. Since &lt;code&gt;d-md-none&lt;/code&gt; will affect medium or larger screens, you will be able to hide container for those screens.&lt;/p&gt;

&lt;p&gt;If you want to apply different display properties for every different screen sizes, it means that you need to add individually display properties with all breakpoint class infixes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/ekimcem/"&gt;Ekim&lt;/a&gt;&lt;br&gt;
Batch Sagittarius&lt;br&gt;
trainee @ &lt;a href="https://www.archisacademy.com/"&gt;Archi's Academy&lt;/a&gt;&lt;/p&gt;

</description>
      <category>bootstrap</category>
      <category>webdev</category>
      <category>responsivedesign</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Developer Burnout — Signs, Impact, and Prevention</title>
      <author>Geoff Stevens</author>
      <pubDate>Tue, 02 Nov 2021 16:58:14 +0000</pubDate>
      <link>https://dev.to/thegeoffstevens/developer-burnout-signs-impact-and-prevention-47a8</link>
      <guid>https://dev.to/thegeoffstevens/developer-burnout-signs-impact-and-prevention-47a8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-burnout"&gt;
  &lt;/a&gt;
  What is burnout?
&lt;/h2&gt;

&lt;p&gt;Burnout is an increasingly widespread and destructive mental health challenge for knowledge workers across professions and industries. Left unchecked, it is a silent killer of productivity, happiness, and team success.&lt;/p&gt;

&lt;p&gt;Unlike other types of stress, burnout is typically chronic and workplace-related. It is a result of unresolved and persistent stress that leaves workers feeling drained and unable to reach their full potential. According to the &lt;a href="https://www.who.int/news/item/28-05-2019-burn-out-an-occupational-phenomenon-international-classification-of-diseases"&gt;World Health Organization&lt;/a&gt;:  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Burn-out is a syndrome conceptualized as resulting from chronic workplace stress that has not been successfully managed."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Burnout manifests in different ways for different people. For many workers, burnout is often associated with feelings of tiredness, helplessness, cynicism, and a drop in performance and motivation. &lt;/p&gt;

&lt;p&gt;The World Health Organization's definition of burnout specifies three key dimensions of burnout: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;feelings of energy depletion or exhaustion;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;increased mental distance from one's job, or feelings of negativism or cynicism related to one's job; and&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;reduced professional efficacy.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-common-is-software-engineer-burnout"&gt;
  &lt;/a&gt;
  How common is software engineer burnout?
&lt;/h2&gt;

&lt;p&gt;Burnout is an especially prevalent challenge for engineering teams and tech workers. Developers frequently navigate fast-paced and high-growth work environments, building mission-critical software—often without the systems, processes, and culture needed to support their work. &lt;/p&gt;

&lt;p&gt;Recent &lt;a href="https://www.gallup.com/workplace/288539/employee-burnout-biggest-myth.aspx"&gt;Gallup surveys&lt;/a&gt; reveal most workers, about 76%, experience burnout. More specifically, 28% of workers responded that they experience burnout very often or always. Less than a quarter of workers feel they rarely or never experience burnout.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--taWTV6_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6527hysgck1qrnj508wc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--taWTV6_Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6527hysgck1qrnj508wc.png" alt="Developer burnout" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In certain industries, such as game development, engineers are expected to work long hours and against strict deadlines. They often need to make last-minute changes before launch during a frenzied period of work infamously dubbed "crunch time." In one example at Rockstar Games, management admits to perpetuating a culture of burnout and hardship. According to &lt;a href="https://time.com/5603329/e3-video-game-creators-union/"&gt;Time&lt;/a&gt;: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The chief executive of Rockstar Games, publisher of the hugely popular Red Dead Redemption 2, bragged in an interview last year that people there were working 100-hour weeks to finish that game in time for its scheduled release date.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Chaotic release schedules and deployment setbacks are surprisingly prevalent across the world of software development. Companies rely heavily on engineers to ship code faster and provide value to customers, but often lack the DevOps practices to support them. Instead, developers often face delays, deployment pains, and organizational fear and mistrust that disrupt their team's flow. &lt;/p&gt;

&lt;p&gt;Such recurring organizational hurdles lead to chronic frustration—and ultimately developer burnout.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-causes-software-engineer-burnout"&gt;
  &lt;/a&gt;
  What causes software engineer burnout?
&lt;/h2&gt;

&lt;p&gt;Burnout often arises from issues within the organization, rather than the individual. Many engineering teams fail to sufficiently address the causes of burnout because they focus on fixing people and not the systems that support them—or fail to support them. &lt;/p&gt;

&lt;p&gt;According to &lt;em&gt;Accelerate&lt;/em&gt;, a research-backed guide to building high performing technology teams, the six main organizational risk factors for developer burnout are work overload, lack of control, insufficient rewards, breakdown of community, absence of fairness, and value conflicts. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Work overload&lt;/strong&gt; arises from unrealistic expectations about the quantity or quality of work developers need to satisfy. Impossible deadlines, poor project timeline estimates, and insufficient planning push developers to work beyond what is physically and mentally sustainable. Developers who work long hours, nights, and weekends are more likely to burn out than those with better work-life balance.&lt;/p&gt;

&lt;p&gt;Workload, however, is not the only risk factor for burnout. Contrary to popular belief, teams with balanced workloads can still experience serious developer burnout. Developers can burn out working 100 hours per week, but they can also burn out working just 20 or 30 hours per week.&lt;/p&gt;

&lt;p&gt;In situations with manageable workloads but poor workplace culture, other organizational risk factors can lead to chronic stress and create unpleasant work environments. These risk factors disrupt an individual or team's development flow, making work consistently and unnecessarily difficult or challenging. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lack of control&lt;/strong&gt; in decision making processes leads to detachment from an organization's mission. When developers feel an inability to influence or contribute to decisions that affect them and their work, it breeds mistrust and creates distance between workers and managers.&lt;/p&gt;

&lt;p&gt;For example, developers are sometimes  forced to use tools they find ineffective. Developers can be at the mercy of slow workflows across the stack, from change approval boards to code reviews to data requests. In some organizations, development and operations may be making decisions about team practices without input from each other, creating organizational tension. &lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;breakdown of community&lt;/strong&gt; also leads to an unsupportive, hypercompetitive, and stressful workplace. Moreover, harassment and bullying leave developers feeling isolated and fearful. Without community support or unbiased feedback, developers must grapple with additional stressors that detract from their quality of life.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Absence of fairness&lt;/strong&gt; (a lack of fairness in decision making) and &lt;strong&gt;insufficient rewards&lt;/strong&gt;, (a lack of positive reinforcement and feedback) also leave developers feeling not in control of their work and outcomes. &lt;/p&gt;

&lt;p&gt;Cultures that rely on blame—not organizational learning—perpetuate a lack of fairness and recognition. Rather than solving underlying system weaknesses, organizations sometimes blame and shame developers for engineering challenges, such as buggy code, change failures, or missed deadlines. &lt;/p&gt;

&lt;p&gt;Lastly, &lt;strong&gt;value conflicts&lt;/strong&gt; that result in a mismatch between organization, team, and individual values create chronic stress. For example, a developer who values individual privacy working on ad tracking software can be worn down by the constant internal tug-of-war between her personal values and her company's mission.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-cost-of-developer-burnout"&gt;
  &lt;/a&gt;
  What is the cost of developer burnout?
&lt;/h2&gt;

&lt;p&gt;Stanford researchers &lt;a href="https://www.gsb.stanford.edu/insights/why-your-workplace-might-be-killing-you"&gt;estimate&lt;/a&gt; burnout leads to nearly $190 billion in healthcare costs each year and contributes to more than 120,000 deaths.&lt;/p&gt;

&lt;p&gt;In addition to healthcare costs, burnout leads to lost productivity, sick time, costly disabilities, and turnover. It's estimated that &lt;a href="https://hbr.org/2019/12/burnout-is-about-your-workplace-not-your-people"&gt;workplace stress costs&lt;/a&gt; the U.S. economy more than $500 billion per year. Researchers believe nearly 550 million work days each year are lost due to stress and burnout.&lt;/p&gt;

&lt;p&gt;For engineering teams, developer burnout leads to slower delivery speed, lower quality code, poorer project outcomes, and higher turnover. In the long run, burnout can also stifle innovation, creativity, and organizational learning.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-managers-spot-signs-of-developer-burnout"&gt;
  &lt;/a&gt;
  How can managers spot signs of developer burnout?
&lt;/h2&gt;

&lt;p&gt;It's important to understand that people react differently to burnout. Workers can experience several symptoms all at once, or just one or two at a time. Some workers experience mostly mental symptoms, while others experience physical and bodily changes. &lt;/p&gt;

&lt;p&gt;It's also important to remember that burnout is not a binary state. Instead, workers move up and down a 'burnout gradient' depending on their changing environment and workload. &lt;/p&gt;

&lt;p&gt;Mental and emotional symptoms of burnout include: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tiredness or exhaustion&lt;/strong&gt;: You feel too emotionally drained to engage fully with your work or coworkers. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cynicism or negativism&lt;/strong&gt;: You view your role as increasingly stressful and frustrating. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Detachment and alienation&lt;/strong&gt;: You feel distant from coworkers and the company mission. You feel "numb" about your work. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Reduced performance or productivity&lt;/strong&gt;: You are less effective at completing tasks on time. Your quality of work noticeably decreases. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Physical symptoms are also common. Developers experiencing burnout may notice that they are more fatigued and exhausted than normal, yet may also suffer from sleeplessness. They may also be experiencing frequent headaches, loss of appetite, gastrointestinal issues, or dizziness. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#can-you-detect-burnout-through-metrics-and-data-sources"&gt;
  &lt;/a&gt;
  Can you detect burnout through metrics and data sources?
&lt;/h2&gt;

&lt;p&gt;By looking more closely at their DevOps metrics, teams can spot early signs of burnout, developer frustration, and deployment pain.&lt;/p&gt;

&lt;p&gt;Teams should watch for indicators that their work is needlessly challenging or painful to complete. They should watch for signs that their engineering systems—i.e. organizational workflows and processes—are ineffective at providing developers with fast feedback, avoiding delays, and preventing toil. &lt;/p&gt;

&lt;p&gt;Long &lt;a href="https://www.software.com/1000x-system/lead-time"&gt;lead time&lt;/a&gt;, low &lt;a href="https://www.software.com/1000x-system/commit-frequency"&gt;delivery frequency&lt;/a&gt;, and low &lt;a href="https://www.software.com/1000x-system/lines-of-code-merged"&gt;code volume&lt;/a&gt; can reveal friction during the development process. In such scenarios, engineers are likely experiencing roadblocks and bottlenecks disrupting their development flow.&lt;/p&gt;

&lt;p&gt;At the DevOps Enterprise Summit 2014, David Ashman, former Chief Architect at Blackboard, recalls how his engineering organization became less agile and stagnant due to mounting technical debt. Ashman's red flag was &lt;a href="https://www.youtube.com/watch?v=SSmixnMpsI4"&gt;a significant change&lt;/a&gt; in the number of code commits.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[The codebase] is growing at such a pace that is becoming this enormous product with so much complexity, so much insurmountable debt that we were running into problems both in development and operations of significant failures in releases and problems with developers taking far too long for these products to get built out.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Such challenges can leave developers struggling to achieve their goals, fighting against the system, and potentially working longer hours to overcome it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6oY94n7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zta79vkxc48furmzzb1n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6oY94n7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zta79vkxc48furmzzb1n.png" alt="Engineering team burnout danger" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;
An example of developers fighting the system, &lt;a href="https://www.youtube.com/watch?v=SSmixnMpsI4"&gt;David Ashman&lt;/a&gt;



&lt;p&gt;Teams should also watch for signs of high workloads and disruptive schedules. High &lt;a href="https://www.software.com/1000x-system/meeting-time"&gt;meeting time&lt;/a&gt; can pull developers away from meaningful work and fragment their day, leading to dissatisfaction with daily work. Spending less time in flow during the workday and more time coding on nights and weekends puts teams at risk of burnout and poor work-life balance.&lt;/p&gt;

&lt;p&gt;Operating above 100% of team capacity for too long—without breaks or downtime—can wear down even the most productive team. Code volume, measured by pull requests and commits, can be one approximation for workload.  &lt;/p&gt;

&lt;p&gt;Similar to other engineering metrics, context matters. It's important to understand teams and individuals in their day-to-day life to attain a clearer understanding of the situation. There is no single 'burnout' metric. Instead, teams should rely on several indicators of team frustration and pain. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-prevent-developer-burnout"&gt;
  &lt;/a&gt;
  How to prevent developer burnout
&lt;/h2&gt;

&lt;p&gt;Avoiding burnout requires teams to reduce firefighting, hardship, and toil. The goal should be to alleviate deployment pain and enable the fast flow of work from code to production, as well as to create a culture of learning, psychological safety, and fairness. &lt;/p&gt;

&lt;p&gt;It starts with improving the organization's DevOps practices. According to &lt;em&gt;Accelerate&lt;/em&gt;: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Burnout can be prevented or reversed, and DevOps can help. Organizations can fix the conditions that lead to burnout by fostering a supportive work environment, by ensuring work is meaningful, and ensuring employees understand how their own work ties to strategic objectives. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Investments in DevOps strengthen the organization's developer experience, improving daily work. Over the long-term, better DevOps minimize several key risk factors for developer burnout. &lt;/p&gt;

&lt;p&gt;To prevent burnout, teams should first embrace the principle of &lt;em&gt;continuous improvement&lt;/em&gt;. Continuous improvement is a core idea in Lean methodology that advocates for incremental improvement in an organization's performance through continuous measuring, learning, and experimentation. It creates a culture that measures and improves daily work, identifying potential development pains and prioritizing their fixes. &lt;/p&gt;

&lt;p&gt;Second, teams should create an environment that prioritizes psychological safety. They should provide engineers with the safety needed to experiment and learn from mistakes, instead of resorting to blame or finger pointing. Developers must be a part of the decision making process when it directly affects their work. &lt;/p&gt;

&lt;p&gt;Third, teams must invest in the developer experience. Doing so requires teams to enable fast feedback, minimize thrash, and reduce fear. &lt;/p&gt;

&lt;p&gt;In particular, organizations can reduce chronic stress by providing guardrails that improve the flow of work and remove fear and pain from deployments. Developers can quickly and confidently make changes to code when they have automated tests and environments, telemetry for performance visibility, loosely coupled architecture to isolate failures, and version control for fast rollbacks. Teams can also tackle technical debt on a recurring basis to avoid development stagnation and fear. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#can-hybrid-or-remote-work-help-prevent-burnout"&gt;
  &lt;/a&gt;
  Can hybrid or remote work help prevent burnout?
&lt;/h2&gt;

&lt;p&gt;Workplaces are quickly changing as the world grapples with a shift from office to remote or hybrid work. Such a seismic shift will likely change how teams identify and prevent burnout. &lt;/p&gt;

&lt;p&gt;Remote work reduces time spent commuting and provides workers with greater control over their schedules. They benefit from more flexibility, which allows them to spend more time with family and friends or pursue activities outside of work. &lt;/p&gt;

&lt;p&gt;Remote work can also lead to fewer distractions and more time spent in flow to work on meaningful tasks. Developers are interrupted less frequently by shoulder taps and open offices. &lt;/p&gt;

&lt;p&gt;While remote and hybrid workplaces can remove certain stressors, they can also create new ones. Workers may face unfamiliar challenges, such as a lack of face time with coworkers and less rigid work-life boundaries. Without cultural changes to grapple with their new work environment, newly remote teams increase their risk for burnout.&lt;/p&gt;

&lt;p&gt;Engineering teams switching to remote work can also face DevOps issues during their transition. They need to grapple with new requirements, particularly around hardware and team communication. &lt;/p&gt;

&lt;p&gt;For a successful transition, teams should monitor for changes in the development process to ensure their tools and practices still work well in their new workplace. If not, they should adopt new ones that cater better to asynchronous communication and remote development.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>development</category>
    </item>
    <item>
      <title>How JavaScript Works_01</title>
      <author>Alok Kumar</author>
      <pubDate>Tue, 02 Nov 2021 16:45:59 +0000</pubDate>
      <link>https://dev.to/thecoollearner/how-javascript-works01-38e1</link>
      <guid>https://dev.to/thecoollearner/how-javascript-works01-38e1</guid>
      <description>&lt;p&gt;Hey all 👋&lt;/p&gt;

&lt;p&gt;Now that I’m finished with the JavaScript ES6 concepts series ( expect an e-book soon 🙂 ), I’ll be writing articles covering some fundamentals of JavaScript. And in this article, we’ll be talking about how JavaScript works and about execution context, so let’s start.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;Before we start, we should know JavaScript is an &lt;strong&gt;interpreted language&lt;/strong&gt;, which means it is not compiled before sending it to the browser. &lt;/p&gt;

&lt;p&gt;After the code is sent to the browser, it is executed by the &lt;strong&gt;JavaScript Engine&lt;/strong&gt;. JavaScript Engine is a computer program provided by browsers ( Example - V8 JavaScript Engine used by Google Chrome ).&lt;/p&gt;

&lt;p&gt;JavaScript Engine creates &lt;strong&gt;Execution contexts&lt;/strong&gt; to run the JavaScript code.&lt;/p&gt;

&lt;p&gt;So let’s talk about what is an execution context?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#execution-context"&gt;
  &lt;/a&gt;
  Execution Context
&lt;/h2&gt;

&lt;p&gt;To define it simply -&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The environment in which your code is running is the Execution context. It gets created when your code is executed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s imagine it as a container with two components -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Memory Component&lt;/li&gt;
&lt;li&gt;Code Component&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;strong&gt;memory component&lt;/strong&gt; stores all the variables, and functions which are stored as objects(key: value pairs). It is called &lt;strong&gt;Variable Environment&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The code is executed line by line in the &lt;strong&gt;code component&lt;/strong&gt;. It is called &lt;strong&gt;Thread of Execution&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9_fS3-Qv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvjeba4y16pbtq50kf76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9_fS3-Qv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvjeba4y16pbtq50kf76.png" alt="execution context" width="592" height="371"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s understand how Execution Context works with one small example -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;addA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To execute this JS code, a global execution context is created. It contains two components as we discussed earlier i.e. memory component and code component -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ej6nPozM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pu29skofbb8rb7raqlaq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ej6nPozM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pu29skofbb8rb7raqlaq.png" alt="execution context" width="580" height="381"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code is executed in two phases -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Memory allocation phase&lt;/li&gt;
&lt;li&gt;Code execution phase&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#memory-allocation-phase"&gt;
  &lt;/a&gt;
  Memory Allocation phase
&lt;/h3&gt;

&lt;p&gt;In this phase, &lt;strong&gt;memory is allocated&lt;/strong&gt; to all the variables and functions.&lt;/p&gt;

&lt;p&gt;As for the above code -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_1EQ7UtI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olr8kzjwl0ve6wwx5m0f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_1EQ7UtI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olr8kzjwl0ve6wwx5m0f.png" alt="execution context" width="571" height="366"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see here that during the first phase, &lt;strong&gt;undefined&lt;/strong&gt; is stored against the variables declared with keyword &lt;strong&gt;var&lt;/strong&gt;, while in the case of functions, the whole function code is stored against the function name. We’ll see how this is executed in the next phase.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-execution-phase-"&gt;
  &lt;/a&gt;
  Code Execution phase -
&lt;/h3&gt;

&lt;p&gt;JavaScript is a &lt;strong&gt;single-threaded&lt;/strong&gt; language which means that the code will be executed line-by-line( but we know sometimes we have to handle asynchronous code, and that I’ll cover in some other article ). &lt;/p&gt;

&lt;p&gt;Let’s see how the above code is executed step-by-step -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mKQzuiyS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/makqae6mxsknxy3y2lxw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mKQzuiyS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/makqae6mxsknxy3y2lxw.png" alt="execution context" width="799" height="449"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here when the first line is executed it assigns value &lt;strong&gt;5&lt;/strong&gt; to &lt;strong&gt;a&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There is nothing to execute for the lines from 3 to 6, so it moves to the last line, line number 8. And in the last line, there is a function invocation, and whenever a new function is invoked a new execution context gets created called &lt;strong&gt;Functional Execution Context&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CnbHOFPa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ykf2kiqldzg3fjxbel0j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CnbHOFPa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ykf2kiqldzg3fjxbel0j.png" alt="execution context" width="800" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we can see a new execution context is created when the &lt;strong&gt;add()&lt;/strong&gt; function is invoked.  And similar to what we have talked about, it goes through the same two phases: memory allocation and code execution.&lt;/p&gt;

&lt;p&gt;Here we can see that after the first phase, memory is allocated for &lt;strong&gt;num&lt;/strong&gt; and &lt;strong&gt;res&lt;/strong&gt;. Let’s see what happens in the second phase -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QYC05vt7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h47au8a09ucoau9tzc0j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QYC05vt7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h47au8a09ucoau9tzc0j.png" alt="execution context" width="800" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the second phase, the add() function is executed line by line -&lt;/p&gt;

&lt;p&gt;In the third line, the value of &lt;strong&gt;a&lt;/strong&gt; i.e. &lt;strong&gt;5&lt;/strong&gt; which is passed as an argument, is allocated to &lt;strong&gt;num&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the fourth line, &lt;strong&gt;num + num&lt;/strong&gt; is executed, and the result is allocated to the variable &lt;strong&gt;res&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the fifth line, the &lt;strong&gt;return&lt;/strong&gt; keyword gives back the control to the execution context where the function was invoked ( which is the global context in this case ). Also, it returns the value of the res variable.&lt;/p&gt;

&lt;p&gt;As it completes the second phase and the control is back to the previous execution context, then this functional execution context is deleted.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bynvjiW5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7j4mhg149ybiz2f4cao9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bynvjiW5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7j4mhg149ybiz2f4cao9.png" alt="Execution context" width="800" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we can see that the functional execution context is deleted, and the control is back to line number 8, where the returned value of the res variable is allocated to the &lt;strong&gt;addA&lt;/strong&gt; variable.&lt;/p&gt;

&lt;p&gt;And thus, there is no more code to execute so finally the whole global execution context is deleted.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rYCE-X2Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57abnltme01riqr5vagu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rYCE-X2Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57abnltme01riqr5vagu.png" alt="execution context" width="800" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we just saw how a JavaScript code is executed, but what we have seen so far is an abstract of how everything works, and there are other things that work under the hood like JavaScript runtime, a CallStack which is used to manage all the execution contexts , etc. which I’ll cover in my next article, So stay tuned :)&lt;/p&gt;




&lt;p&gt;I have tried to keep it simple and precise, and if you find any typo/error please report it to me so that I can correct it 🙂&lt;/p&gt;

&lt;p&gt;Thanks for reading it till last 🙏&lt;/p&gt;

&lt;p&gt;If you find this useful then you can share it with others :)&lt;/p&gt;

&lt;p&gt;Let's Connect, drop a &lt;a href="//www.twitter.com/thecoollearner"&gt;Hi and let's chat 👋👋👋&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>100daysofcode</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Tips to become a great programmer [ Beginner - Pro]</title>
      <author>John</author>
      <pubDate>Tue, 02 Nov 2021 16:39:55 +0000</pubDate>
      <link>https://dev.to/jdks/tips-to-become-a-great-programmer-beginner-pro-5coi</link>
      <guid>https://dev.to/jdks/tips-to-become-a-great-programmer-beginner-pro-5coi</guid>
      <description>&lt;p&gt; A good programmer is someone who always looks both ways before crossing a one-way street. ~Doug Linder&lt;/p&gt;

&lt;p&gt;Let me start by saying that I do not consider myself to be a competent coder. I consider my coding abilities to be mediocre, and I am still learning and have a long way to go before I am even remotely satisfied with them.Yes, I am better at programming than a lot of others, but that is just because they are lazy and choose to sit about idle all day instead of programming. Their dreadful abilities make my less dreadful abilities appear fantastic.&lt;/p&gt;

&lt;p&gt;So most of the tips I will mention below are lessons learnt from failed endeavours, they are what I have wanted to be and I am not. So lets dive in. &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/tips-to-become-a-great-programmer/"&gt;Tips to become a great programmer [ Beginner - Pro]&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>100+ AI Projects for Beginners – Easy Ideas to Get Started [Beginners - Advance]</title>
      <author>John</author>
      <pubDate>Tue, 02 Nov 2021 16:38:13 +0000</pubDate>
      <link>https://dev.to/jdks/100-ai-projects-for-beginners-easy-ideas-to-get-started-beginners-advance-1lj</link>
      <guid>https://dev.to/jdks/100-ai-projects-for-beginners-easy-ideas-to-get-started-beginners-advance-1lj</guid>
      <description>&lt;p&gt;Artificial Intelligence has made a significant impact on our daily lives. Every time you scroll through social media, open Spotify, or do a quick Google search, you are using an application of AI. The AI industry has expanded massively in the past few years and is predicted to grow even further, reaching around 126 billion U.S. dollars by 2025. Multinational companies like IBM, Accenture, and Apple are actively hiring AI practitioners. The median salary of an AI engineer as of 2021 is $171, 715 that can go over $250,000.&lt;/p&gt;
&lt;p&gt;The field of AI is vast, and there are many areas within the industry that you can choose to specialise. Say , if you are intrigued by facial recognition systems and image generation, you can choose to work in the field of computer vision. If you’d like to build models that can converse with people and learn human language, you can work in the field of NLP (Natural Language Processing).&lt;/p&gt;
&lt;p&gt;There is a lot of work being done today for the advancement of Artificial Intelligence. Companies need AI specialists who can build and deploy scalable models to meet growing industry demands. It isn’t tough to get started in the field of AI. While there is the complexity involved in building machine learning models from scratch, most AI jobs in the industry today don’t require you to know the math behind these models. Many companies require individuals who can build AI solutions, scale them, and deploy them for the end-user. Many high-level libraries and frameworks can help you do this without an in-depth knowledge of how the models work. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/artificial-intelligence-project-for-beginners/"&gt;100+ AI Projects for Beginners – Easy Ideas to Get Started [Beginners - Advance]&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>40+ GitHub Projects for Beginners – Easy Ideas to Get Started [Beginners - Advance]</title>
      <author>John</author>
      <pubDate>Tue, 02 Nov 2021 16:34:07 +0000</pubDate>
      <link>https://dev.to/jdks/40-github-projects-for-beginners-easy-ideas-to-get-started-beginners-advance-9o5</link>
      <guid>https://dev.to/jdks/40-github-projects-for-beginners-easy-ideas-to-get-started-beginners-advance-9o5</guid>
      <description>&lt;p&gt;&lt;span&gt;&lt;span&gt;There's a good chance you've heard of GitHub if you're in the tech space, even if you're not a developer by trade. &lt;/span&gt;&lt;span&gt;You might have even stumbled across a GitHub repository or two when learning about software or web development.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;span&gt;Still, GitHub can seem perplexing if you've never used it. &lt;/span&gt;&lt;span&gt;Is it a cloud storage site? &lt;/span&gt;&lt;span&gt;A social networking site for programmers? &lt;/span&gt;&lt;span&gt;A code-sharing site? &lt;/span&gt;&lt;span&gt;As it turns out, the answer to all of these is yes, and more. &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;/span&gt;&lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/15-trending-projects-on-github-for-web-developers/&amp;amp;ved=2ahUKEwi7ho2M5sbzAhWIzDgGHbvgBM0QFnoECAUQBQ&amp;amp;usg=AOvVaw1tzvt3qcNHOwLUl5Faka7s"&gt;40+ GitHub Projects for Beginners – Easy Ideas to Get Started [Beginners - Advance]&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>40+ Frontend Projects for Beginners – Easy Ideas to Get Started Coding Frontend [Beginners - Advance]</title>
      <author>John</author>
      <pubDate>Tue, 02 Nov 2021 16:33:10 +0000</pubDate>
      <link>https://dev.to/jdks/40-frontend-projects-for-beginners-easy-ideas-to-get-started-coding-frontend-beginners-advance-4g0g</link>
      <guid>https://dev.to/jdks/40-frontend-projects-for-beginners-easy-ideas-to-get-started-coding-frontend-beginners-advance-4g0g</guid>
      <description>&lt;p&gt;&lt;span&gt;If you are a developer or just getting started with the process, then you must already be aware of how important the role of &lt;/span&gt;&lt;span&gt;developing live projects&lt;/span&gt;&lt;span&gt; are. It will not only improve your coding skills but will also help you develop a passion for it. You can start by taking up online tutorials to learn a skill or two, but it must lead to starting to build the programs eventually.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/9-projects-you-can-do-to-become-a-front-end-master/&amp;amp;ved=2ahUKEwilofe-rvjzAhVGbysKHR-RCv4QFnoECAUQAQ&amp;amp;usg=AOvVaw2t7-_QAPDVzRhEVlb4h7WW"&gt;40+ Frontend Projects for Beginners – Easy Ideas to Get Started Coding Frontend [Beginners - Advance]&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>40+ Nodejs Projects for Beginners – Easy Ideas to Get Started Coding Nodejs [Beginners - Advance] </title>
      <author>John</author>
      <pubDate>Tue, 02 Nov 2021 16:23:29 +0000</pubDate>
      <link>https://dev.to/jdks/40-nodejs-projects-for-beginners-easy-ideas-to-get-started-coding-nodejs-beginners-advance-3k80</link>
      <guid>https://dev.to/jdks/40-nodejs-projects-for-beginners-easy-ideas-to-get-started-coding-nodejs-beginners-advance-3k80</guid>
      <description>&lt;p&gt;If you have decided to build your career in &lt;span&gt;NodeJS &lt;/span&gt;development, we have gathered a list of &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; for all node enthusiasts to build highly scalable &lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/nodejs-project-for-beginners/&amp;amp;ved=2ahUKEwiOlt_I6e7zAhXXb30KHRuwBEIQFnoECAUQAQ&amp;amp;usg=AOvVaw1LC_Y25wyupI6_tdH89kg1" rel="noreferrer noopener"&gt;web applications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These best &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; will help you gain knowledge about core node concepts, train your skill level, build a superb work portfolio, and get hired for your dream job.&lt;/p&gt;
&lt;p&gt;When you start building your first projects, it’s highly recommended for beginners in coding to create a repository for each of your projects so you will be able to learn &lt;em&gt;git&lt;/em&gt; and show your coding expertise to future employers. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/nodejs-project-for-beginners/&amp;amp;ved=2ahUKEwiOlt_I6e7zAhXXb30KHRuwBEIQFnoECAUQAQ&amp;amp;usg=AOvVaw1LC_Y25wyupI6_tdH89kg1"&gt;40+ Nodejs Projects for Beginners – Easy Ideas to Get Started Coding Nodejs &lt;/a&gt;&lt;/b&gt; &lt;/p&gt;






</description>
    </item>
    <item>
      <title>Systems Programming Paradigms</title>
      <author>Birk Skyum</author>
      <pubDate>Tue, 02 Nov 2021 16:19:32 +0000</pubDate>
      <link>https://dev.to/birkskyum/systems-programming-paradigms-43p4</link>
      <guid>https://dev.to/birkskyum/systems-programming-paradigms-43p4</guid>
      <description>&lt;p&gt;Making software that talks to the hardware are known as systems programming. Because applications run on top of a system, like an operating system, the performance, and safety of the system itself are key. This also goes for high-performance applications of course. The two most important metrics are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;A low runtime overhead&lt;/strong&gt; - This is achieved by leaving out garbage collection (see note below), and keeping the standard library small.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;A high hardware utilization&lt;/strong&gt; - This is achieved through parallelization.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Garbage Collection (GC):&lt;/strong&gt; When a variable is assigned, some memory is allocated, and thus we need to figure out when it can be deallocated again. A common approach is tracing, where the GC tries try to figure out when a resource it's no longer reachable. Previously, reference counting was quite common, where the memory was released, when the number of references fell to zero. This convenient process of garbage collection clearly takes resources, and while it's common practice in application development, the systems programmer can rarely afford it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Only a few programming languages have gained mass adoption in this area because any new language would need to bring major advancements over the current standard in order to become relevant.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1949-assembly"&gt;
  &lt;/a&gt;
  1949 - Assembly
&lt;/h4&gt;

&lt;p&gt;The first of these languages is Assembly, which on top of what resembles line-by-line machine code instructions allows for the convenience of &lt;strong&gt;constants, macros, labels, and comments&lt;/strong&gt;. These features made assembly the de facto standard for years.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1972-c"&gt;
  &lt;/a&gt;
  1972 - C
&lt;/h4&gt;

&lt;p&gt;The C language has an advantage over Assembly by being structured. The &lt;strong&gt;structured programming&lt;/strong&gt; came in the form of better control flow through branching (if/else/or/switch), blocks, and loops (do/while). Other important additions were the &lt;strong&gt;lexical variable scopes, recursion, and static types&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1985-c"&gt;
  &lt;/a&gt;
  1985 - C++
&lt;/h4&gt;

&lt;p&gt;C++ as a superset of C, initially brought &lt;strong&gt;classes, the ability to make new types, function overloading, reference variables, try/catch blocks&lt;/strong&gt;, and more. This allowed for &lt;strong&gt;object-oriented programming&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Through time has C++ gained much more functionality and moved way beyond systems programming. In the 2020 edition, C++ brought modules and other long-awaited features, so the momentum is sure to be kept into the foreseeable future.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2010-rust"&gt;
  &lt;/a&gt;
  2010 - Rust
&lt;/h4&gt;

&lt;p&gt;The lack of garbage collection means that memory safety has always been a big concern in systems programming. This is because the developer is tasked to deallocate the memory, which is error-prone, and parallelization only makes matters worse. In fact, a &lt;a href="https://github.com/microsoft/MSRC-Security-Research/blob/master/presentations/2019_02_BlueHatIL/2019_01%20-%20BlueHatIL%20-%20Trends%2C%20challenge%2C%20and%20shifts%20in%20software%20vulnerability%20mitigation.pdf"&gt;2019 study by Microsoft (Page 10)&lt;/a&gt; showed that ~70% of all common vulnerabilities and exposures (CVEs) every year from 2006 to 2018 were rooted in memory safety.&lt;/p&gt;

&lt;p&gt;Rust resolves this entire category of issues through a concept called &lt;strong&gt;borrow checking&lt;/strong&gt;. This allows the compiler to guarantee that &lt;strong&gt;only memory-safe code is compiled successfully, even with parallelization&lt;/strong&gt;. Sometimes the compiler blocks code that you know is safe, but Rust can guarantee it, and in this case, there is an "unsafe" flag to disable the check. &lt;/p&gt;

&lt;p&gt;Rust has gained quite a reputation lately, as the &lt;em&gt;most loved language&lt;/em&gt; for 6 consecutive years in &lt;a href="https://insights.stackoverflow.com/survey/2021#technology-most-loved-dreaded-and-wanted"&gt;StackOverflow Developer Survey&lt;/a&gt; (2016-2021). There's also no lack of backing for the project, which in 2021 became clear when Microsoft, Google, Amazon, Mozilla, Facebook, and Huawei in a collaborative effort decided to form the &lt;a href="https://foundation.rust-lang.org/posts/2021-02-08-hello-world/"&gt;Rust Foundation&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#future"&gt;
  &lt;/a&gt;
  Future
&lt;/h4&gt;

&lt;p&gt;It's great to have competition because it accelerates innovation, and now time will tell if Rust will be bringing a new memory-safe paradigm, or if C++ can become safer and fend off the competition. Either way, it will be exciting to see what’s next to this story.&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
