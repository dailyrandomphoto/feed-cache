<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>A Rails template for modern, reactive applications</title>
      <author>David Colby</author>
      <pubDate>Fri, 03 Sep 2021 03:33:23 +0000</pubDate>
      <link>https://dev.to/davidcolbyatx/a-rails-template-for-modern-reactive-applications-38di</link>
      <guid>https://dev.to/davidcolbyatx/a-rails-template-for-modern-reactive-applications-38di</guid>
      <description>&lt;p&gt;I've &lt;a href="https://www.colby.so/posts/live-search-with-rails-and-stimulusreflex"&gt;written&lt;/a&gt; &lt;a href="https://www.colby.so/posts/turbo-streams-on-rails"&gt;a lot&lt;/a&gt; &lt;a href="https://www.colby.so/posts/instant-search-with-rails-6-and-hotwire"&gt;about&lt;/a&gt; the tools pushing Rails forward, allowing small teams of developers to build modern, fast, engaging web applications, quickly.&lt;/p&gt;

&lt;p&gt;The stars of the show — the Hotwire stack (Stimulus and Turbo), CableReady, StimulusReflex — are now part of every new Rails application I build.&lt;/p&gt;

&lt;p&gt;Writing Ruby code and building cool stuff is fun. Reading setup docs, fiddling with tooling, and remembering how to tie everything together each time you create a new application is a bummer.&lt;/p&gt;

&lt;p&gt;So, to spend more time on the fun stuff and less time in setup land, I built a small &lt;a href="https://github.com/DavidColby/vite_starter_template"&gt;Rails application template&lt;/a&gt; that let's me jump right into building.&lt;/p&gt;

&lt;p&gt;This &lt;a href="https://github.com/DavidColby/vite_starter_template"&gt;new template&lt;/a&gt; is now available on Github for anyone interested in building reactive Rails applications to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-in-the-template"&gt;
  &lt;/a&gt;
  What's in the template?
&lt;/h2&gt;

&lt;p&gt;The template comes with the following tools configured and ready to start using:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ruby on Rails (of course)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stimulus.hotwired.dev/"&gt;Stimulus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://turbo.hotwired.dev/"&gt;Turbo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cableready.stimulusreflex.com/"&gt;CableReady&lt;/a&gt; + &lt;a href="https://docs.stimulusreflex.com/"&gt;StimulusReflex&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://windicss.org/"&gt;WindiCSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instead of using Webpacker to handle building JavaScript and CSS, I've added Vite, via &lt;a href="https://github.com/ElMassimo/vite_ruby"&gt;vite_rails&lt;/a&gt;, configured to work seamlessly with Stimulus and WindiCSS immediately.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-vite"&gt;
  &lt;/a&gt;
  Why Vite?
&lt;/h2&gt;

&lt;p&gt;Vite fits in well alongside the modern, reactive stack we're using, with HMR-enabled updates for every change, including for server-side views.&lt;/p&gt;

&lt;p&gt;In addition to being fast, simple and effective, &lt;a href="https://vitejs.dev/"&gt;Vite&lt;/a&gt; is a well-supported project with a very active community working to improve it.&lt;/p&gt;

&lt;p&gt;With the decision to &lt;a href="https://github.com/rails/rails/pull/42999"&gt;move away from Webpacker&lt;/a&gt; as the default Rails JavaScript setup in Rails 7, it is a good time to explore new options, and Vite is a strong contender.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-the-template"&gt;
  &lt;/a&gt;
  Use the template
&lt;/h2&gt;

&lt;p&gt;To create a new Ruby on Rails application from this template, simply run this command from your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails new your_new_application -m https://raw.githubusercontent.com/davidcolby/vite_starter_template//main/template.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-isnt-x-included-in-the-template"&gt;
  &lt;/a&gt;
  Why isn't X included in the template?
&lt;/h2&gt;

&lt;p&gt;I've intentionally left the template light and plan to keep it that way.&lt;/p&gt;

&lt;p&gt;This template's goal is to provide the basic tools to build modern applications, not provide a ready-to-deploy starter application. If you want a more full-featured starter, consider &lt;a href="https://jumpstartrails.com/"&gt;Jumpstart&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have a tool that you want to see included, &lt;a href="https://github.com/DavidColby/vite_starter_template/issues"&gt;Github issues&lt;/a&gt; and &lt;a href="https://github.com/DavidColby/vite_starter_template/pulls"&gt;PRs&lt;/a&gt; are welcome.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;I'd love for you to try out the stack included in this template — building Rails apps with this stack is a joy — and I hope that this template makes it a little easier to get started.&lt;/p&gt;

&lt;p&gt;Have feedback or questions about the template? Get in touch with me here, or open an issue on the &lt;a href="https://github.com/DavidColby/vite_starter_template"&gt;Github repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As always, thanks for reading!&lt;/p&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Animation React - Bem-te-vi </title>
      <author>Gustavo Scarpim</author>
      <pubDate>Fri, 03 Sep 2021 03:09:54 +0000</pubDate>
      <link>https://dev.to/guscarpim/react-animation-bem-te-vi-ojl</link>
      <guid>https://dev.to/guscarpim/react-animation-bem-te-vi-ojl</guid>
      <description>&lt;p&gt;Today I'm bringing another animation made with GSAP / React, you can see in my github all the code.&lt;/p&gt;

&lt;p&gt;This animation is for those who like the bird "Bem-te-vi", if you have ideas for improvements, the code is open, I'll be happy to receive your PR.&lt;/p&gt;

&lt;p&gt;When accessing the site, I recommend opening the sound.&lt;/p&gt;

&lt;p&gt;Hope you like it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wGPUIow4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plakf88rcrvd0c0xfgfr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wGPUIow4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plakf88rcrvd0c0xfgfr.gif" alt="Gustavo Scarpim"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See the complete code here on GitHub &lt;a href="https://github.com/GuScarpim/bird-animation"&gt;&lt;b&gt;Click here&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out the Project in action &lt;a href="https://bem-te-vi.netlify.app/"&gt;&lt;b&gt;Deploy&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>Multiline CSS-only typewriter effect</title>
      <author>Alvaro Montoro</author>
      <pubDate>Fri, 03 Sep 2021 02:51:36 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/multiline-css-only-typewriter-effect-18p4</link>
      <guid>https://dev.to/alvaromontoro/multiline-css-only-typewriter-effect-18p4</guid>
      <description>&lt;p&gt;Another entry for the typewriter effect CSS challenge. And with a different approach from the ones that have participated (I think, &lt;a class="mentioned-user" href="https://dev.to/afif"&gt;@afif&lt;/a&gt;
 keep me honest here, it could be "close" to &lt;a href="https://dev.to/afif/a-multi-line-css-only-typewriter-effect-3op3"&gt;the one you did earlier&lt;/a&gt;, but using different elements and properties.)&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/LYLZOrE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h2&gt;

&lt;p&gt;The idea of this effect is having two different moving elements: the text container in itself and a pseudo-element used to hide the content.&lt;/p&gt;

&lt;p&gt;The container animation is simple: it grows a given height (the specified line height) until all the text has been displayed or the container reaches a limit of lines (500 by default). It happens in steps, so each line is revealed at a time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;grow&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;max-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lineHeight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;max-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lineHeight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lines&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.typewriter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* ... */&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grow&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lines&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;animation-fill-mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The pseudo-element has the same width as the container and a height equal to the line height. It reduces to a width of 0 (revealing the text as it shrinks) and then "jumps to the next line."&lt;/p&gt;

&lt;p&gt;The animation of the pseudo-element is a little bit more complex... mainly because it is not an animation but three small animations together:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Change the width from 100% to 0%&lt;/li&gt;
&lt;li&gt;Move the element vertically&lt;/li&gt;
&lt;li&gt;Animate the caret (to blink)
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;carriageReturn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lineHeight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lines&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;caret&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--bgColor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.keyframes&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* ... */&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--timePerLine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;carriageReturn&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lines&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lines&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;caret&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#customization"&gt;
  &lt;/a&gt;
  Customization
&lt;/h2&gt;

&lt;p&gt;One thing I like about this solution is that it is highly customizable. The &lt;code&gt;.typewriter&lt;/code&gt; class defines some default values for custom properties that the user can override. Here are the Properties:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--bgColor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Color&lt;/td&gt;
&lt;td&gt;White&lt;/td&gt;
&lt;td&gt;Defines the background color of the element and the animation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--lines&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;500&lt;/td&gt;
&lt;td&gt;Maximum number of lines to animate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--lineHeight&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length&lt;/td&gt;
&lt;td&gt;1.5rem&lt;/td&gt;
&lt;td&gt;The line-height which will determine the size of the container height increase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--timePerLine&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Duration&lt;/td&gt;
&lt;td&gt;4s&lt;/td&gt;
&lt;td&gt;The time that it will take for a line to be revealed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--widthCh&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;The width of the element in ch units (useful when used with monospace)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--width&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Length&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;--widthCh&lt;/code&gt; * 1ch&lt;/td&gt;
&lt;td&gt;Optional. If you use &lt;code&gt;--widthCh&lt;/code&gt;, there's no need to define this variable. But it is convenient to provide relative values.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;There is one more custom property: &lt;code&gt;--time&lt;/code&gt;, but that one is auto-calculated based on the number of lines and the time per line, and the users should not modify it.&lt;/p&gt;

&lt;p&gt;On top of that, there are a series of classes that can be added to the container in HTML and that will provide some additional features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;monospace&lt;/code&gt;: makes the font as the default monospace family.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;no-caret&lt;/code&gt;: removes the caret (convenient to avoid the ugly end-of-line animation)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;big-caret&lt;/code&gt;: to display a wide caret instead of a thin one.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pros-and-cons"&gt;
  &lt;/a&gt;
  Pros and cons
&lt;/h2&gt;

&lt;p&gt;Pros of this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fully multiline: works with any number of lines (define the max in the custom property &lt;code&gt;--lines&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Responsive: users can define a width in characters or units, but the animation uses %, so it adapts to any size.&lt;/li&gt;
&lt;li&gt;Font-friendly: it works with monospace and non-monospace fonts (but in reality, it looks better in monospace).&lt;/li&gt;
&lt;li&gt;Highly customizable: Add a class to the typewriter element, or redefine the variables for different effects.&lt;/li&gt;
&lt;li&gt;(Slightly more) accessible (than my previous entries): All the text is in place at the beginning so that ATs can detect it. Plus, it uses common CSS properties that are supported in most browsers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons of this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Not a polished finish: the caret goes until the end of each line, which looks weird (especially in the last line). The &lt;code&gt;no-caret&lt;/code&gt; class removes the caret.&lt;/li&gt;
&lt;li&gt;Content shift: if it's not absolutely positioned, the container will push the content below with each line that pops up.&lt;/li&gt;
&lt;li&gt;Required styles: the animation requires all lines to have the same height, so a &lt;code&gt;line-height&lt;/code&gt; value is needed. It's "vertically monospaced."&lt;/li&gt;
&lt;li&gt;Limited backgrounds: the background must be a solid color. Otherwise, the animation of the pseudo-element will be revealed.&lt;/li&gt;
&lt;li&gt;Responsive but not clean: the animations adapt to the element's width, but if the width is not specific, the letters may be cut off, and the animation won't be clean.&lt;/li&gt;
&lt;li&gt;Scrolling: if the user selects the text, they could scroll the container. This could be avoided with &lt;code&gt;user-select: none&lt;/code&gt;, but that could have some usability/accessibility issues of its own.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are probably more cons, but these are the ones that I could think of at the moment... But definitely, there will be more.&lt;/p&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/inhuofficial"&gt;@inhuofficial&lt;/a&gt;
, this time I tested on iOS, and it works there too! 😊&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>AWS Load Balancer Controller on EKS Cluster</title>
      <author>Sivamuthu Kumar</author>
      <pubDate>Fri, 03 Sep 2021 02:39:44 +0000</pubDate>
      <link>https://dev.to/aws-builders/aws-load-balancer-controller-on-eks-cluster-38fk</link>
      <guid>https://dev.to/aws-builders/aws-load-balancer-controller-on-eks-cluster-38fk</guid>
      <description>&lt;p&gt;Hello all, Let's see how to enable AWS Load Balancer Controller on EKS Cluster to integrate the AWS Application / Network Load Balancers. This is a guide to provision the use cases &amp;amp; solutions of the AWS Load Balancer integration with Kubernetes Cluster.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#kubernetes-networking"&gt;Kubernetes Networking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#application-load-balancer"&gt;Application Load Balancer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#aws-load-balancer-controller-on-eks-cluster-1"&gt;AWS Load Balancer Controller on EKS Cluster&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#creating-an-eks-cluster"&gt;Creating an EKS Cluster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-the-aws-load-balancer-controller"&gt;Install the AWS Load Balancer Controller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploy-the-ingress"&gt;Deploy the Ingress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#patterns"&gt;Patterns&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#application-load-balancer---traffic-routing"&gt;Application Load Balancer - Traffic Routing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ingress-group---multiple-ingress-resources-together"&gt;Ingress Group - Multiple Ingress Resources Together&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#custom-domain--ssl-certificate"&gt;Custom Domain &amp;amp; SSL Certificate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#https-redirect"&gt;HTTPS Redirect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#access-control"&gt;Access Control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#custom-attributes--addons"&gt;Custom Attributes &amp;amp; Addons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#kubernetes-networking"&gt;
  &lt;/a&gt;
  Kubernetes Networking
&lt;/h2&gt;

&lt;p&gt;We will start with a high-level overview of Kubernetes Networking. Kubernetes has all the components you need to deploy an application - like load balancer, ingress/egress gateways, network security policy, traffic routing within the cluster, mutual TLS authentication, etc. Kubernetes has the ability to layer these components and combine them to make a network that supports various scenarios in the organizations.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#ingress-v1-networking-k8s-io"&gt;Ingress&lt;/a&gt; exposes HTTP and HTTPS routes from outside the cluster to &lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/"&gt;services&lt;/a&gt; within the cluster. Traffic routing is controlled by rules defined on the Ingress resource. An Ingress may be configured to give Services externally-reachable URLs, load balance traffic, terminate SSL / TLS and offer name-based virtual hosting. An &lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress-controllers"&gt;Ingress controller&lt;/a&gt; is responsible for fulfilling the Ingress, usually with a load balancer, though it may also configure your edge router or additional frontends to help handle the traffic. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#application-load-balancer"&gt;
  &lt;/a&gt;
  Application Load Balancer
&lt;/h2&gt;

&lt;p&gt;An Application Load Balancer functions at the application layer, the seventh layer of the Open Systems Interconnection (OSI) model. After the load balancer receives a request, it evaluates the listener rules in priority order to determine which rule to apply, and then selects a target from the target group for the rule action. You can configure listener rules to route requests to different target groups based on the content of the application traffic. Routing is performed independently for each target group, even when a target is registered with multiple target groups.&lt;/p&gt;

&lt;p&gt;You can add and remove targets from your load balancer as your needs change, without disrupting the overall flow of requests to your application. Elastic Load Balancing scales your load balancer as traffic to your application changes over time. Elastic Load Balancing can scale to the vast majority of workloads automatically.&lt;/p&gt;

&lt;p&gt;ALB supports multiple features including host or path-based routing, TLS (Transport Layer Security) termination, WebSockets, HTTP/2, AWS WAF (Web Application Firewall) integration, integrated access logs, and health checks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-load-balancer-controller-on-eks-cluster"&gt;
  &lt;/a&gt;
  AWS Load Balancer Controller on EKS Cluster
&lt;/h2&gt;

&lt;p&gt;The AWS Load Balancer Controllers manages AWS Elastic Load Balancers for a Kubernetes Cluster. When you install the AWS Load Balancer Controller, the controller dynamically provisions&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An AWS Application Load Balancer (ALB) when you create a Kubernetes Ingress&lt;/li&gt;
&lt;li&gt;An AWS Network Load Balancer (NLB) when you create a Kubernetes Service of type Load Balancer.

&lt;ul&gt;
&lt;li&gt;You can configure either of the target types - instance targets and IP targets.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lgDKhwPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630635442585/1MNC0w-Fy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lgDKhwPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630635442585/1MNC0w-Fy.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pic: &lt;a href="https://aws.amazon.com/blogs/opensource/kubernetes-ingress-aws-alb-ingress-controller/"&gt;https://aws.amazon.com/blogs/opensource/kubernetes-ingress-aws-alb-ingress-controller/&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When the Ingress resource is created in kubernetes API, the alb-ingress-controller observes the changes made.&lt;/li&gt;
&lt;li&gt;The alb-ingress-controller creates the AWS Application Load Balancer based on the annotations added in the ingress resource.&lt;/li&gt;
&lt;li&gt;The target groups are created for each backend specified in the ingress resource.&lt;/li&gt;
&lt;li&gt;The Application Load Balancer URL is accessed with the path or query params.&lt;/li&gt;
&lt;li&gt;Based on the Rules configured in the Ingress resource, the request is redirected to a specific target group and reaching Pod service using ClusterIP or NodePort&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#creating-an-eks-cluster"&gt;
  &lt;/a&gt;
  Creating an EKS Cluster
&lt;/h3&gt;

&lt;p&gt;Let's get started with an EKS cluster. You can deploy the EKS Cluster using AWS Console or the eksctl tool. In this blog post, we are going to create an EKS Cluster using the eksctl tool.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;➜ eksctl create cluster &lt;span class="nt"&gt;-f&lt;/span&gt; cluster.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The cluster yaml configuration is as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;eksctl.io/v1alpha5&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ClusterConfig&lt;/span&gt;

&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app-lb-demo&lt;/span&gt;
  &lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;us-east-1&lt;/span&gt;

&lt;span class="na"&gt;iam&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;withOIDC&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;   
  &lt;span class="na"&gt;serviceAccounts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aws-load-balancer&lt;/span&gt;
        &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kube-system&lt;/span&gt;
      &lt;span class="na"&gt;wellKnownPolicies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;awsLoadBalancerController&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;  

&lt;span class="na"&gt;managedNodeGroups&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app-lb-demo-ng&lt;/span&gt;
    &lt;span class="na"&gt;instanceType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;t3.medium&lt;/span&gt;
    &lt;span class="na"&gt;minSize&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="na"&gt;maxSize&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#install-the-aws-load-balancer-controller"&gt;
  &lt;/a&gt;
  Install the AWS Load Balancer Controller
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add the EKS chart repo to helm&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;helm repo add eks https://aws.github.io/eks-charts
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the AWS Load Balancer Controller CRDs - Ingress Class Params and Target Group Bindings&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl apply &lt;span class="nt"&gt;-k&lt;/span&gt; &lt;span class="s2"&gt;"github.com/aws/eks-charts/stable/aws-load-balancer-controller//crds?ref=master"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the helm chart by passing the serviceAccount.create=false adn serviceAccount.name=aws-load-balancer-controller&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;helm &lt;span class="nb"&gt;install &lt;/span&gt;aws-load-balancer-controller eks/aws-load-balancer-controller &lt;span class="nt"&gt;-n&lt;/span&gt; kube-system &lt;span class="nt"&gt;--set&lt;/span&gt; &lt;span class="nv"&gt;clusterName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;cluster-name&amp;gt; &lt;span class="nt"&gt;--set&lt;/span&gt; serviceAccount.create&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="nt"&gt;--set&lt;/span&gt; serviceAccount.name&lt;span class="o"&gt;=&lt;/span&gt;aws-load-balancer
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#deploy-the-ingress"&gt;
  &lt;/a&gt;
  Deploy the Ingress
&lt;/h3&gt;

&lt;p&gt;The AWS Application Load Balancer (ALB) will not be created until you create an ingress object. Now we will deploy the sample deployment file and expose using the Ingress object.&lt;/p&gt;

&lt;p&gt;Note: This blog uses Kubernetes 1.21+ latest and the ingress objects are updated. If you are looking at the ALB controller documentation, you may see few differences over ingress objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.0.0/docs/examples/echoservice/echoserver-namespace.yaml &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.0.0/docs/examples/echoservice/echoserver-service.yaml &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
kubectl apply &lt;span class="nt"&gt;-f&lt;/span&gt; https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.0.0/docs/examples/echoservice/echoserver-deployment.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;namespace/echoserver created
service/echoserver created
deployment.apps/echoserver created
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#patterns"&gt;
  &lt;/a&gt;
  Patterns
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#application-load-balancer-traffic-routing"&gt;
  &lt;/a&gt;
  Application Load Balancer - Traffic Routing
&lt;/h3&gt;

&lt;p&gt;In this ingress object, we are setting an internet-facing Application Load Balancer with added resource tags. In the rules, if the path has prefix echo, the backend service is echoserver and the port number is 80.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: echoserver
  namespace: echoserver
  annotations:
    &lt;span class="k"&gt;**&lt;/span&gt;kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/tags: &lt;span class="nv"&gt;Environment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dev,Team&lt;span class="o"&gt;=&lt;/span&gt;app&lt;span class="k"&gt;**&lt;/span&gt;
spec:
  rules:
    - host: &lt;span class="s2"&gt;"*.amazonaws.com"&lt;/span&gt;
      http:
        paths:
          - path: /echo
            pathType: Prefix
            backend:
              service:
                name: echoserver
                port:
                  number: 80
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Verify the ingress is created and ALB is provisioned. Once the ALB is provisioned, you will get the ALB address.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;➜  flux-demo  k get ingress &lt;span class="nt"&gt;-A&lt;/span&gt;
NAMESPACE    NAME         CLASS    HOSTS             ADDRESS                                                                   PORTS   AGE
echoserver   echoserver   &amp;lt;none&amp;gt;   &lt;span class="k"&gt;*&lt;/span&gt;.amazonaws.com   k8s-echoserv-echoserv-xxxxxxxxxxxxxxxxxxxxx.us-east-1.elb.amazonaws.com   80      10s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make the request to the URL and the path to verify whether you get the expected response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;➜  flux-demo  curl http://k8s-echoserv-echoserv-xxxxxxxxxxxxxxxxxxxxx.us-east-1.elb.amazonaws.com/echo &lt;span class="nt"&gt;-i&lt;/span&gt;

HTTP/1.1 200 OK
Date: Thu, 02 Sep 2021 02:41:57 GMT
Content-Type: text/plain
Transfer-Encoding: chunked
Connection: keep-alive
Server: nginx/1.10.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ingress-group-multiple-ingress-resources-together"&gt;
  &lt;/a&gt;
  Ingress Group - Multiple Ingress Resources Together
&lt;/h3&gt;

&lt;p&gt;IngressGroup feature enables you to group multiple Ingress resources together. The controller will automatically merge Ingress rules for all Ingresses within IngressGroup and support them with a single ALB. In addition, most annotations defined on a Ingress only apply to the paths defined by that Ingress.&lt;/p&gt;

&lt;p&gt;First, let's create another ingress resource and see whether it creates a separate application load balancer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;networking.k8s.io/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Ingress&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echoserver-1&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echoserver&lt;/span&gt;
  &lt;span class="na"&gt;annotations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;kubernetes.io/ingress.class&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;alb&lt;/span&gt;
    &lt;span class="s"&gt;alb.ingress.kubernetes.io/scheme&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;internet-facing&lt;/span&gt;
    &lt;span class="s"&gt;alb.ingress.kubernetes.io/tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Environment=dev,Team=app&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;*.amazonaws.com"&lt;/span&gt;
      &lt;span class="na"&gt;http&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;*-&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/echo-test**&lt;/span&gt;
            &lt;span class="s"&gt;pathType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Prefix&lt;/span&gt;
            &lt;span class="s"&gt;backend&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echoserver&lt;/span&gt;
                &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="na"&gt;number&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Verify the ingress is created and you can see another ALB get provisioned. So now we got two ALBs with different addresses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;➜  flux-demo  k get ingress &lt;span class="nt"&gt;-A&lt;/span&gt;
NAMESPACE    NAME           CLASS    HOSTS             ADDRESS                                                                   PORTS   AGE
echoserver   echoserver     &amp;lt;none&amp;gt;   &lt;span class="k"&gt;*&lt;/span&gt;.amazonaws.com   k8s-echoserv-echoserv-64b6592087-xxxxxxxxx.us-east-1.elb.amazonaws.com   80      28m
echoserver   echoserver-1   &amp;lt;none&amp;gt;   &lt;span class="k"&gt;*&lt;/span&gt;.amazonaws.com   k8s-echoserv-echoserv-6c350fcfc9-xxxxxxxxx.us-east-1.elb.amazonaws.com    80      2m39s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add the &lt;code&gt;[alb.ingress.kubernetes.io/group.name](http://alb.ingress.kubernetes.io/group.name)&lt;/code&gt; for both ingress objects with the same value&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;annotations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;kubernetes.io/ingress.class&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;alb&lt;/span&gt;
    &lt;span class="s"&gt;alb.ingress.kubernetes.io/scheme&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;internet-facing&lt;/span&gt;
    &lt;span class="s"&gt;alb.ingress.kubernetes.io/tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Environment=dev,Team=app&lt;/span&gt;
    &lt;span class="s"&gt;alb.ingress.kubernetes.io/group.name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;alb-demo-group&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you re-apply the ingress, (delete and recreate - for a quick check), you can see both ingresses has the same ALB address.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;➜  flux-demo  k get ingress &lt;span class="nt"&gt;-A&lt;/span&gt;
NAMESPACE    NAME           CLASS    HOSTS             ADDRESS                                                             PORTS   AGE
echoserver   echoserver     &amp;lt;none&amp;gt;   &lt;span class="k"&gt;*&lt;/span&gt;.amazonaws.com   k8s-albdemogroup-5364dc26a8-xxxxxxxxx.us-east-1.elb.amazonaws.com   80      5s
echoserver   echoserver-1   &amp;lt;none&amp;gt;   &lt;span class="k"&gt;*&lt;/span&gt;.amazonaws.com   k8s-albdemogroup-5364dc26a8-xxxxxxxxx.us-east-1.elb.amazonaws.com   80      5s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The rules will be merged and you can apply the order of the rules in the group to configure in the Application Load Balancer Controller.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-domain-amp-ssl-certificate"&gt;
  &lt;/a&gt;
  Custom Domain &amp;amp; SSL Certificate
&lt;/h3&gt;

&lt;p&gt;Now, let's bind the custom domain to the ALB and SSL Certificates. There are two ways you can bind the SSL certificate&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Setting up the certificate from the annotation - &lt;a href="http://alb.ingress.kubernetes.io/certificate-arn"&gt;alb.ingress.kubernetes.io/certificate-arn&lt;/a&gt; specifies the ARN of one or more certificates managed by AWS Certificate Manager&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;alb.ingress.kubernetes.io/certificate-arn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;arn:aws:acm:us-west-2:xxxxx:certificate/xxxxxxx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can set up the auto-discovery of the SSL certificate using the domain name.&lt;/p&gt;

&lt;p&gt;TLS certificates for ALB Listeners can be automatically discovered with hostnames from Ingress resources if the &lt;code&gt;[alb.ingress.kubernetes.io/certificate-arn](https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.2/guide/ingress/annotations/#certificate-arn)&lt;/code&gt; annotation is not specified.&lt;/p&gt;

&lt;p&gt;The controller will attempt to discover TLS certificates from the &lt;code&gt;tls&lt;/code&gt; field in Ingress and &lt;code&gt;host&lt;/code&gt; field in Ingress rules.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this example, we will set up the auto-discovery of the SSL certificate.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;networking.k8s.io/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Ingress&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echoserver&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echoserver&lt;/span&gt;
  &lt;span class="na"&gt;annotations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;*kubernetes&lt;/span&gt;&lt;span class="s"&gt;.io/ingress.class&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;alb&lt;/span&gt;
    &lt;span class="s"&gt;alb.ingress.kubernetes.io/scheme&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;internet-facing&lt;/span&gt;
    &lt;span class="s"&gt;alb.ingress.kubernetes.io/tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Environment=dev,Team=app**&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;dev.sivamuthukumar.com"&lt;/span&gt;
      &lt;span class="na"&gt;http&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/echo&lt;/span&gt;
            &lt;span class="na"&gt;pathType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Prefix&lt;/span&gt;
            &lt;span class="na"&gt;backend&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echoserver&lt;/span&gt;
                &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="na"&gt;number&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Execute the curl command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;➜  flux-demo  curl https://dev.spectaflare.com/echo -i&lt;/span&gt;
&lt;span class="s"&gt;HTTP/1.1 200 OK&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#https-redirect"&gt;
  &lt;/a&gt;
  HTTPS Redirect
&lt;/h3&gt;

&lt;p&gt;The URL with HTTP protocol should redirect to HTTPS protocol. We'll use the &lt;a href="http://alb.ingress.kubernetes.io/actions.%24%7Baction-name%7D"&gt;alb.ingress.kubernetes.io/actions.${action-name}&lt;/a&gt; annotation to setup an ingress to redirect http traffic into https&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;networking.k8s.io/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Ingress&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echoserver&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echoserver&lt;/span&gt;
  &lt;span class="na"&gt;annotations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;kubernetes.io/ingress.class&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;alb&lt;/span&gt;
    &lt;span class="s"&gt;alb.ingress.kubernetes.io/scheme&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;internet-facing&lt;/span&gt;
    &lt;span class="s"&gt;alb.ingress.kubernetes.io/tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Environment=dev,Team=app&lt;/span&gt;
    &lt;span class="s"&gt;alb.ingress.kubernetes.io/listen-ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;[{"HTTP":&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;80},&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;{"HTTPS":&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;443}]'&lt;/span&gt;
    &lt;span class="s"&gt;alb.ingress.kubernetes.io/ssl-redirect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;443'&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;host&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;dev.sivamuthukumar.com"&lt;/span&gt;
      &lt;span class="na"&gt;http&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/echo&lt;/span&gt;
            &lt;span class="na"&gt;pathType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Prefix&lt;/span&gt;
            &lt;span class="na"&gt;backend&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echoserver&lt;/span&gt;
                &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="na"&gt;number&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#access-control"&gt;
  &lt;/a&gt;
  Access Control
&lt;/h3&gt;

&lt;p&gt;Access control of the Load Balancer can be controlled with the following annotations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;alb.ingress.kubernetes.io/scheme&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;internal&lt;/span&gt; &lt;span class="c1"&gt;# To enable the internal load balancers&lt;/span&gt;
&lt;span class="s"&gt;alb.ingress.kubernetes.io/inbound-cidrs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;10.0.0.0/24&lt;/span&gt; &lt;span class="c1"&gt;# Inbound CIDRs from your network or VPC&lt;/span&gt;
&lt;span class="s"&gt;alb.ingress.kubernetes.io/security-groups&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sg-xxxx, sg-yyyy&lt;/span&gt; &lt;span class="c1"&gt;# Security groups you want to attach the load balancer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#custom-attributes-amp-addons"&gt;
  &lt;/a&gt;
  Custom Attributes &amp;amp; Addons
&lt;/h3&gt;

&lt;p&gt;Custom attributes to Load Balancers can be controlled with the annotations - &lt;a href="http://alb.ingress.kubernetes.io/load-balancer-attributes:"&gt;&lt;code&gt;alb.ingress.kubernetes.io/load-balancer-attributes&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For e.g To enable HTTP2 in the Application Load Balancer&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;alb.ingress.kubernetes.io/load-balancer-attributes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;routing.http2.enabled=true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check the other attributes you can add it in annotations &lt;a href="https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.2/guide/ingress/annotations/#custom-attributes"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can attach WAF or enable AWS Shield to the load balancer by adding the below annotations in the Ingress object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;alb.ingress.kubernetes.io/wafv2-acl-arn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;WAFv2 ACL ARN HERE&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;alb.ingress.kubernetes.io/shield-advanced-protection&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;true'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The AWS Load Balancer Controller provides a Kubernetes native way to configure and manage Elastic Load Balancers that route traffic to applications running in Kubernetes clusters. I hope, I've explained to you the concept of routing, ingress groups, configure SSL, HTTP to HTTPs redirection, and other advanced concepts. You can check more on the documentation &lt;a href="https://github.com/kubernetes-sigs/aws-load-balancer-controller"&gt;here&lt;/a&gt;. I highly encourage you to give it a try and share your feedback and questions with me&lt;/p&gt;

&lt;p&gt;I'm Siva - working as Sr. Software Architect at &lt;a href="https://www.ceiamerica.com"&gt;Computer Enterprises Inc&lt;/a&gt; from Orlando. I'm an AWS Community builder, Auth0 Ambassador and I am going to write a lot about Cloud, Containers, IoT, and Devops. If you are interested in any of that, make sure to follow me if you haven’t already. Please follow me &lt;a href="https://www.twitter.com/ksivamuthu"&gt;@ksivamuthu&lt;/a&gt; Twitter or check out my blogs at &lt;a href="https://blog.sivamuthukumar.com"&gt;https://blog.sivamuthukumar.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>containers</category>
      <category>kubernetes</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Vocabulary Building Day6</title>
      <author>vindhya Hegde </author>
      <pubDate>Fri, 03 Sep 2021 02:02:27 +0000</pubDate>
      <link>https://dev.to/vindhyasadanand/vocabulary-building-day6-1i47</link>
      <guid>https://dev.to/vindhyasadanand/vocabulary-building-day6-1i47</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;commensurate&lt;/strong&gt;(adjective) :to be in proportion or corresponding in degree or amount.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E_PlONID--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://smartvocab.in/vocab-api/common-images/nnpyyxacwqwl1544.jpg%3Fv%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E_PlONID--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://smartvocab.in/vocab-api/common-images/nnpyyxacwqwl1544.jpg%3Fv%3D1" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=commensurate&amp;amp;oq=commensurate&amp;amp;aqs=chrome..69i57j0i512l3j0i433i512j0i20i263i512j0i512l4.7221j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;venerate&lt;/strong&gt;(verb) :regard with great respect; revere.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YOjH8FID--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.writerscentre.com.au/wp-content/uploads/2020/05/WOTW_14Oct_D.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YOjH8FID--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.writerscentre.com.au/wp-content/uploads/2020/05/WOTW_14Oct_D.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=venerate&amp;amp;oq=venerate&amp;amp;aqs=chrome..69i57j0i433i512j46i175i199i512j0i433i512j0i512l6.3841j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;equivocal&lt;/strong&gt;(adjective): open to more than one interpretation; ambiguous.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sLpPjfL---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.smartvocab.in/common-images/3w0128hgo0n6ncl5.jpg%3Fv%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sLpPjfL---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.smartvocab.in/common-images/3w0128hgo0n6ncl5.jpg%3Fv%3D1" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=equivocal&amp;amp;oq=equivocal+&amp;amp;aqs=chrome..69i57j0i433i512j0i512l8.5416j1j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;frugal&lt;/strong&gt;(adjective): Not spending much money(but spending wisely)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aln7qkNR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.mymoneysage.in/blog/wp-content/uploads/2017/03/Frugality.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aln7qkNR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.mymoneysage.in/blog/wp-content/uploads/2017/03/Frugality.png" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=frugal&amp;amp;oq=frugal&amp;amp;aqs=chrome.0.69i59j0i433i512l3j0i512l5j0i433i512.2934j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;prodigal&lt;/strong&gt;(adjective): spending money or using resources freely and recklessly; wastefully extravagant.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jhIXVUPZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://biblestorycartoons.com/wp-content/uploads/2018/07/5-party.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jhIXVUPZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://biblestorycartoons.com/wp-content/uploads/2018/07/5-party.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=prodigal&amp;amp;oq=prodigal&amp;amp;aqs=chrome.0.69i59j46i275i433i512j0i433i512l3j0i512l2j0i433i512j0i512j46i512.4961j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;br&gt;
I hope this helps you if you are preparing for GRE exams.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>gre</category>
      <category>day6</category>
    </item>
    <item>
      <title>September 2nd, 2021: What did you learn this week?</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Fri, 03 Sep 2021 01:39:45 +0000</pubDate>
      <link>https://dev.to/nickytonline/september-2nd-2021-what-did-you-learn-this-week-5en8</link>
      <guid>https://dev.to/nickytonline/september-2nd-2021-what-did-you-learn-this-week-5en8</guid>
      <description>&lt;p&gt;It's that time of the week again. So wonderful devs, what did you learn this week? It could be programming tips, career advice etc.&lt;/p&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/1xpm1nTQiRL96Di3Q6/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/1xpm1nTQiRL96Di3Q6/giphy.gif" alt="A picture it a dog waving their paw with the caption “Learning, cool at school or at home”"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;Feel free to comment with what you learnt and/or reference your TIL post to give it some more exposure.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__5305"&gt;
  
    .ltag__tag__id__5305 .follow-action-button{
      background-color: #ffedc9 !important;
      color: #820000 !important;
      border-color: #ffedc9 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/todayilearned" class="ltag__tag__link"&gt;todayilearned&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        Summarize a concept that is new to you.
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>weeklylearn</category>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>Apple’s #SpyPhone, an Apple App Store Settlement, and the Expansion of Government Facial Recognition Software — on DevNews!</title>
      <author>dev.to staff</author>
      <pubDate>Fri, 03 Sep 2021 00:41:52 +0000</pubDate>
      <link>https://dev.to/devteam/apple-s-spyphone-an-apple-app-store-settlement-and-the-expansion-of-government-facial-recognition-software-on-devnews-1j3m</link>
      <guid>https://dev.to/devteam/apple-s-spyphone-an-apple-app-store-settlement-and-the-expansion-of-government-facial-recognition-software-on-devnews-1j3m</guid>
      <description>&lt;p&gt;Listen to S5E7 of the DevNews podcast today!&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devnews/s5-e7-apple-s-spyphone-an-apple-app-store-settlement-and-the-expansion-of-government-facial-recognition-software"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S5:E7 - Apple’s #SpyPhone, an Apple App Store Settlement, and the Expansion of Government Facial Recognition Software&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devnews"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevNews  

      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s5-e7-apple-s-spyphone-an-apple-app-store-settlement-and-the-expansion-of-government-facial-recognition-software" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s5-e7-apple-s-spyphone-an-apple-app-store-settlement-and-the-expansion-of-government-facial-recognition-software" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s5-e7-apple-s-spyphone-an-apple-app-store-settlement-and-the-expansion-of-government-facial-recognition-software" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s5-e7-apple-s-spyphone-an-apple-app-store-settlement-and-the-expansion-of-government-facial-recognition-software" alt="DevNews" src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJPvwj98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XOSCOlKI--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s5-e7-apple-s-spyphone-an-apple-app-store-settlement-and-the-expansion-of-government-facial-recognition-software"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devnews/s5-e7-apple-s-spyphone-an-apple-app-store-settlement-and-the-expansion-of-government-facial-recognition-software"&gt;
      &lt;img id="episode-profile-image" alt="S5:E7 - Apple’s #SpyPhone, an Apple App Store Settlement, and the Expansion of Government Facial Recognition Software" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--84VpOv6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3GWkSFQs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Hosts:&lt;/strong&gt; &lt;a class="mentioned-user" href="https://dev.to/saronyitbarek"&gt;@saronyitbarek&lt;/a&gt;
 &amp;amp; &lt;a class="mentioned-user" href="https://dev.to/joshpuetz"&gt;@joshpuetz&lt;/a&gt;
 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Guests:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://twitter.com/@LevAretz"&gt;Yafit Lev-Aretz&lt;/a&gt;, Assistant Professor of Law at Zicklin School of Business, Baruch College, CUNY &lt;/li&gt;
&lt;li&gt;
&lt;a href="http://twitter.com/@anunaykul"&gt;Anunay Kulshrestha&lt;/a&gt;, Doctoral Candidate in Computer Science at Princeton University, Center for Information Technology Policy
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this episode, we talk about the the expansion of government facial recognition software and an Apple App store settlement. Then we speak with Yafit Lev-Aretz, assistant professor of law at Baruch College and the Director of Tech Ethics program at the Zicklin Center for Corporate Integrity, about Apple scanning iCloud images and iMessages for child sexual abuse material. After we speak with Anunay Kulshrestha, Princeton Computer Science doctoral candidate, (whose team built a similar child sexual abuse material scanning system,) about the potential privacy and cybersecurity risks that implementing such a system creates.&lt;/p&gt;

&lt;p&gt;We hope you enjoy this episode of &lt;a href="//dev.to/devnews"&gt;DevNews&lt;/a&gt;!&lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devnews"&gt;follow DevNews&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; &lt;em&gt;— or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Quick Listening Links&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s5-e7-apples-spyphone-an-apple-app-store-settlement/id1525581923?i=1000534086269"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/0xRYRzdKGoWUbRqIjisFvR"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cDovL2ZlZWRzLmNvZGVuZXdiaWUub3JnL2Rldm5ld3NfcG9kY2FzdC54bWw/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZuZXdzLzM5?sa=X&amp;amp;ved=0CAQQkfYCahcKEwiAssLKyOHyAhUAAAAAHQAAAAAQCg"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.stitcher.com/show/devnews/episode/s5-e7-apples-spyphone-an-apple-app-store-settlement-and-the-expansion-of-government-facial-recognition-software-86515056"&gt;Stitcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devnews/s5e7-apples-spyphone-an-DOtvqzxmkhl/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevNews-p1352512/?topicId=165530482"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpods.herokuapp.com/podcasts/devnews/episodes/220"&gt;DEV Pods website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#acknowledgements"&gt;
  &lt;/a&gt;
  &lt;em&gt;Acknowledgements&lt;/em&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Our season five sponsor, &lt;a href="https://scoutapm.com/devnews"&gt;Scout APM&lt;/a&gt; ❤️ &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We hope you enjoy this episode of DevNews!&lt;/p&gt;

</description>
      <category>news</category>
      <category>podcast</category>
    </item>
    <item>
      <title>Provisioning infrastructure on AWS using Azure DevOps</title>
      <author>Arkadiusz Bolewski</author>
      <pubDate>Thu, 02 Sep 2021 23:54:42 +0000</pubDate>
      <link>https://dev.to/aws-builders/provisioning-infrastructure-on-aws-using-azure-devops-3g75</link>
      <guid>https://dev.to/aws-builders/provisioning-infrastructure-on-aws-using-azure-devops-3g75</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;This blog post will cover infrastructure deployment on AWS using CloudFormation in combination with Azure DevOps. &lt;/p&gt;

&lt;p&gt;You might ask, why? There are brilliant Code family tools/solutions/services available on AWS. Moreover, if not the toolset that is already available on the best cloud ;) you could pick up something else. &lt;/p&gt;

&lt;p&gt;The answer is pretty simple - I was forced to using it :). I jumped into the multi-cloud project where the team was already heavily using Azure DevOps, so there was no chance to introduce another CI/CD toolset - I had to align. In this blog post, I want to share my experience and write this 'quick start' guide on how to set up the environment to start deployment of your AWS infrastructure using CloudFormation templates. Maybe you are in the same position as I was.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#azure-devops-project-configuration"&gt;
  &lt;/a&gt;
  Azure DevOps project configuration
&lt;/h1&gt;

&lt;p&gt;If you already have the Azure DevOps project in place, you can skip this part, but if not you please log into the tool and create a new project just like in the picture below. Put a project name and meaningful description. You can also set up additional options like the visibility of your project (public/private) and version control.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P5C2q9Fj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8z4zj0btrioc7df12umb.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P5C2q9Fj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8z4zj0btrioc7df12umb.PNG" alt="Azure DevOps project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After initial project creation, you should create a code repository for your project:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W9r6J3F_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8e46my8z1a5w955wody2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W9r6J3F_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8e46my8z1a5w955wody2.PNG" alt="Azure DevOps Repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next step is to create and configure the pipeline:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HdTPaW3c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wbx36ihixrhn50kvzkvy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HdTPaW3c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wbx36ihixrhn50kvzkvy.PNG" alt="Azure DevOps Pipeline"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You have to decide where your code will be stored. In our case, it will be the "Azure Repos Git" option:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GzRUSo8m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rx8116iii5luz75htie.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GzRUSo8m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7rx8116iii5luz75htie.PNG" alt="Azure DevOps Pipeline settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pick up your code repository created in the previous step:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4JOYOMRp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2ria1y5ec370u18fjgo.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4JOYOMRp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2ria1y5ec370u18fjgo.PNG" alt="Azure DevOps Pipeline settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the next screen, you can decide to create a new pipeline YAML file or select an existing one from your code repository. In this example, I'm choosing the first option:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R4oEH3-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0cco2rhbbmnbif9i34j.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R4oEH3-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0cco2rhbbmnbif9i34j.PNG" alt="Azure DevOps Pipeline settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the last screen, review your newly created pipeline YAML file and hit the save&amp;amp;run button:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N5yoPZDL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6fdxc4xco97kwxr84kc2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N5yoPZDL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6fdxc4xco97kwxr84kc2.PNG" alt="Azure DevOps Pipeline settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; you might end up with a similar error message: &lt;code&gt;No hosted parallelism has been purchased or granted. To request a free parallelism grant, please fill out the following form https://aka.ms/azpipelines-parallelism-request&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It is applicable only for new accounts. You have to visit the link from the error and submit the request form where you have to provide your name, email address, and your Azure DevOps Organization name:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a5d1s76y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bn23myjn2fna94rluuz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a5d1s76y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bn23myjn2fna94rluuz.PNG" alt="Parallelism Request Form"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The reason behind this is as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Over the past few months, the situation has gotten substantially worse, with a high percentage of new public projects in Azure DevOps being used for crypto mining and other activities we classify as abusive. In addition to taking an increasing amount of energy from the team, this puts our hosted agent pools under stress and degrades the experience of all our users – both open-source and paid.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After successful pipeline creation you should see a similar view:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NdiMjuaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zojmsz3h0ldqpnvpgz43.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NdiMjuaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zojmsz3h0ldqpnvpgz43.PNG" alt="Azure DevOps Pipeline"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#installation-of-aws-toolkit-for-azure-devops-extension"&gt;
  &lt;/a&gt;
  Installation of AWS Toolkit for Azure DevOps extension
&lt;/h1&gt;

&lt;p&gt;At the current stage, our project configuration doesn't allow us to work with AWS services. To make this work, we need to install AWS Toolkit for Azure DevOps extension. This extension will add tasks so we can work with AWS services like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Amazon S3&lt;/li&gt;
&lt;li&gt;AWS Elastic Beanstalk&lt;/li&gt;
&lt;li&gt;AWS Elastic Container Registry&lt;/li&gt;
&lt;li&gt;AWS CodeDeploy&lt;/li&gt;
&lt;li&gt;AWS Lambda&lt;/li&gt;
&lt;li&gt;AWS CloudFormation&lt;/li&gt;
&lt;li&gt;Amazon Simple Queue Service&lt;/li&gt;
&lt;li&gt;Amazon Simple Notification Service&lt;/li&gt;
&lt;li&gt;AWS Systems Manager&lt;/li&gt;
&lt;li&gt;AWS Secrets Manager&lt;/li&gt;
&lt;li&gt;AWS CLI&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this chapter, I would like to focus only on necessary steps to make this work, but if you would like to know more about this toolkit, please visit &lt;a href="https://docs.aws.amazon.com/vsts/latest/userguide/welcome.html"&gt;official AWS docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To install the Toolkit, you have to visit the website &lt;a href="https://marketplace.visualstudio.com/items?itemName=AmazonWebServices.aws-vsts-tools"&gt;https://marketplace.visualstudio.com/items?itemName=AmazonWebServices.aws-vsts-tools&lt;/a&gt;&lt;br&gt;
and hit the "Get it free" button:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bHn3RnRs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a65nctksvx1ai3zrne6c.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bHn3RnRs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a65nctksvx1ai3zrne6c.PNG" alt="AWS Toolkit for Azure DevOps extension"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the next screen, choose your Organization and click the "Install" button:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ob0kKWLX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w98xyip6r3v7uvv0dnuo.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ob0kKWLX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w98xyip6r3v7uvv0dnuo.PNG" alt="AWS Toolkit for Azure DevOps extension"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In your pipeline edit view on the right-hand side, you have the 'Tasks' panel. Try to filter it by typing 'AWS'. You should see now additional building blocks related to AWS services that you can use in your pipeline configuration.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZQ1_uOHk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prktbgzjf7e7zukm6ncd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZQ1_uOHk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prktbgzjf7e7zukm6ncd.PNG" alt="Azure DevOps Pipeline tasks"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#set-up-service-connection-to-aws-on-azure-devops"&gt;
  &lt;/a&gt;
  Set up Service Connection to AWS on Azure DevOps
&lt;/h1&gt;

&lt;p&gt;For now, we have DevOps Organization, code repository and some starter pipeline. We still need a service connection between Azure DevOps and our AWS account, where we will deploy our infrastructure. To do this, we can create an IAM user with programmatic access enabled. Please note that the service connection expects long-lived AWS credentials consisting of an access-key and secret-key pair. You can also define Assume Role credentials to scope down the access.&lt;/p&gt;

&lt;p&gt;Navigate to the "Project settings" located on the lower-left side of the screen, next to "Pipelines-&amp;gt;Service connections", and click the "Create service connection". A new panel on the right-hand side should pop up. Chose "AWS" and click "Next":&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--65GDcYkl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pobhwf87ny0oq1fv8224.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--65GDcYkl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pobhwf87ny0oq1fv8224.PNG" alt="Azure DevOps service connection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the next screen, provide connection details. Minimum is Access Key ID and Secret Access Key of your IAM user, but as mentioned earlier, you could use Assume Role credentials as well. When done, click "Save":&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ktjOD0Dp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8m8d7vn8npre4fpqtzgr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ktjOD0Dp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8m8d7vn8npre4fpqtzgr.PNG" alt="Azure DevOps service connection"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#pipeline-file-configuration"&gt;
  &lt;/a&gt;
  Pipeline file configuration
&lt;/h1&gt;

&lt;p&gt;Now it's time to edit the &lt;code&gt;azure-pipelines.yml&lt;/code&gt; file for our CloudFormation deployments. You could use the web interface and tasks added by the AWS Toolkit extension like building blocks or edit it with the code editor of your choice (like VS Code) if you know the syntax.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9iL-dJot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d53oh3f37vq6n3mv90s1.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9iL-dJot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d53oh3f37vq6n3mv90s1.PNG" alt="azure-pipelines.yml"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I will create two tasks:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Upload CloudFormation template to the S3 bucket&lt;/li&gt;
&lt;li&gt;CloudFormation Update/Create stack to deploy the infrastructure&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The code for the first part:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:
- task: S3Upload@1
  inputs:
    awsCredentials: 'AWS'
    regionName: 'eu-west-1'
    bucketName: 'bolewski-cfn'
    sourceFolder: 'source'
    globExpressions: '**'
    targetFolder: 'AWSCommunityBuilders'
    createBucket: true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;General fields:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;trigger&lt;/code&gt; specifies which branches cause a build to run - in our case "master"&lt;br&gt;
&lt;code&gt;pool&lt;/code&gt; agent pool to use - I'm using the default one "ubuntu-latest"&lt;br&gt;
&lt;code&gt;steps&lt;/code&gt; here is the section where our tasks definitions are located&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For the S3 Upload task:&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;awsCredentials&lt;/code&gt; credentials that we've created for service connection&lt;br&gt;
&lt;code&gt;regionName&lt;/code&gt; region of our S3 bucket where we want to upload our CloduFormation template&lt;br&gt;
&lt;code&gt;bucketName&lt;/code&gt; our target S3 bucket name&lt;br&gt;
&lt;code&gt;sourceFolder&lt;/code&gt; from which folder in our code repository we want to move files&lt;br&gt;
&lt;code&gt;globExpressions&lt;/code&gt; basically just filename patterns&lt;br&gt;
&lt;code&gt;targetFolder&lt;/code&gt; prefix (folder) on our S3 bucket where we want to upload files&lt;br&gt;
&lt;code&gt;createBucket&lt;/code&gt; if the bucket doesn't exist shall we create it or not&lt;/p&gt;

&lt;p&gt;There are of course more options, but I highly encourage you to explore them on your own.&lt;/p&gt;

&lt;p&gt;The code for the second task:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- task: CloudFormationCreateOrUpdateStack@1
  inputs:
    awsCredentials: 'AWS'
    regionName: 'eu-west-1'
    stackName: 'AzureDevOpsDemo'
    templateSource: 's3'
    s3BucketName: 'bolewski-cfn'
    s3ObjectKey: 'AWSCommunityBuilders/network.yml'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;awsCredentials&lt;/code&gt; credentials that we've created for service connection&lt;br&gt;
&lt;code&gt;regionName&lt;/code&gt; region where we want to deploy our CloudFormation template&lt;br&gt;
&lt;code&gt;stackName&lt;/code&gt; CloudFormation stack name&lt;br&gt;
&lt;code&gt;templateSource&lt;/code&gt; source location for our template, in this case, it's the S3 bucket&lt;br&gt;
&lt;code&gt;s3BucketName&lt;/code&gt; S3 bucket name&lt;br&gt;
&lt;code&gt;s3ObjectKey&lt;/code&gt; location of our template in the S3 bucket&lt;/p&gt;

&lt;p&gt;After some tweaks, the final code looks like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  credentials: 'AWS'
  region: 'eu-west-1'
  bucket: 'bolewski-cfn'

steps:
- task: S3Upload@1
  inputs:
    awsCredentials: $(credentials)
    regionName: $(region)
    bucketName: $(bucket)
    sourceFolder: 'source'
    globExpressions: '**'
    targetFolder: 'AWSCommunityBuilders'
    createBucket: true

- task: CloudFormationCreateOrUpdateStack@1
  inputs:
    awsCredentials: $(credentials)
    regionName: $(region)
    stackName: 'AzureDevOpsDemo'
    templateSource: 's3'
    s3BucketName: $(bucket)
    s3ObjectKey: 'AWSCommunityBuilders/network.yml'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the results:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--72HnuyNw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0is7ppfpt0lafvdpmr2e.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--72HnuyNw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0is7ppfpt0lafvdpmr2e.PNG" alt="Azure DevOps finalize job"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mhdn_DtJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1l1j5qerja19dcjj8q7w.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mhdn_DtJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1l1j5qerja19dcjj8q7w.PNG" alt="CloudFormation stack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;p&gt;As you can see, deployment of the CloudFormation templates is possible even with tools provided by the competitor cloud provider. If you are stuck with the tools you don't like, don't panic, there is always a solution ;). I highly encourage you to play with it on your own, because nothing can replace the hands-on experience. This was a very simple example build from scratch, but I hope it is useful for you.&lt;/p&gt;

&lt;p&gt;If you have any feedback or question, please put a comment or drop me a message.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>azure</category>
      <category>devops</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>how to install TailwindCSS via NPM (all steps explained)</title>
      <author>Abhi Raj</author>
      <pubDate>Thu, 02 Sep 2021 23:53:04 +0000</pubDate>
      <link>https://dev.to/slimpython/how-to-install-tailwindcss-via-npm-all-steps-explained-2n5o</link>
      <guid>https://dev.to/slimpython/how-to-install-tailwindcss-via-npm-all-steps-explained-2n5o</guid>
      <description>&lt;p&gt;Hey tailwind CSS fans, I know most newcomers use CDN, so I thought of making a quick guide on how to install tailwindCSS via npm so you can use it for your vue or react js project or even HTML files.&lt;br&gt;
for a deatiled in depth tutorial you see &lt;a href="https://www.youtube.com/watch?v=QoI-4Ep3Auo"&gt;this&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first step is to make a folder where the tailwind CSS will reside&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir tailwind_with_npm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;now, go inside the folder&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd .\tailwind_with_npm\
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Now make a package.json file&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Now install tailwindCSS package and some other packages with npm&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -D tailwindcss@latest postcss@latest autoprefixer@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Now create a &lt;code&gt;index.html&lt;/code&gt; file and &lt;code&gt;style.css&lt;/code&gt; file&lt;/p&gt;

&lt;p&gt;Inside the style.css file paste the below code and leave the html page for now&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@tailwind base;
@tailwind components;
@tailwind utilities;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Now the we are going to to generate a fully compiled Tailwind CSS file from style,css&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx tailwindcss -i style.css -o tailwind.css
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Now we are going to use the compiled tailwind.css file inside our index.html, to do that paste the below code in your html file&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset="UTF-8" /&amp;gt;
  &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&amp;gt;
  &amp;lt;link href="tailwind.css" rel="stylesheet"&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p class=”text-red-900”&amp;gt; Hello world &amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Now open the html file in your browser, and if you see the &lt;em&gt;hello world&lt;/em&gt; written in red, congrats tailwind CSS is working fine.&lt;/p&gt;

&lt;p&gt;You may find this video helpful for a better and more in-depth understanding&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QoI-4Ep3Auo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Express + Mongo Simplified</title>
      <author>Keely</author>
      <pubDate>Thu, 02 Sep 2021 23:48:34 +0000</pubDate>
      <link>https://dev.to/spacerambler/express-mongo-simplified-1eki</link>
      <guid>https://dev.to/spacerambler/express-mongo-simplified-1eki</guid>
      <description>&lt;p&gt;&lt;em&gt;More notes I was taking in class to capture the steps to use Mongo DB and express routes... WIP&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;File List: *&lt;/em&gt;&lt;br&gt;
&lt;a href="#"&gt;package.json&lt;/a&gt;&lt;br&gt;
&lt;a href="#"&gt;.env&lt;/a&gt;&lt;br&gt;
&lt;a href="#"&gt;config.js&lt;/a&gt;&lt;br&gt;
&lt;a href="#"&gt;index.js&lt;/a&gt;&lt;br&gt;
&lt;a href="#"&gt;routes.js&lt;/a&gt;&lt;br&gt;
&lt;a href="#"&gt;controller.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Getting started, we are using the zoo database.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Because we have everything installed, Mongo is always running in the background&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#packagejson"&gt;
  &lt;/a&gt;
  package.json
&lt;/h2&gt;

&lt;p&gt;Will need to add the following: &lt;br&gt;
*express&lt;br&gt;
*mongodb&lt;br&gt;
*dotenv&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#env"&gt;
  &lt;/a&gt;
  .env
&lt;/h2&gt;

&lt;p&gt;Copy string from mongosh and add to this file.&lt;br&gt;
Also add the port number here.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#configjs"&gt;
  &lt;/a&gt;
  config.js
&lt;/h2&gt;

&lt;p&gt;Use this file to connect the env with the rest of the application, export&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import dot env from 'dotenv';
dotenv.config();
export default {
port: process.env.PORT || 3000,
db: proces.env.DB_CLIENT_URL
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the port number is not provided in env file, it will default to 3000 (aka short circuit pattern).&lt;/p&gt;

&lt;p&gt;Next, import config into index.js&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#loaderjs"&gt;
  &lt;/a&gt;
  loader.js
&lt;/h2&gt;

&lt;p&gt;Use this to set up the mongo client &amp;amp; export it out.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { MongoClient } from "mongodb";
import config from "./config.js";

const client = new MongoClient(config.db);

client
  .connect()
  .then(() =&amp;gt; {
    console.info("Connected to MongoDB");
  })
  .catch((err) =&amp;gt; {
    console.error("Error starting MongoDB Client");
    process.exit(1);
    // using "1" as exit code because it's not a graceful exit
    // using "0" as exit code because it's a graceful exit
  });

process.on("SIGINT", () =&amp;gt; {
  client.close().then(() =&amp;gt; {
    console.info("MongoDB connection closed");
    process.exit(0);
  });
});

export default client;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#indexjs"&gt;
  &lt;/a&gt;
  index.js
&lt;/h2&gt;

&lt;p&gt;*import&lt;br&gt;
*declare&lt;br&gt;
*get path, call back&lt;br&gt;
*listen&lt;br&gt;
... everything between localhost:3000/ and localhost:3000/api&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#routesjs"&gt;
  &lt;/a&gt;
  routes.js
&lt;/h2&gt;

&lt;p&gt;*import &lt;br&gt;
*declare&lt;br&gt;
*get path, call back&lt;br&gt;
*use&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#controllerjs"&gt;
  &lt;/a&gt;
  controller.js
&lt;/h2&gt;

&lt;p&gt;Creating a method that connects to the database collection we want to use... then import it into routes.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const controller = {
async index()
 {
const animals = await client.db("zoo")
.collection("animals")
.find()
.toArray();
return animals;
}}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;.find creates a cursor that allows us to go into the array and do stuff like filter or sort. &lt;br&gt;
We can pass in a parameter into the index() that will allow us to use the fields in the routes... will need to interpolate using a bracket when calling it. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#routesjs"&gt;
  &lt;/a&gt;
  routes.js
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;create a route that gets all the animals&lt;/em&gt;&lt;br&gt;
&lt;a href="http://localhost:3000/animals"&gt;http://localhost:3000/animals&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import animalsController from "./controller.js"
router.get("/animals", async (_, res)=&amp;gt;{
const animals = await animalsController.index();
res.json(animals);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Create a route that sorts by a field&lt;/em&gt;&lt;br&gt;
&lt;a href="http://localhost:3000/animals?sort=class"&gt;http://localhost:3000/animals?sort=class&lt;/a&gt;&lt;br&gt;
In the route we will add the parameters into the path and then we'll need to interpolate that parameter in the controller.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const controller = {
async index(sortBy)
 {
const animals = await client.db("zoo")
.collection("animals")
.find()
.sort({ name: 1 })
.toArray();
return animals;
}}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then we'll need to update the router to include the sort parameter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import animalsController from "./controller.js"
router.get("/animals", async (req, res)=&amp;gt;{
const animals = await animalsController.index(req.query.sort);
res.json(animals);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#crud-routes"&gt;
  &lt;/a&gt;
  CRUD Routes
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;FROM HERE WE STARTED USING A NEW DATABASE FOR A NOTE TAKER APP&lt;/strong&gt;&lt;br&gt;
Mongo DB is going to create a new collection dynamically. Won't need to set anything up beforehand since we already have everything connected in the .env.&lt;/p&gt;

&lt;p&gt;First, need to add json middleware to index.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import morgan from "morgan"
app.use(morgan("dev"))
app.use(express.json());
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Morgan logs the routes in node&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Mount the routes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import apiRouter from "./router.js"
app.use("/api", apiRouter)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#post"&gt;
  &lt;/a&gt;
  POST
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Starting the post route to create a new note&lt;/em&gt;&lt;br&gt;
&lt;a href="http://localhost:3000/api/"&gt;http://localhost:3000/api/&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.post("/", (req, res)=&amp;gt;{
res.json(req.body);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Practicing iterative coding...&lt;br&gt;
Go back to the controller.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import client from "./loader.js";
export default {
 create(newNote) {
return client.db("noteTaker").collection("notes").insertOne(newNote);
}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add controller to routes file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import noteController from "./controller.js"
router.post("/", (req, res)=&amp;gt;{
const newNote = await noteController.create(req.body);
res.json(req.body);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add in try/catch for errors in the route&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.post("/notes", async (req, res)=&amp;gt;{
try {
const newNote = await noteController.create(req.body);
res.json(req.body);
} catch (error) {
rest.status(400).json(error.message)
}
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#get"&gt;
  &lt;/a&gt;
  GET
&lt;/h3&gt;

&lt;p&gt;Prints all the notes in the database.&lt;/p&gt;

&lt;p&gt;Starting with the routes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.get("/notes", async (req, res) =&amp;gt; {
try {
const notes = await noteController.index();
res.json(notes)
} catch (error) {
res.state(400).json(error.message)}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then add to the controller...&lt;br&gt;
This file is using the mongo db library of methods.&lt;br&gt;
&lt;strong&gt;Link to those methods&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import client from "./loader.js";
export default {
index() {
return notesConnection.find({}).toArray();
},
 create(newNote) {
return client.db("noteTaker").collection("notes").insertOne(newNote);
}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#get"&gt;
  &lt;/a&gt;
  GET
&lt;/h3&gt;

&lt;p&gt;Print 1 note (instead of all the notes)&lt;br&gt;
In the controller we can use .findOne(id)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;show(id) {
return notesConnection.findOne(ObjectId(id));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adding to routes, we'll need to use a dynamic path. We'll also need to add in params&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.get("/notes/:id", async (req, res) =&amp;gt; {
try {
const note = await noteController.show(req.params.id);
res.json(note);
} catch(error) {
res.status(400).send(error);
}
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#delete"&gt;
  &lt;/a&gt;
  DELETE
&lt;/h3&gt;

&lt;p&gt;Delete a note... going to skip the routes since this is a review.&lt;br&gt;
In the controller, we'll need to use .deleteOne and pass in the id as an object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;delete(id) {
 return notesConnection.deleteOne({ _id: ObjectId(id) });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
    </item>
    <item>
      <title>Break into tech via an internship</title>
      <author>Chris Noring</author>
      <pubDate>Thu, 02 Sep 2021 23:34:58 +0000</pubDate>
      <link>https://dev.to/azure/break-into-tech-via-an-internship-2493</link>
      <guid>https://dev.to/azure/break-into-tech-via-an-internship-2493</guid>
      <description>&lt;p&gt;Are you looking to get into tech? Don't know where to start? Start here, with this 3-part module series on everything you need to know to from starting in tech to landing an internship to turning that into a full-time position. &lt;/p&gt;

&lt;p&gt;Here the learning path &lt;a href="https://docs.microsoft.com/en-gb/learn/paths/start-career-in-tech/"&gt;Start a career in tech&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-gb/learn/modules/career-get-noticed/"&gt;Get noticed&lt;/a&gt; Grow your tech skills and learn where and how to network, even as a student&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-gb/learn/modules/career-interview/"&gt;Successful interviewing&lt;/a&gt; prepare for different types of interviews, tech and non tech ones&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-gb/learn/modules/career-growth/"&gt;From intern to full time position&lt;/a&gt;. Grow in your role as an intern, and turn that into a full-time position.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here from &lt;a href="https://www.microsoft.com/en-gb/videoplayer/embed/RE4OPAi?postJsllMsg=true&amp;amp;autoCaptions=en-gb"&gt;Eleanor Lewis&lt;/a&gt;, intern that now works full-time at Microsoft.&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Redux: What is Provider?</title>
      <author>Adriana DiPietro</author>
      <pubDate>Thu, 02 Sep 2021 23:00:45 +0000</pubDate>
      <link>https://dev.to/am20dipi/redux-what-is-provider-236j</link>
      <guid>https://dev.to/am20dipi/redux-what-is-provider-236j</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-we-are-talking-about-provider"&gt;
  &lt;/a&gt;
  Today we are talking about Provider!
&lt;/h2&gt;

&lt;p&gt;✨✨✨&lt;/p&gt;

&lt;p&gt;Provider is a &lt;strong&gt;component&lt;/strong&gt; given to us to use from the &lt;strong&gt;react-redux node package&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We use Provider in order to pass &lt;strong&gt;the store&lt;/strong&gt; as an attribute. By passing the store as an attribute in the Provider component, we are avoiding having to store &lt;strong&gt;the store&lt;/strong&gt; as props. &lt;/p&gt;

&lt;p&gt;As we know, applications can be very complex and extensive, thus having many React components. Provider eases the pain of having to pass the store as props into each component. &lt;strong&gt;&lt;em&gt;This ultimately dries our code, saves time, and eases readability.&lt;/em&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Let's take a look at Provider in action:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//index.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Provider &amp;gt;&lt;/span&gt;&lt;span class="err"&gt;,
&lt;/span&gt;  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see this is a small piece of code. Yet, it encompasses our entire project: every component and all of the state + props in our application. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;See? I told you Provider dries up our code.&lt;/em&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Now let me explain what is happening in this bit of code:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Import Provider component from the 'react-redux' node package. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using ReactDOM.render() we pass in two (2) arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; wrapping our top-level component .&lt;/li&gt;
&lt;li&gt;the HTML element in which we are rendering the first argument. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Provider component wraps our top-level component, so as to say "every child component of your App component will have access to the store".&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We pass our "store" constant to a store attribute. (The creation of our store constant is not pictured). &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;💫💫💫&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vocabulary"&gt;
  &lt;/a&gt;
  Vocabulary
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;the store&lt;/strong&gt;: given to us from Redux; it is the single location where an application's state is stored. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Redux&lt;/strong&gt;: a state management library. &lt;/li&gt;
&lt;li&gt; &lt;strong&gt;component&lt;/strong&gt;: an individual unit of UI given to us by React -- helps to separate concerns + responsibility. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;props&lt;/strong&gt;: data passed from parent component to child component in React. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;node package&lt;/strong&gt;: contains all the files you need for a module. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;module&lt;/strong&gt;: JS libraries with prewritten code that provides us with built in behaviors + methods. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;💫Feel free to ask any questions💫&lt;br&gt;
💫Continue the discussion below💫&lt;/p&gt;

&lt;p&gt;✨Thanks For Reading!✨&lt;/p&gt;

</description>
      <category>redux</category>
      <category>react</category>
      <category>javascript</category>
      <category>statemanagement</category>
    </item>
  </channel>
</rss>
