<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Join Git Commit Show on 27th and 28th &amp; enjoy giveaways worth $100K! </title>
      <author>Saurabh Rai</author>
      <pubDate>Fri, 26 Nov 2021 09:56:49 +0000</pubDate>
      <link>https://dev.to/srbhr/join-git-commit-show-on-27th-and-28th-enjoy-giveaways-worth-100k-3149</link>
      <guid>https://dev.to/srbhr/join-git-commit-show-on-27th-and-28th-enjoy-giveaways-worth-100k-3149</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-day-to-go"&gt;
  &lt;/a&gt;
  üóìÔ∏è 1 day to go
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#join-git-commit-show-now-an-online-live-show-for-developers-to-achieve-mastery-this-weekend-nov-2728-satsun"&gt;
  &lt;/a&gt;
  Join Git Commit Show now, an online live show for developers to achieve mastery. This weekend Nov 27-28, Sat-Sun.
&lt;/h2&gt;

&lt;p&gt;Register now for free: &lt;a href="https://gitcommit.show/"&gt;gitcommit.show&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What to expect? üëâ&lt;/p&gt;

&lt;p&gt;üßë‚Äçüíª &lt;strong&gt;6x Masterclass sessions&lt;/strong&gt;: Learn from engineers and researchers via live &amp;amp; interactive talk. Covering topics such as git, web development, quantum computing, accessibility, automation, reactjs, kubernetes, etc.&lt;/p&gt;

&lt;p&gt;üíº &lt;strong&gt;6x CareerTalk sessions&lt;/strong&gt;: Witness experienced leaders sharing their journey of choosing different career paths and how they navigated their challenges. Covering topics such as - publishing book, data journalism, personal branding, research publications and more career hacks.&lt;/p&gt;

&lt;p&gt;üíª &lt;strong&gt;6x Showcase sessions&lt;/strong&gt;: Learn what's latest in tech and learn how these innovators solved different engineering challenges. You'll have to be there at the online conference on Sun morning to know what's in there.&lt;/p&gt;

&lt;p&gt;üí∞ &lt;strong&gt;$100k worth giveaways&lt;/strong&gt;: Exclusive rewards for developers. From swags to cloud credits for deploying your next server or training your next ML model.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cQ2XNbxH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kv86vdf649tttlhjviho.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cQ2XNbxH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kv86vdf649tttlhjviho.png" alt="Image description" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Free Bootstrap Button Generators</title>
      <author>Sajan</author>
      <pubDate>Fri, 26 Nov 2021 09:43:58 +0000</pubDate>
      <link>https://dev.to/sajanmangattu/free-bootstrap-button-generators-26i9</link>
      <guid>https://dev.to/sajanmangattu/free-bootstrap-button-generators-26i9</guid>
      <description>&lt;p&gt;Bootstrap button generator tools helps developers to create buttons with different shapes, colors, and sizes without any programming knowledge. The tool selects the appropriate button for the developer‚Äôs needs and generates the code to get it done.&lt;/p&gt;

&lt;p&gt;There are many advantages of making use of these tools. One major benefit is that it saves time by automatically selecting the appropriate size, shape, color or icon for a particular button according to developer‚Äôs needs.&lt;/p&gt;

&lt;p&gt;Custom bootstrap buttons are time consuming job in setting up and in development. These tools make the job lot easier and faster in creating custom bootstrap buttons in no time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cssauthor.com/free-bootstrap-button-generators/"&gt;https://cssauthor.com/free-bootstrap-button-generators/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Fully Isolating Resources in a Multi-Tenant SaaS on Google Cloud using a Token Vending Machine</title>
      <author>Brian Burton</author>
      <pubDate>Fri, 26 Nov 2021 09:22:45 +0000</pubDate>
      <link>https://dev.to/brianburton/fully-isolating-resources-in-a-multi-tenant-saas-on-google-cloud-using-a-token-vending-machine-f25</link>
      <guid>https://dev.to/brianburton/fully-isolating-resources-in-a-multi-tenant-saas-on-google-cloud-using-a-token-vending-machine-f25</guid>
      <description>&lt;p&gt;If you're building a multi-tenant SaaS, securely isolating customer data not only from other customers but from your own developers is a conversation that you'll have sooner or later.  Here at &lt;a href="https://skribe.ai"&gt;Skribe&lt;/a&gt; our customers' data is highly confidential and we go to extreme efforts to protect it both from inadvertent exposure caused by software bugs and internal access by employees unless absolutely necessary.&lt;/p&gt;

&lt;p&gt;For a hybrid pool/silo architecture like Skribe's, my favorite security strategy to achieve this is one that AWS promotes known as the &lt;a href="https://aws.amazon.com/blogs/apn/isolating-saas-tenants-with-dynamically-generated-iam-policies/"&gt;Token Vending Machine&lt;/a&gt; that leverages IAM to isolate customer data.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uFt69bfy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hs9wc9xhaq72celc4qq9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uFt69bfy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hs9wc9xhaq72celc4qq9.png" alt="Example of the Token Vending Machine" width="880" height="599"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Essentially an authorized user &lt;em&gt;(1)&lt;/em&gt; makes an API request through the API Gateway &lt;em&gt;(2)&lt;/em&gt;, which calls a custom authorizer to validate the credentials and generate a dynamic IAM policy &lt;em&gt;(3)&lt;/em&gt;. The dynamic IAM policy is passed to the handler function &lt;em&gt;(4)&lt;/em&gt; that locks all further processes into a specific set of resources &lt;em&gt;(5)&lt;/em&gt;.  The elegance of this solution is that it removes the burden of handling tenant security from the developers' hands and moves it down to the platform level. The threat of inadvertently exposing tenant data even at the hands of a malicious developer is almost completely mitigated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;Skribe is a primarily built on Google Cloud in a hybrid pooled/siloed architecture, and for what felt like an eternity, I'd been researching methods to implement this same strategy on GCP.  It had seemed impossible given the limitations of their managed services.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Endpoints and API Gateway don't support custom authorizers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dynamically generated IAM policies aren't supported.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The proposed solutions you'll find on StackOverflow, Reddit and even GCP's own whitepapers all basically say the same thing: "Tenant security should be handled at the app level."&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Yuck!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But after days of trial and error, we found a solution that gives us the highly secure tenant isolation we needed on Google Cloud!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wN6gRXDX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvzsmc20goa0htpojaks.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wN6gRXDX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvzsmc20goa0htpojaks.png" alt="Strategy to fully isolate tenants in an multi-tenant environment on Google Cloud using a Token Vending Machine" width="856" height="791"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similarly as before, the user in Tenant A &lt;em&gt;(1)&lt;/em&gt; makes an authorized request to list the users in their tenant &lt;em&gt;(2)&lt;/em&gt;. The API Gateway passes that to the &lt;code&gt;UsersEndpoint&lt;/code&gt; service &lt;em&gt;(3)&lt;/em&gt; that has no inherit permission to access any database, so it passes the user's auth token to the &lt;code&gt;TokenVendingMachine&lt;/code&gt; &lt;em&gt;(4)&lt;/em&gt;. The &lt;code&gt;TokenVendingMachine&lt;/code&gt; validates the token and based on the custom claims retrieves the tenant's Service Account key file from our secure bucket &lt;em&gt;(5)&lt;/em&gt; and returns it to the &lt;code&gt;UsersEndpoint&lt;/code&gt; service.  Finally we can call our database using the key file &lt;em&gt;(6)&lt;/em&gt; and return the results to the user.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-1-onboarding"&gt;
  &lt;/a&gt;
  Step 1: Onboarding
&lt;/h4&gt;

&lt;p&gt;When a new tenant is created, a tenant-specific Service Account is asynchronously created and the JSON key file is stored in a highly-secured bucket containing tenant key files.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-2-authentication"&gt;
  &lt;/a&gt;
  Step 2: Authentication
&lt;/h4&gt;

&lt;p&gt;We use the Identity Platform with multi-tenancy enabled to authenticate users.  When a user logs in they exchange their initial token with a custom token containing custom claims such as the user's tenant and role, and that custom token is sent with every subsequent request.&lt;/p&gt;

&lt;p&gt;Those custom claims look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  tn: 'tn-xyz987',
  rl: 'editor',
  rg: 1,
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The claims identify the user's tenant, their role and the region that their data resides in.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-3-api-requests"&gt;
  &lt;/a&gt;
  Step 3: API Requests
&lt;/h4&gt;

&lt;p&gt;When a user's authenticated request hits the API Gateway, it's sent to a Cloud Run service that runs our API.  The database and storage buckets are abstracted behind like-named services and require a valid JSON key file in order to access any resource.&lt;/p&gt;

&lt;p&gt;So if a user requests a list of users within their tenant, the API's code can be as simple as this pseudocode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.run('/users', (res: Request, res: Response) =&amp;gt; {
  // Create a new instance of our TokenVendingMachine class
  const tvm = new TokenVendingMachine();

  // Request the key file using the user's auth token
  tvm.get(req.headers.authorization)
    .then(async (key: Credentials) =&amp;gt; {
      // The tenant's database name has been embedded in the key
      const db = new Database(key);

      const rows = await db.query("SELECT ...");

      res.json(rows);
    })
    .catch((e: any) =&amp;gt; res.status(403));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Main Takeaway:&lt;/strong&gt; The developers can write code as if this is a single-tenant environment!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-know-what-youre-going-to-say"&gt;
  &lt;/a&gt;
  I know what you're going to say...
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Why not issue short lived service account credentials?&lt;/strong&gt;&lt;br&gt;
Latency. Retrieving an existing key file from a GCS bucket is extremely fast compared to requesting new credentials on each request. Sure you could cache those short-lived credentials, but it creates a new set of problems of storing those securely if your goal is total isolation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why not use the Secrets Manager to store the key files?&lt;/strong&gt;&lt;br&gt;
In a word, cost.  At $0.03 per 10,000 operations the costs will add up fast for an API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Isn't a storage bucket full of key files dangerous?&lt;/strong&gt;&lt;br&gt;
Not if properly secured.  The &lt;code&gt;TokenVendingMachine&lt;/code&gt; service has read only access to all objects in that bucket and another service that generates the key file during the onboarding process has write access. There's also have a backend service that regularly cycles the keys so that they don't live on in perpetuity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;What's important is that by separating tenant security from the app level, we achieve reliable, secure storage and access of our customers' data while removing the responsibility of tenant security from our developers' hands.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Laravel ( WhereRaw HavingRaw OrderByRaw And SelectRaw )</title>
      <author>Morcos Gad</author>
      <pubDate>Fri, 26 Nov 2021 09:22:42 +0000</pubDate>
      <link>https://dev.to/morcosgad/laravel-whereraw-havingraw-orderbyraw-and-selectraw-219n</link>
      <guid>https://dev.to/morcosgad/laravel-whereraw-havingraw-orderbyraw-and-selectraw-219n</guid>
      <description>&lt;p&gt;Let's get started quickly We start with WhereRaw&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;DB&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'products'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;whereRaw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'price &amp;gt; IF(state = "TX", ?, 100)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;havingRaw&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;groupBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'product_id'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;havingRaw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'COUNT(*) &amp;gt; 1'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;orderByRaw&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'created_at'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'2022-01-01'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;orderByRaw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'(updated_at - created_at) desc'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Eloquent selectRaw()&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;selectRaw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'amount + ? as amount_with_bonus'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
     &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;DB&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'amount + 500 as amount_with_bonus'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope you enjoyed the code.&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Readymade Script For Building Fiverr Like Marketplace</title>
      <author>Jhon Muller</author>
      <pubDate>Fri, 26 Nov 2021 08:54:03 +0000</pubDate>
      <link>https://dev.to/jhonmuller8/readymade-script-for-building-fiverr-like-marketplace-cfc</link>
      <guid>https://dev.to/jhonmuller8/readymade-script-for-building-fiverr-like-marketplace-cfc</guid>
      <description>&lt;p&gt;Easily create your online marketplace with our readymade PHP script. Create your Fiverr clone and start earning! ADVANCED MARKETPLACE That's why we've created this Fiverr Clone Script to help you make your freelance marketplace for sellers and buyers.&lt;/p&gt;

&lt;p&gt;This is a revolutionary online business platform where employers search for top talent and hire freelancers for their best skills. This is the online marketplace for freelancers and business people.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.suffescom.com/clone/fiverr-clone-app-development"&gt;Fiverr clone app&lt;/a&gt; has impressive and innovative features. It is a cost and time-effective way to start a business with a small investment. To create your freelance website, use on-demand marketplace software.&lt;/p&gt;

&lt;p&gt;Our Fiverr clone script can be seen in action by entrepreneurs and freelancers who want to create micro-jobs websites and mobile apps.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Fiverr Clone Specs&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The Fiverr Clone allows users to buy and sell job services from the same account. As sellers, they can post gigs (jobs) on the site, and as buyers, they can search for them by category or keyword.&lt;/p&gt;

&lt;p&gt;Using our readymade marketplace script, the buyer can browse the list of gigs they've searched for and view their details. They can put their favorite gigs in a cart and pay via a payment gateway.&lt;/p&gt;

&lt;p&gt;Unlimited Gigs&lt;/p&gt;

&lt;p&gt;Branded script&lt;/p&gt;

&lt;p&gt;Search Filter&lt;/p&gt;

&lt;p&gt;Dashboard AJAX&lt;/p&gt;

&lt;p&gt;Social Media Login&lt;/p&gt;

&lt;p&gt;Wallet Usability&lt;/p&gt;

&lt;p&gt;Receptive web (mobile friendly)&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>JavaScript Object Keys</title>
      <author>Amer Sikira</author>
      <pubDate>Fri, 26 Nov 2021 08:53:53 +0000</pubDate>
      <link>https://dev.to/amersikira/javascript-object-keys-h1</link>
      <guid>https://dev.to/amersikira/javascript-object-keys-h1</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally published on &lt;a href="https://webinuse.com/javascript-object-keys/"&gt;webinuse.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We have already mentioned JavaScript Object Keys when we spoke about &lt;a href="https://webinuse.com/object-manipulation-in-javascript/"&gt;Object manipulation in JavaScript&lt;/a&gt;. In this article, we are going to cover &lt;code&gt;Object.keys()&lt;/code&gt; in-depth.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-object"&gt;
  &lt;/a&gt;
  What is the Object?
&lt;/h3&gt;

&lt;p&gt;According to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"&gt;MDN&lt;/a&gt;, the Object class represents one of JavaScript‚Äôs data types. It is used to store various keyed collections and more complex entities. Objects can be created using the Object() constructor or the object initializer / literal syntax.&lt;/p&gt;

&lt;p&gt;The Object is one of the most complex &lt;a href="https://webinuse.com/guide-to-javascript-data-types/"&gt;JavaScript data types&lt;/a&gt;. It can hold any other data type. It can hold functions, also. Here is an example of some objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//The first way of creating Object in JavaScript&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//The second way of creating Object in &lt;/span&gt;
&lt;span class="c1"&gt;//JavaScript using Object constructor.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Obj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Obj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//The third way of creating object in JavaScript &lt;/span&gt;
&lt;span class="c1"&gt;//is by using ES6 object literalls&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;username&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-are-javascript-object-keys"&gt;
  &lt;/a&gt;
  What are JavaScript Object Keys?
&lt;/h3&gt;

&lt;p&gt;Every JavaScript Object consists of keys and values. The key is the ‚Äúname‚Äù by which we can call a value. Let‚Äôs make an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our example, keys are id, name, username, and values are 1, ‚ÄúJohn‚Äù and ‚ÄúDoe‚Äù. But there is a difference between the Object key, which is ‚Äúthe name‚Äù and &lt;code&gt;Object.keys()&lt;/code&gt; method.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-javascript-objectkeys-method"&gt;
  &lt;/a&gt;
  What is JavaScript Object.keys() method?
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Object.keys()&lt;/code&gt; method returns an array of a given object‚Äôs own enumerable property names, iterated in the same order that a normal loop would, as per &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys"&gt;MDN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This means that when we use &lt;code&gt;Object.keys()&lt;/code&gt; it will return an array of strings. Those strings will be the keys of the Object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;//Result:&lt;/span&gt;
&lt;span class="c1"&gt;//(3) ['id', 'name', 'username']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One small thing though is that if the keys are numbers than &lt;code&gt;Object.keys()&lt;/code&gt; will return those number in ascending order, regardless of their order as keys in Object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;One&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;102&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;One hundred and two&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Twenty five&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sixty four&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;//Result:&lt;/span&gt;
&lt;span class="c1"&gt;//(4) ['1', '25', '64', '102']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If there is a mix of letters and numbers then JavaScript Object Keys will firstly return numbers in ascending order, then letters in the order they appeared.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Five&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Letter c&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;One&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Letter a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;//Result:&lt;/span&gt;
&lt;span class="c1"&gt;//(4) ['1', '5', 'c', 'a']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have any questions or anything you can find me on my¬†&lt;a href="https://twitter.com/AmerSikira"&gt;Twitter&lt;/a&gt;, or you can read some of my other articles like &lt;a href="https://webinuse.com/javascript-array-length-the-definitive-guide/"&gt;JavaScript Array length ‚Äì the definitive guide&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Oracle Fusion HCM Online Training</title>
      <author>muralikrishna</author>
      <pubDate>Fri, 26 Nov 2021 08:53:29 +0000</pubDate>
      <link>https://dev.to/muralik529/oracle-fusion-hcm-online-training-1bm5</link>
      <guid>https://dev.to/muralik529/oracle-fusion-hcm-online-training-1bm5</guid>
      <description>&lt;p&gt;Rainbow training institute is the Perfect place to learn Oracle emulsion HCM online training and Oracle Fusion Financials Online Training and numerous further Fusion Courses. It gives complete commercial position Training for both Online and classroom training from the expert coaches in Hyderabad.&lt;/p&gt;

&lt;p&gt;Rainbow Training Institute is Offering the stylish Oracle Fusion HCM Online Training with advanced emulsion operations. We also cover both functional and specialized motifs during the training period. We give training in Fusion Financials, SCM, HCM, PPM and Procurement. Company is promoted by a platoon of educated professionals. Get trained by Experience Certified Experts &amp;amp; give placement Backing.&lt;/p&gt;

&lt;p&gt;Rainbow Training Institute is one of the stylish commercial training institutes in Hyderabad. scholars who are interested to learn course Oracle Fusion HCM Online Training in Kukatpally, JNTU in Hyderabad, our faculty have further than 10 times of real- time experience in tutoring online Classes with tone paced vids for the course Oracle Fusion HCM Online Training in our institute&lt;/p&gt;

&lt;p&gt;Rainbow Training institute is one of the stylish training institutes for the scholars to achieve a job in MNC companies by learning Oracle Fusion HCM Online Training Classes with our expert coaches having further than 10 times of online tutoring experience on Oracle Fusion specialized and functional generalities.&lt;/p&gt;

&lt;p&gt;Oracle Fusion HCM Online Functional Modules&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Oracle Cloud Global HR ( Core HR)&lt;/li&gt;
&lt;li&gt;Oracle Cloud Global Payroll&lt;/li&gt;
&lt;li&gt;Oracle Cloud Absence Operation&lt;/li&gt;
&lt;li&gt;Oracle Cloud Goals Management&lt;/li&gt;
&lt;li&gt;Oracle Cloud Talent Management&lt;/li&gt;
&lt;li&gt;Oracle Cloud Performance Management&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Oracle Fusion HCM Online Technical Modules&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Data Payload (SDL, HDL, PBL, FBL)
.2. HCM Extract Flow and Design&lt;/li&gt;
&lt;li&gt;BI Report process and BI Design&lt;/li&gt;
&lt;li&gt;OTBI Dashboard prepared and OTBI Analysis&lt;/li&gt;
&lt;li&gt;Customize Standard dashboards&lt;/li&gt;
&lt;li&gt;Workflow Configurations&lt;/li&gt;
&lt;li&gt;Blessing process&lt;/li&gt;
&lt;li&gt;Overview of security biographies&lt;/li&gt;
&lt;li&gt;Fast formulas&lt;/li&gt;
&lt;li&gt;Places, duties and previliges.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Course Content&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Oracle Fusion HCM Overview&lt;/li&gt;
&lt;li&gt;Oracle Fusion Applications Overview&lt;/li&gt;
&lt;li&gt;Introducing Oracle Fusion Cloud Service&lt;/li&gt;
&lt;li&gt;Introducing Oracle Fusion Applications stoner Interface.
Oracle Fusion HCM Cloud Service Overview&lt;/li&gt;
&lt;li&gt;Oracle Fusion HCM Cloud Service doctoring and upgrades&lt;/li&gt;
&lt;li&gt;Oracle Cloud Environment Management&lt;/li&gt;
&lt;li&gt;Fusion Functional setup director (FSM)&lt;/li&gt;
&lt;li&gt;Oracle Cloud Provisory programs&lt;/li&gt;
&lt;li&gt;Oracle Cloud Disaster Recovery Objects&lt;/li&gt;
&lt;li&gt;How to work on Oracle SAAS&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Oracle Fusion Global HR&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Manage Enterprise Strucrures Congiguration (ESC)&lt;/li&gt;
&lt;li&gt;Manage Topographies and HCM information&lt;/li&gt;
&lt;li&gt;Manage Reference data sets&lt;/li&gt;
&lt;li&gt;Manage Action Reasons&lt;/li&gt;
&lt;li&gt;Manage Payroll Statutory unit&lt;/li&gt;
&lt;li&gt;Manage Departments, Organizations perm
.7. Manage grade rates and graduation&lt;/li&gt;
&lt;li&gt;Manage jobs and positions&lt;/li&gt;
&lt;li&gt;Manage person and assignment types&lt;/li&gt;
&lt;li&gt;Hire an Hand&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Oracle Fusion Global Payroll&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Overview of Payroll&lt;/li&gt;
&lt;li&gt;Manage crucial flex fields&lt;/li&gt;
&lt;li&gt;Payroll going overview&lt;/li&gt;
&lt;li&gt;Cost allocation crucial flex field overview&lt;/li&gt;
&lt;li&gt;Understanding the cost Hierarchy&lt;/li&gt;
&lt;li&gt;Manage legal address and authorities&lt;/li&gt;
&lt;li&gt;Setting up global payroll&lt;/li&gt;
&lt;li&gt;Payroll rudiments groups&lt;/li&gt;
&lt;li&gt;Managing Earnings and Deductions&lt;/li&gt;
&lt;li&gt;Creating and Managing fast Formulas&lt;/li&gt;
&lt;li&gt;Understanding Fast Formula Components&lt;/li&gt;
&lt;li&gt;Managing Balance Delineations and Feeds&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Oracle Fusion Technical Agenda&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Oracle Fusion Technical Overview&lt;/li&gt;
&lt;li&gt;Overview of Data Loaders (SDL, PBL, HDL, FBL)
.3. Data lading (inbound)&lt;/li&gt;
&lt;li&gt;Data Birth (outbound)&lt;/li&gt;
&lt;li&gt;OTBI AND BI Report process&lt;/li&gt;
&lt;li&gt;Workflow configuration&lt;/li&gt;
&lt;li&gt;Blessing Processes&lt;/li&gt;
&lt;li&gt;Fusion SOAP Web Services&lt;/li&gt;
&lt;li&gt;Fast formulas and Sandbox&lt;/li&gt;
&lt;li&gt;HCM Extract Flow and BI design.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;OUR TECHNICAL Coaches ARE&lt;br&gt;
Well Endured in both styles Offline and Online Styles.&lt;br&gt;
Professionally good for tutoring Oracle Fusion HCM&lt;br&gt;
Both theorytically and virtually well expertised.&lt;/p&gt;

&lt;p&gt;See More: &lt;a href="https://www.rainbowtraininginstitute.com/oracle-fusion-functional-training/oracle-fusion-hcm-training/oracle-fusion-hcm-online-training"&gt;https://www.rainbowtraininginstitute.com/oracle-fusion-functional-training/oracle-fusion-hcm-training/oracle-fusion-hcm-online-training&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Using JSDoc to write better JavaScript Code</title>
      <author>Ingo Steinke</author>
      <pubDate>Fri, 26 Nov 2021 08:28:30 +0000</pubDate>
      <link>https://dev.to/ingosteinke/using-jsdoc-to-write-better-javascript-code-17a</link>
      <guid>https://dev.to/ingosteinke/using-jsdoc-to-write-better-javascript-code-17a</guid>
      <description>&lt;p&gt;Using &lt;a href="https://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt; consistently offers a lot of benefits, especially for writing clean code to prevent unnecessary bugs and errors. But it takes some time and effort to learn, and you have to adapt every code snippet after copy-pasting from a tutorial or a StackOverflow example (especially true for back-end code using Node, Express and Mongoose like I did for a &lt;a href="https://dev.to/ingosteinke/building-a-reading-list-web-app-with-node-preact-and-tailwind-css-44pa"&gt;full-stack web app side project&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alternatives-to-typescript"&gt;
  &lt;/a&gt;
  Alternatives to TypeScript
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Popular, but unhelpful, alternative: don't care at all.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use &lt;a href="https://eslint.org"&gt;eslint&lt;/a&gt;, but that's not an alternative, you should lint your code anyway and benefit from (mostly) helpful hints and warnings.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://reactjs.org/docs/typechecking-with-proptypes.html"&gt;ReactPropTypes&lt;/a&gt; adds some type checking to ECMAScript / JavaScript in React applications, but PropTypes are merely footnotes, placed far away from where they would be most useful, but still bloating your code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tyXM0_OD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqvq8jwf73jucyf7r2p3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tyXM0_OD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqvq8jwf73jucyf7r2p3.png" alt="PropTypes example with an unhappy emoji and critical handwritten notes reading: merely a footnote below?" width="572" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;enter &lt;strong&gt;JSDoc&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#jsdoc"&gt;
  &lt;/a&gt;
  JSDoc
&lt;/h2&gt;

&lt;p&gt;Often overlooked, never even heard of until now, &lt;a href="https://jsdoc.app/"&gt;JSDoc&lt;/a&gt; deserves more attention, as it brings a lot of advantages out of some short lines of documentation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-documentation"&gt;
  &lt;/a&gt;
  Code Documentation
&lt;/h3&gt;

&lt;p&gt;That's JSDoc's original purpose: generating a code / API documentation out of a few lines placed before variables, functions, and classes.&lt;/p&gt;

&lt;p&gt;Similar approaches have been used with Java and PHP for a long time, and JSDoc follows established practice and is quite easy to learn.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hints-and-code-completion"&gt;
  &lt;/a&gt;
  Hints and Code Completion
&lt;/h3&gt;

&lt;p&gt;Using JSDoc inside a modern IDE, you'll get another benefit: live code inspection, warnings, and proper code completion even for the most obscure DOM methods you never knew about before.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tZrfRePf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o65lra697a5k7tzv69p3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tZrfRePf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o65lra697a5k7tzv69p3.png" alt="Screenshot of annotated code with method hints in PhpStorm IDE" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is a simple example: &lt;/p&gt;

&lt;p&gt;I wanted to make allow a modal dialog to be closed typing the Escape key, and my first quick code-like-it's-1999-style script was frowned upon by eslint.&lt;/p&gt;

&lt;p&gt;So I decided to write proper, modern code, but still plain "vanilla JS" that does not need a transpiler to produce working code (unlike TypeScript, which is does not even have native support in Microsoft's Edge browser).&lt;/p&gt;

&lt;p&gt;I wrote a function that takes two arguments: an event, and an optional DOM element so that we are able to close a specific modal dialog from outside without relying on the event context.&lt;/p&gt;

&lt;p&gt;Add a JSDoc comment before, it becomes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * close an open modal dialog
 * @param {MouseEvent} event
 * @param {HTMLElement=} elementToClose
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;modalClose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;modalClose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elementToClose&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;telling our readers (of this code, and of a possible, automatically generated, documentation / API reference) what the function is supposed to do, and what arguments it expects:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@param {MouseEvent} event&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We don't even have to look up the proper event type!&lt;/p&gt;

&lt;p&gt;My IDE (PhpStorm) has some suggestions for code completion even in this special kind of comment, suggesting &lt;code&gt;MouseEvent&lt;/code&gt; on top of the list.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GRdwTSbL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6k16uji5u3ka4t6c3w2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GRdwTSbL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6k16uji5u3ka4t6c3w2.png" alt="Screenshot showing a dropdown with suggested type annotations" width="880" height="451"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The syntax is rather simple.&lt;/p&gt;

&lt;p&gt;Annotations blocks are special comments that start with a slash and a double asterisk &lt;code&gt;/**&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A parameter hint starts with an at sign, the word "param", and a type definition inside curly braces, followed by the parameter's name.&lt;/p&gt;

&lt;p&gt;To mark an optional parameter, add an equals sign behind the type, like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;param&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;HTMLElement&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;elementToClose&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;but to be more clear to human readers, we can also add anything behind the parameter's name, like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;param&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;HTMLElement&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;elementToClose&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;optional&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;DOM&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;should&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;closed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;CSS&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now my editor shows me type annotation, that are not part of my written code (unlike they would be in TypeScript) but rather implicitly follow from my code. So my actual code stays short and compact, while the implicit meaning is still more obvious than before.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#assistance-for-lazy-developers"&gt;
  &lt;/a&gt;
  Assistance for Lazy Developers
&lt;/h3&gt;

&lt;p&gt;Not only do we see the additional hint &lt;code&gt;event: MouseEvent&lt;/code&gt;, but when we start using the &lt;code&gt;event&lt;/code&gt; in our code below, there are more code suggestions, helping us to choose methods and properties that are actually available and not deprecated.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XjNUgKuj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zul8g46vxu3cfzkdseux.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XjNUgKuj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zul8g46vxu3cfzkdseux.png" alt="Image showing code completion suggestions for 'event.' in PhpStorm" width="813" height="387"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More assistance as we continue: hints and documentation everywhere. We don't even have to visit &lt;a href="https://developer.mozilla.org/"&gt;MDN&lt;/a&gt; in our browser anymore!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--67LiHjDf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xsadm8d4rwn9l7d77h61.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--67LiHjDf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xsadm8d4rwn9l7d77h61.png" alt="Screenshot showing documentation for event.currentTarget.closest" width="840" height="514"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;JSDoc makes coding in JavaScript easier, helping us to code quickly while avoiding obvious errors, just by adding some lines of optional comments in our code.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to Create and deploy Lambda function on AWS with CDK and API endpoint to Lambda</title>
      <author>Abdul Waqar</author>
      <pubDate>Fri, 26 Nov 2021 08:10:35 +0000</pubDate>
      <link>https://dev.to/abdulwaqar844/how-to-create-lambda-function-on-aws-with-cdk-and-api-endpoint-to-lambda-3eca</link>
      <guid>https://dev.to/abdulwaqar844/how-to-create-lambda-function-on-aws-with-cdk-and-api-endpoint-to-lambda-3eca</guid>
      <description>&lt;h3&gt;
  &lt;a href="#1what-is-aws-and-cdk-"&gt;
  &lt;/a&gt;
  1.What is AWS and CDK ?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="'https://aws.amazon.com/what-is-aws/'"&gt;Amazon Web Services&lt;/a&gt; (AWS) is the world‚Äôs most comprehensive and broadly adopted scaleable cloud platform. AWS offering over 200 fully featured services from data centers globally. Millions of customers‚Äîincluding the fastest-growing startups, largest enterprises, and leading government agencies‚Äîare using AWS to lower costs, become more agile, and innovate faster.&lt;br&gt;
The &lt;a href="'https://aws.amazon.com/cdk'"&gt;AWS Cloud Development Kit&lt;/a&gt; (AWS CDK) is an open source software development framework to define your cloud application resources using familiar programming languages.CDK is used to define structure of our application as Code. We can call it Infrastructure as Code which is best for scaleable&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2lambda-function"&gt;
  &lt;/a&gt;
  2.Lambda Function
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://aws.amazon.com/"&gt;AWS Lambda&lt;/a&gt;&lt;/strong&gt;  is a serverless, event-driven compute service that lets you run code for virtually any type of application or backend service without provisioning or managing servers. You can trigger Lambda from over 200 AWS services and software as a service (SaaS) applications, and only pay for what you use.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3amazon-api-gateway"&gt;
  &lt;/a&gt;
  3.Amazon API Gateway
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="'https://aws.amazon.com/api-gateway/'"&gt;AWS API Gateway&lt;/a&gt;&lt;/strong&gt; is a fully managed service that makes it easy for developers to create, publish, maintain, monitor, and secure APIs at any scale. APIs act as the main communication gateway for applications to access data,apply business logic, or functionality from your backend services. Using API Gateway, you can create RESTful APIs and WebSocket APIs that enable real-time two-way communication applications. API Gateway supports containerized and serverless workloads, as well as web applications.&lt;/p&gt;

&lt;p&gt;API Gateway handles all the tasks involved in accepting and processing up to hundreds of thousands of concurrent API calls, including traffic management, CORS support, authorization and access control, throttling, monitoring, and API version management. API Gateway has no minimum fees or startup costs. You pay for the API calls you receive and the amount of data transferred out and, with the API Gateway tiered pricing model, you can reduce your cost as your API usage scales. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lets-write-code-for-lambda-function"&gt;
  &lt;/a&gt;
  &lt;em&gt;Lets write code for Lambda Function&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Before deploying code to AWS Clouds we need to configure our AWS profile with our development envoirnment. I have written step by step guide how to configure AWS profile and deploy simple helloWorld Application. If you are begginer then before writing lambda code &lt;a href="'https://dev.to/abdulwaqar844/a-beginner-s-guide-to-configure-aws-cdk-and-deploy-hello-world-app-54ll'"&gt;Read basic Guide here &lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#note-in-this-artical-we-will-use-typescript-language-to-write-application-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Note&lt;/strong&gt; :  &lt;em&gt;In this artical we will use Typescript language to write Application Code&lt;/em&gt;
&lt;/h5&gt;
&lt;h2&gt;
  &lt;a href="#steps-to-write-amp-compile-the-code"&gt;
  &lt;/a&gt;
  Steps to write &amp;amp; compile the code
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  step 1
&lt;/h3&gt;

&lt;p&gt;make a new folder for your cdk project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;hello_lambda_with_apigatway
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  step 2
&lt;/h3&gt;

&lt;p&gt;intialize your cdk project in typescript by running the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk init app --language typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  step 3
&lt;/h2&gt;

&lt;p&gt;run the following command to build your ts files in real-time. This process needs to keep running in the background so it is best if you run it in a seperate terminal. If you don't want to watch application build process at real time you can skip this step and after writing code make a build before deploying.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run watch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  step 4
&lt;/h2&gt;

&lt;p&gt;Initialize your lambda function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@aws-cdk/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@aws-cdk/aws-lambda&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;apigw&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@aws-cdk/aws-apigateway&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;HelloLambdaStack&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stack&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Construct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StackProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;HelloHandler&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODEJS_10_X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromAsset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lambda&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello.handler&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me explain this code. we have created a class HelloLamdaStack in which we have initialized our lambda funtion and API Gateway. In this code we have declared that we will use  Nodejs 10  version and code of our lambda funtion is exist in lambda folder at root directory and name of our lambda function is hello.&lt;br&gt;
Also update code of &lt;code&gt;/bin/&lt;/code&gt; . Code in this file will create a New Stack for lambda function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;source-map-support/register&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@aws-cdk/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;HelloLambdaStack&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../lib/step01_hello_lambda-stack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Step01HelloLambdaStack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;HelloLambdaStack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
typescript&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-5"&gt;
  &lt;/a&gt;
  step 5
&lt;/h3&gt;

&lt;p&gt;add the handler code for your lambda in lambda/hello.ts&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;APIGatewayProxyEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;APIGatewayProxyResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-lambda&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;APIGatewayProxyEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;APIGatewayProxyResult&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;request:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text/plain&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Hello, CDK! You've hit &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;\n`&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we call endpoint to this lambda function our function will return "Hello, CDK! You've hit ${event.path}".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-6"&gt;
  &lt;/a&gt;
  step 6
&lt;/h2&gt;

&lt;p&gt;Installing Bootstrap Stack. &lt;br&gt;
For Lambda functions we will need to do &lt;a href="https://docs.aws.amazon.com/cdk/latest/guide/bootstrapping.html"&gt;bootstrapping&lt;/a&gt; becuase they require &lt;a href="https://docs.aws.amazon.com/cdk/latest/guide/assets.html"&gt;assets&lt;/a&gt; i.e. handler code that will be bundleded with the CDK library etc. and stored in S3 bootstraped bucket:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk bootstrap
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-7-optional"&gt;
  &lt;/a&gt;
  Step 7 (optional)
&lt;/h2&gt;

&lt;p&gt;Run the following command to see the cloud formation template of your cdk code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk synth
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-8-optional"&gt;
  &lt;/a&gt;
  Step 8 (optional)
&lt;/h2&gt;

&lt;p&gt;Run the following command to see the difference between the new changes that you just made and the code that has already been deployed on the cloud.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk diff
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-9"&gt;
  &lt;/a&gt;
  Step 9
&lt;/h2&gt;

&lt;p&gt;Run the following command to deploy your code to the cloud.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if you did not run "npm run watch" in the step 4 then you need to build the project before deployment by running the folliwng command. npm run build will also compile typescript files of the lambda function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run build &amp;amp;&amp;amp; cdk deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-10"&gt;
  &lt;/a&gt;
  step 10
&lt;/h2&gt;

&lt;p&gt;Now test the function in AWS Lambda Console (make sure you are in the correct region):&lt;br&gt;
&lt;a href="https://console.aws.amazon.com/lambda/home#/functions"&gt;https://console.aws.amazon.com/lambda/home#/functions&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-11"&gt;
  &lt;/a&gt;
  step 11
&lt;/h2&gt;

&lt;p&gt;Next step is to add an API Gateway in front of our function. Install the dependency: npm install @aws-cdk/aws-apigateway&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;new apigw.LambdaRestApi(this, "Endpoint", {
      handler: hello,
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-12"&gt;
  &lt;/a&gt;
  step 12
&lt;/h2&gt;

&lt;p&gt;deploy again&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cdk deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-13"&gt;
  &lt;/a&gt;
  step 13
&lt;/h2&gt;

&lt;p&gt;Get the URL from the output and test it using curl or paste the url in browser:&lt;/p&gt;

&lt;p&gt;curl &lt;a href="https://xxxxxx.execute-api.us-east-2.amazonaws.com/prod/"&gt;https://xxxxxx.execute-api.us-east-2.amazonaws.com/prod/&lt;/a&gt;&lt;br&gt;
üòä Congratulation ! You have successfully deployed your first Lambda Function and API Gateway to call Lambda Function on AWS Cloud.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>typescript</category>
      <category>serverless</category>
      <category>cloudskills</category>
    </item>
    <item>
      <title>Features of clean code architecture | Node.js</title>
      <author>DhiWise</author>
      <pubDate>Fri, 26 Nov 2021 08:01:31 +0000</pubDate>
      <link>https://dev.to/dhiwise/features-of-clean-code-architecture-nodejs-1big</link>
      <guid>https://dev.to/dhiwise/features-of-clean-code-architecture-nodejs-1big</guid>
      <description>&lt;p&gt;Goal: Make our code resilient against changes over time&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8EolZ5bf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/1%2Addura25okCbtOt9PsKfv9Q.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8EolZ5bf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/1%2Addura25okCbtOt9PsKfv9Q.jpeg" alt="" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-brief-introduction-to-architecture"&gt;
  &lt;/a&gt;
  A brief introduction to architecture
&lt;/h2&gt;

&lt;p&gt;Software architecture is primarily the structure of the software components to be arranged in a purposeful and efficient system. The goal of software architecture is to minimize the human effort required to build and maintain software systems. One of the most effort-consuming processes in the software development cycle is to accommodate change. In software development, the primary method of handling change in the system is to create a separation of concerns between the layers of your software. This is where the Clean code architecture, created by &lt;a href="https://twitter.com/unclebobmartin"&gt;Robert Cecil Martin&lt;/a&gt; (a.k.a Uncle Bob), shines.&lt;/p&gt;

&lt;p&gt;Following are the benefits of implementing a clean code architecture with snippets from a node application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#framework-independence"&gt;
  &lt;/a&gt;
  Framework independence
&lt;/h2&gt;

&lt;p&gt;Using the framework for a lot of operations can easily make our code heavily dependent on the framework we are using. Creating a tight coupling between our code and the underlying framework leads to difficulty in changing the framework in the future. For example, if you want to move from ‚Äúexpress‚Äù to ‚Äúsails‚Äù&lt;/p&gt;

&lt;p&gt;To resolve this :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We limit our dependability on the framework, as much as possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We do this by using an &lt;em&gt;adapter design pattern&lt;/em&gt; between the framework and our project‚Äôs code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The same approach is used to adapt Response objects as well.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In a MERN stack application, we create an adaptRequest() function to act as an &lt;em&gt;intermediary adapter&lt;/em&gt; between our express framework and application code i.e {code in the inner layers}. Check out my sample snippet below.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#database-independent"&gt;
  &lt;/a&gt;
  Database independent
&lt;/h2&gt;

&lt;p&gt;We use a similar adapter design pattern to make your code {in the inner layers} independent of the database we are using.&lt;/p&gt;

&lt;p&gt;Basically, we can create a DB service interface that consists of all generic database operations. Then implement a DB service for each type of database we want to use in your project. To give an example, suppose we have the requirement to use multiple heterogeneous databases(say DynamoDB and MongoDb) in a single project, we will create Db service for each of the databases we are using and simply pass the Db service(DynamoDbService.js) as a dependency injection to the service(say FileUploadService.js) that needs to perform the operation on that database(DynamoDB).&lt;/p&gt;

&lt;p&gt;You can go a level deeper by passing the dbConnectionInstance as a dependency of the DB service. Thereby enabling you to make/switch DB connections within the project, by simply changing the dbConnectionInstance.&lt;br&gt;
&lt;em&gt;(I suggest doing so only if you have to connect to multiple db instances from a single application.)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoiding-breaking-changes-due-to-third-party-libraries"&gt;
  &lt;/a&gt;
  Avoiding breaking changes due to third party libraries
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Third-party libraries are often the cause of change in a project that has a longer development life span.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Everything from finding a better alternate library to upgrading the existing library may cause the code to be changed and often breaks the code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Again our adapter design pattern can be implemented here to resolve this issue.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We simply create a Service (say ThirdPartyLib.js) and import third-party libraries in it and wrap the third-party function with your own function and append any extra logic if necessary. Then use this, ThirdParyLib.js, library wherever we need to use third-party methods.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#dependency-injection"&gt;
  &lt;/a&gt;
  Dependency injection
&lt;/h2&gt;

&lt;p&gt;Dependency Injection, Dependency Injection, Dependency Injection ‚Äî you have probably heard this word many times by now. But what is dependency injection?&lt;/p&gt;

&lt;p&gt;‚ÄòDependency Injection‚Äô is a 25-dollar term for a 5-cent concept‚Ä¶Dependency injection means giving an object its instance variables. Really. That‚Äôs it. ‚Äî &lt;a href="http://jamesshore.com/v2/blog/2006/dependency-injection-demystified"&gt;[3]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Why do we use dependency injection in the first place?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Creating Testability&lt;br&gt;
Dependency injection is a very useful technique for testing, since it allows dependencies to be mocked or stubbed out. &lt;a href="https://stackoverflow.com/questions/130794/what-is-dependency-injection"&gt;[4]&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Achieving Loose coupling&lt;br&gt;
The obvious benefit of loose coupling is that it provides the flexibility to change our dependencies without modifying the underlying business logic. This provides us with a greater ability to try out newer alternatives both during development as well as during testing without risking the changes in the code of the inner layers.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#creating-clean-code-boilerplate"&gt;
  &lt;/a&gt;
  Creating clean code boilerplate
&lt;/h2&gt;

&lt;p&gt;Although creating projects using clean code architecture has many benefits, creating the boilerplate code has always been an uphill task. The sample code you get online is great for learning purposes; however, creating a real-world application is significantly different from it. An easy way to do that is to use a new online code-generating platform called &lt;a href="https://app.dhiwise.com/"&gt;DhiWise&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can add your models using the table view, click on build app, select clean code architecture from the combo box, and Boom!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J0an7sTy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/5760/1%2AFbI2hH15ZNZIE9mCPBMwiw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J0an7sTy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/5760/1%2AFbI2hH15ZNZIE9mCPBMwiw.png" alt="You can view the generated application‚Äôs code online or dl the source code." width="880" height="487"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bibliography"&gt;
  &lt;/a&gt;
  Bibliography
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=7EmboKQH8lM"&gt;Clean Code ‚Äî Uncle Bob entire series of lectures&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/dev-mastery/comments-api"&gt;Dev mastery‚Äôs clean code architecture demo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/howardmann/clean-node"&gt;Howardamann‚Äôs clean code demo app&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.jamesshore.com/v2/blog/2006/dependency-injection-demystified"&gt;Dependency Injection Demystified&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html"&gt;The clean code blog by Robert C. Martin (Uncle Bob)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/130794/what-is-dependency-injection"&gt;Discussion on DI over stack overflow&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.dhiwise.com/"&gt;Dhiwise-pro code platform&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>showdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>This is really a great shit üí©</title>
      <author>Manu Martinez</author>
      <pubDate>Fri, 26 Nov 2021 07:46:09 +0000</pubDate>
      <link>https://dev.to/whitehatdevv/who-am-i-4n59</link>
      <guid>https://dev.to/whitehatdevv/who-am-i-4n59</guid>
      <description>&lt;h2&gt;
  &lt;a href="#wtf-oh-shit"&gt;
  &lt;/a&gt;
  WTF? Oh, &lt;strong&gt;Shit&lt;/strong&gt; üí©
&lt;/h2&gt;

&lt;p&gt;Yes it's exactly which you have just read, it's completely describe such a &lt;strong&gt;Shit&lt;/strong&gt;, but why?, the question should be why is it called &lt;strong&gt;shit&lt;/strong&gt;?&lt;br&gt;
In this posts I will share you everything you need to known as a developer, I will tell you exactly as I have felt it without skimping anything. üòá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;important&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;If you are not interested please not continue reading&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hey üòÑ, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;important&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#let-me-introduce-it"&gt;
  &lt;/a&gt;
  Let me introduce it üòå
&lt;/h3&gt;

&lt;p&gt;My &lt;em&gt;full name&lt;/em&gt; is Emanuel (&lt;em&gt;you can call me Manu&lt;/em&gt;), I was born in Uruguay but actually I'm located in &lt;strong&gt;Spain&lt;/strong&gt; üá™üá∏, I suppose you think I'm older, but no üòú, at the moment I'm twenty years old, I started coding when I was 14 years old. Maybe you are asking for why I started coding at this age, the answer can be summarise in one word: &lt;br&gt;
&lt;strong&gt;Curiosity&lt;/strong&gt; üòô.  &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-will-this-series-talk-about"&gt;
  &lt;/a&gt;
  What will this series talk about?
&lt;/h3&gt;

&lt;p&gt;It's really important for me, I'm sure you have &lt;strong&gt;already&lt;/strong&gt; heart that developer life is incredible, blah, blah blah ü§ì, a lot of suppositions without any fundament, the &lt;strong&gt;typical&lt;/strong&gt; phrase:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Coding will be you millionaire üí∞.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;All that glitters is not gold&lt;/em&gt;, you have to take into accounts a &lt;strong&gt;couple of things&lt;/strong&gt; you aren't known, really all of us are &lt;strong&gt;ignorant&lt;/strong&gt; ü•∏, we think we know everything, we think we are gifted, but no. I'm overwhelmed about the society's &lt;strong&gt;ignorance&lt;/strong&gt;. Almost people get settle with their lives, making a cyclic and eternal life. I'm here ü§® trying to show you why you shouldn't stop learning, how is exactly a software engineer life? &lt;/p&gt;

&lt;p&gt;Really, let me tell you, you do not have to be &lt;strong&gt;agree with me&lt;/strong&gt; ü•≤, it's only my point of view based in my &lt;em&gt;experience&lt;/em&gt; and &lt;em&gt;knowledge&lt;/em&gt;, this is why I have learnt in 7 years as software engineer, I will be more &lt;strong&gt;transparent&lt;/strong&gt; to you than with my &lt;strong&gt;family&lt;/strong&gt; ü§ê. &lt;/p&gt;

&lt;p&gt;Every &lt;strong&gt;Friday&lt;/strong&gt; I will post a new story in this series talking about all this topics, I recommend you subscribing to the newsletter to get up to date with my &lt;strong&gt;latest post&lt;/strong&gt;. Run this code in your mind:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;postReminder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Reminder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Shit Post üí©&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Manu will release a new post in his story&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urgently&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;everyFriday&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;me&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setReminder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postReminder&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#finally"&gt;
  &lt;/a&gt;
  Finally
&lt;/h2&gt;

&lt;p&gt;I'm here to help you growing in your professional &lt;strong&gt;career&lt;/strong&gt;, if you regarding any question, suggestion or complain please &lt;strong&gt;do not hesitate&lt;/strong&gt; in contact me. I'm very glad in helping you ü§§&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>leadership</category>
    </item>
    <item>
      <title>30 Best Chrome Extensions for Personal Productivity in 2022</title>
      <author>katemay</author>
      <pubDate>Fri, 26 Nov 2021 07:44:35 +0000</pubDate>
      <link>https://dev.to/katemay48947206/30-best-chrome-extensions-for-personal-productivity-in-2022-426</link>
      <guid>https://dev.to/katemay48947206/30-best-chrome-extensions-for-personal-productivity-in-2022-426</guid>
      <description>&lt;p&gt;Having the capability to enhance our online presence and optimize work without extra efforts, Chrome extensions are helpful in achieving a high level of efficiency. In this post, you will find 30 top –°hrome extensions in 10 recommended categories for your personal productivity in 2022: &lt;a href="https://blog.tmetric.com/chrome-productivity-extensions/"&gt;https://blog.tmetric.com/chrome-productivity-extensions/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
    </item>
  </channel>
</rss>
