<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Requests</title>
      <author>Siddharth</author>
      <pubDate>Sun, 16 May 2021 05:22:31 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/requests-3ooi</link>
      <guid>https://dev.to/siddharthshyniben/requests-3ooi</guid>
      <description>&lt;p&gt;Want a new npm package? Request here!&lt;br&gt;
Want a tutorial? Request here!&lt;br&gt;
Want ideas on what to do? Read the comments here!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>🔥 Working of Node.js | Blocking &amp; Non-Blocking Architecture Explained (video)</title>
      <author>The Nerdy Dev</author>
      <pubDate>Sun, 16 May 2021 04:54:22 +0000</pubDate>
      <link>https://dev.to/thenerdydev/working-of-node-js-blocking-non-blocking-architecture-explained-video-74d</link>
      <guid>https://dev.to/thenerdydev/working-of-node-js-blocking-non-blocking-architecture-explained-video-74d</guid>
      <description>&lt;p&gt;In this video, we will understand how Node.js works and then we will understand the difference between the blocking and non-blocking architecture. Node.js as we know is asynchronous and non-blocking and we will understand why this architecture that Node.js uses is better than a conventional blocking architecture.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QtDO5_5ttAE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Follow me on:&lt;br&gt;
👉 Twitter: &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt;&lt;br&gt;
👉 Instagram: &lt;a href="https://instagram.com/thenerdydev"&gt;https://instagram.com/thenerdydev&lt;/a&gt;&lt;br&gt;
👉 YouTube: &lt;a href="https://youtube.com/thenerdydev"&gt;https://youtube.com/thenerdydev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt; - Make sure to subscribe to my YouTube Channel for FREE content on Web Development and loads of other technologies. &lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>100daysofcode</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Zero to Hero: Get started with Open Source Projects</title>
      <author>Tapajyoti Bose</author>
      <pubDate>Sun, 16 May 2021 04:40:10 +0000</pubDate>
      <link>https://dev.to/ruppysuppy/zero-to-hero-get-started-with-open-source-10b7</link>
      <guid>https://dev.to/ruppysuppy/zero-to-hero-get-started-with-open-source-10b7</guid>
      <description>&lt;p&gt;I had been super interested in contributing to &lt;strong&gt;Open Source Projects&lt;/strong&gt; for a long time but didn't have any idea on how to get started. This article is for anyone who wants to get into &lt;strong&gt;Open Source Projects&lt;/strong&gt; development but feels overwhelmed on how to start.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite
&lt;/h1&gt;

&lt;p&gt;You will need basic knowledge of &lt;code&gt;git&lt;/code&gt; to follow along with this article. We will be focusing on &lt;strong&gt;Open Source Projects&lt;/strong&gt; on &lt;strong&gt;GitHub&lt;/strong&gt;, but the same skillset is transferable to any other &lt;code&gt;git&lt;/code&gt; based site like &lt;strong&gt;GitLab&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The first thing to do is &lt;em&gt;Fork&lt;/em&gt; the repository you want to contribute to:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AgWN7BDF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrh8x832a2ylzeoh9j3j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AgWN7BDF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrh8x832a2ylzeoh9j3j.png" alt="Github Fork"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you have a copy of the repository in your &lt;strong&gt;GitHub&lt;/strong&gt; account.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copy the &lt;code&gt;clone&lt;/code&gt; link:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b-Wjk2mX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfhhkuajgl918t1cqy35.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b-Wjk2mX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfhhkuajgl918t1cqy35.png" alt="GitHub Clone Link"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Execute the command:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
  git clone &amp;lt;clone link&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A copy of the repository will be created on your machine. Add &lt;em&gt;Upstream&lt;/em&gt; remote, which is just a fancy name for the source repository, using:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
  git remote add &amp;lt;upstream remote name&amp;gt; &amp;lt;source repository clone link&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now you can modify the code. Make sure to commit all the changes you make.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After committing changes, you can update the source repository using:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
  git push origin &amp;lt;branch name to push changes&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now you can create a &lt;em&gt;Pull Request&lt;/em&gt; in the source repository and the maintainers would review and merge your code.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#how-to-overcome-the-fear-of-starting"&gt;
  &lt;/a&gt;
  How to overcome the fear of starting?
&lt;/h1&gt;

&lt;p&gt;Now that you know how to contribute to &lt;strong&gt;Open Source Projects&lt;/strong&gt;, you might just want to jump right in and contribute to the largest projects on the planet. But I can assure you when you are about to open your first few &lt;em&gt;Pull Request&lt;/em&gt;, &lt;strong&gt;Imposter Syndrome&lt;/strong&gt; will hit you real hard with questions like &lt;em&gt;"Would I be able to do this correctly?"&lt;/em&gt; and &lt;em&gt;"What if I fail?"&lt;/em&gt;. The only antidote to this fear is &lt;strong&gt;ACTION&lt;/strong&gt;! One year ago I was exactly in your shoes, and now I do have a couple of contributions in some amazing repositories:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ez58eqz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gltqercd4zewsvofb85.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ez58eqz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gltqercd4zewsvofb85.PNG" alt="Git Contribution"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you start on this journey and keep putting one foot in front of the other even when challenges and difficulties show up, you will make it! Best of Luck :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uZaFj7tB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bzs4akyew80oy0r8f2j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uZaFj7tB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3bzs4akyew80oy0r8f2j.jpg" alt="You Got This"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h1&gt;

&lt;p&gt;Want to work together? Contact me on &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Connect to me on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.linkedin.com/in/tapajyoti-bose-429a601a0"&gt;LinkedIn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://tapajyoti-bose.vercel.app"&gt;Portfolio&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>opensource</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to write print statement syntax in Java same as C language?</title>
      <author>Keshav Kumar</author>
      <pubDate>Sun, 16 May 2021 04:12:47 +0000</pubDate>
      <link>https://dev.to/keshavcodex/how-to-write-print-statement-syntax-in-java-same-as-c-language-e8i</link>
      <guid>https://dev.to/keshavcodex/how-to-write-print-statement-syntax-in-java-same-as-c-language-e8i</guid>
      <description>&lt;p&gt;There are basically 4 print statements in java,since the most used ones are &lt;br&gt;
System.out.println();&lt;br&gt;
System.out.print();&lt;/p&gt;

&lt;p&gt;but there are 2 more statements, those are&lt;br&gt;
System.out.printf();&lt;br&gt;
System.out.format();&lt;/p&gt;

&lt;p&gt;by using these 2 you will be able to write print statement with syntax same as C language.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>JavaScript Made Easy: Part 14</title>
      <author>David Tetreau</author>
      <pubDate>Sun, 16 May 2021 02:48:51 +0000</pubDate>
      <link>https://dev.to/dtetreau/javascript-made-easy-part-14-10ce</link>
      <guid>https://dev.to/dtetreau/javascript-made-easy-part-14-10ce</guid>
      <description>&lt;p&gt;There are many built-in methods in JavaScript that we can use to make programming easier. For Part 14, we will go over some of the more common string methods. Open up your repl and code along!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#string-methods"&gt;
  &lt;/a&gt;
  String Methods
&lt;/h2&gt;

&lt;p&gt;String methods help you to work with strings. It can save a lot of time! These built-in methods handle tasks much more quickly and efficiently than doing things manually. Here are some important string methods:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#length"&gt;
  &lt;/a&gt;
  .length
&lt;/h3&gt;

&lt;p&gt;This is a method that will return the number of characters in a string. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gorilla&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// logs 7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The .length method checked the animal string and returned its length. Then, the number 7 was logged to the console. This represents the total number of characters in the string. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#indexof"&gt;
  &lt;/a&gt;
  indexOf()
&lt;/h3&gt;

&lt;p&gt;This method tells you the location (index) of the first time specified characters appear in a string. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;light blue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// returns 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method is different from .length because .length returns the total character count, whereas .indexOf returns the index of the first character of the part of the string you're looking for. The indexes in a string start at 0. If the .indexOf method does not find the specified characters in a string, it will return -1. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lastindexof"&gt;
  &lt;/a&gt;
  lastIndexOf()
&lt;/h3&gt;

&lt;p&gt;This method gives you the location (index) of the last time specified characters appear in a string. The number that is returned is the location of the first character of the specified characters which the method is searching for.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shark&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My favorite shark is the Great White Shark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shark&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastIndexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// returns 12&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the lastIndexOf("shark") is case sensitive. Therefore, it returns the index of 12 because that is last time the lowercase version of "shark" appears in the sentence. Also, notice that it returns the index of the first character of that word.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sliceindex1-index2"&gt;
  &lt;/a&gt;
  slice(index1, index2)
&lt;/h3&gt;

&lt;p&gt;This method takes strings and returns the part you slice out of it. The method takes a start point and an end point (indexes). To use this method, you have to know where the substring you are interested in starts. Here’s an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;superheroes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Superman&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;superheroes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;//up&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;superheroes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Superman&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run this code, you will see that when you slice from index 1 to index 3 in the array, it just makes a copy of that part of the array without changing the original array. You can see this by running console.log() on the original array after slicing. If you only provide one parameter, the remainder of the string will be sliced. If you provide a negative parameter, the slice will start from the end of the string and work backwards. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#substring"&gt;
  &lt;/a&gt;
  substring()
&lt;/h3&gt;

&lt;p&gt;According to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring"&gt;MDN Web Docs&lt;/a&gt; "The substring() and slice() methods are almost identical, but there are a couple of subtle differences between the two." Here are the differences:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;With the substring method, if the first index is greater than the second index, the arguments are automatically swapped. The slice method will return an empty string. &lt;/li&gt;
&lt;li&gt;The substring method automatically treats arguments that are negative or NAN as being the number 0. Whereas, with the slice method, negative values are counted backwards from the end of the string. Here's an example:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Soul&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Sou&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// becomes (0, 0)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#replace-"&gt;
  &lt;/a&gt;
  replace(" "," ")
&lt;/h3&gt;

&lt;p&gt;This method is very simple. It replaces a group of characters in a string and substitutes another. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;favoriteColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My favorite color is green&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;favoriteColor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;green&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#touppercase-and-tolowercase"&gt;
  &lt;/a&gt;
  toUpperCase() and toLowerCase()
&lt;/h3&gt;

&lt;p&gt;A string is converted to upper case with toUpperCase() and a string is converted to lower case with toLowerCase(). Here is an example of both of these methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;alphabet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a, B, c, D, e, F, g, H, i, J, k, L, m&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="c1"&gt;// all uppercase&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;alphabet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="c1"&gt;// all lowercase&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#concat"&gt;
  &lt;/a&gt;
  concat()
&lt;/h3&gt;

&lt;p&gt;concat() joins strings together. Here is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;brand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Microsoft&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;system&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; Windows&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;operatingSystem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;brand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;system&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;operatingSystem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method is another way to accomplish string concatenation which we learned about in a previous post. &lt;/p&gt;

&lt;p&gt;I hope you have enjoyed this post! Please check out the entire "JavaScript Made Easy" series by David Tetreau. There will be a new post daily.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>AWS Identity and Access Management</title>
      <author>Ajit Singh</author>
      <pubDate>Sun, 16 May 2021 02:14:40 +0000</pubDate>
      <link>https://dev.to/ajitsinghkaler/aws-identity-and-access-management-4jc2</link>
      <guid>https://dev.to/ajitsinghkaler/aws-identity-and-access-management-4jc2</guid>
      <description>&lt;p&gt;IAM is the Identity and Access Management service in AWS it is used to create users and assign them to groups. Whenever anyone needs access to an AWS service within out organisation then we only want them to access only some services on our account because they can change something because of malicious intent or a mistake. We want to give them as little access as possible to complete there job to reduce any mishaps but when we create an account on AWS that user by default has root access. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-of-iam"&gt;
  &lt;/a&gt;
  Use of IAM
&lt;/h2&gt;

&lt;p&gt;To combat this situation AWS has a service which allows us to create users and allow them only certain restrictions that service is IAM. In IAM for each user we create a new account and give them certain accesses and privileges. We can also create some groups which already contain access and privileges required to complete some tasks. After that we can add users to these certain groups.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#iam-concepts"&gt;
  &lt;/a&gt;
  IAM concepts
&lt;/h2&gt;

&lt;p&gt;Majorly IAM is divided into 4 concepts:-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;User groups&lt;/li&gt;
&lt;li&gt;Users&lt;/li&gt;
&lt;li&gt;Roles&lt;/li&gt;
&lt;li&gt;Policies &lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#user-groups"&gt;
  &lt;/a&gt;
  User Groups
&lt;/h3&gt;

&lt;p&gt;User groups are groups that are created to reuse access given to a certain user. Whenever we create groups we can attach certain access to a group. After that we can add users to a group. This helps in managing users to that all users that are in a group contain the same access. We can also add a user to multiple groups.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#users"&gt;
  &lt;/a&gt;
  Users
&lt;/h3&gt;

&lt;p&gt;These are the users created by IAM&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#roles"&gt;
  &lt;/a&gt;
  Roles
&lt;/h3&gt;

&lt;p&gt;Whenever an AWS service needs access to other services than we create a role an we can add access to other services buy using roles. I also allows application code running on an EC2 instance access perform actions on AWS resources.&lt;/p&gt;

&lt;p&gt;I also allows to add users from other organisations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#policies"&gt;
  &lt;/a&gt;
  Policies
&lt;/h3&gt;

&lt;p&gt;Policies are the list of accesses provided to a user, user group or role in a JSON format AWS already contains many preexisting policies which are really helpful in providing access to AWS users.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>cloudskills</category>
      <category>cloudnewbie</category>
    </item>
    <item>
      <title>A Simple Introduction to Web Sockets</title>
      <author>Tamerlan Gudabayev</author>
      <pubDate>Sun, 16 May 2021 02:08:15 +0000</pubDate>
      <link>https://dev.to/tamerlang/a-simple-introduction-to-web-sockets-g1j</link>
      <guid>https://dev.to/tamerlang/a-simple-introduction-to-web-sockets-g1j</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;As a backend developer, you sometimes get tired of making basic CRUD applications, it's all the same thing but with different business logic. &lt;/p&gt;

&lt;p&gt;You wanna do more interesting stuff.&lt;/p&gt;

&lt;p&gt;Well, a month ago, I had this revelation. From that, I started to research all sorts of new topics. One of the topics I had in mind was web sockets, all this time I kept hearing of the word, but never fully understood it. So I just went and did it, and it's a lot easier than I thought it would be. Today I want to teach you what I taught myself over the past couple of days.&lt;/p&gt;

&lt;p&gt;You will learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is web sockets?&lt;/li&gt;
&lt;li&gt;How does web sockets work?&lt;/li&gt;
&lt;li&gt;What problems do web sockets fix?&lt;/li&gt;
&lt;li&gt;Web sockets pros and cons&lt;/li&gt;
&lt;li&gt;Alternatives to web sockets&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#http"&gt;
  &lt;/a&gt;
  HTTP
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XZUKuEAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oe8cayrrkvcu5e5mbv9k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XZUKuEAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oe8cayrrkvcu5e5mbv9k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every technology was made to fix some problem, for web sockets, it was the limitations of the HTTP protocol. But before we move on to its problems, let us quickly cover HTTP.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTP (Hypertext-Transport-Protocol) is a protocol used to transmit hypermedia documents such as HTML (Hypertext-Markup-Language).&lt;/li&gt;
&lt;li&gt;It is built upon the TCP (Transmission Control Protocol).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So how does HTTP work?&lt;/p&gt;

&lt;p&gt;It's pretty simple, you have two entities, the client, and the server. In web-development terms, the client is your frontend, and the server is the backend. &lt;/p&gt;

&lt;p&gt;The process goes like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The clients opens a TCP connection.&lt;/li&gt;
&lt;li&gt;The client then sends a request (GET, POST, etc...) to the server and waits for a response.&lt;/li&gt;
&lt;li&gt;The server receives and processes the request, then returns back the appropriate data to the client. &lt;/li&gt;
&lt;li&gt;The client receives the response and closes the TCP connection.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In a nutshell, it works like this, there are other variations of HTTP such as HTTP 1.1, HTTP 2, and HTTP 3. They work differently but essentially it's all request-response. Feel free to research them on your own time. &lt;/p&gt;

&lt;p&gt;This approach of request-response works great. It is still used today (2021) and will be used in the future, but it has some flaws. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problems-with-http"&gt;
  &lt;/a&gt;
  Problems with HTTP
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--whJ-vrn0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sh1mr0yh1dzuzlwzmmtl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--whJ-vrn0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sh1mr0yh1dzuzlwzmmtl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Over time, web sites became more and more complex. Facebook started out as a simple social media site, but now it isn't just a site, it's a whole platform. The world became more connected, messaging apps started to dominate the market. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;People wanted to text each other in real-time.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Unfortunately, HTTP wasn't made for this. &lt;/p&gt;

&lt;p&gt;As you may recall, HTTP architecture is request-response, the client must initiate the connection, and once it receives its data, it closes it. But what if we want the server to send updated data to the client, for example, someone sends a message to a group chat, then all other members must be notified. The user can simply refresh the page, and fetch the updated data, but this is a horrible experience for the user. &lt;/p&gt;

&lt;p&gt;Smart computer scientists realized this and concluded that we need to create a new protocol.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-sockets"&gt;
  &lt;/a&gt;
  Web Sockets
&lt;/h2&gt;

&lt;p&gt;This is where web sockets come into the picture, web sockets is a protocol that allows bi-directional communication between the server and the client over a single TCP connection. &lt;/p&gt;

&lt;p&gt;Okay, this may sound complicated but don't worry it's not. &lt;/p&gt;

&lt;p&gt;Let's go through the flow of web sockets. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_AvLofyv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57mw04oj87550359cmtr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_AvLofyv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/57mw04oj87550359cmtr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The client sends a request to the server, requesting to change the protocol. &lt;/li&gt;
&lt;li&gt;The server receives the request, and if it supports web sockets, it would change its protocol to it.&lt;/li&gt;
&lt;li&gt;Web socket connection is open and the client and server can continuously talk to each other. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Step 1 and 2 are known as the web socket handshake.&lt;/p&gt;

&lt;p&gt;With web sockets now, the server can send the new messages back to the client, whenever it gets updated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-sockets-use-cases"&gt;
  &lt;/a&gt;
  Web Sockets Use Cases
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Messaging&lt;/li&gt;
&lt;li&gt;Social feeds&lt;/li&gt;
&lt;li&gt;Multiplayer games&lt;/li&gt;
&lt;li&gt;Collaborative editing/coding&lt;/li&gt;
&lt;li&gt;Clickstream data&lt;/li&gt;
&lt;li&gt;Financial tickers&lt;/li&gt;
&lt;li&gt;Sports updates&lt;/li&gt;
&lt;li&gt;Multimedia chat&lt;/li&gt;
&lt;li&gt;Location-based apps&lt;/li&gt;
&lt;li&gt;Online education&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#web-sockets-pros-and-cons"&gt;
  &lt;/a&gt;
  Web Sockets Pros and Cons
&lt;/h2&gt;

&lt;p&gt;Technology is not perfect, everything has its strengths and weaknesses. The main advantage of web sockets are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's bi-directional communication.&lt;/li&gt;
&lt;li&gt;It's HTTP compatibility.&lt;/li&gt;
&lt;li&gt;Because it's HTTP compatible, it's also firewall-friendly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The downsides are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Proxying is tricky.&lt;/li&gt;
&lt;li&gt;Load balancing is challenging.&lt;/li&gt;
&lt;li&gt;Stateful — meaning it's hard to horizontally scale.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#alternatives-to-web-sockets"&gt;
  &lt;/a&gt;
  Alternatives to Web Sockets
&lt;/h2&gt;

&lt;p&gt;There are several alternatives to web sockets, but each has its preferred use case.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WebHooks&lt;/li&gt;
&lt;li&gt;HTTP streaming&lt;/li&gt;
&lt;li&gt;Web Transport (still very new but definitely keep an eye on it)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I encourage everyone to test out this technology, it's not very hard to implement especially in JavaScript. You can create a simple chat app. Anyways, I hope you learned something today, and as always if you got any questions feel free to leave them down in the comments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#additional-references"&gt;
  &lt;/a&gt;
  Additional References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=2Nt-ZrNP22A"&gt;https://www.youtube.com/watch?v=2Nt-ZrNP22A&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=PjiXkJ6P9pQ"&gt;https://www.youtube.com/watch?v=PjiXkJ6P9pQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=6RvlKYgRFYQ"&gt;https://www.youtube.com/watch?v=6RvlKYgRFYQ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>computerscience</category>
      <category>webdev</category>
    </item>
    <item>
      <title>⚡ Superb Comprehensions ⚡In Python Using List and Sets </title>
      <author>Sudarshan Sawandkar</author>
      <pubDate>Sun, 16 May 2021 01:57:25 +0000</pubDate>
      <link>https://dev.to/sudarshansb143/superb-comprehensions-in-python-using-list-and-sets-1gnd</link>
      <guid>https://dev.to/sudarshansb143/superb-comprehensions-in-python-using-list-and-sets-1gnd</guid>
      <description>&lt;p&gt;📢 TL:DR :&lt;/p&gt;

&lt;p&gt;Dealing with data structures is not a big deal if you are using python, isn't it ?&lt;/p&gt;

&lt;p&gt;If it is a big deal, then take look at conversation.&lt;br&gt;
Here, we have 2 &lt;strong&gt;noob coders&lt;/strong&gt; .&lt;br&gt;
😎 Chintu and  😷Mintu. 😷 Mintu is technical client in the room and Chintu is A-K-A a developer. Hence, 😎Chintu is implementing the requirements of his client, which are changing very fast (as we all know).&lt;/p&gt;



&lt;p&gt;[ M : Mintu, C: Chintu]&lt;/p&gt;

&lt;p&gt;😷 M : I want to generate a list of even numbers from 1 to N, but not with classical for.... in loop with range() and all that. Instead with something different&lt;/p&gt;

&lt;p&gt;😎 C : Ok ! this is my try&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;allSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allSum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;😷 M : Ooops ! I want square of each number, once they are in a list....&lt;/p&gt;

&lt;p&gt;😎 C : No worries&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;allSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allSum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;😷 M : Yahh... It will be pretty nice if it contains original numbers also &lt;/p&gt;

&lt;p&gt;😎 C : Ok ! Here we go&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;allSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allSum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;😷 M : Awesome !!! but, now I want dictionary of original and squared number instead of nested lists&lt;/p&gt;

&lt;p&gt;😎 C : Fine ! I have this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;allSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allSum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;😷 M : Great ! but, now I think all should be in a SET, but  by using your previous code &lt;/p&gt;

&lt;p&gt;😎 C : Ok Fine ! see this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;allSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allSum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;😷 M :  Cool ! But, now I want iterator instead of the whole list at once &lt;/p&gt;

&lt;p&gt;😎 C : OK Sir !&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;allSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allSum&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;😷 M : can you explain why we should prefer ** list iterator **  instead of the normal list ?&lt;/p&gt;

&lt;p&gt;😎 C : Yup ! List iterator are kind of generator object in nature, which are used to comprehensively yield the values when we call the next() on the object of iterator. The real benefit of creating generator is, that they don't consume memory before actual yielding / producing the value. This saves a lot of runtime memory and gives out programme a free space to use.&lt;/p&gt;

&lt;p&gt;Application of this would be like, if we have a database transaction which requires millions of rows to complete the process. In this scenario, if we loaded the data using normal data structure like list, then CPU have to pre-load whole data before actual using it and then proceed further, instead we can use generator / iterator object which yields the value at runtime once anyone demanded.&lt;/p&gt;




&lt;p&gt;😷 M : Nice ! but can you create this &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NZmamr0J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hwffzg0vfzm9y5uiyvj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NZmamr0J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hwffzg0vfzm9y5uiyvj.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;😎 C : Are you kidding me ! It is so simple&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="n"&gt;allSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allSum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🤗 M : Kinda cool ! I declare you are not &lt;strong&gt;NOOB&lt;/strong&gt; Now&lt;/p&gt;




&lt;p&gt;🚀 Final Thoughts :&lt;/p&gt;

&lt;p&gt;This are some comprehensions which anyone can use in their day to day programming usage. &lt;/p&gt;

&lt;p&gt;This makes our makes our code more readable and more concise. Although, it is every individual's choice about preferring or not preferring the comprehensions. Here, I am putting my simple try for the comprehension.&lt;/p&gt;

&lt;p&gt;Thanks for Reading 🙏🙏 &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>productivity</category>
      <category>codenewbie</category>
      <category>python</category>
    </item>
    <item>
      <title>PHP 8 c'est du sérieux ? Devriez-vous l'apprendre ?</title>
      <author> </author>
      <pubDate>Sun, 16 May 2021 01:54:51 +0000</pubDate>
      <link>https://dev.to/ericcodeur/php-8-c-est-du-serieux-devriez-vous-l-apprendre-jnn</link>
      <guid>https://dev.to/ericcodeur/php-8-c-est-du-serieux-devriez-vous-l-apprendre-jnn</guid>
      <description>&lt;h2&gt;Qu'est ce que PHP&lt;/h2&gt;

&lt;p&gt;PHP est un langage de programmation généraliste et Open Source, spécialement conçu pour le développement d'applications web.&lt;/p&gt;

&lt;h2&gt;PHP 8 c'est sérieux?&lt;/h2&gt;

&lt;p&gt;PHP est le language de programmation serveur le plus utilisé présentement sur le web. Un peu moins de 80% des sites webs ont du code PHP. C'est énorme! PHP n'est pas près de disparaitre.&lt;/p&gt;

&lt;h2&gt;Pourquoi PHP vs les autres&lt;/h2&gt;

&lt;p&gt;Ce points est plus subjectif mais pour moi PHP est un language mature, solide et complet. PHP est présentement à la version 8 et contient tout ce qu'un language moderne doit avoir.&lt;/p&gt;

&lt;p&gt;PHP a beaucoup évolué dans les dernières années. L'ajout de l'orienté object et plusieurs autres concepts moderne ont changé dramatiquement la façon de coder et la qualité des applications web PHP.&lt;/p&gt;

&lt;p&gt;PHP est maintenant utilisé par des millions de sites web. Incluant Facebook, Wordpress, Wikipedia, Tumblr, Slack et bien d'autres.&lt;/p&gt;

&lt;p&gt;La communauté PHP est très grande, très dynamique et inclusive. Tout le monde est le bienvenue. Il n'y a pas de snobisme, c'est une vrai communauté d'entraide.&lt;/p&gt;

&lt;p&gt;PHP peut également compter sur des frameworks de haute qualité comme Symfony et Laravel (et plusieurs autres). Ces frameworks permettent de développer des applications web rapidement et surement.&lt;/p&gt;

&lt;p&gt;Par exemple, Laravel permet de développer une application web en PHP moderne orienté object. &lt;/p&gt;

&lt;p&gt;Laravel vous fournis des outils et librairies qui ont faites leurs preuves et qui peuvent vous aider a coder des applications de A à Z, rapidement et efficacement.&lt;/p&gt;

&lt;p&gt;Laravel permet également de créer des applications web full stack. Autant frontend que backend. Ce qui permet de faciliter et d'accélérer le développement d'une application complète.&lt;/p&gt;

&lt;p&gt;Bref, avec PHP vous pouvez réaliser de petits, gros et très gros projets. PHP peut gérer quelques clics par jour ou des millions de clics par jours.&lt;/p&gt;

&lt;p&gt;Enfin, oui, PHP c'est du sérieux et oui PHP vaut la peine d'être utilisé et maitrisé.&lt;/p&gt;

&lt;h2&gt;Vous aimeriez apprendre PHP?&lt;/h2&gt;

&lt;p&gt;Dans les prochains jours, je vais vous faire découvrir les concepts de base en PHP et chaque jours on apprendra des notions supplémentaires jusqu'aux concept avancés.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;C'est tout pour aujourd'hui. Demain l'aventure commence avec encore et toujours plus de PHP. Pour ne rien manqué vous pouvez me suivre sur dev.to en cliquant Follow&lt;/p&gt;

&lt;p&gt;Suivez-moi également sur Twitter: &lt;a href="https://twitter.com/justericchapman?ref_src=twsrc%5Etfw"&gt;Follow @justericchapman&lt;/a&gt;&lt;/p&gt;

</description>
      <category>french</category>
      <category>php</category>
      <category>laravel</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Álgebra booliana</title>
      <author>Eduardo Klosowski</author>
      <pubDate>Sun, 16 May 2021 01:46:39 +0000</pubDate>
      <link>https://dev.to/acaverna/algebra-booliana-20lc</link>
      <guid>https://dev.to/acaverna/algebra-booliana-20lc</guid>
      <description>&lt;p&gt;Há algum tempo, quando a &lt;a href="https://www.twitch.tv/bug_elseif"&gt;bug_elseif&lt;/a&gt; ainda estava fazendo &lt;a href="https://wiki.python.org.br/ListaDeExercicios"&gt;listas de exercícios em Python&lt;/a&gt;, apareceu um problema que envolvia verificar se um ano era bissexto ou não. Embora a construção de uma expressão para verificar se um ano é bissexto seja até intuitiva, como estávamos utilizando a condição invertida (verificar se o ano não era bissexto), sua construção não estava sendo fácil, porém é possível usar um pouco de matemática para chegar nela.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#constru%C3%A7%C3%A3o-da-express%C3%A3o"&gt;
  &lt;/a&gt;
  Construção da expressão
&lt;/h2&gt;

&lt;p&gt;Primeiramente vamos construir uma expressão para verificar se um ano é bissexto. Para isso, ele deve ser múltiplo de 4, porém se o ano terminar com 00, ele também deve ser múltiplo de 400. Para verificar se um número termina com 00, basta verificar se ele é múltiplo de 100, e para verificar se um número é múltiplo de outro, podemos verificar o resto da divisão ou módulo (quem sabe falo sobre matemática modular em outro artigo), caso o resultado dessa operação seja 0, o primeiro número é divisível pelo segundo, e caso seja qualquer outro valor, o primeiro número não é divisível pelo segundo (ou não possui uma divisão inteira).&lt;/p&gt;

&lt;p&gt;Assim, a expressão para verificar se o ano é bissexto pode ser construída como:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(ano % 4 == 0 &amp;amp;&amp;amp; ano % 100 != 0) || ano % 400 == 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A primeira coisa a ser observada é que existem duas subexpressões com o conectivo disjuntivo ("ou" &lt;code&gt;||&lt;/code&gt;), ou seja, para um ano ser bissexto basta ele cumprir uma das duas condições (subexpressões). A primeira condição também é dividida em outras duas subexpressões, porém dessa vez com o conectivo conjuntivo ("e" &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;), assim é necessário que as duas condições sejam verdadeiras para que o seu valor seja considerado verdadeiro, onde a primeira verifica se o ano é divisível por 4 (resto da divisão é igual a 0), e a segunda verifica se ele não é divisível por 100 (resto da divisão é diferente de 0). Essa é a primeira possibilidade para um ano ser bissexto. A outra possibilidade é se ele for divisível por 400 (resto da divisão é igual a zero).&lt;/p&gt;

&lt;p&gt;Assim, essa expressão retorna verdadeiro se o ano for bissexto, e falso caso ele não for.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#invertendo-a-express%C3%A3o"&gt;
  &lt;/a&gt;
  Invertendo a expressão
&lt;/h2&gt;

&lt;p&gt;Porém na ocasião, a expressão que estávamos usando deveria retornar verdadeiro caso o ano não fosse bissexto, e falso caso ele fosse bissexto (o contrário da expressão apresentada). Isso poderia ser feito negando a expressão anterior, ou escrevendo uma expressão de tal forma que retorne o oposto, e era justamente essa segunda opção que estávamos tentando fazer.&lt;/p&gt;

&lt;p&gt;Entretanto, existe uma forma matemática de trabalhar com a negação da expressão, alteando-a até que ela chegue próximo ou a exata expressão que estávamos construindo. Isso é possível através de propriedades das operações boolianas, substituindo parte da expressão a cada vez que uma propriedade por aplicada. Sendo as mais comuns para esse tipo de operação as propriedades de negação da negação (&lt;code&gt;!!a = a&lt;/code&gt;), distributiva (&lt;code&gt;a || (b &amp;amp;&amp;amp; c) = (a || b) &amp;amp;&amp;amp; (a || c)&lt;/code&gt; e &lt;code&gt;a &amp;amp;&amp;amp; (b || c) = (a &amp;amp;&amp;amp; b) || (a &amp;amp;&amp;amp; c)&lt;/code&gt;, que lembra a distributiva da matemática &lt;code&gt;2 * (3 + 4) = (2 * 3) + (2 * 4)&lt;/code&gt;), e as leis de De Morgan (&lt;code&gt;!(a || b) = !a &amp;amp;&amp;amp; !b&lt;/code&gt; e &lt;code&gt;!(a &amp;amp;&amp;amp; b) = !a || !b&lt;/code&gt;). Para mais propriedades veja a página sobre o assunto na &lt;a href="https://pt.wikipedia.org/wiki/%C3%81lgebra_booliana"&gt;Wikipédia&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Para esse caso é necessário aplicar apenas as leis de De Morgan. Partindo da negação da expressão, aplicando-a passo a passo, temos:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;!((ano % 4 == 0 &amp;amp;&amp;amp; ano % 100 != 0) || ano % 400 == 0)
!(ano % 4 == 0 &amp;amp;&amp;amp; ano % 100 != 0) &amp;amp;&amp;amp; !(ano % 400 == 0)
(!(ano % 4 == 0) || !(ano % 100 != 0)) &amp;amp;&amp;amp; !(ano % 400 == 0)
(ano % 4 != 0 || ano % 100 == 0) &amp;amp;&amp;amp; ano % 400 != 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Onde essa última expressão é a que precisávamos para o código.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#considera%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Considerações
&lt;/h2&gt;

&lt;p&gt;Álgebra booliana é interessante para trabalhar condições como de &lt;code&gt;if&lt;/code&gt; e laços de repetições dos códigos, seja para otimizá-la ou inverter os blocos de código do &lt;code&gt;if&lt;/code&gt; e &lt;code&gt;else&lt;/code&gt;, por exemplo, o que pode ser utilizado para deixar o código mais fácil de entender, colocando os blocos de código em uma ordem que faça mais sentido para a leitura. Ela também pode ser utilizada para facilitar a construção de expressões, como no caso apresentando, onde é muito mais fácil e intuitivo escrever uma expressão que verifica se o ano é bissexto do que um ano que não é, onde essa última pode até ser contraintuitiva, onde a álgebra booliana permite partir da expressão mais fácil para a mais difícil.&lt;/p&gt;

&lt;p&gt;E para quem quiser se aprofundar nesse assunto, recomendo as &lt;a href="https://www.youtube.com/playlist?list=PL8iUCCJD339ezAJWqFaKriz_9tyBw6hE-"&gt;aulas do RiverFount&lt;/a&gt;, que é professor de filosofia.&lt;/p&gt;

</description>
      <category>math</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>JavaScript Salary Review 2021</title>
      <author>Alec Sherman</author>
      <pubDate>Sun, 16 May 2021 00:46:28 +0000</pubDate>
      <link>https://dev.to/alecsherman/javascript-salary-review-2021-33ab</link>
      <guid>https://dev.to/alecsherman/javascript-salary-review-2021-33ab</guid>
      <description>&lt;p&gt;What do JavaScript Developers earn around the world?  How popular is the language and libraries that use JS?  Which skills increase pay the most?  All these questions answered in under a minute.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/CvgdHFG_IrY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In Q3 2020, according to Developer Economics, the number of software developers using JavaScript was 12.4 million. This means that 53% of all developers in the world were using JS at some point.&lt;/p&gt;

&lt;p&gt;According to the 2016 Stack Overflow Developer Survey, “JavaScript is the most commonly used programming language on earth. Even Back-end developers are more likely to use it than any other language.” Meanwhile, the most recent data provided by SlashData showed that there were 10.7 million JavaScript software developers in the world in 2018.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#are-javascript-developers-in-demand"&gt;
  &lt;/a&gt;
  Are JavaScript developers in demand?
&lt;/h2&gt;

&lt;p&gt;If you’re considering a career as a JavaScript developer, you’ll be  pleased to hear that JavaScript is one of the most sought-after skills in the programming industry today.&lt;/p&gt;

&lt;p&gt;In their 2020 Global Technical Hiring &amp;amp; Skills Report, recruiting platform Devskiller unveiled some interesting insights into current developer hiring trends. Based on their analysis of over 200,000 coding tests in 143 countries, they found that 72% of companies are looking to hire JavaScript developers.&lt;/p&gt;

&lt;p&gt;A report by HackerRank found that the global demand for JavaScript outweighs the expertise available on the market. According to the report, 48% of employers worldwide say they need JavaScript skills, yet only 42% of student developers say they are proficient in the language. &lt;/p&gt;

&lt;p&gt;In summary, if you plan on becoming a JavaScript expert you can expect to be highly employable.&lt;/p&gt;

</description>
      <category>salary</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Building Microservices in Go: Repository Pattern</title>
      <author>Mario Carrion</author>
      <pubDate>Sun, 16 May 2021 00:42:15 +0000</pubDate>
      <link>https://dev.to/mariocarrion/building-microservices-in-go-repository-pattern-5pa</link>
      <guid>https://dev.to/mariocarrion/building-microservices-in-go-repository-pattern-5pa</guid>
      <description>&lt;p&gt;Continuing with the theme of using &lt;a href="https://mariocarrion.com/2021/03/21/golang-microservices-domain-driven-design-project-layout.html"&gt;Domain Driven Design&lt;/a&gt; for building Microservices in Go, today let's talk about the &lt;strong&gt;Repository Pattern&lt;/strong&gt;.&lt;/p&gt;




&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Z89UU4vSayY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; This post includes Amazon affiliate links. If you click on one of them and you make a purchase I'll earn a commission. Please notice your final price &lt;strong&gt;is not&lt;/strong&gt; affected at all by using those links.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#what-is-the-repository-pattern"&gt;
  &lt;/a&gt;
  What is the Repository Pattern?
&lt;/h2&gt;

&lt;p&gt;According to &lt;a href="https://martinfowler.com/eaaCatalog/repository.html"&gt;Martin Fowler&lt;/a&gt; in &lt;a href="https://amzn.to/3sa1TLN"&gt;Patterns of Enterprise Application Architecture (1st Edition)&lt;/a&gt; a &lt;em&gt;Repository&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Mediates between the domain and data mapping layers using a collection-like interface for accessing domain objects.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He continues (emphasis mine):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Conceptually, a Repository encapsulates the set of objects persisted in a data store and the operations performed over them, providing a more object-oriented view of the persistence layer. Repository also supports the objective of &lt;strong&gt;achieving a clean separation and one-way dependency between the domain and data mapping layers.&lt;/strong&gt;&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In &lt;a href="https://amzn.to/3s8OAf3"&gt;Domain Driven Design&lt;/a&gt; the Repository Pattern relates another DDD term called &lt;strong&gt;Aggregate&lt;/strong&gt;, &lt;a href="https://martinfowler.com/bliki/DDD_Aggregate.html"&gt;Martin Fowler&lt;/a&gt; defines it as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;... a cluster of domain objects that can be treated as a single unit.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He continues (emphasis mine):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Aggregates are the basic element of transfer of data storage - you request to load or save whole aggregates. Transactions &lt;strong&gt;should not cross aggregate boundaries.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Repositories&lt;/em&gt; &lt;strong&gt;go hand in hand with&lt;/strong&gt; &lt;em&gt;Aggregates&lt;/em&gt; and are usually enforced one to one, as stated by &lt;a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/infrastructure-persistence-layer-design#define-one-repository-per-aggregate"&gt;Microsoft&lt;/a&gt; (&lt;strong&gt;emphasis mine&lt;/strong&gt;):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;It's important to emphasize again that you should only define one repository for each aggregate root. To achieve the goal of the aggregate root to maintain transactional consistency between all the objects within the aggregate, &lt;strong&gt;you should never create a repository for each table in the database&lt;/strong&gt;.&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All of this is important to call out because the code we are going to be implement follows those ideas.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#repository-implementation-for-our-to-do-domain"&gt;
  &lt;/a&gt;
  Repository implementation for our "To Do" Domain
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The code used for this post is &lt;a href="https://github.com/MarioCarrion/todo-api-microservice-example/tree/ccc21e67047827c12ecd31798a60d968cac26f48"&gt;available on Github&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our "To Do Microservice" implements a &lt;em&gt;To Do Domain&lt;/em&gt; and requires persisting data. We will define a type in charge of interacting directly with the persistence layer that also happens to represent a domain entity, this type will implement methods representing &lt;strong&gt;concrete business interactions&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The methods to implement depend on the entity we are working on and the aggregate we are trying to represent. In this case we will focus on &lt;code&gt;Task&lt;/code&gt;, the repository will define 3 methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// TaskRepository defines the datastore handling persisting Task records.&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;TaskRepository&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;priority&lt;/span&gt; &lt;span class="n"&gt;internal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Priority&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dates&lt;/span&gt; &lt;span class="n"&gt;internal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;internal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;Find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;internal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;priority&lt;/span&gt; &lt;span class="n"&gt;internal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Priority&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dates&lt;/span&gt; &lt;span class="n"&gt;internal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dates&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;isDone&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above, I mentioned &lt;em&gt;concrete business interactions&lt;/em&gt; but what the &lt;code&gt;TaskRepository&lt;/code&gt; defines is literally &lt;code&gt;CRU&lt;/code&gt; actions, &lt;strong&gt;this is expected&lt;/strong&gt; for our &lt;em&gt;To Do Domain&lt;/em&gt; however the important thing to always remember is to think in terms of our Business Domain and how it is meant to handle those actions, if the &lt;em&gt;CRUD&lt;/em&gt; style works for what we are trying to implement that should be fine but, like we mentioned before, &lt;strong&gt;we need to make sure&lt;/strong&gt; we don't start adding CRUD-like repositories that don't represent the domain we are implementing.&lt;/p&gt;

&lt;p&gt;Our type implementing the &lt;code&gt;TaskRepository interface&lt;/code&gt; type is going to be defined as &lt;a href="https://github.com/MarioCarrion/todo-api-microservice-example/blob/54a5a405e687cd893a5e7c78ae5006c055b941e9/internal/postgresql/task.go"&gt;&lt;code&gt;postgresql.Task&lt;/code&gt;&lt;/a&gt;.  The named used for representing the package containing this this type is following the guideline we &lt;a href="https://mariocarrion.com/2021/03/21/golang-microservices-domain-driven-design-project-layout.html"&gt;described before&lt;/a&gt; where we the technology name is used, in this case: &lt;code&gt;postgresql&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Behind the scenes &lt;code&gt;postgresql.Task&lt;/code&gt; uses the code generated by &lt;a href="https://mariocarrion.com/2021/02/23/tips-building-microservices-in-go-golang-databases-postgresql-sqlc-squirrel.html"&gt;&lt;code&gt;sqlc&lt;/code&gt;&lt;/a&gt; to actually interact with the PostgreSQL database to correctly &lt;code&gt;CREATE&lt;/code&gt;, &lt;code&gt;SELECT&lt;/code&gt; and &lt;code&gt;UPDATE&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#parting-words"&gt;
  &lt;/a&gt;
  Parting words
&lt;/h2&gt;

&lt;p&gt;The Repository Pattern is a powerful way separate the Business Domain Layer and the Persistence Layer, it allows us to indicate exactly how our data moves from and to our datastore while hiding the possibly complexity that this layer could bring.&lt;/p&gt;

&lt;p&gt;It's important to keep in mind that &lt;strong&gt;not all&lt;/strong&gt; entities will require a repository but rather only those that represent a collection of domain entities that happen to need to work as a single unit.&lt;/p&gt;

&lt;p&gt;I will expand more about this in future posts, until then, &lt;strong&gt;keep it up&lt;/strong&gt;. I will talk to you next time.&lt;/p&gt;

</description>
      <category>go</category>
      <category>microservices</category>
    </item>
  </channel>
</rss>
