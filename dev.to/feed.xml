<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Livestream Event: Build a REST API using Fastify &amp; HarperDB</title>
      <author>Margo McCabe</author>
      <pubDate>Tue, 19 Jan 2021 18:29:30 +0000</pubDate>
      <link>https://dev.to/harperdb/livestream-event-build-a-rest-api-using-fastify-harperdb-2p4h</link>
      <guid>https://dev.to/harperdb/livestream-event-build-a-rest-api-using-fastify-harperdb-2p4h</guid>
      <description>&lt;h3&gt;
  &lt;a href="#join-harperdb-amp-top-fastify-maintainer-ethan-arrowood-for-this-live-code-along-event" class="anchor"&gt;
  &lt;/a&gt;
  Join HarperDB &amp;amp; top Fastify maintainer, Ethan Arrowood, for this &lt;a href="https://harperdb.io/build-a-rest-api-with-fastify-harperdb/?utm_source=devto&amp;amp;utm_medium=margopost"&gt;live code along event&lt;/a&gt;!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GkQ-HSds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/svyck3kjiih4bxy1a6fm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GkQ-HSds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/svyck3kjiih4bxy1a6fm.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fastify-the-fast-amp-low-overhead-web-framework-for-nodejs" class="anchor"&gt;
  &lt;/a&gt;
  Fastify: The fast &amp;amp; low overhead web framework for Node.js
&lt;/h3&gt;

&lt;p&gt;HarperDB is hosting Ethan Arrowood, a top open source maintainer for Fastify and Microsoft Engineer, for a &lt;a href="https://harperdb.io/build-a-rest-api-with-fastify-harperdb/?utm_source=devto&amp;amp;utm_medium=margopost"&gt;virtual livestream on January 26th&lt;/a&gt;. Ethan will build a REST API using Fastify with HarperDB. Fastify is a web framework highly focused on providing the best developer experience with the least overhead and a powerful plugin architecture.&lt;/p&gt;

&lt;p&gt;Throughout the livestream, Ethan will highlight best practices for general data organization, running HarperDB in Fastify, using Undici to make high throughput requests to HarperDB, and building an API in Fastify. The API will be demoed using Postman or Insomnia tools. Ethan will be running HarperDB locally off of &lt;a href="https://hub.docker.com/r/harperdb/hdb"&gt;Docker&lt;/a&gt;, and managing his database(s) through the HarperDB &lt;a href="https://studio.harperdb.io/sign-up?code=FASTIFYEVENT&amp;amp;utm_source=devto&amp;amp;utm_medium=margopost"&gt;Management Studio&lt;/a&gt;.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;January 26th @ 6pm MT&lt;/strong&gt; (we'll send a recording to all RSVP's in case you can't attend live)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://harperdb.io/build-a-rest-api-with-fastify-harperdb/#fastify_rsvp"&gt;RSVP (free event)&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://studio.harperdb.io/sign-up?code=FASTIFYEVENT&amp;amp;utm_source=devto&amp;amp;utm_medium=margopost"&gt;Register for the HarperDB Studio&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;This event is for developers of any skill level, and will help you strengthen your Fastify and app development skills, as well as general database / data management knowledge.&lt;/strong&gt; (You'll also be able to see some of the sweet new HarperDB features in action!)&lt;/p&gt;








&lt;h3&gt;
  &lt;a href="#meet-ethan" class="anchor"&gt;
  &lt;/a&gt;
  Meet Ethan
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/ethanarrowood"&gt;@ethanarrowood&lt;/a&gt;
 is a Software Engineer 2 at Microsoft, based out of Boston, MA. Apart from his professional work, Ethan is an active Node.js open source community member. He is a maintainer for Fastify, contributor to Node.js and Undici, and is involved in many other community-related aspects. In addition, he enjoys the outdoors and can often be found hiking, climbing, and skiing around the Northeast.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#meet-harperdb" class="anchor"&gt;
  &lt;/a&gt;
  Meet HarperDB
&lt;/h3&gt;

&lt;p&gt;&lt;a href="//harperdb.io?utm_source=devto&amp;amp;utm_medium=margopost"&gt;HarperDB&lt;/a&gt; is a distributed database focused on making data management easy. It has an easy to use REST API, and supports NoSQL and SQL including joins. HarperDB leverages standard interfaces so that you can use the reporting and analysis tools that best meet your needs. Great for use cases where you need rapid application development, integration, edge computing, distributed computing, and real-time operational analytics. If you want to learn more before the event, you can check out the SDK's in the &lt;a href="https://studio.harperdb.io/resources/marketplace/active?utm_source=devto&amp;amp;utm_medium=margopost"&gt;HarperDB Marketplace&lt;/a&gt;, read about &lt;a href="https://dev.to/harperdb/building-a-database-written-in-node-js-from-the-ground-up-2hgm"&gt;HarperDB's technology&lt;/a&gt;, or &lt;a href="https://dev.to/harperdb"&gt;read our other articles&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#meet-fastify" class="anchor"&gt;
  &lt;/a&gt;
  Meet Fastify
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.fastify.io/"&gt;Fastify&lt;/a&gt; is a fast and low overhead web framework for Node.js. It's inspired by Hapi and Express, and is one of the fastest web frameworks in town. Fatify lists its core features as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Highly performant: super fast, depending on the code complexity we can serve up to 30 thousand requests per second.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Extendible: Fastify is fully extensible via its hooks, plugins and decorators.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Schema based: even if it is not mandatory we recommend to use JSON Schema to validate your routes and serialize your outputs, internally Fastify compiles the schema in a highly performant function.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Logging: logs are extremely important but are costly; we chose the best logger to almost remove this cost, Pino!
Developer friendly: the framework is built to be very expressive and to help developers in their daily use, without sacrificing performance and security.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;TypeScript ready: we work hard to maintain a TypeScript type declaration file so we can support the growing TypeScript community.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fun fact - Jaxon, our VP of Product, recently mentioned that HarperDB currently uses Express for our internal API, but we're ripping it out and replacing it with Fastify. Our internal benchmarks say this will increase API performance by at least 50%, but we're hoping for double that. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wbr4x_OT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/whgo3vnu6dw5yxylfdyo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wbr4x_OT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/whgo3vnu6dw5yxylfdyo.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now-lets-get-coding" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://harperdb.io/build-a-rest-api-with-fastify-harperdb/"&gt;Now let's get coding!&lt;/a&gt;
&lt;/h2&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>node</category>
    </item>
    <item>
      <title>Creating a Killer GitHub Profile README Part 1</title>
      <author>Braydon Coyer</author>
      <pubDate>Tue, 19 Jan 2021 17:19:15 +0000</pubDate>
      <link>https://dev.to/dailydotdev/creating-a-killer-github-profile-readme-part-1-33nm</link>
      <guid>https://dev.to/dailydotdev/creating-a-killer-github-profile-readme-part-1-33nm</guid>
      <description>&lt;p&gt;README's. You know, those markdown files that get created when you generate a new project or create a GitHub repository. Perhaps you're a developer who updates the README file for each project you work on. Or maybe you're a developer who leaves the boilerplate content inside. &lt;/p&gt;

&lt;p&gt;As of July 2020, GitHub now allows developers to create a profile-level repository and use the README to add some personality to their page. &lt;/p&gt;

&lt;p&gt;I've known about this for a few months now but only recently dove in. And, well... I may have gone a bit overboard. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/tzFjGxURDcjzVoTusV/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/tzFjGxURDcjzVoTusV/giphy.gif" alt="README Gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/braydoncoyer"&gt;Check out my GitHub profile here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Many developers, I believe, inject a bunch of 'cool' widgets and badges in their profile instead of realizing that their GitHub profile is very much like a portfolio — it should highlight &lt;em&gt;what makes you unique&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;There are many articles and tutorials on the web (some linked throughout this article) that show you how to add basic information to your &lt;code&gt;README.md&lt;/code&gt; file — images, badges and statistics. But I wanted something a bit more personal; I wanted a unique profile that accomplished a few things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Provided a route for visitors to find my other social outlets&lt;/li&gt;
&lt;li&gt;Highlighted my most recently published articles&lt;/li&gt;
&lt;li&gt;Displayed pinned repositories in a visual-appeasing fashion&lt;/li&gt;
&lt;li&gt;Allowed visitors to see some of my GitHub statistics &lt;/li&gt;
&lt;li&gt;Listed some of my skills for those interested or for future employers&lt;/li&gt;
&lt;li&gt;End the experience with something a bit more fun; a quote from an API I built.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I encourage you to make your own list — what do you want on your profile? How is it going to highlight what makes you unique? &lt;/p&gt;

&lt;p&gt;In this two-part article series, I will walk through, step by step, how I created my profile so that you can make your own &lt;code&gt;README.md&lt;/code&gt; file stand out from the crowd.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#understanding-limitations" class="anchor"&gt;
  &lt;/a&gt;
  Understanding Limitations
&lt;/h3&gt;

&lt;p&gt;If you're new to markdown files in general, it's important to have a high-level idea of what we'll be doing. After all, you can't provide solutions without understanding limitations. &lt;/p&gt;

&lt;p&gt;I knew that I wanted basic content and information in my README — things like images, headings, badges that redirect users when clicked and even graphs and widgets that display GitHub statistics. Tutorials are scattered across the internet and make implementing these things relatively easy.&lt;/p&gt;

&lt;p&gt;But I also knew I wanted my README to be dynamic; I wanted it to automatically fetch my most recent blog posts and to display a quote from The Office API that I built. This is where things get tricky. Markdown files can't make API requests on their own, so how would I inject content dynamically? &lt;/p&gt;

&lt;p&gt;GitHub Actions. These built-in repository pipelines allow developers to automate tasks and workflows and is what I used to fetch blog posts and request a random quote from my API. These workflows can trigger files or functions to obtain information and inject the content into my README. I assigned a cron job to run the workflow every hour so my profile is always up-to-date with new articles and visitors get a fresh quote each time they visit my profile.&lt;/p&gt;

&lt;p&gt;There's a few 'gotchas' with this implementation that we'll discuss in the next article, but I hope this gives you a high-level overview of how we'll approach the problem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-your-profile-repository" class="anchor"&gt;
  &lt;/a&gt;
  Create Your Profile Repository
&lt;/h3&gt;

&lt;p&gt;Go to &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; and create a new repository that has the same name as your GitHub username. My username is &lt;code&gt;braydoncoyer&lt;/code&gt;, so I created a repository with the name &lt;code&gt;braydoncoyer&lt;/code&gt;. If you’ve done this correctly, GitHub will display a secret message (pictured below).&lt;/p&gt;

&lt;p&gt;I set the repository access to &lt;strong&gt;private&lt;/strong&gt; until I was ready for the world to see it, but feel free to make it public if you want.&lt;/p&gt;

&lt;p&gt;I also initialized the repository with  &lt;code&gt;README.md&lt;/code&gt; and &lt;code&gt;.gitignore&lt;/code&gt; files.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: The screenshot below is giving me an error because I've already created a profile-level repository. You shouldn't see this error. Also, if you didn't know, GitHub recently shipped dark mode.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4a-aNVm7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lp7vy1937cifyxuno56w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4a-aNVm7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lp7vy1937cifyxuno56w.png" alt="Create GitHub Repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once I created the repository, I cloned it down and opened it in my favorite editor. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-readme-template" class="anchor"&gt;
  &lt;/a&gt;
  Create a README Template
&lt;/h3&gt;

&lt;p&gt;Although I initialized the repository with a &lt;code&gt;README.md&lt;/code&gt; file, I quickly found out that I needed to edit my content in a separate file and use it as a template — a skeleton of static content that will be used to construct the final &lt;code&gt;README.md&lt;/code&gt; file. There are several reasons for this, but here are two of the most important:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Eventually, the GitHub Actions workflow will trigger files that will use the template, inject the dynamic content and then take the entire template and paste it in the README file. &lt;/li&gt;
&lt;li&gt;If you're editing the &lt;code&gt;README.md&lt;/code&gt; file directly, you're going to have LOTS of merge conflicts after the dynamic injection performs its magic.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With that said, at the root level of my repository, I created a new file called &lt;code&gt;README.template.md&lt;/code&gt;. This is the file I will be editing manually.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#banner-image" class="anchor"&gt;
  &lt;/a&gt;
  Banner Image
&lt;/h3&gt;

&lt;p&gt;I decided I wanted visitors to be greeted with a nice banner image that directed visitors to my portfolio when it was clicked.&lt;/p&gt;

&lt;p&gt;I opened Illustrator, created a 1500x500 document and designed the banner image according to my personal style.&lt;/p&gt;

&lt;p&gt;Back in my repository, I created a new root-level directory named &lt;code&gt;assets&lt;/code&gt; , placed the image in the folder and consumed it in the &lt;code&gt;README.template.md&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;![Braydon's GitHub Banner&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;./assets/GitHubHeader.png&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;](https://braydoncoyer.dev)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#social-badges" class="anchor"&gt;
  &lt;/a&gt;
  Social Badges
&lt;/h3&gt;

&lt;p&gt;One of my goals with my GitHub profile README is to direct visitors to my other social networks (Twitter, LinkedIn and CodePen, specifically). &lt;/p&gt;

&lt;p&gt;To do that, I made sure I had social badges listed at the top of the profile so that it's one of the first things visitors see. &lt;/p&gt;

&lt;p&gt;To create these badges, I  used &lt;a href="https://shields.io/"&gt;shields.io&lt;/a&gt; and edited the badge text, badge color and destination URL. &lt;/p&gt;

&lt;p&gt;I thought it would also be fun to keep a track of my profile visits, so I created a badge and listed it next to the social badges.&lt;/p&gt;

&lt;p&gt;To create your own visits badge, copy the 'Visits Badge' markdown content below and change the repository destination in the URL (everything after '/visits/').&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;![Visits Badge&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://badges.pufler.dev/visits/braydoncoyer/braydoncoyer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;](https:braydoncoyer.dev)
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;![Twitter Badge&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://img.shields.io/badge/Twitter-Profile-informational?style=flat&amp;amp;logo=twitter&amp;amp;logoColor=white&amp;amp;color=1CA2F1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;](https://twitter.com/BraydonCoyer)
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;![LinkedIn Badge&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://img.shields.io/badge/LinkedIn-Profile-informational?style=flat&amp;amp;logo=linkedin&amp;amp;logoColor=white&amp;amp;color=0D76A8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;](https://www.linkedin.com/in/braydon-coyer/)
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;![CodePen Badge&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://img.shields.io/badge/CodePen-Profile-informational?style=flat&amp;amp;logo=codepen&amp;amp;logoColor=white&amp;amp;color=black&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;](https://codepen.io/braydoncoyer)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-introduction-section" class="anchor"&gt;
  &lt;/a&gt;
  The Introduction Section
&lt;/h3&gt;

&lt;p&gt;Believe it or not, the banner image and social badges don't take up that space. Now that visitors have an optional route to see my other social networks, they need to know a little about me.&lt;/p&gt;

&lt;p&gt;I only wrote a small blurb for the introduction. If visitors want to know more about me, they can find that information on my portfolio website or LinkedIn profile. Don't make the mistake of overwhelming visitors with too much information.&lt;/p&gt;

&lt;p&gt;At the end of the introduction, I present the visitor with a call-to-action to visit my portfolio website — again, I don't want to overwhelm the visitor, but rather give just enough information about me and provide a way for them to read more if they desire.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#latest-blog-posts" class="anchor"&gt;
  &lt;/a&gt;
  Latest Blog Posts
&lt;/h3&gt;

&lt;p&gt;Next, I want visitors to see my most recent blog posts. This needs to be dynamic and updated with regular cadence. The hard work will eventually be delegated to a separate file that the GitHub Action workflow will run, but in order for that file to know where to inject the content, it requires a certain pattern in the template. &lt;/p&gt;

&lt;p&gt;For now, I put the following under the blog post section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- BLOG-POST-LIST:START --&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- BLOG-POST-LIST:END --&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;To inject my blog feed into the &lt;code&gt;README.md&lt;/code&gt; file, I followed &lt;a href="https://hashnode.com/@iamdarshshah"&gt;Darsh Shah's&lt;/a&gt; article &lt;em&gt;&lt;a href="https://iamdarshshah.hashnode.dev/how-to-add-your-recently-published-articles-to-your-github-profile-readme-using-github-actions"&gt;How to Add Your Recently Published Articles to Your GitHub Profile README using GitHub Actions 🤖&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#pinned-repositories-amp-github-stats" class="anchor"&gt;
  &lt;/a&gt;
  Pinned Repositories &amp;amp; GitHub Stats
&lt;/h3&gt;

&lt;p&gt;Along with my most recent blog posts, I wanted to shift the spotlight to a few of my other repositories and display some statistics. To accomplish this, I used Anurag Hazra‘s &lt;em&gt;&lt;a href="https://github.com/anuraghazra/github-readme-stats"&gt;GitHub ReadMe Stats&lt;/a&gt; -&lt;/em&gt; The content you retrieve from his API can be wrapped in an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag and styled in various ways. The documentation is easy to follow; I encourage you to check it out!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Pinned Repositories -- &amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;a href="https://github.com/braydoncoyer/tailwindcss-v2-dark-mode-template"&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;img align="center" style="margin:1rem 0.5rem" src="https://github-readme-stats.vercel.app/api/pin/?username=braydoncoyer&amp;amp;repo=tailwindcss-v2-dark-mode-template&amp;amp;title_color=ffffff&amp;amp;text_color=c9cacc&amp;amp;icon_color=4AB197&amp;amp;bg_color=1A2B34" /&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;a href="https://github.com/braydoncoyer/ng-limeade"&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;img align="center" style="margin:0.5rem" src="https://github-readme-stats.vercel.app/api/pin/?username=braydoncoyer&amp;amp;repo=ng-limeade&amp;amp;title_color=ffffff&amp;amp;text_color=c9cacc&amp;amp;icon_color=4AB197&amp;amp;bg_color=1A2B34" /&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;a href="https://github.com/braydoncoyer/officeapi"&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;img align="center" style="margin:0.5rem" src="https://github-readme-stats.vercel.app/api/pin/?username=braydoncoyer&amp;amp;repo=officeapi&amp;amp;title_color=ffffff&amp;amp;text_color=c9cacc&amp;amp;icon_color=4AB197&amp;amp;bg_color=1A2B34" /&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- GitHub Stats -- &amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;a href="https://github.com/braydoncoyer"&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;img align="center" style="margin:0.5rem" src="https://github-readme-stats.vercel.app/api/top-langs/?username=braydoncoyer&amp;amp;hide=html,css&amp;amp;title_color=ffffff&amp;amp;text_color=c9cacc&amp;amp;icon_color=4AB197&amp;amp;bg_color=1A2B34" /&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;a href="https://github.com/braydoncoyer"&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;img align="center" style="margin:0.5rem" src="https://github-readme-stats.vercel.app/api?username=braydoncoyer&amp;amp;show_icons=true&amp;amp;line_height=27&amp;amp;count_private=true&amp;amp;title_color=ffffff&amp;amp;text_color=c9cacc&amp;amp;icon_color=4AB097&amp;amp;bg_color=1A2B34" alt="Braydon's GitHub Stats" /&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#skills" class="anchor"&gt;
  &lt;/a&gt;
  Skills
&lt;/h3&gt;

&lt;p&gt;Next, I needed a way to show visitors my skills as a full-stack web developer. I didn't want to put my skills in an unordered list; it would take up a lot of space on the page and the unordered list doesn't provide much of a stylish flare.&lt;/p&gt;

&lt;p&gt;Instead, I used badges from &lt;a href="http://shield.io"&gt;shield.io&lt;/a&gt; and displayed the badges inline on the page, using the same background color as the banner image to keep design consistency throughout the profile.&lt;/p&gt;

&lt;p&gt;Because I wanted to list a lot of skills, I decided to have some core-skills displayed by default, and optionally show more skills using a &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;[](&lt;/span&gt;&lt;span class="sx"&gt;https://img.shields.io/badge/Code-Angular-informational?style=flat&amp;amp;logo=angular&amp;amp;logoColor=white&amp;amp;color=4AB197&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;![](&lt;/span&gt;&lt;span class="sx"&gt;https://img.shields.io/badge/Code-Ionic-informational?style=flat&amp;amp;logo=ionic&amp;amp;logoColor=white&amp;amp;color=4AB197&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;![](&lt;/span&gt;&lt;span class="sx"&gt;https://img.shields.io/badge/Code-React-informational?style=flat&amp;amp;logo=react&amp;amp;logoColor=white&amp;amp;color=4AB197&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
...

&lt;span class="nt"&gt;&amp;lt;details&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;More Skills&lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;[](&lt;/span&gt;&lt;span class="sx"&gt;https://img.shields.io/badge/Style-CSS-informational?style=flat&amp;amp;logo=css3&amp;amp;logoColor=white&amp;amp;color=4AB197&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;![](&lt;/span&gt;&lt;span class="sx"&gt;https://img.shields.io/badge/Style-Tailwind-informational?style=flat&amp;amp;logo=Tailwind-CSS&amp;amp;logoColor=white&amp;amp;color=4AB197&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;![](&lt;/span&gt;&lt;span class="sx"&gt;https://img.shields.io/badge/Style-Sass-informational?style=flat&amp;amp;logo=Sass&amp;amp;logoColor=white&amp;amp;color=4AB197&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;![](&lt;/span&gt;&lt;span class="sx"&gt;https://img.shields.io/badge/Style-Stylus-informational?style=flat&amp;amp;logo=Stylus&amp;amp;logoColor=white&amp;amp;color=4AB197&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;/details&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To see the full list of badges I used in the &lt;code&gt;README.template.md&lt;/code&gt; file, click &lt;a href="https://raw.githubusercontent.com/braydoncoyer/braydoncoyer/main/README.template.md"&gt;HERE&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-office-quote" class="anchor"&gt;
  &lt;/a&gt;
  The Office Quote
&lt;/h3&gt;

&lt;p&gt;Before visitors leave my profile I wanted to end their experience with something unique and with a personal touch. Very much like the blog post section, a GitHub Action workflow will run a script that will look for a pattern in the &lt;code&gt;README.template.md&lt;/code&gt; and inject a random quote.&lt;/p&gt;

&lt;p&gt;I put the following pattern in the Office quote section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{office_quote}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{office_character}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

Check back at the top of the hour for a new quote!
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With that, the static content is complete and satisfies the goals I listed for my profile.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In the next article, I’ll show you how I created my GitHub Action workflow and injected the dynamic content into the &lt;code&gt;README.md&lt;/code&gt; file!&lt;/p&gt;

&lt;p&gt;Thanks for reading! If you liked this article and want more content like this, &lt;a href="https://braydoncoyer.dev/newsletter/"&gt;subscribe to my newsletter&lt;/a&gt; and make sure to follow me on &lt;a href="https://twitter.com/BraydonCoyer"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;




&lt;p&gt;&lt;em&gt;&lt;a href="https://api.daily.dev/get?r=devto"&gt;daily.dev&lt;/a&gt; delivers the best programming news every new tab. We will rank hundreds of qualified sources for you so that you can hack the future.&lt;/em&gt;&lt;br&gt;
&lt;a href="https://api.daily.dev/get?r=devto"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GnRWXIbg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b996k4sm4efhietrzups.png" alt="Daily Poster"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>markdown</category>
      <category>webdev</category>
      <category>readme</category>
    </item>
    <item>
      <title>Additional Hooks in React - useReducer()</title>
      <author>Olena Drugalya</author>
      <pubDate>Tue, 19 Jan 2021 16:46:34 +0000</pubDate>
      <link>https://dev.to/olenadrugalya/additional-hooks-in-react-usereducer-10ef</link>
      <guid>https://dev.to/olenadrugalya/additional-hooks-in-react-usereducer-10ef</guid>
      <description>&lt;p&gt;This blog post continues the series about &lt;a href="https://reactjs.org/docs/hooks-reference.html"&gt;React Hooks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It covers one of additional hooks in React - &lt;strong&gt;useReducer()&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-usereducer" class="anchor"&gt;
  &lt;/a&gt;
  What is useReducer()?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;useReducer()&lt;/strong&gt; is JavaScript function, which allows to use  reducer functions from state management in &lt;em&gt;functional component&lt;/em&gt;.  It is an alternative to &lt;code&gt;useState()&lt;/code&gt; hook and as react developers say : "New one and improved" :)&lt;/p&gt;

&lt;p&gt;Before you read any further, you should be familiar with &lt;a href="https://olena.hashnode.dev/managing-state-with-react-context"&gt;state management&lt;/a&gt; and &lt;a href="https://redux.js.org/tutorials/fundamentals/part-3-state-actions-reducers"&gt;reducers&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-and-when-use-usereducer" class="anchor"&gt;
  &lt;/a&gt;
  How and when use useReducer()
&lt;/h2&gt;

&lt;p&gt;To use this hook, you need to import it first from React library like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can use this hook without import as well like this - &lt;code&gt;React.useReducer()&lt;/code&gt;, for me it's just more convenient to import and destructure first this function and then use it when need in the code.&lt;/p&gt;

&lt;p&gt;Afterwards we can set up this hook like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let's examine this example  more detailed. &lt;/p&gt;

&lt;p&gt;NOTE: If you are familiar with Redux, you already know how it works&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;useReducer&lt;/strong&gt; hook :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; accepts &lt;em&gt;reducer function&lt;/em&gt; and &lt;em&gt;initial state&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;returns &lt;em&gt;current state&lt;/em&gt; and &lt;em&gt;dispatch method&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's consider the following example - we are building an app which is a simulation of the farm. &lt;/p&gt;

&lt;p&gt;Here’s a store of data, where we have four hungry animals (this is our &lt;code&gt;initialState&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;horse&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isHungry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sheep&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isHungry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isHungry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pig&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isHungry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let’s create a &lt;code&gt;reducer&lt;/code&gt; to feed them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animalsReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;feed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;animals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animal&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;specificAnimal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isHungry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;giveWater&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;animals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animal&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;specificAnimal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isHungry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, the important thing to notice here is what we pass to our &lt;code&gt;animalsReducer&lt;/code&gt; function: our &lt;strong&gt;initial state&lt;/strong&gt; (animals) and &lt;strong&gt;action&lt;/strong&gt; (you could think of this as a setState method). The &lt;code&gt;action.type&lt;/code&gt; identifies what type of action we want to do and &lt;code&gt;action.specificAnimal&lt;/code&gt; identifies for us which animal we want to perform the action on.&lt;/p&gt;

&lt;p&gt;Now that we have our reducer and store setup, let’s implement them with our &lt;strong&gt;useReducer()&lt;/strong&gt; hook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animalsReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;animals&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And finally let's implement our &lt;code&gt;dispatch&lt;/code&gt; functions and use them in JSX:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;feed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animalType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;feed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;specificAnimal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;animalType&lt;/span&gt; &lt;span class="p"&gt;});}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;giveWater&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animalType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;giveWater&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;specificAnimal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;animalType&lt;/span&gt; &lt;span class="p"&gt;});}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;50%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;space-around&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isHungry&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;NOT HUNGRY! &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;feed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; feed &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;HUNGRY&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;giveWater&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;animal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; give water&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The dispatch method receives an object that represents the action we desire to be done. We pass our action to our reducer through the useReducer. Our reducer returns updated state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  CONCLUSION
&lt;/h2&gt;

&lt;p&gt;You can use &lt;code&gt;useState&lt;/code&gt; in the same component or hook that's using &lt;code&gt;useReducer&lt;/code&gt; and you can have multiple useStates and multiple useReducers in a single hook or component.&lt;br&gt;
&lt;strong&gt;useReducer&lt;/strong&gt; is usually preferable to &lt;strong&gt;useState&lt;/strong&gt; when you have complex state logic that involves multiple sub-values or when the next state depends on the previous one. &lt;br&gt;
useReducer also lets you optimize performance for components that trigger deep updates because you can pass dispatch down instead of callbacks.&lt;/p&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to connect on &lt;a href="https://www.linkedin.com/in/olenadrugalya/"&gt;LinkedIn&lt;/a&gt; or &lt;a href="https://twitter.com/OlenaDrugalya"&gt;Twitter&lt;/a&gt; :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ko-fi.com/J3J42JOOA"&gt;&lt;img height="12" width="30%" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KS7c42cU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.ko-fi.com/cdn/kofi1.png%3Fv%3D2" alt="Buy Me a Coffee at ko-fi.com"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Server Rendering in JavaScript: Optimizing for Size</title>
      <author>Ryan Carniato</author>
      <pubDate>Tue, 19 Jan 2021 16:02:13 +0000</pubDate>
      <link>https://dev.to/ryansolid/server-rendering-in-javascript-optimizing-for-size-3518</link>
      <guid>https://dev.to/ryansolid/server-rendering-in-javascript-optimizing-for-size-3518</guid>
      <description>&lt;p&gt;Continuing from where &lt;a href="https://dev.to/ryansolid/server-rendering-in-javascript-why-ssr-3i94"&gt;Server Rendering in JavaScript: Why SSR?&lt;/a&gt; left off I want to talk about the different techniques JavaScript Frameworks are using Server Rendering to optimize the performance of their websites and applications. There are numerous techniques and every framework has its own take.&lt;/p&gt;

&lt;p&gt;In this article, we will cover all things related to size. The amount of JavaScript you ship to the client can be heavy on the network, and it can be heavy on the CPU when you consider both parsing and execution. &lt;/p&gt;

&lt;p&gt;So how are frameworks optimizing for bundle size? Last time we talked about Code splitting what else is being done?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#encoding-view-code" class="anchor"&gt;
  &lt;/a&gt;
  Encoding View Code
&lt;/h1&gt;

&lt;p&gt;This is the idea that we can compress our Components even further than the executable JavaScript when shipping over the wire.&lt;/p&gt;

&lt;p&gt;I am referring to things like &lt;a href="https://engineering.linkedin.com/blog/2017/12/the-glimmer-binary-experience"&gt;Glimmer's ByteCode&lt;/a&gt; or &lt;a href="https://prepack.io/"&gt;Facebook's Prepack&lt;/a&gt;. The idea is that if you can codify the instructions into fewer characters, and possibly even pre-solve parts of it the way you would reduce an algebraic equation. If you haven't seen Prepack you should &lt;a href="https://prepack.io/repl.html"&gt;try it out&lt;/a&gt; you are in for a bit of a treat.&lt;/p&gt;

&lt;p&gt;While the Prepack experiments haven't yet borne fruit, Facebook is back at it again with React having come up with a serialized form of their VDOM representation of their &lt;a href="https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html"&gt;Server Components&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These techniques clearly benefit Virtual DOM libraries where our views are a series of instructions. LinkedIn reported a 50% reduction in component size, but size isn't the only benefit here. JavaScript is about the most expensive things to parse in the browser.&lt;/p&gt;

&lt;p&gt;But what about non-VDOM libraries? At first thought, you might think of a compiler like &lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt; or &lt;a href="https://github.com/ryansolid/solid"&gt;Solid&lt;/a&gt;. But this is not the same thing. While they reduce the code into real DOM instructions, which allows them to have a much smaller core runtime, this approach can actually increase the code size per component. &lt;/p&gt;

&lt;p&gt;However, libraries that use the real DOM have other ways to optimize component code size. One such way is Template Cloning(using DOM Template Element) the static parts that can drastically reduce the number of instructions. In so most of your components can be encoded as strings that already benefit from being Gzipped. As it turns out template cloning is more performant than creating nodes one at a time.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#partial-hydration" class="anchor"&gt;
  &lt;/a&gt;
  Partial Hydration
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Uq1XW1UU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/70db133i2k9il2e98opj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Uq1XW1UU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/70db133i2k9il2e98opj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When a server-rendered page arrives in the browser and we want to attach the interactive JavaScript to it we call this hydration. It's a lot like the first render of a client rendered application. We traverse the whole application creating components and state, attaching event handlers, but we don't re-create the DOM nodes.&lt;/p&gt;

&lt;p&gt;However, do we really need all those components in the browser if we rendered everything on the server? The answer is often no. There are plenty of examples of static parts like headers, footers, navigation. In so you can view the interactive parts of the page as isolated &lt;a href="https://jasonformat.com/islands-architecture"&gt;islands&lt;/a&gt;. This can reduce code size dramatically.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kSO9MUN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/614hsmf7qnfeevs9k0gq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kSO9MUN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/614hsmf7qnfeevs9k0gq.png" alt="Effect of Partial Hydration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;eBay's Marko Team ran some tests toggling the Partial Hydration off on a few pages of the eBay website.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To understand how this works, I find it easiest to imagine there are 3 types of components. The topmost components like the page itself and header and footer are "Server" components that are completely static and do not need to be sent to the browser. The next set are "Stateful" Components which can be rendered completely on the server but have local state, event handlers, things that cause them to update. Finally we have "Client" components that need to be completely rendered in browser.&lt;/p&gt;

&lt;p&gt;However, every framework has its own way of handling these. For most VDOM libraries there is no difference between "Stateful" and "Client" components because they need to build the VDOM tree anyway. For reactive libraries with Template Cloning, there is very little difference between "Server" and "Stateful" components since they can skip shipping the template in either case and only have as much code as is needed to hydrate which for "Server" components is basically none.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Vue being both reactive and a VDOM uses a similar static hoisting method with string encoded views. While it might not be able to leverage being able to hydrate at a sub-component level it can still reduce the majority of code without the complexity of moving application entry points.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To pull this off, at build time analysis or heuristics (perhaps a file naming convention, or config file) are used to ensure the client bundle does not get the unneeded code. Alternatively, it can be manual by creating your own roots. Custom Elements can actually a pretty good tool for this, bringing their interactivity in a sea of native elements client or server(with the right library).&lt;/p&gt;

&lt;p&gt;This is an area that frameworks are working on improving. &lt;a href="https://markojs.com/"&gt;Marko&lt;/a&gt; is the only framework today that &lt;a href="https://medium.com/@mlrawlings/maybe-you-dont-need-that-spa-f2c659bc7fec"&gt;automatically handles this&lt;/a&gt; for the end-user without any manual intervention.&lt;/p&gt;

&lt;p&gt;Unfortunately, it isn't always that simple. And I know what we have covered so far is not simple, but there is more. In the example above, eBay is not a single page application. Even though there are interactive portions and places that need to redraw, primary navigation is handled by rendering new pages from the server.&lt;/p&gt;

&lt;p&gt;As you have probably realized by now is once you need to render the page in the browser you need to bring all the JavaScript code. Even if you don't need all the JavaScript initially you will need it if you navigate back to that page. They all become "Client" components.&lt;/p&gt;

&lt;p&gt;Perhaps the most obvious way to address this is to create multiple bundles. You aggressively partially hydrate the initial page even under the router, and then load full client renderable bundles for any navigation later, including back to the original page. This can deliver on the promise of Partial Hydration and less JavaScript on initial load. But it does mean code duplication. You will eventually be sending (different versions of the) the same Components twice. But after the fact maybe that's ok. Vue has been &lt;a href="https://youtu.be/xXrhg26VCSc?t=2803"&gt;exploring this approach with VitePress&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html"&gt;React Server Components&lt;/a&gt; have an interesting take here. Just continue to render these portions on the server even after the first load. We can load our client router in the browser but then re-render each nested page on the server. So we can regain our Islands below the client router and our pages can return to being mostly static even with a SPA.&lt;/p&gt;

&lt;p&gt;Interestingly both of these approaches require special consideration around routing and in React's case a dedicated backend solution.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#analysis" class="anchor"&gt;
  &lt;/a&gt;
  Analysis
&lt;/h1&gt;

&lt;p&gt;Naturally, the first thing I want to do is put these to the test, but it would be anecdotal at best. The first thing that came to mind was the comparison of &lt;a href="https://github.com/halfnelson/svelte-it-will-scale"&gt;Svelte Component Scaling compared to React&lt;/a&gt;. Some sort of test to see how much difference a small library that ignored all this compared to a large library that didn't.&lt;/p&gt;

&lt;p&gt;Something like byte code might reduce size for a VDOM but is it smaller than GZip compression on a string. Which is more expensive to parse? Is it worth the extra client-side code to handle this? The same goes for topics around server components and partial hydration. At what point does a now larger, 50kb React intersect with a 4kb library?  &lt;/p&gt;

&lt;p&gt;But these are limited comparisons. If the eBay example earlier is any indicator these numbers can vary greatly. Real large apps have a lot more code than even the component code. It's the 3rd party libraries. No toy demo/benchmark is going to demonstrate this. The biggest win is not just not shipping the component code but not shipping heavy libraries.&lt;/p&gt;

&lt;p&gt;That is a pretty good case for React Server Components which can avoid ever shipping certain JavaScript to the client. Marko's multi-page approach also achieves this. Of course, there are other ways to offload work to the server. Also if it doesn't block initial hydration, loading the rest of the JS after can not be terribly detrimental assuming it can be cached afterward. I will look more at performance optimization in the next article.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;The thing to remember about size is, with pretty much every technique your mileage will vary based on the nature of pages you have and the scale of the project. There are plenty of applications where these techniques are not worth the effort. Sometimes due to the framework. Sometimes due to a highly dynamic nature so there are minimal gains. Sometimes a different architecture is more beneficial and is simpler.&lt;/p&gt;

&lt;p&gt;This is a pretty tricky thing to test/benchmark independently. So it might be best to look at examples holistically. Even tree shaking already makes tools like &lt;a href="https://bundlephobia.com/"&gt;Bundlephobia&lt;/a&gt; limited in their use. There are libraries consistently producing smaller bundles than those half their size.&lt;/p&gt;

&lt;p&gt;But know every framework is working on mechanisms to address size. It will be interesting to see how effective they will be as more continue to release their versions over the coming year.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>webperf</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Becoming A Software Developer</title>
      <author>Kira McLean</author>
      <pubDate>Tue, 19 Jan 2021 15:25:54 +0000</pubDate>
      <link>https://dev.to/kiraemclean/becoming-a-software-developer-1og2</link>
      <guid>https://dev.to/kiraemclean/becoming-a-software-developer-1og2</guid>
      <description>&lt;p&gt;I get asked a lot for advice on becoming a software developer. I didn't study anything related to software in university, but now it's what I do for a living. I also spent about 3.5 years mentoring with &lt;a href="https://www.lighthouselabs.ca"&gt;Lighthouse Labs&lt;/a&gt;, a local web development bootcamp, and watched (and would like to believe at least in some cases, helped) hundreds of people of every age from wildly diverse backgrounds get jobs as software developers.&lt;/p&gt;

&lt;p&gt;This is my advice for people with no technical experience who want to land their first job writing software. It's based on my experience as both a person who did it myself and as a mentor to other people who did it. There's no single right way to go about this, and no matter how you do it's a lot of work. But these are some things that have worked for other people, myself included. These suggestions are arranged roughly in order, but of course many overlap and kind of happen at the same time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#know-what-youre-getting-yourself-into" class="anchor"&gt;
  &lt;/a&gt;
  Know what you're getting yourself into
&lt;/h2&gt;

&lt;p&gt;Software engineering is nothing like I expected it to be. All the hard parts involve dealing with people. Part of my original motivation for choosing a career in software was thinking I wouldn't have to deal much with people. I wasn't very good at it and didn't enjoy it, but my fantasy of just sitting in front of my computer all day and watching my bank account fill up was totally delusional.&lt;/p&gt;

&lt;p&gt;The reality of writing code for a living, in my experience, includes dealing with a lot of office politics, entitled middle managers, stressed out co-workers, and yes, condescencion and occasional harassment (especially if you're not male). I find the culture of the tech industry generally toxic and abusive and it has very nearly broken my spirit on multiple occasions.&lt;/p&gt;

&lt;p&gt;You won't be alone dealing with this. Your co-workers and countless people across the industry share the experience. And it is ultimately bearable.&lt;/p&gt;

&lt;p&gt;I don't say this to discourage anyone from getting into software, but just to highlight that the stuff you hear from recruiters is bullshit. It's not all free trips and fancy perks and big paycheques. It is those things, sure, but the reality is much less glamorous than they make it sound.&lt;/p&gt;

&lt;p&gt;Being a software developer means getting paid to solve other people's problems. The rest is fluff. This makes it a solid career path, though, because other people have a lot of problems.&lt;/p&gt;

&lt;p&gt;It is still an empowering and lucrative career. Despite my generally negative view of the industry, I still highly recommend and help people into a career in software regularly. Most individual software developers, like most people, are genuine and kind. And I can't speak to problems in other industries first hand, but I gather most high-paying, male-dominated industries are pretty similar anyway.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#meet-lots-of-people" class="anchor"&gt;
  &lt;/a&gt;
  Meet lots of people
&lt;/h2&gt;

&lt;p&gt;I was referred to three of the four programming jobs I've had so far through friends. I made friends with those people who were already programmers at meetups. I didn't ask them to get me a job, but a lot of companies are pretty much always looking for new software engineers, so when your friend hears you're looking for that kind of job, they can bring it up at work. I still did interviews, but it makes an enormous difference when someone the boss already knows and trusts can vouch for you.&lt;/p&gt;

&lt;p&gt;A word on meeting strangers. I, like many people who are into nerd things like software, am the most introverted person I know. I found hanging out in groups of new people excruciating at first, but honestly learning how to not be awkward around strangers is just as important as learning how to code if you want to do well in your career. I just went to the meetups and stood off to the side, awkwardly making eye contact with a few random people. Eventually a friendly extrovert would come up and initiate a conversation, and before I knew it I could hold my own in a crowd.&lt;/p&gt;

&lt;p&gt;Check out meetups for programming languages you're interested in, or if there aren't those kinds of groups where you live, join online communities. Most programming languages have a slack or discord server where people hang out, and in my experience people are usually very welcoming and kind to newbies (at least in the Ruby, Elixir, and Clojure communities; all of which I highly recommend).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-how-to-code-in-public" class="anchor"&gt;
  &lt;/a&gt;
  Learn how to code, in public
&lt;/h2&gt;

&lt;p&gt;Without any formal education in software development, you have to offer something else to prove you actually know how to write code. I did this by building a bunch of crappy side projects. The very first thing I ever did was replicate the Google landing page with HTML and CSS. The first actual app I made was a blackjack game with Sinatra. I also made Twitter and Reddit clones with Rails, and little browser games like Pacman with different JavaScript frameworks. Some of that code still exists in my &lt;a href="https://github.com/kmclean-old"&gt;GitHub graveyard&lt;/a&gt; if you want to see what I mean by crappy. Other common toy projects include link shorteners, photo galleries, e-commerce stores, time trackers, or clones of whatever software you normally use, like spreadsheets, workflow management, calendars, etc. The possibilities are endless.&lt;/p&gt;

&lt;p&gt;Look for tutorials online that walk through how to build the kinds of things you're interested in. If you don't know where to start, &lt;a href="https://www.theodinproject.com"&gt;The Odin Project&lt;/a&gt; and &lt;a href="https://www.freecodecamp.org"&gt;Free Code Camp&lt;/a&gt; are two free programs that offer very realistic learning roadmaps. I did parts of both of those but never finished either. I also did several free courses on &lt;a href="https://www.coursera.org/browse/computer-science"&gt;Coursera&lt;/a&gt; and &lt;a href="https://www.edx.org/course/subject/computer-science"&gt;edX&lt;/a&gt;, which are both amazing but you have to be careful not to end up in a rabbit hole. Those two mostly have actual university courses, which are super interesting, but not very relevant to things you'll do in a real job.&lt;/p&gt;

&lt;p&gt;If your goal is to get from nothing to making money as a developer as fast as possible I recommend sticking to a more targeted learning roadmap like the two above. There are also countless paid ones which vary wildly in price and quality. Be weary about shelling out huge amounts of money for bootcamps. I did pay for a few months of &lt;a href="https://launchschool.com"&gt;Launch School&lt;/a&gt; (which at the time was called "Tea Leaf Academy"), and it was the best career move I ever made. I highly recommend them because they're in a sweet spot of offering a robust and relevant curriculum without costing a fortune. It's not free ($200/month), but a few hundred dollars is a very small investment in the scheme of your career. Apparently they also offer a deferred payment option now, too.&lt;/p&gt;

&lt;p&gt;The career-oriented bootcamps will also teach you loads of useful practical things they don't teach in the free university courses, like version control (git), testing, and how to collaborate with other developers on one project.&lt;/p&gt;

&lt;p&gt;It took me 6 months of studying, meeting people, and building crappy software full time before I got my first internship. &lt;a href="https://www.lighthouselabs.ca/student-outcomes"&gt;95% of Lighthouse Labs graduates&lt;/a&gt; are employed as software developers in that timeframe. Launch School delivers &lt;a href="https://launchschool.com/results"&gt;impressive, concrete results&lt;/a&gt; for many of their students, too. I never finished most of the courses or programs I started. I funded that time off by living like a peasant on money I made running one of those student painting businesses the previous summer. Learning to code can feel like a slog at times, but just stick with it and you're very likely to be among the vast majority who succeed at this self-educated developer thing. It is a totally achievable and realistic goal and you're in good company.&lt;/p&gt;

&lt;p&gt;Other than doing free online courses and building apps from tutorials, other ways I learned in public during this time included blogging about my learning journey, making myself a portfolio website to showcase my little projects, and volunteering with some local tech communities. Do what works for you, but focus on ending up with at least a few medium sized projects you can show someone to prove you know how to make software that works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-best-practices" class="anchor"&gt;
  &lt;/a&gt;
  Learn best practices
&lt;/h2&gt;

&lt;p&gt;A surprising number of experienced developers still write really horrible code. Spend some time learning about software design and software engineering best practices to avoid becoming one of them. How you do that depends a lot on how you learn. (BTW, you should figure that out before you embark upon a journey of self-re-education for a career change). I absorb a lot from reading and prefer to learn by studying theory over trial and error, so reading and watching talks works really well for me. YMMV and you do ultimately just need experience to really get this stuff, but you don't have to start from scratch.&lt;/p&gt;

&lt;p&gt;Read "The Pragmatic Programmer" by Dave Thomas and Andrew Hunt, and anything by Sandi Metz. Watch Rich Hickey's talks, especially "&lt;a href="https://www.infoq.com/presentations/Simple-Made-Easy/"&gt;Simple Made Easy&lt;/a&gt;", and Sarah Mei's "&lt;a href="https://brightonruby.com/2017/livable-code-sarah-mei/"&gt;Livable Code&lt;/a&gt;". Other classics include Eric Evans' "Domain Driven Design" and Martin Fowler's "Refactoring". There are countless others and everyone has their opinion about what should be included in the software engineering canon, but these are my recommendations. They'll provide a solid foundation and ample fodder for further reading and watching.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pour-your-heart-out" class="anchor"&gt;
  &lt;/a&gt;
  Pour your heart out
&lt;/h2&gt;

&lt;p&gt;Once you can write code that mostly works, start looking for a job. Put the word out that you're seeking your first role writing software. Hopefully one of your programmer friends will know about an open position, but you can still apply to random jobs on the internet, too. This has a very low success rate, but it's possible. I got one of my four jobs by firing my resume into the abyss. I included a very long and heartfelt cover letter about how I loved programming so much and really wanted to work for this specific company (which I did), and how I learn fast and really believed I could do the job if they'd give me a chance.&lt;/p&gt;

&lt;p&gt;It worked. The hiring manager said my letter caught his attention. I had one year of experience at that time and had never worked remotely before, but I got the job.&lt;/p&gt;

&lt;p&gt;Don't be afraid to be authentic. Don't lie and say you know more than you do, but don't sell yourself short, either. Bootstrapping a career in software is no small feat and there are many teams out there who would love to hire the kinds of self-starting fast learners who do it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-be-too-picky-at-first" class="anchor"&gt;
  &lt;/a&gt;
  Don't be too picky (at first!)
&lt;/h2&gt;

&lt;p&gt;The reality is that your first job or two will probably be pretty crappy and underpaid. At this point you're trying to convince someone to take a chance on you, and it's a trade off between your dignity and your future career. In the very beginning, you should prioritize gaining experience over almost everything else. Obviously never put up with anything you're uncomfortable with, but if you can stick it out it's worth setting the bar pretty low just to get your first few months of real job experience, IMHO.&lt;/p&gt;

&lt;p&gt;I lucked out and worked with the most amazing team in the world for my first job as a developer, but I discovered from the students I mentored that that is very much not the norm.&lt;/p&gt;

&lt;p&gt;There are pros and cons to every kind of company, so don't worry too much about finding the perfect fit right away. Focus on gaining experience at first so you can have the freedom to focus on finding the perfect fit later. I've worked with a few different kinds of companies and there are pros and cons no matter where you go.&lt;/p&gt;

&lt;p&gt;Big corporations usually have a lot of experienced developers and lethargic processes, so there's more opportunity to take your time and get help from people more advanced than you. The pressure is often pretty low because people have such low expectations for new developers, which honestly is fair. You have a lot of room to screw up because you're such a tiny cog in a massive machine. The downsides depend on your personality. For me it was that I find most large tech companies to be evil and didn't like the soul-crushing feeling of helping to build something I hated.&lt;/p&gt;

&lt;p&gt;Startups usually have fewer people available to be mentors, but more opportunity to take on disproportionate responsibility for your level, which can be an amazing learning experience in a different way. You also have a lot of room to screw up, but it's more because your screw ups just blend in with the overall culture of moving fast and breaking things. I now believe that's a ridiculous way to run a business, but when there's widespread acceptance of breaking even important things, you have a lot freedom to experiment and learn by trial and error.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-a-good-student" class="anchor"&gt;
  &lt;/a&gt;
  Be a good student
&lt;/h2&gt;

&lt;p&gt;Lastly, once you finally land your first job, be a good student. Treat your first year or two on the job like paid education, not your chance to go in and show everyone how it's done. You know way less than you think, and you have no idea what it takes to build functioning software systems, let alone to deploy or maintain them. Always be humble and eager to learn. Soak up every minute of attention you get from more experienced developers around you and learn from them. Not everything they say is wise or true, but pay attention and copy the things that work whilst ignoring the things that clearly don't.&lt;/p&gt;

&lt;p&gt;Learn how to ask good questions. Don't be afraid to ask for help, but before you do, at least try to figure out the problem yourself. Write down what you tried, and explain why you're surprised your attempt didn't work.&lt;/p&gt;

&lt;p&gt;There are certain things you can only really learn from experience on a real world project, so see what opportunities there are to learn those things, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;securing and backing up actual important customer data&lt;/li&gt;
&lt;li&gt;deploying a huge app with no downtime&lt;/li&gt;
&lt;li&gt;refactoring large, messy, legacy codebases&lt;/li&gt;
&lt;li&gt;adding new features to large, messy, legacy codebases&lt;/li&gt;
&lt;li&gt;fixing obscure bugs with no instructions to reproduce them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are just a few examples of things you won't run into on your little demo projects. Pay attention to the problems you're dealing with at work that you don't run into on side projects and learn how to fix those. That's your pathway to levelling up. Most importantly, never stop learning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-all" class="anchor"&gt;
  &lt;/a&gt;
  That's all
&lt;/h2&gt;

&lt;p&gt;Software development is a great career. It's allowed me to be financially independent and stable, travel the world, meet cool people, and lots more. My path won't work for everyone. There are as many different ways to become a software developer as there are people, but I've seen countless aspiring software engineers go through their own journeys and many of them touch on these points, so see how they fit in to your own path. And let me know how it goes 🙂&lt;/p&gt;

</description>
      <category>education</category>
      <category>career</category>
      <category>beginners</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Why visual novel game development matters to me</title>
      <author>Diana Chin</author>
      <pubDate>Tue, 19 Jan 2021 15:23:17 +0000</pubDate>
      <link>https://dev.to/redlotusdesignz/why-visual-novel-game-development-matters-to-me-4819</link>
      <guid>https://dev.to/redlotusdesignz/why-visual-novel-game-development-matters-to-me-4819</guid>
      <description>&lt;p&gt;Hello friends and welcome to the New Year! It’s been a while since my last post as I’ve been managing a busy schedule between my full-time job as a support engineer and helping my son with his remote learning.&lt;/p&gt;

&lt;p&gt;For this article, I’m focusing on visual novel game development and why it matters to me tremendously. Since 2018, I was introduced to visual novel programming when I wanted to make a simple game featuring my cow character from my webcomics. Though my art style has changed throughout the years, I’m happy that I’ve managed to keep on learning new techniques. The satisfaction behind combining code and art makes it worthwhile to share my projects. &lt;/p&gt;

&lt;p&gt;I’ve played a good amount of visual novel games, and I can tell you that it amazes me to see so many different interactive stories. I enjoy supporting other visual novel developers who are creating their unique games. &lt;/p&gt;

&lt;p&gt;I’ll be honest - I’ve had some folks who berated my projects since they believe that visual novel game development isn’t real development. And that’s because it falls under the assumed notion that anytime we think of game development, it’s easy and shouldn’t require a lot of brainpower. &lt;/p&gt;

&lt;p&gt;I’m here to tell you that it’s not the case. Game development, just like any other development field, requires the ability to plan and develop your project through phases. No matter the language/framework involved, you’re building a functional piece of software. It’ll require testing, rewriting code, testing it again, maybe refactor to keep the code neat and tidy, and the cycle pretty much repeats itself until you’re satisfied with the end result. &lt;/p&gt;

&lt;p&gt;Visual novel games, to me, is a beautiful marriage of code and storytelling. As I’ve to use Ren’Py for developing my games, I can incorporate some Python scripts, if needed. I’m also utilizing my own writings and art assets in creating my story. To me, it’s a labor of love and I’m in awe of how the pieces interact with each other to make the game come to life. &lt;/p&gt;

&lt;p&gt;My end goal for creating visual novel games is simple - to make others smile. Money isn’t a motivator when I build my games. I just love creating them. &lt;/p&gt;

&lt;p&gt;If you're an aspiring visual novel game developer and don't know where to start, you can check out my series on  &lt;a href="https://hashnode.com/series/lets-build-a-simple-visual-novel-game-using-renpy-ckfe5jbdn018k65s1fj0r30gp"&gt;creating a simple visual novel game using Ren'Py&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading my article! If you happen to like it, I appreciate your thoughts in the comments section. Lastly, don't forget to follow me on my visual novel game development, test automation adventures, and webcomics via &lt;a href="http://twitter.com/redlotusdesignz"&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>devjournal</category>
      <category>python</category>
    </item>
    <item>
      <title>Customizing the scrollbar with CSS</title>
      <author>Nikki</author>
      <pubDate>Tue, 19 Jan 2021 15:17:15 +0000</pubDate>
      <link>https://dev.to/nikkipeel/customizing-the-scrollbar-with-css-1ei7</link>
      <guid>https://dev.to/nikkipeel/customizing-the-scrollbar-with-css-1ei7</guid>
      <description>&lt;p&gt;Have you ever noticed the intricacies of the websites you visit? You can style just about every pixel of it, including the scrollbar. I was curious about how to go about this and found that it could be accomplished with just a few lines of CSS. &lt;/p&gt;

&lt;p&gt;Here's what we'll build in Codepen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D7UkZ5a---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y3psdt0zzi0q6kjjdzcc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D7UkZ5a---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y3psdt0zzi0q6kjjdzcc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to the final project: &lt;a href="https://codepen.io/nikki-peel/pen/oNzmEMa"&gt;CodePen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Three boxes containing overflowing text content will all be scrollable but styled differently. The first &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; will have content be scrollable while the scrollbar itself is hidden. The second &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; will have a styled scrollbar that is always visible. The third &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; will have a styled scrollbar but only display it when the &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; is focused upon.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-the-three-sections-with-text-content" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Create the three sections with text content&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;First, create three &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; elements and within those sections create a paragraph containing a long string of text (I used 4 paragraphs of dummy text, enough to create overflow). I also chose to label each &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; with an &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;section&amp;gt;
  &amp;lt;h1&amp;gt;Hidden&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
    &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
     &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
  &amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;

&amp;lt;section&amp;gt;
  &amp;lt;h1&amp;gt;Styled&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
    &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
     &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
  &amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;

&amp;lt;section&amp;gt;
  &amp;lt;h1&amp;gt;Hidden-until-focused&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
    &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
    &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
     &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
  &amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-base-styles-with-css" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Create base styles with CSS&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Next, you'll want to create some basic styling:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:root {
  --white: #f8f5f2;
  --teal: #00E8F0;
  --magenta: #CC0088;
  --purple: #54086B;
  --gradient: linear-gradient(to top left, var(--purple), var(--magenta));
}

body {
  display: flex;
  justify-content: space-evenly;
  background: var(--gradient);
  color: #121212;
  width: 90vw;
  height: 100vh;
  margin: 2rem auto;
}

section {
  display: block;
  background-color: var(--white);
  border-radius: 5px;
  height: 60vh;
  overflow-y: auto;
  margin: 0 1rem;
  padding: 2rem;
  border: 3px solid #121212;
}

p {
  line-height: 1.35;
  font-family: sans-serif;
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I decided to use custom properties for the colors in this project and declared them first at the top of the file (this is optional of course). Next, we'll use Flexbox to style the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; using display: flex and space the sections evenly using &lt;code&gt;justify-content: space-evenly&lt;/code&gt;. I also added margin to the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; so that the sections would be centered horizontally with a bit of space on top and bottom as well: &lt;code&gt;margin: 2rem auto&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body {
  display: flex;
  justify-content: space-evenly;
  background: var(--gradient);
  color: #121212;
  width: 90vw;
  height: 100vh;
  margin: 2rem auto;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The sections each have a &lt;code&gt;height&lt;/code&gt; of 60vh with a &lt;code&gt;border-radius&lt;/code&gt; of 5px for rounded corners. I added some padding to the &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; as well so that there is a nice amount of whitespace. You want to make sure you declare &lt;code&gt;overflow-y: auto&lt;/code&gt; when styling your sections so that they are scrollable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;section {
  display: block;
  background-color: var(--white);
  border: 3px solid #121212;
  height: 60vh;
  border-radius: 5px;
  overflow-y: auto;
  margin: 0 1rem;
  padding: 2rem;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The only styling I chose for the paragraph elements was a line-height of 1.35 and changing the font-family to sans-serif:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p {
  line-height: 1.35;
  font-family: sans-serif;
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#styling-the-scrollbar-component" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Styling the scrollbar component&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Now it's time for the fun part! In order to select the scrollbar, we'll use the pseudo-element &lt;code&gt;::webkit-scrollbar&lt;/code&gt; on our &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; element to indicate that we want to use a custom scrollbar and assign it a &lt;code&gt;width&lt;/code&gt; of 1.25em:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: if you plan to use a horizontal scroll bar instead (or in addition to) you'll need to declare a &lt;code&gt;height&lt;/code&gt; for the scrollbar&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;section::-webkit-scrollbar {
width: 1.25em;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we can style the 'track' of the scrollbar using &lt;code&gt;::-webkit-scrollbar-track&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;section::-webkit-scrollbar-track {
  border-radius: 1.5px;
  background-color: var(--teal);
  -webkit-box-shadow: inset 0 0 8px rgba(0,0,0,0.3);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I added a small &lt;code&gt;border-radius&lt;/code&gt; because the &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; container has rounded corners as well. You may also create an inner-shadow for the track using &lt;code&gt;box-shadow&lt;/code&gt; and the keyword 'inset'.&lt;/p&gt;

&lt;p&gt;Now that the &lt;code&gt;sidebar&lt;/code&gt; and &lt;code&gt;sidebar-track&lt;/code&gt; have been made we can add custom styling to the &lt;code&gt;sidebar-thumb&lt;/code&gt; (this is the element that moves along the track):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;section::-webkit-scrollbar-thumb  {
  height: 50px;
  border-radius: 10px;
  background-color: var(--magenta);
  -webkit-box-shadow: inset 0 0 8px rgba(0,0,0,0.3);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once again, we've added &lt;code&gt;border-radius&lt;/code&gt; for rounded corners and an inner-shadow on the element. Adding an explicit height here was also necessary because the height of the &lt;code&gt;scrollbar-thumb&lt;/code&gt; adapts to screen size and becomes too small of a target on mobile devices.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hiding-the-scrollbar" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Hiding the scrollbar&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Remember, we want to hide the scrollbar on the first &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; while still maintaining scroll. To do this, simply target the element by its ID (&lt;code&gt;#hidden&lt;/code&gt;) and write &lt;code&gt;display: none;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#hidden::-webkit-scrollbar {  
  display: none;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#hiding-the-scrollbar-until-focused" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Hiding the scrollbar until focused&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Styling the third &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; was a bit trickier. We don't want the scrollbar to show unless the section has been focused upon. First, you must target the element by its ID (&lt;code&gt;#inactive&lt;/code&gt;) and hide the overflowing content (this also hides the scrollbar!):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#inactive {
  overflow: hidden;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, target the element's &lt;code&gt;:focus&lt;/code&gt; state and change the overflow of the y axis to &lt;code&gt;auto&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#inactive:focus {
  overflow-y: auto;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you click or tap on the third section, you should now see our custom scrollbar appear!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-the-sections-tabbable-and-adding-raw-focus-endraw-styling" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Making the sections tabbable and adding &lt;code&gt;:focus&lt;/code&gt; styling&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;These next few steps are implemented so that the sections can be focused upon by keyboard users as well. The &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; element is not tabbable by default as is the case with input elements, buttons, and anchor tags. In order to fix this, I added a &lt;code&gt;tabindex&lt;/code&gt; to each of the sections within the HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;section id="hidden" tabindex="1"&amp;gt;&amp;lt;/section&amp;gt;
&amp;lt;section tabindex="2"&amp;gt;&amp;lt;/section&amp;gt;
&amp;lt;section id="inactive" tabindex="3"&amp;gt;&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, custom styling can be used to indicate more clearly whether an element has been focused upon. For this project, I applied &lt;code&gt;transition&lt;/code&gt; and &lt;code&gt;:focus&lt;/code&gt; styles globally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* {
    transition: all .3s ease;
}

*:focus {
  outline: 4px dotted var(--teal);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#finishing-touches" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Finishing touches&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;You may also wish to add a short note as I have to the third &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; indicating that the user must tap to view the content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;em&amp;gt;* tap to focus on small screens&amp;lt;/em&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In our CSS file, we can hide this element on large screens using a media query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;em {
  display: block;
}

@media screen and (min-width: 769px) {
  em {
    display:none;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we should add another media query so that our content collapses when viewed on small screens:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@media screen and (max-width: 768px) {
  body {
    display: flex;
    flex-direction: column;
  }

  section {
    margin: 1rem auto;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;First, we update our &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element to use &lt;code&gt;flex-direction: column&lt;/code&gt;. Next, adjust the margin on the &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; elements so that there is a vertical gap between them and they are centered horizontally: &lt;code&gt;margin: 1rem auto;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-html" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Final HTML:&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;section id="hidden" tabindex="1"&amp;gt;
  &amp;lt;h1&amp;gt;Hidden&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
    &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
     &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
  &amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;

&amp;lt;section tabindex="2"&amp;gt;
  &amp;lt;h1&amp;gt;Styled&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
    &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
     &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
  &amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;

&amp;lt;section id="inactive" tabindex="3"&amp;gt;
  &amp;lt;em&amp;gt;* tap to focus on small screens&amp;lt;/em&amp;gt;
  &amp;lt;h1&amp;gt;Hidden-until-focused&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
    &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
    &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
     &amp;lt;p&amp;gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Nobis, quod fugiat natus exercitationem totam eveniet sint. Officiis itaque minima unde facilis at aut nostrum, veniam amet natus perspiciatis laboriosam exercitationem adipisci laudantium nihil voluptatem assumenda animi, fugit est harum officia! Quas quae expedita nemo, qui fuga unde error commodi harum deserunt aut incidunt esse sed laudantium veritatis earum nobis, quisquam at optio perferendis. Sed, consectetur. Enim deserunt tempore sunt? Laudantium rerum dignissimos sunt animi molestias maiores reprehenderit esse quas laboriosam?
      &amp;lt;br/&amp;gt;
    &amp;lt;br/&amp;gt;
    Lorem, ipsum dolor sit amet consectetur adipisicing elit. Expedita incidunt minima fugiat obcaecati et repudiandae dolore delectus, perspiciatis odio harum! Eaque iste numquam facere voluptas aspernatur molestiae hic vitae ducimus! Ducimus rem assumenda autem! Impedit molestiae quibusdam possimus libero quasi sunt eius rerum, omnis labore unde illo repellendus soluta eveniet vitae voluptatum. Quidem, sit adipisci ratione natus inventore voluptate saepe soluta in! Ea nemo voluptatem perferendis fuga eligendi quas, modi eos architecto, cupiditate minima vel adipisci obcaecati quia debitis! Debitis!
  &amp;lt;/p&amp;gt;
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#final-css" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Final CSS:&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:root {
  --white: #f8f5f2;
  --teal: #00E8F0;
  --magenta: #CC0088;
  --purple: #54086B;
  --gradient: linear-gradient(to top left, var(--purple), var(--magenta));
}

* {
    transition: all .3s ease;
}

*:focus {
  outline: 4px dotted var(--teal);
}

body {
  display: flex;
  justify-content: space-evenly;
  background: var(--gradient);
  color: #121212;
  width: 90vw;
  height: 100vh;
  margin: 2rem auto;
}

section {
  display: block;
  background-color: var(--white);
  border-radius: 5px;
  height: 60vh;
  overflow-y: auto;
  margin: 0 1rem;
  padding: 2rem;
  border: 3px solid #121212;
}

p {
  line-height: 1.35;
  font-family: sans-serif;
} 

section::-webkit-scrollbar {
    width: 1.25em;
} 

section::-webkit-scrollbar-track {
  border-radius: 1.5px;
  background-color: var(--teal);
  -webkit-box-shadow: inset 0 0 8px rgba(0,0,0,0.3);
}

section::-webkit-scrollbar-thumb  {
  height: 50px;
  border-radius: 10px;
  background-color: var(--magenta);
  -webkit-box-shadow: inset 0 0 8px rgba(0,0,0,0.3);
}


/* hiding the scrollbar for the first &amp;lt;section&amp;gt; */
#hidden::-webkit-scrollbar {
  display: none;
}

#inactive {
  overflow: hidden;
}

#inactive:focus {
  overflow-y: auto;
}

/* use hidden-scrollbar type for 'body' */
body::-webkit-scrollbar {
  display: none;
}

@media screen and (max-width: 768px) {
  body {
    display: flex;
    flex-direction: column;
  }

  section {
    margin: 1rem auto;
  }
}

em {
  display: block;
}

@media screen and (min-width: 769px) {
  em {
    display:none;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's it! We now have three scrollable sections each with custom styling 🎉&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-things-up" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Wrapping things up&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is just the beginning of what you can do to style the scrollbars for your projects. There are a variety of pseudo-elements that can be used to customize each part of the scrollbar:&lt;/p&gt;

&lt;p&gt;*&lt;code&gt;::-webkit-scrollbar&lt;/code&gt; — the entire scrollbar.&lt;br&gt;
*&lt;code&gt;::-webkit-scrollbar-button&lt;/code&gt; — the buttons on the scrollbar (arrows pointing upwards and downwards).&lt;br&gt;
*&lt;code&gt;::-webkit-scrollbar-thumb&lt;/code&gt; — the draggable scrolling handle.&lt;br&gt;
*&lt;code&gt;::-webkit-scrollbar-track&lt;/code&gt; — the track (progress bar) of the scrollbar.&lt;br&gt;
*&lt;code&gt;::-webkit-scrollbar-track-piece&lt;/code&gt; — the part of the track (progress bar) not covered by the handle.&lt;br&gt;
*&lt;code&gt;::-webkit-scrollbar-corner&lt;/code&gt; — the bottom corner of the scrollbar, where both horizontal and vertical scrollbars meet.&lt;br&gt;
*&lt;code&gt;::-webkit-resizer&lt;/code&gt; — the draggable resizing handle that appears at the bottom corner of some elements.&lt;/p&gt;

&lt;p&gt;One important factor to keep in mind is accessibility. According to MDN, it is not suggested to be used in production due to its incompatibility with some browsers:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::-webkit-scrollbar"&gt;MDN Docs - webkit-scrollbar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BXAu_bsH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2w9nss0a05gt5xzdlo5x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BXAu_bsH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2w9nss0a05gt5xzdlo5x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gbidXEBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/arjlxuwklo40r9mi1dhv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gbidXEBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/arjlxuwklo40r9mi1dhv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is also another method being developed which I think is important to point out: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Scrollbars"&gt;MDN Docs - CSS Scrollbars&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is an example from MDN:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.scroller {
  width: 300px;
  height: 100px;
  overflow-y: scroll;
  scrollbar-color: rebeccapurple green;
  scrollbar-width: thin;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this example, we're using green for the color of our thumb and purple for our scrollbar's track (both declared using &lt;code&gt;scrollbar-color&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;And the HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="scroller"&amp;gt;
Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi
welsh onion daikon amaranth tatsoi tomatillo melon azuki bean garlic.
Gumbo beet greens corn soko endive gumbo gourd. Parsley shallot courgette
tatsoi pea sprouts fava bean collard greens dandelion okra wakame tomato.
Dandelion cucumber earthnut pea peanut soko zucchini.
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Current browser compatibility for scrollbar-color and scrollbar-width:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vf-jBSnW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3gy0rnb7xy1er7f1392g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vf-jBSnW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3gy0rnb7xy1er7f1392g.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mdsH8kWZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hktcfixvcpw7sifxc608.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mdsH8kWZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hktcfixvcpw7sifxc608.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you know of any other methods that can be used for customizing the scrollbar, please share in the comments. Thank you for reading!&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>WishList Feature for eCommerce App using Java and Spring Boot</title>
      <author>Nil Madhab</author>
      <pubDate>Tue, 19 Jan 2021 15:08:47 +0000</pubDate>
      <link>https://dev.to/nilmadhabmondal/wishlist-feature-for-ecommerce-app-using-java-and-spring-boot-2gei</link>
      <guid>https://dev.to/nilmadhabmondal/wishlist-feature-for-ecommerce-app-using-java-and-spring-boot-2gei</guid>
      <description>&lt;p&gt;We will create a back-end of a very important feature in every e-Commerce site — &lt;strong&gt;Wishlist&lt;/strong&gt;, using Java and Spring Boot&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--brlzUFLa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ypbf2gy79b6qwegwijtn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--brlzUFLa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ypbf2gy79b6qwegwijtn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
A Wishlist is an eCommerce feature that allows shoppers to create personalized collections of products they want to buy and save them in their user account. It is a must-have feature for eCommerce applications.&lt;br&gt;
We will first develop the back-end API using Java &amp;amp; Spring Boot (in this tutorial). After the API has been created, we will use that API in our Vue.Js front-end and Android front-end (in other tutorials).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#youtube-discussion" class="anchor"&gt;
  &lt;/a&gt;
  Youtube Discussion
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/hYpp3MukGqc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
Discussion about Wishlist feature of E-commerce app



&lt;h2&gt;
  &lt;a href="#live-demo" class="anchor"&gt;
  &lt;/a&gt;
  Live Demo
&lt;/h2&gt;

&lt;p&gt;You can test the API at the following swagger link. You will find the wishlist API in &lt;code&gt;wish-list-controller&lt;/code&gt; section.&lt;br&gt;
&lt;a href="http://remotedevs.org:8080/api/swagger-ui.html#/wish-list-controller"&gt;Swagger UI&lt;/a&gt;&lt;br&gt;
You can find the complete code at &lt;a href="https://github.com/webtutsplus/ecommerce-backend"&gt;Github.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Knowledge of Java, &lt;a href="https://medium.com/javarevisited/my-favorite-courses-to-learn-object-oriented-programming-and-design-in-2019-197bab351733"&gt;OOP&lt;/a&gt; &amp;amp; Spring Boot Framework&lt;/li&gt;
&lt;li&gt;Java Development Kit (JDK)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.jetbrains.com/idea/download/"&gt;IntelliJ IDEA Ultimate&lt;/a&gt; — open-source (Recommended)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://medium.com/javarevisited/top-5-courses-to-learn-mysql-in-2020-4ffada70656f"&gt;MySQL&lt;/a&gt;/MariaDB Database&lt;/li&gt;
&lt;li&gt;A good browser (Chrome — recommended)
This tutorial is part of our series on &lt;a href="https://nilmadhab.medium.com/"&gt;Back-end Development with Java&lt;/a&gt;. We will extend the code which we developed in the previous tutorials in this series. So, if you have any doubt regarding anything that we developed earlier, you can read about it in the corresponding tutorial in the series.
## Project Structure
If you have not read the previous tutorials in the back-end series, don’t worry. This section is specifically for you. As we will use the project structure that we created in the previous tutorials, we intend to describe the structure here before we begin working on the Wishlist feature. This will help you in understanding the code in a better way.
Following is the project structure:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sTBO4ZLW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aofaf0wgmu86k79wr7ad.png" alt="Alt Text"&gt;Project Structure of the API

We will now describe the following directories:-

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;controller&lt;/code&gt;— contains the controllers for various API endpoints&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;dto&lt;/code&gt; — contains the Data Transfer Objects (DTO) for our back-end. In client-server projects, data is often structured differently. There are some details in the database that we do not want to send as a response to the API calls. So, the server stores its information in a database-friendly way. While retrieving that information from the database, it can use DTOs to filter this information and then send it to the client. Don’t worry if you could not understand DTOs. You will understand it when we implement Wishlist DTO in this tutorial.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;model&lt;/code&gt; — contains the data models (and entities)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;repository&lt;/code&gt; — contains the methods for CRUD operations in corresponding tables of the database&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;service&lt;/code&gt; — contains the class files with &lt;code&gt;@service&lt;/code&gt; annotations. These class files are used to write business logic in a different layer, separated from &lt;code&gt;@RestController&lt;/code&gt; class files. &lt;a href="http://en.wikipedia.org/wiki/Business_logic"&gt;Business logic&lt;/a&gt; or domain logic is that part of the program which &lt;strong&gt;encodes the real-world business rules&lt;/strong&gt; that determine how data can be created, stored, and changed inside the database.
## API Design
Before we begin to code, we must spend some time to think about the API design and the &lt;a href="https://medium.com/javarevisited/5-best-books-to-learn-sql-and-database-design-for-programmers-and-developers-1e7839df2f3e"&gt;database design.&lt;/a&gt; Let’s begin with the API design.
Currently, we need only two API endpoints:-&lt;/li&gt;
&lt;li&gt;Adding to wishlist&lt;/li&gt;
&lt;li&gt;Getting wishlist
Also, we had already added the token-based authorization in our eCommerce backend. So, instead of user id, we will pass the token to every endpoint of the API. Hence, we decide to have the following endpoints.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B8qQyCiQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8baray2ominano8zbwqh.png" alt="Alt Text"&gt;
Also, in the body of the POST method, we will have to send the id of the product so that the given product can be added to the corresponding user’s wishlist. Hence, the body of the POST request should look like the following
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w6ECYfPJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/051wyg8pkj2kjv13n48a.png" alt="Alt Text"&gt;
Now, the response of the POST request should send the list of all products in the wishlist with the necessary details. Hence, the response should look like the following
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oEmj63Iy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xh4cb58tdw464mno5q7x.png" alt="Alt Text"&gt;
## Table Design
Now, let’s discuss the table design. We had already created the &lt;code&gt;ecommerce&lt;/code&gt; database in previous tutorials. In this database, we will create a new table called &lt;code&gt;wishlist.&lt;/code&gt; We will keep the design simple.
The database should have three columns — &lt;code&gt;id, user_id, product_id,created_date&lt;/code&gt;. Here,&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;id&lt;/code&gt; is the primary key and will be auto-generated&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;user_id&lt;/code&gt; — stores userId&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;product_id&lt;/code&gt; — stores the product id&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;created_date&lt;/code&gt; — stores the data &amp;amp; time at which the entry was created
The schema of the database looks like the following:-
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

Ideally, each user’s wishlist should have a particular product only once. But for simplicity, we are not considering such cases.
## Let’s Code
We will now begin to write code.
## Model (Entity)
Let’s begin with writing the code for the Model class of each entry in the wishlist table. If you are familiar with &lt;a href="https://medium.com/javarevisited/10-free-spring-boot-tutorials-and-courses-for-java-developers-53dfe084587e?source=collection_home---4------7-----------------------"&gt;Spring Boot&lt;/a&gt; or any other MVC framework, you would know that Model class is used to store each entry of the table. In &lt;a href="https://medium.com/hackernoon/top-5-spring-boot-and-spring-cloud-books-for-java-developers-75df155dcedc"&gt;Spring Boot&lt;/a&gt;, we use Annotations to map the columns of the table with the class members.
To create the model class, create a new class inside the &lt;code&gt;Model&lt;/code&gt; directory. We will call this class — &lt;code&gt;WishList&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We have already described the schema of the table. Using the schema, we will create the class variables of the model class representing each column of the database.&lt;/li&gt;
&lt;li&gt;We will also create one class object of &lt;code&gt;Product&lt;/code&gt; class. This object will store all the details of the product like name, price, description etc.&lt;/li&gt;
&lt;li&gt;Also, note that the column &lt;code&gt;created_date&lt;/code&gt; should be filled with the current date and time. For this, we will use the &lt;code&gt;java.util.Date&lt;/code&gt; class.
Following is the complete code of &lt;code&gt;WishList.java&lt;/code&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

## Repository
It is time to create the &lt;code&gt;repository interface&lt;/code&gt; for the &lt;code&gt;wishlist&lt;/code&gt; table. Create a new file called &lt;code&gt;WishListRepository.java&lt;/code&gt; inside the Repository directory.
If you are familiar with &lt;a href="https://medium.com/javarevisited/10-best-java-microservices-courses-with-spring-boot-and-spring-cloud-6d04556bdfed"&gt;Spring Boot&lt;/a&gt;, you would know that &lt;code&gt;Repository&lt;/code&gt; the interface contains methods to fetch data from the table.
Creating CRUD methods manually means writing a lot of boilerplate code unless you let the &lt;code&gt;JPARepository&lt;/code&gt; interface carry about routine implementations for you. So, we will extend the &lt;code&gt;JPARepository&lt;/code&gt; and create the interface &lt;code&gt;WishListRepository&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Extending &lt;code&gt;JPARepository&lt;/code&gt; will automatically create and implement methods for the basic CRUD operations.&lt;/li&gt;
&lt;li&gt;We will define a method &lt;code&gt;findAllByUserIdOrderByCreatedDateDesc()&lt;/code&gt; to fetch the wishlist of a user and order the list by created the date of each entry in the wishlist. The implementation of this method will be managed automatically by the &lt;code&gt;JPARepository&lt;/code&gt;.
Following is the complete code of &lt;code&gt;WishListRepository.java&lt;/code&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

## Service
Now, let's implement the &lt;code&gt;Service&lt;/code&gt; class to interact with the &lt;code&gt;wishlist&lt;/code&gt; table. In the &lt;code&gt;WishListRepository&lt;/code&gt; interface, we defined the methods to interact with the database.
In the &lt;code&gt;Service&lt;/code&gt; class, we will call these methods and implement the so-called business logic. To keep things simple, we do not have any business logic, i.e. business constraints or rules defined. So, we will simply create two methods &lt;code&gt;createWishlist()&lt;/code&gt; and &lt;code&gt;readWishlist()&lt;/code&gt; . Inside these methods, we will call the methods defined in the WishListRepository interface.
Following is the complete code of &lt;code&gt;WishListService.java&lt;/code&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

## Controller
Now, Let’s begin with writing code for the controller. If you are familiar with &lt;a href="https://www.java67.com/2017/11/top-5-free-core-spring-mvc-courses-learn-online.html"&gt;Spring Boot&lt;/a&gt; or any other &lt;a href="https://medium.com/javarevisited/21-spring-mvc-rest-interview-questions-answers-for-beginners-and-experienced-developers-21ad3d4c9b82"&gt;MVC framework&lt;/a&gt;, you would already know that controller defines the endpoints of the API.
Create a new file inside the Controller directory with the name &lt;code&gt;WishlistController.java&lt;/code&gt; . Since we have two endpoints, we will create two methods in the &lt;code&gt;WishlistController&lt;/code&gt; class.&lt;/li&gt;
&lt;li&gt;To use the &lt;code&gt;WishListService&lt;/code&gt; and &lt;code&gt;AuthenticationService&lt;/code&gt; , we will create the two objects of respective types. We have already created the &lt;code&gt;WishListService&lt;/code&gt; in the previous section and is used to interact with the database. We created &lt;code&gt;AuthenticationService&lt;/code&gt; in a previous tutorial and is used to fetch user id of the corresponding token&lt;/li&gt;
&lt;li&gt;We will create one method with &lt;code&gt;@GetMapping&lt;/code&gt; for the GET request and &lt;code&gt;@PostMapping&lt;/code&gt; for the POST request.&lt;/li&gt;
&lt;li&gt;Now, each table entry contains the &lt;code&gt;created_date&lt;/code&gt; value also. We do not want to send that with the response. So, here comes the use of DTO. Using the &lt;code&gt;getDtoFromProduct()&lt;/code&gt; method of the &lt;code&gt;ProductService&lt;/code&gt; Class, we will store only that information about each product which we want to send as response. Hence, we create a list of &lt;code&gt;ProductDto&lt;/code&gt; object and store only the required details. We will send this list in the response.
The following is the complete code of &lt;code&gt;WishlistController.java&lt;/code&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

## Congratulations!!!
Congratulations, we have now added the wishlist feature to our backend.
## Suggested PRs
If you wish to contribute to our eCommerce-backend, you clone this Github repository and work on the following features related to the wishlist&lt;/li&gt;
&lt;li&gt;Create an API end-point for Deleting a Product from Wishlist
After you have implemented the feature, send us a PR. We will review and merge it into our master branch
## Reference
&lt;div class="ltag__link"&gt;
  &lt;a href="https://medium.com/javarevisited/lets-develop-an-ecommerce-application-from-scratch-using-java-and-spring-6dfac6ce5a9f" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vm73w5AQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="https://medium.com/javarevisited/lets-develop-an-ecommerce-application-from-scratch-using-java-and-spring-6dfac6ce5a9f" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Let’s Develop an E-Commerce Application From Scratch Using Java and Spring | by Nil Madhab | Javarevisited | Dec, 2020 | Medium&lt;/h2&gt;
      &lt;h3&gt;Nil Madhab ・ &lt;time&gt;Jan 19, 2021&lt;/time&gt; ・ 6 min read
      &lt;div class="ltag__link__servicename"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KBvj_QRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/medium_icon-90d5232a5da2369849f285fa499c8005e750a788fdbf34f5844d5f2201aae736.svg" alt="Medium Logo"&gt;
        Medium
      &lt;/div&gt;
    &lt;/h3&gt;
&lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;div class="ltag__link"&gt;
  &lt;a href="https://medium.com/javarevisited/lets-build-signup-signin-and-role-based-access-in-our-e-commerce-app-f499a4b71f48" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vm73w5AQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="https://medium.com/javarevisited/lets-build-signup-signin-and-role-based-access-in-our-e-commerce-app-f499a4b71f48" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Let’s Build Signup, SignIn, and Role-Based Access in Our E-Commerce App | by Nil Madhab | Javarevisited | Jan, 2021 | Medium&lt;/h2&gt;
      &lt;h3&gt;Nil Madhab ・ &lt;time&gt;Jan 18, 2021&lt;/time&gt; ・ 8 min read
      &lt;div class="ltag__link__servicename"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KBvj_QRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/medium_icon-90d5232a5da2369849f285fa499c8005e750a788fdbf34f5844d5f2201aae736.svg" alt="Medium Logo"&gt;
        Medium
      &lt;/div&gt;
    &lt;/h3&gt;
&lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;div class="ltag__link"&gt;
  &lt;a href="https://medium.com/javascript-in-plain-english/lets-create-vue-js-frontend-for-products-in-our-e-commerce-app-14cc8c3459c8" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vm73w5AQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/96/96/1%2AhNjwft_dNBxvTr6g6TOVGg.jpeg" alt="Nil Madhab"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="https://medium.com/javascript-in-plain-english/lets-create-vue-js-frontend-for-products-in-our-e-commerce-app-14cc8c3459c8" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Let’s Add Products for our eCommerce App with Vue.js | by Nil Madhab | JavaScript In Plain English | Dec, 2020 | Medium&lt;/h2&gt;
      &lt;h3&gt;Nil Madhab ・ &lt;time&gt;Jan 12, 2021&lt;/time&gt; ・ 10 min read
      &lt;div class="ltag__link__servicename"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KBvj_QRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/medium_icon-90d5232a5da2369849f285fa499c8005e750a788fdbf34f5844d5f2201aae736.svg" alt="Medium Logo"&gt;
        Medium
      &lt;/div&gt;
    &lt;/h3&gt;
&lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>webdev</category>
      <category>sql</category>
    </item>
    <item>
      <title>Your First Node Express App with Typescript</title>
      <author>Nick Scialli (he/him)</author>
      <pubDate>Tue, 19 Jan 2021 14:36:14 +0000</pubDate>
      <link>https://dev.to/nas5w/your-first-node-express-app-with-typescript-2jkm</link>
      <guid>https://dev.to/nas5w/your-first-node-express-app-with-typescript-2jkm</guid>
      <description>&lt;p&gt;Express is the most ubiquitous framework for nodejs. In this post, we learn how to add Typescript to the mix.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-goal" class="anchor"&gt;
  &lt;/a&gt;
  The Goal
&lt;/h1&gt;

&lt;p&gt;Our goal here is to be able to use Typescript to develop our application quickly, but ultimately we want our application to compile down to plain old javascript to be executed by the nodejs runtime.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#initial-setup" class="anchor"&gt;
  &lt;/a&gt;
  Initial Setup
&lt;/h1&gt;

&lt;p&gt;First and foremost, we'll want to create an application directory in which we host our app files. We'll call this directory &lt;code&gt;express-typescript-app&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;express-typescript-app
&lt;span class="nb"&gt;cd &lt;/span&gt;express-typescript-app
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To accomplish our goal, we'll want to make a distinction between what we install as regular application dependencies versus development dependencies (i.e., dependencies that will help us develop our application but that won't be necessary after we compile our code).&lt;/p&gt;

&lt;p&gt;Throughout this tutorial, I'll be using &lt;code&gt;yarn&lt;/code&gt; as the package manager, but you could use &lt;code&gt;npm&lt;/code&gt; just as easily!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#production-dependencies" class="anchor"&gt;
  &lt;/a&gt;
  Production Dependencies
&lt;/h2&gt;

&lt;p&gt;In production, this will still be an &lt;code&gt;express&lt;/code&gt; app. Therefore, we'll need to install express!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add express
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note that this will create a &lt;code&gt;package.json&lt;/code&gt; file for us!&lt;/p&gt;

&lt;p&gt;For now, this will be our &lt;em&gt;only&lt;/em&gt; production dependency (we'll add another later).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#development-dependencies" class="anchor"&gt;
  &lt;/a&gt;
  Development Dependencies
&lt;/h2&gt;

&lt;p&gt;In development, we'll be writing Typescript. Therefore, we need to install &lt;code&gt;typescript&lt;/code&gt;. We'll also want to install the types for both express and node. We use the &lt;code&gt;-D&lt;/code&gt; flag to let &lt;code&gt;yarn&lt;/code&gt; know that these are dev dependencies.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; typescript @types/express @types/express @types/node
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Great! But we're not quite done. Sure, we could stop here, but the problem is that we would need to &lt;em&gt;compile our code&lt;/em&gt; every time we wanted to see changes in development. That's no fun! So we'll add a couple additional dependences:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ts-node&lt;/code&gt;—this package will let us run Typescript without having to compile it! Crucial for local development.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nodemon&lt;/code&gt;—this package automagically watches for changes in your application code and will restart your dev server. Coupled with &lt;code&gt;ts-node&lt;/code&gt;, &lt;code&gt;nodemon&lt;/code&gt; will enable us to see changes reflected in our app &lt;em&gt;instantaneously&lt;/em&gt;!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Again, these are &lt;em&gt;development&lt;/em&gt; dependencies because they only help us with development and won't be used after our code is compiled for production.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; ts-node nodemon
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configuring-our-app-to-run" class="anchor"&gt;
  &lt;/a&gt;
  Configuring our App to Run
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#configuring-typescript" class="anchor"&gt;
  &lt;/a&gt;
  Configuring Typescript
&lt;/h3&gt;

&lt;p&gt;Since we're using Typescript, let's set some Typescript options. We can do this in a &lt;code&gt;tsconfig.json&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;tsconfig.json
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now in our Typescript config file, let's set some compiler options.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;module: "commonjs"&lt;/code&gt;—when we compile our code, our output will use &lt;code&gt;commonjs&lt;/code&gt; modules, which we're familiar with if we've used node before.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;esModuleInterop: true&lt;/code&gt;—this option allows us to do star (*) and default imports.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;target: "es6"&lt;/code&gt;—unlike on the front-end, we have control of our runtime environment. We will make sure we use a version of node that understands the ES6 standard.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;rootDir: "./"&lt;/code&gt;—the root directory for our Typescript code is the current directory.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;outDir: "./build"&lt;/code&gt;—when we compile our Typescript to JavaScript, we'll put our JS in the &lt;code&gt;./build&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;strict: true&lt;/code&gt;—enables strict type-checking!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All together, our &lt;code&gt;tsconfig.json&lt;/code&gt; file should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"module"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"commonjs"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"esModuleInterop"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"target"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"es6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"rootDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"outDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"strict"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#configuring-packagejson-scripts" class="anchor"&gt;
  &lt;/a&gt;
  Configuring package.json Scripts
&lt;/h3&gt;

&lt;p&gt;Currently, we have no &lt;code&gt;package.json&lt;/code&gt; scripts! We'll want to add a couple scripts: one script to &lt;code&gt;start&lt;/code&gt; the app in development mode and another script to &lt;code&gt;build&lt;/code&gt; the application for production. To start the application in development mode, we just need to run &lt;code&gt;nodemon index.ts&lt;/code&gt;. For building the application, we've given our Typescript compiler all the information it needs in the &lt;code&gt;tsconfig.json&lt;/code&gt; file, so all we have to do is run &lt;code&gt;tsc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The following shows what your &lt;code&gt;package.json&lt;/code&gt; file might look like at this point. Note that your dependencies will likely be at different versions than mine since I wrote this at some point in the past (hello from the past, by the way).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"express"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.17.1"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@types/express"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.17.11"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@types/node"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^14.14.21"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"nodemon"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.0.7"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ts-node"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^9.1.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"typescript"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.1.3"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"tsc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"nodemon index.ts"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#git-config" class="anchor"&gt;
  &lt;/a&gt;
  Git Config
&lt;/h2&gt;

&lt;p&gt;If you're using git (I recommend it!), you'll want a &lt;code&gt;.gitignore&lt;/code&gt; file to ignore your &lt;code&gt;node_modules&lt;/code&gt; folder and your &lt;code&gt;build&lt;/code&gt; folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch&lt;/span&gt; .gitignore
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And the file contents:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node_modules
build
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#finished-setup" class="anchor"&gt;
  &lt;/a&gt;
  Finished Setup!
&lt;/h2&gt;

&lt;p&gt;I hope you've made it this far because we're done setup! It's not &lt;em&gt;too&lt;/em&gt; bad, but definitely slightly more of a barrier to entry than a normal express.js application.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creating-our-express-app" class="anchor"&gt;
  &lt;/a&gt;
  Creating our Express App
&lt;/h1&gt;

&lt;p&gt;Let's create our express app. This is actually fairly similar to how we would do it with plain old JavaScript. The one difference is that we get to use ES6 imports!&lt;/p&gt;

&lt;p&gt;Let's create &lt;code&gt;index.ts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;index.ts
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And in the &lt;code&gt;index.ts&lt;/code&gt; file, we can do a basic "hello world" example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Express with Typescript! http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now in our terminal we can start the app by using &lt;code&gt;yarn run start&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn run start
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And you'll get an output like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ nodemon index.ts
[nodemon] 2.0.7
[nodemon] to restart at any time, enter `rs`
[nodemon] watching path(s): *.*
[nodemon] watching extensions: ts,json
[nodemon] starting `ts-node index.ts`
Express with Typescript! http://localhost:3000
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can see &lt;code&gt;nodemon&lt;/code&gt; is watching all our files for changes and launches our app using &lt;code&gt;ts-node index.ts&lt;/code&gt;. We can now navigate to &lt;code&gt;http://localhost:3000&lt;/code&gt; in a web browser and see our "hello world" app in all it's glory!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--865FW-fV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jbu16f94gd4fhpy7ap1r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--865FW-fV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jbu16f94gd4fhpy7ap1r.png" alt='browser showing "hello world"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Huzzah! (well, it's a start!)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#beyond-hello-world" class="anchor"&gt;
  &lt;/a&gt;
  Beyond "Hello World"
&lt;/h1&gt;

&lt;p&gt;Our "Hello world" app is a nice achievement, but I think we can do more. Let's create some (very bad) user registration functionality to flex our express/typescript muscles a bit. Specifically, this functionality will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Maintain a list of users and associated passwords &lt;em&gt;in memory&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Have a &lt;code&gt;POST&lt;/code&gt; endpoint that allows users to register (i.e., adds an additional user to the aforementioned list)&lt;/li&gt;
&lt;li&gt;Have a &lt;code&gt;POST&lt;/code&gt; endpoint that allows users to attempt to sign in, issuing an appropriate response based on the correctness of provided credentials&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#maintaining-users" class="anchor"&gt;
  &lt;/a&gt;
  Maintaining Users
&lt;/h2&gt;

&lt;p&gt;First, let's create a &lt;code&gt;types.ts&lt;/code&gt; file in which we can declare our &lt;code&gt;User&lt;/code&gt; type. We'll end up using this file for more types in the future.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;types.ts
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now add the &lt;code&gt;User&lt;/code&gt; type in &lt;code&gt;types.ts&lt;/code&gt; and make sure to &lt;em&gt;export&lt;/em&gt; it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Okay! So rather than using a database or anything fancy like that, we're just going to maintain our users in memory. Let's create a &lt;code&gt;users.ts&lt;/code&gt; file in a new directory, &lt;code&gt;data&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;data
&lt;span class="nb"&gt;touch &lt;/span&gt;data/users.ts
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now in our &lt;code&gt;users.ts&lt;/code&gt; file, we can create an empty array of users and make sure to specify it as an array of our &lt;code&gt;User&lt;/code&gt; type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../types.ts;

const users: User[] = [];
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#posting-new-users" class="anchor"&gt;
  &lt;/a&gt;
  POSTing New Users
&lt;/h2&gt;

&lt;p&gt;Next, we'll want to be able to &lt;code&gt;POST&lt;/code&gt; a new user to our application. If you're familiar with what an HTTP actually looks like, you know that variables will typically come across in the HTTP request body looking something like url encoded variables (e.g., &lt;code&gt;username=foo&amp;amp;password=bar&lt;/code&gt;). Rather than parsing this ourselves, we can use the ubiquitous &lt;code&gt;body-parser&lt;/code&gt; middleware. Let's install that now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add body-parser
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And then we'll import and use it in our app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;bodyParser&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body-parser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bodyParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Express with Typescript! http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, we can create a &lt;code&gt;POST&lt;/code&gt; request handler on a &lt;code&gt;/users&lt;/code&gt; endpoint. This handler will do a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check if both a &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; are defined on the request body and run some very basic validations on those fields&lt;/li&gt;
&lt;li&gt;Return a &lt;code&gt;400&lt;/code&gt; status message if there is anything wrong with the provided values&lt;/li&gt;
&lt;li&gt;Push a new user to our &lt;code&gt;users&lt;/code&gt; array&lt;/li&gt;
&lt;li&gt;Return a &lt;code&gt;201&lt;/code&gt; status message&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's get to it. First, we create an &lt;code&gt;addUser&lt;/code&gt; function in our &lt;code&gt;data/users.ts&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../types.ts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, we go back to our &lt;code&gt;index.ts&lt;/code&gt; file and add the &lt;code&gt;"/users"&lt;/code&gt; route:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;bodyParser&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body-parser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;addUser&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./data/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bodyParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bad username or password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;addUser&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;User created&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Express with Typescript! http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Our logic here is simply that our &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; variables need to exist and, when using the &lt;code&gt;trim()&lt;/code&gt; method, they need to be longer than zero characters. If those criteria fail, we return a &lt;code&gt;400&lt;/code&gt; error with a custom Bad Request message. Otherwise, we &lt;code&gt;push&lt;/code&gt; the new &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; onto our &lt;code&gt;users&lt;/code&gt; array and send a &lt;code&gt;201&lt;/code&gt; status back.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You may notice that our array of users has no way of knowing if a username is added twice. Let's pretend our app doesn't have this glaring issue!&lt;/p&gt;

&lt;p&gt;Let's take this signup logic for a test drive using &lt;code&gt;curl&lt;/code&gt;! In your terminal, make the following POST request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s2"&gt;"username=foo&amp;amp;password=bar"&lt;/span&gt; &lt;span class="nt"&gt;-X&lt;/span&gt; POST http://localhost:3000/users
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You should get the following response back:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;User created
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Success! Now, let's just verify that our request fails if we don't meet our validation criteria. We'll provide a password that's just one space character (&lt;code&gt;" ".trim()&lt;/code&gt; is falsey so our validation will fail).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s2"&gt;"username=foo&amp;amp;password= "&lt;/span&gt; &lt;span class="nt"&gt;-X&lt;/span&gt; POST http://localhost:3000/users
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And we get the following response:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Bad username or password
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Looking good to me!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#logging-in" class="anchor"&gt;
  &lt;/a&gt;
  Logging In
&lt;/h2&gt;

&lt;p&gt;Logging in will be a very similar process. We'll grab the provided &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; from the request body, use the &lt;code&gt;Array.find&lt;/code&gt; method to see if that username/password combination exists in our &lt;code&gt;users&lt;/code&gt; array, and return either a &lt;code&gt;200&lt;/code&gt; status to indicate the user is logged in or a &lt;code&gt;401&lt;/code&gt; status to indicate that the user is not authenticated.&lt;/p&gt;

&lt;p&gt;First, let's add a &lt;code&gt;getUser&lt;/code&gt; function to our &lt;code&gt;data/users.ts&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This &lt;code&gt;getUser&lt;/code&gt; function will either return the matching &lt;code&gt;user&lt;/code&gt; from the &lt;code&gt;users&lt;/code&gt; array or it will return &lt;code&gt;undefined&lt;/code&gt; if no users match.&lt;/p&gt;

&lt;p&gt;Next, we use this &lt;code&gt;getUser&lt;/code&gt; function in our &lt;code&gt;index.ts&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;bodyParser&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body-parser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;addUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./data/users';

const app = express();
const PORT = 3000;

app.use(bodyParser.urlencoded({ extended: false }));

app.get('/', (req, res) =&amp;gt; {
  res.send('Hello word');
});

app.post('/users', (req, res) =&amp;gt; {
  const { username, password } = req.body;
  if (!username?.trim() || !password?.trim()) {
    return res.status(400).send('Bad username or password');
  }
  addUser({ username, password });
  res.status(201).send('User created');
});

app.post('/login', (req, res) =&amp;gt; {
  const { username, password } = req.body;
  const found = getUser({username, password})
  if (!found) {
    return res.status(401).send('Login failed');
  }
  res.status(200).send('Success');
});

app.listen(PORT, () =&amp;gt; {
  console.log(`Express with Typescript! http://localhost:${PORT}`);
});
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And now we can once again use curl to add a user, log in as that user, and then also fail a login attempt:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s2"&gt;"username=joe&amp;amp;password=hard2guess"&lt;/span&gt; &lt;span class="nt"&gt;-X&lt;/span&gt; POST http://localhost:3000/users
&lt;span class="c"&gt;# User created&lt;/span&gt;

curl &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s2"&gt;"username=joe&amp;amp;password=hard2guess"&lt;/span&gt; &lt;span class="nt"&gt;-X&lt;/span&gt; POST http://localhost:3000/login
&lt;span class="c"&gt;# Success&lt;/span&gt;

curl &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s2"&gt;"username=joe&amp;amp;password=wrong"&lt;/span&gt; &lt;span class="nt"&gt;-X&lt;/span&gt; POST http://localhost:3000/login
&lt;span class="c"&gt;# Login failed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Hey, we did it!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#exporing-express-types" class="anchor"&gt;
  &lt;/a&gt;
  Exporing Express Types
&lt;/h1&gt;

&lt;p&gt;You may have noticed that everything we have done so far, outside of our initial setup, is basic express stuff. In fact, if you have used express a bunch before, you're probably bored (sorry).&lt;/p&gt;

&lt;p&gt;But now we'll get a bit more interesting: we're going to explore some of the types exported by express. To do so, we will define a custom structure for defining our routes, their middleware, and handler functions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-custom-route-type" class="anchor"&gt;
  &lt;/a&gt;
  A Custom Route Type
&lt;/h2&gt;

&lt;p&gt;Perhaps we want to establish a standard in our dev shop where we write all our routes like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;post&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;middleware1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;middleware2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userSignup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can do this by defining a &lt;code&gt;Route&lt;/code&gt; type in our &lt;code&gt;types.ts&lt;/code&gt; file. Importantly, we'll be making use of some important types exported from the &lt;code&gt;express&lt;/code&gt; package: &lt;code&gt;Request&lt;/code&gt;, &lt;code&gt;Response&lt;/code&gt;, and &lt;code&gt;NextFunction&lt;/code&gt;. The &lt;code&gt;Request&lt;/code&gt; object represents the request coming from our client, the &lt;code&gt;Response&lt;/code&gt; object is the response that express sends, and the &lt;code&gt;NextFunction&lt;/code&gt; is the signature of the &lt;code&gt;next()&lt;/code&gt; function you may be familiar with if you have used express middlware.&lt;/p&gt;

&lt;p&gt;In our &lt;code&gt;types.ts&lt;/code&gt; file, let's specify our &lt;code&gt;Route&lt;/code&gt;. We'll make liberal use of the &lt;code&gt;any&lt;/code&gt; type for our &lt;code&gt;middleware&lt;/code&gt; array and &lt;code&gt;handler&lt;/code&gt; function since we will want to discuss those further later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;get&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;head&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;post&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;put&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;delete&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;connect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;options&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;trace&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;patch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nl"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, if you're familiar with express middleware, you know that the a typical middleware function looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Do some logic with the request&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;something&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Failed criteria, send forbidden resposne&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Forbidden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// Succeeded, go to the next middleware&lt;/span&gt;
  &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It turns out that express exports types for each of the three arguments that middlware take: &lt;code&gt;Request&lt;/code&gt;, &lt;code&gt;Response&lt;/code&gt;, and &lt;code&gt;NextFunction&lt;/code&gt;. Therefore, we &lt;em&gt;could&lt;/em&gt; create a &lt;code&gt;Middleware&lt;/code&gt; type if we wanted to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NextFunction&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Middleware&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NextFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;...but it turns out express has a type for this already called &lt;code&gt;RequestHandler&lt;/code&gt;! I don't &lt;em&gt;love&lt;/em&gt; the name &lt;code&gt;RequestHandler&lt;/code&gt; for this type, so we're going to go ahead and import it under the name &lt;code&gt;Middleware&lt;/code&gt; and add it to our &lt;code&gt;Route&lt;/code&gt; type in &lt;code&gt;types.ts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;RequestHandler&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Middleware&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;get&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;head&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;post&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;put&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;delete&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;connect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;options&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;trace&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;patch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Middleware&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nl"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, we need to type our &lt;code&gt;handler&lt;/code&gt; function. This is &lt;em&gt;purely&lt;/em&gt; a personal preference since our handler could technically be our last middleware, but perhaps we have made a design decision that we want to single out our &lt;code&gt;handler&lt;/code&gt; function. Importantly, we don't want our handler to take a &lt;code&gt;next&lt;/code&gt; parameter; we want it to be the end of the line. Therefore, we will create our own &lt;code&gt;Handler&lt;/code&gt; type. It will look very similar to &lt;code&gt;RequestHandler&lt;/code&gt; but won't take a third argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;RequestHandler&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Middleware&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;get&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;head&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;post&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;put&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;delete&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;connect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;options&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;trace&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;patch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Middleware&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nl"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding-some-structure" class="anchor"&gt;
  &lt;/a&gt;
  Adding Some Structure
&lt;/h2&gt;

&lt;p&gt;Instead of having all of our middleware and handlers in our &lt;code&gt;index.ts&lt;/code&gt; file, let's add some structure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#handlers" class="anchor"&gt;
  &lt;/a&gt;
  Handlers
&lt;/h3&gt;

&lt;p&gt;First, let's move our user-related &lt;em&gt;handler&lt;/em&gt; functions into a &lt;code&gt;handlers&lt;/code&gt; directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;handlers
&lt;span class="nb"&gt;touch &lt;/span&gt;handlers/user.ts
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, within our &lt;code&gt;handlers/user.ts&lt;/code&gt; file, we can add the follow code. This represents the one user-related route handler (signing up) that we already have in our &lt;code&gt;index.ts&lt;/code&gt; file, we're just reorganizing. Importantly, we can be sure that the &lt;code&gt;signup&lt;/code&gt; function meets our need because it matches the type signature of the &lt;code&gt;Handler&lt;/code&gt; type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;addUser&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../data/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Handler&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;signup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bad username or password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;addUser&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;User created&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next up, let's add an auth handler that contains our &lt;code&gt;login&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;handlers/auth.ts
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here's the code we can move to the &lt;code&gt;auth.ts&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../data/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Handler&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;found&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;401&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Login failed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Success&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, we'll add one more handler for our home route ("Hello world").&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;handlers/home.ts
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And this one is pretty simple:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Handler&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;home&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#middleware" class="anchor"&gt;
  &lt;/a&gt;
  Middleware
&lt;/h3&gt;

&lt;p&gt;We don't have any custom middleware yet, but let's change that! First, add a directory for our middleware:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;middleware
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can add a middleware that will log the &lt;code&gt;path&lt;/code&gt; that the client hit. We can call this &lt;code&gt;requestLogger.ts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;middleware/requestLogger.ts
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And in this file, we can once again import &lt;code&gt;RequestHandler&lt;/code&gt; from express to make sure our middleware function is the right type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;RequestHandler&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Middleware&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;requestLogger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Middleware&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-routes" class="anchor"&gt;
  &lt;/a&gt;
  Creating Routes
&lt;/h3&gt;

&lt;p&gt;Now that we have our fancy new &lt;code&gt;Route&lt;/code&gt; type and our &lt;code&gt;handlers&lt;/code&gt; and &lt;code&gt;middleware&lt;/code&gt; organized into their own spaces, let's write some routes! We'll create a &lt;code&gt;routes.ts&lt;/code&gt; file at our root directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;routes.ts
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And here's an example of what this file could look like. Note that I added our &lt;code&gt;requestLogger&lt;/code&gt; middleware to just one of the routes to demonstrate how it might look—it otherwise doesn't make a whole lot of sense to log the request path for only one route!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./handlers/auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;home&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./handlers/home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;signup&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./handlers/user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;requestLogger&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./middleware/requestLogger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;get&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;home&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;post&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;signup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;post&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/login&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;requestLogger&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#revamping-our-indexts-file" class="anchor"&gt;
  &lt;/a&gt;
  Revamping Our index.ts File
&lt;/h3&gt;

&lt;p&gt;Now the payoff! We can greatly simplify our &lt;code&gt;index.ts&lt;/code&gt; file. We replace all our route code with a simple &lt;code&gt;forEach&lt;/code&gt; loop that uses everything we specified in &lt;code&gt;routes.ts&lt;/code&gt; to register our routes with express. Importantly, the Typescript compiler is happy because our &lt;code&gt;Route&lt;/code&gt; type fits the shape of the corresponding express types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;bodyParser&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body-parser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./routes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bodyParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;

&lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;middleware&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Express with Typescript! http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Wow this looks great! And, importantly, we have established a type-safe pattern by which we specify routes, middleware, and handlers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-app-code" class="anchor"&gt;
  &lt;/a&gt;
  The App Code
&lt;/h1&gt;

&lt;p&gt;If you'd like to see the final app code, head on over to the &lt;a href="https://github.com/nas5w/express-typescript-app"&gt;github repository here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Well, that was a fun exploration of express with Typescript! We see how, in its most basic form, it's not dissimlar to a typical express.js project. However, you can now use the awesome power of Typescript to give your project the structure you want in a very type-safe way.&lt;/p&gt;

</description>
      <category>node</category>
      <category>typescript</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>4 Powerful IDEs That Nobody Is Talking About</title>
      <author>Mehdi Aoussiad</author>
      <pubDate>Tue, 19 Jan 2021 14:12:08 +0000</pubDate>
      <link>https://dev.to/aoussiadmehdi/4-powerful-ides-that-nobody-is-talking-about-3f07</link>
      <guid>https://dev.to/aoussiadmehdi/4-powerful-ides-that-nobody-is-talking-about-3f07</guid>
      <description>&lt;p&gt;As a developer, you will definitely have a lot of projects to work on, different issues, a lot of files to handle, and you will also have to check everything at once on a daily basis in some situations. It might seem to be complicated and takes a lot of time. Fortunately, there are many tools on the web that make the development process much easier for developers. The most useful tool for these situations is an integrated development environment (IDE) which has a lot of features that you can benefit from if you’re working on projects.&lt;/p&gt;

&lt;p&gt;In this article, we will give a list of some extremely useful and powerful IDEs that you probably need to use even though they are not that very popular like VScode and other IDEs. So, let’s get right into it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="http://www.codelobster.com/"&gt;CodeLobster&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CodeLobster is a free cross-platform IDE for PHP, HTML, CSS, and JavaScript. It supports many interface languages and has a lot of features. It is created for learners and also professional developers in order to give them smart tools to make the development process much easier for them.&lt;/p&gt;

&lt;p&gt;The great thing about CodeLobster is that it has plug-ins for Drupal CMS, Joomla CMS, Magento CMS, Smarty template engine, Twig template engine, JQuery library, AngularJS, BackboneJS, Laravel, MeteorJS, Phalcon, CodeIgniter, CakePHP, Symfony, VueJS, Yii and WordPress. I would definitely recommend this IDE, especially if you work with a little bit of PHP and JavaScript. It also has a lot more features that you can benefit from such as highlighting, auto-complete, a powerful PHP debugger, a SQL manager, and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://codeshare.io/"&gt;CodeShare&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
CodeShare is an IDE that allows you to share code in real-time with developers and speak to others through a video chat. It’s a good online code editor for interviews, troubleshooting, teaching, and more.&lt;br&gt;
I think it’s mainly used for companies during remote interviews and teams that work together.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://macromates.com/"&gt;TextMate&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
TextMate is a customizable macOS text editor with support for a huge list of programming languages. It seems like a simple editor at first, but it actually has quite a bit of functionality crammed into a small package.&lt;br&gt;
It’s a good tool if you have a Mac and need support for all languages. It comes offered as a free download, but you can also decide to upgrade to the premium version.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="http://brackets.io/"&gt;Brackets&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Brackets is a text editor that comes from the folks at Adobe, in an attempt to offer a more modern, open-source solution for developers creating websites.&lt;br&gt;
It is a free text editor, with some appealing visual tools for previewing your work and allowing frontend developers to examine the changes. Because of its affiliation with Adobe, Brackets has somewhat of integration with Photoshop, so it can take pieces of your PSD file and generate code for your project.&lt;/p&gt;

&lt;p&gt;These were just some great tools that need a chance in the developer's community. I have seen people underestimating tools without trying them at all. You can choose any tool from the list above and give it a try if you are interested.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>vscode</category>
      <category>javascript</category>
      <category>php</category>
    </item>
    <item>
      <title>Fixing Cumulative Layout Shift</title>
      <author>Ben Halpern</author>
      <pubDate>Tue, 19 Jan 2021 13:45:55 +0000</pubDate>
      <link>https://dev.to/ben/fixing-cumulative-layout-shift-41ja</link>
      <guid>https://dev.to/ben/fixing-cumulative-layout-shift-41ja</guid>
      <description>&lt;p&gt;Cumulative layout shift is the term that refers to content that jumps after initial load.&lt;/p&gt;

&lt;p&gt;Not only is CLS frustrating for users, it will also become more important for SEO purposes this year. Of course those things are connected. &lt;em&gt;Because&lt;/em&gt; it is such a big user experience problem, Google Search rankings &lt;a href="https://www.searchenginejournal.com/cumulative-layout-shift/371946/"&gt;will be cracking down on this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3i6DixSU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://im2.ezgif.com/tmp/ezgif-2-3705195221ca.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3i6DixSU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://im2.ezgif.com/tmp/ezgif-2-3705195221ca.gif" alt="cls"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have a few existing CLS issues within Forem. Google shows us about this through the Search Console within the Core Web Vitals tab:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YZsXNCuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/3102842/104930605-5d846180-5973-11eb-9a55-93e9daafd44d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YZsXNCuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/3102842/104930605-5d846180-5973-11eb-9a55-93e9daafd44d.png" alt="Google dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Yellow in this graph represents pages that need work.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;"Need work" means it is a &lt;em&gt;small&lt;/em&gt; issue. It certainly isn't a giant ad popping up in our face, but it is still frustrating and possibly jarring.&lt;/p&gt;

&lt;p&gt;This is what they were talking about:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uGQ2ThAP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://im2.ezgif.com/tmp/ezgif-2-eadf62779b94.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uGQ2ThAP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://im2.ezgif.com/tmp/ezgif-2-eadf62779b94.gif" alt="blip"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This happens because we load the comment reaction number &lt;em&gt;asynchronously&lt;/em&gt; so we can cache the underlying HTML.&lt;/p&gt;

&lt;p&gt;... And this was the fix...&lt;/p&gt;


&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/pull/12309"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Improve cumulative layout shift on comment reactions + optimizations
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#12309&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/benhalpern"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--qeETGNZc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars0.githubusercontent.com/u/3102842%3Fv%3D4" alt="benhalpern avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/benhalpern"&gt;benhalpern&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/forem/forem/pull/12309"&gt;&lt;time&gt;Jan 16, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      
&lt;h2&gt;
&lt;a id="user-content-what-type-of-pr-is-this-check-all-applicable" class="anchor" href="#what-type-of-pr-is-this-check-all-applicable"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;What type of PR is this? (check all applicable)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[x] Refactor&lt;/li&gt;
&lt;li&gt;[ ] Feature&lt;/li&gt;
&lt;li&gt;[x] Bug Fix&lt;/li&gt;
&lt;li&gt;[x] Optimization&lt;/li&gt;
&lt;li&gt;[ ] Documentation Update&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;a id="user-content-description" class="anchor" href="#description"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Description&lt;/h2&gt;
&lt;p&gt;Cumulative layout shift refers the sudden jump of elements on a page when any change happens after initial render.&lt;/p&gt;
&lt;p&gt;Details here: &lt;a href="https://web.dev/cls/" rel="nofollow"&gt;https://web.dev/cls/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is not only a bad experience for users, Google has warned that this will become a bigger ranking factor:&lt;/p&gt;
&lt;p&gt;Details here:
&lt;a href="https://www.searchenginejournal.com/cumulative-layout-shift/371946/" rel="nofollow"&gt;https://www.searchenginejournal.com/cumulative-layout-shift/371946/&lt;/a&gt;
&lt;a href="https://www.popwebdesign.net/popart_blog/en/2020/09/cumulative-layout-shift-how-to-rank-on-google-in-2021/" rel="nofollow"&gt;https://www.popwebdesign.net/popart_blog/en/2020/09/cumulative-layout-shift-how-to-rank-on-google-in-2021/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm not sure it is covered in that post, but I believe Google announced they will step up how much this matters in May 2021.&lt;/p&gt;
&lt;p&gt;In general this is &lt;em&gt;a great thing&lt;/em&gt; for Forem because we already prioritize user experience and have minimal CLS issues, however, we do have some.&lt;/p&gt;
&lt;p&gt;This PR addresses this one:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://user-images.githubusercontent.com/3102842/104824544-a24bb380-5820-11eb-8362-8e48dd8ed405.mov" rel="nofollow"&gt;https://user-images.githubusercontent.com/3102842/104824544-a24bb380-5820-11eb-8362-8e48dd8ed405.mov&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Upon loading the page, we asynchronously fetch the number of reactions in the comment trees. This is nice so that we don't have to bust the whole page every time a reaction is made, however as currently implemented, it causes a CLS.&lt;/p&gt;
&lt;p&gt;In examining the ways to address this, I believe the best route is what I have chosen to do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We include the current public reactions count inline, knowing it may be cached, and use the async fetch as a way to &lt;em&gt;adjust&lt;/em&gt; the reactions. This will improve UX, as most of the time there will be no jump at all, and if the reaction count has changed recently it will act as a small &lt;em&gt;adjustment&lt;/em&gt;, say from 7 to 8 reactions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As Forems grow (like DEV), they have great potential to become a &lt;em&gt;knowledge base&lt;/em&gt;. That means that some old threads can stick around to be useful for a long time. However, over time, posts are less likely to have new reactions popping up every few minutes.&lt;/p&gt;
&lt;p&gt;This PR takes advantage of this and reduces that async query we make when there has been no new comment activity for a week. That is to say: We do not fetch new &lt;em&gt;async&lt;/em&gt; reaction numbers for posts nobody is commenting on anymore. This will reduce one request for &lt;em&gt;many&lt;/em&gt; posts.&lt;/p&gt;
&lt;h2&gt;
&lt;a id="user-content-related-tickets--documents" class="anchor" href="#related-tickets--documents"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Related Tickets &amp;amp; Documents&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/forem/forem/issues/12310"&gt;https://github.com/forem/forem/issues/12310&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
&lt;a id="user-content-qa-instructions-screenshots-recordings" class="anchor" href="#qa-instructions-screenshots-recordings"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;QA Instructions, Screenshots, Recordings&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Please replace this line with instructions on how to test your changes, as well
as any relevant images for UI changes.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a id="user-content-ui-accessibility-concerns" class="anchor" href="#ui-accessibility-concerns"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;UI accessibility concerns?&lt;/h3&gt;
&lt;p&gt;This should only improve possible issues.&lt;/p&gt;
&lt;h2&gt;
&lt;a id="user-content-added-tests" class="anchor" href="#added-tests"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Added tests?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[x] Yes&lt;/li&gt;
&lt;li&gt;[ ] No, and this is why: &lt;em&gt;please replace this line with details on why tests
have not been included&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;[ ] I need help with writing tests&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
&lt;a id="user-content-added-to-documentation" class="anchor" href="#added-to-documentation"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Added to documentation?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[x] &lt;a href="https://docs.forem.com" rel="nofollow"&gt;Developer Docs&lt;/a&gt; and/or
&lt;a href="https://forem.gitbook.io/forem-admin-guide/" rel="nofollow"&gt;Admin Guide&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[ ] README&lt;/li&gt;
&lt;li&gt;[ ] No documentation needed&lt;/li&gt;
&lt;/ul&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/pull/12309"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Generally the way to deal with CLS is to make space for content that may load asynchronously before it loads. There are a few ways this could have been dealt with. In this case I deemed that it was reasonable to first include the &lt;em&gt;cached&lt;/em&gt; number instead of &lt;em&gt;nothing&lt;/em&gt;, and then if the number updates a few milliseconds after load.&lt;/p&gt;

&lt;p&gt;If it was not possible to modify the code such that we could include the number, it would likely suffice to include a blank HTML element that takes up the approximate space for most &lt;em&gt;like&lt;/em&gt; numbers.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>How To Win Your First Clients as a Freelance Web Developer</title>
      <author>Markus Hatvan</author>
      <pubDate>Tue, 19 Jan 2021 13:41:09 +0000</pubDate>
      <link>https://dev.to/mhatvan/how-to-win-your-first-clients-as-a-freelance-web-developer-4kdb</link>
      <guid>https://dev.to/mhatvan/how-to-win-your-first-clients-as-a-freelance-web-developer-4kdb</guid>
      <description>&lt;p&gt;After working as an employee for different companies during the last four years, I am finally doing it and becoming my own boss!&lt;/p&gt;

&lt;p&gt;It is certainly a challenging adventure to switch from the secure and predictable path as a member of a company working at a full-time job to running your own business with all of its complexities and requirements.&lt;/p&gt;

&lt;p&gt;As a newbie web development freelancer, you will often have to ask yourself this one most daunting question in the beginning:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-even-find-a-promising-client-if-no-one-knows-about-me" class="anchor"&gt;
  &lt;/a&gt;
  How Do I Even Find a Promising Client if No One Knows About Me?
&lt;/h2&gt;

&lt;p&gt;Although I didn't start as a freelancer officially until January 2021, I was already able to establish myself on the market and win multiple international clients two months prior my start as a sole proprietor. As the cherry on top of this, all these projects were built on a modern tech stack and included fun and challenging tasks throughout.&lt;/p&gt;

&lt;p&gt;Instead of relying on a single source for fresh freelance project leads, I tried out various possible ways of finding new work opportunities, some of which work efficiently and others that don't. As a successful freelance web developer, it is especially important to spend most of the time doing actual paid work and to avoid unpaid side tasks like looking for a new client.&lt;/p&gt;

&lt;p&gt;In this article, I want to show you what I learned so far about promising ways to find potential clients for your freelance web development business.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#talk-to-your-network-of-peers-friends-and-family" class="anchor"&gt;
  &lt;/a&gt;
  Talk to Your Network of Peers, Friends and Family
&lt;/h2&gt;

&lt;p&gt;Before searching for project offers in any other way, try to leverage your network and reach out to your connections. Interesting leads and project offers that you receive through word-of-mouth have one big advantage: the prospective clients are introduced to you through social proof and are more likely to consider you than if you had contacted them through cold outreach.&lt;/p&gt;

&lt;p&gt;Always ask the client for follow-up projects or referrals to other potential clients to keep the flow of projects going whenever you finish a project. The social proof of getting recommended can work in your favor again. Additionally, don't forget to demand a testimonial from a happy client that you can put up on your website to improve your credibility and market value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#receive-inbound-offers-from-recruiters-on-linkedin" class="anchor"&gt;
  &lt;/a&gt;
  Receive Inbound Offers From Recruiters on LinkedIn
&lt;/h2&gt;

&lt;p&gt;You might think like me that social media is a waste of time, but there is one exception: LinkedIn works like a charm for potential offers and work-related connections. You can create a good profile for yourself, put the "open for work" label on it, then lean back and wait for the offers to come rolling in to your message inbox. There were certain days where I got five offers in 24 hours, and I am not even updating my profile or posting much content for improved visibility.&lt;/p&gt;

&lt;p&gt;Unfortunately, a lot of times recruiters will just spam their standard phrases and send you offers for permanent positions. It might be annoying to you and your first intuition is to not respond to them, but I highly recommend you to do so! I usually thank them for their nice offer and tell them that freelancers are only interested in project-based offers, but if they ever have something that could be relevant to me, they should get back at me. Because as a matter of fact, most recruiters and software agencies have both jobs and freelance projects to offer. It happened more than once that the recruiter sent me a different offer or invited me to sign up for a freelance developer talent pool at a company. You can also shortcut the process and go to the company website of the recruiter, check for project offers that are relevant, and bookmark them for later use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-approved-on-curated-freelancing-platforms" class="anchor"&gt;
  &lt;/a&gt;
  Get Approved on Curated Freelancing Platforms
&lt;/h2&gt;

&lt;p&gt;There are a lot of them out there, and it's not easy to separate the good ones from the bad ones, but two of the freelance platforms that I use most are &lt;a href="https://www.expertlead.com/"&gt;ExpertLead&lt;/a&gt; and &lt;a href="https://gun.io/"&gt;Gun.io&lt;/a&gt;.&lt;br&gt;
Expertlead requires an initial get-to-know interview, a short project showcase, and a coding interview with a peer freelancer to become a member. On Gun.io, you will have to set up a nice profile, including a short video introduction, and pass a test of three different algorithm coding challenges. After you get accepted, both can deliver interesting and relevant projects on a regular basis for you.&lt;/p&gt;

&lt;p&gt;One of the most well-known freelance platform that I haven't applied to yet is &lt;a href="https://www.toptal.com/"&gt;Toptal&lt;/a&gt;. Their time-consuming multi-step process and the strict vetting of allowing "only 3% of top talent" in - according to their marketing - kept me from trying to get accepted so far. Still, Toptal has a very good reputation in the industry and will be able to provide you with a steady stream of high-value clients.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#browse-job-boards-the-old-school-way" class="anchor"&gt;
  &lt;/a&gt;
  Browse Job Boards the Old School Way
&lt;/h2&gt;

&lt;p&gt;If you decide to search for freelancer offers on job platforms, you have the advantage that you can cut out the middleman in a lot of cases. This could be a recruiter cashing in on a successful hire or platform fees like &lt;a href="https://www.upwork.com/"&gt;Upwork&lt;/a&gt; or &lt;a href="https://www.fiverr.com/"&gt;Fiverr&lt;/a&gt; have, which might result in a lower hourly rate.&lt;/p&gt;

&lt;p&gt;The job boards that I found especially helpful in regard to finding freelance offers were &lt;a href="https://www.glassdoor.com/Job/developer-jobs-SRCH_KO0,9.htm?jobType=contract"&gt;Glassdoor&lt;/a&gt;, &lt;a href="https://weworkremotely.com/remote-contract-jobs#job-listings"&gt;We Work Remotely&lt;/a&gt;, &lt;a href="https://stackoverflow.com/jobs?r=true&amp;amp;j=Contract"&gt;Stack Overflow&lt;/a&gt;, &lt;a href="https://www.linkedin.com/jobs/search/?keywords=freelance"&gt;LinkedIn&lt;/a&gt; and &lt;a href="https://angel.co/jobs"&gt;AngelList&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One issue that I found with a lot of job platforms is that they are lacking useful filtering options to easily discover project-based work. Additionally, it is hard to tell from a lot of job descriptions if they are supposed to be for a person looking for a permanent position or a freelance contract.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-lesserknown-ways-of-finding-qualified-leads" class="anchor"&gt;
  &lt;/a&gt;
  Use Lesser-Known Ways of Finding Qualified Leads
&lt;/h2&gt;

&lt;p&gt;It can be a hit or miss, but holding a presentation at a meetup or conference can lead to unexpected offers and connections. Especially after the presentation of the talk, it can be the perfect opportunity to mingle with the crowd and to get into contact with prospective clients who saw you on stage.&lt;/p&gt;

&lt;p&gt;Another way to find potential clients is to simply search on a messaging services like Twitter for a term like "freelancer wanted", and you will get a long list of past posts by users.&lt;/p&gt;

&lt;p&gt;The same trick works for Facebook: there is a huge selection of worldwide Facebook groups for job seekers and freelancers. Try to keep away from the ones with large numbers of members though, because they tend to get spammed with low-quality content and they have too much international competition.&lt;/p&gt;

&lt;p&gt;If you don't want to lift a finger to find freelance jobs, simply lean back and enjoy the service of a website like &lt;a href="https://remoteleads.io/"&gt;RemoteLeads&lt;/a&gt;, which scrapes thousands of sources and delivers the best matching projects right into your mailbox. It works like a charm. If you know of any similar services, let me know.&lt;/p&gt;

&lt;p&gt;Another rather underground source for projects is the website &lt;a href="http://www.hnhiring.me/"&gt;HN Hiring&lt;/a&gt;, which aggregates all posts from the monthly Hacker News thread "Ask HN: Freelancer? Seeking freelancer?" into a useful listicle.&lt;/p&gt;

&lt;p&gt;If you like to work with startups and smaller businesses, you can take a look at job-related groups on &lt;a href="https://www.indiehackers.com/"&gt;Indie Hackers&lt;/a&gt; or join Slack groups for freelancers.&lt;/p&gt;

&lt;p&gt;In case you are passionate about a certain programming language or software tool, some of them have Discord channels which have a distinct #jobs channel for offers.&lt;/p&gt;

&lt;p&gt;You have to get a bit creative with your thinking but there are a myriad of ways to find business owners who desperately need your services.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-how-did-i-find-my-first-clients" class="anchor"&gt;
  &lt;/a&gt;
  So How Did I Find My First Clients?
&lt;/h2&gt;

&lt;p&gt;With my four-plus years of experience in web development, code contributions in well-known open source projects, and technical articles released on big web development publications, I would say that many recruiters and HR departments of companies would be interested to get me on board.&lt;/p&gt;

&lt;p&gt;Since I made sure to collect all project offers in bookmarks, I can provide you with an exact breakdown of the numbers and how the customer acquisition funnel worked in my case.&lt;/p&gt;

&lt;p&gt;Between October 2020 and January 2021, I spent endless hours searching for clients:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I bookmarked ~65 different websites as sources for finding freelance offers.&lt;/li&gt;
&lt;li&gt;I applied to ~45 projects found on websites like &lt;a href="http://www.hnhiring.me/"&gt;HN Hiring&lt;/a&gt;, &lt;a href="https://weworkremotely.com/remote-contract-jobs#job-listings"&gt;We Work Remotely&lt;/a&gt;, &lt;a href="https://www.computerfutures.com/de-de/job-search/?type=Freelance&amp;amp;country=Deutschland"&gt;Computer Futures&lt;/a&gt;, &lt;a href="https://www.freelancermap.com/"&gt;Freelancermap&lt;/a&gt;, &lt;a href="https://gun.io/"&gt;Gun.io&lt;/a&gt;, &lt;a href="https://jobs.github.com/positions?utf8=%E2%9C%93&amp;amp;description=JavaScript&amp;amp;location=remote"&gt;GitHub Jobs&lt;/a&gt;, &lt;a href="https://www.linkedin.com/jobs/search/?keywords=freelance"&gt;LinkedIn&lt;/a&gt;, and many more.&lt;/li&gt;
&lt;li&gt;I received a response from approximately 20 projects regarding a cooperation.&lt;/li&gt;
&lt;li&gt;I had a total of 11 project interviews through remote calls.&lt;/li&gt;
&lt;li&gt;I ended up with four international customers which will provide me with projects regularly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although I have such a large amount of different websites and sources for finding clients, in the end, it turned out that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I found two of my clients through the &lt;a href="https://discord.com/invite/yy75DKs"&gt;Svelte Discord&lt;/a&gt; #jobs channel&lt;/li&gt;
&lt;li&gt;One client found me through the Austrian job center database and approached me per mail&lt;/li&gt;
&lt;li&gt;Another one re-engaged me due to a &lt;a href="https://issuehunt.io/"&gt;Issuehunt&lt;/a&gt; bounty that I solved a while ago.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;No matter how good your skills, your portfolio or your references are, there will be a lot of unanswered emails, turned-down offers and disappointing client decisions until you will be able to secure your first customer. After all, it's a numbers game, and landing clients without prior connections can be hard. But it doesn't have to be.&lt;/p&gt;

&lt;p&gt;When you start looking for your first project, use the great variety of sources and tools out there, from word-of-mouth advertising to inbound project newsletters. Try to think out-of-the-box and you might discover new ideas about finding businesses in need. My experience was that there are a huge amount of freelance web development projects out there; they are just hard to find.&lt;/p&gt;

&lt;p&gt;Make sure to set useful bookmarks on websites, with the correct filters applied, to save you time. You can find a sub-selection of websites that I bookmarked with freelance filters enabled throughout the article.&lt;/p&gt;

&lt;p&gt;With the right steps, you will find a company to work for in no time. Always remember: one long-term client can be enough to bring in enough money for the whole year and make you a successful freelancer!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>career</category>
      <category>productivity</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
