<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>4 things I learned from my internship that helped me grow </title>
      <author>Mayank S Jha</author>
      <pubDate>Mon, 21 Dec 2020 17:37:03 +0000</pubDate>
      <link>https://dev.to/mayanksjha/4-things-i-learned-from-my-internship-that-helped-me-grow-2bgg</link>
      <guid>https://dev.to/mayanksjha/4-things-i-learned-from-my-internship-that-helped-me-grow-2bgg</guid>
      <description>&lt;p&gt;Over the summer I had the wonderful opportunity to work as a Software Development Engineer at Amazon. As an international student, getting to work at a prestigious company from FAANG was definitely a goal I never thought I would be able to reach.&lt;/p&gt;

&lt;p&gt;I was extremely nervous but also excited as I did not know what to expect. This was my first internship ever so it was also the first time I was going to be in a professional environment. College is great and all, but it never gives you the true experience of a working environment. We have all been there to some extent. A job/internship is very different from your experience at college or high-school.&lt;/p&gt;

&lt;p&gt;In my experience, I have always tried to take something away from a situation, sometimes the hard way. So, at the end of my internship, I compiled a list of the most important lessons I learned over the summer. I’d like to share them with you.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Start strong, end strong&lt;/li&gt;
&lt;li&gt; Feedback is everything&lt;/li&gt;
&lt;li&gt; You are responsible for your own career&lt;/li&gt;
&lt;li&gt; Have fun&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#start-strong-end-strong" class="anchor"&gt;
  &lt;/a&gt;
  Start Strong, End Strong
&lt;/h2&gt;

&lt;p&gt;Consistency is the name of the game. This a saying that is passed around as a lesson for almost anything in life. The reality is that it is harder than it sounds.&lt;/p&gt;

&lt;p&gt;Consistency, in my opinion, is an umbrella term.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Perseverance&lt;/strong&gt; — One of the single greatest qualities we can have as humans, is perseverance. To face the odds no matter what, and continue to put in the effort to achieve something. Keep at it, and you will make progress to be proud of. Sure, some ideas may still crash and burn but you walk away with so much more. Thomas Edison said, “&lt;em&gt;I just found&lt;/em&gt; &lt;strong&gt;&lt;em&gt;2,000 ways&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;not to&lt;/em&gt; &lt;strong&gt;&lt;em&gt;make a lightbulb&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;; I only needed to find one&lt;/em&gt; &lt;strong&gt;&lt;em&gt;way&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;to&lt;/em&gt; &lt;strong&gt;&lt;em&gt;make&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;it work&lt;/em&gt;.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dive Deep&lt;/strong&gt; — When going up against herculean tasks, you need to be prepared. Break your tasks into smaller components. Go into the storm of your tasks ready. Check your equipment and gear ( tools you need ), check the map ( How will you complete this task? / What are you looking for? ), and READ THE F****** MANUAL.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Consistency&lt;/strong&gt; — Remember that new year’s resolution that died down after school reopened or was it during that deadline week? Join the club. It’s easy to be on top of your game at the start of something but that same energy, dedication dies down after a while. Be aware of this mistake as I myself have fallen victim more than I’d like to admit.&lt;/p&gt;

&lt;p&gt;hm… I should change the title…“Start Strong, End &lt;strong&gt;Stronger&lt;/strong&gt;”&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#feedback-is-everything" class="anchor"&gt;
  &lt;/a&gt;
  Feedback is Everything
&lt;/h2&gt;

&lt;p&gt;This is definitely an important one. Feedback is what drives us to be better at whatever we do. It is the fundamental on which the idea of competition exists. Competition in turn yields better output.&lt;/p&gt;

&lt;p&gt;So, where is the catch?&lt;/p&gt;

&lt;p&gt;Feedback is &lt;strong&gt;never&lt;/strong&gt; nonverbal. It is a bias to think that no feedback means everything is a-okay. Feedback is your own responsibility to make sure that you receive it.&lt;/p&gt;

&lt;p&gt;Don’t take feedback personally. Seek constructive criticism and accept it. I would sometimes make the mistake of feeling like I’m worthless because someone said, “This is wrong, we went over this.” When in reality, I was being guided to watch out for silly mistakes that can happen to anyone.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-are-responsible-for-your-own-career" class="anchor"&gt;
  &lt;/a&gt;
  You are responsible for your own career
&lt;/h2&gt;

&lt;p&gt;My first manager said, “You are responsible for your own career.” and the words have stuck with me ever since. I have thought long and hard about this one.&lt;/p&gt;

&lt;p&gt;Focus on why you are doing what are you are doing. Take a minute to think about it. What is the outcome?&lt;/p&gt;

&lt;p&gt;When working together, trust others, and make sure others can trust you. We should be able to deliver results blindly without going back and forth for cleanups. It gets better over time as we learn to catch and rectify ourselves if something goes wrong.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#have-fun" class="anchor"&gt;
  &lt;/a&gt;
  Have fun
&lt;/h2&gt;

&lt;p&gt;This one is simple…&lt;/p&gt;

&lt;p&gt;Have fun. Take care of your health and well being and reach out when you need assistance. Over the summer, I was cooped up in my university dorm for 3 months working 8 hours a day remotely. So, believe me when I say that I wish I had done something more to keep my well being intact.&lt;/p&gt;

&lt;p&gt;You simply cannot perform at the same level as you would when you are at your best mentally, physically, emotionally and any other “-allys” you can think of.&lt;/p&gt;




&lt;p&gt;When I try to think about what has changed since my summer, I feel that I am definitely a more confident person. I know that when I wake up tomorrow, I will follow these learnings as not just a handbook for the “office life” but also as a form of self-discipline.&lt;/p&gt;

&lt;p&gt;Why? Because f*** it that’s why. But also, because I never said that these learnings helped me grow as a professional. I said that these learnings helped me grow. Period.&lt;/p&gt;

</description>
      <category>career</category>
      <category>leadership</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>How To Create A "Glassmorphic" Template In Pure HTML &amp; CSS.</title>
      <author>Emmaccen</author>
      <pubDate>Mon, 21 Dec 2020 17:02:32 +0000</pubDate>
      <link>https://dev.to/emmaccen/how-to-create-a-glassmorphic-template-in-pure-html-css-3jo4</link>
      <guid>https://dev.to/emmaccen/how-to-create-a-glassmorphic-template-in-pure-html-css-3jo4</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-glassmorphism" class="anchor"&gt;
  &lt;/a&gt;
  What Is Glassmorphism?
&lt;/h1&gt;

&lt;p&gt;If you're hearing the term &lt;strong&gt;"Glassmorpism"&lt;/strong&gt; for the first time, well... It only just got my attention a few hours before this post so, &lt;strong&gt;What is glassmorphism?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Glassmorphism is a new trend which is getting more traction on websites like &lt;a href="https://dribbble.com/"&gt;Dribble&lt;/a&gt;, &lt;a href="https://www.behance.net/"&gt;Behance&lt;/a&gt; etc and I've seen a couple of awesome designs made using this trendy UI.&lt;/p&gt;

&lt;p&gt;Here's an example by &lt;a href="https://dribbble.com/rish_designs"&gt;Rishabh Saxena&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j6p3mYzx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ypnom22fdtrzohl2ga5x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j6p3mYzx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ypnom22fdtrzohl2ga5x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is important to note that as of the time of writing this blog, glassmorphism is not widely used on the web yet. So we're going to be exploring the power of our creativity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#attributescharacteristics" class="anchor"&gt;
  &lt;/a&gt;
  Attributes/Characteristics
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Translucency (frosted-glass)&lt;/li&gt;
&lt;li&gt;Detailed Colors (becomes cloud-like)&lt;/li&gt;
&lt;li&gt;Shadows&lt;/li&gt;
&lt;li&gt;Everything else...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  prerequisites
&lt;/h2&gt;

&lt;p&gt;To follow up with this tutorial, Since it might require we copy-paste some code to test things out, we'll:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create an &lt;strong&gt;HTML&lt;/strong&gt; and &lt;strong&gt;CSS&lt;/strong&gt; file ( &lt;em&gt;index.html&lt;/em&gt; and &lt;em&gt;index.css&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Link to the full working code on &lt;a href="https://github.com/Emmaccen/glass-morphism"&gt;GitHub&lt;/a&gt; if you ever get stuck.&lt;/li&gt;
&lt;li&gt;Link to &lt;a href="https://emmaccen.github.io/glass-morphism/"&gt;Live website&lt;/a&gt; for reference.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main &lt;strong&gt;CSS property&lt;/strong&gt; to watch out for is the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter"&gt;backdrop-filter&lt;/a&gt;. &lt;em&gt;Feel free to get documentations to any CSS or HTML properties on &lt;a href="https://developer.mozilla.org/"&gt;MDN&lt;/a&gt;&lt;/em&gt;. The &lt;code&gt;backdrop-filter : blur(_px)&lt;/code&gt; is what gives it the &lt;strong&gt;frosty-like glass effect&lt;/strong&gt;.&lt;br&gt;
The backdrop-filter does more than just blur a background. Again, check the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter"&gt;MDN&lt;/a&gt; for the full documentation.&lt;/p&gt;

&lt;p&gt;In order for this to work effectively, the element has to be partly translucent(mimicking a glass-effect).&lt;/p&gt;

&lt;p&gt;Now, in our &lt;strong&gt;index.html&lt;/strong&gt; let's paste the code block below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;link rel="stylesheet" href="./index.css" /&amp;gt;
    &amp;lt;meta charset="UTF-8" /&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&amp;gt;
    &amp;lt;meta name="description" content="Glassmorphism" /&amp;gt;
    &amp;lt;meta
      name="keywords"
      content="glassmorphism,UIUX"
    /&amp;gt;
    &amp;lt;meta name="author" content="emmaccen" /&amp;gt;
    &amp;lt;title&amp;gt;Glass Morphism&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div class="landingContainer"&amp;gt;
      &amp;lt;div class="centered"&amp;gt;
        &amp;lt;h1 class="title"&amp;gt;Changing The World&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class="glassContainer"&amp;gt;
        &amp;lt;div class="cover"&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I won't be doing any explanation on the &lt;em&gt;HTML&lt;/em&gt; code snippet since its pretty basic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.css&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;body {
  margin: 0;
  padding: 0;
}

* {
  box-sizing: border-box;
}

.landingContainer {
  /* span the entire desktop height : height: 100vh;*/
  height: 100vh;
  font-family: helvetica;
  /* set a gradient background with 3 colours https://coolors.co/ */
  background: linear-gradient(
    to right,
    rgba(32, 191, 85),
    rgba(32, 164, 243),
    rgba(11, 79, 108)
  );
}

.centered {
  /* center content */
  display: flex;
  justify-content: center;
  align-items: center;
  /* so it takes up its containers height (landingContainer)*/
  height: inherit;
}

.title {
  color: whitesmoke;
  /* cover the entire page width : font-size: 10vw;*/
  font-size: 10vw;
  text-align: center;
}

/* The real deal  starts here*/
.glassContainer {
  position: absolute;
  /* center content */
  display: flex;
  justify-content: center;
  align-items: center;
  top: 0;
  width: 100%;
  height: 100%;
}
.cover {
  transition: 0.5s all ease;
  height: 70%;
  width: 70%;
  background-color: rgba(255, 255, 255, 0.25);
  /* box-shadow: none|h-offset v-offset blur spread color |inset|initial|inherit; */
  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
  /* For the fog-like glass effect */
  backdrop-filter: blur(4px);
  -webkit-backdrop-filter: blur(4px);
  border-radius: 10px;
}

/* responsiveness */

@media (max-width: 700px) {
  .cover {
    height: 30%;
  }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now for the &lt;strong&gt;CSS&lt;/strong&gt; code above. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I got my colour combo from &lt;a href="https://coolors.co/"&gt;Coolors.co&lt;/a&gt; so, you can mix and match to replace mine.&lt;/li&gt;
&lt;li&gt;I've included comments in the code, so I won't have to explain here again. You can Check &lt;a href="https://developer.mozilla.org/"&gt;MDN&lt;/a&gt; for full documentation if any &lt;strong&gt;CSS&lt;/strong&gt; property isn't clear.
The result should look something like this:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lXthzunb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q4t0u0gefjb5jfjlfhj2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lXthzunb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q4t0u0gefjb5jfjlfhj2.png" alt="emmaccen, Oriola Emmanuel, glassmorphism"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So that's it. This tutorial is pretty basic and I wanted it to be something we can go through in 5-10Mins. I hope this wasn't a waste of your precious time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  My Thoughts
&lt;/h3&gt;

&lt;p&gt;Am really looking forward to 2021 and the awesome real-world application of people's creativity with &lt;strong&gt;Glassmorphism&lt;/strong&gt;. I have a feeling it'll trend for quite a while if done right.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pro-tips" class="anchor"&gt;
  &lt;/a&gt;
  Pro Tips
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You can save a lot of time by checking out &lt;a href="https://glassmorphism.com/"&gt;glassmorphism.com&lt;/a&gt;. It's a website that helps you generate glassmorpic &lt;strong&gt;CSS&lt;/strong&gt; styles on the fly. Also, you can modify as you wish (it comes with visual representations too)&lt;/li&gt;
&lt;li&gt;Glassmorphism is not limited to the web alone if you build/design native apps, you might want to implement these designs too.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Am always happy when I get feedback about my blogs, so don't hesitate to play with the comment/discussion area, like and bookmark this blog if you love it or share with others.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href="https://twitter.com/emmaccen"&gt;Twitter&lt;/a&gt;, or send me a sample of what you've created.&lt;br&gt;
You can also fork/clone the repo on &lt;a href="https://github.com/Emmaccen/glass-morphism"&gt;GitHub&lt;/a&gt;. I have two branches created. The &lt;a href="https://github.com/Emmaccen/glass-morphism"&gt;Master/Main&lt;/a&gt; branch is what we practised in this tutorial. The &lt;a href="https://github.com/Emmaccen/glass-morphism/tree/glass-morphism-v2"&gt;Second branch&lt;/a&gt; is what we have as the cover image of the article.&lt;/p&gt;

&lt;p&gt;If you read up to this point, &lt;strong&gt;thank you&lt;/strong&gt; I appreciate your will to learn and am happy to have you reading this.&lt;br&gt;
Check out other &lt;a href="https://dribbble.com/tags/glassmorphism"&gt;Glassmorphic designs&lt;/a&gt; on &lt;a href="https://dribbble.com/"&gt;dribble.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;More Design Inspiration&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Design by &lt;a href="https://dribbble.com/AkashRajDahal"&gt;Aakash Raj Dahal&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bN2frsUf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4cjdpc4vfgnmpui942ju.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bN2frsUf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4cjdpc4vfgnmpui942ju.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mobile design by &lt;a href="https://dribbble.com/Brightlab"&gt;Brightlab&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QteKTuBf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ud231ui5aukay8kqes0g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QteKTuBf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ud231ui5aukay8kqes0g.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>ux</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to easily convert HTML Form to JSON</title>
      <author>Jordan Finneran</author>
      <pubDate>Mon, 21 Dec 2020 13:56:46 +0000</pubDate>
      <link>https://dev.to/jordanfinners/how-to-easily-convert-html-form-to-json-3pea</link>
      <guid>https://dev.to/jordanfinners/how-to-easily-convert-html-form-to-json-3pea</guid>
      <description>&lt;h1&gt;
  &lt;a href="#contents" class="anchor"&gt;
  &lt;/a&gt;
  Contents
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#intro"&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#form-data"&gt;Form Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gotcha"&gt;Gotcha's&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#examples"&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#intro" class="anchor"&gt;
  &lt;/a&gt;
  Intro &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;I have a love, but sometimes hate, relationship with HTML Forms. HTML Forms are absolutely brilliant for out of the box validation, accessibility and usability. But they can be a pain to style!&lt;br&gt;
Nevertheless, HTML Forms give you massive amounts of functionality with zero dependencies. &lt;/p&gt;

&lt;p&gt;If you are anything like me, you prefer your API to be JSON based. Making it easier and more consistent to deal with requests and responses on the backend.&lt;br&gt;
You &lt;em&gt;could&lt;/em&gt; add a middleware to your API endpoint that's going to handle your Form UI but why make that endpoint different from the rest?&lt;/p&gt;

&lt;p&gt;What if you could send your Form data off in JSON format and handle it like all your other endpoints. Now you can!&lt;/p&gt;

&lt;p&gt;TLDR; Skip to the &lt;a href="#examples"&gt;examples&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#form-data" class="anchor"&gt;
  &lt;/a&gt;
  Form Data &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Introducing &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData"&gt;FormData&lt;/a&gt;, this is a really nice Web API for manipulating data in HTML Forms.&lt;/p&gt;

&lt;p&gt;This allows us to easily convert a HTML Form to JSON using the following.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Grab the form element from the DOM.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Pass the form to the following function
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Creates a json object including fields in the form
 *
 * @param {HTMLElement} form The form element to convert
 * @return {Object} The form data
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFormJSON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Action the JSON Object result, however you want to handle the data from the form! Send it off with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch"&gt;Fetch&lt;/a&gt; for example.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;
  &lt;a href="#gotchas" class="anchor"&gt;
  &lt;/a&gt;
  Gotcha's &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;As with everything these are a few gotchas to look out for!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#checkboxs" class="anchor"&gt;
  &lt;/a&gt;
  Checkbox's
&lt;/h2&gt;

&lt;p&gt;If ticked your checkbox's will appear in the result as 'on'. Probably not the boolean you want.&lt;br&gt;
For example, if you've got this input in your form, which the user has checked.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"isOpen"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;checked&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It would produce, using the function above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"isOpen"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"on"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You will probably want to check for the property and if it equals 'on' and convert it to a boolean.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#file-uploads" class="anchor"&gt;
  &lt;/a&gt;
  File Uploads
&lt;/h2&gt;

&lt;p&gt;This one really caught me out, if you've got a file input which accepts multiple files, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"uploads"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt; &lt;span class="na"&gt;multiple&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If one file is uploaded you will get a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/File"&gt;File&lt;/a&gt; object.&lt;br&gt;
But if you have multiple files uploaded, you will actually get a list of them.&lt;/p&gt;

&lt;p&gt;Fortunately, there is a really simple fix for this to consistently provide you with a list of files.&lt;br&gt;
Grab the files from the result and process them like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will consistently give you a list of files, handling if only a single file is uploaded, no file is uploaded or multiples are uploaded.&lt;/p&gt;

&lt;p&gt;This also means you can do more client side checks on file sizes and limits for example as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inputs-with-the-same-name" class="anchor"&gt;
  &lt;/a&gt;
  Inputs with the same name
&lt;/h2&gt;

&lt;p&gt;Let's say you've got a list of possible tags and a user can tick the ones that apply, perhaps which programming languagues they know, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"tags"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"javascript"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"tags"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"python"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With the current solution, you would only get the last selected checkbox as the keys would be overridden in the reduce. However there is a simple fix for this as well.&lt;/p&gt;

&lt;p&gt;We check to see if the key (the name attribute on the input) already exists in the result, if it does then use a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData/getAll"&gt;getAll&lt;/a&gt; method which will get a list of results.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Creates a json object including fields in the form
 *
 * @param {HTMLElement} form The form element to convert
 * @return {Object} The form data
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFormJSON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Similarly, to the file upload before, you'll want to handle only one being ticked, no being ticked or multiple, with something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]].&lt;/span&gt;&lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#examples" class="anchor"&gt;
  &lt;/a&gt;
  Examples &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Shut up and show me the code.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#examples/interactive"&gt;Interactive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#examples/simple"&gt;Simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#examples/full"&gt;Full&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#examples/test"&gt;Bonus: Example Test&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;br&gt;
&lt;iframe src="https://jsfiddle.net/Lmg1f3tu//embedded/result,html,css,js//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simple-example" class="anchor"&gt;
  &lt;/a&gt;
  Simple Example &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"forms"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"forms"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Whats your username?
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;How many years have you been a developer?
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"age"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;// get the form element from dom&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;form#forms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// convert the form to JSON&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFormJSON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="c1"&gt;// handle the form submission event, prevent default form behaviour, check validity, convert form to JSON&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;formElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reportValidity&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;valid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getFormJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;formElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#full-example" class="anchor"&gt;
  &lt;/a&gt;
  Full Example &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"forms"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"forms"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Whats your username?
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;How many years have you been a developer?
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"age"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Upload images
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"images"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt; &lt;span class="na"&gt;accept=&lt;/span&gt;&lt;span class="s"&gt;"image/png, image/jpeg"&lt;/span&gt; &lt;span class="na"&gt;multiple&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Do you know javascript?
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"languages"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"javascript"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Do you know python?
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"languages"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"python"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Enjoyed this blog?
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"isHappyReader"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;// get the form element from dom&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;form#forms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// convert the form to JSON&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFormJSON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="c1"&gt;// handle the form submission event, prevent default form behaviour, check validity, convert form to JSON&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;valid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;formElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reportValidity&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;valid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getFormJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// handle one, multiple or no files uploaded&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;images&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;// handle one, multiple or no languages selected&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;languages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;languages&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]].&lt;/span&gt;&lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;// convert the checkbox to a boolean&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isHappyReader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isHappyReader&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isHappyReader&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;on&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;// use spread function, but override the keys we've made changes to&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;languages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;isHappyReader&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;formElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bonus-example-test" class="anchor"&gt;
  &lt;/a&gt;
  Bonus: Example Test &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should return a JSON representation of a form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;int&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getFormJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deep&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;10&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;In summary, you can use what browsers give you to get all the great benefits of HTML Forms, and then convert it to JSON so it's easier to work with the data! I hope this has been useful.&lt;/p&gt;

&lt;p&gt;Happy Form building!&lt;/p&gt;

&lt;p&gt;Would you be interested in a series of what you can achieve with HTML and Web APIs?&lt;br&gt;
What are you favourite web tips and tricks? &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>html</category>
      <category>form</category>
    </item>
    <item>
      <title>How to write good documentation</title>
      <author>Victoria Drake</author>
      <pubDate>Mon, 21 Dec 2020 09:53:10 +0000</pubDate>
      <link>https://dev.to/victoria/how-to-write-good-documentation-6i1</link>
      <guid>https://dev.to/victoria/how-to-write-good-documentation-6i1</guid>
      <description>&lt;p&gt;If you’ve ever half-written a software project before taking a few days off, this is the article you’ll discover you needed when you reopen that IDE.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UzoNKXiu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d80tf4azdv87zswimare.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UzoNKXiu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d80tf4azdv87zswimare.png" alt="Friday's completed puzzle vs Monday's pile of puzzle pieces. Comic by author."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the technology teams I lead, we make a constant effort to document all the things. Documentation lives alongside the code as an equal player. This helps ensure that no one needs to make assumptions about how something works, or is calling lengthy meetings to gain working knowledge of a feature. Good documentation saves us a lot of time and hassle.&lt;/p&gt;

&lt;p&gt;That said, and contrary to popular belief, the most valuable software documentation is not primarily written for other people. As I said in this well-received tweet:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--7TLFsAUX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1318325316436283392/oAuBzLxe_normal.jpg" alt="Victoria Drake profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Victoria Drake
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @victoriadotdev
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      The secret to good documentation is to write it while you're writing the code. You are your first audience. Explain what you're doing to yourself. Future you will thank you!
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:46 PM - 24 Nov 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1331262801797652483" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-reply-action.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1331262801797652483" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-retweet-action.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      56
      &lt;a href="https://twitter.com/intent/like?tweet_id=1331262801797652483" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-like-action.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
      308
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;With holidays around the corner, it’d be prudent to prepare for the possibility of some eggnog-induced programming paralysis. (Pecan pie and Python make a great combination.) 🥧🐍&lt;/p&gt;

&lt;p&gt;Here are three concrete steps you can take to write good documentation before it’s too late.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-start-with-accurate-notes" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://victoria.dev/blog/how-to-write-good-documentation/#1-start-with-accurate-notes"&gt;1. Start with accurate notes&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;As you work out ideas in code, ensure you don’t soon forget important details by starting with accurate notes. While you will want to explain things to yourself in long-form later, short-form notes will suffice to capture details without interrupting your coding session flow.&lt;/p&gt;

&lt;p&gt;Keep a document open alongside your code and write down things like commands, decisions, and sources you use. This can include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Terminal commands you typed in&lt;/li&gt;
&lt;li&gt;Why you chose a particular method over another&lt;/li&gt;
&lt;li&gt;Links you visited for help or &lt;em&gt;cough_copy-paste_cough&lt;/em&gt; inspiration&lt;/li&gt;
&lt;li&gt;The order in which you did things&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don’t worry about full sentences at this point. Just ensure you accurately capture context, relevant code snippets, and helpful URLs. It can also be helpful to turn on any auto-save option available.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-explain-decisions-in-long-form" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://victoria.dev/blog/how-to-write-good-documentation/#2-explain-decisions-in-long-form"&gt;2. Explain decisions in long form&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The ideal time to tackle this step is when you take a break from coding, but before you completely go out to lunch on whatever it is you’re working on at the moment. You want to ensure that context, ideas, and decisions are all still fresh in your mind when you explain them to yourself.&lt;/p&gt;

&lt;p&gt;Go over the short-form notes you took and start expanding them into conversational writing. Be your own rubber duck. Describe what you’re doing as if you were teaching it to someone else. You might cover topics such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Quirky-looking decisions: “I would normally do it this way, but I chose to do something different because…”&lt;/li&gt;
&lt;li&gt;Challenges you ran into and how you overcame them&lt;/li&gt;
&lt;li&gt;Architectural decisions that support your project goals&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stick to the main points. Long-form writing doesn’t mean you’ll be paid by the word! Just use full sentences, and write as if explaining your project to a colleague. You’re explaining to future you, after all.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-dont-neglect-prerequisite-knowledge" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://victoria.dev/blog/how-to-write-good-documentation/#3-dont-neglect-prerequisite-knowledge"&gt;3. Don’t neglect prerequisite knowledge&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This step is best done after a long lunch break, or even the next day (but probably not two). Re-read your document and fill in any blanks that become apparent after putting some distance between yourself and the project.&lt;/p&gt;

&lt;p&gt;Take extra care to fill in or at least link to prerequisite knowledge, especially if you frequently use different languages or tools. Even an action as small as pasting in a link to the API documentation you used can save hours of future searching.&lt;/p&gt;

&lt;p&gt;Write down or link to READMEs, installation steps, and relevant support issues. For frequently performed command-line actions, you can use a &lt;a href="https://victoria.dev/blog/how-to-create-a-self-documenting-makefile/"&gt;self-documenting Makefile&lt;/a&gt; to avoid having to &lt;code&gt;man&lt;/code&gt; common tasks each time you come back to a project.&lt;/p&gt;

&lt;p&gt;It’s easy to forget supporting details after even just a short break from your project. Capture anything you found helpful this time around.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#document-all-the-things" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://victoria.dev/blog/how-to-write-good-documentation/#document-all-the-things"&gt;Document all the things&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The next time you catch yourself thinking, “I’m sure I’ll remember this part, no need to write it down,” just recall this emoji: 🤦‍♀️&lt;/p&gt;

&lt;p&gt;Software projects are made up of a lot more than just their code. To best set up your future self for success, document all the things! Whether it’s a process you’ve established, Infrastructure as Code, or a fleeting future roadmap idea — write it down! Future you will thank you for it.&lt;/p&gt;

&lt;p&gt;If you enjoyed this post, I'd love to know. Join the thousands of people who learn along with me on &lt;a href="https://victoria.dev"&gt;victoria.dev&lt;/a&gt;! Visit and subscribe for more about building your coding skill stack.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>devtips</category>
      <category>opensource</category>
    </item>
    <item>
      <title>12 open source browser tools and how I've built them</title>
      <author>Vitaly Rtishchev</author>
      <pubDate>Mon, 21 Dec 2020 08:48:31 +0000</pubDate>
      <link>https://dev.to/rtivital/12-open-source-browser-tools-and-how-i-ve-built-them-1nl4</link>
      <guid>https://dev.to/rtivital/12-open-source-browser-tools-and-how-i-ve-built-them-1nl4</guid>
      <description>&lt;p&gt;I'm happy to announce that I've finished development of &lt;a href="https://omatsuri.app/"&gt;Omatsuri&lt;/a&gt; – &lt;a href="https://github.com/rtivital/omatsuri"&gt;open source&lt;/a&gt; React PWA that includes 12 Frontend focused tools. In this post I'll share some insights on how these tools were built.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qq7h-6a4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n8ihfxr0zuxkv6my4733.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qq7h-6a4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n8ihfxr0zuxkv6my4733.png" alt="Omatsuri landing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-tools" class="anchor"&gt;
  &lt;/a&gt;
  The tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CSS Triangle Generator&lt;/li&gt;
&lt;li&gt;Gradient Generator + Gradient Gallery&lt;/li&gt;
&lt;li&gt;CSS Cursors list&lt;/li&gt;
&lt;li&gt;Color Shades Generator&lt;/li&gt;
&lt;li&gt;Curved Page Dividers Generator&lt;/li&gt;
&lt;li&gt;SVG compressor&lt;/li&gt;
&lt;li&gt;SVG to JSX converter&lt;/li&gt;
&lt;li&gt;Base64 encoder&lt;/li&gt;
&lt;li&gt;Realistic Fake Data Generator&lt;/li&gt;
&lt;li&gt;HTML/CSS Symbols Collection&lt;/li&gt;
&lt;li&gt;Lorem/Samuel/Poke Ipsum Generator&lt;/li&gt;
&lt;li&gt;JavaScript Events Keycodes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#technical-details" class="anchor"&gt;
  &lt;/a&gt;
  Technical details
&lt;/h2&gt;

&lt;p&gt;My main purpose was to make Omatsuri a browser only application. This approach allows to reduce costs for server hosting that does heavy jobs, like SVG compression, Prettier transformations, encodings and other heavy things. This also means that application will always be fully accessible offline without any limitations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#service-worker-and-offline-support" class="anchor"&gt;
  &lt;/a&gt;
  Service worker and offline support
&lt;/h3&gt;

&lt;p&gt;Since Omatsuri is a browser only application the only thing that we need from service worker is to cache assets and provide app shell. &lt;a href="https://github.com/NekR/offline-plugin"&gt;Offline plugin&lt;/a&gt; does exactly that, the only thing we need to do – add it to the production build in &lt;a href="https://github.com/rtivital/omatsuri/blob/master/webpack.config.js#L192"&gt;webpack config&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;OfflinePlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;autoUpdate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;appShell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;excludes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;404.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CNAME&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we are ready to &lt;a href="https://github.com/rtivital/omatsuri/blob/master/src/components/Navbar/Navbar.jsx#L43-L47"&gt;listen to service worker ready state&lt;/a&gt; and propose user to install PWA when it's done loading:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serviceWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ready&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setOffline&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setOffline&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#github-pages-and-react-router" class="anchor"&gt;
  &lt;/a&gt;
  Github Pages and React Router
&lt;/h3&gt;

&lt;p&gt;Omatsuri is hosted on Github Pages – it's free and does fine job of serving static assets. There is only one problem – it does not work well with browser history and as I was building a SPA I wanted to fully control routing with React Router. &lt;/p&gt;

&lt;p&gt;For example, gh-pages will return index.html for / request, but there is no way to force it to return the same index.html for /triangle-generator route. &lt;/p&gt;

&lt;p&gt;The workaround here is to create separate 404.html with the same content as in index.html – gh-pages will send it for each request that cannot be found in static files and  service worker will do the rest of the job. This is not perfect as gh-pages will return 404 status, but at least it works fine.&lt;/p&gt;

&lt;p&gt;Another issue with gh-pages – small cache TTL (10 minutes), it lowers Lighthouse score, but is not critical since we have service worker.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DwNaszLN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hvh3kig3d53kfe52usb6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DwNaszLN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hvh3kig3d53kfe52usb6.png" alt="Omatsuri lighthouse score"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#svg-compression" class="anchor"&gt;
  &lt;/a&gt;
  SVG compression
&lt;/h3&gt;

&lt;p&gt;There is actually only one good library for SVG compression (&lt;a href="https://github.com/svg/svgo"&gt;SVGO&lt;/a&gt;) written in JavaScript. And it does not have browser support, only Node.js. I found it very strange as compression is based entirely on string parsing and does not include any node specific logic. &lt;/p&gt;

&lt;p&gt;So my first task was to migrate SVGO to browser. It was pretty easy, since all core logic did not require any modifications. And now you can use &lt;a href="https://github.com/rtivital/svgo-browser"&gt;svgo-browser&lt;/a&gt; library in your projects if you ever need SVG compression in browser.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-workers" class="anchor"&gt;
  &lt;/a&gt;
  Web workers
&lt;/h3&gt;

&lt;p&gt;Some task are very heavy and can block your browser for several seconds. To fix this, we can put them in separate thread using web workers and they will run in background without blocking the main thread. &lt;/p&gt;

&lt;p&gt;I was surprised how easy it is to work with web workers in webpack. All you need is &lt;a href="https://github.com/webpack-contrib/worker-loader"&gt;worker-loader&lt;/a&gt; that will handle all worker bundling for you.&lt;/p&gt;

&lt;p&gt;Here is an &lt;a href="https://github.com/rtivital/omatsuri/blob/master/src/workers/svg-to-jsx.worker.js"&gt;example&lt;/a&gt; of web worker usage for transforming svg to jsx with prettier and svg compression:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// svg-to-jsx.worker.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;prettier&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prettier/standalone&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;prettierBabel&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prettier/parser-babel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;svg2jsx&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svg-to-jsx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;optimize&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svgo-browser/lib/optimize&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generateComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`import React from 'react';\n\nexport default function SvgComponent() { return &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; }`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;optimize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;svg2jsx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;prettier&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;generateComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;babel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prettierBabel&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// react component&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useLayoutEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Svg2jsxWorker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../workers/svg-to-jsx.worker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;svg2jsx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Svg2jsxWorker&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SvgToJsx&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setResult&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setResult&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;svg2jsx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;useLayoutEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;svg2jsx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleMessage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;svg2jsx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleMessage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dark-theme-support" class="anchor"&gt;
  &lt;/a&gt;
  Dark theme support
&lt;/h3&gt;

&lt;p&gt;By default Omatsuri uses system theme, to listen to those changes, I've created &lt;a href="https://github.com/rtivital/xooks/blob/master/src/use-color-scheme/use-color-scheme.ts"&gt;react hook&lt;/a&gt; that returns current browser theme:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;media&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(prefers-color-scheme: dark)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useColorScheme&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;scheme&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setScheme&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;media&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSchemeChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;setScheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;media&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleSchemeChange&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;media&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleSchemeChange&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;scheme&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It's not enough though, since I wanted to give an option  to change theme. To achieve that I've created &lt;a href="https://github.com/rtivital/omatsuri/blob/master/src/ThemeProvider.jsx"&gt;ThemeProvider component&lt;/a&gt; that wraps entire application and provides theme value via react context. To get theme in any component all I need is to call useTheme hook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTheme&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusions" class="anchor"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;Omatsuri was my first PWA and I really enjoyed the process – existing tools make it super easy to transform your regular React SPA to PWA and utilize complex things like web workers.&lt;/p&gt;

&lt;p&gt;During the development apart from Omatsuri itself I've created two additional npm libraries:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/rtivital/xooks"&gt;xooks&lt;/a&gt; – React hooks library that includes all hooks that I've used during Omatsuri development (localstorage manipulations, system theme detection, clipboard utils and six others).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rtivital/svgo-browser"&gt;svgo-browser&lt;/a&gt; – svgo fork with better Node.js API and browser support.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#support-omatsuri" class="anchor"&gt;
  &lt;/a&gt;
  Support Omatsuri
&lt;/h2&gt;

&lt;p&gt;If you like Omatsuri please give it a star on Github – &lt;a href="https://github.com/rtivital/omatsuri"&gt;https://github.com/rtivital/omatsuri&lt;/a&gt; and install it as PWA – this will assure that you have all 12 tools even when you are offline.&lt;/p&gt;

&lt;p&gt;Thanks for your support!&lt;/p&gt;

</description>
      <category>react</category>
      <category>pwa</category>
      <category>javascript</category>
      <category>webpack</category>
    </item>
    <item>
      <title>How to highlight countries with Mapbox</title>
      <author>ngnijland</author>
      <pubDate>Mon, 21 Dec 2020 08:11:18 +0000</pubDate>
      <link>https://dev.to/ngnijland/how-to-highlight-countries-with-mapbox-1ef</link>
      <guid>https://dev.to/ngnijland/how-to-highlight-countries-with-mapbox-1ef</guid>
      <description>&lt;p&gt;I'm working on a trips section on my personal website. To visualize the countries I have visited, I wanted to show a map and highlight every country I visited. Since this was not a straightforward task and it took me longer than expected I thought I would share how this works.&lt;/p&gt;

&lt;p&gt;Just here for the code? Checkout this &lt;a href="https://github.com/ngnijland/highlight-countries-mapbox"&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setup-mapbox" class="anchor"&gt;
  &lt;/a&gt;
  Setup Mapbox
&lt;/h1&gt;

&lt;p&gt;First, we want a running instance of Mapbox. I choose to use Mapbox GL JS as I wanted a smooth experience for future animations and transitions on the map of my personal website. Mapbox GL JS is a JavaScript library that uses WebGL to promise this smooth experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#include-sources" class="anchor"&gt;
  &lt;/a&gt;
  Include sources
&lt;/h2&gt;

&lt;p&gt;To render a Mapbox map you need to include the Mapbox GL JS library and styles in your code. You can either add it using Mapbox's CDN with a script and link tag or use a module bundler like npm or yarn. &lt;/p&gt;

&lt;p&gt;To be able to setup up a bare minimum as an example I chose to use Mapbox's CDN. It is done by adding the following lines of code to the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of your HTML file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;'https://api.mapbox.com/mapbox-gl-js/v2.0.0/mapbox-gl.js'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;'https://api.mapbox.com/mapbox-gl-js/v2.0.0/mapbox-gl.css'&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;'stylesheet'&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you want to use a module bundler checkout their &lt;a href="https://docs.mapbox.com/mapbox-gl-js/api/"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#access-token" class="anchor"&gt;
  &lt;/a&gt;
  Access token
&lt;/h2&gt;

&lt;p&gt;To use a Mapbox map you need an access token. To get one, you need to create a Mapbox account (&lt;a href="https://account.mapbox.com/auth/signup/"&gt;https://account.mapbox.com/auth/signup/&lt;/a&gt;) and retrieve an access token from your account page (&lt;a href="https://account.mapbox.com/"&gt;https://account.mapbox.com/&lt;/a&gt;). Once you have your access token it is time to render a map on your page!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#render-map" class="anchor"&gt;
  &lt;/a&gt;
  Render map
&lt;/h2&gt;

&lt;p&gt;Mapbox needs an element to render its map in. Let's add one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"map"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To make it fill the entire page add the following CSS to the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of your HTML file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nf"&gt;#map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now hand Mapbox your access token and initialize a new &lt;code&gt;Map&lt;/code&gt; instance by adding the following script tag to the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; of your HTML file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;mapboxgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accessToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;YOUR ACCESS TOKEN HERE&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;mapboxgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;map&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mapbox://styles/mapbox/streets-v11&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We now have a fully working Mapbox map running in our browser!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NJN_PVq7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qzxt6mwdhvy3ic0zjwch.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NJN_PVq7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qzxt6mwdhvy3ic0zjwch.png" alt="A browser window showing a full-size Mapbox map."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The complete code to achieve this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;'en'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;'UTF-8'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;'viewport'&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;'width=device-width, initial-scale=1'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Highlight countries in mapbox&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;'https://api.mapbox.com/mapbox-gl-js/v2.0.0/mapbox-gl.js'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;'https://api.mapbox.com/mapbox-gl-js/v2.0.0/mapbox-gl.css'&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;'stylesheet'&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nf"&gt;#map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'map'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;mapboxgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accessToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;YOUR ACCESS TOKEN HERE&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;mapboxgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;map&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mapbox://styles/mapbox/streets-v11&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#highlight-countries" class="anchor"&gt;
  &lt;/a&gt;
  Highlight countries
&lt;/h1&gt;

&lt;p&gt;Now we have a map, the next step is to highlight individual countries. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tilesets" class="anchor"&gt;
  &lt;/a&gt;
  Tilesets
&lt;/h2&gt;

&lt;p&gt;Mapbox works with layers where you can display tilesets. These tilesets consist of vectors that render on a specific place on the map. You can create your own tileset or use existing ones. &lt;/p&gt;

&lt;p&gt;We will use this &lt;a href="https://studio.mapbox.com/tilesets/mapbox.country-boundaries-v1/"&gt;countries tileset&lt;/a&gt; supplied by Mapbox.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-a-layer" class="anchor"&gt;
  &lt;/a&gt;
  Add a layer
&lt;/h2&gt;

&lt;p&gt;To render this tileset on top of our map we have to add a layer to our map. We can do this on the callback of the &lt;code&gt;Map&lt;/code&gt;'s &lt;code&gt;load&lt;/code&gt; event.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;load&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addLayer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we add a config which will add the countries tileset to this layer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;load&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;country-boundaries&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vector&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mapbox://mapbox.country-boundaries-v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;source-layer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;country_boundaries&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fill&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fill-color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#d2361e&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fill-opacity&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;country-label&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After the tileset config, we add &lt;code&gt;'country-label'&lt;/code&gt; to make sure the country names render on top of the country tileset.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;paint&lt;/code&gt; section of the config, you can choose the color and opacity in which countries should highlight. In this case &lt;code&gt;#d2361e&lt;/code&gt; with an opacity of &lt;code&gt;0.4&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This results in all countries being highlighted:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IIIVOfra--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g61klpxo442f2ahre72l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IIIVOfra--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g61klpxo442f2ahre72l.png" alt="A browser window showing a full-size Mapbox map highlighting all countries in red with a 60% opacity."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#filter" class="anchor"&gt;
  &lt;/a&gt;
  Filter
&lt;/h2&gt;

&lt;p&gt;Mapbox's country tileset identify countries with &lt;a href="https://www.iso.org/iso-3166-country-codes.html"&gt;ISO 3166-1 country codes&lt;/a&gt;. You can add a filter to the &lt;code&gt;country-boundaries&lt;/code&gt; layer and use these country codes to highlight specific countries. This should also be done in the &lt;code&gt;Map&lt;/code&gt;'s &lt;code&gt;load&lt;/code&gt; event:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;country-boundaries&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;in&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;iso_3166_1_alpha_3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NLD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ITA&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will highlight The Netherlands and Italy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pUJ2E4_N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c0m2q4rx5iggzb42by1x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pUJ2E4_N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c0m2q4rx5iggzb42by1x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we achieved what we wanted! Check out all the code needed here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;'en'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;'UTF-8'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;'viewport'&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;'width=device-width, initial-scale=1'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Highlight countries in mapbox&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;'https://api.mapbox.com/mapbox-gl-js/v2.0.0/mapbox-gl.js'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;'https://api.mapbox.com/mapbox-gl-js/v2.0.0/mapbox-gl.css'&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;'stylesheet'&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nf"&gt;#map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;'map'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;mapboxgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accessToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;YOUR ACCESS TOKEN HERE&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;mapboxgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;map&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mapbox://styles/mapbox/streets-v11&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;load&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;country-boundaries&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vector&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mapbox://mapbox.country-boundaries-v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;source-layer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;country_boundaries&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fill&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fill-color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#d2361e&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fill-opacity&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;country-label&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;country-boundaries&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;in&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;iso_3166_1_alpha_3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;NLD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ITA&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Thanks for reading this article! Check out all the code needed in this &lt;a href="https://github.com/ngnijland/highlight-countries-mapbox"&gt;repository&lt;/a&gt;. If you're interested in how I applied it on my website you can find it at &lt;a href="https://nieknijland.nl/trips"&gt;https://nieknijland.nl/trips&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Do you like this article? Maybe you'll like these as well:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ngnijland/use-multiple-versions-of-an-npm-package-at-the-same-time-582g"&gt;Use multiple versions of an npm package at the same time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ngnijland/run-asynchronous-tasks-in-batches-in-nodejs-599a"&gt;Run asynchronous tasks in batches in NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's get in contact! Comment below on this article or follow me on Twitter &lt;a href="https://twitter.com/ngnijland"&gt;@ngnijland&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>mapbox</category>
      <category>map</category>
      <category>webgl</category>
    </item>
    <item>
      <title>30 Machine Learning, AI, &amp; Data Science Project Ideas</title>
      <author>Henry Boisdequin</author>
      <pubDate>Mon, 21 Dec 2020 07:57:28 +0000</pubDate>
      <link>https://dev.to/hb/30-machine-learning-ai-data-science-project-ideas-gf5</link>
      <guid>https://dev.to/hb/30-machine-learning-ai-data-science-project-ideas-gf5</guid>
      <description>&lt;p&gt;The best way to learn machine learning, AI, and data science is by creating projects. This way you learn all the concepts you need to know in a real-life situation. What project should I make? I will give you 30 machine learning, AI, and data science project ideas with a description, tutorial if you get stuck, and some further details.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-titanic-survival-project" class="anchor"&gt;
  &lt;/a&gt;
  1. Titanic Survival Project
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Use machine learning to create a model that predicts which passengers survived the Titanic shipwreck.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Beginner&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.kaggle.com/c/titanic/notebooks"&gt;https://www.kaggle.com/c/titanic/notebooks&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-chatbot" class="anchor"&gt;
  &lt;/a&gt;
  2. Chatbot
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a chatbot which responds to your messages appropriately. &lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate &lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.youtube.com/watch?v=019a30EnNGk&amp;amp;list=PLlH6o4fAIji5JmlmEs-MYe1tYBwuwW5ah"&gt;https://www.youtube.com/watch?v=019a30EnNGk&amp;amp;list=PLlH6o4fAIji5JmlmEs-MYe1tYBwuwW5ah&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-sentiment-analysis-project" class="anchor"&gt;
  &lt;/a&gt;
  3. Sentiment Analysis Project
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a sentiment analysis model which finds the sentiment of the given text.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate &lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.youtube.com/watch?v=RqvYSY7deeA&amp;amp;list=PLlH6o4fAIji5JmlmEs-MYe1tYBwuwW5ah&amp;amp;index=6"&gt;https://www.youtube.com/watch?v=RqvYSY7deeA&amp;amp;list=PLlH6o4fAIji5JmlmEs-MYe1tYBwuwW5ah&amp;amp;index=6&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-image-captioning-project" class="anchor"&gt;
  &lt;/a&gt;
  4. Image Captioning Project
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a machine learning model to create a caption for a given image.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Advanced &lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.youtube.com/watch?v=UtlnGkqk1VU&amp;amp;list=PLlH6o4fAIji5JmlmEs-MYe1tYBwuwW5ah&amp;amp;index=16"&gt;https://www.youtube.com/watch?v=UtlnGkqk1VU&amp;amp;list=PLlH6o4fAIji5JmlmEs-MYe1tYBwuwW5ah&amp;amp;index=16&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-convert-image-to-pencil-sketch-project" class="anchor"&gt;
  &lt;/a&gt;
  5. Convert Image to Pencil Sketch Project
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a machine learning model to convert a given image to a pencil sketch. &lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Beginner &lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.youtube.com/watch?v=lI94fv_1ow0&amp;amp;list=PLlH6o4fAIji5JmlmEs-MYe1tYBwuwW5ah&amp;amp;index=25"&gt;https://www.youtube.com/watch?v=lI94fv_1ow0&amp;amp;list=PLlH6o4fAIji5JmlmEs-MYe1tYBwuwW5ah&amp;amp;index=25&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#6-customer-segmentation" class="anchor"&gt;
  &lt;/a&gt;
  6. Customer Segmentation
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a machine learning model to find out who your loyal customers are.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Advanced &lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.youtube.com/watch?v=fdUofaT8gUw&amp;amp;list=PLlH6o4fAIji5JmlmEs-MYe1tYBwuwW5ah&amp;amp;index=30"&gt;https://www.youtube.com/watch?v=fdUofaT8gUw&amp;amp;list=PLlH6o4fAIji5JmlmEs-MYe1tYBwuwW5ah&amp;amp;index=30&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#7-mnist-project" class="anchor"&gt;
  &lt;/a&gt;
  7. MNIST Project
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create an AI model to detect numbers using the MNIST digit dataset. &lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Beginner &lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://machinelearningmastery.com/how-to-develop-a-convolutional-neural-network-from-scratch-for-mnist-handwritten-digit-classification/"&gt;https://machinelearningmastery.com/how-to-develop-a-convolutional-neural-network-from-scratch-for-mnist-handwritten-digit-classification/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#8-facial-recognition-system" class="anchor"&gt;
  &lt;/a&gt;
  8. Facial Recognition System
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create an AI model to detect who is the person in a given image.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate &lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://youtu.be/QSTnwsZj2yc"&gt;https://youtu.be/QSTnwsZj2yc&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#9-ai-plays-flappy-bird" class="anchor"&gt;
  &lt;/a&gt;
  9. AI Plays Flappy Bird
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create an AI to play a classic game: Flappy Bird.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Beginner &lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://youtu.be/MMxFDaIOHsE?list=PLzMcBGfZo4-lwGZWXz5Qgta_YNX3_vLS2"&gt;https://youtu.be/MMxFDaIOHsE?list=PLzMcBGfZo4-lwGZWXz5Qgta_YNX3_vLS2&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#10-ai-draw-numbers" class="anchor"&gt;
  &lt;/a&gt;
  10. AI Draw Numbers
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a GAN to draw numbers based on the MNIST digit dataset.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Advanced &lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/"&gt;https://machinelearningmastery.com/how-to-develop-a-generative-adversarial-network-for-an-mnist-handwritten-digits-from-scratch-in-keras/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#11-fake-news-detector" class="anchor"&gt;
  &lt;/a&gt;
  11. Fake News Detector
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a machine learning model that can detect if a piece of news is fake or real.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate &lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://data-flair.training/blogs/advanced-python-project-detecting-fake-news/"&gt;https://data-flair.training/blogs/advanced-python-project-detecting-fake-news/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#12-colour-detector" class="anchor"&gt;
  &lt;/a&gt;
  12. Colour Detector
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a machine learning model that can detect what colour is featured in a given image.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Beginner &lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://data-flair.training/blogs/project-in-python-colour-detection/"&gt;https://data-flair.training/blogs/project-in-python-colour-detection/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#13-traffic-signs-recognition-project" class="anchor"&gt;
  &lt;/a&gt;
  13. Traffic Signs Recognition Project
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create an AI model that can classify different traffic lights.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate &lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://data-flair.training/blogs/python-project-traffic-signs-recognition/"&gt;https://data-flair.training/blogs/python-project-traffic-signs-recognition/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#14-fifa-19-player-analysis" class="anchor"&gt;
  &lt;/a&gt;
  14. FIFA 19 Player Analysis
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Analyze FIFA 19 players using linear regression.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Beginner&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.kaggle.com/nitindatta/fifa-in-depth-analysis-with-linear-regression"&gt;https://www.kaggle.com/nitindatta/fifa-in-depth-analysis-with-linear-regression&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#15-airplane-crashes-data-visualization-project" class="anchor"&gt;
  &lt;/a&gt;
  15. Airplane Crashes Data Visualization Project
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Visualize aeroplane crash data.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.kaggle.com/ruslankl/airplane-crashes-data-visualization"&gt;https://www.kaggle.com/ruslankl/airplane-crashes-data-visualization&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#16-covid19-visualization-amp-prediction-project" class="anchor"&gt;
  &lt;/a&gt;
  16. COVID-19 Visualization &amp;amp; Prediction Project
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Visualize and predict COVID-19 cases.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.kaggle.com/therealcyberlord/coronavirus-covid-19-visualization-prediction/"&gt;https://www.kaggle.com/therealcyberlord/coronavirus-covid-19-visualization-prediction/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#17-realtime-vehicle-detection-project" class="anchor"&gt;
  &lt;/a&gt;
  17. Real-time Vehicle Detection Project
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Detect cars in real-time using computer vision.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://dev.to/kalebu/how-to-perform-real-time-vehicle-detection-in-python-4i9h"&gt;https://dev.to/kalebu/how-to-perform-real-time-vehicle-detection-in-python-4i9h&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#18-ai-plays-footballsoccer" class="anchor"&gt;
  &lt;/a&gt;
  18. AI Plays Football/Soccer
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create an AI to play football/soccer in the Google Football Environment.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Advanced&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://youtu.be/SWllbdcrKLI?list=PL3YDJVV_1t7sKR_ZrO1Ursa_c41I0ErzC"&gt;https://youtu.be/SWllbdcrKLI?list=PL3YDJVV_1t7sKR_ZrO1Ursa_c41I0ErzC&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#19-predict-student-test-scores" class="anchor"&gt;
  &lt;/a&gt;
  19. Predict Student Test Scores
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Use student data to predict their end of year test scores with linear regression. &lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Beginner&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://youtu.be/45ryDIPHdGg?list=PLzMcBGfZo4-mP7qA9cagf68V06sko5otr"&gt;https://youtu.be/45ryDIPHdGg?list=PLzMcBGfZo4-mP7qA9cagf68V06sko5otr&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#20-cartoonify-an-image" class="anchor"&gt;
  &lt;/a&gt;
  20. Cartoonify an Image
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Use machine learning to make the given image a cartoon.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://data-flair.training/blogs/cartoonify-image-opencv-python/"&gt;https://data-flair.training/blogs/cartoonify-image-opencv-python/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#21-create-fake-faces" class="anchor"&gt;
  &lt;/a&gt;
  21. Create Fake Faces
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Use a GAN model to create fake human faces. &lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Advanced&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.kaggle.com/sayakdasgupta/fake-faces-with-dcgans"&gt;https://www.kaggle.com/sayakdasgupta/fake-faces-with-dcgans&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#22-mask-detector-project" class="anchor"&gt;
  &lt;/a&gt;
  22. Mask Detector Project
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a real-time mask detector project with Python.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Beginner&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://data-flair.training/blogs/face-mask-detection-with-python/"&gt;https://data-flair.training/blogs/face-mask-detection-with-python/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#23-social-distancing-detector" class="anchor"&gt;
  &lt;/a&gt;
  23. Social Distancing Detector
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Use computer vision to detect whether a group of people are social distancing.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Advanced&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.pyimagesearch.com/2020/06/01/opencv-social-distancing-detector/"&gt;https://www.pyimagesearch.com/2020/06/01/opencv-social-distancing-detector/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#24-handwriting-recognition" class="anchor"&gt;
  &lt;/a&gt;
  24. Handwriting Recognition
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a machine learning model to detect handwriting. &lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.pyimagesearch.com/2020/08/24/ocr-handwriting-recognition-with-opencv-keras-and-tensorflow/"&gt;https://www.pyimagesearch.com/2020/08/24/ocr-handwriting-recognition-with-opencv-keras-and-tensorflow/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#25-email-spam-detection" class="anchor"&gt;
  &lt;/a&gt;
  25. Email Spam Detection
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a machine learning model to detect whether an email is spam or not.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://youtu.be/cNLPt02RwF0"&gt;https://youtu.be/cNLPt02RwF0&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#26-bee-or-wasp" class="anchor"&gt;
  &lt;/a&gt;
  26. Bee or Wasp
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create a machine learning model to detect whether the given image is a bee or a wasp.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Beginner&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.kaggle.com/koshirosato/bee-or-wasp-base-line-using-resnet50"&gt;https://www.kaggle.com/koshirosato/bee-or-wasp-base-line-using-resnet50&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#27-christmas-gift-matching" class="anchor"&gt;
  &lt;/a&gt;
  27. Christmas Gift Matching
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create an AI algorithm that maximizes happiness by pairing kids with toys they want.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Advanced&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.kaggle.com/zfturbo/happiness-vs-gift-popularity-v2-0-89"&gt;https://www.kaggle.com/zfturbo/happiness-vs-gift-popularity-v2-0-89&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#28-text-generation" class="anchor"&gt;
  &lt;/a&gt;
  28. Text Generation
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create an RNN model that generates Shakespeare like text. &lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://www.tensorflow.org/tutorials/text/text_generation"&gt;https://www.tensorflow.org/tutorials/text/text_generation&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#29-ai-plays-connect4" class="anchor"&gt;
  &lt;/a&gt;
  29. AI Plays Connect-4
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create an AI which can play the Connect-4 game.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://youtu.be/8392NJjj8s0"&gt;https://youtu.be/8392NJjj8s0&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#30-checkers-ai" class="anchor"&gt;
  &lt;/a&gt;
  30. Checkers AI
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;: Create an AI which can play the Checkers game.&lt;br&gt;
&lt;strong&gt;Difficulty&lt;/strong&gt;: Intermediate&lt;br&gt;
&lt;strong&gt;Tutorial (if you get stuck)&lt;/strong&gt;: &lt;a href="https://youtu.be/RjdrFHEgV2o?list=PLzMcBGfZo4-myY28wdQuJDBi8pCt-GIj6"&gt;https://youtu.be/RjdrFHEgV2o?list=PLzMcBGfZo4-myY28wdQuJDBi8pCt-GIj6&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Let me know if you have started any of these projects and how it went in the comments! Thanks for reading!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Henry&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Can you become a successful software developer without a CS degree? My opinion</title>
      <author>Natalia Venditto</author>
      <pubDate>Mon, 21 Dec 2020 07:56:38 +0000</pubDate>
      <link>https://dev.to/this-is-learning/can-you-become-a-successful-software-developer-without-a-cs-degree-my-opinion-27om</link>
      <guid>https://dev.to/this-is-learning/can-you-become-a-successful-software-developer-without-a-cs-degree-my-opinion-27om</guid>
      <description>&lt;p&gt;Last week I read a few tweets that really caught my attention. Most of them targeted the 'anti-academia' movement.&lt;/p&gt;

&lt;p&gt;It is not the first time I read some people are anything between skeptical to angry about those who say that you can have a successful career in tech without a CS degree, but these concrete tweets caught my attention because I never knew this particular 'anti-academia' movement existed, and I still have not come across a statement such as 'You should never go to the University!'.&lt;/p&gt;

&lt;p&gt;Although maybe such statements exist and are public out there even as tweets, they never reached me in my feed. Or I never read them. &lt;/p&gt;

&lt;p&gt;What I have read, unfortunately, are snark comments and dismissive remarks, ridiculing people who work in the tech industry without a CS degree, and saying things like "you can do websites, but cannot work on more complex stuff, like diagnose and disease detection software", or even remarks like "yeah, next thing is becoming a doctor without a CS degree. pffft!"&lt;/p&gt;

&lt;p&gt;As a successful software architect without a CS degree, I finally felt like it was a good time to share my opinion.&lt;/p&gt;

&lt;p&gt;After all, I have more than once encouraged people to transition from a different career background or no career background at all, to find new opportunities as developers. Just thinking that they may discouraged by a (sometimes) more privileged group of people for making a late-career choice, or for being unable to afford university education and deciding to get there following a different path, is heartbreaking to me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debunking-some-myths" class="anchor"&gt;
  &lt;/a&gt;
  Debunking some myths
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;First of all, I want to put things into perspective. People who become successful in tech, without a CS degree, are usually far from less intelligent, or too lazy to put the effort.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;People who become successful in tech without a CS degree, usually&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;but not always, have completed university education in another field&lt;/li&gt;
&lt;li&gt;always have spent an exponentially greater amount of time in self-teaching, including using online available resources and contributing to open-source communities, than those who do have a degree, before they get their first role in tech&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;People who have not attained a CS degree, but still have become successful in tech usually&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;but not always, have had to postpone or drop their education because of financial, health-related, or other personal reasons&lt;/li&gt;
&lt;li&gt;but not always, would've loved and would still love to complete their education, even when they're consolidated professionals&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I would say that in 90% of the cases if they would be given the chance, they would attempt at completing their university education and getting a CS degree, which is incompatible with being part of an 'anti-academia' movement.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-is-it-better-to-have-a-computer-sciences-degree-than-not" class="anchor"&gt;
  &lt;/a&gt;
  How is it better to have a computer sciences degree than not?
&lt;/h2&gt;

&lt;p&gt;Let me elaborate my opinion. People who do have a university degree in computer sciences, while still studying, usually&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;learn foundational or low-level concepts in a structured way, which is very important to understand high-level concepts&lt;/li&gt;
&lt;li&gt;but not always, have access to a tutor or professor, to dissipate their doubts and help them apply the newly learned concepts&lt;/li&gt;
&lt;li&gt;but not always, do not need to spend personal time finding the right learning resources, since they're provided&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also once they've attained their degree, they usually&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;almost always have more opportunities to be hired, since lots of companies have it as a hard-requirement &lt;/li&gt;
&lt;li&gt;always are less prone to be immediately discarded by recruiters, upon sending their CV, for not meeting this particular requirement&lt;/li&gt;
&lt;li&gt;almost always have more career progression opportunities&lt;/li&gt;
&lt;li&gt;but not always, are paid more than their counterparts that do exactly the same job, but do not have the CS degree&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#can-we-compare-studying-to-be-a-doctor-to-studying-to-be-a-software-engineer" class="anchor"&gt;
  &lt;/a&gt;
  Can we compare studying to be a doctor to studying to be a software engineer?
&lt;/h2&gt;

&lt;p&gt;No. And why?&lt;/p&gt;

&lt;p&gt;One of my siblings is a doctor, so my opinions are shaped by my experience of living with her, as she was studying. In Uruguay people don't go to Campuses. They stay home while they study, especially if they live in the capital city, Montevideo.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-talk-about-sources" class="anchor"&gt;
  &lt;/a&gt;
  Let's talk about sources
&lt;/h3&gt;

&lt;p&gt;The source of anatomy and pathologies knowledge for doctors, historically and from centuries, has always been actual, real, living and dead human bodies.  I will not share details on how those doctors close to me dissected human parts on the same table I was having my meals. Well, ok, I guess that's enough detail. And yes, that happened. Those body-parts, unique and ultimate source of knowledge to understand anatomy and pathologies, were obviously provisioned by the university. &lt;/p&gt;

&lt;p&gt;Let me begin by sharing with you my opinion that probably the doctors you would like being diagnosed and treated by if you had anything serious, are the ones that have the most amount of clinic practice and not those that are university professors, and rely almost only on theoretical knowledge.&lt;/p&gt;

&lt;p&gt;Clinic practice is obviously not something you can teach on youtube. It would be unethical because you would have to disclose private information about a human being. It is unlikely anyone wants to visit a doctor that streams on Twitch as they perform you a colonoscopy or explores your naked body. &lt;/p&gt;

&lt;p&gt;I know there are a couple of reality shows that feature this, but it is a very extreme exception.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Unlike the act of exploring a human patient, diagnosing them and treating them (which by the way also involves laboratories for analysis with expensive equipment not available to doctors at home while they Twitch, and prescriptions of law regulated medicines), building and diagnosing computer systems and programs in front of everyone else is a lot simpler, cheaper, and ethically acceptable.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Do I think a person could become a good, self-trained doctor if all the bibliography used by doctors was open-sourced, made available from online repositories, and doctors live-streamed their practice with patients (and body-parts) and people put the same amount of time they sometimes put to become developers? Possibly. But my guess is that, because of the ethical implications and obvious other legal issues, that will never happen.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;However, even the most obscure and in-depth details about computer sciences, are available to everyone online, already.&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-or-tldr" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion or tl;dr
&lt;/h2&gt;

&lt;p&gt;Should you study at the University to learn computer sciences and get a degree? My humble opinion is that, if you can afford it, money-wise and time-wise, is: YES! Go for it!&lt;/p&gt;

&lt;p&gt;But if you did not have the chance, or don't see that chance for you in the future, should you desist from the dream of being a successful, self-taught software developer? The answer is: NO! Go for it! &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>healthydebate</category>
      <category>career</category>
    </item>
    <item>
      <title>The JavaScript Event Loop Explained</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 21 Dec 2020 07:09:32 +0000</pubDate>
      <link>https://dev.to/alexdevero/the-javascript-event-loop-explained-4be5</link>
      <guid>https://dev.to/alexdevero/the-javascript-event-loop-explained-4be5</guid>
      <description>&lt;p&gt;The JavaScript event loop is one of the most important things to understand. It helps you understand how things work under the hood. In this tutorial, you will learn what JavaScript event loop is and how it works. You will also learn about a bit about call stack, web APIs and message queue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-blocks-of-javascript" class="anchor"&gt;
  &lt;/a&gt;
  Building blocks of JavaScript
&lt;/h2&gt;

&lt;p&gt;In JavaScript, there are few fundamental building blocks. These blocks are &lt;a href="https://blog.alexdevero.com/memory-life-cycle-heap-stack-javascript/#the-memory-heap"&gt;memory heap&lt;/a&gt;, &lt;a href="https://blog.alexdevero.com/memory-life-cycle-heap-stack-javascript/#the-stack"&gt;stack&lt;/a&gt;, &lt;a href="https://blog.alexdevero.com/memory-life-cycle-heap-stack-javascript/#the-call-stack"&gt;call stack&lt;/a&gt;, &lt;a href="https://dev.tobrowser%20APIs"&gt;web APIs&lt;/a&gt;, message queue and event loop. The memory heap is a place where JavaScript stores objects and functions. The stack is for storing static data, such as primitive data types values.&lt;/p&gt;

&lt;p&gt;The call stack is a mechanism JavaScript uses to keep track of functions that needs to be executed. Web APIs are APIs built into your web browser. These APIs allow you to use features you could not otherwise. Some example are fetch API, geolocation API, WebGL API, Web Workers API and so on.&lt;/p&gt;

&lt;p&gt;These APIs are not part of the JavaScript language itself. They are interfaces built on top of the core JavaScript language. This is also why they are not available in all JavaScript environments. Another thing web APIs also handle are async methods such as the &lt;code&gt;setTimeout&lt;/code&gt; and also event. Now, about message queue and event loop.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#message-queue" class="anchor"&gt;
  &lt;/a&gt;
  Message queue
&lt;/h2&gt;

&lt;p&gt;The message queue is basically a storage. It is a place where JavaScript keeps "messages" it needs to proces. Each of these messages are basically callback functions used with async functions, such as &lt;code&gt;setTimeout&lt;/code&gt;, and also events triggered by users. For example, clicks and keyboard events.&lt;/p&gt;

&lt;p&gt;When any of these async functions gets executed, or events happen, JavaScript will first send them to the call stack. From here, JavaScript will send each function or event to appropriate web API to handle it. Once the API does what it needs to do, it will send a message with associated callback function to the message queue.&lt;/p&gt;

&lt;p&gt;These messages are stored in message queue until the call stack is empty. When the call stack gets empty the first message in the queue, callback, will be pushed to the call stack. Call stack will execute that callback, and the code it contains.&lt;/p&gt;

&lt;p&gt;There is one important thing about message queue. The call stack follows the LIFO principle. This means that last function pushed to the call stack will be processed as the first one. Message queue doesn't follow this principle. In case of message queue, it is the first message, or callback, that will be processed as the first.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-simple-example-of-how-message-queue-works" class="anchor"&gt;
  &lt;/a&gt;
  A simple example of how message queue works
&lt;/h3&gt;

&lt;p&gt;Let's demonstrate this on the &lt;code&gt;setTimeout&lt;/code&gt; method. When you use the &lt;code&gt;setTimeout&lt;/code&gt; method JavaScript will send it to the call stack that will execute it. Executing it will create new timer. This timer will be send to appropriate web API. This API will then start the countdown.&lt;/p&gt;

&lt;p&gt;When the countdown reaches zero, API will send the callback for the &lt;code&gt;setTimeout&lt;/code&gt; method to the message queue. The callback will wait in the message queue until the call stack is empty. When the call stack is empty, JavaScript will take the callback in the message queue and push it to the call stack, which will then execute it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Use setTimeout method to delay&lt;/span&gt;
&lt;span class="c1"&gt;// execution of some function&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;cb&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Step 1:&lt;/span&gt;
&lt;span class="c1"&gt;// Add to call stack: setTimeout(function cb() { console.log('Hello.') }, 500)&lt;/span&gt;

&lt;span class="c1"&gt;// Call stack                                         //&lt;/span&gt;
&lt;span class="c1"&gt;// setTimeout(function cb() { console.log('Hello.') } //&lt;/span&gt;
&lt;span class="c1"&gt;//                                                    //&lt;/span&gt;

&lt;span class="c1"&gt;// Step 2:&lt;/span&gt;
&lt;span class="c1"&gt;// Send cb() to web API&lt;/span&gt;
&lt;span class="c1"&gt;// and remove setTimeout from call stack&lt;/span&gt;
&lt;span class="c1"&gt;// and create timer: 500&lt;/span&gt;

&lt;span class="c1"&gt;// Call stack //&lt;/span&gt;
&lt;span class="c1"&gt;//            //&lt;/span&gt;
&lt;span class="c1"&gt;//            //&lt;/span&gt;

&lt;span class="c1"&gt;// web API     //&lt;/span&gt;
&lt;span class="c1"&gt;// timer, cb() //&lt;/span&gt;
&lt;span class="c1"&gt;//             //&lt;/span&gt;

&lt;span class="c1"&gt;// Step 3:&lt;/span&gt;
&lt;span class="c1"&gt;// When timer is up, send cb() to message queue&lt;/span&gt;
&lt;span class="c1"&gt;// and remove it from web API&lt;/span&gt;

&lt;span class="c1"&gt;// web API     //&lt;/span&gt;
&lt;span class="c1"&gt;//             //&lt;/span&gt;
&lt;span class="c1"&gt;//             //&lt;/span&gt;

&lt;span class="c1"&gt;// message queue //&lt;/span&gt;
&lt;span class="c1"&gt;// cb()          //&lt;/span&gt;
&lt;span class="c1"&gt;//               //&lt;/span&gt;

&lt;span class="c1"&gt;// Step 4:&lt;/span&gt;
&lt;span class="c1"&gt;// When call stack is empty, send cb() to call stack&lt;/span&gt;
&lt;span class="c1"&gt;// and remove it from message queue&lt;/span&gt;

&lt;span class="c1"&gt;// message queue //&lt;/span&gt;
&lt;span class="c1"&gt;//               //&lt;/span&gt;
&lt;span class="c1"&gt;//               //&lt;/span&gt;

&lt;span class="c1"&gt;// Call stack //&lt;/span&gt;
&lt;span class="c1"&gt;// cb()       //&lt;/span&gt;
&lt;span class="c1"&gt;//            //&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#call-stack-message-queue-and-priorities" class="anchor"&gt;
  &lt;/a&gt;
  Call stack, message queue and priorities
&lt;/h2&gt;

&lt;p&gt;In JavaScript, both call stack and message queue have different priorities. The priority of call stack is higher than the priority of message queue. As a result, the message queue has to wait until the call stack is empty before it can push anything from the queue to the call stack.&lt;/p&gt;

&lt;p&gt;Only when the call stack is empty the message queue can push in the first message, or callback. When does this situation happen? The call stack will get empty when all function calls inside it, and call stacks of these calls, are executed. When this is happens, the call stack will be empty and available for message queue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#message-queue-processing-and-zero-delays" class="anchor"&gt;
  &lt;/a&gt;
  Message queue processing and zero delays
&lt;/h2&gt;

&lt;p&gt;Message queue can process only one message at the time. What's more, if message queue contains multiple messages each message has to be processed before any other message can. Processing of every message depends on the completion of the previous message. If one message takes more time to process other messages has to wait.&lt;/p&gt;

&lt;p&gt;This principle is called &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#Run-to-completion"&gt;run-to-completion&lt;/a&gt;. This has another implication called &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#Zero_delays"&gt;zero delays&lt;/a&gt;. Let's say you use &lt;code&gt;setTimeout&lt;/code&gt; method and set the delay to 0. The idea is that the callback passed into this timeout should be executed immediately. The reality is that this might not happen.&lt;/p&gt;

&lt;p&gt;As you know, message queue can process only one message at the time. Each message has to be completed before the queue can process another one. So, if you use &lt;code&gt;setTimeout&lt;/code&gt; with delay set to 0 its callback will be executed immediately only if it is the first message in the message queue. Otherwise, it will have to wait.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-javascript-event-loop" class="anchor"&gt;
  &lt;/a&gt;
  The JavaScript event loop
&lt;/h2&gt;

&lt;p&gt;This is how JavaScript handles async operations. This is how operations are passed between call stack, web APIs and message queue. Even though JavaScript itself is single-threaded it can do this because the web APIs run on separate threads. What has the JavaScript event loop to do with this?&lt;/p&gt;

&lt;p&gt;It is the JavaScript event loop what takes care of this cycle. It is the job of the JavaScript event loop to continuously check the call stack if it is empty or not. If it is empty, it will take the first message from the message queue and push it to the call stack.&lt;/p&gt;

&lt;p&gt;If the call stack is not empty, event loop will not let any message from the queue in. Instead, it will let the call stack process call inside it. Each of these cycles, or iterations, of the event loop is called "tick".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-note-about-promises-and-async-functions" class="anchor"&gt;
  &lt;/a&gt;
  A note about promises and async functions
&lt;/h2&gt;

&lt;p&gt;Async methods such as &lt;code&gt;setTimeout&lt;/code&gt; and events are handled by web APIs and message queue. This doesn't apply to &lt;a href="https://blog.alexdevero.com/javascript-async-await/#async-functions"&gt;async functions&lt;/a&gt; and &lt;a href="https://blog.alexdevero.com/javascript-promises/"&gt;promises&lt;/a&gt;. Async functions and promises are handled by a different queue. This queue is called the job queue. Another name for this queue is microtask queue.&lt;/p&gt;

&lt;p&gt;So, when you use promise, or async function, and &lt;code&gt;setTimeout&lt;/code&gt; they will be handled differently. First, promises and async functions will be handled by the job queue. The &lt;code&gt;setTimeout&lt;/code&gt; will be handled by the message queue. Second, job queue has a higher priority than message queue. This has one important implication.&lt;/p&gt;

&lt;p&gt;Let's say you have a promise and also a &lt;code&gt;setTimeout&lt;/code&gt;. The promise resolves immediately and that &lt;code&gt;setTimeout&lt;/code&gt; has delay set to 0. So, it should also execute +/- immediately. To make this more interesting, let's also add another regular function. This function will be at the end. What will be the result of this?&lt;/p&gt;

&lt;p&gt;The first function that will be executed will be the regular we put as the last one. As next will be executed any callback for the promise. The callback for the &lt;code&gt;setTimeout&lt;/code&gt; will be executed as the last. It doesn't matter that the &lt;code&gt;setTimeout&lt;/code&gt; method is placed above the promise in the code.&lt;/p&gt;

&lt;p&gt;What does matter is that the job queue has a higher priority than message queue. As a result, when there is a race between promise and &lt;code&gt;setTimeout&lt;/code&gt; it is the promise who will be the winner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create a function&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFuncOne&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myFuncOne in setTimeout.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create another function&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFuncTwo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myFuncTwo after the promise.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Delay the myFuncOne() by 0 seconds&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myFuncOne&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Create a promise and resolve it immediately&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Message from a promise&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;// Call the myFuncTwo()&lt;/span&gt;
&lt;span class="nx"&gt;myFuncTwo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'myFuncTwo after the promise.'&lt;/span&gt;
&lt;span class="c1"&gt;// 'Message from a promise'&lt;/span&gt;
&lt;span class="c1"&gt;// 'myFuncOne in setTimeout.'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-the-javascript-event-loop-explained" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion: The JavaScript event loop explained
&lt;/h2&gt;

&lt;p&gt;Understanding how the JavaScript event loop helps you understand how JavaScript works under the hood. To understand this you also need to understand topics such as call stack, web APIs and message queue. I hope that this tutorial helped you understand all these topics and, most importantly, the JavaScript event loop.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Speed up your coding using Emmet - a really powerful tool</title>
      <author>Yogesh Chavan</author>
      <pubDate>Mon, 21 Dec 2020 07:06:18 +0000</pubDate>
      <link>https://dev.to/myogeshchavan97/speed-up-your-coding-using-emmet-a-really-powerful-tool-46nj</link>
      <guid>https://dev.to/myogeshchavan97/speed-up-your-coding-using-emmet-a-really-powerful-tool-46nj</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jjdQ_1ec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/at_start.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jjdQ_1ec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/at_start.gif" alt="at_start"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;In this article, we will talk about &lt;a href="https://emmet.io/"&gt;Emmet&lt;/a&gt;. A very popular and highly useful tool that is built into almost every IDE out there like Visual Studio Code, Sublime Text etc.&lt;/p&gt;

&lt;p&gt;If you're using &lt;a href="https://codepen.io/"&gt;Codepen&lt;/a&gt;, then you might be happy to know that emmet is also available in codepen. So you can type abbreviations to generate code in Codepen.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-so-special-about-emmet" class="anchor"&gt;
  &lt;/a&gt;
  What is so special about emmet?
&lt;/h2&gt;

&lt;p&gt;It allows us to just type some abbreviations and generate the output HTML and CSS code.&lt;/p&gt;

&lt;p&gt;It increases your productivity to a great extent so you don't have to type the same repetitive code again and again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation" class="anchor"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;Emmet is already available in almost every IDE so you don't need to install it. &lt;/p&gt;

&lt;p&gt;If for some reason, it's not available in your IDE, you can install the extension from &lt;a href="https://emmet.io/download/"&gt;this page&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-it" class="anchor"&gt;
  &lt;/a&gt;
  How to use it?
&lt;/h2&gt;

&lt;p&gt;We just have to type the abbreviation and press the &lt;code&gt;Tab&lt;/code&gt; key and emmet will convert it to the corresponding code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inside-html-file" class="anchor"&gt;
  &lt;/a&gt;
  Inside HTML file
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If you have created a new &lt;code&gt;.html&lt;/code&gt; file, then instead of manually typing the doctype, head, meta, body, just type ! (exclamation mark) and press tab and emmet will add the default HTML code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A6cALeYh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/exclamation.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A6cALeYh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/exclamation.gif" alt="Exclamation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you want to create a div with the class &lt;code&gt;hero-banner&lt;/code&gt; then instead of manually typing &lt;code&gt;&amp;lt;div class="hero-banner"&amp;gt;Some content&amp;lt;/div&amp;gt;&lt;/code&gt;, just type &lt;code&gt;.hero-banner&lt;/code&gt; and press tab key and the entire code will be generated for you.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RPB8_oMR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/hero_banner.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RPB8_oMR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/hero_banner.gif" alt="Hero Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, once the code is generated, emmet automatically places the cursor inside the div so you don't need to click inside the div to type content inside the div.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By default emmet, considers a &lt;code&gt;div&lt;/code&gt; when you don't specify the tag name.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But you can specify your own tag name also.&lt;/p&gt;

&lt;p&gt;Suppose you want to create a section with two classes namely &lt;code&gt;box&lt;/code&gt; and &lt;code&gt;showcase&lt;/code&gt; then you just need to type &lt;code&gt;section.box.showcase&lt;/code&gt; and press the tab key.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---YvjvaLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/box_showcase.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---YvjvaLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/box_showcase.gif" alt="Box Showcase"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generate div with id &lt;code&gt;numbers&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Abbreviation: #numbers&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_7OLQ1-d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/id_numbers.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_7OLQ1-d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/id_numbers.gif" alt="Id Numbers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generate div with 3 paragraphs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Abbreviation: div&amp;gt;p*3&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sMrT7-oq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/div_3p.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sMrT7-oq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/div_3p.gif" alt="Div 3p"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, once the code is generated, emmet automatically placed the cursor inside the paragraph so you just need to press the tab key to move to the next paragraph to type the content inside it&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generate 3 paragraphs with lorem ipsum text inside div&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Abbreviation: div&amp;gt;p*3&amp;gt;lorem&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Aw7m6LZH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/lorem_para.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Aw7m6LZH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/lorem_para.gif" alt="Lorem Para"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generate a div with id &lt;code&gt;btn&lt;/code&gt; and class &lt;code&gt;primary-btn&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Abbreviation: div#btn.primary-btn&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tSekiNs2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/primary_btn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tSekiNs2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/primary_btn.gif" alt="Primary Btn"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generate ul with 3 li's and with an anchor tag inside it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Abbreviation: div&amp;gt;p*3&amp;gt;lorem&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3TPrlAo7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/li_a.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3TPrlAo7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/li_a.gif" alt="Li a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generate ul with class &lt;code&gt;menu-items&lt;/code&gt; and 3 li's with class &lt;code&gt;menu-item&lt;/code&gt; and with an anchor tag inside it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Abbreviation: ul.menu-items&amp;gt;li*3.menu-item&amp;gt;a&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yIxrxSsQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/menu_items.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yIxrxSsQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/menu_items.gif" alt="Menu Items"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To generate 4 div's with h2 and ul inside it and 2 li's inside ul&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Abbreviation: div*4&amp;gt;h2+ul&amp;gt;li*2&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sUj4_MeT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/4_div_h2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sUj4_MeT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/4_div_h2.gif" alt="4_div_h2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, we wanted h2 and ul to be side by side so we have used the + operator&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To generate ul with 4 li's inside it with class item1, item2, item3 and item4&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Abbreviation: ul&amp;gt;li.item$*4&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9NbfIXEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/item_number.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9NbfIXEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/item_number.gif" alt="item_number"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, $ represents an incrementing number starting with 1.&lt;/p&gt;

&lt;p&gt;If for some reason, you want to generate a number starting with 0, use the abbreviation &lt;code&gt;ul&amp;gt;li.item$@0*4&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jjdQ_1ec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/at_start.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jjdQ_1ec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/at_start.gif" alt="at_start"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, we have specified the number after $ with @ symbol&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To generate a button with text &lt;code&gt;click here&lt;/code&gt; inside it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Abbreviation: button{click here}&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ree1zSbc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/button_click_here.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ree1zSbc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/button_click_here.gif" alt="button_click_here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To generate a paragraph with text &lt;code&gt;Click here to continue&lt;/code&gt; text where &lt;code&gt;here&lt;/code&gt; is a link&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Abbreviation: p&amp;gt;{Click }+a{here}+{ to continue}&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8caeqh96--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/here_continue.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8caeqh96--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/here_continue.gif" alt="here_continue"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To generate input with type checkbox&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Abbreviation: input:c or input:checkbox&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2HgTfv1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/input_checkbox.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2HgTfv1H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/input_checkbox.gif" alt="input_checkbox"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You actually don't need to remember some abbreviations like input, just type input: and VS Code will suggest you with various emmet abbreviations&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oWCS6PEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/input_suggestions.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oWCS6PEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/input_suggestions.gif" alt="input_suggestions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To generate script tag with the src attribute&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Abbreviation: script:src&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kIf5oTVM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/script_src.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kIf5oTVM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/script_src.gif" alt="script_src"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To generate tags with some attribute, specify the attribute inside brackets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Abbreviation: a[href='#']&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---PtHDl_i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/href.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---PtHDl_i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/href.gif" alt="href"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To specify multiple attributes separate them with spaces inside the brackets&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K7MbKzyJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/img_multiple.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K7MbKzyJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/img_multiple.gif" alt="img_multiple"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: If for some reasons, the emmet suggestion hides and pressing tab does not complete the code, just delete the last character of the abbreviation or press ctrl + space to get the emmet suggestions and then press tab key.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#inside-css-file" class="anchor"&gt;
  &lt;/a&gt;
  Inside CSS file
&lt;/h3&gt;

&lt;p&gt;Emmet also works in CSS files.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To add background to the selector&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Abbreviation: bg&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---t8WjEHA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/bg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---t8WjEHA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/bg.gif" alt="bg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To add an absolute position to the selector&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Abbreviation: pos:a&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zQOX-XLS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/pos_a.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQOX-XLS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/pos_a.gif" alt="pos_a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are tons of abbreviations for CSS but you don't need to remember any of them. VS Code makes it really easy by providing suggestions while typing&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To add any property to the selector just type initial characters and then the next word of that property.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So to add background-color just type backc(back for background and c for color)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Otq_Dwqf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/back_c.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Otq_Dwqf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/back_c.gif" alt="back_c"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To add background-size property just type backs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--79aTOFPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/backs.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--79aTOFPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/backs.gif" alt="backs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So for CSS, you don't need to remember the emmet abbreviations. VS Code will help you out by providing suggestions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enable-emmet-in-react" class="anchor"&gt;
  &lt;/a&gt;
  Enable emmet in React
&lt;/h2&gt;

&lt;p&gt;By default, Emmet is not enabled for JSX in React in VS Code.&lt;br&gt;
But you can enable it by following the below steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In Visual Studio Code, press &lt;code&gt;Control + Shift + P&lt;/code&gt; or &lt;code&gt;Command + Shift + P (Mac)&lt;/code&gt; to open command palette and type setting and then select "Preferences: Open User Settings" option&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q65GIvSK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/settings_1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q65GIvSK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/settings_1.png" alt="setting_1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On the left side, expand the extension menu and click on Emmet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DYwFiUxl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/setting_2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DYwFiUxl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/setting_2.png" alt="setting_2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Under &lt;code&gt;Include Languages&lt;/code&gt; section, click on &lt;code&gt;Add Item&lt;/code&gt; button and add &lt;code&gt;javascript&lt;/code&gt; as a key and &lt;code&gt;javascriptreact&lt;/code&gt; as a value and click on &lt;code&gt;Ok&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hUfxSmSL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/setting_3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hUfxSmSL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/setting_3.png" alt="setting_3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now open any component file in React and type &lt;code&gt;.albums&lt;/code&gt; and press the tab key and it will be converted to &lt;code&gt;&amp;lt;div className="albums"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kyE579yO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/albums.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kyE579yO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/85bf8b56585eb06357a9deeb0e220d0c39587ae5/albums.gif" alt="Albums"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, Emmet automatically converts &lt;code&gt;class&lt;/code&gt; to &lt;code&gt;className&lt;/code&gt;, If we're in a &lt;code&gt;.js&lt;/code&gt; file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The great thing about Emmet is that you can generate an entire HTML page structure just using a single line of emmet abbreviation &lt;code&gt;div.container&amp;gt;h1.title+h2.subtitle+div&amp;gt;div*4&amp;gt;h3+ul&amp;gt;li*4&amp;gt;a&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YPaqlxpE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/6e24c9ed930d8a5b745b4aed27cff36b6ae8b246/structure.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YPaqlxpE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://gist.github.com/myogeshchavan97/aa75611665802aadfd3ba6bfeb0fe59b/raw/6e24c9ed930d8a5b745b4aed27cff36b6ae8b246/structure.gif" alt="Structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To find out more about such amazing abbreviations check out the &lt;a href="https://docs.emmet.io/cheat-sheet/"&gt;Emmet Cheatsheet&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's it about this article. In this article, we have seen that, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using Emmet inside HTML, CSS and even React javascript file, greatly improves productivity.&lt;/li&gt;
&lt;li&gt;We can generate an entire HTML page structure just using a single line of emmet abbreviation.&lt;/li&gt;
&lt;li&gt;So there is no more need of wasting time typing div, classes, ids manually, let the emmet do that job for you.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Become an expert in Modern JavaScript and better at React with &lt;a href="https://modernjavascript.yogeshchavan.dev/"&gt;Mastering Modern JavaScript&lt;/a&gt; book at just $20.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't forget to subscribe to get my weekly newsletter with amazing tips, tricks, and articles directly in your inbox &lt;a href="https://yogeshchavan.dev/"&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>react</category>
      <category>css</category>
    </item>
    <item>
      <title>Software Architecture 101</title>
      <author>Mad Devs</author>
      <pubDate>Mon, 21 Dec 2020 06:17:11 +0000</pubDate>
      <link>https://dev.to/maddevs/software-architecture-101-12b9</link>
      <guid>https://dev.to/maddevs/software-architecture-101-12b9</guid>
      <description>&lt;h4&gt;
  &lt;a href="#introduction-to-the-world-of-application-design" class="anchor"&gt;
  &lt;/a&gt;
  Introduction to the world of application design
&lt;/h4&gt;

&lt;p&gt;Hello, everyone!&lt;/p&gt;

&lt;p&gt;Today, I would like to introduce you to the world of application design.&lt;br&gt;
Designing applications can be called a multidisciplinary task, and it includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a study of design patterns&lt;/li&gt;
&lt;li&gt;a study of rules for describing architectural schemes&lt;/li&gt;
&lt;li&gt;knowledge of algorithms and data structures&lt;/li&gt;
&lt;li&gt;knowledge of distributed computing principles&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#why-should-we-build-an-application-architecture" class="anchor"&gt;
  &lt;/a&gt;
  Why should we build an application architecture?
&lt;/h3&gt;

&lt;p&gt;I want to consider the question — Why should we build an application architecture? I will ask 4 additional questions, which will hopefully answer the main one:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What main components (modules) can an application be divided into?&lt;/li&gt;
&lt;li&gt;How to share responsibility between components?&lt;/li&gt;
&lt;li&gt;How to prepare the application for future changes?&lt;/li&gt;
&lt;li&gt;How much will it cost to develop?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-main-components-modules-can-an-application-be-divided-into" class="anchor"&gt;
  &lt;/a&gt;
  What main components (modules) can an application be divided into?
&lt;/h2&gt;

&lt;p&gt;The question &lt;strong&gt;“Why divide”&lt;/strong&gt; arises? It will allow us to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reduce the interdependence of parts of the code&lt;/li&gt;
&lt;li&gt;Provide code testability, especially in case of unit tests&lt;/li&gt;
&lt;li&gt;Clearly delineate the responsibilities of each component&lt;/li&gt;
&lt;li&gt;Identify frequently used components and make them common (using polymorphism, in particular)&lt;/li&gt;
&lt;li&gt;Determine which pattern (abstraction) to apply to an application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we set goals for the application architecture, we can start preparing &lt;a href="https://en.wikipedia.org/wiki/Sequence_diagram"&gt;Sequence Diagrams&lt;/a&gt;. Sequence Diagrams are great for translating business requirements into a distinct set of operations between various application components. Also, given Sequence Diagrams of the app, we could refactor architecture &amp;amp; planned functionality to reduce complexity &amp;amp; increase the app's effectiveness even before writing a single line of code!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SQOfWnc1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y7au1roi42hlj0p3jvq6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SQOfWnc1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y7au1roi42hlj0p3jvq6.png" alt="Initial Sequence Diagram&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mxd-mZYY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kh9xk9vcwxsthadm314n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mxd-mZYY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kh9xk9vcwxsthadm314n.png" alt="Sequence Diagram after refactoring&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J36P3S-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bh1xaznjfn4v0drh5nad.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J36P3S-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bh1xaznjfn4v0drh5nad.png" alt="Components Diagram&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After defining the application's tasks and functions, we turn to a &lt;strong&gt;Component Diagram&lt;/strong&gt; with a description of the components themselves and their relationships.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-share-responsibility-between-components" class="anchor"&gt;
  &lt;/a&gt;
  How to share responsibility between components?
&lt;/h2&gt;

&lt;p&gt;I mentioned polymorphism and design patterns. And on these topics, I would like to elaborate because entering abstractions into the code allows distinguishing components and their roles in the application more clearly.&lt;/p&gt;

&lt;p&gt;Among the design patterns, I would like to highlight the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Facade&lt;/li&gt;
&lt;li&gt;Strategy&lt;/li&gt;
&lt;li&gt;Inversion of Control — which is actually an architectural principle&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#facade" class="anchor"&gt;
  &lt;/a&gt;
  Facade
&lt;/h3&gt;

&lt;p&gt;It is a structural design pattern that provides a simple interface to a complex system of components (classes, libraries, etc.).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xL5FO8yW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yhxfl1pls0s2r3asm84u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xL5FO8yW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yhxfl1pls0s2r3asm84u.png" alt="Simple Interface to a Complex System of Components."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#strategy" class="anchor"&gt;
  &lt;/a&gt;
  Strategy
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t60thyNz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1nt820wlxixees9bl9px.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t60thyNz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1nt820wlxixees9bl9px.png" alt="Behavioral Design Pattern."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This behavioral design pattern defines a family of similar algorithms and places each of them in its own class, after which the algorithms can be interchanged right at runtime.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inversion-of-control" class="anchor"&gt;
  &lt;/a&gt;
  Inversion of Control
&lt;/h3&gt;

&lt;p&gt;This is an architectural principle where the framework controls the program control flow, and the custom code is embedded at specific execution points. ReactJS is a good example of IoC principle usage. Much of the application logic is implemented and controlled by the framework itself, so the software developer's sole responsibility is to alter the framework’s behavior at provided points (useState, useEffect, etc.)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JBXMWX1d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6xzwbgx8csqyfv84zotw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JBXMWX1d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6xzwbgx8csqyfv84zotw.png" alt="Inversion of Control."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-prepare-the-application-for-future-changes" class="anchor"&gt;
  &lt;/a&gt;
  How to prepare the application for future changes?
&lt;/h2&gt;

&lt;p&gt;With the architectural schemes and TOR in place, you can already begin to plan tasks for implementation and provide for future changes. Here, I used the word “provide” intentionally. Of course, architects are not visionaries, but as they get more experience, they learn to see and predict the vector of the application. In practice, few tasks require a fundamental redevelopment of the application or the business model — unless, of course, we are talking about an MVP or some unique features that need to be implemented.&lt;/p&gt;

&lt;p&gt;Also, by applying a certain abstraction, we already have predictable tools to implement most ideas, and this allows us to keep time-to-market on a certain level.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://maddevs.io/services/?utm_source=blog&amp;amp;utm_medium=software-architecture-101#software-development"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kagd5A9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d8no82frvfkfy6q32c08.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-much-will-it-cost-to-develop" class="anchor"&gt;
  &lt;/a&gt;
  How much will it cost to develop?
&lt;/h2&gt;

&lt;p&gt;And this is one of the key questions that the architect and architectural schemes are trying to answer. The &lt;strong&gt;cost of &lt;a href="https://maddevs.io/services/?utm_source=blog&amp;amp;utm_medium=software-architecture-101#software-development"&gt;software development&lt;/a&gt;&lt;/strong&gt; itself depends on many factors, but the main one is the programmer’s time needed to write a working application with which the end-user can already interact. The architect's task is to define — together with the business and project managers — a minimum sufficient set of functions for each stage of project development. The next task is to proceed to develop the schemes of each of the parts (modules) without losing focus on the entire application as a whole and the features implemented in the late stages of development. It is possible because you can create a super tricked-out application on paper but fail to implement it within a reasonable timeframe.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.maddevs.io/how-project-manager-stays-focused-fa86dcbc5c7a"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YWQDPOGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aa4su7b0pnxv4inmkq80.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-should-do-it" class="anchor"&gt;
  &lt;/a&gt;
  Who should do it?
&lt;/h2&gt;

&lt;p&gt;All this time, I’ve been mentioning the architect, and you may have the question — Who is the architect? In my understanding, an architect is a person with a lot of development experience at different levels and with analytical skills. And no matter how controversial it sounds, every member of the team can be an architect at different stages of making architectural diagrams.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GXG4vOR4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x3hqrsty3pna5qjvi5ik.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GXG4vOR4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x3hqrsty3pna5qjvi5ik.png" alt="Flow Diagrams Which Reflect a Specific Implementation of Application Logic."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For example, flow diagrams should reflect a specific implementation of logic, but if you have a multi-component application, preparing only flow diagrams for the whole logic can take an indecent amount of time. So it is important to delegate this work to the developers of this very logic. It will allow both parallelizing the work and identifying the pitfalls. After all, the developers have expertise in their subject areas and can identify controversial points in the whole architecture.&lt;/p&gt;

&lt;p&gt;However, when delegating authority, it is important to give one person or group of people the right to make or reject changes in architecture because only architects have the fullness of the picture.&lt;/p&gt;

&lt;p&gt;To summarize, maintaining architecture is a team effort, and the more involved the developers are, the more predictable the development itself becomes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#does-everything-end-after-drawing" class="anchor"&gt;
  &lt;/a&gt;
  Does everything end after drawing?
&lt;/h2&gt;

&lt;p&gt;Of course not! Development requires creativity at every moment, and it is not uncommon to have to change the plan and the code on the fly. Still, at this point, it is crucial to calculate the change in the architectural plans and, if all is well, start the development.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The architecture of the application is a living organism, and we should support it all the time.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Therefore, the architectural plans are developing all the time as the application itself is developing.&lt;/p&gt;

&lt;p&gt;That’s all I have. Thank you for your attention.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5WyvoZ4d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hlh950xkgczij3oyqq80.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5WyvoZ4d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hlh950xkgczij3oyqq80.png" alt="Bear."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Previously published at &lt;a href="https://blog.maddevs.io/software-architecture-design-d08463fb04df?source=friends_link&amp;amp;sk=20106a3ab3864d830ccddc813364e82b"&gt;blog.maddevs.io.&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>architecture</category>
      <category>tutorial</category>
      <category>agile</category>
    </item>
    <item>
      <title>CSS Frosted glass credit card</title>
      <author>Chris Bongers</author>
      <pubDate>Mon, 21 Dec 2020 05:58:57 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/css-frosted-glass-credit-card-3lak</link>
      <guid>https://dev.to/dailydevtips1/css-frosted-glass-credit-card-3lak</guid>
      <description>&lt;p&gt;Today I wanted to try and recreate a super cool &lt;a href="https://dribbble.com/shots/14647209-Glass-Credit-Card"&gt;dribbble shot from Dede Dwiyansyah&lt;/a&gt; I came across.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WN4t14zC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/3967258/screenshots/14647209/media/d6905571f5821097b3dcc631ef08365b.png%3Fcompress%3D1%26resize%3D1600x1200" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WN4t14zC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/3967258/screenshots/14647209/media/d6905571f5821097b3dcc631ef08365b.png%3Fcompress%3D1%26resize%3D1600x1200" alt="Dribbble frosted glass credit card"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's actually a Figma tutorial on how to create the frosted credit card effect. I decided to try and recreate this amazing shot in HTML! (With an own twist)&lt;/p&gt;

&lt;p&gt;So time to give it my own take on &lt;code&gt;CSS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I knew it was possible to do this effect, but normally people leverage a background image filter blur, which in this case wouldn't work with the balls behind it.&lt;/p&gt;

&lt;p&gt;So I decided to do some research, and this is my end result.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jR-OGjjm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608102470435/-0TC-j9Is.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jR-OGjjm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608102470435/-0TC-j9Is.gif" alt="CSS Glass credit card effect"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll be guiding you through how to make this in CSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-structure" class="anchor"&gt;
  &lt;/a&gt;
  HTML Structure
&lt;/h2&gt;

&lt;p&gt;Let's start by defining the &lt;code&gt;HTML&lt;/code&gt; structure for this project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"holder"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card__text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      8293 3412 5976 1254
      &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;small&amp;gt;&lt;/span&gt;12/24&lt;span class="nt"&gt;&amp;lt;/small&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;svg&amp;gt;&lt;/span&gt;Insert Visa logo here&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see I'm using a holder div, we need this div for the two orbiting balls.&lt;/p&gt;

&lt;p&gt;Then we have the card, which contains another container for the text, and at the end, an SVG for the visa logo.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: The full SVG visa logo can be found on the Codepen.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now it's time to start the fun bit, the &lt;code&gt;CSS&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-frosted-blurry-glass-effect" class="anchor"&gt;
  &lt;/a&gt;
  CSS Frosted blurry glass effect
&lt;/h2&gt;

&lt;p&gt;I'm going to be guiding you through all the little pieces we need to re-create this cool CSS frosted glass effect.&lt;/p&gt;

&lt;p&gt;First, we need to use a font that resembles a credit card font.&lt;br&gt;
I found the &lt;a href="https://fonts.google.com/specimen/Inconsolata"&gt;Inconsolata font on Google fonts&lt;/a&gt; works pretty well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url('https://fonts.googleapis.com/css2?family=Inconsolata&amp;amp;display=swap')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With this line, we &lt;a href="https://daily-dev-tips.com/posts/how-to-use-google-fonts/"&gt;import the font directly from Google fonts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next, we add a small reset to get rid of the default margins and paddings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now let's style the body.&lt;br&gt;
In the dribbble shot, we saw the person used a gradient background, I decided to give it a background image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url('https://images.pexels.com/photos/1655166/pexels-photo-1655166.jpeg?auto=compress&amp;amp;cs=tinysrgb&amp;amp;dpr=2&amp;amp;h=750&amp;amp;w=1260')&lt;/span&gt;
    &lt;span class="nb"&gt;no-repeat&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Inconsolata'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;monospace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;place-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I'm also using the &lt;a href="https://daily-dev-tips.com/posts/css-grid-most-easy-center-vertical-and-horizontal/"&gt;CSS grid center method&lt;/a&gt; to get the card centered on our page.&lt;br&gt;
In this spot, we are also loading our fonts.&lt;/p&gt;

&lt;p&gt;As mentioned we are using the holder to place our two orbiting balls in.&lt;br&gt;
We will be using pseudo-elements to create these balls, so our holder will need to be a relative element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.holder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now let's create the balls, the orange one will be created using the &lt;a href="https://daily-dev-tips.com/posts/css-pseudo-elements/"&gt;&lt;code&gt;before&lt;/code&gt; pseudo element&lt;/a&gt; and the blue one with the &lt;a href="https://daily-dev-tips.com/posts/css-pseudo-elements/"&gt;&lt;code&gt;after&lt;/code&gt; pseudo element&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;They share some similarities, in size and roundness so let's write that with a double selector.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.holder&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.holder&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;orbit&lt;/span&gt; &lt;span class="m"&gt;5s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This creates a round ball because of the 50% border-radius.&lt;br&gt;
We also add an animation called &lt;code&gt;orbit&lt;/code&gt;. We'll create the animation in a bit.&lt;/p&gt;

&lt;p&gt;Now for the orange ball, we need to create a radial gradient.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.holder&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffe897&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;-moz-radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;top&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#ffe897&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#f98a05&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;bottom&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#ffe897&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#f98a05&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;-webkit-radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;top&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#ffe897&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#f98a05&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I used &lt;a href="https://www.css-gradient.com/"&gt;css-gradient.com&lt;/a&gt; to generate the gradient.&lt;/p&gt;

&lt;p&gt;Then for the blue one, we also place a radial gradient and offset it to the right side.&lt;br&gt;
This one also needs an animation delay, else they'll be doing the exact same thing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.holder&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;animation-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#e0e793&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;-moz-radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bottom&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#e0e793&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#6dd0f1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;top&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#e0e793&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#6dd0f1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;-webkit-radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bottom&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#e0e793&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#6dd0f1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then it's time to add our card.&lt;/p&gt;

&lt;p&gt;The card itself has a fixed size and a small box-shadow to make it pop a bit more:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;220px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;370px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then for the magic part, the blur effect we use another &lt;a href="https://daily-dev-tips.com/posts/css-pseudo-elements/"&gt;&lt;code&gt;:before&lt;/code&gt; pseudo element&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.card&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;backdrop-filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;saturate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;contrast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;45%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;brightness&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;130%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The whole magic blur effect comes from the &lt;code&gt;backdrop-filter&lt;/code&gt; this gives it the blurry look.&lt;br&gt;
We also use a background color with an opacity of 30% using the &lt;code&gt;rgba&lt;/code&gt; spectrum.&lt;/p&gt;

&lt;p&gt;For the text inside we only need to offset it a bit and make sure it's on top of everything.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.card__text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#6f7886&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Remember we had the Visa SVG logo, we put that in the right bottom corner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.card&lt;/span&gt; &lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Before we talked about the &lt;code&gt;orbit&lt;/code&gt; animation, this animation will make the two balls orbit around the card, in a circular motion.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;orbit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;from&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;360deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-360deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This specific animation uses a two-step animation transforming the elements to rotate from 0 to 360 degrees (a full circle).&lt;br&gt;
It also offsets the &lt;code&gt;translateX&lt;/code&gt; axis to make it move.&lt;/p&gt;

&lt;p&gt;The full result of this can be seen on this Codepen.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/WNGpVEZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#browser-support" class="anchor"&gt;
  &lt;/a&gt;
  Browser Support
&lt;/h2&gt;

&lt;p&gt;This method relies heavily on the &lt;code&gt;backdrop-filter&lt;/code&gt; which has quite decent support.&lt;/p&gt;

&lt;p&gt;It can be safely used in all modern browsers, you can get some more support by leveraging all the prefixes for it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EA945PbZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://caniuse.bitsofco.de/static/v1/mdn-css__properties__backdrop-filter-1608101950999.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EA945PbZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://caniuse.bitsofco.de/static/v1/mdn-css__properties__backdrop-filter-1608101950999.png" alt="CSS backdrop-filter support"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect" class="anchor"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
    </item>
  </channel>
</rss>
