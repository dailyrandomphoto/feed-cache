<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>C√≥mo consegu√≠ trabajo en Gitlab desde Nicaragua</title>
      <author>Luis Mejia</author>
      <pubDate>Sat, 15 May 2021 22:32:55 +0000</pubDate>
      <link>https://dev.to/luismejiadev/como-consegui-trabajo-en-gitlab-desde-nicaragua-4351</link>
      <guid>https://dev.to/luismejiadev/como-consegui-trabajo-en-gitlab-desde-nicaragua-4351</guid>
      <description>&lt;p&gt;¬°Hola a todos! üëã&lt;/p&gt;

&lt;p&gt;Habl√© sobre mi proceso de contrataci√≥n en GitLab en mi publicaci√≥n &lt;a href="https://dev.to/luismejiadev/como-es-una-entrevista-en-gitlab-un-vistazo-al-proceso-de-contratacion-iad"&gt;anterior&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Esta vez les hablar√© sobre: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;El camino que he recorrido en estos 11 a√±os de profesi√≥n&lt;/li&gt;
&lt;li&gt;C√≥mo consegu√≠ trabajar 100% remoto&lt;/li&gt;
&lt;li&gt;C√≥mo me prepar√© para hacerlo realidad&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;¬°Espero que les guste, y que de alguna forma les sea de utilidad al definir su propio camino NINJA üòÉ!&lt;/p&gt;

&lt;p&gt;¬°Empecemos entonces!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;spoiler alert&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--46fcf2LR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bitxrtnboa09y9hsuqm1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--46fcf2LR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bitxrtnboa09y9hsuqm1.jpg" alt="Ingrediente Secreto"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#qui%C3%A9n-soy"&gt;
  &lt;/a&gt;
  ¬øQui√©n Soy?
&lt;/h2&gt;

&lt;p&gt;Soy Luis Mejia, nac√≠ y vivo en Nicaragua, estoy casado y tengo dos hijas.&lt;/p&gt;

&lt;p&gt;Tengo 11 a√±os de experiencia como Software Developer. Trabajo de forma remota para Gitlab como Backend Engineer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#de-donde-vengo"&gt;
  &lt;/a&gt;
  ¬øDe donde vengo?
&lt;/h2&gt;

&lt;p&gt;Me gustar√≠a hablarles r√°pidamente de mis or√≠genes, y quiero citar el p√°rrafo de un libro que me describe a la perfecci√≥n:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Siendo ‚Äìcomo ustedes saben‚Äî el hijo de un humilde comerciante, uno de una gran familia sin esperanza de una herencia, y no siendo dotado ‚Äìcomo ustedes francamente lo han dicho‚Äî con talento o inteligencia especiales, decid√≠ que si iba a conseguir lo que deseaba, se iba a requerir tiempo y estudio. &lt;br&gt;
Arkad - El hombre m√°s rico de Babilonia&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nac√≠ y vivo en Nicaragua, el 2do pa√≠s m√°s pobre de la regi√≥n despu√©s de Hait√≠ seg√∫n estudio del Banco Mundial publicado en 2019. Soy el 4to hijo de una familia con clase socioecon√≥mica media-baja, mi pap√° creci√≥ en pobreza extrema en una comunidad rural, trabajando desde ni√±o y mi madre no complet√≥ sus estudios de secundaria ya que trabajaba vendiendo loter√≠a ambulante.&lt;/p&gt;

&lt;p&gt;Aunque crec√≠ en un hogar humilde, tuve los mayores privilegios: salud, un techo, comida, estudio, y el amor de mis padres.&lt;/p&gt;

&lt;p&gt;De mis padres obtuve un gran ejemplo y El ingrediente secreto para tener √©xito:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Perseverancia, Trabajo duro, mejora continua, humildad y honestidad&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mi-talento-especial"&gt;
  &lt;/a&gt;
  Mi talento especial
&lt;/h2&gt;

&lt;p&gt;Nunca tuve un talento especial, pero ya de adulto me d√≠ cuenta de algo. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mi talento especial es: el trabajo duro y la persistencia&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Todos los logros que he alcanzado en mi vida, los he conseguido siguiendo estos 4 pasos:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Definir un objetivo alcanzable&lt;/li&gt;
&lt;li&gt;Hacer un plan para alcanzarlo&lt;/li&gt;
&lt;li&gt;Trabajar duro en ese plan hasta conseguirlo.&lt;/li&gt;
&lt;li&gt;Repetir&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ac√° cabe mencionar que &lt;strong&gt;he tenido mucha suerte&lt;/strong&gt; por no haber sufrido eventos catastr√≥ficos que afectaran la salud o la vida de mis seres queridos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mis-primeros-trabajos-locales"&gt;
  &lt;/a&gt;
  Mis primeros trabajos locales
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;2010 - 2015&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pasant%C3%ADa"&gt;
  &lt;/a&gt;
  Pasant√≠a
&lt;/h3&gt;

&lt;p&gt;Antes de empezar a trabajar con equipos remotos, inici√© mi camino en empresas locales.&lt;/p&gt;

&lt;p&gt;En 2010 empec√© a trabajar en unas pasant√≠as recomendadas por la universidad, me pagaban aproximadamente $2 al d√≠a, s√≥lo como ayuda para la comida, y mis principales actividades eran instalar antivirus McAfee y configurar cuentas de correo de Outlook.&lt;/p&gt;

&lt;p&gt;Aunque no lo crean, estaba feliz en esas condiciones, porque mi principal objetivo era conseguir un trabajo en mi carrera.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mi-primer-trabajo"&gt;
  &lt;/a&gt;
  Mi primer trabajo
&lt;/h3&gt;

&lt;p&gt;Despu√©s del proyecto de instalaci√≥n de antivirus, me puse a buscar trabajo y me cost√≥ varios meses encontrar.  &lt;/p&gt;

&lt;p&gt;Consegu√≠ mi primer trabajo en una empresa local, en el √°rea de inform√°tica, estaba a cargo de 3 personas y mi principal funci√≥n era desarrollar los sistemas internos (facturaci√≥n,  inventario, contabilidad, etc.)  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#otros-trabajos-locales"&gt;
  &lt;/a&gt;
  Otros trabajos locales
&lt;/h3&gt;

&lt;p&gt;Tambi√©n trabaj√© como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Desarrollador Web:&lt;/strong&gt; Desarrollo con python, django, gunicorn, nginx, supervisor, postgresql, RoR, rspec.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Inspector de Riesgos Tecnol√≥gicos:&lt;/strong&gt; Era Responsable de: Auditor√≠as de TI a todas las entidades financieras en Nicaragua.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#trabajo-con-equipos-remotos"&gt;
  &lt;/a&gt;
  Trabajo con Equipos Remotos
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;2015 - 2018&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;En esta etapa trabaj√© de forma mixta, remoto y en oficina. aprendi mucho de negocio, ya que trabaj√© de cerca con equipos de dise√±o, marketing y negocio distribuidos hispanohablantes en centro am√©rica y proveedores t√©cnicos de M√©xico, Argentina y Espa√±a.&lt;/p&gt;

&lt;p&gt;Era responsable de un sistema que procesaba 20 millones de transacciones por d√≠a en 6 pa√≠ses, distribuidas en 24 servidores en la nube Ubuntu Linux.&lt;/p&gt;

&lt;p&gt;El stack tecnol√≥gico que utilic√© inclu√≠a python / django, Docker-Compose, Kannel, Postgresql, Redis, RabbitMQ, Ningx, supervisor, Jenkins, AngularJS, ReactJS, ionic. &lt;/p&gt;

&lt;p&gt;Aunque estaba aprendiendo bastante en mi trabajo actual, yo quer√≠a estar 100% remoto para poder estar cerca de mi familia. Quer√≠a un horario flexible y poder trabajar desde casa todo el tiempo. Adem√°s quer√≠a trabajar 100% hablando ingl√©s.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2018 - 2021&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;En esta etapa trabaj√© como contratista independiente, 100% remoto y 100% en ingl√©s. Esta ha sido la etapa de mi carrera profesional m√°s intensa, llegu√© a trabajar por 3 meses hasta 100 horas a las semana (lo cual no es sostenible y te lleva al burnout).&lt;/p&gt;

&lt;p&gt;Algunos proyectos en los que trabaj√© fueron:&lt;/p&gt;

&lt;p&gt;‚óè SaaS ecommerce con crypto (~ 50.000 usuarios): Ruby on Rails, postgresql, aws, redis, rabbitmq.&lt;/p&gt;

&lt;p&gt;‚óè SaaS de email marketing con recomendaciones usando Machine Learning (~66 millones de suscriptores de correo electr√≥nico): Ruby on Rails, Vue.js, postgresql, sidekiq, cloud66, redis, rspec, rubocop.&lt;/p&gt;

&lt;p&gt;‚óè Plataforma crowdsourcing de hackers de sombrero blanco (m√°s de 70 millones de solicitudes por d√≠a) en 80 pa√≠ses: Ruby on Rails, React.js, postgresql, sidekiq, redis, datadog, rspec, rubocop, docker, aws &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; Ac√° una nota especial a un reconocimiento de la empresa por mi buena actitud y mi voluntad de ayudar otros miembros del equipo m√°s all√° de mis tareas diarias. Este ha sido un logro muy significativo en mi carrera porque ten√≠a a√±os intentando mejorar mis habilidades sociales.&lt;/p&gt;

&lt;p&gt;‚óè Plataforma marketplace para apps y herramientas digitales: Python, Django, Vue.js, zapier, postgresql, docker, AWS, Elasticsearch, Kibana, Logstash, Grafana.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#c%C3%B3mo-consegu%C3%AD-trabajar-100-remoto"&gt;
  &lt;/a&gt;
  C√≥mo consegu√≠ trabajar 100% remoto
&lt;/h1&gt;

&lt;p&gt;A continuaci√≥n distintos m√©todos para encontrar trabajo remoto que me funcionaron:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Comunidades: La primera oportunidad la consegu√≠ a trav√©s de dos amigos de la comunidad de Python Nicaragua.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Portales de trabajo remoto: Despu√©s de 10 meses postul√°ndome y haciendo entrevistas de trabajos usando weworkremotely.com, consegu√≠ trabajo con una empresa Australiana. Fueron 10 meses de rechazos tras rechazos, a veces varias veces a la semana.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Linkedin: Gracias a Linkedin pude contactar con Gitlab e iniciar el proceso de reclutamiento.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amigos/Colegas: En diversas ocasiones me han recomendado a trabajos, amigos o colegas que han trabajado conmigo o s√°ben que ser√≠a un valioso recurso para la empresa.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#c%C3%B3mo-me-prepar%C3%A9-para-hacerlo-realidad"&gt;
  &lt;/a&gt;
  C√≥mo me prepar√© para hacerlo realidad
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Mejorar mi Ingl√©s&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yo tom√© mi primer curso de ingl√©s a mis 15 a√±os. Al empezar tan tarde, puedo decir que el miedo a hablar en ingl√©s fue uno de mis principales obst√°culos en mi carrera.&lt;/p&gt;

&lt;p&gt;Un amigo me recomend√≥ a un puesto de trabajo, pero no dominaba el ingl√©s lo suficiente y fu√≠ descartado del proceso.&lt;/p&gt;

&lt;p&gt;Me sent√≠ tan mal, que decid√≠ registrarme en clases nocturnas avanzadas de ingl√©s en una academia local. &lt;/p&gt;

&lt;p&gt;Tambi√©n decid√≠ viajar a Estados unidos por primera vez a una conferencia 100% ingl√©s, Pycon 2018&lt;/p&gt;

&lt;p&gt;Para complementar tambi√©n he tomado clases con tutores particulares, donde me enfoco en fortalecer √°reas espec√≠ficas, por ejemplo, discusiones t√©cnicas en videollamada.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aprender Ruby on Rails&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Despu√©s de m√°s de 5 a√±os de trabajo en Python, aprender la sint√°xis y funcionamiento medio de Rails me tom√≥ poco tiempo y en 3 meses ya hab√≠a entregado mi primer proyecto exitoso. Aunque me gusta m√°s python y Django, aprend√≠ Rails ya que existen excelentes oportunidades de trabajo internacionales remotos. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Profundizar tus habilidades t√©cnicas y mejores pr√°cticas&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Si has elegido una tecnolog√≠a en la cu√°l especializarte. Te recomiendo aprender a profundidad c√≥mo funciona.&lt;/p&gt;

&lt;p&gt;Mi consejo es partir de lo general a lo espec√≠fico. Iniciar con un Web Framework, construir un sitio web, e ir profundizando en c√≥mo funcionan, cu√°les son las mejores pr√°cticas de dicha tecnolog√≠a, etc.&lt;/p&gt;

&lt;p&gt;Para Ruby on Rails, recomiendo estudiar las reglas de estilo de Rubocop, pruebas unitarias con rspec, y estudiar c√≥mo funciona metaprogramming con Ruby.&lt;/p&gt;

&lt;p&gt;Tambi√©n debes hacer lo mismo para el gestor de base de datos. En mi caso, postgres, aprender c√≥mo analizar las consultas SQL para mejorar el desempe√±o, c√≥mo usar indices parciales, common table expressions, vistas materializadas, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trabajar en proyectos remotos grandes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;El tama√±o S√≠ importa. Si quieres trabajar para empresas medianas y grandes, es importante tus conocimientos y experiencias en plataformas e infraestructura escalable.&lt;/p&gt;

&lt;p&gt;Aunque yo hab√≠a trabajado con plataformas de 20M y 70M de transacciones diarias. Para la escala de Gitlab esa cantidad no era suficiente, ya que ellos procesan miles de millones.&lt;/p&gt;

&lt;p&gt;Si tienes la oportunidad de elegir entre proyectos peque√±os y proyectos grandes, los proyectos grandes tendr√°n m√°s peso en tu experiencia si trabajas directamente con ellos.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mejorar mi presencia en linea&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Para este punto, pueden usar de checklist los consejos de mi &lt;a href="https://dev.to/luismejiadev/consejos-para-tu-cv-github-y-linkedin-3kka"&gt;publicaci√≥n anterior&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mejorar habilidades blandas&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Comunicaci√≥n efectiva, habilidades de negociaci√≥n, habilidad de liderazgo, storytelling, trabajo en equipo, definici√≥n de requerimientos, etc.&lt;/p&gt;

&lt;p&gt;Existen un sin n√∫mero de habilidades a mejorar, por lo que les recomiendo buscar mucho contenido en linea para este punto.&lt;/p&gt;

&lt;p&gt;Algunos libros que recomiendo son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://amzn.to/3tMszCN"&gt;Soft Skills: The Software Developer's Life Manual&lt;/a&gt; de John Sonmez&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://amzn.to/3bmPI8A"&gt;Clean Coder, The: A Code of Conduct for Professional Programmers&lt;/a&gt; de Robert C. Martin&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://amzn.to/3uJ9hjf"&gt;The Pragmatic Programmer, From Journeyman To Master&lt;/a&gt; de Andrew Hunt, David Thomas - Addison Wesley&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://amzn.to/33ASrHr"&gt;Never Split the Difference: Negotiating As If Your Life Depended On It&lt;/a&gt; de Chris Voss&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://amzn.to/3hm6mcv"&gt;Scrum: The Art of Doing Twice the Work in Half the Time
&lt;/a&gt; de Jeff Sutherland&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Superar el miedo paralizante&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mi mayor consejo ser√° superar el miedo paralizante que no te deja postularte a los trabajos que quieres.&lt;/p&gt;

&lt;p&gt;A varias personas nos ense√±an de peque√±os que est√° mal cometer errores, que no debemos fallar o equivocarnos. De adultos eso nos provoca una par√°lisis por miedo a fallar. Pero el mayor fracaso es no intenarlo del todo.&lt;/p&gt;

&lt;p&gt;Te recomiendo que aunque tengas miedo, y te acostumbres al fracasar como parte de tu proceso de √©xito.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Movimiento y Mejora continua&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Como &lt;strong&gt;dicen que dijo&lt;/strong&gt; John D. Rockefeller: "No tengas miedo de renunciar a lo bueno para ir por lo grandioso"&lt;/p&gt;

&lt;p&gt;Yo siempre he estado a favor de cambiar de trabajo despu√©s de &lt;strong&gt;X&lt;/strong&gt; cantidad de tiempo.&lt;/p&gt;

&lt;p&gt;Cambiar de trabajo nos ayuda haciendo crecer nuestros ingresos, contactos, experiencias, conocimientos, etc.&lt;/p&gt;

&lt;p&gt;Cu√°nto tiempo esperar ya es decisi√≥n propia y no est√° escrita en piedra, depende de cada situaci√≥n. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finalmente-mi-trabajo-en-gitlab"&gt;
  &lt;/a&gt;
  Finalmente: Mi trabajo en Gitlab
&lt;/h2&gt;

&lt;p&gt;Escrib√≠ sobre el proceso y mi experiencia en una &lt;a href="https://dev.to/luismejiadev/como-es-una-entrevista-en-gitlab-un-vistazo-al-proceso-de-contratacion-iad"&gt;publicaci√≥n&lt;/a&gt; separada. Luego de dos meses y varias entrevistas, finalmente obtuve la oferta de GitLab.&lt;/p&gt;

&lt;p&gt;Gracias a las comunidades supe que era posible trabajar en Gitlab desde Nicaragua, y cuando me sent√≠ con suficiente experiencia y conocimientos me decid√≠ a postularme.&lt;/p&gt;

&lt;p&gt;Les recomiendo postularse a Gitlab cuando sientan que tienen varios a√±os de experiencias como Senior, porque a la escala de Gitlab puede que nuestros conocimientos llegu√©n a nivel medio.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#y-listo"&gt;
  &lt;/a&gt;
  Y Listo üéâüéâüéâ
&lt;/h1&gt;

&lt;p&gt;S√© que habia mucho texto por leer, pero espero que entre tantas palabras, hayan encontrado algunos consejos o gu√≠as, que les ayuden en su propio camino.&lt;/p&gt;

&lt;p&gt;Para concluir les dejo estos 5 pasos que para m√≠ te llevan al √©xito:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Definir lo que significa el √©xito para t√≠&lt;/li&gt;
&lt;li&gt;Ignorar la definici√≥n de √©xito de los dem√°s&lt;/li&gt;
&lt;li&gt;Enfocar tu energ√≠a y recursos en los peque√±os pasos para lograr tu √©xito.&lt;/li&gt;
&lt;li&gt;Saber cu√°ndo detenerte, incluso si queda incompleto.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Muchas gracias por leer hasta el final!!! &lt;/p&gt;

&lt;p&gt;Recuerden seguirme en &lt;a href="https://twitter.com/luismejiadev"&gt;twitter&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Bloomly, a new full-stack project to manage your content online</title>
      <author>Patryk Jeziorowski</author>
      <pubDate>Sat, 15 May 2021 21:10:12 +0000</pubDate>
      <link>https://dev.to/pjeziorowski/bloomly-a-new-full-stack-project-to-manage-your-content-online-43gb</link>
      <guid>https://dev.to/pjeziorowski/bloomly-a-new-full-stack-project-to-manage-your-content-online-43gb</guid>
      <description>&lt;p&gt;In the &lt;a href="https://dev.to/pjeziorowski/365-days-of-blogging-challenge-or-i-transfer-1000-to-your-bank-account-5dj9"&gt;previous post&lt;/a&gt;, I announced that I start my &lt;strong&gt;365 days of blogging challenge&lt;/strong&gt;. I also released a &lt;a href="https://dev.to/pjeziorowski/how-i-publish-articles-to-all-developer-platforms-and-my-private-blog-in-one-shot-38aj"&gt;mini CLI tool&lt;/a&gt; that publishes articles to all the major developer blogging platforms (dev.to, hashnode, medium) with one command.&lt;/p&gt;

&lt;p&gt;The tool lacks some features, though, and I saw that people have the same problem as I have - they need a centralized place to manage their articles or avoid publishing their content manually on multiple sites. &lt;strong&gt;Automating stuff saves time&lt;/strong&gt;...&lt;/p&gt;

&lt;p&gt;This is why I decided to help them (and myself) by creating a service that allows you to write your articles, publish them, and manage them on all the previously mentioned platforms in one place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pain-to-solve"&gt;
  &lt;/a&gt;
  Pain to solve
&lt;/h2&gt;

&lt;p&gt;In general, I want to create a tool that will &lt;strong&gt;reduce the friction and effort you need to put in to create and distribute your content as a developer&lt;/strong&gt;. In the future, it should also help you &lt;strong&gt;reach more people and let you analyze what works best&lt;/strong&gt; and what your audience like to read about.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;p&gt;The MVP will cover writing articles and integrations with all the platforms (publishing, updating, and deleting articles). It also covers all the basics like signups, creating projects and adding collaborators.&lt;/p&gt;

&lt;p&gt;Next steps I have in my mind if the project gains traction or if I find it helpful to my blogging journey:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;displaying article statistics from all platforms in one place&lt;/li&gt;
&lt;li&gt;generating article covers, adjusting stuff best for the given platform (e.g. cover sizes), in general - reducing the effort of publishing&lt;/li&gt;
&lt;li&gt;marketing - integrations with Twitter, LinkedIn, Instagram, Facebook, to help you announce to the world that your articles are published&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#tech-stack"&gt;
  &lt;/a&gt;
  Tech stack
&lt;/h2&gt;

&lt;p&gt;To quickly build the backend and GraphQL API, I decided to go with &lt;a href="https://hasura.io/"&gt;Hasura&lt;/a&gt;. It's not the only backend component - to perform custom business logic, I need a separate microservice or serverless functions that Hasura will call on certain events. For this, I decided to go with Golang and a great &lt;a href="https://echo.labstack.com/"&gt;Echo HTTP framework&lt;/a&gt;. I'm still thinking, though, if I should use Node.js, as Hasura provides some excellent tooling that helps you generate code for your serverless functions.&lt;/p&gt;

&lt;p&gt;For the frontend - React.js with &lt;a href="https://nextjs.org/"&gt;Next&lt;/a&gt; and &lt;a href="https://tailwindcss.com/"&gt;Tailwind&lt;/a&gt;. I've been a fan of those technologies since their humble beginnings, so the choice here was pretty easy for me.&lt;/p&gt;

&lt;p&gt;For deploying and hosting the app I'll use &lt;a href="https://www.qovery.com/"&gt;Qovery&lt;/a&gt; - it's a startup that aims to provide great developer experience in deploying and building full-stack applications in the cloud. For disclosure - I'm building this platform during my working hours :P.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#progress"&gt;
  &lt;/a&gt;
  Progress
&lt;/h2&gt;

&lt;p&gt;I've just started today coding the backend part - most of the MVP API and data modelling is done.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IjKMc4wJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g02jpn1dup0906wev390.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IjKMc4wJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g02jpn1dup0906wev390.png" alt="MVP Query API"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I still need to implement the custom actions (interactions with APIs of the publishing platforms) in the Golang microservice. When it's done, I'll jump into coding the frontend part.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#collaborators-are-welcome"&gt;
  &lt;/a&gt;
  Collaborators are welcome
&lt;/h2&gt;

&lt;p&gt;I can do everything by myself, but it would be much more pleasant to work in a group, so if you are interested in building this kind of project, or you feel the pain that it aims to solve, feel free to reach out to me - we can build it together. Backend, frontend, UI/UX designers - everyone's help would come in handy! Just leave a comment or &lt;a href="https://twitter.com/PJeziorowski"&gt;find me @ Twitter&lt;/a&gt; :).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#leave-your-feedback-and-feature-ideas"&gt;
  &lt;/a&gt;
  Leave your feedback and feature ideas
&lt;/h2&gt;

&lt;p&gt;If you have any feedback or an idea that I could integrate into this project, feel free to leave a comment or &lt;a href="https://twitter.com/PJeziorowski"&gt;reach out to me @ Twitter&lt;/a&gt;! &lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>go</category>
      <category>react</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Arel Notes</title>
      <author>Konnor Rogers</author>
      <pubDate>Sat, 15 May 2021 21:09:08 +0000</pubDate>
      <link>https://dev.to/paramagicdev/arel-notes-hf0</link>
      <guid>https://dev.to/paramagicdev/arel-notes-hf0</guid>
      <description>&lt;h1&gt;
  &lt;a href="#notes-from-railsconf-2014"&gt;
  &lt;/a&gt;
  Notes from RailsConf 2014
&lt;/h1&gt;

&lt;p&gt;Link to talk: &lt;a href="https://www.youtube.com/watch?v=ShPAxNcLm3o"&gt;https://www.youtube.com/watch?v=ShPAxNcLm3o&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-arel"&gt;
  &lt;/a&gt;
  What is Arel?
&lt;/h2&gt;

&lt;p&gt;Arel stands for: "A Relational Algebra"&lt;/p&gt;

&lt;p&gt;In actuality, Arel is an AST (Abstract Syntax Tree) parser&lt;br&gt;
that takes Ruby code and turns it into SQL syntax. Arel knows nothing about your tables or database. Its purely a Query Builder that uses Ruby to talk to ActiveRecord.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#arel-helpers"&gt;
  &lt;/a&gt;
  Arel Helpers
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/camertron/arel-helpers"&gt;https://github.com/camertron/arel-helpers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What do they do?&lt;/p&gt;

&lt;p&gt;They reduce the verbosity of Arel syntax.&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# using ActiveRecord&lt;/span&gt;
&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;arel_table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# using bare Arel&lt;/span&gt;
&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# using Arel Helpers.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-are-terminal-methods"&gt;
  &lt;/a&gt;
  What are Terminal methods
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt; 
&lt;span class="c1"&gt;# =&amp;gt; NoMethodError: undefined method `to_sql' for 107:Integer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;#count&lt;/code&gt; is a "Terminal Method" meaning it will "terminate" the SQL chain and not allow for continuous chaining.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-functions"&gt;
  &lt;/a&gt;
  Adding functions
&lt;/h2&gt;

&lt;p&gt;Lets say you need to add a function thats not part of the Arel functions IE: non-standard SQL methods that may vary from database to database.&lt;/p&gt;

&lt;p&gt;Heres how that would happen:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="no"&gt;Arel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Nodes&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;NamedFunction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"LENGTH"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;arel_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:text&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
  &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;as&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"length"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT LENGTH('posts', 'text') AS length from 'posts'&lt;/span&gt;

&lt;span class="c1"&gt;## To reduce verbosity&lt;/span&gt;

&lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Arel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Nodes&lt;/span&gt;

&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="no"&gt;NamedFunction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;"LENGTH"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:text&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
  &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;as&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"length"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT LENGTH('posts', 'text') AS length from 'posts'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#arel-star"&gt;
  &lt;/a&gt;
  Arel Star!
&lt;/h2&gt;

&lt;p&gt;Substitute &lt;code&gt;"*"&lt;/code&gt; with &lt;code&gt;Arel.star&lt;/code&gt; !&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT * from 'posts'&lt;/span&gt;

&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Arel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;star&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT * from 'posts'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#select-from"&gt;
  &lt;/a&gt;
  Select From
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:text&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT id FROM SELECT id, text FROM 'posts'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;.ast&lt;/code&gt; will give you the constructed AST for a given Arel function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where"&gt;
  &lt;/a&gt;
  Where
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;title: &lt;/span&gt;&lt;span class="s2"&gt;"Arel is Cool"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt; &lt;span class="c1"&gt;# using ActiveRecord&lt;/span&gt;
&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Arel is Cool"&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt; &lt;span class="c1"&gt;# Using Arel&lt;/span&gt;

&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"title != 'Arel is Cool'"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;span class="c1"&gt;# Using AR&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT 'posts'.* from 'posts'&lt;/span&gt;
&lt;span class="c1"&gt;#    WHERE (title != 'Arel is Cool')&lt;/span&gt;

&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;not_eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Arel is Cool"&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt; 
&lt;span class="c1"&gt;# Using Arel&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT 'posts'.* from 'posts'&lt;/span&gt;
&lt;span class="c1"&gt;#    WHERE 'posts'.'title' != 'Arel is Cool'&lt;/span&gt;


&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;not_eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT 'posts'.* FROM 'posts'&lt;/span&gt;
&lt;span class="c1"&gt;#    WHERE 'posts.title' IS NOT NULL&lt;/span&gt;

&lt;span class="c1"&gt;# Greater than&lt;/span&gt;
&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:visitors&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT 'posts'.* FROM 'posts'&lt;/span&gt;
&lt;span class="c1"&gt;#    WHERE 'posts'.'visitors' &amp;gt; 250&lt;/span&gt;

&lt;span class="c1"&gt;# Less than&lt;/span&gt;
&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:visitors&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT 'posts'.* FROM 'posts'&lt;/span&gt;
&lt;span class="c1"&gt;#    WHERE 'posts'.'visitors' &amp;lt; 250&lt;/span&gt;

&lt;span class="c1"&gt;# Greater than or equal to&lt;/span&gt;
&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:visitors&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;gteq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT 'posts'.* FROM 'posts'&lt;/span&gt;
&lt;span class="c1"&gt;#    WHERE 'posts'.'visitors' &amp;gt;= 250&lt;/span&gt;

&lt;span class="c1"&gt;# Less than or equal to&lt;/span&gt;
&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:visitors&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;lteq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT 'posts'.* FROM 'posts'&lt;/span&gt;
&lt;span class="c1"&gt;#    WHERE 'posts'.'visitors' &amp;lt;= 250&lt;/span&gt;

&lt;span class="c1"&gt;# Chaining AND + OR&lt;/span&gt;

&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Arel is Cool"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT 'posts'.* FROM 'posts'&lt;/span&gt;
&lt;span class="c1"&gt;#    WHERE (&lt;/span&gt;
&lt;span class="c1"&gt;#    'posts'.'title' = 'Arel is Cool' &lt;/span&gt;
&lt;span class="c1"&gt;#     AND&lt;/span&gt;
&lt;span class="c1"&gt;#     ('posts'.'id' = 22 OR 'posts'.'id' = 23)&lt;/span&gt;
&lt;span class="c1"&gt;#    )&lt;/span&gt;

&lt;span class="c1"&gt;# Using IN&lt;/span&gt;

&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Arel is Cool"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;in&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# =&amp;gt; SELECT 'posts'.* FROM 'posts'&lt;/span&gt;
&lt;span class="c1"&gt;#    WHERE (&lt;/span&gt;
&lt;span class="c1"&gt;#     'posts'.'title' = 'Arel is Cool' &lt;/span&gt;
&lt;span class="c1"&gt;#     AND&lt;/span&gt;
&lt;span class="c1"&gt;#     'posts'.'id' IN (22, 23)&lt;/span&gt;
&lt;span class="c1"&gt;#    )&lt;/span&gt;

&lt;span class="c1"&gt;# Using our NamedFunction&lt;/span&gt;

&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Arel is Cool"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="no"&gt;NamedFunction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"LENGTH"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:slug&lt;/span&gt;&lt;span class="p"&gt;]]).&lt;/span&gt;&lt;span class="nf"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT 'posts'.'title' = 'Arel is Cool' AND&lt;/span&gt;
&lt;span class="c1"&gt;#    LENGTH('posts'.'slug') &amp;gt; 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-joins"&gt;
  &lt;/a&gt;
  Using joins
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h3&gt;

&lt;p&gt;We'll assume the following setup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:comments&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Comment&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:post&lt;/span&gt;
  &lt;span class="n"&gt;has_one&lt;/span&gt; &lt;span class="ss"&gt;:author&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Author&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:comment&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-it"&gt;
  &lt;/a&gt;
  Using it
&lt;/h3&gt;

&lt;p&gt;To use a regular &lt;code&gt;INNER JOIN&lt;/code&gt; you would do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;joins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="no"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;arel_table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;arel_table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:comment_id&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join_sources&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use an &lt;code&gt;OUTER JOIN&lt;/code&gt; you would do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;joins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="no"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;arel_table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;arel_table&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Arel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;OuterJoin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:comment_id&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join_sources&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#cleaning-up-with-arelhelpers"&gt;
  &lt;/a&gt;
  Cleaning up with ArelHelpers
&lt;/h3&gt;

&lt;p&gt;To clean up the above code we can use ArelHelpers &lt;code&gt;#join_association&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;ArelHelpers&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;JoinAssociation&lt;/span&gt;

&lt;span class="c1"&gt;# INNER JOIN&lt;/span&gt;
&lt;span class="no"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;joins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;join_association&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;

&lt;span class="c1"&gt;# OUTER JOIN&lt;/span&gt;
&lt;span class="no"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;joins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;join_association&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:comment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Arel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;OuterJoin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#joinassociation-block"&gt;
  &lt;/a&gt;
  join_association block
&lt;/h2&gt;

&lt;p&gt;Join associations can also yield a block and we can use that block to further specify join conditions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;joins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;join_association&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;assoc_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;join_conds&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
     &lt;span class="n"&gt;join_conds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:created_at&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;lteq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;day&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ago&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#join-tables"&gt;
  &lt;/a&gt;
  Join Tables
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h4&gt;

&lt;p&gt;Given the following setup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Course&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;has_and_belongs_to_many&lt;/span&gt; &lt;span class="ss"&gt;:teachers&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Teacher&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;has_and_belongs_to_many&lt;/span&gt; &lt;span class="ss"&gt;:courses&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2 possibilities:&lt;/p&gt;

&lt;p&gt;A teacher can teach many courses&lt;br&gt;
A course can have many teachers&lt;/p&gt;

&lt;p&gt;This means there are 3 tables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Courses table&lt;/li&gt;
&lt;li&gt;Teachers table&lt;/li&gt;
&lt;li&gt;CoursesTeachers table
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Course&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;arel_table&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; courses&lt;/span&gt;
&lt;span class="no"&gt;Teacher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;arel_table&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; teachers&lt;/span&gt;

&lt;span class="c1"&gt;# ??? No model for courses_teacher join table. &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To create a join_table you would do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;courses_teachers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Arel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:courses_teachers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the above variable we can then construct the following query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Course&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;joins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="no"&gt;Course&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;arel_table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Teacher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;arel_table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Course&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses_teachers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:course_id&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Teacher&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses_teachers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:teacher_id&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join_sources&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#order"&gt;
  &lt;/a&gt;
  Order
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Using ActiveRecord&lt;/span&gt;
&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:views&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:views&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;reverse_order&lt;/span&gt;

&lt;span class="c1"&gt;# Using Arel&lt;/span&gt;
&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:views&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;desc&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:views&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;asc&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#in"&gt;
  &lt;/a&gt;
  IN
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;arel_table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;in&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;ast&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#like-queries-with-matches"&gt;
  &lt;/a&gt;
  Like Queries with Matches
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"%arel%"&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to_sql&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; SELECT 'phrases'.* from 'phrases'&lt;/span&gt;
&lt;span class="c1"&gt;#    WHERE ('phrases'.'key' LIKE x'256172656c25')&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#query-builder-pattern"&gt;
  &lt;/a&gt;
  Query Builder Pattern
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;QueryBuilder&lt;/span&gt;
  &lt;span class="c1"&gt;# https://ruby-doc.org/stdlib-2.7.3/libdoc/forwardable/rdoc/Forwardable.html&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;Forwardable&lt;/span&gt;
  &lt;span class="nb"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:query&lt;/span&gt;
  &lt;span class="n"&gt;def_delegators&lt;/span&gt; &lt;span class="ss"&gt;:@query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:to_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:to_sql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:each&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;protected&lt;/span&gt;

  &lt;span class="c1"&gt;# instantiates a new class and allow chaining.&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reflect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-it"&gt;
  &lt;/a&gt;
  Using it
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;with_title_matching&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"%&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;%"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;PostQueryBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with_title_matching&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"stimulus_reflex"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;with_comments_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;usernames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;query&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;joins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;comments: :author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:username&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;in&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;usernames&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;PostQueryBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with_comments_by&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"hopsoft"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"leastbad"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;since_yesterday&lt;/span&gt;
  &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:created_at&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;gteq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;day&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ago&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;PostQueryBuilder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with_title_matching&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"stimulus_reflex"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;with_comments_by&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"hopsoft"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"leastbad"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;since_yesterday&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#scuttle"&gt;
  &lt;/a&gt;
  Scuttle!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://www.scuttle.io/"&gt;http://www.scuttle.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Turns your SQL into Arel code.&lt;/p&gt;

&lt;p&gt;Thanks for sticking with me, this is more of a reference for myself for the future!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus!
&lt;/h2&gt;

&lt;p&gt;To see all the available matchers like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#gt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#gteq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#lt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#lteq&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can run the following in the rails console:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;console&lt;/span&gt;

&lt;span class="no"&gt;Arel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Predications&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_methods&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; [&lt;/span&gt;
  &lt;span class="ss"&gt;:eq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;:eq_any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;:between&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;:not&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>arel</category>
      <category>ruby</category>
      <category>rails</category>
      <category>sql</category>
    </item>
    <item>
      <title>Observer Pattern</title>
      <author>Joseph Maurer</author>
      <pubDate>Sat, 15 May 2021 20:04:15 +0000</pubDate>
      <link>https://dev.to/mwrpwr/observer-pattern-21c6</link>
      <guid>https://dev.to/mwrpwr/observer-pattern-21c6</guid>
      <description>&lt;p&gt;One of my most commonly used design patterns is the &lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/events/observer-design-pattern"&gt;Observer Pattern&lt;/a&gt; and for good reasons. At its core, it allows you to program easier and worry less about how objects will get updated. For example, when programming using the MVC framework, you often want the views to be notified when the model‚Äôs state changes. &lt;a href="https://medium.com/@jackwong_60367/observer-pattern-in-react-using-redux-ca9998e885b0"&gt;React uses this same pattern&lt;/a&gt; under the hood to update components when the state changes. &lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;React hooks&lt;/a&gt; are also another cool way to use the pattern. With it being used so frequently in multiple programming languages/frameworks, I thought it would be beneficial to do a quick recap of what the pattern is and how it¬†works!&lt;/p&gt;

&lt;blockquote&gt;
&lt;em&gt;‚ÄúObserver Pattern Intent‚Ää‚Äî‚ÄäDefine a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.‚Äù‚Ää&lt;/em&gt;&lt;strong&gt;&lt;em&gt;‚Äî‚ÄäDesign Patterns: Elements of Reusable Object-Oriented Software&lt;/em&gt;&lt;/strong&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dp7ZIMhr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1000/0%2A9kgiYUkANnktw0ji" class="article-body-image-wrapper"&gt;&lt;img alt="" src="https://res.cloudinary.com/practicaldev/image/fetch/s--dp7ZIMhr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1000/0%2A9kgiYUkANnktw0ji"&gt;&lt;/a&gt;Source: &lt;a href="https://softwareengineering.stackexchange.com/questions/389559/about-observer-interface-in-observer-pattern-of-gof"&gt;Software Stack¬†Exchange&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Why is the Observer Pattern Important?&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;This pattern is critical to building robust applications because it decouples the implementation of the Subject from the Observer. This is pivotal because without this, you could have a huge dependency tree that would often have to violate &lt;a href="https://stackify.com/oop-concept-for-beginners-what-is-encapsulation/"&gt;encapsulation&lt;/a&gt;. The benefit in the future is that you can reuse the subjects without having to reuse the observers, and vice versa. You can also add observers without having to modify the subject or mess with any of the other observers. This plug and play attribute is highly desirable when trying to build production applications.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Implementation&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Let‚Äôs walk through a quick example of how to practically use the Observer pattern in c#. This is most commonly done by handling and raising events.¬†.Net events follow the delegate model and it enables an Observer to register and receive notifications from a Subject when an event is fired. Let‚Äôs walk through an example of a¬†Clock.&lt;/p&gt;

&lt;p&gt;Suppose you wanted to build a Clock app with some Alarm functionality. You could implement a Clock.cs that handles when the alarm time is¬†reached.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yuPp9W4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1000/0%2A_lFemxp-j1_GbMFt" class="article-body-image-wrapper"&gt;&lt;img alt="" src="https://res.cloudinary.com/practicaldev/image/fetch/s--yuPp9W4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1000/0%2A_lFemxp-j1_GbMFt"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The benefit to this is that in your main program, you can simply specify the time you want the alarm to go off, and then wait for the event to be¬†raised.&lt;/p&gt;
&lt;br&gt;
&lt;img alt="" src="https://res.cloudinary.com/practicaldev/image/fetch/s--k4IoTyIc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1000/0%2AfKa31yXZ3KnFuVgt"&gt;&lt;p&gt;Notice that after the event is raised in ‚ÄòOnAlarmRaised‚Äô I unsubscribe from the event. This is considered a good practice as you never know when events could be fired, and forgetting to unsubscribe could lead to memory¬†leaks.&lt;/p&gt;

&lt;p&gt;I realize that this example deviates from the typical example of the observer pattern, but it goes to show that the pattern isn‚Äôt always one for one with the book definition. I think that the example I showed is a cleaner example that requires less code overall¬†üôÇ&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The observer pattern might be confusing the first couple of times you set out to use it, but will provide great advantages down the road. Give it a try in your next¬†project!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Follow me on &lt;/strong&gt;&lt;a href="https://twitter.com/maurerpwer"&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; or &lt;/strong&gt;&lt;a href="https://dev.to/mwrpwr"&gt;&lt;strong&gt;DEV&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; for more posts like this¬†one!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Pyua1H---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://medium.com/_/stat%3Fevent%3Dpost.clientViewed%26referrerSource%3Dfull_rss%26postId%3Dc5b98b40753e" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Pyua1H---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://medium.com/_/stat%3Fevent%3Dpost.clientViewed%26referrerSource%3Dfull_rss%26postId%3Dc5b98b40753e" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>computerscience</category>
      <category>codequality</category>
      <category>oop</category>
    </item>
    <item>
      <title>Upload and handle file in ReactJs and NodeJs using FormData.</title>
      <author>Saksham Gupta</author>
      <pubDate>Sat, 15 May 2021 19:31:47 +0000</pubDate>
      <link>https://dev.to/sakshamcoder/upload-and-handle-file-in-reactjs-and-nodejs-using-formdata-2ekh</link>
      <guid>https://dev.to/sakshamcoder/upload-and-handle-file-in-reactjs-and-nodejs-using-formdata-2ekh</guid>
      <description>&lt;h3&gt;
  &lt;a href="#upload-and-handle-file-from-reactjs-and-nodejs-using-formdata"&gt;
  &lt;/a&gt;
  Upload and handle file from ReactJs and NodeJs using FormData.
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h5&gt;

&lt;p&gt;You may not have ever handled file uploads in React or any other technologies, but there is a high possibility you‚Äôll encounter the need for it, whether tor update profile photos of users, CSV files, or PDFs, to mention but a few. In this guide, you‚Äôll learn how to upload files in your React apps(Frontend) to NodeJs(Backend).&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#set-up-an-app"&gt;
  &lt;/a&gt;
  Set Up an App
&lt;/h5&gt;

&lt;p&gt;To get started, run the following command in your terminal or visit &lt;a href="https://react.new"&gt;React&lt;/a&gt; to get a fully configured React development environment via &lt;a href="https://codesandbox.io."&gt;Sandbox&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app &amp;lt;YOUR_APP_NAME&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;&lt;/em&gt; refers to your preferred app name.&lt;/p&gt;

&lt;p&gt;Next, create a simple component that has a file input with an upload button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState } from "react";
import "./../App.css";
const FileUpload = () =&amp;gt; {
 const [selectedFile, setSelectedFile] = useState();
 const [isFilePicked, setIsFilePicked] = useState(false);
 const changeHandler = (event) =&amp;gt; {
  setSelectedFile(event.target.files[0]);
  event.target.files[0] &amp;amp;&amp;amp; setIsFilePicked(true);
 };
 const handleSubmission = () =&amp;gt; {
  // HANDLING FILE AS SENDING FILE INTO BACKEND
  if (!isFilePicked) return;
  const formData = new FormData();
  formData.append("File", selectedFile);
   // ALSO ADD RANDOM VALUE IF YOU WANT LIKE STRING , OBJECT OR      ARRAY
  formData.append("carDetail", {
   car: "honda",
   engine: "1498 cc",
   fuel_Type: "Petrol &amp;amp; Diesel",
 });
// API CALL
 fetch("http://localhost:3001/", {
  method: "POST",
  body: formData,
 })
 .then((response) =&amp;gt; response.json())
 .then((result) =&amp;gt; {
  console.log("Success:", result);
 })
 .catch((error) =&amp;gt; {
   console.error("Error:", error);
  });
 };
return (
 &amp;lt;div className="App"&amp;gt;
 &amp;lt;input type="file" name="file" onChange={changeHandler} /&amp;gt;
  &amp;lt;div&amp;gt;
   &amp;lt;button onClick={handleSubmission}&amp;gt;Submit&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
 {isFilePicked ? (
 &amp;lt;div&amp;gt;
  &amp;lt;p&amp;gt;Filename: {selectedFile.name}&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;Filetype: {selectedFile.type}&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;Size in bytes: {selectedFile.size}&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;
   lastModifiedDate:{" "}
   {selectedFile.lastModifiedDate.toLocaleDateString()}
  &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
 ) : (
 &amp;lt;div&amp;gt;
  &amp;lt;p&amp;gt;Select a file&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
 )}
 &amp;lt;/div&amp;gt;
 );
};
export default FileUpload;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Network Response Will be like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;File will be in binary.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RkM1DOWh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3wkd7dg6hz7oq00ovz1y.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, create a Backend with mongodb which will recieve FormData from frontend and process it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var express = require(‚Äúexpress‚Äù);
const upload = require(‚Äúexpress-fileupload‚Äù);
var cors = require(‚Äúcors‚Äù);
var app = express();
//MIDDLEWARES
app.use(upload());
app.use(cors());
//ROUTE DEFINE
app.post(‚Äú/‚Äù, async function (req, res) {
 try {
  // IN REQ.FILES.‚ÄùYOUR_FILE_NAME‚Äù WILL BE PRESENT
  const file = req.files;
  const bodyData = req.body;
  // console.log(file);
  // console.log(bodyData);
  res.status(200).send({
  message: ‚ÄúFILE RECEIVED!‚Äù,
 });
 } catch (error) {
 res.send(‚ÄúERROR‚Äù);
 }
});
var PORT = 3001;
app.listen(PORT, function () {
 console.log(‚ÄúServer is running on PORT:‚Äù, PORT);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h5&gt;

&lt;p&gt;For refernce i have added my github repo so you can clone it also look into code deeply.&lt;br&gt;
&lt;a href="https://github.com/Saksham-coder/React_file_upload"&gt;Github Repo.&lt;/a&gt;&lt;br&gt;
Thank You.&lt;/p&gt;

</description>
      <category>node</category>
      <category>react</category>
      <category>fileupload</category>
      <category>formdata</category>
    </item>
    <item>
      <title>About those unfinished side projects</title>
      <author>Bart van Wezel</author>
      <pubDate>Sat, 15 May 2021 18:58:37 +0000</pubDate>
      <link>https://dev.to/bartvwezel/about-those-unfinished-side-projects-469b</link>
      <guid>https://dev.to/bartvwezel/about-those-unfinished-side-projects-469b</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IVpQXZ7C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bartvwezel.nl/wp-content/uploads/2021/05/stressed-6140478_1280-1024x694.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IVpQXZ7C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://bartvwezel.nl/wp-content/uploads/2021/05/stressed-6140478_1280-1024x694.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;About those unfinished side projects&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are anything like me, you love to start a lot of side projects. As a software developer, it is easy to start with a lot of different projects. If you know how to program, your options for side projects are infinite. However, if you are even more like me, you left most of those projects on a graveyard. With COVID-19 around, the chance is that you have more time due to less travelling, no social meetings, no sports. More time to finally finish those side projects. Or probably start even more projects. I will discuss some tips that helped me finish some of my side projects. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#define-your-goals"&gt;
  &lt;/a&gt;
  Define your goals
&lt;/h3&gt;

&lt;p&gt;Defining your goals is an important step. There are many great articles about setting your goals. However, if you are reading this, you probably have no trouble deciding the goals you want to reach. But, this is still an essential step in finishing your side projects. We discuss two pitfalls that can be prevented by setting your goals. &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#staying-on-track"&gt;
  &lt;/a&gt;
  Staying on track
&lt;/h5&gt;

&lt;p&gt;Having a goal for my side project helps me keep on track. Usually, when working on a side project, a lot of ideas or improvements kick in. For example, once, I was working on a simple game. During the work on it, the following thoughts popped up:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Multiplayer-modus&lt;/li&gt;
&lt;li&gt;Matchmaking system&lt;/li&gt;
&lt;li&gt;Ranking system&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sometimes it is even worse. All these ideas come up before I have even started. What started as a simple idea grew more complicated each time thinking about it. Suddenly before I even started the project, I was wholly overwhelmed. This swayed me from being super enthusiastic about a new project being so overwhelmed that I never began the project. Having a clear goal can help you stay on track and prevent you from feeling overwhelmed by all ideas for improvement. &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#realize-when-you-are-done"&gt;
  &lt;/a&gt;
  Realize when you are done
&lt;/h5&gt;

&lt;p&gt;One of my early side projects was to learn more about machine learning. The idea was to create a website where users could upload images of their beverage, and the algorithm would detect whether it was beer or wine. The project was fun, and I learned a lot about machine learning trying to make it work. But, unfortunately, the backend with the algorithm was not hosted anywhere and only running on my laptop. The project kept spooking through my mind because the project was not finished. But I already accomplished my goal; learning more about machine learning. I never explicitly stated a purpose for this project, so I did not know. Forthwith, it took me months to get it off my mind and many negative thoughts saying you should finish the project first. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#downsize-your-goals"&gt;
  &lt;/a&gt;
  Downsize your goals
&lt;/h3&gt;

&lt;p&gt;After having defined your goals, it is time to downsize your goals! The author from the book, &lt;a href="https://dev.toFinish:%20Give%20Yourself%20the%20Gift%20of%20Done"&gt;Finish: Give Yourself the Gift of Done&lt;/a&gt; advises cutting your goals in half. I think you might be wondering, is this cheating? This is also what I first thought when I read this advice. But looking at how we suck at estimating how much work something is, this is pretty logical.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;_It always takes longer than you expect, even when you take into account Hofstadter‚Äôs Law. _&lt;/p&gt;

&lt;p&gt;&lt;cite&gt;&lt;strong&gt;&lt;em&gt;Hofstadter‚Äôs Law&lt;/em&gt;&lt;/strong&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think every developer underestimates how much work how much a project is multiple times each month. So let‚Äôs cut our goal in half before we start. What if you really want to reach the original goal? This was also my first thought. But what is the worst that might happen? You do not have to stop working on your side project after reaching your first goal. And what if you really cannot cut your goal in two? Double the time frame you had initially set for yourself. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stopping-right-before-the-finish-line"&gt;
  &lt;/a&gt;
  Stopping right before the finish line
&lt;/h3&gt;

&lt;p&gt;Have you ever almost finished a project but never managed to take the last step? For example, I once created a simple web game. However, after finishing the game, I never hosted the game. I was afraid people would not like it. Fearful that there were still bugs. I even thought, what if thousands of people come to play the game? The site would crash. (seriously, if that would happen, I would consider the game a huge success). &lt;/p&gt;

&lt;p&gt;This is a strange phenomenon that occurs mainly in creative processes. For example, I have never run 9.99 kilometers just to stop before reaching the 10 kilometers because others were faster. Likewise, I have never quit a workout when there is only one repetition left. But how can we deal with this? A few tips to overcome this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Halfway through the project, when your motivation is still high and doubts have not kicked in yet, share your deadline with someone. You can post it online, share it with a friend; you can even leave a comment beneath this post. &lt;/li&gt;
&lt;li&gt;Do not be scared to share your ‚Äòunfinished‚Äô project. You can already share it with family, friends, or colleagues. If you like to share it with strangers, consider a beta release. Having already published a finished version makes it easier to update it with the next version. Furthermore, you are already getting feedback and ideas for improvement.&lt;/li&gt;
&lt;li&gt;Remember that your project does not have to be perfect. This does not mean you should publish an insecure bank application. However, in this case, your UI does not have to be perfect, and it does not matter if you cannot handle millions of transactions simultaneously. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#make-it-fun"&gt;
  &lt;/a&gt;
  Make it fun
&lt;/h3&gt;

&lt;p&gt;Probably the most important advice I can give you is to make it fun and keep it fun. When things are fun, you will likely have more motivation to keep going and actually finish your work. Subsequently, don‚Äôt be afraid to stop a side project when it is no longer fun. It is okay to stop, and there is no need to feel guilty about it in the next three months.&lt;/p&gt;

&lt;p&gt;Good luck with your side projects. Set your goal and get going! If you need someone to share your deadline, (un)finished side projects with, feedback. Feel free to leave a comment!&lt;/p&gt;

&lt;p&gt;The post &lt;a href="https://bartvwezel.nl/methods/about-those-unfinished-side-projects/"&gt;About those unfinished side projects&lt;/a&gt; appeared first on &lt;a href="https://bartvwezel.nl"&gt;Barttje&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>methods</category>
      <category>productivity</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Your all-in-one accessibility and productivity Chrome Extension.</title>
      <author>Rohan Lekhwani</author>
      <pubDate>Sat, 15 May 2021 18:47:30 +0000</pubDate>
      <link>https://dev.to/rohanlekhwani/your-all-in-one-accessibility-and-productivity-chrome-extension-h2p</link>
      <guid>https://dev.to/rohanlekhwani/your-all-in-one-accessibility-and-productivity-chrome-extension-h2p</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eSBaR6ht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2p2ydwhhzen8e25hlmh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eSBaR6ht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2p2ydwhhzen8e25hlmh.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hey Dev Community!&lt;/p&gt;

&lt;p&gt;We just launched &lt;a href="https://chrome.google.com/webstore/detail/someity/jifjdmnjnmpbclnpjlmebkclilekkdho"&gt;Someity&lt;/a&gt; - the only tool you need to start taking control of webpages in your browser. üê∂&lt;/p&gt;

&lt;p&gt;Someity is an overall winner at a Major League Hacking hackathon. After days of hard work we transformed it from a weekend hack to a full-fledge product (our first, yay!) on Product Hunt.&lt;/p&gt;

&lt;p&gt;Here's what Someity can do for you:&lt;/p&gt;

&lt;p&gt;ü§ñ Someity Actions&lt;br&gt;
Navigate webpages, play music, translate from any language to English and get directions just by speaking to Someity.&lt;/p&gt;

&lt;p&gt;üî§ Webpage Font Customizations&lt;br&gt;
Customize font type, colors and sizes on any webpage on the Internet!&lt;/p&gt;

&lt;p&gt;ü§ü Sign Language Support&lt;br&gt;
We know not everyone might be comfortable understanding written-languages and so we included Sign Language support. Transform webpage text into sign language with just a click!&lt;/p&gt;

&lt;p&gt;üéØ Focus Mode&lt;br&gt;
Suffering from cognitive impairments or just want to kill out all distractions while working? Focus Mode helps you veil images and highlight words on scroll. No more getting distracted!&lt;/p&gt;

&lt;p&gt;üîé Magnifier&lt;br&gt;
Images not a11y compliant and appear too small to make sense of it? Magnifier is just the right tool for you. Enable and hover over images to watch it in action!&lt;/p&gt;

&lt;p&gt;üëÄ Color Blind Aid&lt;br&gt;
We want Someity to be for all and hence we built in color blindness features. Emphasize links in multi-colors and add text strokes to paragraph texts in a user-defined color effective for all types of color blindness.&lt;/p&gt;

&lt;p&gt;üñ®Ô∏è Take your webpages with you&lt;br&gt;
Someity offers easy to use print screen and screen capture features making it way easier for non-tech savvy and accessibility prone users to operate.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Check out - &lt;a href="https://someity.tech"&gt;https://someity.tech&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Try it out and let us know your feedback and any exciting new features that you would want Someity to have ‚ù§Ô∏è &lt;/p&gt;

</description>
      <category>productivity</category>
      <category>showdev</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Working with the RedshiftToS3Transfer operator and Amazon Managed Workflows for Apache Airflow</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Sat, 15 May 2021 18:40:31 +0000</pubDate>
      <link>https://dev.to/aws/working-with-the-redshifttos3transfer-operator-and-amazon-managed-workflows-for-apache-airflow-56n9</link>
      <guid>https://dev.to/aws/working-with-the-redshifttos3transfer-operator-and-amazon-managed-workflows-for-apache-airflow-56n9</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;In this post I am going to take a look at in more detail &lt;a href="https://aws.amazon.com/blogs/aws/introducing-amazon-managed-workflows-for-apache-airflow-mwaa/"&gt;the original launch post&lt;/a&gt; of Amazon Managed Workflows for Apache Airflow (MWAA). In that post, a workflow was created to take some source files (in this case, my old friend, the Movielens data set) and then move them into Amazon Athena where they were transformed and then uploaded into Amazon Redshift. In this post I am going to add an additional step of taking the tables from that Amazon Redshift database and exporting them to Amazon S3, a common use case that data engineers are asked to do.&lt;/p&gt;

&lt;p&gt;We will use Apache Airflow to transport data, transform it, store it in our data warehouse and then export it to our data lake. Let's get started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What will you need&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An AWS account with the right level of privileges&lt;/li&gt;
&lt;li&gt;The latest/up to date aws cli - at least version 1.19.73 / 2.24&lt;/li&gt;
&lt;li&gt;A MWAA environment up and running - may I suggest you check out some of my earlier blogs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will find source code for this post at the usual place, &lt;a href="https://github.com/094459/blog-mwaa-redshift"&gt;my residence over on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE!&lt;/strong&gt; You will see some output in this walkthrough that contains aws credentials (aws_access/secret_keys) but don‚Äôt worry these are not real ones!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Costs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When I ran this and took a look at my AWS bill, it was around $50 for the 5-6 hours I was playing around putting this blog post together. Make sure you cleanup/delete all the resources after you have finished!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h3&gt;

&lt;p&gt;The first thing we need to do is setup the Amazon Redshift cluster. To make this easy, I have created a CDK app that builds everything you need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚îú‚îÄ‚îÄ app.py
‚îú‚îÄ‚îÄ files
‚îÇ   ‚îî‚îÄ‚îÄ readme.txt
‚îú‚îÄ‚îÄ mwaa_redshift
‚îÇ   ‚îú‚îÄ‚îÄ mwaa_redshift_stack.py
‚îÇ   ‚îî‚îÄ‚îÄ mwaa_redshift_vpc.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you look at the &lt;strong&gt;app.py&lt;/strong&gt; file, it contains the following configuration options you will need to change for your own setup.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;env_EU=core.Environment(region="eu-west-1", account="XXXXXXXXXX")
props = {
    'redshifts3location': 'mwaa-redshift-blog',
    'mwaadag' : 'airflow-094459',
    'mwaa-sg':'sg-01f25764ea72db0f2',
    'mwaa-vpc-id':'vpc-001c3b06c3e39c278',
    'redshiftclustername':'mwaa-redshift-clusterxxx'
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have commented the code, but the first parameter (redshifts3location) is the name of the NEW S3 bucket you will create. This should not exist or the deployment will fail. The next one (mwaadag) is the location of the MWAA Dags folder, the (mwaa-sg) is the name of the security group for your MWAA environment, which the deployment will amend to add an additional ingress rule for Redshift, and finally (mwaa-vpc-id) the VPC id which is used to populate the Redshift subnet group to enable connectivity. Finally, make sure you adjust your environment details (region/account) to reflect your own environment.&lt;/p&gt;

&lt;p&gt;Once you have changed this values for your own environment, you can deploy the stack.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cdk deploy MWAA-Redshift-VPC
$ cdk deploy MWAA-Redshift-Cluster
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the deployment has been successful, you should see output which you will use later on.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; ‚úÖ  MWAA-RedShift-Cluster

Outputs:
MWAA-RedShift-Cluster.MWAAVPCESG = mwaa-redshift-cluster-mwaavperedshiftxxx-1n5aroq4bokge
MWAA-RedShift-Cluster.RedshiftClusterEndpoint = mwaa-redshift-clusterxxx.cq7hpqttbcoc.eu-west-1.redshift.amazonaws.com
MWAA-RedShift-Cluster.RedshiftIAMARN = arn:aws:iam::XXXXXXXXXX:role/MWAA-RedShift-Cluster-mwaaredshiftservicerole2nd63-1HKOCE7NNXXXX
MWAA-RedShift-Cluster.RedshiftSecretARN = arn:aws:secretsmanager:eu-west-1: XXXXXXXXXX:secret:MWAARedshiftClusterSecret9B-SBoNAJOCWZFN-xXxXxX
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can have a look at the Amazon Redshift console if you want and you should see the new cluster ready to go.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update permissions for your MWAA environment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that the Amazon Redshift cluster has been setup, we have a new Amazon S3 bucket (in my demo, it is called "mwaa-redshift-blog" - it should have a folder called "files") that will be used to download data from the web, transform it and then ingest into Amazon Redshift.&lt;/p&gt;

&lt;p&gt;We need to add some additional permissions to the MWAA Execution policy so that it can read/write files in the new S3 bucket we are going to be using to download the files (and then later exporting them back). In my MWAA environment, I amend my policy as follows, by adding "mwaa-redshift-blog" to the resources MWAA can access ():&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        {
            "Effect": "Allow",
            "Action": [
                "s3:*"
            ],
            "Resource": [
                "arn:aws:s3:::airflow-094459",
                "arn:aws:s3:::airflow-094459/*",
                "arn:aws:s3:::mwaa-redshift-094459",
                "arn:aws:s3:::mwaa-redshift-094459/*",
                "arn:aws:s3:::mwaa-redshift-blog",
                "arn:aws:s3:::mwaa-redshift-blog/*"
            ]
        },    
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whist we are talking about permissions, as part of the Redshift cluster deployment, a new IAM Role is created (you can see the name in the outputs once the CDK app has completed). If you take a look at the permissions, you will see it looks like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": "s3:*",
            "Resource": [
                "arn:aws:s3:::mwaa-redshift-blog/*",
                "arn:aws:s3:::mwaa-redshift-blog",
                "arn:aws:s3:::airflow-094459/*",
                "arn:aws:s3:::airflow-094459"
            ],
            "Effect": "Allow"
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have only given it access to our new folder as well as the MWAA Dags folder. We could tighten this up further by removing the specific S3 actions needed, so experiment removing those until you get something that works. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uploading-and-running-the-movielens-dag"&gt;
  &lt;/a&gt;
  Uploading and running the movielens DAG
&lt;/h3&gt;

&lt;p&gt;Now that we have all the infrastructure ready to go, it is time to create our workflow/DAG. I have modified the original DAG from the blog post slightly, and you will need to do a few things before we are ready to go.&lt;/p&gt;

&lt;p&gt;You can find the DAG here, &lt;strong&gt;movielens-redshift.py&lt;/strong&gt;. If we take a look at the DAG, we can see the following section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;test_http = Variable.get("test_http", default_var="undefined")
download_http = Variable.get("download_http", default_var="undefined")
s3_bucket_name = Variable.get("s3_bucket_name", default_var="undefined")
s3_key = Variable.get("s3_key", default_var="undefined")

redshift_cluster = Variable.get("redshift_cluster", default_var="undefined")
redshift_db = Variable.get("redshift_db", default_var="undefined") 
redshift_dbuser = Variable.get("redshift_dbuser", default_var="undefined")
redshift_table_name = Variable.get("redshift_table_name", default_var="undefined")
redshift_iam_arn = Variable.get("redshift_iam_arn", default_var="undefined")
redshift_secret_arn = Variable.get("redshift_secret_arn", default_var="undefined")

athena_db = Variable.get("demo_athena_db", default_var="undefined")
athena_results = Variable.get("athena_results", default_var="undefined")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we do not have to hard code references, we use Apache Airflow variables to store the configuration details. This makes this workflow much easier to re-purpose.&lt;/p&gt;

&lt;p&gt;In the GitHub repo you will find a file called &lt;strong&gt;variables.json&lt;/strong&gt; which when you look at it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "athena_results": "athena-results/",
    "download_http": "http://files.grouplens.org/datasets/movielens/ml-latest-small.zip",
    "s3_key": "files/",
    "test_http": "https://grouplens.org/datasets/movielens/latest/",
    "aws_connection": "aws_redshift",
    "demo_athena_db": "demo_athena_db",
    "redshift_airflow_connection": "redshift_default",
    "redshift_cluster": "mwaa-redshift",
    "redshift_db": "mwaa",
    "redshift_dbuser": "awsuser",
    "redshift_table_name": "movie_demo",
    "redshift_iam_arn": "arn:aws:iam::XXXXXXXXXXX:role/RedShift-MWAA-Role",
    "redshift_secret_arn": "arn:aws:secretsmanager:eu-west-1:XXXXXXXXXX:secret:mwaa-redshift-cluster-XXXXX",
    "s3_bucket_name": "mwaa-redshift-blog"

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You &lt;strong&gt;WILL&lt;/strong&gt; need to modify the last three variables (redshift_iam_arn, redshift_secret_arn and s3_bucket_name) using the values that were output as part of the Redshift cluster build. Once amended you can then import these into MWAA via the Apache Airflow UI. Once you have done this, you should have a list of the variables with the values listed. MWAA stores these securely in the MWAA metstore database. If you prefer, you could change the configuration of MWAA to look for variables in AWS Secrets Manager, and then manage these values via CDK perhaps - for this post I am keeping it simple and just using standard variables through the Apache Airflow UI.&lt;/p&gt;

&lt;p&gt;The rest of the DAG is the same as the blog post, and you should deploy this to your DAGS folder via your preferred method (I use a very simple CI/CD system which you can replicate for yourself in my blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/4t"&gt;A simple CI/CD system for your Amazon Managed Workflows for Apache Airflow development workflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have uploaded it you should see it in the main Apache Airflow UI.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Triggering the DAG&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We should be ready to go now. From the UI you can turn on/enable and then trigger the DAG called &lt;strong&gt;movielens-refshift&lt;/strong&gt; and the workflow should take around 5-10 minutes to complete. If the workflow looks all dark green, then you should be good. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YmvxGwim--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-mwaa-redshift/blob/main/images/blog-dag-1.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YmvxGwim--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-mwaa-redshift/blob/main/images/blog-dag-1.png%3Fraw%3Dtrue" alt="allgood"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you look at the logs you should see something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[2021-05-14 23:01:41,762] {{logging_mixin.py:112}} INFO - Running %s on host %s &amp;lt;TaskInstance: movielens-redshift.transfer_to_redshift 2021-05-14T23:00:03.351510+00:00 [running]&amp;gt; ip-10-192-21-59.eu-west-1.compute.internal
[2021-05-14 23:01:41,873] {{logging_mixin.py:112}} INFO - b8535f99-89a3-4036-9cb3-502a19397f8d
[2021-05-14 23:01:41,898] {{logging_mixin.py:112}} INFO - s3://mwaa-redshift-blog/athena-results/join_athena_tables/b8535f99-89a3-4036-9cb3-502a19397f8d_clean.csv
[2021-05-14 23:01:41,921] {{logging_mixin.py:112}} INFO - copy movie_demo from 's3://mwaa-redshift-blog/athena-results/join_athena_tables/b8535f99-89a3-4036-9cb3-502a19397f8d_clean.csv' iam_role 'arn:aws:iam::704533066374:role/MWAA-RedShift-Cluster-mwaaredshiftservicerole2nd63-1WNFQCTTKXXXX' CSV IGNOREHEADER 1;
[2021-05-14 23:01:42,144] {{logging_mixin.py:112}} INFO - {'ClusterIdentifier': 'mwaa-redshift-clusterxxx', 'CreatedAt': datetime.datetime(2021, 5, 14, 23, 1, 42, 24000, tzinfo=tzlocal()), 'Database': 'mwaa', 'Id': 'cf455937-21ab-4399-95fa-cf3c60703688', 'SecretArn': 'arn:aws:secretsmanager:eu-west-1:xxxxxxxxx:secret:MWAARedshiftClusterSecret9B-687wkB7p4hID-xxxxx', 'ResponseMetadata': {'RequestId': '3c1c47c5-a3b4-4e4f-91a6-a15dd33610b7', 'HTTPStatusCode': 200, 'HTTPHeaders': {'x-amzn-requestid': '3c1c47c5-a3b4-4e4f-91a6-a15dd33610b7', 'content-type': 'application/x-amz-json-1.1', 'content-length': '254', 'date': 'Fri, 14 May 2021 23:01:42 GMT'}, 'RetryAttempts': 0}}
[2021-05-14 23:01:42,173] {{python_operator.py:114}} INFO - Done. Returned value was: OK
[2021-05-14 23:01:42,216] {{taskinstance.py:1070}} INFO - Marking task as SUCCESS.dag_id=movielens-redshift, task_id=transfer_to_redshift, execution_date=20210514T230003, start_date=20210514T230140, end_date=20210514T230142
[2021-05-14 23:01:45,644] {{logging_mixin.py:112}} INFO - [2021-05-14 23:01:45,644] {{local_task_job.py:102}} INFO - Task exited with return code 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you look at your Amazon S3 bucket, you should now see the files under the files folder.&lt;/p&gt;

&lt;p&gt;Finally, if you look at Queries from the Redshift console, you should see a successful query appear:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_v-VwWix--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-mwaa-redshift/blob/main/images/blog-query.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_v-VwWix--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-mwaa-redshift/blob/main/images/blog-query.png%3Fraw%3Dtrue" alt="query"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The part of the DAG that moves the data from S3 to Redshift is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def s3_to_redshift(**kwargs):    
    ti = kwargs['task_instance']
    queryId = ti.xcom_pull(key='return_value', task_ids='join_athena_tables' )
    print(queryId)
    athenaKey='s3://'+s3_bucket_name+"/"+athena_results+"join_athena_tables/"+queryId+"_clean.csv"
    print(athenaKey)
    sqlQuery="copy "+redshift_table_name+" from '"+athenaKey+"' iam_role '"+redshift_iam_arn+"' CSV IGNOREHEADER 1;"
    print(sqlQuery)
    rsd = boto3.client('redshift-data')
    resp = rsd.execute_statement(
        ClusterIdentifier=redshift_cluster,
        Database=redshift_db,
        #DbUser=redshift_dbuser,
        SecretArn=redshift_secret_arn,
        Sql=sqlQuery,
    )
    print(resp)
    return "OK"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In essence, we are not using an Apache Airflow operator but some Python code and boto3 and the redshift-data apis.&lt;/p&gt;

&lt;p&gt;Congratulations, you have now replicated the original launch blog post for MWAA. Now let us take a look at how we move that data to back to S3 from Redshift.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uploading-and-running-the-movielenss3-dag"&gt;
  &lt;/a&gt;
  Uploading and running the movielens-s3 DAG
&lt;/h3&gt;

&lt;p&gt;We have created another DAG, which you can find here, &lt;strong&gt;&lt;a href="https://github.com/094459/blog-mwaa-redshift/blob/main/dags/movielens-redshift-s3.py"&gt;movielens-redshift-s3.py&lt;/a&gt;&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;If we take a look at the DAG, we can see the following section looks familiar. We are using the same variables, so nothing new to create:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;s3_bucket_name = Variable.get("s3_bucket_name", default_var="undefined")
s3_key = Variable.get("s3_key", default_var="undefined")
redshift_table_name = Variable.get("redshift_table_name", default_var="undefined")
redshift_airflow_connection = Variable.get("redshift_airflow_connection", default_var="undefined")
aws_connection = Variable.get("aws_connection", default_var="undefined")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this DAG we are going to use an operator called &lt;strong&gt;RedshiftToS3Transfer&lt;/strong&gt;. You can see the extract from the DAG as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    unload_to_S3 = RedshiftToS3Transfer(
    task_id='unload_to_S3',
    schema='public',
    table=redshift_table_name,
    s3_bucket=s3_bucket_name,
    s3_key=s3_key,
    redshift_conn_id=redshift_airflow_connection,
    unload_options = ['CSV'],
    aws_conn_id = aws_connection
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the first DAG, we used boto3 and called the redshift-data apis (constructing the information that allowed us to run the unload task). In order for this to work with the RedshiftToS3Transfer operator, we need to create a new connection which contains the details of the Redshift cluster.&lt;/p&gt;

&lt;p&gt;We do this by creating an Apache Airflow connection, which will be used by this DAG to understand how to connect to the Redshift cluster we created. &lt;/p&gt;

&lt;p&gt;When creating this we will give it a name (Conn ID) which is how we will refer to it in the code. If you look up at the variables, we configured this to be &lt;strong&gt;redshift_default&lt;/strong&gt; (from the variables.json entry "redshift_airflow_connection": "redshift_default"), so we will give it that name.&lt;/p&gt;

&lt;p&gt;For the Conn Type we select Amazon Web Services.&lt;/p&gt;

&lt;p&gt;For the Host, we use the Redshift cluster endpoint - again this was set in the variables above and is output as part of the CDK app deployment.&lt;/p&gt;

&lt;p&gt;For schema we set this to "mwaa" as this is the name of the database we created (so change if you have deviated from the above)&lt;/p&gt;

&lt;p&gt;For username and password, enter "awsuser" (change if you changed yours from the defaults) and then for password, you will need to retrieve the password from the AWS Secret Manager (it will be a randomised string).&lt;/p&gt;

&lt;p&gt;Finally, port should be set to 5439. It should look a little like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G5MRq1Gs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-mwaa-redshift/blob/main/images/blog-conn.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G5MRq1Gs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/094459/blog-mwaa-redshift/blob/main/images/blog-conn.png%3Fraw%3Dtrue" alt="connection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Save the connection, and it you are now ready to go.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Triggering the DAG&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;From the UI you can turn on/enable and then trigger the DAG called &lt;strong&gt;movielens-refshift-s3&lt;/strong&gt;. If we try and now run the export, what happens? It looks like it hangs, but after a few seconds we see the following in the logs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[2021-05-12 16:53:23,303] {{redshift_to_s3_operator.py:124}} INFO - Executing UNLOAD command...
[2021-05-12 16:53:23,333] {{logging_mixin.py:112}} INFO - [2021-05-12 16:53:23,333] {{base_hook.py:89}} INFO - Using connection to: id: redshift_default3. Host: mwaa-redshift-clusterxxx.cq7hpqttXXXX.eu-west-1.redshift.amazonaws.com, Port: None, Schema: mwaa, Login: awsuser, Password: XXXXXXXX, extra: None
[2021-05-12 16:55:34,323] {{taskinstance.py:1150}} ERROR - could not connect to server: Connection timed out
    Is the server running on host "mwaa-redshift-clusterxxx.cq7hpqttbcoc.eu-west-1.redshift.amazonaws.com" (10.192.X.XXX) and accepting
    TCP/IP connections on port 5432?
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is to be expected. The MWAA and Amazon Redshift clusters are in two different VPCs, and by default there is no access. So what are our options? Well, we have a few..&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we could create a VPC and then deploy both MWAA and our Amazon Redshift cluster in that VPC and use security groups to control access at the network level&lt;/li&gt;
&lt;li&gt;we could enable Amazon Redshift in Public mode, and then use security groups to control who can access at the network level&lt;/li&gt;
&lt;li&gt;you could configure your own networking solution to enable connectivity between the MWAA VPC and the Amazon Redshift VPC, for example setting up VPC Peering between the two VPCs&lt;/li&gt;
&lt;li&gt;we could configure Redshift-managed VPC endpoints&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am going to look at the last option to addressing this, configuring Amazon Redshift-managed VPC endpoints. You can dive deeper into this topic by checking out this post, &lt;a href="https://aws-oss.beachgeek.co.uk/is"&gt;Enable private access to Amazon Redshift from your client applications in another VPC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Configuring Amazon Redshift-managed VPC endpoints&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first thing we need to do is enable a feature within our Redshift cluster called Cluster Relocation, which we can do through the aws cli - adjust for your cluster name and the aws region you are in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws redshift modify-cluster --cluster-identifier {your-cluster-name} --availability-zone-relocation --region={your region}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which should produce output like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "Cluster": {
        "ClusterIdentifier": "mwaa-redshift-clusterxxx",
        "NodeType": "ra3.4xlarge",
        "ClusterStatus": "available",
        "ClusterAvailabilityStatus": "Available",
        "MasterUsername": "awsuser",
        "DBName": "mwaa",
        "Endpoint": {
            "Address": "mwaa-redshift-clusterxxx.cq7hpqttXXXX.eu-west-1.redshift.amazonaws.com",
            "Port": 5439
        },
        "ClusterCreateTime": "2021-05-12T15:45:57.316Z",
        "AutomatedSnapshotRetentionPeriod": 1,
        "ManualSnapshotRetentionPeriod": -1,
        "ClusterSecurityGroups": [],
        "VpcSecurityGroups": [
            {
                "VpcSecurityGroupId": "sg-0a3c2ec446bf3XXX",
                "Status": "active"
            }
        ],
        "ClusterParameterGroups": [
            {
                "ParameterGroupName": "default.redshift-1.0",
                "ParameterApplyStatus": "in-sync"
            }
        ],
        "ClusterSubnetGroupName": "mwaa-redshift-cluster-mwaaredshiftclustersubnets12b38881-18687maiqstqw",
        "VpcId": "vpc-009458f3af3d0XXXX",
        "AvailabilityZone": "eu-west-1b",
        "PreferredMaintenanceWindow": "fri:23:30-sat:00:00",
        "PendingModifiedValues": {},
        "ClusterVersion": "1.0",
        "AllowVersionUpgrade": true,
        "NumberOfNodes": 2,
        "PubliclyAccessible": false,
        "Encrypted": true,
        "Tags": [],
        "KmsKeyId": "arn:aws:kms:eu-west-1:XXXXXXXXXX:key/3644d5bf-b7c1-489b-95d1-e4ebb9816982",
        "EnhancedVpcRouting": false,
        "IamRoles": [
            {
                "IamRoleArn": "arn:aws:iam:: XXXXXXXXXX:role/MWAA-RedShift-Cluster-mwaaredshiftservicerole26FEF-IJCNHR9TMXBN",
                "ApplyStatus": "in-sync"
            }
        ],
        "MaintenanceTrackName": "current",
        "DeferredMaintenanceWindows": [],
        "NextMaintenanceWindowStartTime": "2021-05-14T23:30:00Z"
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can check that this change has taken effect with the following command (if you do not use jq, then look for the "AvailabilityZoneRelocationStatus" parameter set to "enabled"):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws redshift describe-clusters --cluster-identifier {your-cluster-name} --region={your region} | jq -r '.Clusters[] | .AvailabilityZoneRelocationStatus'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you should get "enabled" if it is working ok.&lt;/p&gt;

&lt;p&gt;The CDK app will have created a new Subnet group, the name of which you can see in the outputs. This Subnet group contains the subnet ids for the MWAA VPC, so grab that info as you will need it in the next step when creating the VPC Endpoint itself.&lt;/p&gt;

&lt;p&gt;We can setup the VPC Endpoint connection. Replace the parameters below with:&lt;/p&gt;

&lt;p&gt;{your-cluster-name} - the name of your Redshift cluster&lt;br&gt;
{your-aws-account} - the name of your aws account&lt;br&gt;
{your-subnet-group} - the name of the Redshift subnet group that was mentioned above&lt;br&gt;
{your-vpc-sg} - this is the MWAA security group&lt;/p&gt;

&lt;p&gt;If you want you can change the endpoint-name, when running this it will create one called "mwaa-redshift-endpoint".&lt;/p&gt;

&lt;p&gt;To make this easier, if you check the outputs you should see the command line you need to execute as part of the outputs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws redshift create-endpoint-access --cluster-identifier {your-cluster-name} --resource-owner {your-aws-account} --endpoint-name mwaa-redshift-endpoint --subnet-group-name {your-subnet-group} --vpc-security-group-ids {your-vpc-sg} --region={your region}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which should output the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "ClusterIdentifier": "mwaa-redshift-clusterxxx",
    "ResourceOwner": "704533066374",
    "SubnetGroupName": "mwaa-redshift-cluster-mwaavperedshiftcsg-1n5aroq4bokge",
    "EndpointStatus": "creating",
    "EndpointName": "mwaa-redshift-endpoint",
    "Port": 5439,
    "VpcSecurityGroups": [
        {
            "VpcSecurityGroupId": "sg-01f25764ea72db0f2",
            "Status": "active"
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will take around 5 minutes to create this and when finished, the output of this will be to create a new VPC Endpoint, which our MWAA environment will have access to. &lt;/p&gt;

&lt;p&gt;This will create a new Redshift endpoint which we will need to use to replace the Apache Airflow connection we created earlier on. To find this endpoint, we use the following command (change the "mwaa-redshift-endpoint" if you used a different name):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ aws redshift describe-endpoint-access --endpoint-name mwaa-redshift-endpoint | jq '.EndpointAccessList[] | .Address'

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which should display something like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"mwaa-redshift-endpoint-endpoint-amwgdyw5zgkicyjnwvnc.cq7hpqttbcoc.eu-west-1.redshift.amazonaws.com"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we can now update the Connection value in the Apache Airflow UI with this updated Redshift connection value.&lt;/p&gt;

&lt;p&gt;When we try again, we can now see that it works...progress! Alas, we get a different error. You will see something like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[2021-05-15 18:15:15,428] {{logging_mixin.py:112}} INFO - [2021-05-15 18:15:15,428] {{base_hook.py:89}} INFO - Using connection to: id: redshift_default3. Host: mwaa-redshift-endpoint-endpoint-amwgdyw5zgkicyjnwvnc.cq7hpqttbcoc.eu-west-1.redshift.amazonaws.com, Port: 5439, Schema: mwaa, Login: awsuser, Password: XXXXXXXX, extra: None
[2021-05-15 18:15:16,273] {{logging_mixin.py:112}} INFO - [2021-05-15 18:15:16,273] {{dbapi_hook.py:174}} INFO - 
                    UNLOAD ('SELECT * FROM public.movie_demo')
                    TO 's3://mwaa-redshift-blog/files//movie_demo_'
                    with credentials
                    'aws_access_key_id=ASIA2ICLROKDMYHWTXM3;aws_secret_access_key=QSC6FHRvEIy/I5Vgw+a4aGxatJHdEhUEtXAGYs35'
                    CSV;

[2021-05-15 18:15:16,419] {{taskinstance.py:1150}} ERROR - S3ServiceException:The AWS Access Key Id you provided does not exist in our records.,Status 403,Error InvalidAccessKeyId,Rid DXZAZJB2A16RSAHZ,ExtRid 5rTDV6AnoE8pM8fsx3PTyeJozEUtdPHaxxwsKKJ3ODd5hgb3HvEf9EGoMcge8gKsEhBYqqAMar0=,CanRetry 1
DETAIL:  
  -----------------------------------------------
  error:  S3ServiceException:The AWS Access Key Id you provided does not exist in our records.,Status 403,Error InvalidAccessKeyId,Rid DXZAZJB2A16RSAHZ,ExtRid 5rTDV6AnoE8pM8fsx3PTyeJozEUtdPHaxxwsKKJ3ODd5hgb3HvEf9EGoMcge8gKsEhBYqqAMar0=,CanRetry 1
  code:      8001
  context:   Listing bucket=mwaa-redshift-blog prefix=files//movie_demo_
  query:     0
  location:  s3_utility.cpp:840
  process:   padbmaster [pid=19490]
  -----------------------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It turns out we need to do one more thing to get this working.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Configuring AWS credentials for RedshiftToS3Transfer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We now need to configure credentials that the Amazon Redshift cluster will use when running the unload operation. We have a couple of options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we can store the aws credentials as a json tuple in the Apache Airflow Connections&lt;/li&gt;
&lt;li&gt;we can store the same credentials but use the native integration with AWS Secrets Manager to do the same&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To keep things simple, I am going to use the Apache Airflow (but will create a follow on post that shows how to do the other)&lt;/p&gt;

&lt;p&gt;You will need to create or use an existing IAM user that will be configured to connect to the Redshift cluster to perform the unload transaction. You should create a user with the minimal permissions. You will need to have to hand the "aws_access_key_id" and the "aws_secret_access_key" as you are going to add these to the Apache Airflow connection document.&lt;/p&gt;

&lt;p&gt;From the Connections in the Apache Airflow UI, find the connection document you have configured (if you are following along in this example, I have used one called "aws_redshift" and configured the DAGs to use this too. This is currently empty, so all I need to do is add your keys in the following format in the extras field:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
"aws_access_key_id" : "XASDASDSADSAFDFDSF", "aws_secret_access_key": "7DSFDSFDSFDSdsfdsfdskfjklsdjfkldsjf"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After saving this, we can try again.&lt;/p&gt;

&lt;p&gt;Success, the workflow should show dark green, and when we look at the logs we can see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[2021-05-15 18:23:26,049] {{redshift_to_s3_operator.py:124}} INFO - Executing UNLOAD command...
[2021-05-15 18:23:26,080] {{logging_mixin.py:112}} INFO - [2021-05-15 18:23:26,079] {{base_hook.py:89}} INFO - Using connection to: id: redshift_default3. Host: mwaa-redshift-endpoint-endpoint-amwgdyw5zgkicyjnwvnc.cq7hpqttbcoc.eu-west-1.redshift.amazonaws.com, Port: 5439, Schema: mwaa, Login: awsuser, Password: XXXXXXXX, extra: None
[2021-05-15 18:23:26,953] {{logging_mixin.py:112}} INFO - [2021-05-15 18:23:26,953] {{dbapi_hook.py:174}} INFO - 
                    UNLOAD ('SELECT * FROM public.movie_demo')
                    TO 's3://mwaa-redshift-blog/files//movie_demo_'
                    with credentials
                    'aws_access_key_id=AXSDADSADSADSADSASD;aws_secret_access_key=7D3YSipzrVecasdsadsadSADSADSAbc7oYvbxi'
                    CSV;

[2021-05-15 18:23:27,446] {{redshift_to_s3_operator.py:126}} INFO - UNLOAD command complete...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if we look at the S3 bucket, we can see the files, that have been exported from Redshift.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#troubleshooting"&gt;
  &lt;/a&gt;
  Troubleshooting
&lt;/h3&gt;

&lt;p&gt;As I was testing this out, I came across a couple of errors that you may see so thought I would document what the errors were and how I resolved the issue.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS cli version&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When I was running the "aws redshift create-endpoint-access" I got errors and looking at the available options, the "create-endpoint-access" was not available. I was using 1.18.209, so upgraded and the problem was resolved.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;S3 Folder issues&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The CDK application creates the bucket and a folder called files, which is used as part of the first DAG. I got the following errors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[2021-05-15 15:20:24,340] {{standard_task_runner.py:78}} INFO - Job 117232: Subtask check_s3_for_key
[2021-05-15 15:20:24,434] {{logging_mixin.py:112}} INFO - Running %s on host %s &amp;lt;TaskInstance: movielens-redshift.check_s3_for_key 2021-05-15T15:20:19.064158+00:00 [running]&amp;gt; ip-10-192-21-59.eu-west-1.compute.internal
[2021-05-15 15:20:24,581] {{s3_key_sensor.py:88}} INFO - Poking for key : s3://mwaa-redshift-blog/files/
[2021-05-15 15:20:45,206] {{s3_key_sensor.py:88}} INFO - Poking for key : s3://mwaa-redshift-blog/files/
..
..
[2021-05-15 15:20:45,333] {{taskinstance.py:1150}} ERROR - Snap. Time is OUT.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even though the folder was their, MWAA and specifically this operator could not see it. In the end I realised that I had forgotten to add the trailing "/" in the destination_key_prefix= part of CDK application&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;destination_key_prefix="files/",
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once I did that, it worked fine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Redshift username password error&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When triggering the Amazon Redshift to S3 DAG, I got the following error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[2021-05-15 11:03:44,466] {{standard_task_runner.py:78}} INFO - Job 117231: Subtask unload_to_S3
[2021-05-15 11:03:44,569] {{logging_mixin.py:112}} INFO - Running %s on host %s &amp;lt;TaskInstance: movielens-redshift-s3.unload_to_S3 2021-05-15T11:03:39.979947+00:00 [running]&amp;gt; ip-10-192-21-59.eu-west-1.compute.internal
[2021-05-15 11:03:44,693] {{redshift_to_s3_operator.py:124}} INFO - Executing UNLOAD command...
[2021-05-15 11:03:44,722] {{logging_mixin.py:112}} INFO - [2021-05-15 11:03:44,722] {{base_hook.py:89}} INFO - Using connection to: id: redshift_default3. Host: www-endpoint-smz89t0ahk5ieuxze2yq.cq7hpqttbcoc.eu-west-1.redshift.amazonaws.com, Port: 5439, Schema: mwaa, Login: awsuser, Password: XXXXXXXX, extra: None
[2021-05-15 11:03:45,493] {{taskinstance.py:1150}} ERROR - FATAL:  password authentication failed for user "awsuser"
FATAL:  password authentication failed for user "awsuser"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The resolution was simple, I had forgotten to add the password to the connection document in MWAA, so all I had to do was obtain the password from AWS Secrets Manager, and then store that in the password field.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon Redshift connection times out&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While I was getting the Redshift-managed VPC endpoint setup, when I triggered the Amazon Redshift to S3 DAG, the task stayed green (running) for a while, and eventually failed with the following error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[2021-05-14 23:40:34,440] {{logging_mixin.py:112}} INFO - Running %s on host %s &amp;lt;TaskInstance: movielens-redshift-s3.unload_to_S3 2021-05-14T23:40:29.106506+00:00 [running]&amp;gt; ip-10-192-21-59.eu-west-1.compute.internal
[2021-05-14 23:40:34,602] {{redshift_to_s3_operator.py:124}} INFO - Executing UNLOAD command...
[2021-05-14 23:40:34,636] {{logging_mixin.py:112}} INFO - [2021-05-14 23:40:34,635] {{base_hook.py:89}} INFO - Using connection to: id: redshift_default3. Host: aaa-endpoint-bg5whiw3h4rvuimskvn2.cq7hpqttbcoc.eu-west-1.redshift.amazonaws.com, Port: 5439, Schema: mwaa, Login: awsuser, Password: XXXXXXXX, extra: None
[2021-05-14 23:42:44,915] {{taskinstance.py:1150}} ERROR - could not connect to server: Connection timed out
    Is the server running on host "aaa-endpoint-bg5whiw3h4rvuimskvn2.cq7hpqttbcoc.eu-west-1.redshift.amazonaws.com" (10.192.21.140) and accepting
    TCP/IP connections on port 5439?
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It took me a while to figure this out, but the solution involved a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;setup a Redshift Subnet Group with the subnets from the MWAA environment&lt;/li&gt;
&lt;li&gt;enable the MWAA security group to allow inbound Redshift traffic (port 5439)&lt;/li&gt;
&lt;li&gt;setup the Redshift-managed VPC endpoint setup with the correct environment - you need to do this AFTER the subnet group has been setup, otherwise only the existing Redshift VPC will appear&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In this post I have shown you how you can use and integrate Apache Airflow to orchestrate data engineering tasks across a number of AWS services, importing data from origin to Amazon S3, transforming it via Amazon Athena, creating tables in Amazon Redshift before exporting it to an Amazon S3 bucket.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clean-up"&gt;
  &lt;/a&gt;
  Clean up
&lt;/h3&gt;

&lt;p&gt;Make sure you delete all the resources, which you can do quickly by running these commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
$ cdk destroy MWAA-Redshift-Cluster
$ cdk destroy MWAA-Redshift-VPC

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then emptying/delete the Amazon S3 bucket.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Survey&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Please &lt;a href="https://eventbox.dev/survey/7RROR4Q"&gt;complete this very short survey&lt;/a&gt; to let me know if you found this useful and how I can make them even better. &lt;/p&gt;

&lt;p&gt;Many thanks!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>opensource</category>
    </item>
    <item>
      <title>VimGore : an interactive game to learn vim </title>
      <author>Pratham Sharma</author>
      <pubDate>Sat, 15 May 2021 18:13:44 +0000</pubDate>
      <link>https://dev.to/ps173/vimgore-an-interactive-game-to-learn-vim-10kn</link>
      <guid>https://dev.to/ps173/vimgore-an-interactive-game-to-learn-vim-10kn</guid>
      <description>&lt;p&gt;So I wanted to try MERN stack and thus started out with this idea of creating a game that will provide you with snippets of code which will be corrected by the user using vim mode. So this idea was enough to give me motivation to jump into the project state.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aQB62dbe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfd54mffjm6ondg69lzk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aQB62dbe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfd54mffjm6ondg69lzk.png" alt="VimGore"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So below is the link to the app. It is not fully featured and I think that it is missing lot of stuff but will be happy to get a overall feedback. &lt;/p&gt;

&lt;p&gt;If you have any issues then report in repo :)&lt;/p&gt;

&lt;p&gt;For now this is vimgore&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ps173/VimGore"&gt;source code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vimgore.netlify.app/"&gt;live site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(also this was my first proper full-stack project)&lt;br&gt;
Thanks For Reading üòÅÔ∏è&lt;br&gt;
and keep up the hardwork üí™&lt;/p&gt;

</description>
      <category>vim</category>
      <category>react</category>
      <category>node</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Go Package CI/CD with GitHub Actions</title>
      <author>Johanan Idicula</author>
      <pubDate>Sat, 15 May 2021 18:12:30 +0000</pubDate>
      <link>https://dev.to/jidicula/go-package-ci-cd-with-github-actions-350o</link>
      <guid>https://dev.to/jidicula/go-package-ci-cd-with-github-actions-350o</guid>
      <description>&lt;p&gt;In a &lt;a href="https://forcepush.tech/python-package-ci-cd-with-git-hub-actions"&gt;previous post&lt;/a&gt;, I wrote about how I implemented CI/CD checks and autoreleases for the Python implementation of my random-standup program. I also developed some similar workflows for the Go implementation, so I thought I'd also write a Go-flavoured post about packaging CI/CD using GitHub Actions. This post may seem very familiar if you read that previous post - as I described in my &lt;a href="https://forcepush.tech/writing-a-simple-cli-program-python-vs-go"&gt;comparison between the Go and Python implementations of this program&lt;/a&gt;, my CI/CD goals are the same: PR checks and autoreleases.&lt;/p&gt;

&lt;p&gt;As I said before, I wanted to ensure that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Each change I make to my program won't break existing functionality (Continuous Integration), and&lt;/li&gt;
&lt;li&gt;Publishing a new release to &lt;a href="https://pkg.go.dev"&gt;pkg.go.dev&lt;/a&gt; is automatic (Continuous Delivery/Deployment).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;GitHub provides a workflow automation feature called &lt;a href="https://docs.github.com/en/actions"&gt;GitHub Actions&lt;/a&gt;. Essentially, you write your workflow configurations in a YAML file in &lt;code&gt;your-repo/.github/workflows/&lt;/code&gt;, and they'll be executed on certain repository events.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#continuous-integration"&gt;
  &lt;/a&gt;
  Continuous Integration
&lt;/h1&gt;

&lt;p&gt;This automation is relatively straightforward. I want to run the following workflows on each commit into the repository trunk and on each pull request into trunk:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Test syntax by running a linting check with &lt;a href="https://golangci-lint.run"&gt;&lt;code&gt;golangci-lint&lt;/code&gt;&lt;/a&gt; - it's the best linter (actually, I suppose it's a meta-linter since it invokes several separate linters) available for Go and slaps your wrist if you slip into some well-known antipatterns.&lt;/li&gt;
&lt;li&gt;Test functionality by running automated unit tests on the entire program. This is an extremely simple program, so I definitely overengineered its factoring into functions to make it easier to unit test.&lt;/li&gt;
&lt;li&gt;Test build stability by attempting to build the program (but discarding the build artifact) across as many OS and arch combinations supported by Go. Of course, I don't expect that anyone would run my standup randomizer using Plan 9 on an ARM chip, but this was more of an exercise to learn about Go's cross-compilation capabilities.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's the &lt;a href="https://github.com/jidicula/random-standup/blob/main/.github/workflows/build.yml"&gt;full workflow&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#each-commit-to-trunk"&gt;
  &lt;/a&gt;
  Each commit to trunk
&lt;/h2&gt;

&lt;p&gt;The trigger for this is declared at the top of the workflow file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#test-syntax-by-checking-formatting"&gt;
  &lt;/a&gt;
  Test syntax by checking formatting
&lt;/h2&gt;

&lt;p&gt;First, we have to checkout the repository in GitHub Actions using &lt;a href="https://github.com/actions/checkout"&gt;GitHub's own &lt;code&gt;checkout&lt;/code&gt; action&lt;/a&gt;. Then, we have to set up the Go version using &lt;a href="https://github.com/actions/setup-go"&gt;GitHub's &lt;code&gt;setup-go&lt;/code&gt; action&lt;/a&gt;. GitHub Actions has 3 different OSes available for their runners, each with various &lt;a href="https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md#go"&gt;Go versions&lt;/a&gt;, but it's safest to explicitly specify which Go version will be used.&lt;/p&gt;

&lt;p&gt;Finally, we can use &lt;a href="https://github.com/golangci/golangci-lint-action/blob/master/action.yml"&gt;golangci-lint's provided GitHub Action&lt;/a&gt; for linting - it runs &lt;code&gt;golangci-lint&lt;/code&gt; on the workflow runner's clone of the repo and outputs an error code if any Go file in the repo fails rules of any linters in &lt;code&gt;golangci-lint&lt;/code&gt;. Note that &lt;code&gt;golangci-lint&lt;/code&gt; fails if the &lt;a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree"&gt;AST&lt;/a&gt; cannot be parsed (i.e. if there are any syntax errors), so it can also be used for checking syntax correctness, which itself is a good proxy for checking for merge conflict strings. We can fail-fast with any checks this way - there's no need to spin up a compilation and a &lt;code&gt;go test&lt;/code&gt; invocation if there are syntax errors.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;lint&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Lint files&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;ubuntu-latest'&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2.3.4&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-go@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;go-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;1.16.4'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;golangci-lint&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;golangci/golangci-lint-action@v2.5.2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;latest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#test-functionality"&gt;
  &lt;/a&gt;
  Test Functionality
&lt;/h2&gt;

&lt;p&gt;Again, we need to checkout the repo for this job and set up the Go version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run tests&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;ubuntu-latest'&lt;/span&gt;
    &lt;span class="na"&gt;needs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;lint&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2.3.4&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-go@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;go-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;1.16.4'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;go test -v -cover&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that unlike Python, no setup is needed to install dependencies (&lt;code&gt;go test&lt;/code&gt; automatically grabs dependencies defined in &lt;code&gt;go.mod&lt;/code&gt;) or set up a virtual environment, so there's a lot less boilerplate in CI/CD.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-build-stability-for-different-oses-and-architectures"&gt;
  &lt;/a&gt;
  Test build stability for different OSes and architectures
&lt;/h2&gt;

&lt;p&gt;Go provides &lt;a href="https://www.digitalocean.com/community/tutorials/building-go-applications-for-different-operating-systems-and-architectures"&gt;cross-compilation tooling&lt;/a&gt; for a wide variety of operating systems and architectures. Essentially, you can run a command like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ GOOS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;plan9 &lt;span class="nv"&gt;GOARCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;arm go build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and the Go compiler will build a binary that will run on the OS specified in &lt;code&gt;GOOS&lt;/code&gt; and the arch in &lt;code&gt;GOARCH&lt;/code&gt;. To see the full list of GOOS and GOARCH options, run &lt;code&gt;go tool dist list&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We want to verify build stability across this set, so we can set up a matrix build for different GOOS and GOARCH options using GitHub Actions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;ubuntu-latest'&lt;/span&gt;
    &lt;span class="na"&gt;needs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;test&lt;/span&gt;
    &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;matrix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;goosarch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;aix/ppc64'&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;android/amd64'&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;android/arm64'&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;darwin/amd64'&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;darwin/arm64'&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;dragonfly/amd64'&lt;/span&gt;
          &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is defined in the &lt;a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix"&gt;&lt;code&gt;jobs.&amp;lt;job_id&amp;gt;.strategy.matrix&lt;/code&gt; directive&lt;/a&gt;. I've added just 1 variable for every GOOS and GOARCH pairing (truncated for this blogpost - there are &lt;a href="https://github.com/jidicula/random-standup/blob/291b9a3cccdad0fece3c061029ecadb7c0676bc5/.github/workflows/build.yml#L42"&gt;39 pairs defined in my workflow file&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Internally, the steps are somewhat like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;GitHub Actions parses the directives for the job and sees there's a matrix strategy.&lt;/li&gt;
&lt;li&gt;It spins up a separate runner for each matrix combination and defines the variables &lt;code&gt;matrix.goosarch&lt;/code&gt; as the values for that combination.&lt;/li&gt;
&lt;li&gt;It runs the job steps in each runner it spun up in Step 2.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can see an example of how this matrix run looks like in the GitHub Actions console &lt;a href="https://github.com/jidicula/random-standup/actions/runs/835336772"&gt;here&lt;/a&gt; (see all the &lt;code&gt;goosarch&lt;/code&gt; values in the left sidebar). These matrix options are run in parallel by default, so the runtime of the job determined by the slowest matrix option. Note that if your repository is private, you will be charged Actions minutes for each separate build matrix option, with some &lt;a href="https://docs.github.com/en/github/setting-up-and-managing-billing-and-payments-on-github/about-billing-for-github-actions#about-billing-for-github-actions"&gt;hefty multipliers for macOS and Windows runners&lt;/a&gt; (1 macOS minute is 10 minutes of Actions credit, 1 Windows minute is 2 minutes of Actions credit as of May 2021).&lt;/p&gt;

&lt;p&gt;We do our usual checkout and Go version setup, then some basic Bash string-splitting on the &lt;code&gt;/&lt;/code&gt; character so we can set the &lt;code&gt;GOOS&lt;/code&gt; and &lt;code&gt;GOARCH&lt;/code&gt; environment variables separately from a single matrix option:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Get OS and arch info&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;GOOSARCH=${{matrix.goosarch}}&lt;/span&gt;
          &lt;span class="s"&gt;GOOS=${GOOSARCH%/*}&lt;/span&gt;
          &lt;span class="s"&gt;GOARCH=${GOOSARCH#*/}&lt;/span&gt;
          &lt;span class="s"&gt;BINARY_NAME=${{github.repository}}-$GOOS-$GOARCH&lt;/span&gt;
          &lt;span class="s"&gt;echo "BINARY_NAME=$BINARY_NAME" &amp;gt;&amp;gt; $GITHUB_ENV&lt;/span&gt;
          &lt;span class="s"&gt;echo "GOOS=$GOOS" &amp;gt;&amp;gt; $GITHUB_ENV&lt;/span&gt;
          &lt;span class="s"&gt;echo "GOARCH=$GOARCH" &amp;gt;&amp;gt; $GITHUB_ENV&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we simply run Go's &lt;code&gt;go build&lt;/code&gt; subcommand, which creates the binary:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;go build -o "$BINARY_NAME" -v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#automerge"&gt;
  &lt;/a&gt;
  Auto-merge
&lt;/h2&gt;

&lt;p&gt;GitHub also allows pull requests to be merged automatically if branch protection rules are configured and if the pull request passes all required reviews and status checks. In the repo Settings &amp;gt; Branches &amp;gt; Branch Protection rules, I have a rule defined for &lt;code&gt;main&lt;/code&gt; requiring all jobs in the &lt;code&gt;build.yml&lt;/code&gt; workflow to pass before a branch can be merged into &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#release-automation"&gt;
  &lt;/a&gt;
  Release automation
&lt;/h1&gt;

&lt;p&gt;There are 2 parts to GitHub release automation:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create the GitHub release using Git tags and add the build artifacts to it (&lt;a href="https://github.com/jidicula/random-standup/blob/main/.github/workflows/release-draft.yml"&gt;workflow&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Publish the package to pkg.go.dev (&lt;a href="https://github.com/jidicula/random-standup/blob/main/.github/workflows/publish.yml"&gt;workflow&lt;/a&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#create-github-release"&gt;
  &lt;/a&gt;
  Create GitHub Release
&lt;/h2&gt;

&lt;p&gt;We set up the workflow to trigger on push to a tag beginning with &lt;code&gt;v&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Sequence of patterns matched against refs/tags&lt;/span&gt;
    &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;v*'&lt;/span&gt; &lt;span class="c1"&gt;# Push events to matching v*, i.e. v1.0, v20.15.10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we define our &lt;code&gt;release&lt;/code&gt; job, running on Ubuntu (cheapest and fastest GitHub Actions runner environment):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Create Release&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;autorelease&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Create Release&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;ubuntu-latest'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I also set up the same &lt;a href="https://github.com/jidicula/random-standup/blob/291b9a3cccdad0fece3c061029ecadb7c0676bc5/.github/workflows/release-draft.yml#L42"&gt;GOOS and GOARCH build matrix&lt;/a&gt; as in &lt;code&gt;build.yml&lt;/code&gt; - when we create the GitHub release, we'll build and upload the binaries as release assets.&lt;/p&gt;

&lt;p&gt;Our first 2 steps are almost the same as our Build workflow for pushes and PRs to &lt;code&gt;main&lt;/code&gt;: we checkout the repo and set up Go. Our checkout step is slightly different, though: we provide &lt;code&gt;0&lt;/code&gt; to the &lt;code&gt;fetch-depth&lt;/code&gt; input so we make a deep clone with all commits, not a shallow clone with just the most recent commit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout code&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;fetch-depth&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go specifies module versions using version control tagging, so we don't need to parse any manifest files like we did with Python. So, we can do the same Bash string splitting as before and build the binary:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Get OS and arch info&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;GOOSARCH=${{matrix.goosarch}}&lt;/span&gt;
          &lt;span class="s"&gt;GOOS=${GOOSARCH%/*}&lt;/span&gt;
          &lt;span class="s"&gt;GOARCH=${GOOSARCH#*/}&lt;/span&gt;
          &lt;span class="s"&gt;BINARY_NAME=${{github.repository}}-$GOOS-$GOARCH&lt;/span&gt;
          &lt;span class="s"&gt;echo "BINARY_NAME=$BINARY_NAME" &amp;gt;&amp;gt; $GITHUB_ENV&lt;/span&gt;
          &lt;span class="s"&gt;echo "GOOS=$GOOS" &amp;gt;&amp;gt; $GITHUB_ENV&lt;/span&gt;
          &lt;span class="s"&gt;echo "GOARCH=$GOARCH" &amp;gt;&amp;gt; $GITHUB_ENV&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;go build -o "$BINARY_NAME" -v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to create some release notes. I keep a release template in the &lt;code&gt;.github&lt;/code&gt; folder and append some gitlog output to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt; &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Release Notes&lt;/span&gt;
        &lt;span class="s"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;git log $(git describe HEAD~ --tags --abbrev=0)..HEAD --pretty='format:* %h %s%n  * %an &amp;lt;%ae&amp;gt;' --no-merges &amp;gt;&amp;gt; ".github/RELEASE-TEMPLATE.md"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That gnarly gitlog command is checking all commits since the last tag to HEAD. For each commit, it appends the commit hash, the commit message subject, the author name, and the author email to the release template.&lt;/p&gt;

&lt;p&gt;Finally, we use a &lt;a href="https://github.com/softprops/action-gh-release"&gt;3rd-party release creation Action&lt;/a&gt; for creating a release draft with the release notes and artifacts we just created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Release with Notes&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;softprops/action-gh-release@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;body_path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;.github/RELEASE-TEMPLATE.md"&lt;/span&gt;
          &lt;span class="na"&gt;draft&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
          &lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{env.BINARY_NAME}}&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This creates a draft visible at &lt;a href="https://github.com/jidicula/random-standup/releases"&gt;https://github.com/jidicula/random-standup/releases&lt;/a&gt;. I modify the release announcements as needed, and publish the release.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#publishing-to-pkggodev"&gt;
  &lt;/a&gt;
  Publishing to pkg.go.dev
&lt;/h2&gt;

&lt;p&gt;The final step of the release process is to notify pkg.go.dev that there's a new version available for the module. Here's the full &lt;a href="https://github.com/jidicula/random-standup/blob/main/.github/workflows/publish.yml"&gt;workflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This time, we trigger the workflow to run on a release being published (the last step of the previous workflow is manually publishing a release draft):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;release&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;published&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We do the same checkout as before. Then, we simply run &lt;code&gt;curl&lt;/code&gt; to the URL where the module is fetched from by &lt;code&gt;go get&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;bump-index&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout repo&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2.3.4&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Ping endpoint&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;curl "https://proxy.golang.org/github.com/jidicula/random-standup/@v/$(git describe HEAD --tags --abbrev=0).info"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;pkg.go.dev recommends this as &lt;a href="https://go.dev/about#adding-a-package"&gt;one of the ways of adding a new module (or module version)&lt;/a&gt; to its index.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#putting-it-all-together"&gt;
  &lt;/a&gt;
  Putting it all together
&lt;/h1&gt;

&lt;p&gt;So overall, working on this project would involve:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make a PR for my changes.&lt;/li&gt;
&lt;li&gt;Confirm auto-merge.&lt;/li&gt;
&lt;li&gt;Repeeat Steps 1 and 2 until I'm ready to release.&lt;/li&gt;
&lt;li&gt;Create a tag on &lt;code&gt;main&lt;/code&gt; pointing to the version bump commit.&lt;/li&gt;
&lt;li&gt;Push the tag to GitHub.&lt;/li&gt;
&lt;li&gt;Wait for the &lt;a href="https://github.com/jidicula/random-standup/actions/workflows/release.yml"&gt;Create Release&lt;/a&gt; run to finish.&lt;/li&gt;
&lt;li&gt;Go to &lt;a href="https://github.com/jidicula/random-standup/releases"&gt;https://github.com/jidicula/random-standup/releases&lt;/a&gt; and modify the Announcements for the just-created release draft.&lt;/li&gt;
&lt;li&gt;Publish the release.&lt;/li&gt;
&lt;li&gt;Wait for the &lt;a href="https://github.com/jidicula/random-standup/actions/workflows/publish.yml"&gt;Publish&lt;/a&gt; run to finish.&lt;/li&gt;
&lt;li&gt;Check &lt;a href="https://pkg.go.dev/github.com/jidicula/random-standup"&gt;pkg.go.dev&lt;/a&gt; for the updated package version.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you have any questions or comments, email me at &lt;a href="mailto:johanan+blog@forcepush.tech"&gt;johanan+blog@forcepush.tech&lt;/a&gt;, find me on Twitter &lt;a href="http://twitter.com/jidiculous"&gt;@jidiculous&lt;/a&gt;, or post a comment below.&lt;/p&gt;

&lt;p&gt;Did you find this post useful? Buy me a beverage or sponsor me &lt;a href="https://github.com/sponsors/jidicula"&gt;here&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>go</category>
      <category>github</category>
      <category>devops</category>
    </item>
    <item>
      <title>10 Storybook Best Practices</title>
      <author>Rafael Rozon</author>
      <pubDate>Sat, 15 May 2021 17:55:25 +0000</pubDate>
      <link>https://dev.to/rafaelrozon/10-storybook-best-practices-5a97</link>
      <guid>https://dev.to/rafaelrozon/10-storybook-best-practices-5a97</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hGmG0J4O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2lrouk11aqd8t768cv1j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hGmG0J4O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2lrouk11aqd8t768cv1j.png" alt="Storybook Best Practices Cover Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a post about Storybook and conventions. It is based on my experience using Storybook over several years and from the experiences of other developers. The best practices I define here aren't silver bullets that will fix and improve every project. They're a baseline of ideas and conventions that I think are worth trying. Hopefully, they can help you and your team have a better developer experience and ultimately deliver better software to the world.&lt;br&gt;
I assume you know what Storybook is and that you have some experience with it. The ideas here can be applied to apps of any size and are not particular to any specific framework (e.g. React or Vue), but I wrote them with a large app in mind with a large team and multiple contributors.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#1-one-storybook-file-per-component"&gt;
  &lt;/a&gt;
  1. One Storybook File Per Component
&lt;/h2&gt;

&lt;p&gt;The story file should have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;one Default story&lt;/li&gt;
&lt;li&gt;a Playground story&lt;/li&gt;
&lt;li&gt;and other stories that reflect a specific state or API of the component.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The default story displays the component with only its required props defined. It creates a visual baseline representation for everyone. So, ideally, when people think about a specific component, they will remember what's reproduced by the default story.&lt;br&gt;
The playground story is used to help consumers of the component try different combinations of props and see how the component responds. This can be implemented in Storybook version 5 and below using &lt;a href="https://www.npmjs.com/package/@storybook/addon-knobs"&gt;the knobs add-on&lt;/a&gt;. You provide knobs for all props of the component:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;For the latest version of Storybook (version 6), the playground story can be written using the new &lt;a href="https://storybook.js.org/docs/react/writing-stories/args"&gt;Args feature&lt;/a&gt;. It looks something like this:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Finally, the other stories should reflect a specific state or API of the component. For example, if we have a button component with a type property that accepts the values &lt;code&gt;primary&lt;/code&gt;, &lt;code&gt;secondary&lt;/code&gt;, &lt;code&gt;tertiary&lt;/code&gt;, or &lt;code&gt;error&lt;/code&gt;. Then, we would have four stories: &lt;code&gt;Button/Primary&lt;/code&gt;, &lt;code&gt;Button/Secondary&lt;/code&gt;, &lt;code&gt;Button/Tertiary&lt;/code&gt;, and &lt;code&gt;Button/Error&lt;/code&gt;. There are a few reasons to follow this pattern:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is easier to share a link of a component that precisely defines a state that you want to reference, which is useful when communicating with QA and designers.&lt;/li&gt;
&lt;li&gt;If Storybook is combined with testing tools, like snapshot testing or visual regression testing, each story becomes a unit testing. If one of them fails, you know exactly which one.&lt;/li&gt;
&lt;li&gt;By making the stories explicit, we avoid hiding components states under the knobs.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#2-colocation-a-storybook-file-should-stay-with-its-component"&gt;
  &lt;/a&gt;
  2. Co-location: A Storybook File Should Stay With Its Component
&lt;/h2&gt;

&lt;p&gt;Code that changes for the same reasons should be kept together. In that sense, the Storybook file for a given component will very likely change when that component changes ‚Äî so keep them together. Also, if the component folder is moved to another place in the project or even to another project, it will be easier to move the Storybook file along.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-naming-convention"&gt;
  &lt;/a&gt;
  3. Naming Convention
&lt;/h2&gt;

&lt;p&gt;Name the storybook files &lt;code&gt;[ComponentName].stories.[js|jsx|tsx]&lt;/code&gt;. Honestly, the important thing is that you and your team agree on a naming convention, and everyone follows it. I like to include the name of the component in the file name because it makes it easier to find in the code editor. Otherwise, I could end up with five files called &lt;code&gt;index.stories.tsx,&lt;/code&gt; and then I'd have to open each one or perform a search to find the right one.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-new-components-must-have-a-storybook"&gt;
  &lt;/a&gt;
  4. New Components Must Have a Storybook
&lt;/h2&gt;

&lt;p&gt;It helps to create a library of components and gain the benefits of having one. If your team has a PR checklist, Storybook could be one of the items to check before merging the code into master.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-prefer-the-component-story-format"&gt;
  &lt;/a&gt;
  5. Prefer the Component Story Format
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://storybook.js.org/docs/react/api/csf"&gt;Component Story Format or CSF&lt;/a&gt; is the recommended way to write stories according to the Storybook maintainers. It's basically a set of conventions to be used in the story files. Instead of using the &lt;code&gt;storiesOf&lt;/code&gt; API, you write regular JavaScript functions and export them. Storybook converts the named and the default exports to stories. One big advantage of the CSF format is that the code looks cleaner and is easier to read. Instead of the Storybook boilerplate, you can focus on what your code is actually doing.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#6-architect-stories-as-you-architect-your-codebase"&gt;
  &lt;/a&gt;
  6. Architect Stories as You Architect Your Codebase
&lt;/h2&gt;

&lt;p&gt;When you use Storybook, you should have a clear idea of how your app is organized. I got this from &lt;a href="https://dev.to/loicgoyet"&gt;Lo√Øc Goyet&lt;/a&gt; in the awesome post &lt;a href="https://dev.to/loicgoyet/how-i-manage-to-make-my-storybook-project-the-most-efficient-possible-2d8o"&gt;How I manage to make my Storybook project the most efficient possible&lt;/a&gt;. His idea is to make the stories menu reflect the location of the stories in the app:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7jLINmzO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ja8tei1a4qb168dr1uqv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7jLINmzO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ja8tei1a4qb168dr1uqv.png" alt="Storybook Menu Structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you see how the menu in Storybook above aligns with the app folder structure?&lt;br&gt;
This structure will help you to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Find stories more easily&lt;/li&gt;
&lt;li&gt;Understand how the code is organized.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If co-location is used in your app, keeping related items together, the folder structure gives you an idea of how the app is structured. But do not confuse folder structure with architecture. They're not the same thing.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#7-consistent-environment"&gt;
  &lt;/a&gt;
  7. Consistent Environment
&lt;/h2&gt;

&lt;p&gt;When we develop in Storybook, we want isolation, but it is very likely that we still use some resources shared with the app, such as images, data, CSS, icons, translations, etc. And, this is good because we want to make sure that our components will behave in the same way when used in the context of the app. For example, if a localization library is used in the app, it can probably be reused with the same configuration inside Storybook. Another example: If third-party CSS is used, it should be included inside Storybook because we want to determine if that CSS will conflict with our CSS. The objective is to avoid surprises when using the component in the app.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#8-keep-data-under-control"&gt;
  &lt;/a&gt;
  8. Keep Data Under Control
&lt;/h2&gt;

&lt;p&gt;If you notice that you need the same data in many different stories, it may be good to create a mocks folder and add JavaScript files that export factory functions that will create reusable data. Let us suppose that we have an avatar component that displays the user image, name, anchor, and this component is used in multiple places. We could have a file named mocks/user.js which has something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;overrides&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Some User&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;anchor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@someuser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://webapp/static/images/someuser.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defaultValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;overrides&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why the factory function? To make sure we are getting a new object every time. If we imported an object, we could accidentally modify it and cause wrong results. I have seen it. Also, here I'm using &lt;code&gt;Object.assign&lt;/code&gt; as an example, but you may need something more sophisticated that handles the merging of arrays and objects. &lt;a href="https://lodash.com/docs/4.17.15#mergeWith"&gt;Lodash&lt;/a&gt; and &lt;a href="https://ramdajs.com/docs/#merge"&gt;RamdaJS&lt;/a&gt; have functions for that ‚Äî RamdaJS is awesome!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#9-create-your-own-decorators-and-addons-when-it-makes-sense"&gt;
  &lt;/a&gt;
  9. Create Your Own Decorators and Add-ons ( When it Makes Sense)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://storybook.js.org/docs/react/writing-stories/decorators"&gt;Decorators&lt;/a&gt; are basically functions that wrap another piece of code and give it extra functionality. In Storybook decorators can be applied to individual stories (called Story decorators), all stories of a component (called Component Decorators), or to all stories in the project (called Global Decorators). The baseline is this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myDecorator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Story&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is common in React apps to have providers wrapping the app or portions of the app. If you need, for example, to wrap your components in a provider, a decorator is the way to go. Or, if you want to add a margin to some component so that it does not touch the borders of the canvas, you could have a decorator like this one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;withMargin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3em&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Story&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://storybook.js.org/docs/react/api/addons"&gt;Add-ons&lt;/a&gt; are extensions to Storybook that can help you to configure and extend Storybook in many fancy ways. It's more involving to develop add-ons, but it's not hard, and you have more power and flexibility.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#10-take-storybook-use-and-maintenance-seriously"&gt;
  &lt;/a&gt;
  10. Take Storybook Use and Maintenance Seriously
&lt;/h2&gt;

&lt;p&gt;Storybook can be of huge help in developing a UI because it encourages you to focus on the interface of your components, which will help you have more generic and lean components. Generic and lean components are flexible and can be used in different contexts. In the end, you may need fewer components if you have some flexible components. Fewer components mean less code; less code means less chance of bugs; less chance of bugs means happier users and happier developers. So, maintain and keep Storybook running and well oiled, don't let broken stories stick around, and refactor and rearrange things when they get messy.&lt;br&gt;
In my experience, things only are improved when people take ownership. If there's no group of people responsible for taking care of Storybook, it won't be easy to keep it evolving and benefit from using it. Everyone is responsible for contributing and following the team's conventions, but it may be helpful to assign someone, or a group of people, as a Storybook maintainer. The Storybook maintainer can hold others accountable for following the conventions ‚Äî they can improve the use of Storybook in your team.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I collected some ideas after using Storybook for five years and from the experience of other developers smarter than me. I truly hope you learned something new and are excited to try Storybook or make it better for you and your team. If you have any questions or suggestions to make this article better, let me know in the comments below.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://storybook.js.org/"&gt;https://storybook.js.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.learnstorybook.com/"&gt;https://www.learnstorybook.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/loicgoyet/how-i-manage-to-make-my-storybook-project-the-most-efficient-possible-2d8o"&gt;https://dev.to/loicgoyet/how-i-manage-to-make-my-storybook-project-the-most-efficient-possible-2d8o&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.hichroma.com/the-delightful-storybook-workflow-b322b76fd07?gi=48bcfdd9231b"&gt;https://blog.hichroma.com/the-delightful-storybook-workflow-b322b76fd07?gi=48bcfdd9231b&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.learnstorybook.com/design-systems-for-developers/react/en/distribute/"&gt;https://www.learnstorybook.com/design-systems-for-developers/react/en/distribute/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.richsoni.com/posts/2019-01-29-storybook-architecture-audit/"&gt;https://www.richsoni.com/posts/2019-01-29-storybook-architecture-audit/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lauthieb/awesome-storybook"&gt;https://github.com/lauthieb/awesome-storybook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>storybook</category>
      <category>javascript</category>
      <category>react</category>
      <category>programming</category>
    </item>
    <item>
      <title>Introduction to the Jamstack - the New Frontier in Web Development</title>
      <author>darrendube</author>
      <pubDate>Sat, 15 May 2021 17:33:49 +0000</pubDate>
      <link>https://dev.to/darrendube/introduction-to-the-jamstack-the-new-frontier-in-web-development-e07</link>
      <guid>https://dev.to/darrendube/introduction-to-the-jamstack-the-new-frontier-in-web-development-e07</guid>
      <description>&lt;p&gt;As a Web Developer, you've probably heard of the Jamstack. It's the buzzword in web development. But what exactly is it?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jamstack is an abbreviation that stands for JavaScript, APIs, and Mark-up. It is an architecture that promises, among other things, faster, cheaper, and more secure sites. And, increasingly, more and more websites are switching over.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To be clear, JAMstack is not a specific technology, nor is it driven or controlled by any single entity. It's a community-led movement, an architecture with a collection of standards and best practices that gives faster and more secure websites. &lt;/p&gt;

&lt;p&gt;But to understand why it's so revolutionary, we have to understand what stacks are, what technologies traditional websites use, and why they are becoming more and more obsolete. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://darrendube.com/blog/web-development/jamstack#ddfl"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DcaVQ6dQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t6pah5cy2ff857d1g7j7.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#legacy-websites"&gt;
  &lt;/a&gt;
  Legacy websites
&lt;/h2&gt;

&lt;p&gt;There are many Web Development stacks out there: &lt;a href="https://www.liquidweb.com/kb/what-is-a-lamp-stack/"&gt;LAMPstack&lt;/a&gt;, &lt;a href="https://www.mongodb.com/mean-stack"&gt;MEANstack&lt;/a&gt;, &lt;a href="https://www.hostinger.com/tutorials/what-is-wamp"&gt;WAMPstack&lt;/a&gt;, among others. These refer to the technologies used such as Linux, MySQL, and PHP. While they have their different technologies and applications, they all pretty much work in the same way: legacy websites are programs that run on a server, and query data from a database, building each page every time a user loads a page. WordPress websites follow this architecture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--auC3B902--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/s5rRv51/legacy-websites-diagram.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--auC3B902--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/s5rRv51/legacy-websites-diagram.png" alt="Legacy-architecture-diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This approach has its advantages - they tend to be &lt;b&gt;easier&lt;/b&gt; for the average person to run, they can be &lt;b&gt;highly dynamic&lt;/b&gt; because the page is only built at load time, and they are &lt;b&gt;less reliant&lt;/b&gt; on third-party providers for dynamic functionality - since they run on a literal server!&lt;/p&gt;

&lt;p&gt;However, legacy websites tend to be slow (especially for those on unstable internet connections), harder and more expensive to scale, and less secure. So, in 2015, Mathias Biilmann, the CEO of Netlify, coined the term &lt;em&gt;JAMstack&lt;/em&gt;, which was later renamed &lt;em&gt;Jamstack&lt;/em&gt;, referring to a new Web architecture that he and Chris Bach, a co-founder, were working on at Netlify, and that other Web developers were starting to explore. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-jamstack"&gt;
  &lt;/a&gt;
  The Jamstack
&lt;/h2&gt;

&lt;p&gt;Instead of a server processing a request, a pre-built HTML page is served from a Content Delivery Network (CDN) and delivered to the user. No server involved. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vGUDwRS4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/YZT5vw2/jamstack-websites-diagram.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vGUDwRS4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/YZT5vw2/jamstack-websites-diagram.png" alt="Jamstack-architecture-diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, just because no server is involved in the serving of webpages doesn't mean no servers are involved in the process at all. To understand why this is, we have to delve into the three component parts of Jamstack:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#j-is-for-javascript"&gt;
  &lt;/a&gt;
  J is for &lt;strong&gt;JavaScript&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Introduced to the world in 1995 by Netscape, JavaScript has become synonymous with the web. It provides a way to code logic into websites, allowing them to respond to users actions (for example: checkboxes, form submissions, calls to action) - every time a websites does something more than just display static information, you have JavaScript to thank for it!&lt;/p&gt;

&lt;p&gt;Jamstack uses client-side JavaScript, with libraries like React and Vue, to design and make web apps that feel and act like mobile apps. &lt;/p&gt;

&lt;p&gt;You might already be familiar with popular JavaScript UI libraries like &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt;, &lt;a href="https://vuejs.org"&gt;Vue&lt;/a&gt;, and &lt;a href="https://angular.io"&gt;Angular&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-is-for-apis"&gt;
  &lt;/a&gt;
  A is for &lt;strong&gt;APIs&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Application Programming Interfaces (APIs)&lt;/strong&gt; are what allow two or more programs to talk to each other. They are how things like cryptocurrency trading bots can communicate with cryptocurrency exchanges without a human in the mix.&lt;/p&gt;

&lt;p&gt;Just because we've decoupled the website's frontend from its backend doesn't mean we can't make use of any server functionality. Third-party services can provide dynamic functionality like database access, payments, and authentication. Jamstack takes the &lt;b&gt;microservices&lt;/b&gt; approach, which is different from the monolithic approach (I go through this in more detail below).&lt;/p&gt;

&lt;p&gt;Headless CMSs are another example of APIs. Normal &lt;b&gt;&lt;a href="https://kinsta.com/knowledgebase/content-management-system/"&gt;Content Management Services&lt;/a&gt; (CMSs)&lt;/b&gt; (like WordPress) deal with both the website content and the frontend. Jamstack decouples this, meaning Headless CMSs deal only with the content, leaving the frontend to &lt;a href="http://darrendube.com/blog/web-development/static-site-generators-wordpress-alternative"&gt;Static Site Generators&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The decoupling of these services from the actual websites gives greater portability, increased speed, and a lower risk of attack.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#m-is-for-markup"&gt;
  &lt;/a&gt;
  M is for &lt;strong&gt;Mark-up&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The M part of Jamstack is probably its most important part. It stands for &lt;strong&gt;Mark-up&lt;/strong&gt;. This means that Static HTML files are served to the user. &lt;/p&gt;

&lt;p&gt;But this not only includes how the website is served to the user - almost all websites have JavaScript, APIs, and Mark-up in some form - M also includes how the pages are made in the first place. There are generally two approaches to generating Static HTML files:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Hand typing:&lt;/strong&gt; You can type out the HTML files yourself. This is more suited to small, simple websites.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Static Site Generators:&lt;/strong&gt; This is the most popular approach for Jamstack websites. An SSG generates Static HTML files from raw data (usually written in a lightweight mark-up language like Markdown) and templates. I go into this in more detail &lt;a href="http://darrendube.com/blog/web-development/static-site-generators-wordpress-alternative"&gt;in another article&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Because of the functionality and advantages that dynamic websites have over conventional static ones, static websites often get a bad rap for being too basic. While Jamstack sites are static in the sense that Static HTML files are served to the end user, &lt;strong&gt;APIs&lt;/strong&gt; and &lt;strong&gt;Mark-up&lt;/strong&gt; also make Jamstack websites comparably dynamic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cdns"&gt;
  &lt;/a&gt;
  CDNs
&lt;/h2&gt;

&lt;p&gt;Unlike traditional web servers, which are usually in one place and serve dynamic, server-generated pages, &lt;strong&gt;Content Delivery Networks (CDNs)&lt;/strong&gt; are geographically distributed, storing website data on several servers around the world so requests can be serviced from the server geographically closest to the user. CDNs are still servers, but because they are distributed, you can't really pinpoint the exact physical server your website is hosted on.&lt;/p&gt;

&lt;p&gt;CDNs themselves can't generate web pages, but since Jamstack web pages are pre-built, they can be served from CDNs. &lt;/p&gt;

&lt;p&gt;Because CDNs host static sites, they don't have bandwidth and processing limitations, so this lowers the risk of your website going down. It also makes CDNs cheaper - in fact, most provide free hosting!&lt;/p&gt;

&lt;p&gt;Examples of serverless hosting providers are &lt;a href="https://netlify.com"&gt;Netlify&lt;/a&gt; and &lt;a href="https://vercel.com"&gt;Vercel&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-microservices-vs-monolithic-architecture"&gt;
  &lt;/a&gt;
  The Microservices vs. Monolithic Architecture
&lt;/h2&gt;

&lt;p&gt;Traditional websites are, simply put, built as a unit. They have all their functionality - comments, contact forms, authentication - built in. This functionality can still be in the form of plugins (like in the case of WordPress) but they are still a part of the overall website structure, and not external. This model is called a &lt;strong&gt;monolithic architecture&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The Jamstack takes the &lt;strong&gt;microservices&lt;/strong&gt; approach where parts of a website are broken up and outsourced to third parties through APIs. Examples can be using a payments provider like Square or Paypal to process payments, or using Auth0 for authentication.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GNk0X5ua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/BGQD2W5/monolithic-vs-microservices.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GNk0X5ua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/BGQD2W5/monolithic-vs-microservices.png" alt="microservices-vs-monolithic-diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A useful analogy created by &lt;a href="https://thenewstack.io/microservices-vs-monoliths-an-operational-comparison/"&gt;The New Stack&lt;/a&gt; is that of an air ticket booking website. The process of booking a ticket contains many sub-steps which, in this scenario, are &lt;em&gt;reserving the ticket&lt;/em&gt;, &lt;em&gt;billing the customer&lt;/em&gt;, and sending a &lt;em&gt;confirmation email&lt;/em&gt; that the ticket is booked. In a monolithic architecture, all three processes would be built into a single application. In a microservices architecture, however, each stage works independently of the other and can be outsourced to third parties. The core function of the website might be to book the ticket, but billing could be outsourced to a payments company like Stripe, and emailing could be outsourced to an email company like Mailchimp, all through APIs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Jamstack websites are usually called Static Sites because of how they are served to the user, but this sometimes gives the misconception that they can't have dynamic functionality when in fact they &lt;strong&gt;can&lt;/strong&gt; through the use of APIs and Headless CMSs.&lt;/p&gt;

&lt;p&gt;The Jamstack is a movement that's spreading across the web development world. Many established Web Developers &lt;a href="https://www.prnewswire.com/news-releases/modern-websites-are-built-on-the-jamstack-architecture-due-to-performance-reliability-and-speed-of-developer-workflows-according-to-industry-survey-by-netlify-301065730.html"&gt;are switching over&lt;/a&gt;. Maybe it's time you switched over too, don't you think?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://darrendube.com/blog/web-development/static-site-generators-wordpress-alternative"&gt;Static Site Generators - A WordPress alternative&lt;/a&gt; &lt;br&gt;&lt;br&gt;
&lt;a href="https://jamstack.wtf"&gt;WTF is Jamstack?&lt;/a&gt; &lt;br&gt;&lt;br&gt;
&lt;a href="https://netlify.com/blog"&gt;Netlify's Blog&lt;/a&gt; &lt;br&gt;&lt;br&gt;
&lt;a href="#ddfl"&gt;INFOGRAPHIC - The Jamstack, in a nutshell&lt;/a&gt;&lt;br&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>react</category>
    </item>
  </channel>
</rss>
