<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Easy and quick infinite scroll with Next.js and react-query</title>
      <author>Elisabeth Leonhardt</author>
      <pubDate>Wed, 12 Jan 2022 22:46:05 +0000</pubDate>
      <link>https://dev.to/elisabethleonhardt/easy-and-quick-infinite-scroll-with-nextjs-and-react-query-36lh</link>
      <guid>https://dev.to/elisabethleonhardt/easy-and-quick-infinite-scroll-with-nextjs-and-react-query-36lh</guid>
      <description>&lt;p&gt;We have all been at a point in our lives where we just needed a quick and dirty guide on how to implement infinite scroll so we could get this prototype ready or this ticket closed. I have been there, and on that faithful day I did only seem to find very long articles and videos I didn't have time for. Here is a quick way - enjoy!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-get-the-project-set-up"&gt;
  &lt;/a&gt;
  1. get the project set up
&lt;/h2&gt;

&lt;p&gt;You have two options here: clone the &lt;a href="https://github.com/elisabeth-leonhardt/react-query-pagination"&gt;project repository&lt;/a&gt; or start with a blank Next.js project. If you go with a fresh project, install react-query and configure a QueryClientProvider in _app.js like shown in the &lt;a href="https://react-query.tanstack.com/quick-start"&gt;documentation&lt;/a&gt;. React-query looks scary at first but believe me, it will save you tons of time later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-fetch-the-first-20-items-and-display-them-on-the-page"&gt;
  &lt;/a&gt;
  2. fetch the first 20 items and display them on the page
&lt;/h2&gt;

&lt;p&gt;Create a new page in your blank project or go inside the infiniteCSR.js file in the repo and read along. First, we want only some data on the page, then we are going to make it infinite. Let's get started by getting the first 20 characters from the Rick and Morty API with the useInfiniteQuery hook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useInfiniteQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetchNextPage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hasNextPage&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useInfiniteQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;infiniteCharacters&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;pageParam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;`https://rickandmortyapi.com/api/character/?page=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;pageParam&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
      &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;useInfiniteQuery takes a string that identifies the query and a function to fetch the results from the API of your choice. You can absolutely declare the function somewhere else and use axios for fetching, this is just an example. Be careful though to pass the pageParam in, we will need it!&lt;/p&gt;

&lt;p&gt;When you print out the data returned by the useInfiniteQuery hook, you should see 2 arrays, one called pages and the other one pageParams. The data react-query fetches for us will be in the pages array, so we have to map over it to display our data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Rick&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;Morty&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="nx"&gt;Query&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;Infinite&lt;/span&gt; &lt;span class="nx"&gt;Scroll&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt; &lt;span class="nx"&gt;Side&lt;/span&gt;
        &lt;span class="nx"&gt;Rendered&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;grid-container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;
                      &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                      &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                      &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                      &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lazy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                      &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Lives&lt;/span&gt; &lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Species&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;species&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/i&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/article&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="p"&gt;))}&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;))}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and voilá - we already can see a few Ricks! Like the Adjudicator Rick from the Citadel of Ricks... But before you start googling which chapter this Rick was part of, let's continue with step 3.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dzoA0B6c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2vu3zwqrlnewqnkatn3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dzoA0B6c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2vu3zwqrlnewqnkatn3.png" alt="The character grid with 20 characters" width="880" height="563"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-setup-the-infinite-component-to-have-potentially-infinite-cards"&gt;
  &lt;/a&gt;
  3. setup the infinite component to have potentially infinite cards
&lt;/h2&gt;

&lt;p&gt;I promised this would be easy! So let's &lt;code&gt;npm install react-infinite-scroll-component&lt;/code&gt; which is the one infinite scroll library that has never let me down. We are going to import it and then we can wrap our grid-container in the InfiniteScroll component like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;InfiniteScroll&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-infinite-scroll-component&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;InfiniteScroll&lt;/span&gt;
          &lt;span class="nx"&gt;dataLength&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fetching more data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="nx"&gt;hasMore&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h4&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;        &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;grid-container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="p"&gt;...&lt;/span&gt;
            &lt;span class="p"&gt;))}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/InfiniteScroll&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's take a look a this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;first, I added some conditional rendering so we only display the infinite scroll if we really have data to show&lt;/li&gt;
&lt;li&gt;The InfiniteScroll component takes some props: the first one is the length of the data we are displaying&lt;/li&gt;
&lt;li&gt;the next prop takes in a function to be called if to load more data when the hasMore prop is true.&lt;/li&gt;
&lt;li&gt;the loader is optional and should obviously have nicer styles, but I am going to focus on the infinite loading functionality for now&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By now, you should be able to scroll to the bottom of the page and see the message "fetching more data" in the console. This means, our component detects that there is more data to be fetched and we just have to properly set up the next function to make the infinite-scroll work!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-actually-fetching-more-data"&gt;
  &lt;/a&gt;
  4. Actually fetching more data
&lt;/h2&gt;

&lt;p&gt;The useInfiniteQuery hook does accept a third optional parameter which is an object. Inside that object, we can write the getNextPageParam function, which takes in the last fetched page and the pages array we already know. Inside this function, you will have to evaluate whether there is another page. The return value will be passed in as the pageParam into your fetch function so you will have to compute that and return it.&lt;/p&gt;

&lt;p&gt;In my case, working with the Rick and Morty API, I am taking advantage of the &lt;code&gt;lastPage.info.next&lt;/code&gt; property to know whether there will be another page and what I want as the pageParam for the next API call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetchNextPage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hasNextPage&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useInfiniteQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;infiniteCharacters&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;pageParam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;`https://rickandmortyapi.com/api/character/?page=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;pageParam&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
      &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;getNextPageParam&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lastPage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lastPage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that react-query already knows how to evaluate whether there will be a next page and what the pageParam will be, we can hook this functionality up with our InfiniteScroll component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;InfiniteScroll&lt;/span&gt;
          &lt;span class="nx"&gt;dataLength&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fetchNextPage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;hasMore&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hasNextPage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h4&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;        &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and there you go! Enjoy an infinity of Rick and Morty Characters and maybe an infinitely strong urge to rewatch some chapters....&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-wait-but-how"&gt;
  &lt;/a&gt;
  5. Wait - but how...?
&lt;/h2&gt;

&lt;p&gt;I have to admit that it took me some time to understand what react-query does here, so let's break it down:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;as soon as the page renders, the first 20 characters get fetched. The result is stored inside pages[0].&lt;/li&gt;
&lt;li&gt;After the first fetch, the function getNextPageParam is run. It will realize that there is a subsequent page and return &lt;code&gt;pages.length + 1&lt;/code&gt;, so 2. Since 2 is a truthy value, &lt;code&gt;hasNextPage&lt;/code&gt; will be set to true.&lt;/li&gt;
&lt;li&gt;Now you scroll until you hit the bottom of the InfiniteScroll Container. At this point, hasNextPage is true, so the InfiniteScroll component calls the fetchNextPage function.&lt;/li&gt;
&lt;li&gt;The next 20 characters are being fetched and stored inside pages[1]. Now, 40 characters will be shown on the page.&lt;/li&gt;
&lt;li&gt;Besides, the getNextPageParam is run again. It will confirm that there is a next Page and return 3 as the next pageParam.&lt;/li&gt;
&lt;li&gt;now you scroll....
that's all there is to it. While you are scrolling, the pages array fills up, and react query updates the hasNextPage value and the pageParam for you.&lt;/li&gt;
&lt;li&gt;at one point, you will reach the last page, which is page number 42. As soon as you reach it, the getNextPageParam function is run, but nothing is returned. Therefore, &lt;code&gt;hasNextPage&lt;/code&gt; is set to false and the API is not called again. You have reached the end of all 826 characters: the last one is the butter robot.&lt;/li&gt;
&lt;li&gt;At this point you can add a component that tells your user that this is the end of your infinite scroll, just to make sure he knows.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pXkGY_N4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3rs85j37keh9b03cn2u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pXkGY_N4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3rs85j37keh9b03cn2u.png" alt="The end of your infinite scroll" width="880" height="548"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you need SSR with that, make sure to check out the &lt;a href="https://github.com/elisabeth-leonhardt/react-query-pagination"&gt;repo&lt;/a&gt; and article on &lt;a href="https://dev.to/elisabethleonhardt/how-to-combine-ssr-and-pagination-with-react-query-4ihp"&gt;pagination with SSR&lt;/a&gt;: You can use the same principles with infinite scroll.&lt;/p&gt;

&lt;p&gt;I hope this saved you some time! If so (or if not) let me know in the comments! Have a nice rest of your week 😆&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>How to build a Live Dashboard with Python</title>
      <author>Olumide</author>
      <pubDate>Wed, 12 Jan 2022 22:04:56 +0000</pubDate>
      <link>https://dev.to/shittu_olumide_/how-to-use-build-a-live-dashboard-with-python-5ed0</link>
      <guid>https://dev.to/shittu_olumide_/how-to-use-build-a-live-dashboard-with-python-5ed0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In the past, if we needed to develop a web platform that kept track of user behaviors and displayed changes accordingly, such as on the admin dashboard, we would have to reload the dashboard on a regular basis – generally instinctively — to check for new updates.&lt;/p&gt;

&lt;p&gt;Nowadays, however, we can create a completely interactive online application that receives real-time changes. We'll create an interactive website with a dashboard that shows real-time updates on user actions in this lesson.&lt;br&gt;
For the purposes of this article, we'll use the Flask Python framework to create the backend server. To send HTTP queries and connect with the backend API, we'll utilize JavaScript on the frontend.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;A basic understanding of Python, Flask, and JavaScript (ES6 syntax) is necessary to follow along with this lesson. You'll also need to have the following software installed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python (&amp;gt;= v3.x).&lt;/li&gt;
&lt;li&gt;virtualenv.&lt;/li&gt;
&lt;li&gt;Flask.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Virtualenv is excellent for building isolated Python environments, allowing us to install dependencies without polluting our global packages directory.&lt;/p&gt;

&lt;p&gt;install &lt;code&gt;virtualenv&lt;/code&gt; with this command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ pip install virtualenv&lt;/code&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#configuring-the-apps-environment"&gt;
  &lt;/a&gt;
  Configuring the app's environment
&lt;/h3&gt;

&lt;p&gt;Let's start by making a project folder and activating a virtual environment inside of it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir pusher-python-realtime-dashboard
$ cd pusher-python-realtime-dashboard
$ virtualenv .venv
$ source .venv/bin/activate # Linux based systems
$ \path\to\env\Scripts\activate # Windows users
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we've built up the virtual environment, we can run the following command to install Flask:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ pip install flask&lt;/code&gt;&lt;br&gt;
We'll require the Pusher library for real-time updates, therefore we'll need to install that.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#setup-pusher"&gt;
  &lt;/a&gt;
  Setup Pusher
&lt;/h3&gt;

&lt;p&gt;Obtaining a Pusher Channels application will be the first step. For our real-time features to operate, we'll need the application credentials.&lt;/p&gt;

&lt;p&gt;Create an account on the Pusher website. You should create a new application after creating an account. You should be given your application credentials after completing the application creation procedure; we'll need these later in the tutorial.&lt;/p&gt;

&lt;p&gt;To transmit events to Pusher, we'll also need to install the Pusher Python Library. Install it with the following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ pip install pusher&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#structure-of-files-and-folders"&gt;
  &lt;/a&gt;
  Structure of files and folders
&lt;/h3&gt;

&lt;p&gt;Because this is a basic program, we don't need to generate a lot of files and directories. The following is the file/folder structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; ├── pusher-python-realtime-dashboard
           ├── app.py
           ├── static
           └── templates
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;static&lt;/code&gt; folder will hold the static files that must be utilized according to Flask specifications. The HTML templates will be stored in the &lt;code&gt;templates&lt;/code&gt; folder. Our application's main entry point is &lt;code&gt;app.py&lt;/code&gt;, which contains our server-side code.&lt;/p&gt;

&lt;p&gt;We'll start by creating the &lt;code&gt;app.py&lt;/code&gt; file, followed by the &lt;code&gt;static&lt;/code&gt; and &lt;code&gt;templates&lt;/code&gt; directories.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-build-the-backend"&gt;
  &lt;/a&gt;
  Let's build the Backend
&lt;/h3&gt;

&lt;p&gt;Let's open the &lt;code&gt;app.py&lt;/code&gt; file and begin developing the backend code that will handle the HTTP requests that come in. We'll register five routes and their associated handler functions in this file. The &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;/dashboard&lt;/code&gt; routes, respectively, will display the website and admin dashboard pages. These pages will be created as soon as possible.&lt;/p&gt;

&lt;p&gt;Three additional routes will be defined: &lt;code&gt;/orders&lt;/code&gt;, &lt;code&gt;/message&lt;/code&gt;, and &lt;code&gt;/customer&lt;/code&gt;. These are going to be API endpoints. These endpoints will be in charge of processing &lt;code&gt;POST&lt;/code&gt; requests coming in from our frontend and receiving user data.&lt;/p&gt;

&lt;p&gt;We'll also start a new Pusher instance and utilize it to broadcast data over three channels, one for each of the three user actions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make a purchase.&lt;/li&gt;
&lt;li&gt;Send an email&lt;/li&gt;
&lt;li&gt;Create a new customer account.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Paste the following code into the &lt;code&gt;app.py&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from flask import Flask, render_template, request
    from pusher import Pusher

    app = Flask(__name__)

    # configure pusher object
    pusher = Pusher(
    app_id='PUSHER_APP_ID',
    key='PUSHER_APP_KEY',
    secret='PUSHER_APP_SECRET',
    cluster='PUSHER_APP_CLUSTER',
    ssl=True)

    @app.route('/')
    def index():
        return render_template('index.html')

    @app.route('/dashboard')
    def dashboard():
        return render_template('dashboard.html')

    @app.route('/orders', methods=['POST'])
    def order():
        data = request.form
        pusher.trigger(u'order', u'place', {
            u'units': data['units']
        })
        return "units logged"

    @app.route('/message', methods=['POST'])
    def message():
        data = request.form
        pusher.trigger(u'message', u'send', {
            u'name': data['name'],
            u'message': data['message']
        })
        return "message sent"

    @app.route('/customer', methods=['POST'])
    def customer():
        data = request.form
        pusher.trigger(u'customer', u'add', {
            u'name': data['name'],
            u'position': data['position'],
            u'office': data['office'],
            u'age': data['age'],
            u'salary': data['salary'],
        })
        return "customer added"

    if __name__ == '__main__':
        app.run(debug=True)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We imported the required modules and objects, then initialized a Flask app, in the code above. After that, we registered the routes and their associated handler functions, as well as initialized and configured Pusher.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Replace the PUSHER_APP_* keys with the values on your Pusher dashboard.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We may use the &lt;code&gt;pusher&lt;/code&gt; object to trigger events on any of the channels we specify.&lt;br&gt;
We initiate events on three channels in the handler routines of the &lt;code&gt;/orders&lt;/code&gt;, &lt;code&gt;/message&lt;/code&gt;, and &lt;code&gt;/customer&lt;/code&gt; routes. The following is the syntax for the trigger method:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pusher.trigger("a_channel", "an_event", {key: "data to pass with event"})&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;More information on setting and using Pusher in Python may be found in the Pusher  &lt;a href="https://github.com/pusher/pusher-http-python"&gt;Python library documentation.&lt;/a&gt; &lt;br&gt;
The &lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;dashboard.html&lt;/code&gt; templates will be rendered by the &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;/dashboard&lt;/code&gt; routes, therefore we'll need to build these files and write the code to establish the frontend layout. The app view will be created next, and the frontend will be used to interface with the Python backend.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#app-view-setup"&gt;
  &lt;/a&gt;
  App View Setup
&lt;/h3&gt;

&lt;p&gt;In the &lt;code&gt;templates&lt;/code&gt; directory, we'll need to make two files. The view for our code will be stored in these files, which will be titled &lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;dashboard.html&lt;/code&gt;. The &lt;code&gt;index.html&lt;/code&gt; page will be shown as the homepage when we visit our application's  &lt;a href="http://127.0.0.1:5000/"&gt;root&lt;/a&gt;  URL. The dashboard.html file will be rendered on the browser when we visit the &lt;code&gt;[/dashboard](http://127.0.0.1:5000/dashboard)&lt;/code&gt; location.&lt;/p&gt;

&lt;p&gt;You may paste the following code into the &lt;code&gt;./templates/index.html&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
    &amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;Pusher Python Realtime Dashboard&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;form method="post" action="/orders"&amp;gt;
            &amp;lt;h3&amp;gt;Place a new order&amp;lt;/h3&amp;gt;
            &amp;lt;input type="number" name="units" placeholder="units"&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;input type="submit" name="Submit"&amp;gt;
        &amp;lt;/form&amp;gt;
        &amp;lt;form method="post" action="/message"&amp;gt;
            &amp;lt;h3&amp;gt;Send a new message&amp;lt;/h3&amp;gt;
            &amp;lt;input type="text" name="name" placeholder="name here"&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;textarea  name="message" placeholder="message here"&amp;gt;&amp;lt;/textarea&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;input type="submit" name="Submit"&amp;gt;
        &amp;lt;/form&amp;gt;
        &amp;lt;form method="post" action="/customer"&amp;gt;
            &amp;lt;h3&amp;gt;Add new customer&amp;lt;/h3&amp;gt;
            &amp;lt;input type="text" name="name" placeholder="name here"&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;input type="text" name="position" placeholder="position here"&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;input type="text" name="office" placeholder="office here"&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;input type="number" name="age" placeholder="age here"&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;input type="text" name="salary" placeholder="salary here"&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;input type="submit" name="Submit"&amp;gt;
        &amp;lt;/form&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We generated three forms with the &lt;code&gt;POST&lt;/code&gt; method and described their behaviors in the markup above. User data is transferred to the Python backend server that we built in the previous step whenever one of these forms is submitted.&lt;/p&gt;

&lt;p&gt;We'll get some &lt;code&gt;CSS&lt;/code&gt; and JS from &lt;a href="https://startbootstrap.com"&gt;https://startbootstrap.com&lt;/a&gt; before writing the code for &lt;code&gt;dashboard-single.html&lt;/code&gt; and &lt;code&gt;dashboard&lt;/code&gt; files. Click Download after going to the URL. Unzip the file and place the css and js directories in our project's static directory. Let's move on to the frontend of our application now.&lt;/p&gt;

&lt;p&gt;Paste the following into the &lt;code&gt;./templates/dashboard.html&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
    &amp;lt;html lang="en"&amp;gt;
    &amp;lt;head&amp;gt;
      &amp;lt;meta charset="utf-8"&amp;gt;
      &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
      &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"&amp;gt;
      &amp;lt;meta name="description" content=""&amp;gt;
      &amp;lt;meta name="author" content=""&amp;gt;
      &amp;lt;title&amp;gt;SB Admin - Start Bootstrap Template&amp;lt;/title&amp;gt;
      &amp;lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous"&amp;gt;
      &amp;lt;link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" type="text/css"&amp;gt;
      &amp;lt;link href="https://cdn.datatables.net/1.10.16/css/dataTables.bootstrap4.min.css" rel="stylesheet"&amp;gt;
      &amp;lt;link href="{{ url_for('static', filename='css/sb-admin.css') }}" rel="stylesheet"&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body class="fixed-nav sticky-footer bg-dark" id="page-top"&amp;gt;
      &amp;lt;nav class="navbar navbar-expand-lg navbar-dark bg-dark fixed-top" id="mainNav"&amp;gt;
        &amp;lt;a class="navbar-brand" href="index.html"&amp;gt;Start Bootstrap&amp;lt;/a&amp;gt;
        &amp;lt;button class="navbar-toggler navbar-toggler-right" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation"&amp;gt;
          &amp;lt;span class="navbar-toggler-icon"&amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;/button&amp;gt;
        &amp;lt;div class="collapse navbar-collapse" id="navbarResponsive"&amp;gt;
          &amp;lt;ul class="navbar-nav navbar-sidenav" id="exampleAccordion"&amp;gt;
            &amp;lt;li class="nav-item" data-toggle="tooltip" data-placement="right" title="Dashboard"&amp;gt;
              &amp;lt;a class="nav-link" href="/dashboard"&amp;gt;
                &amp;lt;i class="fa fa-fw fa-dashboard"&amp;gt;&amp;lt;/i&amp;gt;
                &amp;lt;span class="nav-link-text"&amp;gt;Dashboard&amp;lt;/span&amp;gt;
              &amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
          &amp;lt;/ul&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/nav&amp;gt;
      &amp;lt;div class="content-wrapper"&amp;gt;
        &amp;lt;div class="container-fluid"&amp;gt;
          &amp;lt;ol class="breadcrumb"&amp;gt;
            &amp;lt;li class="breadcrumb-item"&amp;gt;
              &amp;lt;a href="#"&amp;gt;Dashboard&amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
            &amp;lt;li class="breadcrumb-item active"&amp;gt;My Dashboard&amp;lt;/li&amp;gt;
          &amp;lt;/ol&amp;gt;
          &amp;lt;div class="row"&amp;gt;
            &amp;lt;div class="col-xl-3 col-sm-6 mb-3"&amp;gt;
              &amp;lt;div class="card text-white bg-primary o-hidden h-100"&amp;gt;
                &amp;lt;div class="card-body"&amp;gt;
                  &amp;lt;div class="card-body-icon"&amp;gt;
                    &amp;lt;i class="fa fa-fw fa-comments"&amp;gt;&amp;lt;/i&amp;gt;
                  &amp;lt;/div&amp;gt;
                  &amp;lt;div class="mr-5"&amp;gt;&amp;lt;span id="message-count"&amp;gt;26&amp;lt;/span&amp;gt; New Messages!&amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;a class="card-footer text-white clearfix small z-1" href="#"&amp;gt;
                  &amp;lt;span class="float-left"&amp;gt;View Details&amp;lt;/span&amp;gt;
                  &amp;lt;span class="float-right"&amp;gt;
                    &amp;lt;i class="fa fa-angle-right"&amp;gt;&amp;lt;/i&amp;gt;
                  &amp;lt;/span&amp;gt;
                &amp;lt;/a&amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-xl-3 col-sm-6 mb-3"&amp;gt;
              &amp;lt;div class="card text-white bg-warning o-hidden h-100"&amp;gt;
                &amp;lt;div class="card-body"&amp;gt;
                  &amp;lt;div class="card-body-icon"&amp;gt;
                    &amp;lt;i class="fa fa-fw fa-list"&amp;gt;&amp;lt;/i&amp;gt;
                  &amp;lt;/div&amp;gt;
                  &amp;lt;div class="mr-5"&amp;gt;11 New Tasks!&amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;a class="card-footer text-white clearfix small z-1" href="#"&amp;gt;
                  &amp;lt;span class="float-left"&amp;gt;View Details&amp;lt;/span&amp;gt;
                  &amp;lt;span class="float-right"&amp;gt;
                    &amp;lt;i class="fa fa-angle-right"&amp;gt;&amp;lt;/i&amp;gt;
                  &amp;lt;/span&amp;gt;
                &amp;lt;/a&amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-xl-3 col-sm-6 mb-3"&amp;gt;
              &amp;lt;div class="card text-white bg-success o-hidden h-100"&amp;gt;
                &amp;lt;div class="card-body"&amp;gt;
                  &amp;lt;div class="card-body-icon"&amp;gt;
                    &amp;lt;i class="fa fa-fw fa-shopping-cart"&amp;gt;&amp;lt;/i&amp;gt;
                  &amp;lt;/div&amp;gt;
                  &amp;lt;div class="mr-5"&amp;gt;&amp;lt;span id="order-count"&amp;gt;123&amp;lt;/span&amp;gt; New Orders!&amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;a class="card-footer text-white clearfix small z-1" href="#"&amp;gt;
                  &amp;lt;span class="float-left"&amp;gt;View Details&amp;lt;/span&amp;gt;
                  &amp;lt;span class="float-right"&amp;gt;
                    &amp;lt;i class="fa fa-angle-right"&amp;gt;&amp;lt;/i&amp;gt;
                  &amp;lt;/span&amp;gt;
                &amp;lt;/a&amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-xl-3 col-sm-6 mb-3"&amp;gt;
              &amp;lt;div class="card text-white bg-danger o-hidden h-100"&amp;gt;
                &amp;lt;div class="card-body"&amp;gt;
                  &amp;lt;div class="card-body-icon"&amp;gt;
                    &amp;lt;i class="fa fa-fw fa-support"&amp;gt;&amp;lt;/i&amp;gt;
                  &amp;lt;/div&amp;gt;
                  &amp;lt;div class="mr-5"&amp;gt;13 New Tickets!&amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;a class="card-footer text-white clearfix small z-1" href="#"&amp;gt;
                  &amp;lt;span class="float-left"&amp;gt;View Details&amp;lt;/span&amp;gt;
                  &amp;lt;span class="float-right"&amp;gt;
                    &amp;lt;i class="fa fa-angle-right"&amp;gt;&amp;lt;/i&amp;gt;
                  &amp;lt;/span&amp;gt;
                &amp;lt;/a&amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;div class="row"&amp;gt;
            &amp;lt;div class="col-lg-8"&amp;gt;
              &amp;lt;div class="card mb-3"&amp;gt;
                &amp;lt;div class="card-header"&amp;gt;
                  &amp;lt;i class="fa fa-bar-chart"&amp;gt;&amp;lt;/i&amp;gt; Revenue Chart&amp;lt;/div&amp;gt;
                &amp;lt;div class="card-body"&amp;gt;
                  &amp;lt;div class="row"&amp;gt;
                    &amp;lt;div class="col-sm-8 my-auto"&amp;gt;
                      &amp;lt;canvas id="myBarChart" width="100" height="50"&amp;gt;&amp;lt;/canvas&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div class="col-sm-4 text-center my-auto"&amp;gt;
                      &amp;lt;div class="h4 mb-0 text-primary"&amp;gt;$34,693&amp;lt;/div&amp;gt;
                      &amp;lt;div class="small text-muted"&amp;gt;YTD Revenue&amp;lt;/div&amp;gt;
                      &amp;lt;hr&amp;gt;
                      &amp;lt;div class="h4 mb-0 text-warning"&amp;gt;$18,474&amp;lt;/div&amp;gt;
                      &amp;lt;div class="small text-muted"&amp;gt;YTD Expenses&amp;lt;/div&amp;gt;
                      &amp;lt;hr&amp;gt;
                      &amp;lt;div class="h4 mb-0 text-success"&amp;gt;$16,219&amp;lt;/div&amp;gt;
                      &amp;lt;div class="small text-muted"&amp;gt;YTD Margin&amp;lt;/div&amp;gt;
                    &amp;lt;/div&amp;gt;
                  &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div class="card-footer small text-muted"&amp;gt;Updated yesterday at 11:59 PM&amp;lt;/div&amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="col-lg-4"&amp;gt;
              &amp;lt;!-- Example Notifications Card--&amp;gt;
              &amp;lt;div class="card mb-3"&amp;gt;
                &amp;lt;div class="card-header"&amp;gt;
                  &amp;lt;i class="fa fa-bell-o"&amp;gt;&amp;lt;/i&amp;gt; Message Feed&amp;lt;/div&amp;gt;
                &amp;lt;div class="list-group list-group-flush small"&amp;gt;
                  &amp;lt;div id="message-box"&amp;gt;
                    &amp;lt;a class="list-group-item list-group-item-action" href="#"&amp;gt;
                      &amp;lt;div class="media"&amp;gt;
                        &amp;lt;img class="d-flex mr-3 rounded-circle" src="http://placehold.it/45x45" alt=""&amp;gt;
                        &amp;lt;div class="media-body"&amp;gt;
                          &amp;lt;strong&amp;gt;Jeffery Wellings&amp;lt;/strong&amp;gt;added a new photo to the album
                          &amp;lt;strong&amp;gt;Beach&amp;lt;/strong&amp;gt;.
                          &amp;lt;div class="text-muted smaller"&amp;gt;Today at 4:31 PM - 1hr ago&amp;lt;/div&amp;gt;
                        &amp;lt;/div&amp;gt;
                      &amp;lt;/div&amp;gt;
                    &amp;lt;/a&amp;gt;
                    &amp;lt;a class="list-group-item list-group-item-action" href="#"&amp;gt;
                      &amp;lt;div class="media"&amp;gt;
                        &amp;lt;img class="d-flex mr-3 rounded-circle" src="http://placehold.it/45x45" alt=""&amp;gt;
                        &amp;lt;div class="media-body"&amp;gt;
                          &amp;lt;i class="fa fa-code-fork"&amp;gt;&amp;lt;/i&amp;gt;
                          &amp;lt;strong&amp;gt;Monica Dennis&amp;lt;/strong&amp;gt;forked the
                          &amp;lt;strong&amp;gt;startbootstrap-sb-admin&amp;lt;/strong&amp;gt;repository on
                          &amp;lt;strong&amp;gt;GitHub&amp;lt;/strong&amp;gt;.
                          &amp;lt;div class="text-muted smaller"&amp;gt;Today at 3:54 PM - 2hrs ago&amp;lt;/div&amp;gt;
                        &amp;lt;/div&amp;gt;
                      &amp;lt;/div&amp;gt;
                    &amp;lt;/a&amp;gt;
                  &amp;lt;/div&amp;gt;
                  &amp;lt;a class="list-group-item list-group-item-action" href="#"&amp;gt;View all activity...&amp;lt;/a&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div class="card-footer small text-muted"&amp;gt;Updated yesterday at 11:59 PM&amp;lt;/div&amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;!-- Example DataTables Card--&amp;gt;
          &amp;lt;div class="card mb-3"&amp;gt;
            &amp;lt;div class="card-header"&amp;gt;
              &amp;lt;i class="fa fa-table"&amp;gt;&amp;lt;/i&amp;gt; Customer Order Record&amp;lt;/div&amp;gt;
            &amp;lt;div class="card-body"&amp;gt;
              &amp;lt;div class="table-responsive"&amp;gt;
                &amp;lt;table class="table table-bordered" id="dataTable" width="100%" cellspacing="0"&amp;gt;
                  &amp;lt;thead&amp;gt;
                    &amp;lt;tr&amp;gt;
                      &amp;lt;th&amp;gt;Name&amp;lt;/th&amp;gt;
                      &amp;lt;th&amp;gt;Position&amp;lt;/th&amp;gt;
                      &amp;lt;th&amp;gt;Office&amp;lt;/th&amp;gt;
                      &amp;lt;th&amp;gt;Age&amp;lt;/th&amp;gt;
                      &amp;lt;th&amp;gt;Start date&amp;lt;/th&amp;gt;
                      &amp;lt;th&amp;gt;Salary&amp;lt;/th&amp;gt;
                    &amp;lt;/tr&amp;gt;
                  &amp;lt;/thead&amp;gt;
                  &amp;lt;tfoot&amp;gt;
                    &amp;lt;tr&amp;gt;
                      &amp;lt;th&amp;gt;Name&amp;lt;/th&amp;gt;
                      &amp;lt;th&amp;gt;Position&amp;lt;/th&amp;gt;
                      &amp;lt;th&amp;gt;Office&amp;lt;/th&amp;gt;
                      &amp;lt;th&amp;gt;Age&amp;lt;/th&amp;gt;
                      &amp;lt;th&amp;gt;Start date&amp;lt;/th&amp;gt;
                      &amp;lt;th&amp;gt;Salary&amp;lt;/th&amp;gt;
                    &amp;lt;/tr&amp;gt;
                  &amp;lt;/tfoot&amp;gt;
                  &amp;lt;tbody id="customer-table"&amp;gt;
                    &amp;lt;tr&amp;gt;
                      &amp;lt;td&amp;gt;Cedric Kelly&amp;lt;/td&amp;gt;
                      &amp;lt;td&amp;gt;Senior Javascript Developer&amp;lt;/td&amp;gt;
                      &amp;lt;td&amp;gt;Edinburgh&amp;lt;/td&amp;gt;
                      &amp;lt;td&amp;gt;22&amp;lt;/td&amp;gt;
                      &amp;lt;td&amp;gt;2012/03/29&amp;lt;/td&amp;gt;
                      &amp;lt;td&amp;gt;$433,060&amp;lt;/td&amp;gt;
                    &amp;lt;/tr&amp;gt;
                    &amp;lt;tr&amp;gt;
                      &amp;lt;td&amp;gt;Airi Satou&amp;lt;/td&amp;gt;
                      &amp;lt;td&amp;gt;Accountant&amp;lt;/td&amp;gt;
                      &amp;lt;td&amp;gt;Tokyo&amp;lt;/td&amp;gt;
                      &amp;lt;td&amp;gt;33&amp;lt;/td&amp;gt;
                      &amp;lt;td&amp;gt;2008/11/28&amp;lt;/td&amp;gt;
                      &amp;lt;td&amp;gt;$162,700&amp;lt;/td&amp;gt;
                    &amp;lt;/tr&amp;gt;
                  &amp;lt;/tbody&amp;gt;
                &amp;lt;/table&amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="card-footer small text-muted"&amp;gt;Updated yesterday at 11:59 PM&amp;lt;/div&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;footer class="sticky-footer"&amp;gt;
          &amp;lt;div class="container"&amp;gt;
            &amp;lt;div class="text-center"&amp;gt;
              &amp;lt;small&amp;gt;Copyright © Your Website 2018&amp;lt;/small&amp;gt;
            &amp;lt;/div&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/footer&amp;gt;
        &amp;lt;script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
            crossorigin="anonymous"&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;!-- Page level plugin JavaScript--&amp;gt;
        &amp;lt;script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.min.js"&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;script src="https://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js"&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;script src="https://cdn.datatables.net/1.10.16/js/dataTables.bootstrap4.min.js"&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;script src="https://js.pusher.com/4.0/pusher.min.js"&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;script src="{{ url_for('static', filename='js/customer.js') }}"&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;script src="{{ url_for('static', filename='js/order.js') }}"&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;script src="{{ url_for('static', filename='js/message.js') }}"&amp;gt;&amp;lt;/script&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We imported the JQuery and JavaScript  &lt;a href="https://pusher.com/"&gt;Pusher libraries&lt;/a&gt;  and wrote the markup to specify the layout for the home and dashboard pages in the code above. We'll develop the JavaScript files that will handle the real-time changes in the next stage.&lt;/p&gt;

&lt;p&gt;Communicate with the Back-end&lt;br&gt;
In the static directory, create a new folder named js and fill it with three new files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;order.js&lt;/code&gt; — in this file, we will subscribe to the &lt;code&gt;order&lt;/code&gt; channel and update the admin dashboard in realtime whenever a new order is placed.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;message.js&lt;/code&gt; — in this file, we will subscribe to the &lt;code&gt;message&lt;/code&gt; channel and update the admin dashboard in realtime whenever a new message is sent.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;customer.js&lt;/code&gt; — in this file, we will subscribe to the &lt;code&gt;customer&lt;/code&gt; channel and update the admin dashboard in realtime whenever a new customer is registered.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Paste the following code in the &lt;code&gt;./static/js/order.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Chart.defaults.global.defaultFontFamily = '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';

    Chart.defaults.global.defaultFontColor = '#292b2c';

    var ctx = document.getElementById("myBarChart");
    var myLineChart = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: ["February", "March", "April", "May", "June", "July"],
        datasets: [{
          label: "Revenue",
          backgroundColor: "rgba(2,117,216,1)",
          borderColor: "rgba(2,117,216,1)",
          data: [5312, 6251, 7841, 9821, 14984, 0],
        }],
      },
      options: {
        scales: {
          xAxes: [{
            time: {
              unit: 'month'
            },
            gridLines: {
              display: false
            },
            ticks: {
              maxTicksLimit: 6
            }
          }],
        },
        legend: {
          display: false
        }
      }
    });

    // Configure Pusher instance
    const pusher = new Pusher('PUSHER_APP_KEY', {
        cluster: 'PUSHER_APP_CLUSTER',
        encrypted: true
    });

    // Subscribe to poll trigger
    var orderChannel = pusher.subscribe('order');

    // Listen to 'order placed' event
    var order = document.getElementById('order-count')
    orderChannel.bind('place', function(data) {
      myLineChart.data.datasets.forEach((dataset) =&amp;gt; {
          dataset.data.fill(parseInt(data.units),-1);
      });
      myLineChart.update();
      order.innerText = parseInt(order.innerText)+1
    });

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Replace the PUSHER_APP_* keys with the keys on your Pusher dashboard.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We used the ID &lt;code&gt;myBarChart&lt;/code&gt; to target the bar chart on the dashboard page, and then we created its data object in the code above. Then, to interface with the Pusher service, we set up a Pusher instance. On the &lt;code&gt;place&lt;/code&gt; event, we register a listener and listen to the events that Pusher sends.&lt;/p&gt;

&lt;p&gt;Then, in the &lt;code&gt;./static/js/message.js&lt;/code&gt; file, paste the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$(document).ready(function () {
      $('.navbar-sidenav [data-toggle="tooltip"]').tooltip({
        template: '&amp;lt;div class="tooltip navbar-sidenav-tooltip" role="tooltip" style="pointer-events: none;"&amp;gt;&amp;lt;div class="arrow"&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class="tooltip-inner"&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;'
      })

      $('[data-toggle="tooltip"]').tooltip()

      var messageChannel = pusher.subscribe('message');
      messageChannel.bind('send', function(data) {
        var message = document.getElementById('message-count')
        var date = new Date();
        var toAppend = document.createElement('a')
        toAppend.classList.add('list-group-item', 'list-group-item-action')
        toAppend.href = '#'
        document.getElementById('message-box').appendChild(toAppend)
        toAppend.innerHTML ='&amp;lt;div class="media"&amp;gt;'+
                        '&amp;lt;img class="d-flex mr-3 rounded-circle" src="http://placehold.it/45x45" alt=""&amp;gt;'+
                        '&amp;lt;div class="media-body"&amp;gt;'+
                          `&amp;lt;strong&amp;gt;${data.name}&amp;lt;/strong&amp;gt; posted a new message `+
                          `&amp;lt;em&amp;gt;${data.message}&amp;lt;/em&amp;gt;.`+
                          `&amp;lt;div class="text-muted smaller"&amp;gt;Today at ${date.getHours()} : ${date.getMinutes()}&amp;lt;/div&amp;gt;`+
                        '&amp;lt;/div&amp;gt;'+
                      '&amp;lt;/div&amp;gt;'

        message.innerText = parseInt(message.innerText)+1
      });
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We bind to the &lt;code&gt;sent&lt;/code&gt; event and listen for changes from Pusher, just as we did previously, and once there is an update, we display it on the admin dashboard.&lt;/p&gt;

&lt;p&gt;Finally, insert the following code into the &lt;code&gt;./static/js/customer.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$(document).ready(function(){
      var dataTable = $("#dataTable").DataTable()
      var customerChannel = pusher.subscribe('customer');
      customerChannel.bind('add', function(data) {
      var date = new Date();
      dataTable.row.add([
          data.name,
          data.position,
          data.office,
          data.age,
          `${date.getFullYear()}/${date.getMonth()}/${date.getDay()}`,
          data.salary
        ]).draw( false );
      });
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We subscribe to the &lt;code&gt;customer&lt;/code&gt; channel and bind to the &lt;code&gt;add&lt;/code&gt; event in the preceding code so that we can update the dashboard in real time whenever a new customer is added.&lt;/p&gt;

&lt;p&gt;We've completed our construction! This command can be used to execute the application:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ flask run&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We should now see our app if we go to &lt;code&gt;127.0.0.1:5000&lt;/code&gt; and &lt;code&gt;127.0.0.1:5000/dashboard&lt;/code&gt; :&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We learned how to create a Python Flask project from the ground up and integrate realtime features using Pusher and JavaScript in this lesson. Thanks.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Introducing AQUA: Digital Education Made Simple</title>
      <author>Arijit Roy</author>
      <pubDate>Wed, 12 Jan 2022 21:42:19 +0000</pubDate>
      <link>https://dev.to/radioactive11/introducing-aqua-digital-education-made-simple-3b0o</link>
      <guid>https://dev.to/radioactive11/introducing-aqua-digital-education-made-simple-3b0o</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XaGYYo_s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1g39034uw1begml74f9i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XaGYYo_s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1g39034uw1begml74f9i.png" alt="Landing Page" width="880" height="593"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;A few months back when the pandemic was at its peak in India and there was chaos all around, the education system got hit hard too and as tensions rose among the students so did the discord among different departments in our universities.&lt;/p&gt;

&lt;p&gt;Clashing deadlines for assignments, last-minute rushed quizzes. The pressure was enormous and the environment around us was even scarier. So this specific problem of deadlines gave us an idea that could in general help us create a streamlined environment for evaluation and assessment.&lt;/p&gt;

&lt;p&gt;Online classes have not only increased the burden on students but on educators equally. Evaluating hundreds of pages worth of handwritten assignments is tiring and boring. On discussing further we came to know that &lt;strong&gt;teachers spend more time on checking and evaluating our assignments than actually preparing coursework and teaching&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This is what inspired us to build AQUA, which is short for Assignments Quizzes Utility Application, a product to reduce the workload on both students and teachers. Thanks to MongoDB's simple yet powerful &lt;a href="https://docs.mongodb.com/realm/functions/"&gt;Realm Functions&lt;/a&gt;, we were able to automate most of the manual tasks of the evaluation process easily&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#so-what-is-aqua"&gt;
  &lt;/a&gt;
  So... What is AQUA? 👩‍🏫
&lt;/h4&gt;

&lt;p&gt;We came up with a platform where teachers, or in general, any educator can upload the assignment, choose a due date and publish it for the students. But here comes the catch. No two assignments can be created such that they have a deadline within 24 hours of each other, giving students ample time to solve the questions.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#automated-keyword-checker"&gt;
  &lt;/a&gt;
  Automated Keyword Checker ✅
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ovG4R9n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lykdba9wqtg64cdn0kpx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ovG4R9n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lykdba9wqtg64cdn0kpx.png" alt="Image description" width="880" height="593"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most of the time, teachers look for the presence of certain keywords in the answer scripts and mark students accordingly. This might be an easy and effective way of evaluation but is time-consuming, especially when you consider the volume of answer sheets that needed to be checked after the submission of one assignment.&lt;/p&gt;

&lt;p&gt;We live by the rule: "Automate the Boring Stuff". Hence we decided that we need to come up with a system that will automatically detect the presence of keywords, that the teacher wants, to be checked and flagged. Marks can be then allotted accordingly.&lt;/p&gt;

&lt;p&gt;We used MongoDB realm trigger functions to automatically run trigger function as soon as a student submits an assignments which in response calls the keyword checker api and checks the assignment against the keywords already provided by the teacher at the time of creation of assignment.&lt;br&gt;
The result gets saved in the database which can be then accordingly fetched.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#plagiarism-detection"&gt;
  &lt;/a&gt;
  Plagiarism Detection 👀
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4up_YOA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lj887mvzpg77aca7ncmf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4up_YOA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lj887mvzpg77aca7ncmf.png" alt="Image description" width="880" height="593"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can copy my homework, but don't make it look obvious&lt;/em&gt; is a line that almost all student has either said or heard in their life. Well, plagiarism is an age-old problem that still hasn't been solved. We tried to tackle this issue by checking the similarity between all the documents and returning the similarity score. If it exceeds a particular threshold (which is set by the evaluator), it will be flagged as plagiarized and appropriate actions can be taken.&lt;/p&gt;

&lt;p&gt;We are doing same here as we did for keyword checker, as soon as a student submit an assignment, his/her assignment is checked for plagiarism by sending request to the plagiarism API in response to change in the database, with the help of realm trigger function.&lt;/p&gt;

&lt;p&gt;The response is then saved in the database, making it easier for the teacher not to wait for the API (doing heavy computation on backend side) to fetch results.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Action Star&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code 🔗
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/0xCompyler"&gt;
        0xCompyler
      &lt;/a&gt; / &lt;a href="https://github.com/0xCompyler/aqua"&gt;
        aqua
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Assignments Quizzes Utility Application
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;

&lt;p&gt;&lt;a href="https://forthebadge.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7998890254268d8ed476c9f66d3fa59d21dd354d2090036083c82af4cda2a0eb/68747470733a2f2f666f7274686562616467652e636f6d2f696d616765732f6261646765732f6275696c742d776974682d6c6f76652e737667" alt="forthebadge"&gt;&lt;/a&gt;
&lt;a href="https://forthebadge.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3cdf9577401a2c7dceac655bbd37fb2f3ee273a457bf1f2169c602fb80ca56f8/68747470733a2f2f666f7274686562616467652e636f6d2f696d616765732f6261646765732f6d6164652d776974682d707974686f6e2e737667" alt="forthebadge"&gt;&lt;/a&gt;
&lt;a href="https://forthebadge.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bf160c4d8bd34965398250eb1cfffcc099fef4c3be1610e932116b166f472180/68747470733a2f2f666f7274686562616467652e636f6d2f696d616765732f6261646765732f757365732d6a732e737667" alt="forthebadge"&gt;&lt;/a&gt;
&lt;a href="https://forthebadge.com" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8ace38ba3196d3dbc3996a906819fc3e4907364ba189553b70dc0cea1a66edfc/68747470733a2f2f666f7274686562616467652e636f6d2f696d616765732f6261646765732f706f77657265642d62792d636f666665652e737667" alt="forthebadge"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;
  &lt;a href="https://github.com/0xCompyler/aqua"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZkvOKrJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/0xCompyler/aquaSTATIC/landing.png" alt="Logo"&gt;
  &lt;/a&gt;
  &lt;/p&gt;
&lt;h1&gt;
Project AQUA&lt;/h1&gt;
  &lt;p&gt;
    &lt;strong&gt;A&lt;/strong&gt;ssignment &lt;strong&gt;Q&lt;/strong&gt;uizzes &lt;strong&gt;U&lt;/strong&gt;tility &lt;strong&gt;A&lt;/strong&gt;pplication
    &lt;br&gt;
    &lt;a href="https://aqua-eta.vercel.app" rel="nofollow"&gt;&lt;strong&gt;Visit the website »&lt;/strong&gt;&lt;/a&gt;
    &lt;br&gt;
    &lt;br&gt;
    &lt;a href="https://aqua-eta.vercel.app/" rel="nofollow"&gt;View Demo&lt;/a&gt;
    ·
    &lt;a href="https://github.com/0xCompyler/aqua/issues"&gt;Report Bug&lt;/a&gt;
    ·
    &lt;a href="https://github.com/0xCompyler/aqua/issues"&gt;Request Feature&lt;/a&gt;
  &lt;/p&gt;
&lt;h2&gt;
Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/0xCompyler/aqua#about-the-project"&gt;About the Project&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/0xCompyler/aqua#plagiarism-detector"&gt;Plagiarism Detector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/0xCompyler/aqua#keyword-checker"&gt;Keyword Checker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/0xCompyler/aqua#handwriting-to-text-conversion"&gt;Handwriting to Text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/0xCompyler/aqua#anti-burden-system"&gt;Anti Burden System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/0xCompyler/aqua#built-with"&gt;Built With&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/0xCompyler/aqua#getting-started"&gt;Getting Started&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/0xCompyler/aqua#prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/0xCompyler/aqua#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/0xCompyler/aqua#Product-Screenshots"&gt;Product Screenshots&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/0xCompyler/aqua#roadmap"&gt;Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/0xCompyler/aqua#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/0xCompyler/aqua#contact"&gt;Contact&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
About The Project&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://aqua-eta.vercel.app" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OHQjdFKU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/0xCompyler/aquaSTATIC/Landing.png" alt="Product Name Screen Shot"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Project &lt;strong&gt;aqua&lt;/strong&gt; is a &lt;strong&gt;Digital Evaluation Platform&lt;/strong&gt; which leverages the power of leading-edge frameworks paired with state of the art artificial intelligence algorithms to provide an seamless and organized experience both for educators and students alike.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;👩‍🏫 &lt;strong&gt;We provide the following services&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;🤓 Plagiarism Checker&lt;/p&gt;
&lt;p&gt;🔖 Notice Board&lt;/p&gt;
&lt;p&gt;☁️ Assignment Upload/Download Portal&lt;/p&gt;
&lt;p&gt;🙃 Anti Burden System&lt;/p&gt;
&lt;br&gt;
&lt;h2&gt;
Plagiarism Detector&lt;/h2&gt;
&lt;p&gt;Often, one educator is responsible for evaluating assignments of around 120 students (2 batches of 60 students). In such cases, detecting plagiarism by a human is a up hill task which also requires a lot of time. In order…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/0xCompyler/aqua"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#built-with-%F0%9F%9B%A0"&gt;
  &lt;/a&gt;
  Built With 🛠
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvS-W_ZK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Azure-0089D6%3Fstyle%3Dfor-the-badge%26logo%3Dmicrosoft-azure%26logoColor%3Dwhite" class="article-body-image-wrapper"&gt;&lt;img alt="TF" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvS-W_ZK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Azure-0089D6%3Fstyle%3Dfor-the-badge%26logo%3Dmicrosoft-azure%26logoColor%3Dwhite" width="87" height="28"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lijILSR0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Pytorch-D00000%3Fstyle%3Dfor-the-badge%26logo%3Dpytorch%26logoColor%3Dwhite" class="article-body-image-wrapper"&gt;&lt;img alt="PyTorch" src="https://res.cloudinary.com/practicaldev/image/fetch/s--lijILSR0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Pytorch-D00000%3Fstyle%3Dfor-the-badge%26logo%3Dpytorch%26logoColor%3Dwhite" width="106" height="28"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zhdyu5nC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/SciKit%2520Learn-F7931E%3Fstyle%3Dfor-the-badge%26logo%3Dscikit-learn%26logoColor%3Dwhite" class="article-body-image-wrapper"&gt;&lt;img alt="SkL" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zhdyu5nC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/SciKit%2520Learn-F7931E%3Fstyle%3Dfor-the-badge%26logo%3Dscikit-learn%26logoColor%3Dwhite" width="139" height="28"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1kIxTmDr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/MongoDB-47A248%3Fstyle%3Dfor-the-badge%26logo%3DmongoDB%26logoColor%3Dwhite" class="article-body-image-wrapper"&gt;&lt;img alt="SkL" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1kIxTmDr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/MongoDB-47A248%3Fstyle%3Dfor-the-badge%26logo%3DmongoDB%26logoColor%3Dwhite" width="111" height="28"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h2EhAtY5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/express-000000%3Fstyle%3Dfor-the-badge%26logo%3Dexpress%26logoColor%3Dwhite" class="article-body-image-wrapper"&gt;&lt;img alt="SkL" src="https://res.cloudinary.com/practicaldev/image/fetch/s--h2EhAtY5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/express-000000%3Fstyle%3Dfor-the-badge%26logo%3Dexpress%26logoColor%3Dwhite" width="103" height="28"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vdfa-3if--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/react-61DAFB%3Fstyle%3Dfor-the-badge%26logo%3Dreact%26logoColor%3Dblack" class="article-body-image-wrapper"&gt;&lt;img alt="SkL" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vdfa-3if--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/react-61DAFB%3Fstyle%3Dfor-the-badge%26logo%3Dreact%26logoColor%3Dblack" width="86" height="28"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XfglHzK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/node.js-339933%3Fstyle%3Dfor-the-badge%26logo%3Dnode.js%26logoColor%3Dwhite" class="article-body-image-wrapper"&gt;&lt;img alt="SkL" src="https://res.cloudinary.com/practicaldev/image/fetch/s--XfglHzK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/node.js-339933%3Fstyle%3Dfor-the-badge%26logo%3Dnode.js%26logoColor%3Dwhite" width="101" height="28"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tGJfHtRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/flask-000000%3Fstyle%3Dfor-the-badge%26logo%3Dflask%26logoColor%3Dwhite" class="article-body-image-wrapper"&gt;&lt;img alt="SkL" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tGJfHtRI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/flask-000000%3Fstyle%3Dfor-the-badge%26logo%3Dflask%26logoColor%3Dwhite" width="81" height="28"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ARFfNEK5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/nginx-009639%3Fstyle%3Dfor-the-badge%26logo%3Dnginx%26logoColor%3Dwhite" class="article-body-image-wrapper"&gt;&lt;img alt="SkL" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ARFfNEK5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/nginx-009639%3Fstyle%3Dfor-the-badge%26logo%3Dnginx%26logoColor%3Dwhite" width="88" height="28"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#built-by"&gt;
  &lt;/a&gt;
  Built By 😎
&lt;/h4&gt;

&lt;p&gt;Arijit Roy - &lt;a href="https://github.com/0xCompyler"&gt;GitHub&lt;/a&gt; - &lt;a class="mentioned-user" href="https://dev.to/radioactive11"&gt;@radioactive11&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Kartik Goel - &lt;a href="https://github.com/kg-kartik"&gt;GitHub&lt;/a&gt; - &lt;a class="mentioned-user" href="https://dev.to/kgkartik"&gt;@kgkartik&lt;/a&gt; &lt;br&gt;
Boidushya Bhattacharyay - &lt;a href="https://github.com/boidushya"&gt;GitHub&lt;/a&gt; - &lt;a class="mentioned-user" href="https://dev.to/boidushya"&gt;@boidushya&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Yashwin Saini - &lt;a href="https://github.com/yash-wins"&gt;GitHub&lt;/a&gt; - &lt;a class="mentioned-user" href="https://dev.to/yashwinsaini"&gt;@yashwinsaini&lt;/a&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#link-to-platform"&gt;
  &lt;/a&gt;
  Link to platform ✨
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://aqua-eta.vercel.app"&gt;https://aqua-eta.vercel.app&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#screenshots"&gt;
  &lt;/a&gt;
  Screenshots 📸
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WBKmXpKp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/us1y5qp2136hisa1840y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WBKmXpKp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/us1y5qp2136hisa1840y.png" alt="Image description" width="880" height="593"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MpDjDfIA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ybcxpxqyvsnbtzway8in.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MpDjDfIA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ybcxpxqyvsnbtzway8in.png" alt="Image description" width="880" height="593"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iYCPFFxh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ely5lamfaiy0txumfim3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iYCPFFxh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ely5lamfaiy0txumfim3.png" alt="Image description" width="880" height="593"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>atlashackathon</category>
      <category>mongodb</category>
      <category>react</category>
      <category>python</category>
    </item>
    <item>
      <title>TypeScript Serverless API on AWS</title>
      <author>Max Rohde</author>
      <pubDate>Wed, 12 Jan 2022 20:53:38 +0000</pubDate>
      <link>https://dev.to/mxro/typescript-serverless-api-on-aws-509p</link>
      <guid>https://dev.to/mxro/typescript-serverless-api-on-aws-509p</guid>
      <description>&lt;p&gt;There are many ways to stand up a REST API. Nearly every programming language provides a way for us to develop a simple web server, such as &lt;a href="https://dev.to/geekygeeky/get-started-with-es6-javascript-for-writing-nodejs-using-express-544h"&gt;Express.js&lt;/a&gt;, &lt;a href="https://dev.to/21yunbox/how-to-deploy-go-gin-to-a-server-36d"&gt;Go Gin&lt;/a&gt; or &lt;a href="https://dev.to/sm0ke/flask-bootstrap-templates-open-source-and-free-m2b"&gt;Python Flask&lt;/a&gt;. However, with the &lt;a href="https://medium.com/@chakrabartis/server-less-eats-the-infrastructure-2a3d0ef66363"&gt;advent of serverless computing&lt;/a&gt;, we need to rethink some of the fundamentals of how APIs are developed and deployed. Chiefly:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Traditionally APIs are packaged into one deliverable; serverless architecture encourages to divide solutions up into many smaller units that are packaged and deployed individually.&lt;/li&gt;
&lt;li&gt;Traditionally APIs are stateful applications that are started and stopped infrequently; serverless architecture encourages to start up compute tasks only on demand.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, I will describe a way to develop a serverless API in TypeScript. The motivation is to develop a solution that makes it very easy to get started - making compromises as required to not over-complicate the solution. Specifically, this TypeScript API will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;a href="https://aws.amazon.com/blogs/compute/announcing-http-apis-for-amazon-api-gateway/"&gt;AWS HTTP Gateway&lt;/a&gt; to route HTTP requests to AWS Lambda functions&lt;/li&gt;
&lt;li&gt;Develop handlers for HTTP routes in TypeScript&lt;/li&gt;
&lt;li&gt;Deploy every handler in a separate Lambda for minimal cold-start times&lt;/li&gt;
&lt;li&gt;Generate configuration for the API Gateway automatically by mapping &lt;code&gt;.ts&lt;/code&gt; files in a &lt;code&gt;src/routes&lt;/code&gt; folder to HTTP routes&lt;/li&gt;
&lt;li&gt;Have all infrastructure defined in Terraform for easy extensibility and configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While it is actually quite quick to stand up an API using the techniques and template described in this article, there are a few moving parts involved in making a Serverless API work end-to-end. Therefore I will go through some background concepts in this article, to explain the different components of the solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;If you just want to get a working API up and running and start coding your endpoints, I have put together and easy to use template. Feel free to download that template to get started:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://goldstack.party/templates/lambda-api"&gt;🔗 Goldstack Serverless API Template&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also explore the source code a complete project set up for the domain &lt;a href="https://typescript-serverless-api.examples.dev.goldstack.party"&gt;&lt;code&gt;typescript-serverless-api.examples.dev.goldstack.party&lt;/code&gt;&lt;/a&gt; and adapt this to your needs:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/mxro/typescript-serverless-api"&gt;🔗 GitHub TypeScript Serverless API Template&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overall-architecture"&gt;
  &lt;/a&gt;
  Overall Architecture
&lt;/h2&gt;

&lt;p&gt;Let us start with a high level view of the solution:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZAvc2nO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.goldstack.party/img/202201/serverless-api-architecture.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZAvc2nO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.goldstack.party/img/202201/serverless-api-architecture.svg" alt="Architecture" width="880" height="336"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Clients&lt;/em&gt; such as mobile application or browser applications make HTTP request to an endpoint provided by the &lt;em&gt;AWS API Gateway&lt;/em&gt;. This will be available under a domain such as &lt;code&gt;api.mywebsite.com&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;API Gateway defines a number of routes; e.g. &lt;code&gt;/user&lt;/code&gt; or &lt;code&gt;/message&lt;/code&gt; that clients can access via the API domain, e.g. &lt;code&gt;https://api.mywebsite.com/user&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;When HTTP requests for these endpoints are received, API Gateway will invoke &lt;em&gt;Lambda functions&lt;/em&gt; for these endpoints. Each endpoint will have its own Lambda function. The Lambda functions will contain a &lt;em&gt;handler&lt;/em&gt; defined in TypeScript. In this handler, we define the logic that will determine what response the server will provide.&lt;/p&gt;

&lt;p&gt;In the following, I will provide further details for each of the components of the architecture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-api-gateway-http-api"&gt;
  &lt;/a&gt;
  AWS API Gateway HTTP API
&lt;/h2&gt;

&lt;p&gt;For our solution we use the &lt;a href="https://advancedweb.hu/how-to-use-the-aws-apigatewayv2-api-to-add-an-http-api-to-a-lambda-function/"&gt;AWS API Gateway HTTP APIs&lt;/a&gt; and not the original AWS API Gateway REST API. The latter requires a lot more complex configuration and the new HTTP API does the job just fine for our purposes. To find out more about the differences between the HTTP API and the REST API, please see this page on the AWS documentation:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html"&gt;🔗 Choosing between HTTP APIs and REST APIs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately the HTTP API has a very generic name that makes it &lt;a href="https://advancedweb.hu/how-to-use-the-aws-apigatewayv2-api-to-add-an-http-api-to-a-lambda-function/#troubleshooting"&gt;difficult to search for&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thus I would recommend to bookmark the following reference pages for digging deeper into any concepts touched upon here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html"&gt;AWS Developer Guide: Working with HTTP APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/apigatewayv2_api"&gt;Terraform API Gateway v2 Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The HTTP API for our solution provides the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provide us with a public HTTP endpoint that clients can call&lt;/li&gt;
&lt;li&gt;Route requests to Lambdas based on the request path&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Defining an API Gateway using Terraform is actually quite simple, see &lt;a href="https://github.com/mxro/typescript-serverless-api/blob/master/packages/lambda-api/infra/aws/api_gateway.tf"&gt;api_gateway.tf&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_apigatewayv2_api"&lt;/span&gt; &lt;span class="s2"&gt;"api"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;        &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"lambda-api-gateway-${random_id.id.hex}"&lt;/span&gt;
  &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"API for Goldstack lambda deployment"&lt;/span&gt;
    &lt;span class="nx"&gt;protocol_type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"HTTP"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;AWS generates HTTP endpoints for all HTTP APIs automatically. These use domains such as &lt;code&gt;d58z7h24p0.execute-api.us-west-2.amazonaws.com&lt;/code&gt;. In most instances, we would want to replace this with our own custom domain names for instance &lt;code&gt;api.mydomain.com&lt;/code&gt;. For this we need to configure &lt;a href="https://dev.to/gregfullard/learn-aws-with-me-episode-4-route-53-4aml"&gt;AWS Route 53&lt;/a&gt;. The first thing we will need is a hosted zone. Please see this guide to see how to set up a hosted zone: &lt;a href="https://docs.goldstack.party/docs/goldstack/configuration#hosted-zone-configuration"&gt;Hosted Zone Configuration&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once we have the id of our hosted zone, we can define an A alias to our API Gateway &lt;a href="https://github.com/mxro/typescript-serverless-api/blob/master/packages/lambda-api/infra/aws/domain.tf#L47"&gt;domain.tf#L47&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="nx"&gt;aws_route53_record&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"A"&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api_domain&lt;/span&gt;
  &lt;span class="nx"&gt;zone_id&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;aws_route53_zone&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zone_id&lt;/span&gt;

  &lt;span class="nx"&gt;alias&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;evaluate_target_health&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt;                   &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aws_apigatewayv2_domain_name&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domain&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domain_name_configuration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target_domain_name&lt;/span&gt;
    &lt;span class="nx"&gt;zone_id&lt;/span&gt;                &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aws_apigatewayv2_domain_name&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domain&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;domain_name_configuration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hosted_zone_id&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We further want to ensure users can call our API using a secure HTTP connection (&lt;code&gt;https://&lt;/code&gt;). For this we can use a free certificate from AWS Certificate manager, that can also be defined in Terraform, &lt;a href="https://github.com/mxro/typescript-serverless-api/blob/master/packages/lambda-api/infra/aws/domain.tf#L10"&gt;domain.tf#L10&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_acm_certificate"&lt;/span&gt; &lt;span class="s2"&gt;"wildcard"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;domain_name&lt;/span&gt;               &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api_domain&lt;/span&gt;
  &lt;span class="nx"&gt;subject_alternative_names&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"*.${var.api_domain}"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="nx"&gt;validation_method&lt;/span&gt;         &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"DNS"&lt;/span&gt;

  &lt;span class="nx"&gt;tags&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ManagedBy&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"goldstack-terraform"&lt;/span&gt;
    &lt;span class="nx"&gt;Changed&lt;/span&gt;   &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;formatdate&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"YYYY-MM-DD hh:mm ZZZ"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;timestamp&lt;/span&gt;&lt;span class="err"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;lifecycle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ignore_changes&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We define the routes for the API using a Terraform variable defined in &lt;a href="https://github.com/mxro/typescript-serverless-api/blob/master/packages/lambda-api/goldstack.json#L11"&gt;goldstack.json#L11&lt;/a&gt;. Please see the next section on more details of how this is generated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"lambdas"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"$default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"function_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"serverless-api-default_gateway_lambda_2281"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ANY /admin/{proxy+}"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"function_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"serverless-api-admin-_proxy__"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ANY /cart/{sessionId}/items"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"function_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"serverless-api-cart-_sessionId_-items"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ANY /echo"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"function_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"serverless-api-echo"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ANY /order/{id}"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"function_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"serverless-api-order-_id_"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ANY /user"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"function_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"serverless-api-user-index_root_lambda_4423"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ANY /user/{userId}"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"function_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"serverless-api-user-_userId_"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#typescript-handlers-in-lambdas"&gt;
  &lt;/a&gt;
  TypeScript Handlers in Lambdas
&lt;/h2&gt;

&lt;p&gt;The API Gateway HTTP API provides an HTTP endpoint but does not contain any logic defining what responses should be sent back to the client.&lt;/p&gt;

&lt;p&gt;For this, we need to define Lambdas and within these Lambdas handler functions that contain some logic defined in TypeScript building the responses.&lt;/p&gt;

&lt;p&gt;A handler function is a simple JavaScript function. For more information on the TypeScript types used in the method declaration see &lt;a href="https://maxrohde.com/2022/01/02/typescript-types-for-aws-lambda/"&gt;TypeScript Types for AWS Lambda&lt;/a&gt;. Here an example for a simple handler function (&lt;a href="https://github.com/mxro/typescript-serverless-api/blob/master/packages/lambda-api/src/routes/echo.ts"&gt;src/routes/echo.ts&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;APIGatewayProxyEventV2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-lambda&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ProxyHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Handler&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;APIGatewayProxyEventV2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// eslint-disable-next-line @typescript-eslint/no-unused-vars&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ProxyHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queryStringParameters&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we return a simple JSON object that AWS Gateway will automatically transform into a HTTP response using the correct response code (&lt;code&gt;200&lt;/code&gt;) and content type (&lt;code&gt;application/json&lt;/code&gt;). To test the response of this endpoint, try opening:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://typescript-serverless-api.examples.dev.goldstack.party/echo?message=TypeScript"&gt;https://typescript-serverless-api.examples.dev.goldstack.party/echo?message=TypeScript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To run this code, we need to define the infrastructure for a Lambda to contain the code. For this we can use the Terraform resource &lt;a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_function"&gt;&lt;code&gt;aws_lambda_function&lt;/code&gt;&lt;/a&gt;, see &lt;a href="https://github.com/mxro/typescript-serverless-api/blob/master/packages/lambda-api/infra/aws/lambda_routes.tf#L13"&gt;lambda_routes#L13&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_lambda_function"&lt;/span&gt; &lt;span class="s2"&gt;"this"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;for_each&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lambdas&lt;/span&gt;

  &lt;span class="nx"&gt;function_name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;lookup&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"function_name"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;filename&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;archive_file&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;empty_lambda&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;output_path&lt;/span&gt;

  &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"lambda.handler"&lt;/span&gt;
  &lt;span class="nx"&gt;runtime&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"nodejs12.x"&lt;/span&gt;

  &lt;span class="nx"&gt;memory_size&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2048&lt;/span&gt;
  &lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt; &lt;span class="c1"&gt;# default Gateway timeout is 29 s&lt;/span&gt;

  &lt;span class="nx"&gt;role&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aws_iam_role&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lambda_exec&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;arn&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is more than one way to link a Lambda function to an API gateway, see &lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-integration-types.html"&gt;Choose an API Gateway API integration type&lt;/a&gt; on the AWS documentation.&lt;/p&gt;

&lt;p&gt;In our case, we choose a &lt;code&gt;AWS_PROXY&lt;/code&gt; integration, see &lt;a href="https://github.com/mxro/typescript-serverless-api/blob/master/packages/lambda-api/infra/aws/lambda_routes.tf#L52"&gt;lambda_routes.tf#L52&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_apigatewayv2_integration"&lt;/span&gt; &lt;span class="s2"&gt;"this"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;for_each&lt;/span&gt;         &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lambdas&lt;/span&gt;
  &lt;span class="nx"&gt;api_id&lt;/span&gt;           &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aws_apigatewayv2_api&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
  &lt;span class="nx"&gt;integration_type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"AWS_PROXY"&lt;/span&gt;

  &lt;span class="nx"&gt;payload_format_version&lt;/span&gt;    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"2.0"&lt;/span&gt;
  &lt;span class="nx"&gt;connection_type&lt;/span&gt;           &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"INTERNET"&lt;/span&gt;
  &lt;span class="nx"&gt;description&lt;/span&gt;               &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Dynamic lambda integration"&lt;/span&gt;
  &lt;span class="nx"&gt;integration_method&lt;/span&gt;        &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"POST"&lt;/span&gt;
  &lt;span class="nx"&gt;integration_uri&lt;/span&gt;           &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aws_lambda_function&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;this&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;invoke_arn&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the integration method here is &lt;code&gt;"POST"&lt;/code&gt; but this is related to how the API Gateway invokes the Lambda function. The HTTP methods that the gateway will serve are defined as part of the routes. &lt;/p&gt;

&lt;p&gt;There are a number of other things we need to configure to get our Lambdas working. For a full reference, please see the files &lt;a href="https://github.com/mxro/typescript-serverless-api/blob/master/packages/lambda-api/infra/aws/lambda_routes.tf"&gt;lambda_routes.tf&lt;/a&gt; and &lt;a href="https://github.com/mxro/typescript-serverless-api/blob/master/packages/lambda-api/infra/aws/lambda_shared.tf"&gt;lambda_shared.tf&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#route-configuration"&gt;
  &lt;/a&gt;
  Route Configuration
&lt;/h2&gt;

&lt;p&gt;After having configured the API Gateway, the Lambda infrastructure and the integration between Gateway and Lambda, we still need to configure what paths in the API are linked to which Lambda functions.&lt;/p&gt;

&lt;p&gt;This can be achieved in Terraform using the &lt;a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/apigatewayv2_route"&gt;&lt;code&gt;aws_apigatewayv2_route&lt;/code&gt;&lt;/a&gt; resource, see &lt;a href="https://github.com/mxro/typescript-serverless-api/blob/master/packages/lambda-api/infra/aws/lambda_routes.tf#L43"&gt;lambda_routes.tf#L43&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_apigatewayv2_route"&lt;/span&gt; &lt;span class="s2"&gt;"this"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;for_each&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;var&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lambdas&lt;/span&gt;

  &lt;span class="nx"&gt;api_id&lt;/span&gt;    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aws_apigatewayv2_api&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
  &lt;span class="nx"&gt;route_key&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;

  &lt;span class="nx"&gt;target&lt;/span&gt;    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"integrations/${aws_apigatewayv2_integration.this[each.key].id}"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;route_key&lt;/code&gt; here determines which request path in the API this resource applies to (see &lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-routes.html"&gt;Working with routes for HTTP APIs&lt;/a&gt;). The &lt;code&gt;target&lt;/code&gt; defined the Lambda we want to call.&lt;/p&gt;

&lt;p&gt;Since creating and maintaining these route definitions can be quite cumbersome, I have developed a small utility that scans a folder (&lt;code&gt;src/routes&lt;/code&gt;) for &lt;code&gt;.ts&lt;/code&gt; files and ensures that Terraform creates routes for all handlers defined in these folders. Find the source code for this utility in &lt;a href="https://github.com/goldstack/goldstack/blob/master/workspaces/templates-lib/packages/utils-aws-lambda/src/generate/collectLambdasFromFiles.ts"&gt;collectLambdasFromFiles.ts&lt;/a&gt;. For information on the rules used to map file names to routes in the API, please see &lt;a href="https://docs.goldstack.party/docs/modules/lambda-api#defining-routes-1"&gt;Defining Routes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;See below the routes defined in the example project (&lt;a href="https://github.com/mxro/typescript-serverless-api/tree/master/packages/lambda-api/src/routes"&gt;src/routes&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BCCzHiUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.goldstack.party/img/202201/api_routes.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BCCzHiUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.goldstack.party/img/202201/api_routes.png" alt="API routes" width="346" height="289"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While it is possible to get the dynamic routing working using the npm module &lt;a href="https://www.npmjs.com/package/@goldstack/utils-aws-lambda"&gt;@goldstack/utils-aws-lamda&lt;/a&gt;, it is much easier to do so using the &lt;a href="https://goldstack.party/templates/lambda-api"&gt;Serverless API template&lt;/a&gt;. Alternatively it is also possible to set up routes manually using the &lt;a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/apigatewayv2_route"&gt;&lt;code&gt;aws_apigatewayv2_route&lt;/code&gt;&lt;/a&gt; Terraform resource. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In a previous article I described how to &lt;a href="https://maxrohde.com/2021/02/21/express-js-on-lambda-getting-started/"&gt;configure AWS Lambda to deploy an Express.js server&lt;/a&gt;. When I put the project for that article together, I used the &lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-rest-api.html"&gt;REST API in API Gateway&lt;/a&gt;. AWS has since releases the new &lt;a href="https://medium.com/avmconsulting-blog/http-apis-in-aws-api-gateway-82572e4ddd65"&gt;HTTP API for API Gateway&lt;/a&gt;. I found that while creating the template for this article, that new HTTP API is faster, cheaper and easier to configure.&lt;/p&gt;

&lt;p&gt;Further, after implementing a few APIs with the &lt;a href="https://goldstack.party/templates/express-lambda"&gt;Express.js template&lt;/a&gt;, I realised using Express.js to do the routing for a Lambda function &lt;a href="https://maxvynohradov.github.io/blog/six-reasons-why-you-shouldn-t-run-express-js-inside-aws-lambda/"&gt;may not be the best way to go about things&lt;/a&gt;; especially since the size of the Lambdas I had to deploy was often easily above 1 MB in size. This resulted in rather long cold start times (~1 s).&lt;/p&gt;

&lt;p&gt;I have thus created this new template from the ground up to enable developing APIs that are optimised for serverless deployments. Depending on the dependencies used in a Lambdas, APIs developed with this template should support Lambda cold starts in the single-digit milliseconds. See below an execution log for a Lambda cold start for an API from the example project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--76k0cLP4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.goldstack.party/img/202201/lambda_cold_start.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--76k0cLP4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.goldstack.party/img/202201/lambda_cold_start.png" alt="Lambda cold start times" width="880" height="64"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note here that the most time is consumed by &lt;code&gt;Init Duration: 132.36 ms&lt;/code&gt; which relates to AWS setting up some basic infrastructure for the Lambda.&lt;/p&gt;

&lt;p&gt;Overall it took me a fair amount of time to get a basic API up and running and I hope that this blog post, the &lt;a href="https://github.com/mxro/typescript-serverless-api"&gt;example project&lt;/a&gt; and &lt;a href="https://goldstack.party/templates/lambda-api"&gt;template&lt;/a&gt; can help others to start working on their API quicker, rather than having to mock around with AWS and TypeScript configuration. Please feel free to head over to the &lt;a href="https://github.com/goldstack/goldstack#readme"&gt;Goldstack GitHub project&lt;/a&gt; if you encounter any issues or have ideas for further improvement.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/terraform-aws-modules/terraform-aws-apigateway-v2"&gt;AWS API Gateway v2 (HTTP/Websocket) Terraform module&lt;/a&gt; - Provides a good integrated example of how to configure most aspects of a Lambda integration&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ksarath.medium.com/provisioning-aws-api-gateway-using-terraform-95f64b492397"&gt;Provisioning AWS API Gateway using Terraform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://towardsaws.com/how-to-prevent-aws-sam-from-creating-the-default-stage-in-api-gateway-stage-6f4950d08c7"&gt;How to prevent AWS SAM from creating the default “Stage” in the API gateway stage&lt;/a&gt; - I came across a similar error but since I am using Terraform this was caused by the HTTP APIs &lt;em&gt;quick create&lt;/em&gt; (see &lt;a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/apigatewayv2_api#target"&gt;apigatewayv2_api#target&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://serverless.pub/aws-lambda-node-sourcemaps/"&gt;How to use source maps in AWS Lambda with Node.js&lt;/a&gt; - I used to use &lt;a href="https://www.npmjs.com/package/source-map-support"&gt;source-map-support&lt;/a&gt; before but this is &lt;a href="https://nodejs.medium.com/source-maps-in-node-js-482872b56116"&gt;no longer need in Node v12+&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;This article was originally published on the Full Stack Blog: &lt;a href="https://maxrohde.com/2022/01/04/serverless-api-with-typescript-on-aws/"&gt;Serverless API with TypeScript on AWS&lt;/a&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>aws</category>
      <category>terraform</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Usando &lt;script setup&gt; no vueJS3</title>
      <author>Italo Barros</author>
      <pubDate>Wed, 12 Jan 2022 20:50:15 +0000</pubDate>
      <link>https://dev.to/italobarrosme/usando-no-vuejs3-4co1</link>
      <guid>https://dev.to/italobarrosme/usando-no-vuejs3-4co1</guid>
      <description>&lt;p&gt;No dia a dia do desenvolvimento buscamos sempre escrever menos e entregar mais, no vue3 utilizo do Composition API para buscar alcançar esse objetivo e a um tempo mudei minha abordagem de escrever e definir componentes Vue utilizando da feature &lt;code&gt;&amp;lt;script setup&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cK5pueHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fjafndi1ys7o9apzqzgn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cK5pueHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fjafndi1ys7o9apzqzgn.png" alt="Bau com luz verde" width="443" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O VueJS 3 introduziu o &lt;code&gt;&amp;lt;script setup&amp;gt;&lt;/code&gt;que é um syntax sugar para reduzir a verbosidade no &lt;strong&gt;Composition API&lt;/strong&gt; dentro de componentes de arquivos únicos (SFCs) além de reduzir a verbosidade outros benefícios ele nos traz.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Capacidade de declarar props e eventos emitidos usando TypeScript puro&lt;/li&gt;
&lt;li&gt;Melhor desempenho de tempo de execução.&lt;/li&gt;
&lt;li&gt;Código mais enxutos com menos clichês&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Exemplo de código &lt;strong&gt;SEM&lt;/strong&gt; o &lt;code&gt;&amp;lt;script setup&amp;gt;&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U60FSArL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6z28wyasz7lpbcfwt2be.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U60FSArL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6z28wyasz7lpbcfwt2be.png" alt="Image description" width="430" height="398"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exemplo de código &lt;strong&gt;COM&lt;/strong&gt; o &lt;code&gt;&amp;lt;script setup&amp;gt;&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ol8oOJ6B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rx2dvdtqgflo0p8ekf2r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ol8oOJ6B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rx2dvdtqgflo0p8ekf2r.png" alt="Image description" width="416" height="223"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Observe como o mesmo código ficou bem mais enxuto!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ao usar &lt;code&gt;&amp;lt;script setup&amp;gt;&lt;/code&gt;, quaisquer “&lt;em&gt;top-level bindings&lt;/em&gt;” (incluindo variáveis e declarações de função) declaradas dentro do &lt;code&gt;&amp;lt;script setup&amp;gt;&lt;/code&gt; são automaticamente expostas ao template.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZYIzAVpe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sxi21u992p1xtejlvibr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZYIzAVpe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sxi21u992p1xtejlvibr.png" alt="Image description" width="303" height="278"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Como também &lt;code&gt;“Importações”&lt;/code&gt; podem ser utilizadas diretamente em expressões do template sem precisar expô-la no &lt;code&gt;methods&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---px2Fcqg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws8lktawkalg5xsrmh4l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---px2Fcqg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws8lktawkalg5xsrmh4l.png" alt="Image description" width="428" height="248"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reatividade"&gt;
  &lt;/a&gt;
  Reatividade
&lt;/h3&gt;

&lt;p&gt;O estado reativo precisa ser criado explicitamente, semelhante ao &lt;code&gt;setup()&lt;/code&gt;&lt;br&gt;
refs são automaticamente desempacotadas quando referenciados no template&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c8LAy-zX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bb819r8f24yp8qdqsecn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c8LAy-zX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bb819r8f24yp8qdqsecn.png" alt="Image description" width="510" height="239"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#componentes"&gt;
  &lt;/a&gt;
  Componentes
&lt;/h3&gt;

&lt;p&gt;Só precisamos importá-los no &lt;code&gt;&amp;lt;script setup&amp;gt;&lt;/code&gt;, podem ser usados diretamente como tags no nosso template, é fortemente recomendado o uso de &lt;code&gt;“PascalCase”&lt;/code&gt; para manter a consistência. Também ajuda a diferenciar dos elementos personalizados nativos.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w2cJ1lir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1nmqkvkxmj6ykn33c8ak.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w2cJ1lir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1nmqkvkxmj6ykn33c8ak.png" alt="Image description" width="510" height="215"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#componentes-din%C3%A2micos"&gt;
  &lt;/a&gt;
  Componentes dinâmicos
&lt;/h3&gt;

&lt;p&gt;Como os componentes são referenciados como variáveis, você usa o &lt;code&gt;:is&lt;/code&gt; para vinculo dinâmico. Observe que podem ser usadas expressões condicionais.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iQLpa2m---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bvyuw6w78l3y7bp3e2h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iQLpa2m---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bvyuw6w78l3y7bp3e2h.png" alt="Image description" width="486" height="266"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#components-recursivos"&gt;
  &lt;/a&gt;
  Components recursivos
&lt;/h3&gt;

&lt;p&gt;Um componente pode se referir implicitamente a si mesmo por meio de seu nome de arquivo em seu template.&lt;br&gt;
Você também pode utilizar o alias da importação.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qVhaRL0X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/evc8dcz4q4t77r4gl1x3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qVhaRL0X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/evc8dcz4q4t77r4gl1x3.png" alt="Image description" width="492" height="428"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#diretivas-personalizadas"&gt;
  &lt;/a&gt;
  Diretivas Personalizadas
&lt;/h3&gt;

&lt;p&gt;As diretivas personalizadas registradas globalmente funcionam conforme importadas e as locais podem ser usadas diretamente no template.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Mas há uma restrição a ser observada: você deve nomear as diretivas personalizadas locais de acordo com o seguinte esquema: &lt;code&gt;vNonmeDaDirective&lt;/code&gt; para que elas possam ser usadas diretamente no modelo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RTJU87V---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ge3ls0bu8d7v7je5p03t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RTJU87V---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ge3ls0bu8d7v7je5p03t.png" alt="Image description" width="492" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#props-e-emits"&gt;
  &lt;/a&gt;
  Props e emits
&lt;/h3&gt;

&lt;p&gt;Para declaração de &lt;code&gt;props&lt;/code&gt; e &lt;code&gt;emits&lt;/code&gt;, você de usar o &lt;code&gt;defineProps&lt;/code&gt; e &lt;code&gt;defineEmits&lt;/code&gt; respectivamente.&lt;br&gt;
O &lt;code&gt;defineProps&lt;/code&gt; e &lt;code&gt;defineEmits&lt;/code&gt; sao macros do compilador utilizáveis apenas no &lt;br&gt;
&lt;code&gt;&amp;lt;script setup&amp;gt;&lt;/code&gt; precisam ser previmente importados.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PRk3-Tcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6yebzn3jdsg1lp8nw24.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PRk3-Tcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6yebzn3jdsg1lp8nw24.png" alt="Image description" width="461" height="706"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#defineexpose"&gt;
  &lt;/a&gt;
  defineExpose
&lt;/h3&gt;

&lt;p&gt;Componentes usando &lt;code&gt;&amp;lt;script setup&amp;gt;&lt;/code&gt; são fechados por padrão.&lt;/p&gt;

&lt;p&gt;Para expor explicitamente as propriedades em um &lt;code&gt;&amp;lt;script setup&amp;gt;&lt;/code&gt; use a &lt;code&gt;defineExpose&lt;/code&gt; que também é um macro.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AgWCfMre--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5cuaxncqgjfmblmz7uu5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AgWCfMre--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5cuaxncqgjfmblmz7uu5.png" alt="Image description" width="560" height="397"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ciclo-de-vida-do-vue-com-raw-ltscript-setupgt-endraw-"&gt;
  &lt;/a&gt;
  Ciclo de vida do vue com &lt;code&gt;&amp;lt;script setup&amp;gt;&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Podemos registrar os &lt;code&gt;hook&lt;/code&gt; de ciclo de vida do componente usando métodos &lt;code&gt;onX&lt;/code&gt; , que podemos importar da biblioteca.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--25djHxsv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1zjakrfyqdmjkyxsz5zn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--25djHxsv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1zjakrfyqdmjkyxsz5zn.png" alt="Image description" width="352" height="198"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--stVL9IBx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xaumonganosa0uowluo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--stVL9IBx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xaumonganosa0uowluo.png" alt="Image description" width="190" height="548"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#propriedades-computadas"&gt;
  &lt;/a&gt;
  Propriedades Computadas
&lt;/h3&gt;

&lt;p&gt;Podemos declarar uma propriedade computada que é atualizada automaticamente sempre, dependendo da propriedade ou dos dados alterados.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PqQ8KTpz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5acvobte7dx7bsa1mryh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PqQ8KTpz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5acvobte7dx7bsa1mryh.png" alt="Image description" width="316" height="322"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#propriedades-watches"&gt;
  &lt;/a&gt;
  Propriedades watches
&lt;/h3&gt;

&lt;p&gt;Podemos reagir a alterações de dados através da opção de watches fornecida pelo Vue. Isso é mais útil quando queremos realizar operações assíncronas ou caras em resposta a alterações.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xU21cm05--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ja809oxhtfh33jgk0668.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xU21cm05--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ja809oxhtfh33jgk0668.png" alt="Image description" width="445" height="266"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;referências&lt;/em&gt;&lt;br&gt;
&lt;a href="https://v3.vuejs.org/api/sfc-script-setup.html#basic-syntax"&gt;https://v3.vuejs.org/api/sfc-script-setup.html#basic-syntax&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#considera%C3%A7%C3%B5es-finais"&gt;
  &lt;/a&gt;
  Considerações finais
&lt;/h3&gt;

&lt;p&gt;Agora, com a &lt;code&gt;&amp;lt;script setup&amp;gt;&lt;/code&gt; , sinto que meu código esteja mais simplificado, fácil de ler.Essa forma ajuda muito no code review ganhamos tempo. A produtividade vem aumentando de forma consistente, focando no &lt;code&gt;clean code&lt;/code&gt;. E com o par com ferramentas como &lt;a href="https://vueuse.org/"&gt;VueUse&lt;/a&gt; ou seus próprios /composables essa produtividade só aumenta.&lt;/p&gt;

&lt;p&gt;Espero ter ajudado com um pouco de conhecimento a você caro leitor!&lt;br&gt;
y-&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>MongShare - Share Code</title>
      <author>Rajvir Singh</author>
      <pubDate>Wed, 12 Jan 2022 20:15:18 +0000</pubDate>
      <link>https://dev.to/rajvirsingh1313/mongshare-share-code-3hea</link>
      <guid>https://dev.to/rajvirsingh1313/mongshare-share-code-3hea</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;MongShare helps with sharing your code. Users can share the code with others through a link, and the code would be editable with a password created by the author.&lt;/p&gt;

&lt;p&gt;MongShare uses the MongoDB Atlas as a database and Next.js as a frontend.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Choose Your Own Adventure&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/RajvirSingh1313"&gt;
        RajvirSingh1313
      &lt;/a&gt; / &lt;a href="https://github.com/RajvirSingh1313/MongShare"&gt;
        MongShare
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Share Code With MongShare
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
  &lt;a rel="noopener noreferrer" href="https://github.com/RajvirSingh1313/MongShare./public/Banner.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wjXjUK9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/RajvirSingh1313/MongShare./public/Banner.png"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/a2ef46f4aec1799b4366d5dd9e4cc60c250b9a4a1e0a4cea21bae63660b63a25/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e6578742e6a732d3030303030303f7374796c653d666f722d7468652d6261646765266c6f676f3d6e657874646f746a73266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/a2ef46f4aec1799b4366d5dd9e4cc60c250b9a4a1e0a4cea21bae63660b63a25/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e6578742e6a732d3030303030303f7374796c653d666f722d7468652d6261646765266c6f676f3d6e657874646f746a73266c6f676f436f6c6f723d7768697465" alt=""&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/72e92f69f36703548704a9eeda2a9889c2756b5e08f01a9aec6e658c148d014e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d6f6e676f44422d3445413934423f7374796c653d666f722d7468652d6261646765266c6f676f3d6d6f6e676f6462266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/72e92f69f36703548704a9eeda2a9889c2756b5e08f01a9aec6e658c148d014e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d6f6e676f44422d3445413934423f7374796c653d666f722d7468652d6261646765266c6f676f3d6d6f6e676f6462266c6f676f436f6c6f723d7768697465" alt=""&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/93c855ae825c1757f3426f05a05f4949d3b786c5b22d0edb53143a9e8f8499f6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4a6176615363726970742d3332333333303f7374796c653d666f722d7468652d6261646765266c6f676f3d6a617661736372697074266c6f676f436f6c6f723d463744463145"&gt;&lt;img src="https://camo.githubusercontent.com/93c855ae825c1757f3426f05a05f4949d3b786c5b22d0edb53143a9e8f8499f6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4a6176615363726970742d3332333333303f7374796c653d666f722d7468652d6261646765266c6f676f3d6a617661736372697074266c6f676f436f6c6f723d463744463145" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h1&gt;
MongShare&lt;/h1&gt;
&lt;h3&gt;
&lt;b&gt;Sharing Code With MongShare!&lt;/b&gt;
&lt;/h3&gt;
&lt;h2&gt;
About&lt;/h2&gt;
&lt;p&gt;MongShare helps with sharing your code. It is made with MongoDB &amp;amp; Next.js. MongShare is a hackathon project for &lt;a href="https://dev.to/devteam/announcing-the-mongodb-atlas-hackathon-on-dev-4b6m" rel="nofollow"&gt;MongoDB Atlas Hackathon on DEV&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Local Development&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3&gt;
Fork the repo on GitHub&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;
Clone the repo&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;git clone https://github.com/rajvirsingh1313/mongshare
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; mongshare&lt;/pre&gt;

&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3&gt;
Create a next.config.js file in the root dir&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-smi"&gt;module&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;exports&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-c1"&gt;env&lt;/span&gt;: &lt;span class="pl-kos"&gt;{&lt;/span&gt;
    &lt;span class="pl-c1"&gt;ATLAS_URI&lt;/span&gt;:
      &lt;span class="pl-s"&gt;"mongodb+srv://:@cluster0.lydaj.mongodb.net/mongshare?retryWrites=true&amp;amp;w=majority"&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
    &lt;span class="pl-c1"&gt;DOMAIN&lt;/span&gt;: &lt;span class="pl-s"&gt;"http://localhost:3000"&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3&gt;
Install Dependencies&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm i&lt;/pre&gt;

&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3&gt;
Run the development server&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm run dev
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or&lt;/span&gt;
yarn dev&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Open &lt;a href="http://localhost:3000" rel="nofollow"&gt;http://localhost:3000&lt;/a&gt; with your browser to see the result.&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/RajvirSingh1313/MongShare"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VUeUIO7g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzvhqik7f22apw1vweil.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VUeUIO7g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzvhqik7f22apw1vweil.png" alt="Image description" width="880" height="429"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8epEjAN7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8ety5rnhcqqol8y1z3j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8epEjAN7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8ety5rnhcqqol8y1z3j.png" alt="Image description" width="880" height="429"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I want to thanks the open source community for making my life easy. I also want to thanks the Dev.to and MongoDB for hosting this hackathon.&lt;/p&gt;

</description>
      <category>atlashackathon</category>
    </item>
    <item>
      <title>Rails 7, Bootstrap 5 and importmaps without nodejs</title>
      <author>Alessandro Rodi</author>
      <pubDate>Wed, 12 Jan 2022 20:01:48 +0000</pubDate>
      <link>https://dev.to/coorasse/rails-7-bootstrap-5-and-importmaps-without-nodejs-4g8</link>
      <guid>https://dev.to/coorasse/rails-7-bootstrap-5-and-importmaps-without-nodejs-4g8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#our-goal-remove-nodejs"&gt;
  &lt;/a&gt;
  Our goal: remove nodejs
&lt;/h2&gt;

&lt;p&gt;As many other people in the Rails community, I started setting up brand new Rails 7 projects, and I need to re-learn, at least partially, how to bundle the assets and distribute them.&lt;/p&gt;

&lt;p&gt;I never fell in love with TailwindCSS, and therefore I usually setup my Rails apps to use Bootstrap as default.&lt;/p&gt;

&lt;p&gt;But what I really like about Rails 7, is the idea of being able to get rid of not only webpack, but of nodejs entirely. The new importmaps feature is really appealing to me and I'd like to use it as long as I don't need to bundle my javascript.&lt;/p&gt;

&lt;p&gt;I have to say that &lt;code&gt;esbuild&lt;/code&gt; does already a pretty cool job compared to &lt;code&gt;webpack&lt;/code&gt; to simplify our lives, and make the process faster, but as long as I don't need bundling, I'd like to not have a package.json file and being dependent on nodejs for my Rails app. &lt;/p&gt;

&lt;p&gt;A pure and simple sprockets + importmaps app with no Foreman, no &lt;code&gt;bin/dev&lt;/code&gt;, no &lt;code&gt;yarn build --watch&lt;/code&gt; stuff.&lt;/p&gt;

&lt;p&gt;Bootstrap is made of two parts: CSS and javascript. So I want to use importmaps for the javascript part and rely on sprockets for the CSS compilation from SCSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rails-default"&gt;
  &lt;/a&gt;
  Rails default
&lt;/h2&gt;

&lt;p&gt;By default, Rails 7 provides a new option &lt;code&gt;--css=bootstrap&lt;/code&gt;, &lt;br&gt;
but with my great surprise, this option adds both &lt;code&gt;jsbundling-rails&lt;/code&gt;, &lt;code&gt;cssbundling-rails&lt;/code&gt;, a &lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;esbuild&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not as expected. Not what I want.&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#how-to-configure-rails-and-bootstrap-without-nodejs"&gt;
  &lt;/a&gt;
  How to configure Rails and Bootstrap without nodejs
&lt;/h1&gt;

&lt;p&gt;Default is not what I want, but I can still reach the goal and here I'll explain how:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stick with just &lt;code&gt;rails new myapp&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
This will setup exactly the tools I want: &lt;code&gt;sprockets&lt;/code&gt; and &lt;code&gt;importmaps&lt;/code&gt;. It will also setup automatically for me stimulus and turbo, which is great because I use them most of the time anyway.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Add &lt;code&gt;bootstrap-rails&lt;/code&gt; gem&lt;/strong&gt; and enable the gem &lt;code&gt;sassc-rails&lt;/code&gt; in the Gemfile. This will allow us to compile bootstrap from SCSS without node.&lt;/p&gt;

&lt;p&gt;You can simply import Bootstrap styles in &lt;code&gt;app/assets/stylesheets/application.scss&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// here your custom bootstrap variables...&lt;/span&gt;
&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;"bootstrap"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it for the CSS part. Running &lt;code&gt;rails assets:precompile&lt;/code&gt; will generate what you want.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For the javascript part&lt;/strong&gt; we need to do three things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Precompile the bootstrap.min.js that comes with the gem, by adding to &lt;code&gt;config/initializers/assets.rb&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;assets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;precompile&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="sx"&gt;%w( bootstrap.min.js popper.js )&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;pin the compiled asset in &lt;code&gt;config/importmap.rb&lt;/code&gt;:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;pin&lt;/span&gt; &lt;span class="s2"&gt;"popper"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="s1"&gt;'popper.js'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;preload: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="n"&gt;pin&lt;/span&gt; &lt;span class="s2"&gt;"bootstrap"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="s1"&gt;'bootstrap.min.js'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;preload: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Include bootstrap in your &lt;code&gt;app/javascript/application.js&lt;/code&gt;:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;popper&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bootstrap&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I prefer this approach rather than pinning a CDN because we avoid diverging versions of Bootstrap.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This is all you need to have Bootstrap fully working on Rails 7 without using node. &lt;/p&gt;

&lt;p&gt;If you like this guide you can &lt;a href="https://twitter.com/coorasse"&gt;follow me on Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
      <category>turbo</category>
      <category>bootstrap</category>
    </item>
    <item>
      <title>From Devs, to VPs, to Co-Founders: 10Xing a Startup 5,000 Miles Apart</title>
      <author>Conor Bronsdon</author>
      <pubDate>Wed, 12 Jan 2022 19:54:48 +0000</pubDate>
      <link>https://dev.to/linearb/from-devs-to-vps-to-co-founders-10xing-a-startup-5000-miles-apart-3137</link>
      <guid>https://dev.to/linearb/from-devs-to-vps-to-co-founders-10xing-a-startup-5000-miles-apart-3137</guid>
      <description>&lt;p&gt;We knew we had to kick off the new year with something big - so welcome to Season 2 of Dev Interrupted!&lt;/p&gt;

&lt;p&gt;This episode probes the murky depths of a time before the pandemic by exploring the story of &lt;a href="https://linearb.io/"&gt;LinearB&lt;/a&gt;'s founding in 2018, how co-founders Dan Lines and Ori Keren met at Cloudlock in 2012 - and how they decided to co-found a company while 5,000 miles apart.&lt;/p&gt;

&lt;p&gt;Listen as Dev Interrupted host and all-around renaissance man, Dan Lines, steps behind the mic to be interviewed not as host of the podcast, but as COO and co-founder of LinearB. Joining Dan is his good friend and fellow co-founder, Ori Keren, LinearB’s CEO.&lt;/p&gt;

&lt;p&gt;With Producer Conor Bronsdon stepping in to guest host, Dan and Ori detail their transition from developers and VPs at Cloudlock, to deciding to found a company while on separate continents.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://open.spotify.com/embed/episode/77933JVQMAULdpjMYHEzHI" width="100%" height="232px"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  Episode Highlights Include:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://linearb.io/metrics-and-visibility/"&gt;LinearB&lt;/a&gt;’s founding story&lt;/li&gt;
&lt;li&gt;Managing &lt;a href="https://linearb.io/blog/linearb-series-a/"&gt;hypergrowth&lt;/a&gt; 5,000 miles apart&lt;/li&gt;
&lt;li&gt;The importance of choosing the right investors: alignment &amp;gt; money&lt;/li&gt;
&lt;li&gt;Designing a &lt;a href="https://linearb.io/product-manager/"&gt;product&lt;/a&gt; with the goal of a million end users&lt;/li&gt;
&lt;li&gt;How to 10x your startup&lt;/li&gt;
&lt;li&gt;Dan’s favorite guest from season 1 of the &lt;a href="https://devinterrupted.com/podcast/no-continuous-delivery-then-walk-out/"&gt;Dev Interrupted Podcast&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;Starved for top-level software engineering content? Need some good tips on how to manage your team? This article is inspired by &lt;a href="https://devinterrupted.com/podcasts/"&gt;Dev Interrupted&lt;/a&gt; - the go-to podcast for engineering leaders.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Dev Interrupted features expert guests from around the world to explore strategy and day-to-day topics ranging from dev team metrics to accelerating delivery. With new guests every week from Google to small startups, the Dev Interrupted Podcast is a fresh look at the world of software engineering and engineering management.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devinterrupted.com/podcasts/"&gt;&lt;strong&gt;&lt;em&gt;Listen and subscribe on your streaming service of choice today.&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hDZHzvxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wpadq6f64w3zdescv1s3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hDZHzvxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wpadq6f64w3zdescv1s3.png" alt="https://devinterrupted.com/podcasts/" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>startup</category>
      <category>devops</category>
      <category>techtalks</category>
      <category>podcast</category>
    </item>
    <item>
      <title>MERN Stack Web Application - Property Bookings Catalog</title>
      <author>Saravanan G</author>
      <pubDate>Wed, 12 Jan 2022 18:57:44 +0000</pubDate>
      <link>https://dev.to/chefgs/mern-stack-web-application-property-bookings-catalog-2732</link>
      <guid>https://dev.to/chefgs/mern-stack-web-application-property-bookings-catalog-2732</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Created a MERN stack website application used for &lt;code&gt;Property Bookings Catalog&lt;/code&gt; for the submission of &lt;em&gt;&lt;strong&gt;Dev community X  MongoDB Atlas Hackathon&lt;/strong&gt;&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;I've used &lt;code&gt;MongoDB Atlas&lt;/code&gt; AWS Cloud based database Cluster and it serves as the back-end database to the application&lt;/li&gt;
&lt;li&gt;This is my first 3-tier web app development and thanks to this #Atlashackathon for making the opportunity to learn :)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h2&gt;

&lt;p&gt;Choose Your Own Adventure&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Repository is available to view in GitHub and have the detaied &lt;code&gt;README.md&lt;/code&gt; file to explain the project
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/chefgs"&gt;
        chefgs
      &lt;/a&gt; / &lt;a href="https://github.com/chefgs/mern-app"&gt;
        mern-app
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
"Property Bookings Catalog" web app developed using MERN Stack&lt;/h1&gt;
&lt;h2&gt;
Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/chefgs/mern-app#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/chefgs/mern-app#mern-architecture"&gt;MERN Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/chefgs/mern-app#steps-to-create-the-application"&gt;Steps to create the application&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/chefgs/mern-app#create-mongodb-cluster-and-get-db-connection-string"&gt;Create MongoDB Cluster and Get DB Connection String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/chefgs/mern-app#setting-up-application-to-connect-with-mongodb"&gt;Setting up Application to connect with MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/chefgs/mern-app#start-the-express-server"&gt;Start the Express server&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/chefgs/mern-app#method-1"&gt;Method 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/chefgs/mern-app#method-2"&gt;Method 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/chefgs/mern-app#start-the-react-app"&gt;Start the React app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/chefgs/mern-app#testing-application-and-accessing-ui"&gt;Testing Application and Accessing UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/chefgs/mern-app#reference"&gt;Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
Introduction&lt;/h2&gt;
&lt;p&gt;This application is developed for the submission of &lt;em&gt;&lt;strong&gt;Dev community X  MongoDB Hackathon&lt;/strong&gt;&lt;/em&gt;. This is a MERN stack based Web Application.&lt;/p&gt;
&lt;p&gt;MERN stands for MongoDB, Express, React, Node, which are making up the tech stack.&lt;/p&gt;
&lt;p&gt;MongoDB - Popular NoSQL document database
ExpressJS - Node.js web framework
ReactJS - a client-side JavaScript framework
NodeJS - the JavaScript web server&lt;/p&gt;
&lt;p&gt;Express and Node make up the middle (application) tier. Express.js is a server-side web framework, and Node.js the popular and powerful JavaScript server platform. Regardless of which variant you choose, ME(RVA)N is the ideal approach to working…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/chefgs/mern-app"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/chefgs/mern-app#testing-application-and-accessing-ui"&gt;Link to the screenshots&lt;/a&gt; of the application up and running&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Application up and running&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kNsQtG6Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/chefgs/repo_images/blob/master/mern_app.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kNsQtG6Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/chefgs/repo_images/blob/master/mern_app.png%3Fraw%3Dtrue" alt="Screenshot" width="614" height="903"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#developer-details"&gt;
  &lt;/a&gt;
  Developer Details
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.linkedin.com/in/saravanan-gnanaguru-1941a919/"&gt;Saravanan Gnanaguru&lt;/a&gt; - LinkedIn&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/chefgs"&gt;User Chefgs&lt;/a&gt; - GitHub&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>atlashackathon</category>
      <category>mongodb</category>
      <category>javascript</category>
      <category>mern</category>
    </item>
    <item>
      <title>Is it worth to learn Python in 2022?</title>
      <author>Hassan Tahir</author>
      <pubDate>Wed, 12 Jan 2022 18:55:19 +0000</pubDate>
      <link>https://dev.to/thehassantahir/is-it-worth-to-learn-python-in-2022-18p1</link>
      <guid>https://dev.to/thehassantahir/is-it-worth-to-learn-python-in-2022-18p1</guid>
      <description>&lt;p&gt;Python has gained a massive amount of attention in the past 5 years. Anyone who is related to the development industry hears the word Python (the first thing that jumps in mind is programming language) instead of a snake. We are in 2022 and we should change the working trends and patterns we were following in the previous year 2021, Why? It helps to innovate and make the mind more productive. This is the reason every year we got 60k search count on python programming language, &lt;strong&gt;is python worth learning in 2022?&lt;/strong&gt; (w.r.t years)&lt;/p&gt;

&lt;p&gt;Here is why you should or should not learn python this year! &lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;. Python is a beginner friendly language. It is very simple to understand. Any non tech can learn this language.&lt;br&gt;
&lt;strong&gt;2&lt;/strong&gt;. According to 2021 development market python developers are taking high salaries from 72,000$ - 1,44,000$ per year as comparing with other developers.&lt;br&gt;
&lt;strong&gt;3&lt;/strong&gt;. Python is very popular because of it’s multi-platform integration as well as with other major and minor programming languages.&lt;br&gt;
&lt;strong&gt;4&lt;/strong&gt;. Thousands of Multinational companies and organizations are using python such as Uber, NASA, Instagram, NSA and many more.&lt;br&gt;
&lt;strong&gt;5&lt;/strong&gt;. Python is &lt;a href="https://github.com/python"&gt;open-source&lt;/a&gt; so it has the most powerful and massive frameworks and libraries which are more secure and faster than most of the other languages. Such as, Pandas &amp;amp; Numpy for Data Science and Deep Machine learning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Cons&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;. Lack of logic in design programs.&lt;br&gt;
&lt;strong&gt;2&lt;/strong&gt;. Slightly slower than other major languages.&lt;br&gt;
&lt;strong&gt;3&lt;/strong&gt;. Python programs do not compile before execution instead under development you have to run it each time.&lt;/p&gt;

&lt;p&gt;As we can see Python don't have any major issues for not eligible to be learned in 2022. I personally suggest every beginner to start learn Python as your basic machine language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Comment your views &amp;amp;&lt;br&gt;
Follow me on &lt;a href="https://github.com/thehassantahir"&gt;Github&lt;/a&gt; &amp;amp; &lt;a href="https://twitter.com/thehassantahir"&gt;Twitter&lt;/a&gt; and Sponsor me on&lt;/em&gt;&lt;/strong&gt; 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.patreon.com/hassantahir"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lP059cim--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n16ri16f50t2xf348879.png" alt="Patreon Image" width="340" height="190"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Unknown console API in JS</title>
      <author>Romain Trotard</author>
      <pubDate>Wed, 12 Jan 2022 18:47:09 +0000</pubDate>
      <link>https://dev.to/romaintrotard/unknown-console-api-in-js-2mek</link>
      <guid>https://dev.to/romaintrotard/unknown-console-api-in-js-2mek</guid>
      <description>&lt;p&gt;Are you a fan of &lt;code&gt;console.log&lt;/code&gt; when you debug (instead of using &lt;code&gt;debugger&lt;/code&gt;)? Or you want to make better logging for your scripts / applications?&lt;/p&gt;

&lt;p&gt;You are in the right place! In this article, I gonna show you some console methods that you probably don't know that are going to make your logs better :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#log-with-style-raw-consolelog-endraw-"&gt;
  &lt;/a&gt;
  Log with style: &lt;code&gt;console.log&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Okay, I'm sure you know this one. But did you know you can stylized your text.&lt;br&gt;
You can do this by putting &lt;code&gt;%c&lt;/code&gt; and defining the style in the following parameter (inline css format) before the text you want to stylize.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%c This is a stylized text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color:red;text-decoration: underline;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GOBYtutX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4efpwo2568c5wiuboqwz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GOBYtutX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4efpwo2568c5wiuboqwz.png" alt="Stylized console log" width="689" height="181"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can put multiple different stylized text in a same log:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%c This is a red text %c and a blue text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color:red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color:blue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pHCm2BWm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcmfyltnd51u1i6y92kt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pHCm2BWm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcmfyltnd51u1i6y92kt.png" alt="Log with multiple colors" width="748" height="204"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can do it with other logging function like &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#make-a-quick-counter-raw-consolecount-endraw-"&gt;
  &lt;/a&gt;
  Make a quick counter: &lt;code&gt;console.count&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;How many times when doing &lt;code&gt;React&lt;/code&gt; you wanted to see how many times a component renders? Yep you can see it with the &lt;strong&gt;React Developper Tools&lt;/strong&gt; but it's not enough quick for me :)&lt;br&gt;
So you can make a counter thanks to &lt;code&gt;console.count&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Render counter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;simple&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bc9aL_2K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yct72d1pc4ewglt0kbxl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bc9aL_2K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yct72d1pc4ewglt0kbxl.gif" alt="console.count example" width="598" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The label is optional, by default it will be "default".&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#log-error-with-assertion-raw-consoleassert-endraw-"&gt;
  &lt;/a&gt;
  Log error with assertion: &lt;code&gt;console.assert&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;If you want to display an error message when a specific assertion is false you can use &lt;code&gt;console.assert&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useMyContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myContextValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MyContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// You probably want to throw an error if it happens&lt;/span&gt;
  &lt;span class="c1"&gt;// It's only an example&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;myContextValue&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;useMyContext has to be used below MyProvider&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;myContextValues&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nljUqp0V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qqkhubojvcb4pqvsy6sc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nljUqp0V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qqkhubojvcb4pqvsy6sc.png" alt="console.assert example" width="880" height="38"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#full-description-of-elements-raw-consoledir-endraw-"&gt;
  &lt;/a&gt;
  Full description of elements: &lt;code&gt;console.dir&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;console.dir&lt;/code&gt; allows you to show a better description of objects. For example when you &lt;code&gt;console.log&lt;/code&gt; a function it will only stringify the function, but with &lt;code&gt;console.dir&lt;/code&gt; it will show you all properties:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myMethod&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myMethod&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s-Tse4b3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v11a0op4z1njw8wq6k80.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s-Tse4b3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v11a0op4z1njw8wq6k80.gif" alt="console.dir example" width="880" height="512"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#improve-readability-raw-consolegroup-endraw-"&gt;
  &lt;/a&gt;
  Improve readability: &lt;code&gt;console.group&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;If you have a lot of logs, it can be difficult to keep track of all these logs. Fortunately, &lt;code&gt;console.group&lt;/code&gt; is here for you.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myMethod&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My method optional label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Log that will be group&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;With this one&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;And this one too&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My method optional label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;myMethod&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Outside log&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wl72Xd4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/il7jnrpwhm49s7nlt0x2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wl72Xd4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/il7jnrpwhm49s7nlt0x2.gif" alt="console.group example" width="880" height="353"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It's possible to nest &lt;code&gt;console.group&lt;/code&gt;. The label is totally optional but can really help you for debugging.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#make-a-nice-table-raw-consoletable-endraw-"&gt;
  &lt;/a&gt;
  Make a nice table: &lt;code&gt;console.table&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;If you want to display data inside a table, you can do it with &lt;code&gt;console.table&lt;/code&gt;. The &lt;strong&gt;first parameter&lt;/strong&gt; is the &lt;strong&gt;data&lt;/strong&gt; to display (an array or object). The &lt;strong&gt;second one&lt;/strong&gt; is the columns to display (optional parameter).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;First algo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3.2s&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Second algo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4.1s&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Guys and girls&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;duration&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UcvxVPt6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75lzyiutwb664krgwoo6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UcvxVPt6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75lzyiutwb664krgwoo6.png" alt="console.table example" width="733" height="128"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#make-timers-raw-consoletime-endraw-"&gt;
  &lt;/a&gt;
  Make timers: &lt;code&gt;console.time&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;When you want to see how long a method takes to run you can use &lt;code&gt;performance.now()&lt;/code&gt; otherwise even easier &lt;code&gt;console.time()&lt;/code&gt;, &lt;code&gt;console.timeEnd()&lt;/code&gt; and &lt;code&gt;console.timeLog()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myMethod&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Do some process&lt;/span&gt;

  &lt;span class="c1"&gt;// If you want to log the time during the process&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Other process&lt;/span&gt;

  &lt;span class="c1"&gt;// Will print how long the method takes to run&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;myMethod&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sej8yQTy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rroksj2ob49f6p9rbs9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sej8yQTy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rroksj2ob49f6p9rbs9.png" alt="console.time example" width="439" height="79"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The label is optional, it will have the "default" label. You cannot start a timer with the same label than already running one.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#display-stacktrace-raw-consoletrace-endraw-"&gt;
  &lt;/a&gt;
  Display stacktrace: &lt;code&gt;console.trace&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;If you want to know where is called your function then &lt;code&gt;console.trace&lt;/code&gt; is your friend and will display the stack trace:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Optional message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SMf-qnaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyog7ty3cf0re7n0u38k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SMf-qnaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyog7ty3cf0re7n0u38k.png" alt="console.trace example" width="350" height="184"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;What is your favorite console command? &lt;br&gt;
Do not hesitate to comment and if you want to see more, you can follow me on &lt;a href="https://twitter.com/romain_trotard"&gt;Twitter&lt;/a&gt; or go to my &lt;a href="https://rainbowapps.io/"&gt;Website&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>react</category>
    </item>
    <item>
      <title>What to ask at job interviews when you are being interviewed</title>
      <author>Maurício Linhares</author>
      <pubDate>Wed, 12 Jan 2022 18:42:17 +0000</pubDate>
      <link>https://dev.to/mauriciolinhares/what-to-ask-at-job-interviews-when-you-are-being-interviewed-f4l</link>
      <guid>https://dev.to/mauriciolinhares/what-to-ask-at-job-interviews-when-you-are-being-interviewed-f4l</guid>
      <description>&lt;p&gt;There are many guides on how to ace job interviews, you'll find books, videos, courses on multiple subjects covering every aspect possible, including even prep that is just for specific companies (like checking questions Facebook is currently asking), but we talk very little on how you should also interview the people you're talking to make sure you do want to work at that place. Switching jobs to find that you ended up in a bad work environment on a dead-end team is demoralizing and might affect your future career prospects.&lt;/p&gt;

&lt;p&gt;Most of the questions here assume the people you're talking to will be at least a little bit truthful in their answers. I'd also recommend exercising your network to find friends or friends of friends that work at the place to verify if the answers are accurate or if they're painting a rosy picture to make sure you accept the offer. Most businesses will have &lt;em&gt;some&lt;/em&gt; of the problems we will be discussing next, so it's going to be up to you to decide if you do want to sign up for these issues or not, there are no perfect places, but you should go in being comfortable on what the challenges are going to be. Glassdoor, Blind, and Fishbowl are usually hit and miss, with stuff being, either too rosy or just hell, so I can't say I find them very effective. &lt;/p&gt;

&lt;p&gt;Also, unless you're going for a director-level/decision-making position, don't trick yourself into thinking you're going to change the whole environment and make it bearable, odds are you won't and the energy you'll spend trying to &lt;em&gt;fix&lt;/em&gt; it without having the actual power to do so would be better spent on a job that doesn't require you do pull a Sisyphus every day. The job market is red hot right now, and you should be able to give that bad-looking job a pass. &lt;/p&gt;

&lt;p&gt;Now let's look at a couple of questions you could ask to figure out if it is a good job or a tar pit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-oncall-schedule-like-how-many-incidents-does-the-team-handle-every-week-on-average"&gt;
  &lt;/a&gt;
  What is the on-call schedule like? How many incidents does the team handle every week on average?
&lt;/h2&gt;

&lt;p&gt;In most sane places, the teams that build apps are also responsible for ensuring they're running as expected in production. This means that when something bad happens, someone on the team will be called/paged and get the dreaded &lt;em&gt;PagerDuty alert, you have one incident&lt;/em&gt; phone call. Most of us have been there, and pager pain is very real. Working on a team that is firefighting all the time is the quickest path to burnout you could take as you'll be constantly worried about the next time you'll be fast asleep and the phone is going to ring, destroy your night and the next day.  &lt;/p&gt;

&lt;p&gt;What you're looking for here is a clear on-call schedule with multiple people on rotation and a secondary that also rotates. The schedules should usually be a couple of days long (I'd say a week is generally good enough), with at least two weeks off until you're on call again. Back-to-back on-call schedules are demanding, especially if incidents are frequent because there is very little time you're not worried about incidents.&lt;/p&gt;

&lt;p&gt;How much time does the team spend firefighting or doing unplanned work? If a team spends over 30% of its time just fixing bugs and working through incidents instead of building features, there are deeper issues on the team itself. The root causes here could be lack of investment in reliability, automation, lousy planning, death marches, none of which are a good signs. You could dig deeper here with the people you're talking to as to what is going to be done to bring the team back into a more manageable schedule and lower the amount of toil/bugs/incidents if there's no plan or they think this isn't a problem (&lt;em&gt;it's just how we do work&lt;/em&gt;), it's a &lt;em&gt;pass&lt;/em&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-engineering-onboarding-process-like-what-about-onboarding-on-the-team-itself"&gt;
  &lt;/a&gt;
  What is the engineering onboarding process like? What about onboarding on the team itself?
&lt;/h2&gt;

&lt;p&gt;It might sound like a &lt;em&gt;first world problem&lt;/em&gt; thing, but having a well-defined onboarding process is critical to having employees that start contributing to the bottom line as fast as possible. Businesses that are hiring but have no plan to get the people they're hiring into actually doing the job aren't doing a good job at hiring and might not be doing an excellent job at other places.&lt;/p&gt;

&lt;p&gt;Depending on the company's size, they might not have a general engineering and a specific team onboarding; there could just be one, that's not a problem. What you want to know is what will happen once you join and the expectations. Is there going to be a buddy taking you through the process, someone you can ask questions and get unstuck? How will you get used to the projects you'll be working on? Is there documentation? What are the first things you're going to be working on?&lt;/p&gt;

&lt;p&gt;The expectation here is that they won't just say &lt;em&gt;here's the source code, now figure it out&lt;/em&gt; but that there is some well-defined way for you to go along (preferably with someone else on the team as a pair) to get you used to the tooling, code, development and deployment process. If there is no onboarding process at all, be ready just to be thrown at stuff and be left to fend for yourself and hope for the best. While it's entirely possible to make this work (as I have had to make this work multiple times) I'd rather be at a place that is going to guide and help me get productive faster instead of having to ask &lt;em&gt;please can you help me&lt;/em&gt; to multiple people that might or might not care about helping me out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-long-has-the-person-managing-the-team-been-a-manager"&gt;
  &lt;/a&gt;
  How long has the person managing the team been a manager?
&lt;/h2&gt;

&lt;p&gt;It might sound a bit unfair, but, especially as you get more senior, joining a team in a new company with a manager that does not have much experience managing people is risky. While having a manager with a lot of experience isn't a guarantee that everything will be unicorns and rainbows, a new manager is more likely to lack many skills required to build and lead an effective team. &lt;/p&gt;

&lt;p&gt;I've heard horror stories from friends that got a new job with a manager that had just been promoted after a stellar stint as an Individual Contributor, which led to a lot of clout in the business, but that couldn't manage people at all. Given the new manager's success in his previous career, he was given a lot of leeway on running the team, and most of the criticism would fall on deaf ears, making it hard to move the needle in any direction. This leads to team members not being promoted, not being assigned to important/impactful projects, and not being promoted. &lt;/p&gt;

&lt;p&gt;Being under a bad manager is not only bad for your mental health, but it's also bad for your career as it might stall your professional development and keep you from moving at the pace you expected you'd go. So, beware, joining a team with a newly minted manager carries many risks. Make sure you know what you're signing up for if this is the case. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-vision-for-the-team-what-are-the-important-projects-it-is-taking-on-in-the-next-12-months-what-would-be-my-goalsprojects-if-i-joined"&gt;
  &lt;/a&gt;
  What is the vision for the team? What are the important projects it is taking on in the next 12 months? What would be my goals/projects if I joined?
&lt;/h2&gt;

&lt;p&gt;Here what you're looking for is to make sure the team you're joining is healthy and doing important work for the business. Teams should have large, impactful projects they have planned and are working on, they should have a vision of what the team's job is, and as they're hiring new people, they need to have a reason for why they would be hiring you.&lt;/p&gt;

&lt;p&gt;If the team doesn't have important projects to work on, odds are it might not be an essential part of the business, or the manager hasn't been able to pull important work or doesn't want to do meaningful work. It's not unusual for, in larger companies, there to be teams that are just coasting and delivering small things here and there. If that's what you're looking for, the answers to these questions might give you hints this is it.&lt;/p&gt;

&lt;p&gt;Otherwise, if you want to do impactful and essential work, you want to make sure the folks you're talking to have good answers. They should have a clear vision for what the job is, it can't just be "deliver features", every team is working on some domain-specific work, so it has to be "improve the way warehouses are managed", "deliver code faster to production" (if they're a platform team, for instance). And on that vision, they should also have cool and exciting projects they're working on that have a tangible impact on the business, like building a new database-as-a-service product to capture a growing market. This kind of team allows you to grow into a better professional and offers challenges that will get you more experience and promotions.&lt;/p&gt;

&lt;p&gt;And last but not least, ask why they're hiring a new person and what would be the work you'd be doing, at what level you're expected to deliver. Are you here to lead a new project? Continue an existing project? What are the opportunities available for you to grow? Having good answers for these questions means they've done their homework on why they need to hire someone else, and you'll get a feel of the expectations they're placing on you if you join. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-there-a-career-development-plan-and-what-does-it-look-like"&gt;
  &lt;/a&gt;
  Is there a career development plan, and what does it look like?
&lt;/h2&gt;

&lt;p&gt;You might be in for the love of writing code and stuff, but we all want to be paid and eventually make more money next year than we do right now, and to do so, you have to progress on your career in some way. Ideally, you want the place to have a ladder with multiple levels and well-defined expectations for what you should be doing to get to the next level. Not knowing what you have to do to be promoted leaves you at the whims of your manager, and that is going to be the luck of the draw, the manager might work to get you promoted or not, taking most of the possibility of you influencing this out of your hands.&lt;/p&gt;

&lt;p&gt;Having a known set of activities you have to attain to move up allows you to plan your work accordingly, ticking the boxes that need to be ticked instead of just randomly doing stuff and hoping for the best. That also allows you to decide the crucial pieces of work that need to be done and focus on them instead of over-engineering or investing too much time on stuff that won't matter that much for your career. This gives you some power to decide your path instead of leaving it all in someone else's hands. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-selfdevelopment-benefits-provided"&gt;
  &lt;/a&gt;
  What are the self-development benefits provided?
&lt;/h2&gt;

&lt;p&gt;No tech company survives with a workforce that doesn't improve, so most of them will offer a stipend or access to education related to the work. You want to be at a place that will buy you that book you need for some new project you're working on or pay for a course or event you feel like will be essential for your productivity at work.&lt;/p&gt;

&lt;p&gt;Places that require you to invest in yourself even when your productivity improvement goes mainly to the business aren't the best place to stay.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pick-your-poison"&gt;
  &lt;/a&gt;
  Pick your poison
&lt;/h2&gt;

&lt;p&gt;No place will ever be the perfect workplace; you're going to find issues, problems, walls that can't be breached, and people that can't be reasoned with; still, getting more information allows you to make a better decision when accepting a job or not. You should always ask as many questions as you can about the company, the business, the team, and the people surrounding the team to ensure that it is the place you want to work. Don't forget your job is most likely the single thing you're going to spend most of your time in for a long while. You have to make sure this time is worth it.&lt;/p&gt;

</description>
      <category>career</category>
      <category>motivation</category>
      <category>watercooler</category>
    </item>
  </channel>
</rss>
