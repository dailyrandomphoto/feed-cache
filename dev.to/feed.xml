<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>PASSWORD GENERATOR using HTML, CSS, and Javascript</title>
      <author>Divyamcm</author>
      <pubDate>Wed, 20 Oct 2021 10:44:35 +0000</pubDate>
      <link>https://dev.to/divyamcm/password-generator-using-html-css-and-javascript-3a0c</link>
      <guid>https://dev.to/divyamcm/password-generator-using-html-css-and-javascript-3a0c</guid>
      <description>&lt;p&gt;==================================================&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I0QIFUj6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1477039181047-efb4357d01bd%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1470%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I0QIFUj6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1477039181047-efb4357d01bd%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1470%26q%3D80" alt=""&gt;&lt;/a&gt;Photo by &lt;a href="https://unsplash.com/@markusspiske?utm_source=medium&amp;amp;utm_medium=referral"&gt;Markus Spiske&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dear Reader,&lt;/p&gt;

&lt;p&gt;Let‚Äôs build a password generator which generate passwords of different lengths and which can include or exclude special characters in the generated passwords based on user selection. This is going to be simple. Stay with me till the end. üîê&lt;/p&gt;

&lt;p&gt;Folder structure:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;em&gt;index.html ‚Äî contains the HTML layout which defines the element structure that would be shown on the page.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt; &lt;em&gt;style.css- contains CSS code for styling. Using CSS we can style the different portions to make them more visually appealing.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt; &lt;em&gt;script.js ‚Äî contains Javascript code where all the functions are placed.&lt;/em&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#html-layout"&gt;
  &lt;/a&gt;
  HTML Layout
&lt;/h1&gt;

&lt;p&gt;Open VSCode and create the basic HTML structure in an &lt;strong&gt;index.html&lt;/strong&gt; file by pressing ! and then pressing tab. Give the &lt;strong&gt;title&lt;/strong&gt; as ‚Äò&lt;strong&gt;Password Generator&lt;/strong&gt;‚Äô. Link &lt;strong&gt;style.css&lt;/strong&gt; and &lt;strong&gt;script.js&lt;/strong&gt; to the created HTML file and link &lt;strong&gt;FontAwesome&lt;/strong&gt; CSS to use icons*&lt;em&gt;.&lt;/em&gt;*&lt;/p&gt;

&lt;p&gt;Generate Password Button: Create &lt;strong&gt;button&lt;/strong&gt; inside &lt;strong&gt;div&lt;/strong&gt; class &lt;strong&gt;wrapper&lt;/strong&gt; clicking on which we will generate the password. Add &lt;code&gt;&amp;lt;i class=‚Äùfab fa-keycdn‚Äù&amp;gt;&amp;lt;/i&amp;gt;&lt;/code&gt; to display icon.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button id="generate" class="action-btn"&amp;gt;Generate Password &amp;lt;i class="fab fa-keycdn"&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Slider to select length: Add one more div class &lt;strong&gt;slider_main&lt;/strong&gt; inside &lt;strong&gt;wrapper class .slider_main&lt;/strong&gt; class contains the slider which is used to select the length of the password. The  min, max and the initial  value is set and the selected value using slider will be displayed in the &lt;strong&gt;output&lt;/strong&gt; section.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="slider\_main"&amp;gt;
 &amp;lt;input type="range" value="8" min="1" max="25" class="slider"oninput="this.nextElementSibling.value = this.value" id="slider"&amp;gt;
 &amp;lt;output&amp;gt;8&amp;lt;/output&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Checkbox to include special characters: Add an &lt;strong&gt;input&lt;/strong&gt; tag of type &lt;strong&gt;checkbox&lt;/strong&gt;, on checking we will include special characters in the password, and on unchecking we will remove special characters from password.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;label class="container" style="font-family: fantasy;color: rgb(3, 3, 3);"&amp;gt;Include special characters
            &amp;lt;input type="checkbox" checked="checked" id="checkbox"&amp;gt;
            &amp;lt;span class="checkmark"&amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;/label&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Password display and copy button: Add a &lt;strong&gt;h5&lt;/strong&gt; tag under div class &lt;strong&gt;wrapper_main&lt;/strong&gt; to display the generated password and add a button to copy the generated password. Use &lt;code&gt;&amp;lt;i class=‚Äùfas fa-clipboard‚Äù&amp;gt;&lt;/code&gt; for the clipboard icon.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="wrapper_main"&amp;gt;
        &amp;lt;h5 id="pwd_txt"&amp;gt;&amp;lt;/h5&amp;gt;
        &amp;lt;button id="clipboard" class="clipboard"&amp;gt;
            &amp;lt;i class="fas fa-clipboard"&amp;gt;&amp;lt;/i&amp;gt;
        &amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the complete HTML code,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Password Generator&amp;lt;/title&amp;gt;
    &amp;lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"&amp;gt;
     &amp;lt;link rel="stylesheet" href="style.css"&amp;gt; 
&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;
    &amp;lt;div class="wrapper"&amp;gt;
        &amp;lt;button id="generate" class="action-btn"&amp;gt;
            Generate Password &amp;lt;i class="fab fa-keycdn"&amp;gt;&amp;lt;/i&amp;gt;
        &amp;lt;/button&amp;gt;
        &amp;lt;div class="slider_main"&amp;gt;
            &amp;lt;input type="range" value="8" min="1" max="25" class="slider"
                oninput="this.nextElementSibling.value = this.value" id="slider"&amp;gt;
            &amp;lt;output&amp;gt;8&amp;lt;/output&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;label class="container" style="font-family: fantasy;color: rgb(3, 3, 3);"&amp;gt;Include special characters
            &amp;lt;input type="checkbox" checked="checked" id="checkbox"&amp;gt;
            &amp;lt;span class="checkmark"&amp;gt;&amp;lt;/span&amp;gt;
        &amp;lt;/label&amp;gt;
    &amp;lt;/div&amp;gt;



    &amp;lt;div class="wrapper_main"&amp;gt;
        &amp;lt;h5 id="pwd_txt"&amp;gt;&amp;lt;/h5&amp;gt;
        &amp;lt;button id="clipboard" class="clipboard"&amp;gt;
            &amp;lt;i class="fas fa-clipboard"&amp;gt;&amp;lt;/i&amp;gt;
        &amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script src="script.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#css-styling"&gt;
  &lt;/a&gt;
  CSS Styling
&lt;/h1&gt;

&lt;p&gt;Implement a slider to override the default one and hovering on the slider will make it less opaque.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.slider{

-webkit-appearance: none;
width: 70%;
height: 10px;
background: #f7be04;
border-radius: 15px;
opacity: 1;
-webkit-transition: .2s;
transition: opacity .2s;
margin-left: 40px;
margin-top: 25px;
margin-bottom: 20px;
}

.slider:hover{
opacity: 0.5;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Complete CSS code is here&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;html{
min-height: 100%;
}



body{
min-height: 100%;
background-color: #2d3436;
background-image: linear-gradient(315deg, #2d3436 0%, #000000 74%);
text-align: center;
}



.slider{
-webkit-appearance: none;
width: 70%;
height: 10px;
background: #f7be04;
border-radius: 15px;
opacity: 1;
-webkit-transition: .2s;
transition: opacity .2s;
margin-left: 40px;
margin-top: 25px;
margin-bottom: 20px;
}

.slider:hover{
opacity: 0.5;
}

.slider::-webkit-slider-thumb{
-webkit-appearance: none;
width: 15px;
height: 15px;
background: #000000;
border-radius: 50%;
cursor: pointer;
}

.action-btn{
background-color: #000;
border: 0;
color: #f7be04;
font-size: 20px;
cursor: pointer
padding: 10px;
margin: 10px  20px;
border-radius: 15px;
font-family: fantasy;
opacity: 1;
transition: opacity .2s;
}



.action-btn:hover{
opacity: 0.5;
}



.wrapper{
display: flex;
background-color: rgb(253, 253, 252);
flex-direction: column;
width: 30%;
margin-top: 10%;
margin-left: 35%;
border-radius: 15px;
font-family: fantasy;
padding-bottom: 1%;
}

.slider_main{
display: flex;
flex-direction: row;
}

output{
margin-top: 20px;
margin-left: 10px;
}



.wrapper_main
{
display: flex;
background-color: rgb(253, 253, 252);
flex-direction: row;
width: 22%;
margin-top: 5%;
margin-left: 38%;
border-radius: 15px;
font-family: Georgia, serif;
padding-left: 45px;
}



.clipboard{
margin-left: auto;
cursor: pointer;
border: 0;
background-color: white;
color:black;
border-radius: 15px;
font-size: 23px;
opacity: 1;
transition: opacity .2s;
}



.clipboard:hover{
opacity: 0.5;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#javascript-logic"&gt;
  &lt;/a&gt;
  Javascript logic
&lt;/h1&gt;

&lt;p&gt;We need to generate the password by selecting characters randomly. The length slider value given by the user will determine the length of the password and the user can choose whether to include special characters or not using the checkbox. To implement this functionality let‚Äôs fetch the required elements and store them in the below constants and variables.&lt;/p&gt;

&lt;p&gt;password_ele ‚Äî To store the &lt;strong&gt;h5&lt;/strong&gt; element which is used to set the generated password.&lt;/p&gt;

&lt;p&gt;string ‚Äî To store the &lt;strong&gt;characters&lt;/strong&gt; used to generate passwords except for special characters.&lt;/p&gt;

&lt;p&gt;special_chars ‚ÄîUsed to store &lt;strong&gt;special characters&lt;/strong&gt;, based on check box value we can add special characters to the password.&lt;/p&gt;

&lt;p&gt;generate ‚Äî Used to store the &lt;strong&gt;Generate Password&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;clipboard ‚Äî Used to store &lt;strong&gt;clipboard&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;pwd_length ‚Äî Used to store the &lt;strong&gt;slider&lt;/strong&gt; element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const password_ele = document.getElementById("pwd_txt");

var string = "ABCDEFGHIJKLMNOPQRSTUVWXYZacdefghijklnopqrstuvwxyz0123456789";

const special_chars = "@#$%^&amp;amp;*";

const generate = document.getElementById("generate");

const clipboard = document.getElementById("clipboard");

var pwd_length = document.getElementById("slider");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On clicking &lt;strong&gt;Generate Password&lt;/strong&gt; button we will execute some lines of codes to generate the password using &lt;strong&gt;Math.random()&lt;/strong&gt; function. If checkbox is checked then we will add special characters to our original string. Original string contains &lt;code&gt;‚ÄúABCDEFGHIJKLMNOPQRSTUVWXYZacdefghijklnopqrstuvwxyz0123456789‚Äù.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Loop through the string to fetch the character randomly and in each loop add the randomly selected character to the &lt;strong&gt;password&lt;/strong&gt; variable which was empty initially. The number of times the loop is executed is equal to the slider length so, the length of the password will be equal to the length given by the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;generate.addEventListener('click', () =&amp;gt; {
    let password = "";
    var checked = document.getElementById("checkbox").checked;
    var final_string = string;
    console.log(checked);
    if (checked) {
        final_string += "@#$%^&amp;amp;*";
    }
    for (var i = 0; i &amp;lt; pwd_length.value; i++) {
        let pwd = final_string[Math.floor(Math.random() * final_string.length)];
        password += pwd;
    }
    password_ele.innerText = password;
    final_string = string;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;on click of clipboard icon, the password text should get selected and display an alert message.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;

clipboard.addEventListener('click', () =&amp;gt; {

 navigator.clipboard.writeText(password_ele.innerText);

 alert("Password copied to clipboard");

});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Complete javascript code is here,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const password_ele = document.getElementById("pwd_txt");
var string = "ABCDEFGHIJKLMNOPQRSTUVWXYZacdefghijklnopqrstuvwxyz0123456789";
const special_chars = "@#$%^&amp;amp;*";
const generate = document.getElementById("generate");
const clipboard = document.getElementById("clipboard");
var pwd_length = document.getElementById("slider");


generate.addEventListener('click', () =&amp;gt; {
    let password = "";
    var checked = document.getElementById("checkbox").checked;
    var final_string = string;
    console.log(checked);
    if (checked) {
        final_string += "@#$%^&amp;amp;*";
    }
    for (var i = 0; i &amp;lt; pwd_length.value; i++) {
        let pwd = final_string[Math.floor(Math.random() * final_string.length)];
        password += pwd;
    }
    password_ele.innerText = password;
    final_string = string;
});


clipboard.addEventListener('click', () =&amp;gt; {
    navigator.clipboard.writeText(password_ele.innerText);
    alert("Password copied to clipboard");
});


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let‚Äôs check the output&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/fz6LiqBjVxs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Complete code is placed in &lt;a href="https://github.com/Divyamcm/Projects/tree/main/Password_Generator"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for your interest.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to setup golang backend and react frontend in a monorepo </title>
      <author>ynwd</author>
      <pubDate>Wed, 20 Oct 2021 10:23:49 +0000</pubDate>
      <link>https://dev.to/ynwd/how-to-setup-golang-backend-and-react-frontend-in-a-monorepo-3api</link>
      <guid>https://dev.to/ynwd/how-to-setup-golang-backend-and-react-frontend-in-a-monorepo-3api</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/ynwd/how-to-setup-react-tailwind-webpack-and-typescript-in-a-monorepo-3ogm"&gt;Previously&lt;/a&gt;, we have set up a frontend module using react and typescript in a monorepo.&lt;/p&gt;

&lt;p&gt;Next, we will use the golang server to serve the built webapp.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
‚îú‚îÄ‚îÄ go.mod
‚îú‚îÄ‚îÄ go.sum
‚îú‚îÄ‚îÄ main.go
‚îú‚îÄ‚îÄ package.json
‚îî‚îÄ‚îÄ web
    ‚îú‚îÄ‚îÄ components
    ‚îî‚îÄ‚îÄ modules
        ‚îî‚îÄ‚îÄ root
            ‚îú‚îÄ‚îÄ build
            ‚îÇ   ‚îú‚îÄ‚îÄ asset-manifest.json
            ‚îÇ   ‚îú‚îÄ‚îÄ favicon.ico
            ‚îÇ   ‚îú‚îÄ‚îÄ index.html
            ‚îÇ   ‚îú‚îÄ‚îÄ logo192.png
            ‚îÇ   ‚îú‚îÄ‚îÄ logo512.png
            ‚îÇ   ‚îú‚îÄ‚îÄ manifest.json
            ‚îÇ   ‚îú‚îÄ‚îÄ robots.txt
            ‚îÇ   ‚îî‚îÄ‚îÄ static
            ‚îÇ       ‚îú‚îÄ‚îÄ css
            ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ main.33a5a96b.chunk.css
            ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ main.33a5a96b.chunk.css.map
            ‚îÇ       ‚îî‚îÄ‚îÄ js
            ‚îÇ           ‚îú‚îÄ‚îÄ 2.59f16c8b.chunk.js
            ‚îÇ           ‚îú‚îÄ‚îÄ 2.59f16c8b.chunk.js.LICENSE.txt
            ‚îÇ           ‚îú‚îÄ‚îÄ 2.59f16c8b.chunk.js.map
            ‚îÇ           ‚îú‚îÄ‚îÄ 3.93db3793.chunk.js
            ‚îÇ           ‚îú‚îÄ‚îÄ 3.93db3793.chunk.js.map
            ‚îÇ           ‚îú‚îÄ‚îÄ main.f7ff0158.chunk.js
            ‚îÇ           ‚îú‚îÄ‚îÄ main.f7ff0158.chunk.js.LICENSE.txt
            ‚îÇ           ‚îú‚îÄ‚îÄ main.f7ff0158.chunk.js.map
            ‚îÇ           ‚îú‚îÄ‚îÄ runtime-main.08d49f3a.js
            ‚îÇ           ‚îî‚îÄ‚îÄ runtime-main.08d49f3a.js.map
            ‚îî‚îÄ‚îÄ package.json


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;clone repo: &lt;a href="https://github.com/ynwd/monorepo/tree/typescript"&gt;https://github.com/ynwd/monorepo/tree/typescript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;create services folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir -p internal/services
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;init golang app&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go mod init github.com/ynwd/monorepo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;downlod fastrex package&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go get github.com/fastrodev/fastrex
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this will generate go.mod file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module github.com/ynwd/monorepo

go 1.17

require github.com/fastrodev/fastrex v0.0.0-20211008073151-687f0b90ec18 // indirect

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;create golang app entry point&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;/* main.go */&lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/fastrodev/fastrex"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fastrex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"web/modules/root/build/index.html"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"web/modules/root/build"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="n"&gt;fastrex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="n"&gt;fastrex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;build react root module&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run build -w @fstr/root
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;run golang server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see the final source code here: &lt;a href="https://github.com/ynwd/monorepo/tree/fastrex"&gt;https://github.com/ynwd/monorepo/tree/fastrex&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>react</category>
      <category>typescript</category>
      <category>monorepo</category>
    </item>
    <item>
      <title>Redux </title>
      <author>Gilson Gangadhar</author>
      <pubDate>Wed, 20 Oct 2021 10:14:11 +0000</pubDate>
      <link>https://dev.to/gilsongangadhar/redux-4jgf</link>
      <guid>https://dev.to/gilsongangadhar/redux-4jgf</guid>
      <description>&lt;p&gt;Introduction: &lt;/p&gt;

&lt;p&gt;If data need to be passed from one component to another component. There are two ways to do it : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;By making the component from which data(state values) need to be passed as parent and the component which recieves data as child component. And data is send to child component as "props". This process is called "one-way data binding" .&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If data need to be passed between two or three components, then data(state values) is lifted to the top common component and then data is shared to the child components. This process is called "lifting the state up" &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But as the number of components to which data need to be passed increases in an app, the above two methods cannot be used. That where redux store come into the picture. &lt;/p&gt;

&lt;p&gt;-&amp;gt; What is Redux?&lt;/p&gt;

&lt;p&gt;Redux is a predictable state container for JavaScript apps based on the Flux design pattern. Redux can be used together with React, or with any other view library. It is tiny (about 2kB) and has no dependencies.&lt;/p&gt;

&lt;p&gt;-&amp;gt; What are the core principles of Redux?&lt;/p&gt;

&lt;p&gt;a). Single source of truth: The state of your whole application is stored in an object tree within a single store. The single state tree makes it easier to keep track of changes over time and debug or inspect the application.&lt;/p&gt;

&lt;p&gt;b). State is read-only: The only way to change the state is to emit an action, an object describing what happened. This ensures that neither the views nor the network callbacks will ever write directly to the state.&lt;/p&gt;

&lt;p&gt;c). Changes are made with pure functions: To specify how the state tree is transformed by actions, you write reducers. Reducers are just pure functions that take the previous state and an action as parameters, and return the next state.&lt;/p&gt;

&lt;p&gt;-&amp;gt; Explanation : &lt;/p&gt;

&lt;p&gt;Redux store is obtained to the react app via "redux" package. In redux store, we store "application state", which needed to be shared to all component in an app. &lt;/p&gt;

&lt;p&gt;We only state state which is required by all components is stored in redux store i.e("application state"). Not the local state which is required by a perticular component. &lt;/p&gt;

&lt;p&gt;Redux store is connected to all the components via Provider. And the components are connected to the store via Connect. Both Provider and Connect are obtained through "react-redux" package. &lt;/p&gt;

&lt;p&gt;State values of redux store can be accessed by components through mapStateToProps() function or via useSelector() hook. &lt;/p&gt;

&lt;p&gt;mapStateToProps() function : is a utility which helps your component get updated state (which is updated by some other components). It maps the state variables from your store to the props that you specify. &lt;/p&gt;

&lt;p&gt;It takes state as its argument and returns an object. &lt;/p&gt;

&lt;p&gt;useSelector() hook is obtained via "react-redux" package. It maps the state of your redux store and is used to access state values. &lt;/p&gt;

&lt;p&gt;-&amp;gt; How state values are stored &amp;amp; updating in the redux store : &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_RNWxbVu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6zh1ue52i21ki3jq3y3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_RNWxbVu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6zh1ue52i21ki3jq3y3.jpg" alt="Redux-flow-diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;a). In the component, if there has to be any changes in the state value of the redux store, an action is dispatched. It is dispatched either using useDispatch() hook or using dispatch() method got as a property of props of the wrapped component using Connect(). &lt;/p&gt;

&lt;p&gt;b). Actions are functions. They are two types : asynchronous and synchronous. It's the asynchronous action generator, which talks to backend and get the data using dispatch method(got through "redux-thunk" package) and it pass it on to synchronous action generator, which returns an object. It passes the data to redux store. &lt;/p&gt;

&lt;p&gt;c). Redux store gets the data from synchronous action generator and passes the data along with previous state value to the reducer. Reducer is a function which updates the state values of the redux store. Once store passes the data &amp;amp; previous state to reducer, it returns the updated state value to the redux store. &lt;/p&gt;

&lt;p&gt;d). Then the redux store passes the updated state to the component, which is rendered. &lt;/p&gt;

&lt;p&gt;So this is the brief explantion of Redux and the working for redux store. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to upload a file in Elixir with Waffle</title>
      <author>Curiosum</author>
      <pubDate>Wed, 20 Oct 2021 10:04:35 +0000</pubDate>
      <link>https://dev.to/curiosum_dev/how-to-upload-a-file-in-elixir-with-waffle-mab</link>
      <guid>https://dev.to/curiosum_dev/how-to-upload-a-file-in-elixir-with-waffle-mab</guid>
      <description>&lt;p&gt;The ability to upload files is a key requirement for many todays web and mobile applications. In this tutorial, we will look at how we can accomplish file uploads to local storage and S3 server in Phoenix with the help of &lt;a href="https://github.com/elixir-waffle/waffle"&gt;Waffle&lt;/a&gt; library. &lt;a href="https://curiosum.com/blog/how-upload-file-elixir-waffle"&gt;Read more...&lt;/a&gt;&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>tutorial</category>
      <category>programming</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Connecting to Amazon DocumentDB with MongoDB Drivers </title>
      <author>Jerod Johnson</author>
      <pubDate>Wed, 20 Oct 2021 09:55:22 +0000</pubDate>
      <link>https://dev.to/jerodimusprime/connecting-to-amazon-documentdb-with-mongodb-drivers-14dp</link>
      <guid>https://dev.to/jerodimusprime/connecting-to-amazon-documentdb-with-mongodb-drivers-14dp</guid>
      <description>&lt;p&gt;With Amazon DocumentDB developers and DBAs can balance availability, read scalability, and latency with five pre-configured consistency levels. The data in an Amazon DocumentDB cluster is accessible just like a MongoDB 3.6 cluster.  &lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.cdata.com/drivers/mongodb/odbc/?utm_source=dev.to&amp;amp;utm_medium=kb-article-posting&amp;amp;utm_campaign=connecting-to-amazon-documentdb-with-mongodb-drivers"&gt;CData Software Drivers for MongoDB&lt;/a&gt; provide a SQL-like interface to MongoDB data through standards-based drivers. This allows users to see their data in the BI, reporting, and ETL tools of their choice, as well as in custom tools and applications. &lt;/p&gt;

&lt;p&gt;This article walks through configuring an Amazon DocumentDB cluster and connecting to the cluster through any of the available CData Software MongoDB drivers. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creating-a-documentdb-cluster"&gt;
  &lt;/a&gt;
  Creating a DocumentDB Cluster
&lt;/h1&gt;

&lt;p&gt;To create a DocumentDB cluster, log in to your AWS Console, select Amazon DocumentDB, click Clusters and Create to add a new cluster. Once you create the cluster, you can connect to the cluster using the MongoDB client from an EC2 instance to populate the cluster. Once you have data in the Amazon DocumentDB cluster, you can connect using the CData MongoDB Drivers. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#connecting-to-a-amazon-documentdb-cluster"&gt;
  &lt;/a&gt;
  Connecting to a Amazon DocumentDB Cluster
&lt;/h1&gt;

&lt;p&gt;With your cluster created, make note of the cluster details (found by clicking on the cluster name on the Clusters page). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wtZCN5dz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82szjw2dn860aaegpu87.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wtZCN5dz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82szjw2dn860aaegpu87.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The table below describes the mapping from the DocumentDB cluster details to the CData Driver properties: &lt;/p&gt;

&lt;p&gt;CData Driver Property       |        Amazon DocumentDB Property &lt;/p&gt;

&lt;p&gt;Server                      --&amp;gt;           Cluster endpoint&lt;/p&gt;

&lt;p&gt;Port                        --&amp;gt;                  Port                                    &lt;/p&gt;

&lt;p&gt;User                        --&amp;gt;               Master username &lt;/p&gt;

&lt;p&gt;Password                    --&amp;gt;  (set when you create the cluster) &lt;/p&gt;

&lt;p&gt;In addition to the cluster details, you need to set a few more additional properties in the CData drivers to connect to an Amazon DocumentDB cluster: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;UseSSL:&lt;/strong&gt; True &lt;br&gt;
(Amazon DocumentDB Clusters have SSL enabled by default and this cannot be changed.) &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;SSLServerCert:&lt;/strong&gt; * &lt;br&gt;
(This automatically accepts the certificate presented by the DocumentDB Cluster, which is already hosted within the same region and security group as the EC2 instance.) &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Other:&lt;/strong&gt; "UseFindAPI=true" &lt;br&gt;
(This is set to ensure compatibility with the DocumentDB version of the MongoDB API.) &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With all of the properties, your standard connection string would look like the following: &lt;/p&gt;

&lt;p&gt;Server=.cluster-xxxxxxxxxxxx..docdb.amazonaws.com; Port=27107; User=myMaster; Password=myPassword; UseSSL=True; SSLServerCert=*; Other='UseFindAPI=True'; &lt;/p&gt;

&lt;p&gt;Once the connection properties are set, you can quickly connect to your Amazon DocumentDB account using any of the MongoDB Drivers. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#more-information"&gt;
  &lt;/a&gt;
  More Information
&lt;/h1&gt;

&lt;p&gt;When developing modern applications, document databases like MongoDB are a popular choice for storing semi-structured data for use cases like product catalogs, user profiles, mobile applications, and content management. &lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.cdata.com/drivers/mongodb/odbc/?utm_source=dev.to&amp;amp;utm_medium=kb-article-posting&amp;amp;utm_campaign=connecting-to-amazon-documentdb-with-mongodb-drivers"&gt;MongoDB ODBC Driver&lt;/a&gt; is a powerful tool that allows you to connect with live MongoDB document databases, directly from any applications that support ODBC connectivity. Access MongoDB like you would a database - read, write, and update through a standard ODBC Driver interface. &lt;/p&gt;

</description>
      <category>automation</category>
      <category>integration</category>
      <category>connectivity</category>
      <category>database</category>
    </item>
    <item>
      <title>Wrapping Angular Material button in custom Angular component (part 1)</title>
      <author>Dzhavat Ushev</author>
      <pubDate>Wed, 20 Oct 2021 09:53:29 +0000</pubDate>
      <link>https://dev.to/this-is-angular/wrapping-angular-material-button-in-custom-angular-component-part-1-1ph1</link>
      <guid>https://dev.to/this-is-angular/wrapping-angular-material-button-in-custom-angular-component-part-1-1ph1</guid>
      <description>&lt;p&gt;I was recently working on a button component as part of a Design System based on Angular Material. While working on this component, I faced some interesting challenges which I would like to share with you in this and following posts.&lt;/p&gt;

&lt;p&gt;When you want to build your own Design System on top of Angular Material (or pretty much any other 3rd party component library), you have a couple of options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build a custom Angular Material theme and use the components as they are described in the documentation.&lt;/li&gt;
&lt;li&gt;Build a custom Angular Material theme and build your own component library on top of Angular Material by wrapping their components in your own components.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are pros and cons with both approaches. That is a topic for another post so I‚Äôm not going into the details here. Long story short, we went with option 2.&lt;/p&gt;

&lt;p&gt;So my task was to wrap an Angular Material button in our own component and expose that for other developers to use in the rest of the app. Interesting, huh?&lt;/p&gt;

&lt;p&gt;Let‚Äôs recreate that component in this series of posts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;Well, the first step is to define some basic requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Call the component &lt;code&gt;my-button&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Button‚Äôs text must go between the opening and closing tags of the component.&lt;/li&gt;
&lt;li&gt;The button must support three different styles depending on its usage - as a primary, secondary or a text button.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#one-component-or-three-components"&gt;
  &lt;/a&gt;
  One component or three components?
&lt;/h3&gt;

&lt;p&gt;By reading the second requirement, a valid question might arise. Should we create a single component and control its style with an &lt;a href="https://angular.io/api/core/Input"&gt;Input&lt;/a&gt; property or three separate components - one for each style? I think having only one component is better because the consumers of the Design System will have only one way to display a button and adding support for more styles later on is easier.&lt;/p&gt;

&lt;p&gt;So based on this, two more requirements can be specified:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The component should have a &lt;code&gt;type&lt;/code&gt; property that takes one of these values - ‚Äú&lt;em&gt;primary&lt;/em&gt;‚Äù, ‚Äú&lt;em&gt;secondary&lt;/em&gt;‚Äù or ‚Äú&lt;em&gt;text&lt;/em&gt;‚Äù. If not specified, the default value should be ‚Äú&lt;em&gt;text&lt;/em&gt;‚Äù.&lt;/li&gt;
&lt;li&gt;Depending on the &lt;code&gt;type&lt;/code&gt;, a different button style must be shown. This is illustrated in the image below.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ZuAvcpI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dphbhqhwp2k0ff3m7xy4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ZuAvcpI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dphbhqhwp2k0ff3m7xy4.jpg" alt="One button component with three different styles"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How would you build it?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;There are a number of ways to approach the problem. In this, and following posts, I‚Äôm going to share &lt;strong&gt;my&lt;/strong&gt; solution(s). If you have a different solution, questions, or tips that can help me improve my solution(s), please let me know. I‚Äôll be happy to learn from you!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution-1"&gt;
  &lt;/a&gt;
  Solution 1
&lt;/h3&gt;

&lt;p&gt;Let‚Äôs start with something simple to see if we can make it work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// my-button.component.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my-button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;templateUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./my-button.component.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyButtonComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;primary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;secondary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- my-button.component.html --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ng-container&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"type === 'primary'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;mat-flat-button&lt;/span&gt; &lt;span class="na"&gt;color=&lt;/span&gt;&lt;span class="s"&gt;"primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ng-content&amp;gt;&amp;lt;/ng-content&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-container&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;ng-container&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"type === 'secondary'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;mat-stroked-button&lt;/span&gt; &lt;span class="na"&gt;color=&lt;/span&gt;&lt;span class="s"&gt;"primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ng-content&amp;gt;&amp;lt;/ng-content&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-container&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;ng-container&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"type === 'text'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;mat-button&lt;/span&gt; &lt;span class="na"&gt;color=&lt;/span&gt;&lt;span class="s"&gt;"primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ng-content&amp;gt;&amp;lt;/ng-content&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-container&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At first, the above solution might look kinda ok. Directives in Angular cannot be applied dynamically based on some logic so &lt;a href="https://angular.io/api/common/NgIf"&gt;&lt;code&gt;ngIf&lt;/code&gt;&lt;/a&gt; is used to decide which button style to display depending on the value of &lt;code&gt;type&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Demo time üéâ (&lt;a href="https://stackblitz.com/edit/angular-nh42jz?file=src%2Fapp%2Fmy-button%2Fmy-button.component.html"&gt;StackBlitz&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x-1YUEUw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wk9v0wuo7raiovsnywe.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x-1YUEUw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wk9v0wuo7raiovsnywe.jpg" alt="Demo to solution 1: Content projection for ‚Äúprimary‚Äù and ‚Äúsecondary‚Äù buttons is broken"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, something is clearly not working.&lt;/p&gt;

&lt;p&gt;The problem here lies in the way &lt;a href="https://angular.io/api/core/ng-content"&gt;&lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt;&lt;/a&gt; works inside &lt;code&gt;ngIf&lt;/code&gt;. If we look at the &lt;a href="https://angular.io/guide/content-projection#conditional-content-projection"&gt;"Conditional content projection"&lt;/a&gt; section in the Angular docs, we can read that ‚Äú&lt;em&gt;[...] when the consumer of a component supplies the content, that content is always initialized, even if the component does not define an &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; element or if that &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; element is inside of an &lt;code&gt;ngIf&lt;/code&gt; statement&lt;/em&gt;‚Äù.&lt;/p&gt;

&lt;p&gt;What I get out of this is that we cannot use more than one &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; element in the same template when a condition is used to decide where to place the projected content. The recommendation for such scenarios is to use &lt;a href="https://angular.io/api/core/ng-template"&gt;&lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So solution 1 cannot be used to implement the requirements. We need to find something else.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution-2"&gt;
  &lt;/a&gt;
  Solution 2
&lt;/h3&gt;

&lt;p&gt;In this solution we‚Äôre going to take Angular‚Äôs recommendation and use &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;. Some minor adjustments in the HTML template are necessary. Component‚Äôs class can stay the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- my-button.component.html --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ng-container&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"type === 'primary'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;mat-flat-button&lt;/span&gt; &lt;span class="na"&gt;color=&lt;/span&gt;&lt;span class="s"&gt;"primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ng-container&lt;/span&gt; &lt;span class="na"&gt;[ngTemplateOutlet]=&lt;/span&gt;&lt;span class="s"&gt;"buttonContent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ng-container&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-container&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;ng-container&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"type === 'secondary'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;mat-stroked-button&lt;/span&gt; &lt;span class="na"&gt;color=&lt;/span&gt;&lt;span class="s"&gt;"primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ng-container&lt;/span&gt; &lt;span class="na"&gt;[ngTemplateOutlet]=&lt;/span&gt;&lt;span class="s"&gt;"buttonContent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ng-container&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-container&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;ng-container&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"type === 'text'"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;mat-button&lt;/span&gt; &lt;span class="na"&gt;color=&lt;/span&gt;&lt;span class="s"&gt;"primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ng-container&lt;/span&gt; &lt;span class="na"&gt;[ngTemplateOutlet]=&lt;/span&gt;&lt;span class="s"&gt;"buttonContent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ng-container&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-container&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;ng-template&lt;/span&gt; &lt;span class="na"&gt;#buttonContent&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ng-content&amp;gt;&amp;lt;/ng-content&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are a couple of new things here. First, the &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; inside each button is moved inside the &lt;code&gt;ng-template&lt;/code&gt;. Then a &lt;a href="https://angular.io/guide/template-reference-variables"&gt;template variable&lt;/a&gt; &lt;code&gt;#buttonContent&lt;/code&gt; that holds a references to the &lt;code&gt;ng-template&lt;/code&gt; is defined. Lastly, &lt;a href="https://angular.io/api/common/NgTemplateOutlet"&gt;&lt;code&gt;ngTemplateOutlet&lt;/code&gt;&lt;/a&gt; is used inside each &lt;code&gt;button&lt;/code&gt; to render the given &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Demo time üéâ (&lt;a href="https://stackblitz.com/edit/angular-nh42jz-8cambj?file=src%2Fapp%2Fbutton-overview-example.html"&gt;StackBlitz&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fUZ-Xo16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rayq7vert9p4tonim077.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fUZ-Xo16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rayq7vert9p4tonim077.jpg" alt="Demo to solution 2: All buttons are displayed correctly"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It works! The reason why it works is because Angular will not initialize the content of an &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element until that element is explicitly rendered.&lt;/p&gt;

&lt;p&gt;Is the task done? Should we open a pull request (PR) and call it a day?&lt;/p&gt;

&lt;p&gt;Before we do that, let‚Äôs ask ourselves some questions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What are the downsides of this solution?&lt;/li&gt;
&lt;li&gt;Can the component easily be extended to support further requirements like more button styles, displaying of icon(s), disabled and/or loading state, links?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A downside is that the template will grow in size if more button styles have to be supported. The same will happen if the same component should also be used for links (yes, because &lt;a href="https://twitter.com/claviska/status/1445479402532261892"&gt;a ‚Äúbutton‚Äù and a ‚Äúlink‚Äù should be one component&lt;/a&gt;) Another downside is that the template contains repetitive logic that doesn‚Äôt belong there - deciding which button style to show using a bunch of &lt;code&gt;ngIf&lt;/code&gt;s. There are other Angular APIs that can help us achieve the same result by moving the logic in the component‚Äôs class instead thus keeping the template small and tidy.&lt;/p&gt;

&lt;p&gt;As for adding more requirements, that‚Äôs a valid concern. New use cases come up all the time and some of them will probably need to be supported at some point. Is the component flexible enough to allow that?&lt;/p&gt;

&lt;p&gt;Some might stop here and say that the solution is good enough. After all, it fulfills the current requirements. Others might be curious to see other solutions and see how we can extend the component to support more requirements. That is what we‚Äôre going to explore in part 2 (coming soon).&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://twitter.com/LayZeeDK/"&gt;Lars Gyrup Brink Nielsen&lt;/a&gt; for reviewing this post.&lt;/p&gt;




&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@chrislawton?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Chris Lawton&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/colors?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>material</category>
    </item>
    <item>
      <title>Free courses for october</title>
      <author>BigCoder</author>
      <pubDate>Wed, 20 Oct 2021 09:51:27 +0000</pubDate>
      <link>https://dev.to/bigcoder/free-courses-for-october-5hgk</link>
      <guid>https://dev.to/bigcoder/free-courses-for-october-5hgk</guid>
      <description>&lt;p&gt;Some of my courses, free next few days&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.udemy.com/course/ethical-hacking-introduction-to-exploits/?couponCode=444C7967679EACB926F3"&gt;Ethical Hacking: Introduction to Exploits&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.udemy.com/course/ethical-hacking-nmap-in-depth/?couponCode=B736B3ECA0F9739E1319"&gt;Ethical Hacking: Master map&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.udemy.com/course/apparmor-linux-security/?couponCode=D01FE7E205C1146A122D"&gt;Cyber Security: AppArmor on Linux&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.udemy.com/course/create-snake-with-python-pygame/?couponCode=73ABB6588DBC1C3E9B18"&gt;Create Snake with Python&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.udemy.com/course/file-processing-with-python/?couponCode=29A3DEF2CAB4255C4AEE"&gt;File Processing with Python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.udemy.com/course/linux-terminal-for-beginners/?couponCode=1754040039B5EFD784AD"&gt;Linux terminal for beginners&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.udemy.com/course/awk-tutorial/"&gt;Linux awk tutorial&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.udemy.com/course/redis-database-tutorial/"&gt;Redis Database&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>beginners</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>Debug Electron production binaries on Windows, Mac &amp; Linux</title>
      <author>Emmanouil Liakos</author>
      <pubDate>Wed, 20 Oct 2021 09:49:20 +0000</pubDate>
      <link>https://dev.to/mliakos/debug-electron-production-binaries-on-windows-mac-linux-2fm6</link>
      <guid>https://dev.to/mliakos/debug-electron-production-binaries-on-windows-mac-linux-2fm6</guid>
      <description>&lt;p&gt;In this short article, I would like to show you how to debug Electron production binaries on Windows, Mac &amp;amp; Linux. &lt;/p&gt;

&lt;p&gt;Sometimes you might want to see the log output of a production binary built with Electron and for some reason the web resources on this subject are extremely limited, rendering this a non-trivial task.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#windows"&gt;
  &lt;/a&gt;
  Windows
&lt;/h2&gt;

&lt;p&gt;If you are using Windows, it's pretty straightforward. Just provide the path of your executable with the &lt;code&gt;--debug&lt;/code&gt; flag and it should do the trick.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'path/to/MyElectronApp.exe'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--debug&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#mac"&gt;
  &lt;/a&gt;
  Mac
&lt;/h2&gt;

&lt;p&gt;For MacOS, it gets a bit more complicating - as is always the case with Apple üòÄ. You have to follow a different approach based on whether you have code-signed your application or not. Essentially, if the binary is code-signed with a certificate, &lt;strong&gt;then you have to strip it in order for the debugger to work.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In any case you have to use the &lt;strong&gt;&lt;a href="https://lldb.llvm.org/"&gt;lldb Debugger&lt;/a&gt;&lt;/strong&gt; and your application's path (probably something like &lt;code&gt;/Applications/MyElectronApp.app&lt;/code&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unsigned-binary"&gt;
  &lt;/a&gt;
  Unsigned binary
&lt;/h3&gt;

&lt;p&gt;For an unsigned binary run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  lldb /Applications/MyElectronApp.app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the target has been created, run &lt;code&gt;run&lt;/code&gt; to open the app.&lt;/p&gt;

&lt;p&gt;When you are finished, run &lt;code&gt;exit&lt;/code&gt; to close the debugger.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#signed-binary"&gt;
  &lt;/a&gt;
  Signed binary
&lt;/h3&gt;

&lt;p&gt;The methodology for a signed binary is essentially the same, but requires an extra step before proceeding. If you try to debug a code-signed binary you will likely get the following error message:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;error: process exited with status -1 (attach failed (Not allowed to attach to process. Look in the console messages (Console.app), near the debugserver entries when the attached failed. The subsystem that denied the attach permission will likely have logged an informative message about why it was denied.))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To bypass this, you have to strip the certificate using the following &lt;a href="https://gist.github.com/talaviram/1f21e141a137744c89e81b58f73e23c3"&gt;script&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#! /bin/bash&lt;/span&gt;
&lt;span class="c"&gt;# Simple Utility Script for allowing debug of hardened macOS apps.&lt;/span&gt;
&lt;span class="c"&gt;# This is useful mostly for plug-in developer that would like keep developing without turning SIP off.&lt;/span&gt;
&lt;span class="c"&gt;# Credit for idea goes to (McMartin): https://forum.juce.com/t/apple-gatekeeper-notarised-distributables/29952/57?u=ttg&lt;/span&gt;
&lt;span class="nv"&gt;app_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-z&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$app_path&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"You need to specify app to re-codesign!"&lt;/span&gt;
    &lt;span class="nb"&gt;exit &lt;/span&gt;0
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c"&gt;# This uses local codesign. so it'll be valid ONLY on the machine you've re-signed with.&lt;/span&gt;
&lt;span class="nv"&gt;entitlements_plist&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tmp/debug_entitlements.plist
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Grabbing entitlements from app..."&lt;/span&gt;
codesign &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nt"&gt;--entitlements&lt;/span&gt; :- &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$app_path&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$entitlements_plist&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;exit &lt;/span&gt;1&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Patch entitlements (if missing)..."&lt;/span&gt;
/usr/libexec/PlistBuddy &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"Add :com.apple.security.cs.disable-library-validation bool true"&lt;/span&gt; &lt;span class="nv"&gt;$entitlements_plist&lt;/span&gt;
/usr/libexec/PlistBuddy &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"Add :com.apple.security.cs.allow-unsigned-executable-memory bool true"&lt;/span&gt; &lt;span class="nv"&gt;$entitlements_plist&lt;/span&gt;
/usr/libexec/PlistBuddy &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"Add :com.apple.security.get-task-allow bool true"&lt;/span&gt; &lt;span class="nv"&gt;$entitlements_plist&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Re-applying entitlements (if missing)..."&lt;/span&gt;
codesign &lt;span class="nt"&gt;--force&lt;/span&gt; &lt;span class="nt"&gt;--options&lt;/span&gt; runtime &lt;span class="nt"&gt;--sign&lt;/span&gt; - &lt;span class="nt"&gt;--entitlements&lt;/span&gt; &lt;span class="nv"&gt;$entitlements_plist&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$app_path&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"codesign failed!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Removing temporary plist..."&lt;/span&gt;
&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nv"&gt;$entitlements_plist&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save this in a file locally and run it, while also providing the application's path:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bash ~/path/to/script.sh ~/path/to/MyElectronApp.app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally you can run the debugger in the exact same way as with the unsigned binary (using the &lt;code&gt;lldb&lt;/code&gt; command).&lt;/p&gt;

&lt;p&gt;You can of course chain the commands to &lt;strong&gt;strip the certificate and run&lt;/strong&gt; the app in one go:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bash ~/path/to/script.sh ~/path/to/MyElectronApp.app &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; lldb ~/path/to/MyElectronApp.app   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#linux"&gt;
  &lt;/a&gt;
  Linux
&lt;/h2&gt;

&lt;p&gt;This is the easiest of the three. Just open the app from a terminal and you shall see the output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'path/to/my/ElectronApp.AppImage'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: I haven't tried it with any target other than &lt;code&gt;AppImage&lt;/code&gt;, but I presume that it should work in the same way.&lt;/p&gt;

&lt;p&gt;Hope this was useful, thanks for reading! ü§ì&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>electron</category>
    </item>
    <item>
      <title>React Django - Soft Dashboard (Free Product)</title>
      <author>Sm0ke</author>
      <pubDate>Wed, 20 Oct 2021 09:42:01 +0000</pubDate>
      <link>https://dev.to/sm0ke/react-django-soft-dashboard-free-product-3gi8</link>
      <guid>https://dev.to/sm0ke/react-django-soft-dashboard-free-product-3gi8</guid>
      <description>&lt;p&gt;Hello Coders!&lt;/p&gt;

&lt;p&gt;This article presents an open-source full-stack project crafted on top of &lt;strong&gt;Soft UI Dashboard&lt;/strong&gt; using &lt;a href="https://appseed.us/product/django-react-soft-dashboard"&gt;React and Django&lt;/a&gt; as backend framework. The product, released under the MIT license on Github, can be used as a codebase for a commercial dashboard or simply for learning especially by beginners. Codebase uses a &lt;code&gt;two-tier&lt;/code&gt; architecture where the React UI is decoupled and communicates with the backend using JSON Web Tokens (JWT). For newcomers, React is a popular JavaScript library for coding user interfaces backed by Facebook. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;‚ú® &lt;a href="https://appseed.us/product/django-react-soft-dashboard"&gt;Django React Soft Dashboard&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;‚ú® &lt;a href="https://django-react-soft-dashboard.appseed-srv1.com/authentication/sign-in"&gt;Django React Soft Dashboard&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lga7qi9F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oeuhj9yuqin8x93pg1nz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lga7qi9F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oeuhj9yuqin8x93pg1nz.gif" alt="React Django Soft Dashboard - Open-source full-stack product."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#soft-dashboard-react"&gt;
  &lt;/a&gt;
  ‚ú® Soft Dashboard React
&lt;/h2&gt;

&lt;p&gt;This free template is designed by Creative-Tim on top of Material-UI, the most popular components library for React. &lt;strong&gt;Soft UI Dashboard React&lt;/strong&gt; is built with over 70 frontend individual elements, like buttons, inputs, navbars, nav tabs, cards, or alerts, giving you the freedom of choosing and combining.  &lt;/p&gt;

&lt;p&gt;If you want to get inspiration or just show something directly to your clients, you can jump-start your development with our pre-built example pages. Every page is spaced well, with attractive layouts and pleasing shapes. Soft UI Dashboard React has everything you need to quickly set up an amazing project.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--siLPFm_e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ebi3ho2yuc1bzjp9df7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--siLPFm_e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ebi3ho2yuc1bzjp9df7.png" alt="Soft Dashboard React - Open-source React Design, the Billing page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-use-the-product"&gt;
  &lt;/a&gt;
  ‚ú® How to use the product
&lt;/h2&gt;

&lt;p&gt;This open-source product is a complete full-stack seed product that covers all layers from the UI to the database using a &lt;code&gt;two-tier&lt;/code&gt; architecture: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;React Frontend&lt;/code&gt; (Soft UI Template)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;JWT Authentication&lt;/code&gt;: users can register, Sign IN and logout&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Django API Backend&lt;/code&gt;: responsible with persistence &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to use the product we need to build both parts: the API backend and the React Frontend. Both parts are already configured to work and communicate using compatible settings. Let's start compile the product and use it in the browser. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#start-the-django-api-backend"&gt;
  &lt;/a&gt;
  ‚ú® Start the Django API Backend
&lt;/h3&gt;

&lt;p&gt;To successfully compile the backend server, &lt;strong&gt;Python3&lt;/strong&gt; and &lt;strong&gt;GIT&lt;/strong&gt; should be properly installed and accessible in the terminal window. &lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--geui0cl0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/frwua9ctmvxymqwukzns.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--geui0cl0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/frwua9ctmvxymqwukzns.png" alt="Django API Server - Open-source product crafted by AppSeed."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;üëâ Step #1 - Clone sources using GIT&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/api-server-django.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;api-server-django 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;üëâ Step #2 - Create a virtual environment&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Virtualenv modules installation (Unix based systems)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;üëâ Step #3 - Install dependencies using &lt;code&gt;PIP&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;üëâ Step #4 - Start the API server&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py migrate
&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py runserver 5000 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, the server should run on port &lt;code&gt;5000&lt;/code&gt; and we can test the interface using POSTMAN or &lt;code&gt;curl&lt;/code&gt; to create and authenticate users. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#start-the-react-ui"&gt;
  &lt;/a&gt;
  ‚ú® Start the React UI
&lt;/h3&gt;

&lt;p&gt;The dependency for this part is NodeJS, a decent version closer to 12.x or above. Once the &lt;code&gt;NodeJS&lt;/code&gt; is accessible via the terminal, we can clone the React UI from the public repository and start compiling the product. &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;üëâ Step #1 - Clone sources using GIT&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/react-soft-ui-dashboard.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;react-soft-ui-dashboard 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;üëâ Step #2 - Install dependencies via &lt;code&gt;NPM&lt;/code&gt; or &lt;code&gt;Yarn&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm i
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;üëâ Step #3 - Start in development mode&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm run start 
// OR
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, we should see the login page rendered by the browser on port &lt;code&gt;3000&lt;/code&gt;. By default guest users are redirected to Sign IN page because all other pages like dashboard, user profile .. etc, are protected. Once the authentication is successful, we can access all private pages. &lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tPo_p43K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4dj6bfzan18xisbnn4m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tPo_p43K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4dj6bfzan18xisbnn4m.png" alt="React Django Soft Dashboard - Profile page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;RTL Page&lt;/strong&gt; - React Soft Dashboard&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H3BTj0ar--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tuw5b5jq5ze8qhoopqa7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H3BTj0ar--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tuw5b5jq5ze8qhoopqa7.png" alt="React Django Soft Dashboard - RTL Sample Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! For more resources, please access: &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;More &lt;a href="https://appseed.us/apps/react"&gt;React Apps&lt;/a&gt; - index provided by AppSeed&lt;/li&gt;
&lt;li&gt;Free &lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards&lt;/a&gt; - a popular article published on Dev&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://blog.appseed.us/react-user-authentication-jwt-token/"&gt;React User Authentication&lt;/a&gt; - JWT Token Authentication | Blog Article&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>django</category>
      <category>fullstack</category>
      <category>appseed</category>
    </item>
    <item>
      <title>51 git commands that you'll ever need to get started with Git</title>
      <author>Pramit Marattha</author>
      <pubDate>Wed, 20 Oct 2021 09:39:50 +0000</pubDate>
      <link>https://dev.to/aviyel/51-git-commands-that-youll-ever-need-to-get-started-with-git-34d5</link>
      <guid>https://dev.to/aviyel/51-git-commands-that-youll-ever-need-to-get-started-with-git-34d5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#version-control-git-basics"&gt;
  &lt;/a&gt;
  Version Control (Git) Basics
&lt;/h2&gt;

&lt;p&gt;Hi !! In this blog tutorial, I will be listing out all the necessary and only command that you will ever need to start your GIT journey. You can bookmark this blog and come back to it, whenever it is necessary. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#checking-the-git-configuration"&gt;
  &lt;/a&gt;
  Checking the git configuration
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config &lt;span class="nt"&gt;-l&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-your-git-username"&gt;
  &lt;/a&gt;
  Setting up your git username
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.name &lt;span class="s2"&gt;"pramit"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-email"&gt;
  &lt;/a&gt;
  Setting up email
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.email &lt;span class="s2"&gt;"pramit@aviyel.com"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#caching-credential"&gt;
  &lt;/a&gt;
  Caching credential
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; credential.helper cache

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#initialize-repository"&gt;
  &lt;/a&gt;
  Initialize repository
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git init

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding-filename-to-staging-area"&gt;
  &lt;/a&gt;
  Adding filename to staging area
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add file_name

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding-all-the-files-to-the-staging-area"&gt;
  &lt;/a&gt;
  Adding all the files to the staging area
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#add-only-certain-files-to-the-staging-area"&gt;
  &lt;/a&gt;
  Add only certain files to the staging area
&lt;/h2&gt;

&lt;p&gt;example add all files starting with "comp"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add comp&lt;span class="k"&gt;*&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#checking-repo-status"&gt;
  &lt;/a&gt;
  Checking repo Status
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git status

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#commit-changes"&gt;
  &lt;/a&gt;
  Commit changes
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#commit-changes-with-a-message-in-it"&gt;
  &lt;/a&gt;
  Commit changes with a message in it
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"YOOOO!!! This is a message"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#add-to-staging-area-and-commit-changes-with-a-message-in-it"&gt;
  &lt;/a&gt;
  Add to staging area and commit changes with a message in it
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="nt"&gt;-a&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"YOOOO!!! This is another message"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#to-see-the-commit-history"&gt;
  &lt;/a&gt;
  To see the commit history
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git log

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#commit-history-and-the-following-file-changes"&gt;
  &lt;/a&gt;
  Commit history and the following file changes
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git log &lt;span class="nt"&gt;-p&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#show-specific-commit-in-git"&gt;
  &lt;/a&gt;
  Show specific commit in git
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git show commit_id

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#statistics-about-changes"&gt;
  &lt;/a&gt;
  Statistics about changes
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git log &lt;span class="nt"&gt;--stat&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#changes-made-before-committing-them-using-diff"&gt;
  &lt;/a&gt;
  Changes made before committing them using diff
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git diff
git diff some_file.js
git diff &lt;span class="nt"&gt;--staged&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#removing-tracked-files"&gt;
  &lt;/a&gt;
  Removing tracked files
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git &lt;span class="nb"&gt;rm &lt;/span&gt;filename

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#rename-files-in-git"&gt;
  &lt;/a&gt;
  Rename files in git
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git &lt;span class="nb"&gt;mv &lt;/span&gt;oldfilename newfilename

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#revert-unstaged-changes"&gt;
  &lt;/a&gt;
  Revert unstaged changes
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout file_name

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#revert-staged-changes"&gt;
  &lt;/a&gt;
  Revert staged changes
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git reset HEAD filename
git reset HEAD &lt;span class="nt"&gt;-p&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#modify-and-add-changes-to-the-most-recent-commit"&gt;
  &lt;/a&gt;
  Modify and add changes to the most recent commit
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="nt"&gt;--amend&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#rollback-the-last-commit"&gt;
  &lt;/a&gt;
  Rollback the last commit
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git revert HEAD

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#revert-a-previous-commit"&gt;
  &lt;/a&gt;
  Revert a previous commit
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git revert comit_id_here

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-a-new-branch"&gt;
  &lt;/a&gt;
  Create a new branch
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git branch branch_name

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#list-branch-in-git"&gt;
  &lt;/a&gt;
  List branch in git
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git branch

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-a-branch-and-switch-it-immediately"&gt;
  &lt;/a&gt;
  Create a branch and switch it Immediately
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout &lt;span class="nt"&gt;-b&lt;/span&gt; branch_name

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#delete-a-branch-in-git"&gt;
  &lt;/a&gt;
  Delete a branch in git
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git branch &lt;span class="nt"&gt;-d&lt;/span&gt; branch_name

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#merge"&gt;
  &lt;/a&gt;
  Merge
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git merge branch_name

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#commit-log-as-a-graph-in-git"&gt;
  &lt;/a&gt;
  Commit log as a graph in git
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git log &lt;span class="nt"&gt;--graph&lt;/span&gt; &lt;span class="nt"&gt;--oneline&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#commit-log-as-a-graph-in-git-of-all-branches"&gt;
  &lt;/a&gt;
  Commit log as a graph in git of all branches
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git log &lt;span class="nt"&gt;--graph&lt;/span&gt; &lt;span class="nt"&gt;--oneline&lt;/span&gt; &lt;span class="nt"&gt;--all&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#abort-a-conflicting-merge"&gt;
  &lt;/a&gt;
  Abort a conflicting merge
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git merge &lt;span class="nt"&gt;--abort&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding-a-remote-repository"&gt;
  &lt;/a&gt;
  Adding a remote repository
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add remote https://repository_name.com

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#view-the-remote-repo-url"&gt;
  &lt;/a&gt;
  View the remote repo URL
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git remote &lt;span class="nt"&gt;-v&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#get-more-info-about-remote-repo"&gt;
  &lt;/a&gt;
  Get more info about remote repo
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git remote show origin

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#push-changes-to-the-remote-repository"&gt;
  &lt;/a&gt;
  Push changes to the remote repository
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git push

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#pull-changes-from-remote-repo"&gt;
  &lt;/a&gt;
  Pull changes from remote repo
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git pull

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#check-remote-branches-that-git-is-currently-tracking"&gt;
  &lt;/a&gt;
  Check remote branches that git is currently tracking
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git branch &lt;span class="nt"&gt;-r&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#fetch-remote-repo-changes"&gt;
  &lt;/a&gt;
  Fetch remote repo changes
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git fetch

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#current-commit-logs-of-the-remote-repo"&gt;
  &lt;/a&gt;
  Current commit logs of the remote repo
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git log origin/main

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#merge-remote-repo-with-the-local-repo"&gt;
  &lt;/a&gt;
  Merge remote repo with the local repo
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git merge origin/main

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#get-the-contents-of-remote-branches-in-git-without-automatically-merging"&gt;
  &lt;/a&gt;
  Get the contents of remote branches in Git without automatically merging
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git remote update

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#push-a-new-branch-to-the-remote-repository"&gt;
  &lt;/a&gt;
  Push a new branch to the remote repository
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git push &lt;span class="nt"&gt;-u&lt;/span&gt; origin branch_name

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#remove-a-remote-branch-in-git"&gt;
  &lt;/a&gt;
  Remove a remote branch in git
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git push &lt;span class="nt"&gt;--delete&lt;/span&gt; origin branch_name

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#git-rebase"&gt;
  &lt;/a&gt;
  GIT rebase
&lt;/h2&gt;

&lt;p&gt;(transfer completed work from one branch to another using git rebase)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git rebase branch_name

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#force-a-push-request-in-gitvery-dangerous"&gt;
  &lt;/a&gt;
  Force a push request in git:(VERY DANGEROUS)
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git push &lt;span class="nt"&gt;-f&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#git-tips-and-tricks"&gt;
  &lt;/a&gt;
  Git tips and tricks
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#blank-commits"&gt;
  &lt;/a&gt;
  Blank commits
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="nt"&gt;--allow-empty&lt;/span&gt; &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"yooo"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#prettify-logs"&gt;
  &lt;/a&gt;
  Prettify Logs
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git log &lt;span class="nt"&gt;--pretty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;oneline &lt;span class="nt"&gt;--graph&lt;/span&gt; &lt;span class="nt"&gt;--decorate&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#clean-up-local-branches"&gt;
  &lt;/a&gt;
  Clean up local branches
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; fetch.prune &lt;span class="nb"&gt;true&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;you can clean up local branches that have been merged
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git branch &lt;span class="nt"&gt;--merged&lt;/span&gt; master | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="s2"&gt;"master"&lt;/span&gt; | xargs &lt;span class="nt"&gt;-n&lt;/span&gt; 1 git branch &lt;span class="nt"&gt;-d&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#file-that-specifies-intentionally-untracked-files-that-git-should-ignore"&gt;
  &lt;/a&gt;
  File that specifies intentionally untracked files that Git should ignore
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;.gitignore

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Happy coding!!&lt;/p&gt;

&lt;p&gt;Follow &lt;a href="https://twitter.com/AviyelHq"&gt;@aviyelHQ&lt;/a&gt; or &lt;a href="https://aviyel.com/discussions"&gt;sign-up&lt;/a&gt; on Aviyel for early access if you are a project maintainer, contributor, or just an Open Source enthusiast.&lt;/p&gt;

&lt;p&gt;Join Aviyel's Discord =&amp;gt; &lt;a href="https://discord.gg/TbfZmbvnN5"&gt;Aviyel's world&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Twitter =&amp;gt;[&lt;a href="https://twitter.com/AviyelHq"&gt;https://twitter.com/AviyelHq&lt;/a&gt;]&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Which Institute is Best for Azure Training?</title>
      <author>ssdntechnology</author>
      <pubDate>Wed, 20 Oct 2021 09:36:12 +0000</pubDate>
      <link>https://dev.to/ssdntechnology/which-institute-is-best-for-azure-training-9in</link>
      <guid>https://dev.to/ssdntechnology/which-institute-is-best-for-azure-training-9in</guid>
      <description>&lt;p&gt;The Azure cloud architect Masters's program is one of the best programs that will be helping you master the Azure infrastructure. It‚Äôs worth understanding regarding the Microsoft Azure cloud architect Technology Solutions. In addition to that, it will also be training you regarding the implementation of the workflows and the security in Microsoft Edge. The reason for doing so is that you will get higher interaction in the live classroom classes conducted by the industry experts. In addition to that, it will be getting knowledge regarding the insights from the industry experts as well as enhancing your career.&lt;/p&gt;

&lt;p&gt;Learn more about &lt;a href="https://www.ssdntech.com/blog/azure-a-good-career/"&gt;Azure a good career&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The advanced support with the &lt;strong&gt;Microsoft Azure training&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;The lifetime access to the self-paced videos as well as the classroom coaching stands out. You will get the exam voucher for the appearance of the exam, and as soon as you complete the course, you will get a certification for the same. Get a good quality customized learning path with the outcomes.&lt;/p&gt;

&lt;p&gt;In addition to that, the &lt;strong&gt;Microsoft Azure course certification &lt;/strong&gt;always caters to the ones who are hoping to take the career to the next level in the cloud industry. You will get an understanding regarding taking the plunge into the job market. Even with less than two years of experience working in technical or non-technical jobs, professionals can just shift to the cloud. They can go ahead with working in the MS azure.&lt;/p&gt;

&lt;h2&gt;Microsoft Azure from SSDN Technologies&lt;/h2&gt;

&lt;p&gt;The best part of the services is that there will be job assistance services. Get access to job assistance services, including personalized Interview preparation and other such assistance. So is it worth taking the certification program from SSDN Technologies? It will be a great idea because the &lt;a href="https://www.ssdntech.com/blog/microsoft-azure-certification-path/"&gt;&lt;strong&gt;Microsoft Azure certification program&lt;/strong&gt;&lt;/a&gt; will be validating the cloud skills while you are looking forward to them in the form of an expert for the job role. It will also be giving you improved earning potential. You can stay ahead of your competitors. In addition to that, there is a huge demand for the job role. Companies are looking for professionals who can go ahead with the development of cloud applications and management of the cloud infrastructure. When you have good knowledge of the Microsoft Azure certification, you will have the skills developed for the same.&lt;/p&gt;

&lt;p&gt;The course objectives include the Microsoft Azure training alongside an understanding of the main principles of cloud computing and how they were implemented in Microsoft Azure. Additionally, it will guide you to manage the subscriptions building and the role-based access control regarding Azure. Also, there is a need for the implementation of the use cases and the configuration options for the Microsoft Azure app services. You can also get the Microsoft Azure app service web applications from an expert in the industry who will come between you adequately for the Microsoft Azure solutions.&lt;/p&gt;

&lt;h2&gt;Final words&lt;/h2&gt;

&lt;p&gt;You will get an understanding regarding the deployment of the apps in Microsoft Azure and securing the data in it. In this regard, if you are looking forward to the best training regarding &lt;a href="https://www.ssdntech.com/microsoft-courses/azure-training-bangalore-city"&gt;&lt;strong&gt;azure course in bangalore&lt;/strong&gt;&lt;/a&gt;, then it's worth choosing SSDN Technologies.&lt;/p&gt;

</description>
      <category>azure</category>
      <category>cloud</category>
      <category>devops</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Hello! Devs, pls can I replace JavaScript with Dart or Flutter knowledge??</title>
      <author>edfolmi</author>
      <pubDate>Wed, 20 Oct 2021 09:33:14 +0000</pubDate>
      <link>https://dev.to/edfolmi/hello-devs-pls-can-i-replace-javascript-with-dart-or-flutter-knowledge-2dbc</link>
      <guid>https://dev.to/edfolmi/hello-devs-pls-can-i-replace-javascript-with-dart-or-flutter-knowledge-2dbc</guid>
      <description></description>
      <category>javascript</category>
      <category>webdev</category>
      <category>flutter</category>
      <category>dart</category>
    </item>
  </channel>
</rss>
