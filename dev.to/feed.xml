<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Home Explore Subscriptions Library</title>
      <author>@evensmaxpierrelouis</author>
      <pubDate>Wed, 20 Oct 2021 15:31:19 +0000</pubDate>
      <link>https://dev.to/pierrelouismax/home-explore-subscriptions-library-4h9l</link>
      <guid>https://dev.to/pierrelouismax/home-explore-subscriptions-library-4h9l</guid>
      <description>&lt;p&gt;SEEKING AlPHA INTEL EVO CORE Micochip | I'm Evensmaxpierrelouis The Chairman of Seeking Alpha &lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>ai</category>
    </item>
    <item>
      <title>Creative-Tim Latest Products (ALL Free) - BS5, Chakra UI, React</title>
      <author>Sm0ke</author>
      <pubDate>Wed, 20 Oct 2021 15:24:43 +0000</pubDate>
      <link>https://dev.to/sm0ke/creative-tim-latest-products-all-free-bs5-chakra-ui-react-ne9</link>
      <guid>https://dev.to/sm0ke/creative-tim-latest-products-all-free-bs5-chakra-ui-react-ne9</guid>
      <description>&lt;p&gt;Hello Coders!&lt;/p&gt;

&lt;p&gt;This article presents a curated list with the latest &lt;code&gt;open-source&lt;/code&gt; products released under the MIT license by the &lt;a href="https://bit.ly/3fKQZaL"&gt;Creative-Tim&lt;/a&gt; agency.  All templates can be downloaded from Github and used for unlimited hobby &amp;amp; commercial end-products. For newcomers, &lt;code&gt;Creative-Tim&lt;/code&gt; is a well-known agency with 1.5M+ registered users and products crafted in different technologies like React, Vue, React Native, Laravel.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://www.admin-dashboards.com/"&gt;Admin Dashboards&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;✨ &lt;a href="https://www.creative-tim.com/product/material-dashboard?AFFILIATE=128200"&gt;Material Dashboard 2&lt;/a&gt; - open-source Bootstrap 5 Dashboard&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://www.creative-tim.com/product/material-kit?AFFILIATE=128200"&gt;Material Kit 2&lt;/a&gt; - free Bootstrap 5 design system&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://www.creative-tim.com/product/purity-ui-dashboard?AFFILIATE=128200"&gt;Purity UI React Dashboard&lt;/a&gt; - crafted on top of Chakra UI&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://www.creative-tim.com/product/muse-ant-design-dashboard?AFFILIATE=128200"&gt;Muse Ant Design Dashboard&lt;/a&gt; - styled with Ant.Design&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://www.creative-tim.com/product/soft-ui-dashboard-react?AFFILIATE=128200"&gt;Soft UI Dashboard React&lt;/a&gt; - free Material-UI dashboard&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Disclosure&lt;/em&gt; - &lt;strong&gt;This post contains affiliate links&lt;/strong&gt;. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you use these links to buy something (no additional cost to you) I may earn a commission, product, or service. &lt;strong&gt;Thank you!&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#material-dashboard-2"&gt;
  &lt;/a&gt;
  ✨ &lt;a href="https://www.creative-tim.com/product/material-dashboard?AFFILIATE=128200"&gt;Material Dashboard 2&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Material Dashboard 2 is built with over 60 frontend individual elements, like buttons, inputs, navbars, nav tabs, cards, or alerts, giving you the freedom of choosing and combining. All components can take variations in color, which you can easily modify using SASS files and classes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;✨ &lt;a href="https://www.creative-tim.com/product/material-dashboard?AFFILIATE=128200"&gt;Material Dashboard 2&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://demos.creative-tim.com/material-dashboard/pages/dashboard.html?AFFILIATE=128200"&gt;Material Dashboard 2&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to get inspiration or just show something directly to your clients, you can jump-start your development with our pre-built example pages. You will be able to quickly set up the basic structure for your web project.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wXz_iv-4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ir8ta4sg3nxlavsw5ed3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wXz_iv-4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ir8ta4sg3nxlavsw5ed3.gif" alt="Material Dashboard 2 - Open-source BS5 Template"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#material-kit-2"&gt;
  &lt;/a&gt;
  ✨ &lt;a href="https://www.creative-tim.com/product/material-kit?AFFILIATE=128200"&gt;Material Kit 2&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The most complex and innovative UI Kit Made by Creative Tim. Check our latest Freebie Bootstrap 5 UI Kit with a fresh, new design inspired by Google's Material Design 2.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;✨ &lt;a href="https://www.creative-tim.com/product/material-kit?AFFILIATE=128200"&gt;Material Kit 2&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://demos.creative-tim.com/material-kit/index.html?AFFILIATE=128200"&gt;Material Kit 2&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Material Kit 2 is built with over 60 frontend individual elements, like buttons, inputs, navbars, nav tabs, cards, or alerts, giving you the freedom of choosing and combining. All components can take variations in color, which you can easily modify using SASS files and classes.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WVg_8zLy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0n5ebxdv88kqbmktrnop.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WVg_8zLy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0n5ebxdv88kqbmktrnop.png" alt="Material Dashboard 2 - Open-source BS5 UI Kit"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#purity-ui-react-dashboard"&gt;
  &lt;/a&gt;
  ✨ &lt;a href="https://www.creative-tim.com/product/purity-ui-dashboard?AFFILIATE=128200"&gt;Purity UI React Dashboard&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Purity UI Dashboard is built with over 70 frontend individual elements, like buttons, inputs, navbars, nav tabs, cards, and alerts, giving you the freedom of choosing and combining. All components can take variations in color, that you can easily modify using Chakra's style props.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;✨ &lt;a href="https://www.creative-tim.com/product/purity-ui-dashboard?AFFILIATE=128200"&gt;Purity UI React Dashboard&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://demos.creative-tim.com/purity-ui-dashboard/#/admin/dashboard?AFFILIATE=128200"&gt;Purity UI React Dashboard&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This Free Chakra UI Dashboard is coming with prebuilt design blocks, so the development process is seamless, switching from our pages to the real website is very easy to be done.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SxCzWLS9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zi9p5v5d6sk9xjlxoa14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SxCzWLS9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zi9p5v5d6sk9xjlxoa14.png" alt="Purity Dashboard - Open-source React Template"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#muse-ant-design-dashboard"&gt;
  &lt;/a&gt;
  ✨ &lt;a href="https://www.creative-tim.com/product/muse-ant-design-dashboard?AFFILIATE=128200"&gt;Muse Ant Design Dashboard&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Muse Ant Design Dashboard is a free Admin Template based on two popular front-end technologies: Ant Design &amp;amp; React. It was built to simplify the developer's work and is comes with a fresh design inspired by Ant Design. All its components are built to fit perfectly with each other, while aligning to the Ant Design concepts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;✨ &lt;a href="https://www.creative-tim.com/product/muse-ant-design-dashboard?AFFILIATE=128200"&gt;Muse Ant Design Dashboard&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://demos.creative-tim.com/muse-ant-design-dashboard/#/dashboard?AFFILIATE=128200"&gt;Muse Ant Design Dashboard&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This beautiful admin also comes with 5 color filter choices for both the sidebar and the cards (blue, green, red, yellow, and black), an option to have a transparent or fill sidebar, and an option to have a fixed navbar.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qMo2Tl_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kp9o2vh0a2tw9wseq4y7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qMo2Tl_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kp9o2vh0a2tw9wseq4y7.png" alt="Muse Dashboard - Open-source React Template."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#soft-ui-dashboard-react"&gt;
  &lt;/a&gt;
  ✨ &lt;a href="https://www.creative-tim.com/product/soft-ui-dashboard-react?AFFILIATE=128200"&gt;Soft UI Dashboard React&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Soft UI Dashboard React is built with over 70 frontend individual elements, like buttons, inputs, navbars, nav tabs, cards, or alerts, giving you the freedom of choosing and combining. All components can take variations in color, which you can easily modify using JSS files and classes&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;✨ &lt;a href="https://www.creative-tim.com/product/soft-ui-dashboard-react?AFFILIATE=128200"&gt;Soft UI Dashboard React&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;✨ &lt;a href="https://demos.creative-tim.com/soft-ui-dashboard-react/#/dashboard?AFFILIATE=128200"&gt;Soft UI Dashboard React&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Start your Development with an Innovative Admin Template for Material-UI and React. If you like the look &amp;amp; feel of the hottest design trend right now, Soft UI, you will fall in love with this dashboard! It features a huge number of components built to fit together and look amazing.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ZzwvYM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0j3t4rnexrry119evfzu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ZzwvYM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0j3t4rnexrry119evfzu.png" alt="Soft Dashboard - Open-source React Template."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Thanks for reading&lt;/code&gt;! For more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;👉 More &lt;a href="https://appseed.us/apps/react"&gt;React Apps&lt;/a&gt; - index provided by AppSeed&lt;/li&gt;
&lt;li&gt;👉 Free &lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards&lt;/a&gt; - a popular article published on Dev&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://blog.appseed.us/react-user-authentication-jwt-token/"&gt;React User Authentication&lt;/a&gt; - JWT Token Authentication&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>creativetim</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Is Hacking legal 🤔⁉️ </title>
      <author>FATRIC</author>
      <pubDate>Wed, 20 Oct 2021 14:56:27 +0000</pubDate>
      <link>https://dev.to/alfarsi2008/is-hacking-legal--4m06</link>
      <guid>https://dev.to/alfarsi2008/is-hacking-legal--4m06</guid>
      <description>&lt;p&gt;firstly we need to know about the hacking, what is it?, What kinds he is?, how it works? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vX70_4wL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6x3m2szdfvxhz5zotlrq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vX70_4wL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6x3m2szdfvxhz5zotlrq.jpg" alt="img"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-what-is-hacking"&gt;
  &lt;/a&gt;
  1. What is Hacking?
&lt;/h2&gt;

&lt;p&gt;i cant tell you the meaning of hacking becuase it has a Many definitions, i like the google definition&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
Definition: Hacking is an attempt to exploit a computer system or a private network inside a computer. Simply put, it is the unauthorised access to or control over computer network security systems for some illicit purpose.
&lt;/blockquote&gt; 

&lt;p&gt;but in many things the hacking is a legal thing. how? see the below text.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2what-kinds-he-is"&gt;
  &lt;/a&gt;
  2.What kinds he is?
&lt;/h2&gt;

&lt;p&gt;the hacking has many kinds like: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Informations&lt;/li&gt;
&lt;li&gt;Games &lt;/li&gt;
&lt;li&gt;Data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and more...&lt;br&gt; &lt;/p&gt;

&lt;p&gt;But the hackers are divided into two types &lt;strong&gt;moral and unmoral&lt;/strong&gt;&lt;br&gt; &lt;/p&gt;

&lt;p&gt;Moral: its a legal hacking uses to self-defense &amp;amp; the companies use it detect errors.&lt;/p&gt;

&lt;p&gt;Unmoral: its non-legal hacking uses to penetration peoples and companies and collect data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wgFxEL0W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdf7g3626spvcqzufnca.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wgFxEL0W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdf7g3626spvcqzufnca.jpg" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works?
&lt;/h2&gt;

&lt;p&gt;if you ask any hacker how he is hacking his answer will be "Terminal", but wich Terminal? &lt;br&gt;
the best Terminal is &lt;a href="https://www.linux.com/what-is-linux/"&gt;Linux Terminal&lt;/a&gt; &lt;br&gt;
ok.. how? &lt;br&gt;
with &lt;a href="https://opensource.com/resources/what-bash"&gt;bash&lt;/a&gt;...Sometimes &lt;a href="https://www.python.org/doc/essays/blurb/"&gt;Python&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-conclusion"&gt;
  &lt;/a&gt;
  4. Conclusion
&lt;/h2&gt;

&lt;p&gt;the hacking will be a legal thing When it comes to self-defense or work with companies, anything else he is non-legal. &lt;/p&gt;

</description>
      <category>bash</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>3 Uncommon but useful HTML elements</title>
      <author>JS Bits with Bill</author>
      <pubDate>Wed, 20 Oct 2021 14:55:46 +0000</pubDate>
      <link>https://dev.to/js_bits_bill/3-uncommon-but-useful-html-elements-jdi</link>
      <guid>https://dev.to/js_bits_bill/3-uncommon-but-useful-html-elements-jdi</guid>
      <description>&lt;h2&gt;1) &lt;code&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;b&gt;abbreviation&lt;/b&gt; &lt;code&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt; element is used to represent an acronym or abbreviation. If you include a &lt;code&gt;title&lt;/code&gt; attribute, the text will be display as a tooltip on hover!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
  The &lt;span class="nt"&gt;&amp;lt;abbr&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"Product Detail Page"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;PDP&lt;span class="nt"&gt;&amp;lt;/abbr&amp;gt;&lt;/span&gt; provides
  information on a specific product.
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5CJZfSC5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dzynqn10l/image/upload/v1634687036/JS%2520Bits/abbr_tag_oimzss.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5CJZfSC5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dzynqn10l/image/upload/v1634687036/JS%2520Bits/abbr_tag_oimzss.jpg"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;2) &lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt; element will display a progress bar indicator that can be easily controlled with it's &lt;code&gt;value&lt;/code&gt; attribute. The JavaScript in this example will incrementally fill our progress bar every 100ms as shown here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"progress"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Progress:&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;progress&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"progress"&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/progress&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;progress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#progress&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;setProgress&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setProgress&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setProgress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ccn0LFk---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dzynqn10l/image/upload/v1634687087/JS%2520Bits/progress_tag_jaqggk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ccn0LFk---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dzynqn10l/image/upload/v1634687087/JS%2520Bits/progress_tag_jaqggk.gif"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;3) &lt;code&gt;&amp;lt;wbr&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The word break opportunity &lt;code&gt;&amp;lt;wbr&amp;gt;&lt;/code&gt; element will allow you to specify exactly where a line of text should break when there is overflow. For example, if we have a super long line of text like this URL, we can tell the browser where the text should break if it doesn't fit on one line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
http://is.this.just.real.life.com/is&lt;span class="nt"&gt;&amp;lt;wbr&amp;gt;&lt;/span&gt;/this/just/fantasy/caught/in/a/landslide/no/espace/from/reality
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CGxaMNHt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dzynqn10l/image/upload/v1634687008/JS%2520Bits/wbr_z3gckm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CGxaMNHt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dzynqn10l/image/upload/v1634687008/JS%2520Bits/wbr_z3gckm.jpg"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;b&gt;Yo!&lt;/b&gt; I post byte-sized tips like these often. Follow me if you crave more! 🍿&lt;/p&gt;

&lt;p&gt;I'm on &lt;a href="https://www.tiktok.com/@js_bits"&gt;TikTok&lt;/a&gt;, &lt;a href="https://twitter.com/JS_Bits_Bill"&gt;Twitter&lt;/a&gt; and I have a new &lt;a href="https://jsbits-yo.com/bug-bash/"&gt;debugging course&lt;/a&gt; dropping soon!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>html</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Getting around prop immutability in Vue.js</title>
      <author>Reynold Osei Adade</author>
      <pubDate>Wed, 20 Oct 2021 14:40:39 +0000</pubDate>
      <link>https://dev.to/reynoldadade/getting-around-prop-immutability-in-vuejs-2ggd</link>
      <guid>https://dev.to/reynoldadade/getting-around-prop-immutability-in-vuejs-2ggd</guid>
      <description>&lt;p&gt;&lt;em&gt;This article is for beginner and intermediate developers who have problems wrapping their head around why props are immutable and also why you cant just go ahead and edit it without actually having console errors.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h2&gt;

&lt;p&gt;Let say you have a component, in that component there is a method that calls an alert and if the alert is confirmed, then an index is found and then splice is done.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//ChildComponent.vue&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;skillsToMerge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
 &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;onRemoveSkill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;skill&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;confirmRemoval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;confirm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Proceed to remove &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;skill&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;?`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;confirmRemoval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;skillsToMerge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;skill&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;skillsToMerge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In any other situation, this would have been a perfectly fine activity, but when it comes to vue.js props this will throw a warning in the console, and if you are using ESlint it will highlight that line as an error&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oAJAZD5Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aee6mqknme7j4j6bahmr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oAJAZD5Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aee6mqknme7j4j6bahmr.png" alt="linting error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-this-a-problem"&gt;
  &lt;/a&gt;
  Why is this a problem?
&lt;/h2&gt;

&lt;p&gt;Immutability for props means it never changes or should not be changed&lt;br&gt;
Props originate from a single data source, that is why it is by default reactive which means that every action taken on the original data source will affect every other child using that data source or prop, now imagine that your data could be changed midway, it wouldn't make for a very reliable data reference. If every component that used the data was able to edit it error fixing would be a tedious task.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;Think of props are that data you can copy and read but cant edit, or an article on &lt;a href="https://dev.to"&gt;dev.to&lt;/a&gt; that someone has written, you could read it, and copy and even share it but you cant edit the post, only the author can. Therefore props should only be edited in the pages or components where they originate from. In other words you can only edit it when it is a data variable and not a prop&lt;/p&gt;

&lt;p&gt;This gives us 2 ways of going of editing our props without effectively breaking its immutability&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#solution-1-emitters"&gt;
  &lt;/a&gt;
  Solution 1: Emitters
&lt;/h3&gt;

&lt;p&gt;Emitters are a way for child components to trigger an action in the parent, they are created by using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myEvent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then it the parent do this on the child&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;myEvent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;doSomething&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/child-component&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will ensure that you can trigger a function in the parent on the data variable without directly editing props&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution-2-functions"&gt;
  &lt;/a&gt;
  Solution 2: functions
&lt;/h3&gt;

&lt;p&gt;Functions or methods are one of the most useful syntaxes in code, and when you realize that functions could be used as props it effectively opens up unlimited possibilities. Lets look at the code below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//ChildComponent.vue&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ChildComponent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;skillsToMerge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="na"&gt;mergeSkills&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
 &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;onRemoveSkill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;skill&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;confirmRemoval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;confirm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Proceed to remove &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;skill&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;?`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;confirmRemoval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mergeSkills&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;skill&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//ParentComponent.vue&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ParentComponent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="na"&gt;skillsToMerge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nl"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;mergeSkills&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;skill&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;skillsToMerge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;skill&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;skillsToMerge&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets explain what is happening in the code above, instead of trying to splice the &lt;code&gt;skillsToMerge&lt;/code&gt; prop we create a function inside the parent component where the &lt;code&gt;skillsToMerge&lt;/code&gt; variable was created and edit it there&lt;/p&gt;

&lt;p&gt;The reason it is better to do it this way is that&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It protects your prop by allowing only that function to edit your data outside the parent component. This is quite similar to having private variables.&lt;/li&gt;
&lt;li&gt;It makes code refactoring easier since editing the logic of the &lt;code&gt;mergeSkills&lt;/code&gt; function in the parent component affects every component it is used in.&lt;/li&gt;
&lt;li&gt;If there are a lot of nested child components, emitting events upwards will take much more code to do and it will be quite easy to have an error.&lt;/li&gt;
&lt;li&gt;Finally when using inject-provide using methods becomes so much easier as there isn't a need to pushed events upwards and also methods don't need the reactivity that  props do, hence it will make your code cleaner&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There are surely more ways to deal with the limitations imposed by props due to its immutability but that limitations is also its greatest benefit due to the security it provides as a single source of data. &lt;br&gt;
This method logic is taken from how Vuex manipulates state using actions, keeping that in mind will make the benefits clearer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I hope this has benefited you. Until next time, happy coding&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>vue</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Extending the Salesforce CLI with a Custom Plugin</title>
      <author>Michael Bogan</author>
      <pubDate>Wed, 20 Oct 2021 14:31:35 +0000</pubDate>
      <link>https://dev.to/salesforcedevs/extending-the-salesforce-cli-with-a-custom-plugin-59e0</link>
      <guid>https://dev.to/salesforcedevs/extending-the-salesforce-cli-with-a-custom-plugin-59e0</guid>
      <description>&lt;p&gt;As more services move to the cloud and DevOps methodologies continue to evolve, more and more developers are getting comfortable with working in the terminal. Whereas traditional CLI commands like &lt;code&gt;grep&lt;/code&gt; and &lt;code&gt;cat&lt;/code&gt; are well-known tools for achieving small goals, more complicated tasks require more robust tooling.&lt;/p&gt;

&lt;p&gt;Nowadays, CLI programs come with richer interactive experiences. One such program is the &lt;a href="https://developer.salesforce.com/tools/sfdxcli"&gt;Salesforce CLI&lt;/a&gt;, the command-line interface for Salesforce DX. It’s a CLI that helps simplify common operations when building an application for Salesforce developers. The Salesforce CLI itself is built on top of &lt;a href="https://oclif.io/"&gt;oclif&lt;/a&gt;—also from Salesforce—which is an open-source framework for building command-line interfaces. Oclif is written in TypeScript, and it has a very robust community supporting it. Best of all, it has an architecture that prioritizes plugin support, which enables users to extend the CLI for their own needs.&lt;/p&gt;

&lt;p&gt;In this post, we’ll create a custom plugin for sfdx. Our plugin will generate fixture data for a Lightning app that runs on a Salesforce org. This data will be used to populate our project with random names and addresses in order for us to test the usability of our project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Before getting started, install the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A relatively recent version of &lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt;. You should install the latest version available, such as 12.20.0 or 14.13.1&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.234.0.sfdx_setup.meta/sfdx_setup/sfdx_setup_install_cli.htm#sfdx_setup_install_cli"&gt;Salesforce CLI tool&lt;/a&gt;, installed globally as the &lt;code&gt;sfdx-cli&lt;/code&gt; NPM package&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt; (As long as you know JavaScript, deep familiarity with TypeScript isn’t required.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To make absolutely sure that you have all the necessary software, follow &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.sfdx_cli_plugins.meta/sfdx_cli_plugins/cli_plugins_generate_prepare.htm"&gt;this guide on preparing for Salesforce CLI plugin development&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next, if you don’t have a Salesforce org, &lt;a href="https://developer.salesforce.com/signup"&gt;sign up for a free Developer Edition org&lt;/a&gt;.  &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_setup_enable_devhub.htm"&gt;Enable Dev Hub for your Salesforce &lt;/a&gt;org. Once your DevHub is enabled, you’ll need to associate it with your Salesforce CLI install. To do that, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sfdx auth:web:login -d -a DevHub
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will open a new browser window that will ask for your Salesforce credentials. Once you’ve gone through that flow, sfdx will inform you when the authentication is complete. &lt;/p&gt;

&lt;p&gt;Finally, you can &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_scratch_orgs_create.htm"&gt;create a scratch org&lt;/a&gt;, which is like a temporary Salesforce org. You can use the scratch org to test what developing on the Salesforce platform looks like.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;Open up a terminal window, and navigate to a folder for your new project. Then, clone the following GitHub repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/trailheadapps/dreamhouse-lwc.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Dreamhouse app is a sample Lightning application that lists realtors and their associated properties. The app comes with some fixture data, but since &lt;em&gt;our&lt;/em&gt; goal is to build an sfdx plugin that creates a set of randomized fixture data for this application, we can get rid of these files. To do so, delete the following files from your newly cloned repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;data/brokers-data.json
data/properties-data.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should also remove their references from the data/sample-data-plan.json file; a diff of that would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;--- a/data/sample-data-plan.json
+++ b/data/sample-data-plan.json
@@ -1,17 +1,9 @@
 [
-    {
-        "sobject": "Broker__c",
-        "saveRefs": true,
-        "files": ["brokers-data.json"]
-    },
-    {
-        "sobject": "Property__c",
-        "resolveRefs": true,
-        "files": ["properties-data.json"]
-    },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let’s see what the app actually looks like. Run the install script which comes with the repository—either &lt;code&gt;bin/install-scratch.sh&lt;/code&gt; or &lt;code&gt;bin/install-scratch.bat&lt;/code&gt;, depending on your operating system—to push the complete Lightning app to your Salesforce org.&lt;/p&gt;

&lt;p&gt;This opens a browser window and takes you to your Salesforce instance. Click on the &lt;strong&gt;App Launcher&lt;/strong&gt; icon in the upper left corner (it’s the row of dots) and select the Dreamhouse app. You should see a Quarterly Performance chart, without any data. You can also click on the &lt;strong&gt;Properties&lt;/strong&gt; menu, and note that there are zero items available.&lt;/p&gt;

&lt;p&gt;This is all to be expected. Our Salesforce CLI plugin will create the fictional properties which our app will use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-the-plugin"&gt;
  &lt;/a&gt;
  Creating the plugin
&lt;/h3&gt;

&lt;p&gt;In a new folder outside of the dreamhouse-lwc project, run this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sfdx plugins:generate fixture-data-demo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will scaffold a new plugin in a directory called &lt;code&gt;fixture-data-demo&lt;/code&gt;. You’ll be asked a series of questions, but you can just keep hitting Enter to accept all of the defaults.&lt;/p&gt;

&lt;p&gt;After npm finishes installing all of the dependencies, we can test whether or not the plugin was set up correctly. Run &lt;code&gt;bin/run hello:org -u $USERNAME&lt;/code&gt;, where &lt;code&gt;$USERNAME&lt;/code&gt;is your Salesforce user name. You should see a greeting in response.&lt;/p&gt;

&lt;p&gt;One of the nice things about extending the Salesforce CLI is that many of the difficult choices around working with command flags or arguments are vastly simplified for you. There’s even a test runner that requires very little configuration on your part. Let’s start building out our plugin to see these features in action.&lt;/p&gt;

&lt;p&gt;You might have noticed two interesting things about the command we used to run to get our earlier greeting:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We used &lt;code&gt;bin/&lt;strong&gt;run&lt;/strong&gt; &lt;/code&gt;to execute our &lt;code&gt;hello:org&lt;/code&gt; command. &lt;code&gt;bin/&lt;strong&gt;run &lt;/strong&gt;&lt;/code&gt;executes sfdx, while loading a &lt;em&gt;local &lt;/em&gt;copy of your plugin. That is, the plugin you are developing can only be used in this directory; it’s not available outside of this scope just yet.&lt;/li&gt;
&lt;li&gt;All sfdx commands are preceded by a namespace to avoid conflicts with other plugins. In this case, that namespace is &lt;code&gt;hello&lt;/code&gt;. Navigate to the &lt;code&gt;src/commands&lt;/code&gt; directory in your recently scaffolded project, and you’ll see a directory called &lt;code&gt;hello&lt;/code&gt;, with a single file, &lt;code&gt;org.ts&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s suppose we want our plugin to run as &lt;code&gt;sfdx fixtures:&lt;strong&gt;generate&lt;/strong&gt;&lt;/code&gt;. In that case, rename the &lt;code&gt;hello&lt;/code&gt; folder to &lt;code&gt;fixtures&lt;/code&gt;, and the &lt;code&gt;org.ts&lt;/code&gt; file to &lt;code&gt;generate.ts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can delete all of the code that is in the newly renamed &lt;code&gt;generate.ts&lt;/code&gt;. In the next part of this guide, we’ll provide code blocks that you should paste into the file instead. As we progress, we’ll describe what our code does so that you can follow along.&lt;/p&gt;

&lt;p&gt;First, let’s set up our &lt;code&gt;import&lt;/code&gt; statements:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import * as os from 'os';
import { promises as fsPromises } from 'fs';
import * as path from 'path';

import { flags, SfdxCommand } from '@salesforce/command';
import { Messages } from '@salesforce/core';
import { AnyJson } from '@salesforce/ts-types';

import * as mkdirp from 'mkdirp';
import * as Chance from 'chance';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first set represents core Node modules that we’ll need to use in our CLI plugin. The second set represents core modules required by sfdx. Finally, the third set represents third-party npm packages that our plugin needs to function. Let’s not forget to add those module dependencies to our project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install mkdirp chance --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Moving on, paste these lines after the &lt;code&gt;import&lt;/code&gt; statements:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Initialize Messages with the current plugin directory
Messages.importMessagesDirectory(__dirname);

// Load the specific messages for this file. Messages from @salesforce/command, @salesforce/core,
// or any library that is using the messages framework can also be loaded this way.
const messages = Messages.loadMessages('fixture-data-demo', 'generate');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We’ll get to the use of this &lt;code&gt;messages&lt;/code&gt; variable shortly. For now, keep it in mind, and continue pasting these code blocks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export default class Generate extends SfdxCommand {
 public static description = messages.getMessage('commandDescription');

 public static examples = messages.getMessage('examples').split(os.EOL);

 protected static flagsConfig = {
   // flag with a value (-n, --name=VALUE)
   count: flags.integer({
     char: 'c',
     description: messages.getMessage('numberFlagDescription'),
     default: 10
   }),
 };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay, now we’re getting to some good stuff. Our generate command is mapped to a class called &lt;code&gt;Generate&lt;/code&gt;, which extends the &lt;code&gt;SfdxCommand&lt;/code&gt; class. Because of this inheritance, a lot of functionality is provided for us by sfdx. We set up some variables for a command description and for examples—since this deals with &lt;code&gt;messages&lt;/code&gt;, we’ll elaborate on this part shortly. More importantly, we are setting up a flag called &lt;code&gt;count&lt;/code&gt;, which has a shortcode of &lt;code&gt;n&lt;/code&gt;. That means that we can call our command with a &lt;code&gt;--count&lt;/code&gt; or &lt;code&gt;-c&lt;/code&gt; flag in order to provide some additional configuration. In this case, if no &lt;code&gt;count&lt;/code&gt;is provided, the default value will be &lt;code&gt;10&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Next, we’ll get to the fixture data generation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   const chance = new Chance();

   const brokerData = { records: [] };
   const propertyData = { records: [] };

   for (let i = 0; i &amp;lt; number; i++) {
     const brokerName = chance.name();

     brokerData.records.push({
       "attributes": {
         "type": "Broker__c",
         "referenceId": `${brokerName.replace(/\s/g, "")}Ref`
       },
       "name": brokerName,
       "Title__c": "Senior Broker",
       "Phone__c": chance.phone(),
       "Mobile_Phone__c": chance.phone(),
       "Email__c": chance.email(),
       "Picture__c": `https:${chance.avatar()}`
     });

     const address = chance.address();
     propertyData.records.push({
       "attributes": {
         "type": "Property__c",
         "referenceId": `${address.replace(/\s/g, "")}Ref`
     },
     "Name": chance.sentence({ words: 5 }),
     "Address__c": address,
     "City__c": chance.city(),
     "State__c": chance.state(),
     "Zip__c": chance.zip(),
     "Price__c": chance.floating({ fixed: 2, min: 100000, max: 1000000 }),
     "Beds__c": chance.natural({ min: 1, max: 5 }),
     "Baths__c": chance.natural({ min: 1, max: 5 }),
     "Location__Longitude__s": chance.longitude(),
     "Location__Latitude__s": chance.latitude(),
     "Picture__c": `https://s3-us-west-1.amazonaws.com/sfdc-demo/realty/house${chance.natural({ min: 1, max: 10 })}.jpg`,
     "Thumbnail__c": `https://s3-us-west-1.amazonaws.com/sfdc-demo/realty/house${chance.natural({ min: 1, max: 10 })}sq.jpg`,
     "Tags__c": "victorian",
     "Description__c": chance.sentence({ words: 10 })
     });
   }

   await mkdirp('data');
   await fsPromises.writeFile(path.join('data', 'brokers-data.json'), JSON.stringify(brokerData, null, 2));
   await fsPromises.writeFile(path.join('data', 'properties-data.json'), JSON.stringify(propertyData, null, 2));

   return "All done! Check the data directory. :)";
 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This looks like a lot of code, but don’t worry! Our Dreamhouse app has several custom objects. Among those objects are Brokers and Properties. We need to provide values for their individual attributes. We create some variables to store this information as JSON (&lt;code&gt;brokerData&lt;/code&gt; and &lt;code&gt;propertyData&lt;/code&gt;). Then, we loop through this as many times as matches our &lt;code&gt;number&lt;/code&gt; value, and we use our previously imported &lt;code&gt;Chance&lt;/code&gt; package to generate random values for names, phone numbers, addresses, and so on. When that’s finished, we create a directory called &lt;code&gt;data&lt;/code&gt;, and write these fixtures out as JSON.&lt;/p&gt;

&lt;p&gt;Okay, as promised, let’s go back to that &lt;code&gt;messages&lt;/code&gt; variable. You should have a folder in your plugin called &lt;code&gt;messages&lt;/code&gt;, with a file called &lt;code&gt;org.json&lt;/code&gt;. Rename this file to &lt;code&gt;generate.json&lt;/code&gt;, and open it up. Here is where all of the help strings are defined for your CLI command. Replace the contents with the following JSON:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
 "commandDescription": "generate a list of addresses and names",
 "countFlagDescription": "number of items to generate",
 "examples": [
   "sfdx fixtures:generate --count 5"
 ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to better understand what this JSON file does, execute &lt;code&gt;bin/run fixtures:&lt;strong&gt;generate&lt;/strong&gt; --help&lt;/code&gt; at the command line in our terminal. You will see these strings displayed as help documentation. That’s the purpose of all the message code noted above: &lt;em&gt;mapping these strings to commands and flags for a better UX&lt;/em&gt;. It’s important to provide your users with some guidance on how to use your command.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-and-releasing"&gt;
  &lt;/a&gt;
  Testing and Releasing
&lt;/h3&gt;

&lt;p&gt;Of course, no piece of software is complete without tests. The Salesforce CLI comes with a testing library that makes it easier to build out this essential part of development.&lt;/p&gt;

&lt;p&gt;Much like the source code, our directory and file structure should match our command name. Open up the &lt;code&gt;test/commands&lt;/code&gt; directory and rename &lt;code&gt;hello&lt;/code&gt; to &lt;code&gt;fixtures&lt;/code&gt;, and &lt;code&gt;org.test.ts&lt;/code&gt; to &lt;code&gt;generate.test.ts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Our entire test file will be rather small, so we won’t go into it line-by-line the way we did with the source code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { expect, test } from '@salesforce/command/lib/test';

import * as path from 'path';
import { promises as fsPromises } from 'fs';

const dataPath = path.join(__dirname, '..', '..', '..', 'data');

describe('fixtures:org', () =&amp;gt; {
 test
   .stdout()
   .command('fixtures:generate')
   .it('runs fixtures:generate', async (ctx) =&amp;gt; {
     const brokersFilename = path.join(dataPath, 'brokers-data.json');
     const propertiesFilename = path.join(dataPath, 'properties-data.json');

     // Fulfills with undefined upon success.
     expect(await fsPromises.access(brokersFilename)).to.be.equal(undefined);
     expect(await fsPromises.access(propertiesFilename)).be.equal(undefined);
   });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we’re executing the command through the &lt;code&gt;command('fixtures:generate')&lt;/code&gt; method call. Then, we’re using Node’s &lt;code&gt;&lt;a href="https://nodejs.org/api/fs.html#fs_fspromises_access_path_mode"&gt;access&lt;/a&gt;&lt;/code&gt; method to verify that our JSON files were created. Go ahead and call &lt;code&gt;npm test,&lt;/code&gt; and you’ll see your newly created test pass! &lt;/p&gt;

&lt;p&gt;You might see some linting errors, but you can ignore them. Alternatively, you can edit &lt;code&gt;package.json&lt;/code&gt; to remove the &lt;code&gt;posttest&lt;/code&gt; script—that’s what runs the linter after your tests complete.&lt;/p&gt;

&lt;p&gt;With our plugin code complete and tested, it’s time to see it in action. Now, you have a globally installed version of sfdx, but a locally developed plugin. We need a way to load the plugin into our global install. Fortunately, sfdx comes with a command to do just that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sfdx plugins:link
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you run this command in your plugin directory, sfdx will load this local plugin so that you can test it out in your own Lightning app before distributing it. If you discover that you need to make changes to the plugin after it’s been linked, just run ​​&lt;code&gt;sfdx plugins:uninstall $PLUGIN_NAME&lt;/code&gt;to unlink it.&lt;/p&gt;

&lt;p&gt;Now, in the terminal, navigate back to your previously cloned directory for the Dreamhouse app. Once there, type &lt;code&gt;sfdx fixtures:generate&lt;/code&gt;. You should now have a &lt;code&gt;data&lt;/code&gt; directory, complete with several brand new JSON files filled with randomly generated data. Let’s go ahead and import these new changes into our org and then see the results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sfdx force:data:tree:import -f data/brokers-data.json, data/properties-data.json
sfdx force:org:open
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just like before, navigate to the Dreamhouse app through the &lt;strong&gt;App Launcher&lt;/strong&gt;. However, this time you’ll notice actual records, which represent the fixtures you just generated! The Brokers tab, for example, is full of all the same records as the ones generated by the plugin:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rvIkoxnY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ac1kjtf4ynf6k0k7hc0o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rvIkoxnY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ac1kjtf4ynf6k0k7hc0o.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learning-more"&gt;
  &lt;/a&gt;
  Learning more
&lt;/h3&gt;

&lt;p&gt;Developing Salesforce CLI plugins benefits both developers _and _users. For developers, much of the boilerplate of providing documentation, argument handling, and testing is taken care of. Users can expect every custom plugin to behave in predictable ways, and these plugins unlock powerful new capabilities they can use to make their Lightning app development just a little bit easier.&lt;/p&gt;

&lt;p&gt;We’ve only scratched the surface of what it means to work with Salesforce CLI. There’s a more in-depth tutorial on the ins and outs of Salesforce development over on &lt;a href="https://trailhead.salesforce.com/content/learn/projects/develop-app-with-salesforce-cli-and-source-control"&gt;Trailhead&lt;/a&gt;; I even found &lt;a href="https://trailhead.salesforce.com/en/search?keywords=sfdx"&gt;an entire category of amazing things you can do with sfdx&lt;/a&gt;. In addition, their &lt;a href="https://developer.salesforce.com/docs/atlas.en-us.sfdx_cli_plugins.meta/sfdx_cli_plugins/cli_plugins.htm"&gt;documentation&lt;/a&gt; includes some best practices and performance suggestions. Happy coding!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>devops</category>
    </item>
    <item>
      <title>A righteous PR</title>
      <author>Matthew</author>
      <pubDate>Wed, 20 Oct 2021 14:21:43 +0000</pubDate>
      <link>https://dev.to/mtfoley/a-righteous-pr-3404</link>
      <guid>https://dev.to/mtfoley/a-righteous-pr-3404</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DajMKz_f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/XaM3GgMW65BNMBhIqH/giphy.gif%3Fcid%3D5e214886b49cjgebt9uihyklfliex42nr1q6zww6rfcsfs3p%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DajMKz_f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media2.giphy.com/media/XaM3GgMW65BNMBhIqH/giphy.gif%3Fcid%3D5e214886b49cjgebt9uihyklfliex42nr1q6zww6rfcsfs3p%26rid%3Dgiphy.gif%26ct%3Dg" alt="you got a twofer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While on a co-working session in the &lt;a href="https://virtualcoffee.io"&gt;VirtualCoffee&lt;/a&gt; community, the topic veered into converting a class-based React component to a functional React component. I had zero experience to add here but I mentioned that after a few months of learning about React in the &lt;a href="https://github.com/open-sauced/open-sauced"&gt;Open Sauced&lt;/a&gt; I had finally gotten to write some code with &lt;code&gt;useEffect()&lt;/code&gt; and I felt like I knew why it worked! Others on the call encouraged me to mention it in a blog so here we are. &lt;/p&gt;

&lt;p&gt;The &lt;a href="https://opensauced.pizza"&gt;Open Sauced app&lt;/a&gt; helps you to organize your plans for open source contributions by tracking a list of "goals". The related issues for this PR dealt with adding and removing items in the list of goals, and the UI not reflecting the changes made. I had a handful of earlier PRs that were chipping away at the underlying problems and this was the one that was going to put a nail in it. For reference here’s the PR: &lt;a href="https://github.com/open-sauced/open-sauced/pull/1220"&gt;https://github.com/open-sauced/open-sauced/pull/1220&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first few lines of the React component were these:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ListGoals&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;goals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;goalsWithData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;goals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;listGoals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setGoals&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;goalsWithData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;searchTerm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSearchTerm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// The PR added these three lines&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setGoals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;goals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;goals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="c1"&gt;// ... other stuff and render function that uses "listGoals" value&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The general issue we had was that the &lt;code&gt;listGoals&lt;/code&gt; value is what really drives what's rendered, but it's not directly influenced by changes in the &lt;code&gt;goals&lt;/code&gt; and &lt;code&gt;data&lt;/code&gt; props. For this reason, adding or removing goals would cause a change in the &lt;code&gt;goals&lt;/code&gt; prop but the &lt;code&gt;listGoals&lt;/code&gt; value wasn't being affected. The &lt;code&gt;useEffect&lt;/code&gt; call in the PR cleaned that up, and I think the React FAQ talks about it &lt;a href="https://reactjs.org/docs/hooks-faq.html#can-i-run-an-effect-only-on-updates"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So the GIF above is in reference to this PR that closed two issues that were several months old. They weren't old because they were stale, in my opinion - they were aging because there were several related things that needed to be cleaned up prior to getting to this point. Altogether I call this a "righteous PR"!&lt;/p&gt;

&lt;p&gt;As I mentioned, there were several other issues and PRs related to this, so I'm going to be writing some posts that talk about that process unfolding. Stay tuned!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Arquitetura Escalável</title>
      <author>Pedro Kiefer</author>
      <pubDate>Wed, 20 Oct 2021 14:15:20 +0000</pubDate>
      <link>https://dev.to/pedrokiefer/arquitetura-escalavel-335g</link>
      <guid>https://dev.to/pedrokiefer/arquitetura-escalavel-335g</guid>
      <description>&lt;p&gt;Atualmente todos falam em arquiteturas e software escaláveis: "it webscales!"; mas você realmente precisa de tudo isso no dia a dia? Seu sistema recebe 1M req/s para justificar complexidades e abstrações desnecessárias? Provavelmente a resposta é não. Então começe do básico, garanta ótima qualidade desde o príncipio e se um dia for necessário atender 1M req/s será muito mais fácil refatorar o sistema.&lt;/p&gt;

&lt;p&gt;"Ah, mas eu preciso fazer micro serviços, porque todo mundo faz e isso escala!" Beleza, faça micro serviços mas não faça femto-serviços (minha definição para um serviço que é absurdamente pequeno; femto é 10^-15, enquanto micro é só 10^-6.). Um serviço de processamento de fotos não precisa ser 10 serviços diferentes com 10 filas separadas. Faça um serviço que englobe todo o processamento e escale esse serviço. Fica mais fácil de manter, dá para manter na cabeça todo o sistema, o deploy fica mais simples. "Ah, mas daí é um monólito", não, não é, só é um conjunto mínimo de funcionalidades reunidas em um local.&lt;/p&gt;

&lt;p&gt;Se vocês tem muitos micro serviços para compor uma funcionalidade fica muito díficil coordernar uma atualização no payload usado entre os serviços. Será que todos vão entender a mensagem nova? Será que preciso atualizar tudo ao mesmo tempo? Se isso for necessário, agrupe tudo sob um sistema só.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#c%C3%B3digo"&gt;
  &lt;/a&gt;
  Código
&lt;/h2&gt;

&lt;p&gt;Abstraia e crie interfaces somente do que faz sentido no momento, não gaste tempo e energia criando uma arquitetura mega flexível que nunca será usada. Se o código estiver simples e bem testado fica simples refatorar para adicionar mais possibilidades.&lt;/p&gt;

&lt;p&gt;Algumas linguagens em nome de "arquiteturas enterprise" &lt;del&gt;(algo para C-level achar bacana, eu acho?)&lt;/del&gt; acabam criando diversos padrões de projeto que geram só níveis de indireção e abstrações que são pouco úteis para a entrega de valor.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configura%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Configurações
&lt;/h2&gt;

&lt;p&gt;Evite juntar configurações do sistema com regras de negócio. Por exemplo, se você tem um sistema dinâmico para facilitar que outros times desenvolvam serviços em cima, deixe em arquivos separados as configurações que fazem o sistema funcionar e as configurações que são do negócio. O intuito aqui é diminuir os problemas em caso de uma configuração errada. Se temos um arquivo só e quebramos a configuração podemos tirar do ar todo o sistema. Quando separamos podemos continuar servindo conteúdo stale até arrumarmos a regra de negócio. Pense sempre em dois planos: controle e dados.&lt;/p&gt;

&lt;p&gt;Versione todas as configurações do sistema - exceto senhas e dados sensíveis - junto com o código fonte. Configurações são tão importantes quanto o código. Evite alterar configurações manualmente, crie pipelines de entrega adequados para fazer as mudanças necessárias a partir do repositório.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#depend%C3%AAncias"&gt;
  &lt;/a&gt;
  Dependências
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--15HsFxj9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ox3cjjcbxhxuprd6m52h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--15HsFxj9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ox3cjjcbxhxuprd6m52h.png" alt="Exemplo de caos de dependências"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Evite dependências externas, especialmente as que você tem zero controle. Se você precisa usar serviços externos entenda do princípio que eles vão falhar e sua aplicação provavelmente não deveria falhar junto – claro, se for algo essencial da aplicação não dá para ficar sem. Mas um sistema de métricas ou de logging não deveria tirar a aplicação do ar. Nem um deploy em outro sistema deveria ter um impacto enorme na sua aplicação.&lt;/p&gt;

&lt;p&gt;Use retentativas, circuit-breakers ou ainda service mesh, para facilitar a gestão das dependências. Se as aplicações estão muito acopladas, então não há benefícios de ter micro serviços e um grande monólito faria um trabalho muito melhor. Pense em micro serviços como peças que possam ser trocadas quando necessário — e talvez dê para continuar voando sem elas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exemplo"&gt;
  &lt;/a&gt;
  Exemplo
&lt;/h2&gt;

&lt;p&gt;Para exercitar as ideias apresentadas vamos criar um caso de uso real: um sistema de vendas de ingressos para um cinema. O sistema consiste em usuários podendo escolher qual filme querem assistir, em qual dia e horário, e todo o fluxo de compra e emissão do ingresso. A arquitetura inicial é conforme a figura abaixo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EqgEfAKf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilmsafyhj4btgi09cb8c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EqgEfAKf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilmsafyhj4btgi09cb8c.png" alt="Arquitetura inicial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Essa arquitetura pode ser considerada um monólito. Uma única aplicação é responsável por todos os comportamentos do sistema: a autenticação dos usuários que desejam comprar ingressos, o sistema de pagamentos, a gestão de quais filmes estão sendo exibidos em quais salas, entre outras funcionalidades que desejarmos para um sistema como esse.&lt;/p&gt;

&lt;p&gt;Você pode se perguntar: se isso é um monólito, como podemos afirmar que essa aplicação é escalável? Ninguém especificou qual o volume de acessos, quantas salas de cinema o sistema gerencia, nem quantos filmes diferentes estarão disponíveis e onde eles estarão.&lt;/p&gt;

&lt;p&gt;Do ponto de vista de escalabilidade da aplicação, é perfeitamente aceitável começarmos com uma arquitetura dessas. No entanto, existe um pulo do gato para que o código não pareça um novelo de lã depois de um encontro com unhas afiadas: criarmos o sistema levando em conta os domínios necessários para seu funcionamento, garantindo que eles são independentes entre si e se comunicam atráves de interfaces bem definidas.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TkZ90sW5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1t8pc33l4gqfo3l8n24q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TkZ90sW5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1t8pc33l4gqfo3l8n24q.png" alt="Arquitetura inicial interna"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nessa figura mostramos os domínios existentes, deixando claro o que está agrupado em cada um deles: autenticação, filmes, salas, ingressos, pagamentos. Se a arquitetura começa com uma boa separação de conceitos, fica fácil escalar. E, dependendo do contexto, essa arquitetura é a única necessária! Se formos pensar em uma cidade com poucos habitantes, que possui um único cinema com 4 salas que exibem apenas 4 filmes, temos quase certeza de que nunca teremos um volume de acessos maior do que esse sistema consegue aguentar.&lt;/p&gt;

&lt;p&gt;No entanto, vamos exercitar nosso raciocínio para o outro lado. O sistema foi um sucesso, revolucionou a gestão de ingressos na cidade. A empresa, obviamente, quer estender o lucro e o sucesso obtido com o software. Para tanto, decidiu criar outro sistema para vender artigos relacionados a cinema.&lt;/p&gt;

&lt;p&gt;De modo a facilitar o uso para os atuais usuários, resolveram ter uma solução única de autenticação. Como essa responsabilidade já estava totalmente separada na estrutura do código, bastou um refactor para tirar a gestão de usuários do sistema de ingressos e criar um sistema separado. Agora esse sistema pode atender os fluxos de venda de ingressos e de souveniers. Qualquer melhoria na gestão de usuários é propagada para todos os sistemas que o utilizam, e também conseguimos escalar só essa parte do sistema se precisarmos.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tDtx3REM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gjep3j7ya2hdmlgjeh0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tDtx3REM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gjep3j7ya2hdmlgjeh0.png" alt="Arquitetura com autenticação separada"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O sucesso foi estrondoso! A empresa continuou faturando e, logo em seguida, surgiu uma grande oportunidade de negócio: comprar outras salas na cidade vizinha. Além disso, em uma pesquisa de satisfação com os seus clientes, a empresa viu que a grande dor de seus usuários era uma falta de lugares marcados nos ingressos.&lt;/p&gt;

&lt;p&gt;O sistema atual não dava conta - era preciso escalar melhor suas partes internas. Como os domínios não mudaram, basta uma reorganização e criação de novos subsistemas responsáveis por uma dada área. A gestão de ingressos ganha seu próprio subsistema, que escala independemente da gestão de salas e filmes. Lá também temos toda a lógica necessária para gerir a escolha de assentos, o tempo máximo de uma reserva, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ALLL3NGr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4ub96avdi59ve9r3x7g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ALLL3NGr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4ub96avdi59ve9r3x7g.png" alt="Arquitetura final para a história presente"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Podemos ver como o sistema cresceu, outra fontes de dados surgiram, pequenas partes tornaram-se escaláveis. O sistema está pronto? Provavelmente não, sempre haverá novas oportunidades de negócio: aumentar o alcance de cidades, incorporar a gestão de teatros; depende da evolução do negócio. Mas tendo os domínios bem separados, conseguimos escalar na medida certa para não gerar sistemas super complexos. Internamente alguns domínios podem ainda se desdobrar em mais partes, mas o ponto principal é conseguirmos ver a arquitetura como um todo. Qualquer pessoa consegue manter um modelo mental conforme a última figura.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;"Ah, mas esse exemplo é todo de backend, não dá pra aplicar em front."&lt;/code&gt; É possível sim, basta imaginar que temos todo o código de front-end como uma &lt;code&gt;Single Page Application&lt;/code&gt; (SPA). Ter uma SPA é perfeitamente aceitável e permite o compartilhamento de componentes entre páginas, poupando o retrabalho! No entanto, imagine que essa SPA faz o roteamento para todas as páginas e componentes da aplicação - autenticação, pagamentos, visualização dos filmes disponíveis, escolha de sala, entre outras.&lt;/p&gt;

&lt;p&gt;À medida em que a necessidade do sistema vai evoluindo, o número de páginas, componentes e comportamentos complexos vai crescendo. O desempenho e agilidade da página ficam comprometidos; a experiência é degradada para o usuário, que fica esperando até que todo o programa seja executado pelo navegador. Podemos pensar em separar em partes a aplicação, só carregando o necessários conforme a necessidade. Se o usuário nunca entrar na parte de pagamentos, por que gastar tempo deixando ela disponível?&lt;/p&gt;

&lt;p&gt;O mesmo conceito e ideia de micro serviços pode ser aplicado a micro frontends, que entregarão pequenos comportamentos ou componentes que serão adicionados apenas quando estritamente necessário para a página, melhorando o desempenho e a experiência do usuário. Esses componentes podem ter a atenção devida de UXs e desenvolvedores dedicados que cuidarão e melhorarão a experiência, o que faz com que todos ganhem - usuários e empresa.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>architecture</category>
      <category>productivity</category>
    </item>
    <item>
      <title>The Common Loops In JavaScript</title>
      <author>Sapinder Singh</author>
      <pubDate>Wed, 20 Oct 2021 13:57:10 +0000</pubDate>
      <link>https://dev.to/sapinder_dev/the-common-loops-in-javascript-20mf</link>
      <guid>https://dev.to/sapinder_dev/the-common-loops-in-javascript-20mf</guid>
      <description>&lt;p&gt;Looping is one of my favourite programming concepts that I learned as a beginner. It's simple; yet an effective way to avoid code repetition. If you are struggling to grasp the various kinds of loops that we see in JavaScript, this article is made for you indeed. 😉 Also, I've tried to keep it as general as possible so that anyone could understand even if they don't know JavaScript. So, let's jump right into it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-the-need-for-loops"&gt;
  &lt;/a&gt;
  What's the need for loops?
&lt;/h2&gt;

&lt;p&gt;Loops help us avoid &lt;em&gt;code repetition&lt;/em&gt;. In other words, they allow us to execute the same set of instructions for a specified number of times. Usually, we have to deal with large sets of data for which, we have to perform same tasks over and over again. Loops are made for this job because we can just avoid typing the same statements again and again with our lazy hands 🥱. But there are many kinds of loops in JavaScript; how would you know which one to use in what case? &lt;strong&gt;I'm going to discuss the three common loops in this post- do...while, while and for.&lt;/strong&gt; So, let's what these are, and when to use each of them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-different-kinds-of-loops"&gt;
  &lt;/a&gt;
  The Different Kinds of Loops
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#dowhile"&gt;
  &lt;/a&gt;
  do...while
&lt;/h3&gt;

&lt;p&gt;I chose this loop to be discussed first because it seems closer to the way I want you to start thinking about loops. Its &lt;a href="https://en.wikipedia.org/wiki/Syntax_(programming_languages)"&gt;syntax&lt;/a&gt; is simple enough to comprehend-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;do {
  ...
} while (...)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The instructions to be performed go inside curly braces &lt;code&gt;{}&lt;/code&gt; after the &lt;code&gt;do&lt;/code&gt; keyword, whereas, parentheses &lt;code&gt;()&lt;/code&gt; hold the condition that will be checked before repeating those instructions each time. Unless if we were talking to a human, we can't just say &lt;code&gt;"Print 'hello' 5 times"&lt;/code&gt;. The way loops work is that they check some condition before repeating the task each time. If the condition evaluates to &lt;code&gt;true&lt;/code&gt;, the &lt;br&gt;
task is performed again; otherwise it exits the loop. Consider this example that prints &lt;code&gt;Hello!&lt;/code&gt; 5 times to the console/terminal-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let index = 1;

do {
  console.log('Hello!');
  index = index + 1;
} while(index &amp;lt;= 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the use of &lt;code&gt;index&lt;/code&gt; variable in the snippet above. Firstly, we declare this variable and assign the integer value &lt;code&gt;1&lt;/code&gt; to it. Then we tell the computer to run the statements inside &lt;code&gt;do{}&lt;/code&gt; block; then evaluate the condition &lt;code&gt;index &amp;lt;= 5&lt;/code&gt;; and run those statements again if it's true; or exit the loop if not.&lt;/p&gt;

&lt;p&gt;If we forget to include the line number 5 in our code, the loop will become infinite because the value of &lt;code&gt;index&lt;/code&gt; will always be 1; hence the condition will be true forever. Therefore, it is necessary to increment the value each time the loop is run. When the value of &lt;code&gt;index&lt;/code&gt; equals 5, the condition will turn to false; hence, it will exit the loop.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Increment"&gt;increment operator&lt;/a&gt;) (++) is a shorthand operator that allows us to write &lt;code&gt;index++&lt;/code&gt; instead of &lt;code&gt;index = index + 1&lt;/code&gt;. There's also a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Decrement"&gt;decrement operator&lt;/a&gt; (--) as its counterpart. Look them up! 👍&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#while"&gt;
  &lt;/a&gt;
  while
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;while&lt;/code&gt; loop is exactly the same as &lt;code&gt;do...while&lt;/code&gt;. Just have a look at the syntax of both loops-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// do...while loop
do {
  ...
} while (...)

// while loop
while (...) {
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Can you spot the difference? The &lt;code&gt;do...while&lt;/code&gt; loop runs the statement first, then checks for the condition; whereas &lt;code&gt;while&lt;/code&gt; loop checks the condition first, then runs the statement. In short, the former checks condition for the next iteration, while the latter checks condition for the current iteration.&lt;/p&gt;

&lt;p&gt;The answer to the question "Which of these loops should we use?" is quite opinionated. I personally don't remember the time that I used &lt;code&gt;do...while&lt;/code&gt; loop, except while I was learning it. &lt;code&gt;while&lt;/code&gt; loop is used much often in such cases. But there's another type of loop that is the most common among all others- the &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;

&lt;p&gt;Before introducing &lt;code&gt;for&lt;/code&gt; loop, I want you to understand the concept of &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Scope"&gt;scope&lt;/a&gt; in programming. &lt;strong&gt;The scope of a variable can be defined as the range of statements in which that variable can be accessed.&lt;/strong&gt; Consider the following snippet for example-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1. let name = 'Sapinder';
2. 
3. {
4.   let name = 'Singh';
5.   console.log(name);
6. }
7. 
8. console.log(name);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What do you think line number 5 and 8 would print to the console? The first &lt;code&gt;console.log&lt;/code&gt; statement will print &lt;code&gt;Singh&lt;/code&gt; but the second one will print &lt;code&gt;Sapinder&lt;/code&gt; because the scope of variable holding the value &lt;code&gt;Singh&lt;/code&gt; is limited to the inner block. It can't be accessed out of the those curly braces. Hence, when the compiler reaches line number 8, it only knows of the variable &lt;code&gt;name&lt;/code&gt; that holds the value &lt;code&gt;Sapinder&lt;/code&gt;. Also, notice that I used &lt;code&gt;let&lt;/code&gt; keyword instead &lt;code&gt;var&lt;/code&gt; because a variable declared with &lt;code&gt;var&lt;/code&gt; is always &lt;em&gt;globally scoped&lt;/em&gt; regardless of where it is declared. Now that you know what scoping is, let's learn about the &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for"&gt;
  &lt;/a&gt;
  for
&lt;/h2&gt;

&lt;p&gt;I like to think of the &lt;code&gt;for&lt;/code&gt; loop as a more concise version of &lt;code&gt;while&lt;/code&gt; loop. Both of these are almost the same except for a few things that we'll see later. First, take a look at an example of &lt;code&gt;for&lt;/code&gt; loop-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for(let index = 1; index &amp;lt;= 5; index++) {
  console.log('Hello!');
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes! It's just the same as the following &lt;code&gt;while&lt;/code&gt; loop-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let index = 1;

while (index &amp;lt;= 5) {
  console.log('Hello!');
  index++;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;strong&gt;initialization of variable&lt;/strong&gt;, &lt;strong&gt;the condition&lt;/strong&gt; and &lt;strong&gt;the upgrading of value&lt;/strong&gt;, all of these things can be achieved in single line of code in a &lt;code&gt;for&lt;/code&gt; loop. Moreover, the variable &lt;code&gt;index&lt;/code&gt; is initialized as &lt;em&gt;block-scoped&lt;/em&gt;, unlike as in the example of &lt;code&gt;while&lt;/code&gt; loop. This is major benefit of using a &lt;code&gt;for&lt;/code&gt; loop because it avoids any chance of conflicting names at the global level. To understand another difference between both the loops, I would like to introduce two keywords-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;break&lt;/strong&gt; - The keyword &lt;code&gt;break&lt;/code&gt; is used to terminate/exit a loop. The compiler will terminate the loop as soon as this keyword is encountered.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;continue&lt;/strong&gt; - The keyword &lt;code&gt;continue&lt;/code&gt; is used to skip the rest of statements left in the current iteration, and start the next iteration
in the loop.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, consider the following example where I want to print the numbers from 1 to 5 excluding the number 3-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for(let index = 1; index &amp;lt;= 5; index++) {
  if(index === 3) {
    continue;
  }
  console.log(index);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, I'm saying, "If index is equal to 3, don't run rest of the statements; and just skip to the next iteration." Hence, it will not print the number &lt;code&gt;3&lt;/code&gt; to the console. It will &lt;em&gt;continue&lt;/em&gt; the loop with upgraded value of &lt;code&gt;index&lt;/code&gt;, i.e. &lt;code&gt;4&lt;/code&gt;. Now, let's go for the same approach using &lt;code&gt;while&lt;/code&gt; loop-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let index = 1;

while(index &amp;lt;= 5) {
  if(index === 3) {
    continue;
  }
  console.log(index);

  index++; // upgrading needs to be done here in the end, unlike in `for` loop
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do you think this solution will work out? Can you spot the bug? Well, it is an &lt;em&gt;infinite loop&lt;/em&gt; because once the value of &lt;code&gt;index&lt;/code&gt; reaches &lt;code&gt;3&lt;/code&gt;, it skips the rest of the statements including &lt;code&gt;index++&lt;/code&gt;. Hence, its value is never upgraded beyond &lt;code&gt;3&lt;/code&gt;; and the loop keeps running infinitely. &lt;/p&gt;

&lt;p&gt;Such a case can easily be handled using a &lt;code&gt;for&lt;/code&gt; loop because the upgrading expression of the loop is specified at the very beginning; and it is always executed at the end of each iteration. But if we move this upgrading expression from the first line of loop to just before the end of loop, as in the following example, we will again get the infinite loop problem.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for(let index = 1; index &amp;lt;=5;) {
  if(index === 3) {
    continue;
  }
  console.log(index);
  /* This will cause the same issue of infinite loop */
  index++;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, to conclude, I would say that both the &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt; loops can be used interchangeably except for some cases, where we're more likely to cause bugs using &lt;code&gt;while&lt;/code&gt; loop, as compared to the other one. There're other kinds of loops too in JavaScript, such as- &lt;code&gt;for in&lt;/code&gt;, &lt;code&gt;for of&lt;/code&gt;, etc., but they are literally dead simpler than the ones discussed above; and don't need to be included in this post. &lt;/p&gt;

&lt;p&gt;If you like this post, and want me to create more content like this, please do subscribe to &lt;a href="https://mailchi.mp/f07f15830c64/blogsspringAPInderdev"&gt;my newsletter&lt;/a&gt;, and follow me here, or on &lt;a href="https://twitter.com/sapinder_dev"&gt;my twitter handle&lt;/a&gt;!&lt;br&gt;&lt;br&gt;
Peace! 🤞&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Exploring the CSS Paint API: Polygon Border</title>
      <author>Temani Afif</author>
      <pubDate>Wed, 20 Oct 2021 13:48:13 +0000</pubDate>
      <link>https://dev.to/afif/exploring-the-css-paint-api-polygon-border-42el</link>
      <guid>https://dev.to/afif/exploring-the-css-paint-api-polygon-border-42el</guid>
      <description>&lt;p&gt;Nowadays, creating complex shapes is an easy task using &lt;code&gt;clip-path&lt;/code&gt;, but adding a border to the shapes is always a pain. There is no robust CSS solution and we always need to produce specific “hacky” code for each particular case. In this article, I will show you how to solve this problem using the CSS Paint API.&lt;/p&gt;

&lt;p&gt;Before we dig into this third experimentation, Here is a small overview of what we are building. And, please note that everything we’re doing here is only supported in Chromium-based browsers so you’ll want to view the demos in Chrome, Edge, or Opera.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3TrM247Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/09/overview-polygon-border-1.gif%3Fresize%3D605%252C281%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3TrM247Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/09/overview-polygon-border-1.gif%3Fresize%3D605%252C281%26ssl%3D1" alt="CSS polygon border"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-demo"&gt;
  &lt;/a&gt;
  &lt;center&gt;&lt;a href="https://codepen.io/t_afif/pen/wvewXjZ"&gt;Live Demo&lt;/a&gt;&lt;/center&gt;
&lt;/h3&gt;

&lt;p&gt;You will find no complex CSS code there but rather a generic code where we only adjust a few variables to control the shape.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-main-idea"&gt;
  &lt;/a&gt;
  The main idea
&lt;/h2&gt;

&lt;p&gt;In order to achieve the polygon border, I am going to rely on a combination of the CSS &lt;code&gt;clip-path&lt;/code&gt; property and a custom mask created with the Paint API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kSAfNmds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/09/s_8C7B7FD228C95E70E08E0344785EF03E99A61895BF9BC4080F4DC424E6AFB8F0_1630408175106_overview2.png%3Fw%3D674%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kSAfNmds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/09/s_8C7B7FD228C95E70E08E0344785EF03E99A61895BF9BC4080F4DC424E6AFB8F0_1630408175106_overview2.png%3Fw%3D674%26ssl%3D1" alt="CSS polygon border"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#live-demo"&gt;
  &lt;/a&gt;
  &lt;center&gt;&lt;a href="https://codepen.io/t_afif/pen/RwgrvEr"&gt;Live Demo&lt;/a&gt;&lt;/center&gt;
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;We start with a basic rectangular shape.&lt;/li&gt;
&lt;li&gt;We apply &lt;code&gt;clip-path&lt;/code&gt; to get our polygon shape.&lt;/li&gt;
&lt;li&gt;We apply the custom mask to get our polygon border&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#the-css-setup"&gt;
  &lt;/a&gt;
  The CSS setup
&lt;/h3&gt;

&lt;p&gt;Here’s the CSS for the &lt;code&gt;clip-path&lt;/code&gt; step we’ll get to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;clip-path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--path&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nothing complex so far but note the use of the CSS variable &lt;code&gt;--path&lt;/code&gt;. The entire trick relies on that single variable. Since I will be using a &lt;code&gt;clip-path&lt;/code&gt; and a mask, both need to use the same parameters, hence the &lt;code&gt;--path&lt;/code&gt; variable. And, yes, the Paint API will use that same variable to create the custom mask.&lt;/p&gt;

&lt;p&gt;The CSS code for the whole process becomes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;clip-path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--path&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-mask&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;polygon-border&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In addition to the &lt;code&gt;clip-path&lt;/code&gt;, we apply the custom mask, plus we add an extra variable, &lt;code&gt;--border&lt;/code&gt;, to control the thickness of the border. As you can see, everything is still pretty basic and generic CSS so far. After all, this is one of the things that makes the CSS Paint API so great to work with.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-javascript-setup"&gt;
  &lt;/a&gt;
  The JavaScript setup
&lt;/h3&gt;

&lt;p&gt;&lt;sup&gt;I highly recommend reading the first part of &lt;a href="https://dev.to/this-is-learning/exploring-the-css-paint-api-image-fragmentation-effect-3ekl"&gt;my previous article&lt;/a&gt; to understand the structure of the Paint API.&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Now, let’s see what is happening inside the &lt;code&gt;paint()&lt;/code&gt; function as we jump into JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--border&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;beginPath&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;moveTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lineTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;closePath&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lineWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strokeStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The ability to get and set CSS custom properties is one of the reasons they’re so great. We can reach for JavaScript to first read the value of the &lt;code&gt;--path&lt;/code&gt; variable, then convert it into an array of points (seen on the very first line above). So, that means &lt;code&gt;50% 0,100% 100%,0 100%&lt;/code&gt; become the points for the mask, i.e. &lt;code&gt;points = ["50% 0","100% 100%","0 100%"]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we loop through the points to draw a polygon using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/moveTo"&gt;moveTo&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo"&gt;lineTo&lt;/a&gt;. This polygon is exactly the same as the one drawn in CSS with the &lt;code&gt;clip-path&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;Finally, and after drawing the shape, I add a stroke to it. I define the thickness of the stroke using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth"&gt;lineWidth&lt;/a&gt; and I set a solid color using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle"&gt;strokeStyle&lt;/a&gt;. In other words, only the stroke of the shape is visible since I am not filling the shape with any color (i.e. it’s transparent).&lt;/p&gt;

&lt;p&gt;Now all we have to do is to update the path and the thickness to create any polygon border. It’s worth noting that we are not limited to solid color here since we are using the CSS background property. We can consider gradients or images.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V-GnjKLP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/09/CSS-polygon-border-result.png%3Fw%3D732%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V-GnjKLP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/09/CSS-polygon-border-result.png%3Fw%3D732%26ssl%3D1" alt="CSS polygon border"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#live-demo"&gt;
  &lt;/a&gt;
  &lt;center&gt;&lt;a href="https://codepen.io/t_afif/pen/zYzqzjO"&gt;Live Demo&lt;/a&gt;&lt;/center&gt;
&lt;/h4&gt;

&lt;p&gt;In case we need to add content, we have to consider a pseudo-element. Otherwise, the content gets clipped in the process. It’s not incredibly tough to support content. We move the mask property to the pseudo-element. We can keep the &lt;code&gt;clip-path&lt;/code&gt; declaration on the main element. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#live-demo"&gt;
  &lt;/a&gt;
  &lt;center&gt;&lt;a href="https://codepen.io/t_afif/pen/dyRMQXP"&gt;Live Demo&lt;/a&gt;&lt;/center&gt;
&lt;/h4&gt;




&lt;h2&gt;
  &lt;a href="#questions-so-far"&gt;
  &lt;/a&gt;
  Questions so far?
&lt;/h2&gt;

&lt;p&gt;I know you probably have some burning questions you want to ask after looking over that last script. Allow me to preemptively answer a couple things I bet you have in mind.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-that-raw-cc-endraw-function"&gt;
  &lt;/a&gt;
  What is that &lt;code&gt;cc()&lt;/code&gt; function?
&lt;/h3&gt;

&lt;p&gt;I am using that function to convert the value of each point into pixel values. For each point, I get both x and y coordinates — using &lt;code&gt;points[i].trim().split(" ")&lt;/code&gt; — and then I convert those coordinates to make them usable inside the canvas element that allows us to draw with those points.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;fy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;fy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;fy&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The logic is simple: if it’s a percentage value, I use the width (or the height) to find the final value. If it’s a pixel value, I simply get the value without the unit. If, for, example we have &lt;code&gt;[50% 20%]&lt;/code&gt; where the width is equal to &lt;code&gt;200px&lt;/code&gt; and the height is equal to &lt;code&gt;100px&lt;/code&gt;, then we get &lt;code&gt;[100 20]&lt;/code&gt;. If it’s &lt;code&gt;[20px 50px]&lt;/code&gt;, then we get &lt;code&gt;[20 50]&lt;/code&gt;. And so on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-are-you-using-css-raw-clippath-endraw-if-the-mask-is-already-clipping-the-element-to-the-stroke-of-the-shape"&gt;
  &lt;/a&gt;
  Why are you using CSS &lt;code&gt;clip-path&lt;/code&gt; if the mask is already clipping the element to the stroke of the shape?
&lt;/h3&gt;

&lt;p&gt;Using only the mask was the first idea I had in mind, but I stumbled upon two major issues with that approach. The first is related to how &lt;code&gt;stroke()&lt;/code&gt; works. From &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/stroke"&gt;MDN&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Strokes are aligned to the center of a path; in other words, half of the stroke is drawn on the inner side, and half on the outer side.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That “half inner side, half outer side” gave me a lot of headaches, and I always end up with a strange overflow when putting everything together. That’s where CSS &lt;code&gt;clip-path&lt;/code&gt; helps; it clips the outer part and only keeps the inner side — no more overflow!&lt;/p&gt;

&lt;p&gt;You will notice the use of &lt;code&gt;ctx.lineWidth = 2*b&lt;/code&gt;. I am adding double the border thickness because I will clip half of it to end with the right thickness needed around the entire shape.&lt;/p&gt;

&lt;p&gt;The second issue is related to the shape’s hover-able area. It’s known that masking does not affect that area and we can still hover/interact with the whole rectangle. Again, reaching for &lt;code&gt;clip-path&lt;/code&gt; fixes the issue, plus we limit the interaction just to the shape itself.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://codepen.io/t_afif/pen/dyRMRby"&gt;following demo&lt;/a&gt; illustrates these two issues. The first element has both a mask and &lt;code&gt;clip-path&lt;/code&gt;, while the second only has the mask. We can clearly see the overflow issue. Try to hover the second one to see that we can change the color even if the cursor is outside the triangle.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-are-you-using-raw-property-endraw-with-the-border-value"&gt;
  &lt;/a&gt;
  Why are you using &lt;code&gt;@property&lt;/code&gt; with the border value?
&lt;/h3&gt;

&lt;p&gt;This is an interesting — and pretty tricky — part. By default, custom properties (like &lt;code&gt;--border&lt;/code&gt;) are considered a “CSSUnparsedValue” which means they are treated as strings. From the &lt;a href="https://drafts.css-houdini.org/css-typed-om/#unparsedvalue-objects"&gt;CSS spec&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‘CSSUnparsedValue’ objects represent property values that reference custom properties. They are comprised of a list of string fragments and variable references.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With &lt;code&gt;@property&lt;/code&gt;, we can register the custom property and give it a type so that it can be recognized by the browser and handled as a valid type instead of a string. In our case, we are registering the border as a &lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt; type so later it becomes a &lt;a href="https://drafts.css-houdini.org/css-typed-om/#cssunitvalue"&gt;CSSUnitValue&lt;/a&gt;. What this also does is allow us to use any length unit (&lt;code&gt;px&lt;/code&gt;, &lt;code&gt;em&lt;/code&gt;, &lt;code&gt;ch&lt;/code&gt; ,&lt;code&gt;vh&lt;/code&gt;, etc.) for the border value.&lt;/p&gt;

&lt;p&gt;This may sound a bit complex but let me try to illustrate the difference with a DevTools screenshot.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r5n4kHUo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/09/s_8C7B7FD228C95E70E08E0344785EF03E99A61895BF9BC4080F4DC424E6AFB8F0_1630579831868_unit.png%3Fw%3D702%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r5n4kHUo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/09/s_8C7B7FD228C95E70E08E0344785EF03E99A61895BF9BC4080F4DC424E6AFB8F0_1630579831868_unit.png%3Fw%3D702%26ssl%3D1" alt="console log CSS value"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am using &lt;code&gt;console.log()&lt;/code&gt; on a variable where I defined &lt;code&gt;5em&lt;/code&gt;. The first one is registered but the second one is not.&lt;/p&gt;

&lt;p&gt;In the first case, the browser recognizes the type and makes the conversion into a pixel value, which is useful since we only need pixel values inside the &lt;code&gt;paint()&lt;/code&gt; function. In the second case, we get the variable as a string which is not very useful since we cannot convert em units into &lt;code&gt;px&lt;/code&gt; units inside the &lt;code&gt;paint()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Try all the units. It will always results with the computed pixel value inside the &lt;code&gt;paint()&lt;/code&gt; function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-about-the-raw-path-endraw-variable"&gt;
  &lt;/a&gt;
  What about the &lt;code&gt;--path&lt;/code&gt; variable?
&lt;/h3&gt;

&lt;p&gt;I wanted to use the same approach with the &lt;code&gt;--path&lt;/code&gt; variable but, unfortunately, I think I pushed CSS right up to the limits of what it can do here. Using &lt;code&gt;@property&lt;/code&gt;, we can register complex types, even multi-value variables. But that’s still not enough for the path we need.&lt;/p&gt;

&lt;p&gt;We can use the + and # symbols to &lt;a href="https://drafts.css-houdini.org/css-properties-values-api/#multipliers"&gt;define a space-separated or comma-separated list of values&lt;/a&gt;, but our path is a comma-separated list of space-separated percentage (or length) values. I would use something like &lt;code&gt;[&amp;lt;length-percentage&amp;gt;+]#&lt;/code&gt;, but it doesn’t exist.&lt;/p&gt;

&lt;p&gt;For the path, I am obliged to manipulate it as a string value. That limits us just to percentage and pixel values for now. For this reason, I defined the &lt;code&gt;cc()&lt;/code&gt; function to convert the string values into pixel values.&lt;/p&gt;

&lt;p&gt;We can read in the &lt;a href="https://drafts.css-houdini.org/css-properties-values-api/#syntax-strings"&gt;CSS spec&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The internal grammar of the syntax strings is a subset of the CSS Value Definition Syntax. Future levels of the specification are expected to expand the complexity of the allowed grammar, allowing custom properties that more closely resemble the full breadth of what CSS properties allow.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Even if the grammar is extend to be able to register the path, we will still face issue in case we need to include &lt;code&gt;calc()&lt;/code&gt; inside our path:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;--path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;calc&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;-&lt;/span&gt; &lt;span class="err"&gt;40&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;40&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above, &lt;code&gt;calc(100% - 40px)&lt;/code&gt; is a value that the browser considers a &lt;code&gt;&amp;lt;length-percentage&amp;gt;&lt;/code&gt;, but the browser cannot compute that value until it knows the reference for the percentage. In other words, we cannot get the equivalent pixel value inside the &lt;code&gt;paint()&lt;/code&gt; function since the reference can only be known when the value gets used within &lt;code&gt;var()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To overcome this, we can can extend the &lt;code&gt;cc()&lt;/code&gt; function to do the conversion. We did the conversion of a percentage value and a pixel value, so let’s combine those into one conversion. We will consider 2 cases: &lt;code&gt;calc(P% - Xpx)&lt;/code&gt; and &lt;code&gt;calc(P% + Xpx)&lt;/code&gt;. Our script becomes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fx&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;fy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;calc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;calc(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;fx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;fx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;fx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;fx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;calc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;calc(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="nx"&gt;fy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="nx"&gt;fy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;fy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;fy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;fy&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We’re using &lt;code&gt;indexOf()&lt;/code&gt; to test the existence of calc, then, with some string manipulation, we extract both values and find the final pixel value.&lt;/p&gt;

&lt;p&gt;And, as a result, we also need to update this line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;…to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(?!\(&lt;/span&gt;&lt;span class="sr"&gt;.*&lt;/span&gt;&lt;span class="se"&gt;)\s(?![^&lt;/span&gt;&lt;span class="sr"&gt;(&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt;&lt;span class="se"&gt;?\))&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we need to consider &lt;code&gt;calc()&lt;/code&gt;, using the space character won’t work for splitting. That’s because &lt;code&gt;calc()&lt;/code&gt; also contains spaces. So we need a regex. Don’t ask me about it — it’s the one that worked after trying a lot from Stack Overflow.&lt;/p&gt;

&lt;p&gt;Here is &lt;a href="https://codepen.io/t_afif/pen/zYzogdX"&gt;basic demo&lt;/a&gt; to illustrate the update we did so far to support &lt;code&gt;calc()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Notice that we have stored the &lt;code&gt;calc()&lt;/code&gt; expression within the variable &lt;code&gt;--v&lt;/code&gt; that we registered as a &lt;code&gt;&amp;lt;length-percentage&amp;gt;&lt;/code&gt;. This is also a part of the trick because if we do this, the browser uses the correct format. Whatever the complexity of the &lt;code&gt;calc()&lt;/code&gt; expression, the browser always converts it to the format &lt;code&gt;calc(P% +/- Xpx)&lt;/code&gt;. For this reason, we only have to deal with that format inside the &lt;code&gt;paint()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Here is a &lt;a href="https://codepen.io/t_afif/pen/mdwRVBr"&gt;Demo&lt;/a&gt; with different examples where we are using a different &lt;code&gt;calc()&lt;/code&gt; expression for each one.&lt;/p&gt;

&lt;p&gt;If you inspect the code of each box and see the computed value of &lt;code&gt;--v&lt;/code&gt;, you will always find the same format which is super useful because we can have any kind of calculation we want.&lt;/p&gt;

&lt;p&gt;It should be noted that using the variable &lt;code&gt;--v&lt;/code&gt; is not mandatory. We can include the &lt;code&gt;calc()&lt;/code&gt; directly inside the path. We simply need to make sure we insert the correct format since the browser will not handle it for us (remember that we cannot register the path variable so it’s a string for the browser). This can be useful when we need to have many &lt;code&gt;calc()&lt;/code&gt; inside the path and creating a variable for each one will make the code too lengthy. We will see a few examples at the end.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#can-we-have-dashed-border"&gt;
  &lt;/a&gt;
  Can we have dashed border?
&lt;/h3&gt;

&lt;p&gt;We can! And it only takes one instruction. The &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element already has a built-in function to draw dashed stroke &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash"&gt;setLineDash()&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The setLineDash() method of the Canvas 2D API’s CanvasRenderingContext2D interface sets the line dash pattern used when stroking lines. It uses an array of values that specify alternating lengths of lines and gaps which describe the pattern.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All we have to do is to introduce another variable to define our dash pattern.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gBw0BE3d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/09/css-dashed-polygon-border.png%3Fw%3D746%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gBw0BE3d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/09/css-dashed-polygon-border.png%3Fw%3D746%26ssl%3D1" alt="CSS polygon dashed border"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#live-demo"&gt;
  &lt;/a&gt;
  &lt;center&gt;&lt;a href="https://codepen.io/t_afif/pen/RwgaqEV"&gt;Live Demo&lt;/a&gt;&lt;/center&gt;
&lt;/h4&gt;

&lt;p&gt;In the CSS, we simply added a CSS variable, &lt;code&gt;--dash&lt;/code&gt;, and within the mask is the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--dash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setLineDash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also control the offset using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset"&gt;lineDashOffset&lt;/a&gt;. We will see later how controlling the offset can help us reach some cool animations.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use cases!
&lt;/h2&gt;

&lt;p&gt;After exploring the behind the scene of this technique, let’s now focus on the CSS part and check out a few uses cases for our polygon border.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-collection-of-buttons"&gt;
  &lt;/a&gt;
  A collection of buttons
&lt;/h3&gt;

&lt;p&gt;We can easily generate custom shape buttons having cool hover effect.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/abwBPPz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Notice how &lt;code&gt;calc()&lt;/code&gt; is used inside the path of the last button the way we described it earlier. It works fine since I am following the correct format.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#breadcrumbs"&gt;
  &lt;/a&gt;
  Breadcrumbs
&lt;/h3&gt;

&lt;p&gt;No more headaches when creating a breadcrumb system! Below, you will find no “hacky” or complex CSS code, but rather something that’s pretty generic and easy to understand where all we have to do is to adjust a few variables.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/powNXwR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#card-reveal-animation"&gt;
  &lt;/a&gt;
  Card reveal animation
&lt;/h3&gt;

&lt;p&gt;If we apply some animation to the thickness, we can get some &lt;a href="https://codepen.io/t_afif/pen/oNwBxmp"&gt;fancy hover effect&lt;/a&gt;. We can use that same idea to create an animation that reveals the card:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/ZEyLWgp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#callout-amp-speech-bubble"&gt;
  &lt;/a&gt;
  Callout &amp;amp; speech bubble
&lt;/h3&gt;

&lt;p&gt;“How the hell we can add border to that small arrow???” I think everyone has stumbled on this issue when dealing with either a callout or speech bubble sort of design. The Paint API makes this trivial.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/qBjRPeV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In that demo, you will find a few examples that you can extend. You only need to find the path for your speech bubble, then adjust some variables to control the border thickness and the size/position of the arrow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#animating-dashes"&gt;
  &lt;/a&gt;
  Animating dashes
&lt;/h3&gt;

&lt;p&gt;A last one before we end. This time we will focus on the dashed border to create more animations. We already did one in the button collection where we transform a dashed border into a solid one. Let’s tackle two others.&lt;/p&gt;

&lt;p&gt;Hover the below and see the nice effect we get:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/MWoJROX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Those who have worked with SVG for some time are likely familiar with the sort effect that we achieve by animating &lt;code&gt;stroke-dasharray&lt;/code&gt;. Thanks to the Paint API, we can do this directly in CSS. The idea is almost the same one we use with SVG. We define the dash variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;--dash&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--a&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="err"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The variable &lt;code&gt;--a&lt;/code&gt; starts at &lt;code&gt;0&lt;/code&gt;, so our pattern is a solid line (where the length equals 0) with a gap (where length 1000); hence no border. We animate &lt;code&gt;--a&lt;/code&gt; to a big value to draw our border.&lt;/p&gt;

&lt;p&gt;We also talked about using &lt;code&gt;lineDashOffset&lt;/code&gt;, which we can use for another kind of animation. Hover the below and see the result:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/JjJEVwP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Finally, a CSS solution to animate the position of dashes that works with any kind of shape!&lt;/p&gt;

&lt;p&gt;What I did is pretty simple. I added an extra variable, &lt;code&gt;--offset&lt;/code&gt;, to which I apply a transition from 0 to N. Then, inside the &lt;code&gt;paint()&lt;/code&gt; function, I do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--offset&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lineDashOffset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As simple as that! Let’s not forget an infinite animation using keyframes:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/OJgWGKx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We can make the animation run continuously by offsetting 0 to N where N is the sum of the values used in the dash variable (which, in our case, is 10+15=25). We use a negative value to have the opposite direction direction.&lt;/p&gt;

&lt;p&gt;I have probably missed a lot of use cases that I let you discover!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#you-want-to-support-me"&gt;
  &lt;/a&gt;
  &lt;center&gt;You want to support me?&lt;/center&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/afif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQj764Ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-orange.png" alt="buy me a coffee"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;center&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/center&gt;

&lt;p&gt;&lt;a href="https://www.patreon.com/temani"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4kAQAgAW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/db3jtgy2i5l4w8slkps5.png" alt="Become a patron"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Deploying a Telegram Bot to AWS ECS with AWS Copilot. [Step by step] for absolut beginners.</title>
      <author>Christian Prado Ciokler</author>
      <pubDate>Wed, 20 Oct 2021 13:29:12 +0000</pubDate>
      <link>https://dev.to/chrisciokler/deploying-a-telegram-bot-to-aws-ecs-with-aws-copilot-step-by-step-for-absolut-beginners-ngl</link>
      <guid>https://dev.to/chrisciokler/deploying-a-telegram-bot-to-aws-ecs-with-aws-copilot-step-by-step-for-absolut-beginners-ngl</guid>
      <description>&lt;p&gt;The purpose of this project is to share my experience and hope to be of help to someone. Copilot is a young tool for creating and deploying containerized services without handling all the configuration troubles of ECS, EC2, and Fargate. Maybe there is a better way to deploy this kind of project out there but please humor me, we are having fun and trying new things.&lt;/p&gt;

&lt;p&gt;🙏 Hope you like 👍 this post and let's get down to business. 🚀&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of content &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#stack"&gt;The Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#node"&gt;Installing Node&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#aws"&gt;Installing AWS CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#copilot"&gt;Installing Copilot Cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#docker"&gt;Installing Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#project"&gt;Setting up the project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bot"&gt;Creating the Bot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#coding"&gt;Let’s code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#testing"&gt;Testing the Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dockerfile"&gt;Configuring dockerfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploy"&gt;Deploying to ECS with Copilot Cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#refactoring"&gt;Making some refactoring &amp;amp; updating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusions"&gt;The End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#the-stack-pointup"&gt;
  &lt;/a&gt;
  The Stack &lt;a href="#table"&gt;☝️&lt;/a&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;For this project we are going to use the following tools, don’t worry if you don’t know how to use them I’ll leave you the documentation links down below. Anyhow, I would guide you step by step all the way.&lt;/p&gt;

&lt;p&gt;OS: Windows -should work on others OS as well-&lt;br&gt;
Node &lt;a href="https://nodejs.org/es/docs/"&gt;docs&lt;/a&gt; &lt;a href="https://nodejs.org/es/download/"&gt;installation&lt;/a&gt;&lt;br&gt;
AWS CLI v2 &lt;a href="https://docs.aws.amazon.com/cli/index.html"&gt;docs&lt;/a&gt; &lt;a href="https://docs.aws.amazon.com/es_es/cli/latest/userguide/install-cliv2.html"&gt;installation&lt;/a&gt;&lt;br&gt;
Copilot Cli &lt;a href="https://aws.github.io/copilot-cli/docs/overview/"&gt;docs&lt;/a&gt; &lt;a href="https://aws.github.io/copilot-cli/docs/getting-started/install/"&gt;installation&lt;/a&gt;&lt;br&gt;
Docker &lt;a href="https://docs.docker.com/"&gt;docs&lt;/a&gt; &lt;a href="https://www.docker.com/products/docker-desktop"&gt;installation&lt;/a&gt;&lt;br&gt;
Telegraf &lt;a href="https://telegraf.js.org/"&gt;docs&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/telegraf"&gt;installation&lt;/a&gt;&lt;br&gt;
Binance API &lt;a href="https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md"&gt;docs&lt;/a&gt;&lt;br&gt;
Axios &lt;a href="https://axios-http.com/docs/intro"&gt;docs&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#installing-node-pointup"&gt;
  &lt;/a&gt;
  Installing Node &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;First, we install node, there is not much to say about it just follow this link &lt;a href="https://nodejs.org/es/download/"&gt;here&lt;/a&gt; to download Node and the installer will guide you through the process. At the moment this post is been created we are using version 16.11.0.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#installing-aws-cli-pointup"&gt;
  &lt;/a&gt;
  Installing AWS CLI &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;First, we need to have an AWS account, so if you don’t have one &lt;a href="https://aws.amazon.com/resources/create-account/"&gt;get down to it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you have the account created we install &lt;a href="https://docs.aws.amazon.com/es_es/cli/latest/userguide/install-cliv2.html"&gt;AWS CLI v2&lt;/a&gt; and check if it is working with the command &lt;strong&gt;aws help&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With everything in order, the next step is to configure AWS credentials. So we need to create access keys for an IAM user&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Sign in to the AWS Management Console and open the IAM console at &lt;a href="https://console.aws.amazon.com/iam/"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On the navigation pane, choose &lt;strong&gt;Users&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choose the name of the user whose access keys you want to create, and then choose the &lt;strong&gt;Security credentials&lt;/strong&gt; tab.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the &lt;strong&gt;Access keys&lt;/strong&gt; section, choose &lt;strong&gt;Create access key&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To view the new access key pair, choose &lt;strong&gt;Show&lt;/strong&gt;. You will not have access to the secret access key again after this dialog box closes. Your credentials will look something like this:&lt;br&gt;
Access key ID: AKIAIOSFODNN7EXAMPLE&lt;br&gt;
Secret access key: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To download the key pair, choose &lt;strong&gt;Download .csv file&lt;/strong&gt;. Store the keys in a secure location. You will not have access to the secret access key again after this dialog box closes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Keep the keys confidential to protect your AWS account and never email them. Do not share them outside your organization, even if an inquiry appears to come from AWS or Amazon.com. No one who legitimately represents Amazon will ever ask you for your secret key.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After you download the .csv file, choose &lt;strong&gt;Close&lt;/strong&gt;. When you create an access key, the key pair is active by default, and you can use the pair right away.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To add the credentials to AWS CLI we write the command &lt;strong&gt;aws configure --profile myprofilename&lt;/strong&gt; in the terminal and follow the steps.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;AWS Access Key ID [None]: AKIAI44QH8DHBEXAMPLE &lt;/li&gt;
&lt;li&gt;AWS Secret Access Key [None]: je7MtGbClwBF/EXAMPLEKEY &lt;/li&gt;
&lt;li&gt;Default region name [None]: us-east-1 &lt;/li&gt;
&lt;li&gt;Default output format [None]: json&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s it, know you have successfully set up AWS CLI !!!!&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#installing-copilot-cli-pointup"&gt;
  &lt;/a&gt;
  Installing Copilot Cli  &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The instructions for the installation are &lt;a href="https://aws.github.io/copilot-cli/docs/getting-started/install/"&gt;here&lt;/a&gt;, once you are done write &lt;strong&gt;copilot --help&lt;/strong&gt; in your terminal if everything works as it supposes to,!Congratulations, your pc is smarter than mine, if you had an error don’t worry I had the same problem. Here is how you can fix it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Remember this solution I only tested on Windows OS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Find the installed files and delete them, copilot.exe, copilot.asc, and ecs-cli.asc.&lt;/li&gt;
&lt;li&gt;Install them again using the terminal as administrator but in this folder.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;Invoke-WebRequest -OutFile 'C:\Program Files\Amazon\Copilot\copilot.exe' https://github.com/aws/copilot-cli/releases/latest/download/copilot-windows.exe&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Invoke-WebRequest -OutFile 'C:\Program Files\Amazon\Copilot\copilot.asc' https://github.com/aws/copilot-cli/releases/latest/download/copilot-windows.exe.asc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Invoke-WebRequest -OutFile 'C:\Program Files\Amazon\Copilot\ecs-cli.asc' https://github.com/aws/copilot-cli/releases/latest/download/copilot-windows.exe&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Type &lt;strong&gt;Win + R&lt;/strong&gt; and write this &lt;strong&gt;rundll32.exe sysdm.cpl,EditEnvironmentVariables&lt;/strong&gt;, it will open your environment variables panel.&lt;/li&gt;
&lt;li&gt;Go to system variables, select path and click edit, add a new path &lt;strong&gt;C:\Program Files\Amazon\Copilot&lt;/strong&gt; or the path where the copilot.exe file is.&lt;/li&gt;
&lt;li&gt;Save the changes and restart.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Write the command &lt;strong&gt;copilot --help&lt;/strong&gt; in your terminal and it should work.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#installing-docker-pointup"&gt;
  &lt;/a&gt;
  Installing Docker &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Download docker &lt;a href="https://www.docker.com/products/docker-desktop"&gt;here&lt;/a&gt; and follow the instructions.&lt;/p&gt;

&lt;p&gt;Before you install the Docker Desktop WSL 2 backend, you must complete the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install Windows 10, version 1903 or higher, or Windows 11.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enable WSL 2 feature on Windows. For detailed instructions, refer to &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install"&gt;the Microsoft documentation&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Download and install &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-manual#step-4---download-the-linux-kernel-update-package"&gt;the Linux kernel update package&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;
  &lt;a href="#setting-up-the-project-pointup"&gt;
  &lt;/a&gt;
  Setting up the project &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Create a folder a give it a name of your choice, mine will be crypto-bot-app, open your folder on your IDE and write &lt;strong&gt;npm init -y&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now we add the packages. Write on the terminal &lt;strong&gt;npm i telegraf axios&lt;/strong&gt;&lt;br&gt;
All set!!!&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#creating-the-bot-pointup"&gt;
  &lt;/a&gt;
  Creating the bot &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Open your Telegram app and search for the &lt;a href="https://t.me/botfather"&gt;BotFather&lt;/a&gt; and start the bot.&lt;/li&gt;
&lt;li&gt;Write the command /newbot and give it a name, mine will be crypto-bot and username crptobot&lt;/li&gt;
&lt;li&gt;You should receive a token like this 2098237194:AAH9QoFokuBOn0IqES0IGJdJ_AR-tySMOX4, save it for later.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You created your first bot !!congratulation!!, now let add some code to it.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#lets-code-pointup"&gt;
  &lt;/a&gt;
  Let’s code &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Create an index.js file on the project folder where we are going to put this code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Telegraf&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;telegraf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Telegraf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2098237194:AAH9QoFokuBOn0IqES0IGJdJ_AR-tySMOX4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//your token&lt;/span&gt;

&lt;span class="c1"&gt;// START-----------------------------------------------&lt;/span&gt;
&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hi &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`I still under development but you can use me to get the latest price of a cryptocurrency`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`For example to know the price of an specific crypto write the command /price and the symbol of the cryptocurrency`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/price btc`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// COMMANDS===============================================================&lt;/span&gt;
&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;price&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Price&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PRICE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ticker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/price &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://api.binance.com/api/v3/ticker/price?symbol=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;USDT`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ticker&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; USDT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Some error occurred in your request, please try again&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#testing-the-code-pointup"&gt;
  &lt;/a&gt;
  Testing the code &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Before initiating, the code let's add the following piece of code to our package.json&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node index.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//here&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;  &lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now run the command &lt;strong&gt;npm start&lt;/strong&gt;, go to telegram, open your bot and type &lt;strong&gt;/start&lt;/strong&gt; or &lt;strong&gt;/price btc&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Once you receive the expected response we may continue this journey.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#configuring-dockerfile-pointup"&gt;
  &lt;/a&gt;
  Configuring dockerfile &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Create a file in your project directory and name it &lt;strong&gt;Dockerfile&lt;/strong&gt;, add this configuration code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM node:16.9.1

WORKDIR /app

COPY package*.json ./

RUN npm install

COPY . .

EXPOSE 80

CMD ["npm","start"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, create a file with the name .dockerignore and add this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;copilot
node_modules
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#deploying-to-ecs-with-copilot-cli-pointup"&gt;
  &lt;/a&gt;
  Deploying to ECS with Copilot Cli &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Now that we have the dockerfile configured correctly, we are going to deploy the bot to ECS to work 24/7.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write the command &lt;strong&gt;copilot init&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Name de app, I'll use crypto-bot-app.&lt;/li&gt;
&lt;li&gt;We choose the workload, in my case Backend Service.&lt;/li&gt;
&lt;li&gt;Name backend service as bot-main-service.&lt;/li&gt;
&lt;li&gt;
Deploy the app with the command &lt;strong&gt;copilot app deploy&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#making-some-refactoring-pointup"&gt;
  &lt;/a&gt;
  Making some refactoring &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;At this point, we can make some refactoring to optimize our code. First, we are going to create a folder "src" with a javascript file named "bot-functions.js" and add this code.&lt;/p&gt;

&lt;p&gt;bot-functions.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;start_message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hi &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`I still under development but you can use me to get the latest price of a cryptocurrency`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`For example to know the price of an specific crypto write the command /price and the symbol of the cryptocurrency`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/price btc`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;getCryptocurrencyPrice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ticker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/price &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://api.binance.com/api/v3/ticker/price?symbol=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;USDT`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ticker&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; USDT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Some error occurred in your request, please try again&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then go to index.js and make some changes to it.&lt;/p&gt;

&lt;p&gt;index.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Telegraf&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;telegraf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/bot-functions.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Telegraf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2098237194:AAH9QoFokuBOn0IqES0IGJdJ_AR-tySMOX4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//your token&lt;/span&gt;

&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;price&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Price&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PRICE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCryptocurrencyPrice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we test that everything is working correctly, we add the changes with the command &lt;strong&gt;copilot app deploy&lt;/strong&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#the-end-pointup"&gt;
  &lt;/a&gt;
  The End &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Keep in mind that this is a dev project for educational purposes, in the real world you should storage tokens and important information on environment variables, and all the good practices that the job demands. If you like it, give a thumbs-up 👍 and share it.&lt;/p&gt;

&lt;p&gt;to the next post...&lt;/p&gt;

</description>
      <category>node</category>
      <category>aws</category>
      <category>copilot</category>
      <category>javascript</category>
    </item>
    <item>
      <title>DataDog vs New Relic | Detailed comparison (5 key features)</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Wed, 20 Oct 2021 13:24:12 +0000</pubDate>
      <link>https://dev.to/signoz/datadog-vs-new-relic-detailed-comparison-5-key-features-3f9f</link>
      <guid>https://dev.to/signoz/datadog-vs-new-relic-detailed-comparison-5-key-features-3f9f</guid>
      <description>&lt;p&gt;Both DataDog and New Relic are enterprise monitoring tools that provide a wide range of products covering different aspects of application and infrastructure monitoring. In this article, we will compare DataDog and New Relic based on their different monitoring capabilities.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Businesses are embracing digital transformation now more than ever. In most cases, the digital channel is the primary driver of revenue and growth. Customers and end-users are going online to fulfill both their daily and long-term needs.&lt;/p&gt;

&lt;p&gt;The digital shift has made the app production environment a critical piece of an organization's success. The performance of your application in production needs to be monitored to ensure high availability at all times.&lt;/p&gt;

&lt;p&gt;DataDog and New Relic provide numerous products to monitor applications. Some of the key products offered by both tools include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application Performance Monitoring&lt;/li&gt;
&lt;li&gt;Infrastructure monitoring&lt;/li&gt;
&lt;li&gt;Log Management&lt;/li&gt;
&lt;li&gt;Network monitoring&lt;/li&gt;
&lt;li&gt;Browser or end-user monitoring&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's compare DataDog and New Relic based on the features they provide in the above-mentioned categories.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can also check out &lt;a href="https://signoz.io/?utm_source=blog&amp;amp;utm_medium=datadog_vs_newrelic"&gt;SigNoz&lt;/a&gt;, an open-source APM tool. It is built natively for OpenTelemetry and supports multiple backend storage - ClickHouse or Kafka + Druid. Choosing an open-source APM over SaaS vendors has many benefits for developers. At the same time, &lt;a href="https://signoz.io/?utm_source=blog&amp;amp;utm_medium=datadog_vs_newrelic"&gt;SigNoz&lt;/a&gt; is built to avoid the pain of maintenance that comes with most open-source tools.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#application-performance-monitoring"&gt;
  &lt;/a&gt;
  Application Performance Monitoring
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#datadog-apm"&gt;
  &lt;/a&gt;
  DataDog APM
&lt;/h3&gt;

&lt;p&gt;DataDog's APM provides end-to-end distributed tracing connecting frontend devices to databases.&lt;/p&gt;

&lt;p&gt;Some of the key features of DataDog APM includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Distributed tracing can track requests from user sessions to services and databases.&lt;/li&gt;
&lt;li&gt;Users can correlate their distributed traces to infrastructure and network metrics.&lt;/li&gt;
&lt;li&gt;With DataDog's APM, you can ingest 100% of your traces from the last 15 minutes. You can then retain error and high latency traces&lt;/li&gt;
&lt;li&gt;You can inspect code-level performance and break down slow requests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iklAHOcN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/apm_tools_datadog-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iklAHOcN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/apm_tools_datadog-min.jpg" alt="DataDog APM Dashboard"&gt;&lt;/a&gt;DataDog APM tool dashboard (Source: DataDog dashboard)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-relic-apm"&gt;
  &lt;/a&gt;
  New Relic APM
&lt;/h3&gt;

&lt;p&gt;New Relic's APM covers performance monitoring for many programming languages and combines metrics from mobile and browser apps to services and databases.&lt;/p&gt;

&lt;p&gt;Some of the key features of New Relic APM includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Auto-instrumentation of eight programming languages: Java, .Net, Node.js, PHP, Python, Ruby, Go and C/C++&lt;/li&gt;
&lt;li&gt;Distributed tracing and sampling options for a wide range of technology stack&lt;/li&gt;
&lt;li&gt;Correlation of tracing data with other aspects of application infrastructure and user monitoring&lt;/li&gt;
&lt;li&gt;Fully managed cloud-native experience with on-demand scalability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rnKZlZeq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_newrelic_apm-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rnKZlZeq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_newrelic_apm-min.jpg" alt="New Relic APM Dashboard"&gt;&lt;/a&gt;New Relic APM Dashboard (Source: New Relic Dashboard)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#infrastructure-monitoring"&gt;
  &lt;/a&gt;
  Infrastructure Monitoring
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#datadog-infrastructure-monitoring"&gt;
  &lt;/a&gt;
  DataDog Infrastructure Monitoring
&lt;/h3&gt;

&lt;p&gt;You can monitor all your machines with DataDog's infrastructure monitoring. A DataDog agent runs on all your hosts to capture events and metrics.&lt;/p&gt;

&lt;p&gt;Some of the key features of DataDog's infrastructure monitoring includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can see all your machines in the infrastructure list. Each machine/host has tags, aliases, metrics attached to it&lt;/li&gt;
&lt;li&gt;DataDog provides a Host map to visualize all your hosts on one screen&lt;/li&gt;
&lt;li&gt;It also provides a container map and real-time monitoring of containers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dApWM1rM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_datadog_infrastructure-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dApWM1rM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_datadog_infrastructure-min.jpg" alt="DataDog Infrastructure Monitoring Dashboard"&gt;&lt;/a&gt;See detailed info about your hosts on DataDog dashboard (Source: DataDog website)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-relic-infrastructure-monitoring"&gt;
  &lt;/a&gt;
  New Relic Infrastructure Monitoring
&lt;/h3&gt;

&lt;p&gt;New Relic provides infrastructure monitoring for cloud services, dedicated hosts to containers.&lt;/p&gt;

&lt;p&gt;Some of the key features of New Relic infrastructure monitoring includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can connect changes in your host performance with your configuration changes. You can track the configuration change of your entire infrastructure.&lt;/li&gt;
&lt;li&gt;If your infrastructure account is connected with the APM account, then you can troubleshoot performance issues by connecting the server-side to the application side.&lt;/li&gt;
&lt;li&gt;Provides integrations to collect metrics for popular platforms like AWS, GCP, Azure, Kubernetes, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i7JeS56t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_newrelic_infrastructure-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i7JeS56t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_newrelic_infrastructure-min.jpg" alt="New Relic Infrastructure Monitoring Dashboard"&gt;&lt;/a&gt;New Relic Infrastructure Monitoring Dashboard (Source: New Relic documentation)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#log-management"&gt;
  &lt;/a&gt;
  Log Management
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#datadog-log-management"&gt;
  &lt;/a&gt;
  DataDog Log Management
&lt;/h3&gt;

&lt;p&gt;DataDog log management provides capabilities to search and analyze logs at any scale.&lt;/p&gt;

&lt;p&gt;Some of the key features of DataDog Log Management includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provides logging without limits, can ingest 100% of your logs before indexing.&lt;/li&gt;
&lt;li&gt;Provides log processing pipelines for 170+ common technologies&lt;/li&gt;
&lt;li&gt;Filter logs with a time range, tags, and full-text search&lt;/li&gt;
&lt;li&gt;Provides aggregation of indexed logs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uxh7wr2s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_datadog_log_management-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uxh7wr2s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_datadog_log_management-min.jpg" alt="DataDog Log Management Dashboard"&gt;&lt;/a&gt;DataDog log management dashboard (Source: DataDog website)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-relic-log-management"&gt;
  &lt;/a&gt;
  New Relic Log Management
&lt;/h3&gt;

&lt;p&gt;With New Relic Log Management, you can easily ingest any text-based data. &lt;/p&gt;

&lt;p&gt;Some of the key features of New Relic log management include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Custom charts and visualization for log data&lt;/li&gt;
&lt;li&gt;Quick search response times for any volume of log data&lt;/li&gt;
&lt;li&gt;Provides machine learning capabilities to detect issues from your log data automatically&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tltAVA-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_newrelic_log_management-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tltAVA-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_newrelic_log_management-min.jpg" alt="New Relic Log Management Dashboard"&gt;&lt;/a&gt;New Relic Log Management Dashboard (Source: New Relic website)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#network-monitoring"&gt;
  &lt;/a&gt;
  Network Monitoring
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#datadog-network-monitoring"&gt;
  &lt;/a&gt;
  DataDog Network Monitoring
&lt;/h3&gt;

&lt;p&gt;Some of the key features of DataDog network monitoring include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provides metrics for point-to-point communication on your infrastructure&lt;/li&gt;
&lt;li&gt;Granular data for network flows in a multi-cloud environment along with aggregation capabilities supported by tags&lt;/li&gt;
&lt;li&gt;Automatically collects tags from more than 450 integrations. You can see network volume between any two sets of tags&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BFDVnJ5Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_datadog_network_monitoring-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BFDVnJ5Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_datadog_network_monitoring-min.jpg" alt="DataDog Network Monitoring Dashboard"&gt;&lt;/a&gt;DataDog network monitoring (Source: DataDog website)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-relic-network-monitoring"&gt;
  &lt;/a&gt;
  New Relic Network Monitoring
&lt;/h3&gt;

&lt;p&gt;Some of the key features of New Relic Network monitoring include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provides pre-configured dashboards for monitoring popular cloud services like Azure, AWS, GCP, etc. and provides dynamic alerting&lt;/li&gt;
&lt;li&gt;Provides integrations with 100+ services. You can check the full list of &lt;a href="https://docs.newrelic.com/docs/integrations/amazon-integrations/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;AWS&lt;/b&gt;&lt;/a&gt;, &lt;a href="https://docs.newrelic.com/docs/integrations/microsoft-azure-integrations/azure-integrations-list/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;Azure&lt;/b&gt;&lt;/a&gt; and &lt;a href="https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;GCP&lt;/b&gt;&lt;/a&gt; integrations&lt;/li&gt;
&lt;li&gt;Provides advanced Kubernetes monitoring capabilities correlating metrics from the application and the infrastructure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xKM1B891--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_newrelic_network_monitoring-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xKM1B891--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_newrelic_network_monitoring-min.jpg" alt="New Relic Network Monitoring Dashboard"&gt;&lt;/a&gt;New Relic Network Monitoring (Source: New Relic website)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#browser-or-realuser-monitoring"&gt;
  &lt;/a&gt;
  Browser or real-user monitoring
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#datadog-realuser-monitoring"&gt;
  &lt;/a&gt;
  DataDog Real-User Monitoring
&lt;/h3&gt;

&lt;p&gt;DataDog provides end-to-end visibility into user journeys for mobile and web applications.&lt;/p&gt;

&lt;p&gt;Some of the key features of DataDog end-user monitoring:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provides aggregated fronted performance metrics, with slice and dice capabilities by location, device, application, etc.&lt;/li&gt;
&lt;li&gt;Provides root cause analysis for slow loading times with visibility into code, network, and infrastructure&lt;/li&gt;
&lt;li&gt;Offers customer segmentation with the help of tags for error tracking in real-time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C27ruqBU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_datadog_rum-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C27ruqBU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_datadog_rum-min.jpg" alt="DataDog RUM Dashboard"&gt;&lt;/a&gt;DataDog Real User Monitoring&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-relic-browser-monitoring"&gt;
  &lt;/a&gt;
  New Relic Browser Monitoring
&lt;/h3&gt;

&lt;p&gt;New Relic provides monitoring for end-users using your application across web browsers, devices, operating systems, and networks.&lt;/p&gt;

&lt;p&gt;Some of the key features of New Relic Browser Monitoring include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provides full-stack visibility to identify end-user latency from backend or network issues&lt;/li&gt;
&lt;li&gt;Provides session performance with a heatmap of a user's interaction with the webpage&lt;/li&gt;
&lt;li&gt;Provides Javascript error analytics using which you can see end-user steps leading to errors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HDaqRwiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_browser_monitoring-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HDaqRwiA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/dd_vs_nr_browser_monitoring-min.jpg" alt="New Relic Browser Monitoring Dashboard"&gt;&lt;/a&gt;New Relic Browser monitoring (Source: New Relic website&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#issues-with-existing-monitoring-vendors"&gt;
  &lt;/a&gt;
  Issues with existing monitoring vendors
&lt;/h2&gt;

&lt;p&gt;DataDog and New Relic are great monitoring tools and provide a gamut of monitoring products that any organization can use. But these enterprise monitoring tools can have the following issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Crazy node-based pricing,
Node-based pricing doesn’t make sense in today’s micro-services architecture. Any node which is live for more than 8hrs in a month is charged. So, unsuitable for spiky workloads&lt;/li&gt;
&lt;li&gt;Very costly
These tools are very costly if you want to do things like sending custom metrics.&lt;/li&gt;
&lt;li&gt;Cloud-only
Hence,  not suitable for companies that have concerns with sending data outside their infra&lt;/li&gt;
&lt;li&gt;Closed product roadmap
For any small feature, you are dependent on their roadmap. We think this is an unnecessary restriction for a product which developers use. A product used by developers should be extendible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The other alternative can be going for an open-source alternative. But the problem with most open-source products is that they are resource-intensive to set up, maintain and scale up. That's where &lt;a href="https://signoz.io/?utm_source=blog&amp;amp;utm_medium=datadog_vs_newrelic"&gt;SigNoz&lt;/a&gt; comes into the picture.  &lt;a href="https://signoz.io/?utm_source=blog&amp;amp;utm_medium=datadog_vs_newrelic"&gt;SigNoz&lt;/a&gt; is a full-stack open-source APM platform with easy configuration and scalable architecture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-alternative-to-datadog-and-new-relic-signoz"&gt;
  &lt;/a&gt;
  An alternative to DataDog and New Relic - SigNoz
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://signoz.io/?utm_source=blog&amp;amp;utm_medium=datadog_vs_newrelic"&gt;SigNoz&lt;/a&gt; is a full-stack open-source application performance monitoring and observability tool which can be used in place of DataDog and Grafana. SigNoz is built to give SaaS like user experience combined with the perks of open-source software. Developer tools should be developer first, and SigNoz was built by developers to address the gap between SaaS vendors and open-source software.&lt;/p&gt;

&lt;p&gt;Key architecture features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Native OpenTelemetry support&lt;/strong&gt;
SigNoz is built to support &lt;a href="https://opentelemetry.io/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;OpenTelemetry&lt;/b&gt;&lt;/a&gt; natively, which is quietly becoming the world standard to generate and manage telemetry data.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Flexible and scalable Database storage&lt;/strong&gt;
SigNoz provides users flexibility in terms of storage. You can choose between ClickHouse or Kafka + Druid as your backend storage while installing SigNoz.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6BdjoEB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/SigNoz_architecture_clickhouse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6BdjoEB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/SigNoz_architecture_clickhouse.png" alt="Architecture of SigNoz with OpenTelemetry and ClickHouse"&gt;&lt;/a&gt;Architecture of SigNoz with ClickHouse as storage backend and OpenTelemetry for code instrumentatiio&lt;/p&gt;

&lt;p&gt;SigNoz comes with out of box visualization of things like RED metrics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OKFqZ_PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OKFqZ_PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.png" alt="SigNoz UI showing the popular RED metrics"&gt;&lt;/a&gt;SigNoz UI showing application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/p&gt;

&lt;p&gt;You can also use flamegraphs to visualize spans from your trace data. All of this comes out of the box with SigNoz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FOoIlefK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FOoIlefK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.png" alt="Flamegraphs used to visualize spans of distributed tracing in SigNoz UI"&gt;&lt;/a&gt;Flamegraphs showing exact duration taken by each spans - a concept of distributed tracing&lt;/p&gt;

&lt;p&gt;You can also build custom metrics dashboard for your infrastructure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NgbBDuMT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/signoz_custom_dashboard-min.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NgbBDuMT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/10/signoz_custom_dashboard-min.jpg" alt="SigNoz custom metrics dashboard"&gt;&lt;/a&gt;You can also build a custom metrics dashboard for your infrastructure&lt;/p&gt;

&lt;p&gt;Some of the things SigNoz can help you track:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/li&gt;
&lt;li&gt;Slowest endpoints in your application&lt;/li&gt;
&lt;li&gt;See exact request trace to figure out issues in downstream services, slow DB queries, call to 3rd party services like payment gateways, etc&lt;/li&gt;
&lt;li&gt;Filter traces by service name, operation, latency, error, tags/annotations.&lt;/li&gt;
&lt;li&gt;Run aggregates on trace data&lt;/li&gt;
&lt;li&gt;Unified UI for both metrics and traces&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#getting-started-with-signoz"&gt;
  &lt;/a&gt;
  Getting started with SigNoz
&lt;/h2&gt;

&lt;p&gt;If you have docker installed, getting started with SigNoz just takes three easy steps at the command line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;clone&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/SigNoz/signoz.git&lt;/span&gt;
&lt;span class="nx"&gt;cd&lt;/span&gt; &lt;span class="nx"&gt;signoz&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;install&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can read more about deploying SigNoz from its documentation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://signoz.io/docs/deployment/docker/?utm_source=blog&amp;amp;utm_medium=dd_vs_newrelic"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KH63BIXD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zel9jdf6epra2uxvh21c.png" alt="Deployment Docs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can check out SigNoz's GitHub repo here 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#related-content"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Related Content&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://signoz.io/blog/datadog-vs-prometheus/"&gt;DataDog vs Prometheus&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://signoz.io/blog/datadog-vs-grafana/"&gt;DataDog vs Grafana&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://signoz.io/blog/opentelemetry-spring-boot/"&gt;Monitor Spring Boot App with SigNoz and OpenTelemetry&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>kubernetes</category>
      <category>microservices</category>
      <category>monitoring</category>
    </item>
  </channel>
</rss>
