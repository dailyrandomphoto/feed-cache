<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Understanding Ethereum Accounts | Externally Owned Accounts vs Contract Accounts</title>
      <author>Srajan Gupta</author>
      <pubDate>Wed, 10 Nov 2021 04:10:04 +0000</pubDate>
      <link>https://dev.to/srajangupta__/understanding-ethereum-accounts-externally-owned-accounts-vs-contract-accounts-2bje</link>
      <guid>https://dev.to/srajangupta__/understanding-ethereum-accounts-externally-owned-accounts-vs-contract-accounts-2bje</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/HaIxmsj-YQU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this tutorial, we will learn about Ethereum Accounts and their Properties. We will learn about different types of Ethereum Accounts and Learn to Create our own Ethereum Account using a very useful tool, known as Metamask.&lt;/p&gt;

</description>
      <category>ethereum</category>
      <category>blockchain</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>If-Else or Switch-Case: Which One to Pick?</title>
      <author>Sumudu Siriwardana</author>
      <pubDate>Wed, 10 Nov 2021 03:59:21 +0000</pubDate>
      <link>https://dev.to/sumusiriwardana/if-else-or-switch-case-which-one-to-pick-4p3h</link>
      <guid>https://dev.to/sumusiriwardana/if-else-or-switch-case-which-one-to-pick-4p3h</guid>
      <description>&lt;p&gt;If you are a newbie to programming and JavaScript, you might be confused about which conditional statements to use, especially between if-else and switch-case statements. &lt;/p&gt;

&lt;p&gt;When I first learned about conditional statements, I thought it was simple enough, and I could use either if-else or switch in any case. But then, when I learned more about this topic and tried to apply it to some problems, I got confused about which one I should use, what's the exact difference, and how I should choose the correct one. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fi1PUv2W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636281793918/GvLEIdJIV.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fi1PUv2W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636281793918/GvLEIdJIV.jpeg" alt="FDCKZ2RWYAIMx_2.jpeg" width="880" height="981"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I struggled over understanding the difference and application of these two conditional statements and dug deeper into the topic. &lt;/p&gt;

&lt;p&gt;In this article, I will explain these two concepts and provide a comparison chart, so you will understand how you can use if-else and switch-case in different scenarios according to the complexity. &lt;/p&gt;

&lt;p&gt;Before jumping into details, let's refresh our memory on why we use conditional statements in our programs. &lt;/p&gt;

&lt;p&gt;As human beings, we make various decisions all the time that affect our lives. For example, if we have some free time, we have to decide what to do, whether to rest, watch something, call someone or maybe do something productive. &lt;/p&gt;

&lt;p&gt;Conditional statements allow us to make such decisions based on a condition in JavaScript. If the condition is true, we can perform one action, otherwise, we can perform a different action. &lt;/p&gt;

&lt;p&gt;So if-else and switch-case both allow us to make these decisions based on a condition. If you want to refresh your memory on how the conditional works, check out this &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals"&gt;MDN article&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-ifelse-and-elseif-statements"&gt;
  &lt;/a&gt;
  The if-else and else-if statements
&lt;/h2&gt;

&lt;p&gt;As newbies, we all love if-else statements! 😂&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3CMjbv3_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636282542849/7euXxLSu8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3CMjbv3_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636282542849/7euXxLSu8.gif" alt="if-else-matrix.gif" width="400" height="167"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If-else statement takes a specific condition and checks whether the condition is truthy or falsy. If the condition is true, then the &lt;code&gt;if&lt;/code&gt; statement executes a specific code block. If the condition is false, then the &lt;code&gt;else&lt;/code&gt; statement executes a different code block. &lt;/p&gt;

&lt;p&gt;Let's take a simple example to understand how this works. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario One&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Imagine that you are the class teacher for grade 5, class C. You have to check students' grades based on their marks, and you only have to check whether the student has passed or failed. Let's check one of the student's grades based on their marks using an if-else statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;studentGrade&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;marks&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You have passed the exam! 🥳&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You have failed the exam!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;studentGrade&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// "You have passed the exam! 🥳"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;According to the above example, we have written a simple function that takes student marks and checks whether it's above 50 or below  50. If the marks entered are 50 or above, then the &lt;code&gt;if&lt;/code&gt; block executes. If it's below 50, then the &lt;code&gt;else&lt;/code&gt; block executes. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario Two&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, imagine taking a step further and giving the result based on the students' specific grades. For example, if the student gets an "A+", the student receives "Nailed It! 🥳". If the student gets a "D", the result would be "Failed 😢".   &lt;/p&gt;

&lt;p&gt;To have multiple choices like this, we can use the else-if statements to chain the extra choices. &lt;/p&gt;

&lt;p&gt;See below code written according to the second scenario with else-if statements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;studentFinalResultIf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grade&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grade&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nailed It! 🥳&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grade&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Passed 💃&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grade&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;B+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Passed 💃&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grade&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Passed 💃&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grade&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Barely Survived 😌&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grade&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;D&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Failed 😢&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Failed 😢&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;cconsole&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;studentFinalResultIf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;   &lt;span class="c1"&gt;// "Nailed It! 🥳"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;According to the above function, we use different conditional statements to provide students' results depending on the grade. Except for the first code block, which is the &lt;code&gt;if&lt;/code&gt; block, all the other conditions are tested in &lt;code&gt;else if&lt;/code&gt; blocks. And if none of the conditions are true, the last &lt;code&gt;else&lt;/code&gt; executes its code block. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#switch-statements"&gt;
  &lt;/a&gt;
  Switch statements
&lt;/h2&gt;

&lt;p&gt;The switch statement is a multiple-choice selection statement. Once you have given the choices and relevant expressions for each choice, It looks through the choices until it finds the choice that matches the expression and executes it. &lt;/p&gt;

&lt;p&gt;Let's rewrite the second scenario using the switch statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;studentFinalResultSwitch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grade&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grade&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nailed It! 🥳&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;B+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Passed 💃&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Barely Survived 😌&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;D&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Failed 😢&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Failed 😢&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;studentFinalResultSwitch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A+&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;   &lt;span class="c1"&gt;// "Nailed It! 🥳"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we have the main condition that has many choices. When we check the specific grade, it checks which expression the grade belongs to and then runs that case block. In this case, when the grade is an "A+", it runs &lt;code&gt;case "A+":&lt;/code&gt; and returns the result "Nailed It! 🥳". &lt;/p&gt;

&lt;p&gt;Now you might be thinking both if-else and switch statements are pretty much alike, and maybe if-else seem more straightforward to use. And you might have your reasons for choosing one over the other. So before jumping to any conclusions, let's check the differences between if-else and switch statements. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comparison-chart"&gt;
  &lt;/a&gt;
  Comparison Chart
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Basic Terms&lt;/th&gt;
&lt;th&gt;If-else&lt;/th&gt;
&lt;th&gt;Switch-case&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Check the testing expression&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;An if-else statement can test expression based on a range of values or conditions.&lt;/td&gt;
&lt;td&gt;A switch statement tests expressions based only on a single integer, enumerated value, or string object.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Ideal for&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;if-else conditional branches are great for variable conditions that result into Boolean.&lt;/td&gt;
&lt;td&gt;Switch statements are ideal for fixed data values.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Creation of jump table&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;In the if-else case, we do not create a jump table, and all cases are executed at runtime.&lt;/td&gt;
&lt;td&gt;In switch case, we create jump table on compiled time only selected case is executed on runtime.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Type of search&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;If else implements linear search.&lt;/td&gt;
&lt;td&gt;Switch implements binary switch.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Condition &amp;amp; expression&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Having different conditions is possible.&lt;/td&gt;
&lt;td&gt;We can only have one expression.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Evaluation&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;If-else statement evaluates integer, character, pointer or floating-point type or Boolean type.&lt;/td&gt;
&lt;td&gt;Switch statement evaluates only character or integer value.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Sequence of execution&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;It is either if-statement will be executed, or else-statement is executed.&lt;/td&gt;
&lt;td&gt;Switch case statement executes one case after another till a break statement appears or until the end of the switch statement is reached.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Default execution&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;If the condition inside if statements are false, then by default, the else statement is executed if created.&lt;/td&gt;
&lt;td&gt;If the condition inside switch statements does not match with any of the cases, for that instance, the default statement is executed if created.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Values&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Values are based on the constraint.&lt;/td&gt;
&lt;td&gt;Values are based on user choice.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Use&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;It is used to evaluate a condition to be true or false.&lt;/td&gt;
&lt;td&gt;It is used to test multiple values of the same variable or expression like 1, 2, 3, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Editing&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;It is difficult to edit the if-else statement if the nested if-else statement is used&lt;/td&gt;
&lt;td&gt;It is easy to edit switch cases as they are recognized easily.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;According to the above comparison, you can see the decision of which conditional statement to choose is depending on the scenario and its complexity. For example, we can select both if-else and switch statements for the second scenario since we are just checking one report, which might not make any difference in performance except readability.&lt;/p&gt;

&lt;p&gt;Let's take a step further and make our scenario a little bit complicated. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario Three&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What if we want to print grades for all the students in all classes? Imagine that we have ten classes for grade 5. And each class includes 50 students. So altogether, we have to check and print the results for around 500 students. &lt;/p&gt;

&lt;p&gt;If we use the if-else statement for this, we might run into a slight performance delay. It's because, during the execution, the if-else statement always executes the expression to check whether the condition is satisfied or not. Things would get slower when there are more conditions to check and when the choices get complex. &lt;/p&gt;

&lt;p&gt;On the other hand, a switch statement works comparatively faster because the compiler generates a jump table for switch-cases during compile time. So when the code runs, instead of checking which cases are satisfied, it only decides which cases should be executed. In our third scenario, to generate reports for many students, the switch-case might be the better approach. &lt;/p&gt;

&lt;p&gt;I hope now you can understand that based on the above comparison and our examples, both statements have their place in the code and it's up to you to choose which one suits which scenario. There is no right or wrong way of doing it. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So how can we choose which statement to use?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BnGuKNb1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636287323886/smiwyj8nh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BnGuKNb1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636287323886/smiwyj8nh.png" alt="if-switch.png" width="503" height="342"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choosing one over the other is not that straightforward. Here are some tips when choosing one over the other;&lt;/p&gt;

&lt;p&gt;You can use if-else when:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The condition result is a &lt;code&gt;boolean&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The conditions are complex. For example,  you have conditions with multiple &lt;a href="https://dasha.ai/en-us/blog/beginners-guide-js-operators-part-2"&gt;logical operators.&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use a switch-case when: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are multiple choices for an expression.&lt;/li&gt;
&lt;li&gt;The condition is based on a predefined set of values such as enums, constants, known types. For example, error codes, statuses, states, object types, etc. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So based on performance, readability, understandability, changeability, you would have to decide whether to use if-else statements or switch statements. When you read more code and write more code, eventually, you will start figuring out which one is suitable for which scenario; it comes with practice. &lt;/p&gt;

&lt;p&gt;Also, there are more approaches if you want to avoid the conditionals as much as you can, especially in JavaScript; array lookup or object lookup are a couple of common approaches. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing thoughts
&lt;/h3&gt;

&lt;p&gt;You might find it confusing to decide when to use which statement as a newbie, but it gets better with more practice. Remember that every case requires a specific solution but there's no right or wrong answer. And it's up to you to choose a suitable solution based on your experience. So I hope that the comparison provided here makes it easier for you to identify the difference between if-else and switch statements and not pick one side. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If the only tool you have is a hammer, you tend to see every problem as a nail - Abraham Maslow&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Happy coding! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jeygZ8Rd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636288469628/KUlvVssUn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jeygZ8Rd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636288469628/KUlvVssUn.gif" alt="giphy.gif" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.oreilly.com/library/view/high-performance-javascript/9781449382308/ch04.html"&gt;Algorithms and Flow Control&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/switch"&gt;Switch Statement&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else"&gt;If-else Statement&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/conditionals"&gt;Making decisions in your code — conditionals&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://vivadifferences.com/if-else-vs-switch-case/"&gt;Difference Between If-else and Switch Case&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Haciendo deploy de una app en react a GitHub Pages</title>
      <author>Gerald González Zeledón</author>
      <pubDate>Wed, 10 Nov 2021 03:48:00 +0000</pubDate>
      <link>https://dev.to/gedgonz/haciendo-deploy-de-una-app-en-react-a-github-pages-95p</link>
      <guid>https://dev.to/gedgonz/haciendo-deploy-de-una-app-en-react-a-github-pages-95p</guid>
      <description>&lt;p&gt;Hola lectores! 👋, hoy les traigo otra.. guía de como hacer un deploy.. pero esta vez es con react!&lt;/p&gt;

&lt;p&gt;he estado estudiando un poco esta librería y la he sentido bastante sencilla en comparación con angular, seguramente has leído, visto o escuchado algún tutorial o persona que la curva de aprendizaje con angular es muy alta y es cierto. Pero con react no dure ni una semana en aprender a crear componentes, es cierto que me hace falta mucho por aprender, pero como entrada no me parece mal esta librería. Bueno continuemos con el tema principal por el cual estas acá! 🤓&lt;/p&gt;

&lt;p&gt;Estos son los pasos para poner nuestra app react en github pages:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#paso-1"&gt;
  &lt;/a&gt;
  Paso 1
&lt;/h3&gt;

&lt;p&gt;Vas a necesitar crear un repositorio en tu github&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nXlMl-3Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbun0a36an92ubpz5bul.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nXlMl-3Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbun0a36an92ubpz5bul.png" alt="Creación del repositorio" width="820" height="744"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#paso-2"&gt;
  &lt;/a&gt;
  Paso 2
&lt;/h3&gt;

&lt;p&gt;En este paso vas a necesitar tener un proyecto o crear uno, para ello puede utilizar la herramienta &lt;strong&gt;&lt;em&gt;create-react-app&lt;/em&gt;&lt;/strong&gt; o puedes crearla desde cero eso ya depende de ti, en esta caso te muestro el comando para crearlo con la herramienta &lt;strong&gt;&lt;em&gt;create-react-app&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gedgonz@gedgonz:~&lt;span class="nv"&gt;$ &lt;/span&gt;npx create-react-app myReactApp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#paso-3"&gt;
  &lt;/a&gt;
  Paso 3
&lt;/h3&gt;

&lt;p&gt;En este paso necesitarás instalar la siguiente dependencia &lt;a href="https://www.npmjs.com/package/gh-pages"&gt;gh-pages&lt;/a&gt;, nos vamos a nuestra terminal y ejecutamos el siguiente comando:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gedgonz@gedgonz:~&lt;span class="nv"&gt;$ &lt;/span&gt;npm i gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#paso-4"&gt;
  &lt;/a&gt;
  Paso 4
&lt;/h3&gt;

&lt;p&gt;En este paso configuraremos nuestro archivo Package.json con lo siguiente:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#41-homepage"&gt;
  &lt;/a&gt;
  4.1 homepage
&lt;/h4&gt;

&lt;p&gt;Se agregará un nuevo elemento para colocar la ubicación donde estará ubicado nuestro sitio(URL completa)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dJAQWdCC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wijnzs2p437idzx9vjrd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dJAQWdCC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wijnzs2p437idzx9vjrd.jpg" alt="Configuración previa1" width="480" height="416"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#42-predeploy-y-deploy"&gt;
  &lt;/a&gt;
  4.2 predeploy y deploy
&lt;/h4&gt;

&lt;p&gt;Se agregará estos nuevos elementos en la sección de script, esto para ejecutar nuestro build y nuestro deploy desde nuestra consola, cabe de recalcar que estos nombres(predeploy y deploy) puede definirlos como usted estime conveniente&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xsCFJH5T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0kowqp1p8rb8awecn1kh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xsCFJH5T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0kowqp1p8rb8awecn1kh.jpg" alt="Configuración previa2" width="326" height="212"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#paso-5"&gt;
  &lt;/a&gt;
  Paso 5
&lt;/h3&gt;

&lt;p&gt;Una vez que tengamos esta configuración tendremos todo listo para hacer el despliegue de nuestra aplicación en react hacia github pages.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#51-creando-el-build-de-nuestro-proyecto"&gt;
  &lt;/a&gt;
  5.1 Creando el build de nuestro proyecto
&lt;/h4&gt;

&lt;p&gt;Una vez definidos los comandos en la sección de los script los ejecutaremos desde nuestra terminal preferida.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gedgonz@gedgonz:~&lt;span class="nv"&gt;$ &lt;/span&gt;npm run predeploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#52-haciendo-deploy-hacia-github-pages"&gt;
  &lt;/a&gt;
  5.2 Haciendo deploy hacia github pages
&lt;/h4&gt;

&lt;p&gt;Una vez creado nuestro build, ya estamos listo para hace nuestro deploy!! 🤘&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gedgonz@gedgonz:~&lt;span class="nv"&gt;$ &lt;/span&gt;npm run deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;si todo ha salido bien en la terminal nos indicara que se realizó el deploy en github pages ☕️&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Published
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#nota"&gt;
  &lt;/a&gt;
  Nota
&lt;/h3&gt;

&lt;p&gt;Si su app está trabajando con &lt;strong&gt;&lt;em&gt;react-router-dom&lt;/em&gt;&lt;/strong&gt;, será necesario agregar el basename en la etiqueta  a como se muestra en la siguiente imagen, esto para que github redirccion bien las rutas.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JwRKrqxI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/euuknymov8xrm05vq518.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JwRKrqxI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/euuknymov8xrm05vq518.png" alt="Configuración ruta" width="442" height="250"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Si tú sabes hacerlo de una forma más simple  muéstrame en los comentarios te lo agradecería mucho! 🙏&lt;/p&gt;

&lt;p&gt;te dejo el link de proyecto donde aplico lo explicado anteriormente: &lt;a href="https://github.com/GedGonz/reactMovie"&gt;reactMovie&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Bueno eso ha sido todo para este post, espero que sirva de ayuda a otro como yo que busca como aprender cada día en este mundo tecnológico.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>npm</category>
      <category>gedgonz</category>
    </item>
    <item>
      <title>code every day with me</title>
      <author>duccanhole</author>
      <pubDate>Wed, 10 Nov 2021 01:36:51 +0000</pubDate>
      <link>https://dev.to/coderduck/code-every-day-with-me-mek</link>
      <guid>https://dev.to/coderduck/code-every-day-with-me-mek</guid>
      <description>&lt;h2&gt;
  &lt;a href="#day-16"&gt;
  &lt;/a&gt;
  --DAY 16--
&lt;/h2&gt;

&lt;p&gt;Hi, I am going to make #100DaysOfCode Challenge. Everyday I will try solve 1 problem from leetcode or hackerrank. Hope you can go with me until end.&lt;br&gt;
&lt;strong&gt;Now let's solve problem today:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Problem: Pascal's Triangle II (read more about it &lt;a href="https://en.wikipedia.org/wiki/Pascal%27s_triangle"&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Detail: &lt;a href="https://leetcode.com/problems/pascals-triangle-ii/"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;My solution (javascript):
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var getRow = function(index) {
    if(index==0) return [1];
    if(index==1) return [1,1];
    let ans=[[1],[1,1]];
    for(let i=2;i&amp;lt;=index;i++){
        let tmp=[];
        tmp[0]=1;
        for(let j=1;j&amp;lt;i+1;j++){
            tmp[j]=ans[i-1][j-1]+ans[i-1][j];
        }
        tmp[i]=1;
        ans.push(tmp);
    }
    return ans[index];
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;--&amp;gt;&lt;em&gt;If you have better solution or any question, please comment below. I will appreciate.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>100daysofcode</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Understanding Generics in TypeScript</title>
      <author>Philip London</author>
      <pubDate>Wed, 10 Nov 2021 01:15:04 +0000</pubDate>
      <link>https://dev.to/plondon/understanding-generics-in-typescript-2hfh</link>
      <guid>https://dev.to/plondon/understanding-generics-in-typescript-2hfh</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Quick note! If you'd like to experience this post interactively, go to &lt;a href="https://codeamigo.dev/lessons/151"&gt;https://codeamigo.dev/lessons/151&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Sometimes when I'm learning a new paradigm, it's the seemingly simplest things that can trip me up. I often overlook certain concepts because they seem tricky at first.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TypeScript Generics&lt;/strong&gt; is one of those concepts.&lt;/p&gt;

&lt;p&gt;Let's take the example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Lengthwise&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loggingIdentity&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Lengthwise&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loggingIdentity&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're like me you might be asking:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What exactly is T here?&lt;/li&gt;
&lt;li&gt;Why is T used, is that arbitrary?&lt;/li&gt;
&lt;li&gt;Why can't I just write loggingIdentity(arg: Lengthwise)?&lt;/li&gt;
&lt;li&gt;What does  mean?&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-is-"&gt;
  &lt;/a&gt;
  What is ?
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt;. T tells TypeScript that this is the type that is going to be declared at run time instead of compile time. It is TypeScript's &lt;em&gt;Generic Declaration&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interface Lengthwise {
  length: number;
}

function logSomething&amp;lt;T&amp;gt;(arg: T): T {
  console.log(arg);
  return arg;
}

logSomething&amp;lt;string&amp;gt;('hello world')
logSomething&amp;lt;Array&amp;lt;number&amp;gt;&amp;gt;([1])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;logSomething&amp;lt;string&amp;gt;&lt;/code&gt; tells TypeScript: the argument you receive will be a string, and the return type of the function will also be a string.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#why-is-used"&gt;
  &lt;/a&gt;
  Why is  used?
&lt;/h2&gt;

&lt;p&gt;Whether you use , &lt;u&gt;, , or . It's all arbitrary.&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;We see the use of  a lot because that is &lt;a href="https://www.typescriptlang.org/docs/handbook/generics.html#generic-types"&gt;how the original TypeScript documentation defined it&lt;/a&gt;. However, the docs have now replaced declarations using  with . So It's up to you :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-are-generics-useful"&gt;
  &lt;/a&gt;
  How Are Generics Useful?
&lt;/h2&gt;

&lt;p&gt;At this point you may be wondering, "Why should I even use Generics?"&lt;/p&gt;

&lt;p&gt;Well let's say you wanted have a type-safe log function similar to logSomething, for both numbers and strings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;logString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;logNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Obviously we can do better, is there another approach we could use besides Generics?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#union-types-vs-generics"&gt;
  &lt;/a&gt;
  Union Types vs Generics
&lt;/h2&gt;

&lt;p&gt;If you were thinking about Union Types that's a pretty good idea. But it's got some limitations!&lt;/p&gt;

&lt;p&gt;Let's say we wanted to use the return value of our function that accepts a string | number Union Type as its arg.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// function logString(arg: string) {&lt;/span&gt;
&lt;span class="c1"&gt;//   console.log(arg);&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="c1"&gt;// function logNumber(arg: number) {&lt;/span&gt;
&lt;span class="c1"&gt;//   console.log(arg)&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;returnStringOrNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arg&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;returnStringOrNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myOtherVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;returnStringOrNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;myVal&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;= Operator '+' cannot be applied to types 'string | number' and 'number'.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Union types limit the return type of our function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With Generics, we can tell TypeScript definitively that myVal is a number, not a string OR a number!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function returnSomething&amp;lt;T&amp;gt;(arg: T): T {
  return arg
}

const myVal = returnSomething(123)
const myOtherVal = returnSomething('hello')

myVal + 1 // 👍👍 All good!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#overloads"&gt;
  &lt;/a&gt;
  Overloads
&lt;/h2&gt;

&lt;p&gt;Ok, well what about function overloading you may be asking.&lt;/p&gt;

&lt;p&gt;Check out the code to the below. Sure, that works too, but I'll leave it up to you to decide which you'd rather implement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// GENERICS&lt;/span&gt;
&lt;span class="c1"&gt;// function returnSomething&amp;lt;T&amp;gt;(arg: T): T {&lt;/span&gt;
&lt;span class="c1"&gt;//   return arg&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="c1"&gt;// OVERLOADING&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;returnSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;returnSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;returnSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arg&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;returnSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myOtherVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;returnSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;myVal&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#ltt-extends"&gt;
  &lt;/a&gt;
  &amp;lt;T Extends...
&lt;/h2&gt;

&lt;p&gt;Cool, I feel like you're starting to get it. So let's through a wrench in this whole thing.&lt;/p&gt;

&lt;p&gt;Generics aren't perfect either. We need to understand their "constraints", by adding some constraints ;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getLength&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above function will cause TypeScript to complain because we need to tell TypeScript that T extends the appropriate type and it's safe to call &lt;code&gt;.length&lt;/code&gt;!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ThingWithLength&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getLength&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;ThingWithLength&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 😅 All good now!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#future-reading"&gt;
  &lt;/a&gt;
  Future reading
&lt;/h2&gt;

&lt;p&gt;Thanks for following along! If you enjoyed that please check &lt;a href="https://codeamigo.dev"&gt;https://codeamigo.dev&lt;/a&gt; for interactive tutorials!&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>100 días de código: 7, Una semana es un momento codificando y escribiendo</title>
      <author>Daro</author>
      <pubDate>Wed, 10 Nov 2021 00:35:17 +0000</pubDate>
      <link>https://dev.to/darito/100-dias-de-codigo-7-una-semana-es-un-momento-codificando-y-escribiendo-mle</link>
      <guid>https://dev.to/darito/100-dias-de-codigo-7-una-semana-es-un-momento-codificando-y-escribiendo-mle</guid>
      <description>&lt;p&gt;¡Hey hey hey!&lt;/p&gt;

&lt;p&gt;Bienvenidos queridos compañeros del desarrollo de software, hoy vengo a compartir mis experiencias de esta semana escribiendo en el blog y codificando.&lt;/p&gt;

&lt;p&gt;Han pasado &lt;strong&gt;7 días&lt;/strong&gt; desde que comencé este reto y la verdad es que reconforta compartir las experiencias cada día al codificar.&lt;/p&gt;

&lt;p&gt;Sin duda recomiendo esto, es una gran forma de sentirse aliviado y de darte cuenta como vas creciendo, de compararte con tu yo mismo del pasado.&lt;/p&gt;

&lt;p&gt;Como comenzar era lo mas importante para mi no me di cuenta hasta despues de que necesitaba mas indicios sobre lo que iba logrando cada cierto tiempo asi que decidí que lo hare similar a como se hace en los objetivos de sprint semanales o &lt;strong&gt;Weekly Sprint Goals&lt;/strong&gt; de &lt;strong&gt;scrum&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M9VUmEMQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/732l8m7545lga6tymzpc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M9VUmEMQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/732l8m7545lga6tymzpc.jpg" alt="todo-doing-done" width="640" height="503"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Photo by Eden Constantino on Unsplash&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;En ellos fijas las &lt;strong&gt;metas&lt;/strong&gt; que tienes para cada &lt;strong&gt;semana&lt;/strong&gt; e intentas lograrlo, al final analizas lo que lograste y lo que no y las dificultades que tuviste para ello.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#weekly-sprint-goals"&gt;
  &lt;/a&gt;
  Weekly Sprint Goals
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Terminar la sección de instalación y git basico de la guia &lt;a href="https://www.theodinproject.com/"&gt;The odin project&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Terminar la maquetación de mi pagina personal.&lt;/li&gt;
&lt;li&gt;Aumentar mi rango de resolución de problemas en HackerRank a 2 estrellas.&lt;/li&gt;
&lt;li&gt;Utilizar la técnica Pomodoro cada vez que me siente a codificar para ser mas productivo.&lt;/li&gt;
&lt;li&gt;Escribir al menos un blog de algo diferente a 100daysofcode en dev.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pueden ser bastantes tareas o pocas para la semana, como nunca he intentado esto no se que alcance puedo llegar a tener. &lt;br&gt;
Al final actuare según mis resultados.&lt;/p&gt;

&lt;p&gt;Les recomiendo hacer esto para que la motivación de lograr algo se mantenga fuerte y felicitarse cada vez que logren algo y reflexionar cuando no puedan obtenerlo.&lt;/p&gt;

&lt;p&gt;Ahora si regresamos a la sección normal.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ayer"&gt;
  &lt;/a&gt;
  Ayer:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Comencé a practicar Touch typing para mejorar mi velocidad de escritura en el teclado.&lt;/li&gt;
&lt;li&gt;Escribí mi motivación para volverme un desarrollador full stack.&lt;/li&gt;
&lt;li&gt;Termine con el diseño de mi pagina.&lt;/li&gt;
&lt;li&gt;Comencé a codificar mi pagina web personal con tecnologías básicas como HTML, Css y JavaScript ya que realmente no necesita el uso de frameworks pues es una pagina sencilla.&lt;/li&gt;
&lt;li&gt;Avance en la guía de the odin project.&lt;/li&gt;
&lt;li&gt;Aprendí a afrontar y prepararte para una entrevista de trabajo.&lt;/li&gt;
&lt;li&gt;Aprendí las fases de aprendizaje de software como lo son:

&lt;ul&gt;
&lt;li&gt;La luna de miel de la mano(The Hand Holding Honeymoon).&lt;/li&gt;
&lt;li&gt;El acantilado de la confusión(The Cliff of Confusion).&lt;/li&gt;
&lt;li&gt;El desierto de la desesperación(The Desert of Despair).&lt;/li&gt;
&lt;li&gt;El auge de lo impresionante(The Upswing of Awesome).&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#hoy"&gt;
  &lt;/a&gt;
  Hoy:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Conseguí avanzar hasta la sección de instalación de la guia &lt;a href="https://www.theodinproject.com/"&gt;The odin project&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Realice algunos ejercicios de Hacker Rank.&lt;/li&gt;
&lt;li&gt;Realice la instalación de linux Ubuntu. &lt;/li&gt;
&lt;li&gt;Comencé a crear los estilos de mi pagina web personal utilizando la técnica First Mobile, que consiste en crear primero los estilos para móvil y agregar algunas media query para tamaños mas grandes como Tablet y pc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y ¡esto es todo por hoy!&lt;br&gt;
Te recuerdo que esto &lt;strong&gt;no es una guia&lt;/strong&gt; si no mi experiencia realizando el reto.&lt;/p&gt;

&lt;p&gt;Que tengas un día maravilloso y mucho éxito con todo lo que te propongas.&lt;br&gt;
Adiós mundo, por ahora ;).&lt;/p&gt;

</description>
      <category>spanish</category>
      <category>100daysofcode</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Instalando Tailwind CSS em um projeto Meteor</title>
      <author>Frederico Maia</author>
      <pubDate>Wed, 10 Nov 2021 00:05:06 +0000</pubDate>
      <link>https://dev.to/fredmaiaarantes/instalando-tailwind-css-em-um-projeto-meteor-gl4</link>
      <guid>https://dev.to/fredmaiaarantes/instalando-tailwind-css-em-um-projeto-meteor-gl4</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/fredmaiaarantes/installing-tailwind-in-a-meteor-project-2b6h"&gt;English version of this post.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#criando-seu-projeto"&gt;
  &lt;/a&gt;
  Criando seu projeto
&lt;/h2&gt;

&lt;p&gt;Inicie criando um novo projeto &lt;a href="https://meteor.com"&gt;Meteor&lt;/a&gt; se você ainda não um configurado, entre no diretório do projeto e o execute para garantir que está tudo certo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;meteor create my-project
cd my-project
meteor run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Por padrão, Meteor usa React e cria um subdiretório chamado &lt;code&gt;my-project&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#instalando-tailwind-via-npm"&gt;
  &lt;/a&gt;
  Instalando Tailwind via npm
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;meteor npm install tailwindcss@latest postcss@latest postcss-load-config@latest autoprefixer@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;É recomendado utilizar o comando &lt;code&gt;meteor npm&lt;/code&gt; ao invés de somente &lt;code&gt;npm&lt;/code&gt; para usar a versão do npm que já vem com o próprio Meteor.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#instalando-um-pacote-meteor-para-postcss"&gt;
  &lt;/a&gt;
  Instalando um pacote Meteor para postcss
&lt;/h2&gt;

&lt;p&gt;Instale &lt;a href="https://github.com/Meteor-Community-Packages/meteor-postcss"&gt;juliancwirko:postcss&lt;/a&gt; e remova o minificador padrão do Meteor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;meteor remove standard-minifier-css
meteor add juliancwirko:postcss
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configure-o-postcss"&gt;
  &lt;/a&gt;
  Configure o postcss
&lt;/h2&gt;

&lt;p&gt;Crie um arquivo chamado &lt;code&gt;.postcssrc.js&lt;/code&gt;, adicione o tailwindcss e o autoprefixer à sua configuração do PostCSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// .postcssrc.js
module.exports = ctx =&amp;gt; {
  // This flag is set when loading configuration by this package
  if (ctx.meteor) {
    const config = {
      plugins: {
        tailwindcss: {},
        autoprefixer: {},
      },
    };

    if (ctx.env === 'production') {
      // "autoprefixer" is reported to be slow,
      // so we use it only in production.
      config.plugins.autoprefixer = {
        overrideBrowserslist: ['defaults'],
      };
    }

    return config;
  } else {
    return {};
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#inclua-o-tailwind-em-seu-css"&gt;
  &lt;/a&gt;
  Inclua o Tailwind em seu CSS
&lt;/h2&gt;

&lt;p&gt;Adicione o Tailwind ao seu arquivo &lt;code&gt;main.css&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// main.css
@tailwind base;
@tailwind components;
@tailwind utilities;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configure-o-tailwind"&gt;
  &lt;/a&gt;
  Configure o Tailwind
&lt;/h2&gt;

&lt;p&gt;Crie um arquivo chamado &lt;code&gt;tailwind.config.js&lt;/code&gt; com o conteúdo abaixo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// tailwind.config.js
module.exports = {
  purge: [],
  darkMode: false, // or 'media' or 'class'
  theme: {
    extend: {},
  },
  variants: {},
  plugins: [],
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#construindo-seu-css"&gt;
  &lt;/a&gt;
  Construindo seu CSS
&lt;/h2&gt;

&lt;p&gt;Quanto estiver construindo seu app para produção, garanta que configurou a opção de purge para remover quaisquer classes de CSS não utilizadas para ter o menor tamanho de arquivo possível:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// tailwind.config.js
module.exports = {
  purge: ['./imports/ui/**/*.{js,jsx,ts,tsx}', './public/*.html'],
  darkMode: false, // or 'media' or 'class'
  theme: {
    extend: {},
  },
  variants: {},
  plugins: [],
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Referências:&lt;br&gt;
&lt;a href="https://tailwindcss.com/docs/installation"&gt;https://tailwindcss.com/docs/installation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/meteor/examples/tree/main/tailwindcss"&gt;https://github.com/meteor/examples/tree/main/tailwindcss&lt;/a&gt;&lt;/p&gt;

</description>
      <category>meteor</category>
      <category>javascript</category>
      <category>meteorjs</category>
      <category>node</category>
    </item>
    <item>
      <title>How to write technical design docs</title>
      <author>Mage</author>
      <pubDate>Tue, 09 Nov 2021 23:38:08 +0000</pubDate>
      <link>https://dev.to/mage_ai/how-to-write-technical-design-docs-c02</link>
      <guid>https://dev.to/mage_ai/how-to-write-technical-design-docs-c02</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;Technical design documents (aka tech design docs or tech specs) are a great way of creating detailed game plans for features or solutions to technical problems without implementing any code. They can ultimately end up saving your team a lot of time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The importance of tech design docs&lt;/li&gt;
&lt;li&gt;When to create tech design docs&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mage’s tech design doc template&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Purpose&lt;/li&gt;
&lt;li&gt;Background/Context&lt;/li&gt;
&lt;li&gt;Requirements&lt;/li&gt;
&lt;li&gt;Detailed design&lt;/li&gt;
&lt;li&gt;Implementation plan&lt;/li&gt;
&lt;li&gt;Tests&lt;/li&gt;
&lt;li&gt;Runbook&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-importance-of-tech-design-docs"&gt;
  &lt;/a&gt;
  The importance of tech design docs
&lt;/h2&gt;

&lt;p&gt;Tech design docs are the instructions for solving a technical problem or building out a feature. If you have one prepared, it can be handed off to another team member who may be less experienced or unfamiliar with the problem at hand, and they should still be able to solve the problem. Design docs can act as a form of documentation for other team members to refer to.&lt;/p&gt;

&lt;p&gt;In addition, the process of creating a tech design doc forces you to think through the edge cases and various problems you may encounter, and come up with solutions to those problems. This process makes you code up solutions in your head, so when it comes time to actually write the code, the execution is much quicker because the mental heavy lifting has already been done.&lt;/p&gt;

&lt;p&gt;Design docs should be done on a shared workspace (e.g. Google Docs or Notion) so that others can leave comments and provide feedback. As a result, design docs aren’t only great for delegating work and saving time, but also collaborating towards a technical solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-create-tech-design-docs"&gt;
  &lt;/a&gt;
  When to create tech design docs
&lt;/h2&gt;

&lt;p&gt;It’s generally a good idea to create a tech design doc anytime you’re trying to solve a technical problem that takes longer than a day to solve. Even if the solution only takes a few hours to implement, a design doc can still be useful.&lt;/p&gt;

&lt;p&gt;However, the design doc for a large project versus a small feature will obviously vary quite a bit in length. A design doc for a small feature can essentially be pseudocode, which is fine if that achieves the purpose of the document. The main thing is that the design doc has a purpose, problem to solve, and a solution. There are common parts to a design doc that can be used as a template, which we’ll go into detail below, but not all of them have to be included in every single design doc.&lt;/p&gt;

&lt;p&gt;Design docs usually aren’t needed for very small features or technical problems with very obvious solutions that require little time to implement. This is a bit subjective, but if a design doc won’t actually save you much time and the benefits of writing it aren’t clear, you probably don’t need to write one.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T70BhN0f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/texuagkoyis2u5zqoesy.gif" alt="Image description" width="485" height="388"&gt;&lt;em&gt;Typing up documentation (Source: Giphy)&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#mages-tech-design-doc-template"&gt;
  &lt;/a&gt;
  Mage’s tech design doc template
&lt;/h2&gt;

&lt;p&gt;The sections below each pertain to a section of the design doc template that Mage team members start with when creating a new design doc.&lt;/p&gt;

&lt;p&gt;At the top of the document, you should include the author’s name and the date the document was created or last modified. At Mage, a design doc is often written for one or multiple epics in Airtable, so including a link to the Airtable epic is helpful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#purpose"&gt;
  &lt;/a&gt;
  Purpose
&lt;/h3&gt;

&lt;p&gt;The purpose describes what the service or feature does. Try to keep this to one sentence.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h3&gt;

&lt;p&gt;Why do you need this feature? What problem are you trying to solve? What is the context for another team member reading this document?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h3&gt;

&lt;p&gt;What are the outcomes this service or feature must exhibit? These could be metrics like response time or characteristics of a component built on the frontend (e.g. responsive to various mobile device sizes). You can include user stories here to describe requirements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#detailed-design"&gt;
  &lt;/a&gt;
  Detailed design
&lt;/h3&gt;

&lt;p&gt;This is the longest part of the design doc and requires the most research, planning, and preparation. This is your engineering approach to solving the technical problem.&lt;/p&gt;

&lt;p&gt;It can include pseudocode, database schemas, flow diagrams, wireframes, components, input validation, security considerations, API endpoints, sample API requests/responses, and countless other things.&lt;/p&gt;

&lt;p&gt;You can also mention alternative approaches to solving the problem and the tradeoffs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementation-plan"&gt;
  &lt;/a&gt;
  Implementation plan
&lt;/h3&gt;

&lt;p&gt;There might be some overlap between the detailed design and the implementation plan, but this section includes the actionable items (i.e. epics and tasks) required to complete and ship the service/feature.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tests"&gt;
  &lt;/a&gt;
  Tests
&lt;/h3&gt;

&lt;p&gt;What tests will you write? How will you ensure this service/feature works? How will you know when this service/feature stops working?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#runbook"&gt;
  &lt;/a&gt;
  Runbook
&lt;/h3&gt;

&lt;p&gt;How do you launch this service/feature? How will you monitor it? How does someone else troubleshoot it?&lt;/p&gt;

</description>
      <category>technicaldesigndocs</category>
      <category>techspecs</category>
      <category>techdesigndocs</category>
      <category>mageai</category>
    </item>
    <item>
      <title>Day 4 of #100daysofcode: CSS and Client vs. Server</title>
      <author>Ryan Whelchel</author>
      <pubDate>Tue, 09 Nov 2021 23:18:28 +0000</pubDate>
      <link>https://dev.to/rydwhelchel/day-4-of-100daysofcode-css-and-client-vs-server-1jj</link>
      <guid>https://dev.to/rydwhelchel/day-4-of-100daysofcode-css-and-client-vs-server-1jj</guid>
      <description>&lt;p&gt;My free time on Tuesdays is usually incredibly low, so this update (along with future Tuesday updates) will be fairly short. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#client-vs-server"&gt;
  &lt;/a&gt;
  Client vs. Server
&lt;/h2&gt;

&lt;p&gt;To quickly preface the below, the part of the project in question simply displays a "time until" a given date and time.&lt;/p&gt;

&lt;p&gt;I've been thinking about where to handle some computation. I have been back and forth on whether to use client or to use server. The calculation for this project is very simple; just turning a date string into a different format before displaying it to the user. No problem to let the client deal with this, right?&lt;/p&gt;

&lt;p&gt;My question arises though because this computation is done in two instances right now. The first is when the user loads the page, a list of these times appear, and all of them are calculated by the client. The second instance is when the user saves a new event, the client immediately turns around and calculates this time remaining and displays it to the user as well.&lt;/p&gt;

&lt;p&gt;In both instances, the client is receiving data from the server and then modifying it before displaying it. It feels wasteful, perhaps it would be better handled by the server before the data is sent? Is that still the case when saving a new event? Because in that case, you have to send an event to the server and then receive it back from the server before displaying it. Surely then it would be better off handling it on client side instead of getting a new request.&lt;/p&gt;

&lt;p&gt;There is a benefit to requesting from the server on save however, as we can use that to refresh the times of all the other events on screen.&lt;/p&gt;

&lt;p&gt;Is the best answer just to preprocess data before its sent up to the client, but when saving a new event the client then handles calculating that time until?&lt;/p&gt;

&lt;p&gt;In reality, the scope of this problem is small enough such that it probably doesn't matter, but its interesting to think about how problems like this scale.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;Today I practiced with CSS flex-boxes and grids. I also spent quite a bit of time checking out some other CSS resources, such as Tailwind, Material UI and Animista. I'm not sure if I plan on using any of their stuff at the time, but its cool to see what else is available.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tomorrow"&gt;
  &lt;/a&gt;
  Tomorrow
&lt;/h2&gt;

&lt;p&gt;Tomorrow I will be finally getting around to polishing the layout of my project. After playing around with flex-box and grid, I'm pretty confident I will be able to get to an approximation of what I want the project's layout to look like. Now I just need to draw out what I want it to look like..&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-im-struggling-on"&gt;
  &lt;/a&gt;
  What I'm Struggling on
&lt;/h2&gt;

&lt;p&gt;Today I got a look at a friends site that he created as a part of a project for a different class. As they say, comparison is the thief of joy and I have to say that I'm a little awestruck at the progress he's made. Thumbing through his site, I had trouble even seeing how some of the parts would fit together. I think that's probably where a lot of my struggle comes from. It doesn't seem intuitive how some elements fit together. CSS has a much more driving role on layout than I initially realized. CSS isn't just style, its the &lt;em&gt;layout&lt;/em&gt; its the &lt;em&gt;feel&lt;/em&gt;. I thought most of that would be handled in React, but it seems like more and more things I'm learning about is getting lifted out of React and back onto CSS's shoulders. &lt;/p&gt;

&lt;p&gt;Back to the books.&lt;/p&gt;

&lt;p&gt;Thanks for reading! As usual, if you have any suggestions, I'd love to hear them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://tailwindcss.com/"&gt;Tailwind&lt;/a&gt;&lt;br&gt;
&lt;a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/"&gt;CSS Tricks - A guide to Flexbox&lt;/a&gt;&lt;br&gt;
&lt;a href="https://frontend30.com/css-selectors-cheatsheet/"&gt;Frontend30 - CSS Selectors Cheatsheet&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>python</category>
      <category>react</category>
      <category>beginners</category>
    </item>
    <item>
      <title>5 things I don't want to see on your resume as a hiring manager</title>
      <author>Jennifer Wadella</author>
      <pubDate>Tue, 09 Nov 2021 23:01:33 +0000</pubDate>
      <link>https://dev.to/likeomgitsfeday/5-things-i-dont-want-to-see-on-your-resume-as-a-hiring-manager-7m0</link>
      <guid>https://dev.to/likeomgitsfeday/5-things-i-dont-want-to-see-on-your-resume-as-a-hiring-manager-7m0</guid>
      <description>&lt;p&gt;As a Director of Angular Development at a consulting company, I review a lot of resumes. And because a lot of my clients are desperately hiring and need my expertise, I review a lot MORE resumes. I see a lot of things that I consider "red flags" on resumes of engineers with "6+ years of experience" that make me think they really don't know what they're doing. So here are 5 things that will make me chuck a resume into the reject pile almost immediately. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-experienced-in-using-text-editors-like-espresso-eclipse-text-wrangler-sublime-text-atom-netbeans-xampp-notepad-and-notepad"&gt;
  &lt;/a&gt;
  1. "Experienced in using Text editors like Espresso, eclipse, Text Wrangler, Sublime Text, Atom, NetBeans, XAMPP, Notepad and Notepad++."
&lt;/h2&gt;

&lt;p&gt;Hun, you're a software dev. I really hope you know how to use an editor. I also hope you're very opinionated on the editor you prefer; it tells me a lot about your experience and ability to produce code if you're picky about your tooling. Unless you prefer Dreamweaver, in which case I might only trust you to update my myspace page. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-acronym-abuse"&gt;
  &lt;/a&gt;
  2. Acronym Abuse
&lt;/h2&gt;

&lt;p&gt;There are reasonable, well-used acronyms that are in a developers vocabulary, like CSS, and then there are weird things that NO one says, like "Responsive Web Design (RWD)". If you have a bunch of acronyms that aren't ever used or are made up, I'm going to bin a resume for that. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-implemented-a-service-to-make-api-calls-aka-i-implemented-the-thing-the-way-it-was-supposed-to-be-implemented"&gt;
  &lt;/a&gt;
  3. "Implemented a Service to Make API calls" aka "I implemented the thing the way it was supposed to be implemented"
&lt;/h2&gt;

&lt;p&gt;In Angularland, we love our Service classes. And I'm going to guess with no actual statistical data that making API calls is the most predominant use-case for people writing Services. Don't tell me in a bullet point "I used x thing the way it was intended to be used", because that's the bare minimum. Also, if you're going to insist on a bullet point like that, make sure it's technically accurate. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;"Implemented HTTP requests using RxJS Observable library to handle multiple values over time."&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Phrases like this make me 🧐 &lt;/p&gt;

&lt;p&gt;Tell me instead how you refactored a Service to handle a new feature request or improved performance. &lt;/p&gt;

&lt;p&gt;And a shoutout to one of my favorite resume rejection "I did the thing" bullet points ...&lt;/p&gt;

&lt;p&gt;&lt;code&gt;"Used Es6 arrow functions to map the Json data"&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-buzzword-lumping-created-typescript-reusable-components-and-services-to-consume-rest-apis-using-componentbased-architecture-provided-by-angular-2"&gt;
  &lt;/a&gt;
  4. Buzzword lumping - "Created Typescript reusable components and services to consume REST API's using Component-based architecture provided by Angular 2."
&lt;/h2&gt;

&lt;p&gt;There are so many things wrong with this bullet point I don't even want to finish reading this resume, let alone interview this candidate. TypeScript doesn't have components, components are typically a construct of frameworks like Angular or React. If you're going to apply for a role regarding a Framework know whats a feature of the framework, and what's a feature of a language, and make sure &lt;em&gt;I know&lt;/em&gt; you know from your resume. Also, I reaaaaally hope you're always thinking about whether a component should be reusable or not, it's a pretty core part of what front-end engineers do now, so this isn't the flash of brilliance you may think it is. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-bad-grammar"&gt;
  &lt;/a&gt;
  5. Bad Grammar
&lt;/h2&gt;

&lt;p&gt;I'm already assuming half the resumes that hit my inbox are copy-paste grabs written by catfishers, so don't end up in the reject pile by making grammar mistakes. If you're going to make a bulleted list of what you did on a project, make sure the tenses match. &lt;/p&gt;

&lt;p&gt;Bad: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Worked with NPM commands and using Package.json for managing dependencies and dev-dependencies of Node.js applications.&lt;/li&gt;
&lt;li&gt;Extensively involved in upgrading the existing system from Angular 7 to Angular 8.&lt;/li&gt;
&lt;li&gt;Responsible to work with 3-tiers UI, Business Layer and Data Access Layer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Good:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Worked with NPM commands and using Package.json for managing dependencies and dev-dependencies of Node.js applications.&lt;/li&gt;
&lt;li&gt;Was extensively involved in upgrading the existing system from Angular 7 to Angular 8.&lt;/li&gt;
&lt;li&gt;Was responsible for working with 3-tiers UI, Business Layer and Data Access Layer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;I'd like to make a note that as a manager, I'm currently heavily leaning towards preferring to hire excited junior devs looking for their first shot, vs. a "mid-level" engineer that has likely bounced from company to company without ever having written actually quality code, or invested in growing their own skillsets. Tell me about your projects, how they provided value to an end user, and how you used tech to help deliver that value. Or if you're playing buzzword bingo to get past a first line of recruiters, slip me an easter egg in there to let me know like &lt;code&gt;"proficient in vanillaJS"&lt;/code&gt; or &lt;code&gt;"implemented comcastifyjs"&lt;/code&gt;. ;)&lt;/p&gt;

</description>
      <category>hiring</category>
      <category>angular</category>
      <category>jobs</category>
    </item>
    <item>
      <title>CRUD Operations in React and Redux Toolkit with a Node.js Backend | Video Tutorial</title>
      <author>Chaoo Charles</author>
      <pubDate>Tue, 09 Nov 2021 22:36:07 +0000</pubDate>
      <link>https://dev.to/chaoocharles/crud-operations-in-react-and-redux-toolkit-with-a-nodejs-backend-video-tutorial-5apg</link>
      <guid>https://dev.to/chaoocharles/crud-operations-in-react-and-redux-toolkit-with-a-nodejs-backend-video-tutorial-5apg</guid>
      <description>&lt;p&gt;In the following 2 hours tutorial, you will learn how to perform CRUD requests using Redux Toolkit (Now the modern way of working with redux).&lt;/p&gt;

&lt;p&gt;If you enjoy the content like the video and remember to subscribe to my YouTube channel for more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#crud-in-redux-toolkit"&gt;
  &lt;/a&gt;
  CRUD in Redux Toolkit 👇
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ypA9GUJ1AMY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>redux</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Principles of the 1x programmer</title>
      <author>Tim McNamara</author>
      <pubDate>Tue, 09 Nov 2021 22:31:36 +0000</pubDate>
      <link>https://dev.to/timclicks/principles-of-the-1x-programmer-3hdk</link>
      <guid>https://dev.to/timclicks/principles-of-the-1x-programmer-3hdk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#software-is-a-team-sport"&gt;
  &lt;/a&gt;
  Software is a team sport
&lt;/h2&gt;

&lt;p&gt;Even if you’re coding for yourself, you’re still coding for a team. Your future self will not have the same cognitive context that you do currently. Therefore, you should always code in a way that respects the people who are following you.&lt;/p&gt;

&lt;p&gt;One of the best introductions to this type of socially minded programming is called &lt;a href="https://buildtogether.tech/"&gt;Building Software Together&lt;/a&gt; (freely licensed under CC-BY-NC 4.0) by Greg Wilson and contributors.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Our aim is to teach you how to be a compassionate programmer: one who cares as much about the well-being of their colleagues and users as they do about their own. This focus is not entirely altruistic—everything you do to help others also helps your future self—but now that we all know how much harm software can do, we hope you’ll be interested in some practical idealism.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#learn-through-mimicry"&gt;
  &lt;/a&gt;
  Learn through mimicry
&lt;/h2&gt;

&lt;p&gt;Find the best software written in your programming language of choice. Usually, the language’s standard library is a good place to start. Look for patterns. Try to consider how you would implement things.&lt;/p&gt;

&lt;p&gt;Small children learn by copying others. Why shouldn’t adults?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#being-a-computer-scientist-is-less-useful-than-you-might-think"&gt;
  &lt;/a&gt;
  Being a computer scientist is less useful than you might think**
&lt;/h2&gt;

&lt;p&gt;​​Synthesis is essence of software engineering, whereas abstraction is the essence of computer science. Your job as a software developer will be to synthesise something new from composable pieces. What you create should be simple to understand and extend.&lt;/p&gt;

&lt;p&gt;You are unlikely to implement sophisticated data structures and algorithms.&lt;/p&gt;

&lt;p&gt;I don’t agree with everything that pg writes, but &lt;a href="http://paulgraham.com/weird.html"&gt;this struck out&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;99.5% of programming consists of gluing together calls to library functions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-time-to-fix-things-is-now"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The time to fix things is now&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Your team isn’t going to have fewer priorities next week or next month. There will not be an opportunity to the wholesale rewrite that the code base deserves. The only way to improve a code base is incrementally.&lt;/p&gt;

&lt;p&gt;I learned this through John Ousterhout’s book, &lt;em&gt;A Philosophy of Software Design&lt;/em&gt;. The overall suggestion that I took away from the book is that if your team is struggling with a spaghetti code base, its members should be investing about 10-20% of their total development time cleaning it up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#youre-paid-to-build"&gt;
  &lt;/a&gt;
  You’re paid to build
&lt;/h2&gt;

&lt;p&gt;If you think that you’re employed to write software, then you’ve not thought hard enough.&lt;/p&gt;

&lt;p&gt;You’re employed to make money – or save money – for someone. And the way to do that is probably through programming.&lt;/p&gt;

&lt;p&gt;The phrase is terrible, but it’s worth repeating anyway. Make sure that you “add value”.&lt;/p&gt;

&lt;p&gt;This matters because sometimes – perhaps often – working on the boring thing that no one wants to work on is really the thing that you should be doing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simplicity-really-helps"&gt;
  &lt;/a&gt;
  Simplicity really helps
&lt;/h2&gt;

&lt;p&gt;We all want to write simple software, as hard as that is. Ideally, your code should be simple enough so that a junior programmer who doesn’t like you can understand it.&lt;/p&gt;

&lt;p&gt;Ironically, simple code probably has a shorter lifespan than complex code. Complex and difficult code remains fixed because people are afraid to change it. Complex code is very hard to test. And without regression tests, we don’t know if we’ve broken behaviour. So it becomes brittle.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-beats-algorithm"&gt;
  &lt;/a&gt;
  API beats algorithm
&lt;/h2&gt;

&lt;p&gt;Syntax matters. One of the lessons from the success of Kenneth Reith’s &lt;code&gt;requests&lt;/code&gt; package — which completely took over from the standard library’s own implementation of making web requests — is that the (public) API is more important than every millisecond that you save from implementing the perfect algorithm. Users care about convenience. Convenient code is easy to write, easy to read and easy to maintain.However, it’s also understand what comprises your &lt;a href="https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain"&gt;“Porcelain API” and your “Plumbing API”&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-people-make-mistakes"&gt;
  &lt;/a&gt;
  Other people make mistakes
&lt;/h2&gt;

&lt;p&gt;The majority of us are better drivers than average. I’m sure the same is true for programming.Brains are imperfect.&lt;/p&gt;

&lt;p&gt;It’s impossible for you to assess your own skill level.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-you-want-adoption-software-is-just-the-start"&gt;
  &lt;/a&gt;
  If you want adoption, software is just the start
&lt;/h2&gt;

&lt;p&gt;If you care about adoption, there’s lots of work to do once the code has been written. That is, unless you’re Fabrice Bellard, I guess.&lt;/p&gt;

&lt;p&gt;This, to me, is the ultimate reason why being a 1x programmer (even in a professional setting) can be sufficient. You might be able to contribute to other areas that someone who is focused purely on the code is not able (or, more commonly, unwilling) to do. 10x programmers care about the code. Everything else is secondary.&lt;/p&gt;

&lt;p&gt;Users care about themselves. To them, they need to be the primary priority. This rift causes a problem when open source maintainers decide that their users are indeed secondary. But that might be the theme of a future post.&lt;/p&gt;




&lt;p&gt;Let me know what you agree with. Hopefully it isn't everything!&lt;/p&gt;

</description>
      <category>1x</category>
      <category>career</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
