<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What is Open Source and how to get started?</title>
      <author>Avneesh Agarwal</author>
      <pubDate>Mon, 20 Sep 2021 05:47:17 +0000</pubDate>
      <link>https://dev.to/byteslash/what-is-open-source-and-how-to-get-started-3iia</link>
      <guid>https://dev.to/byteslash/what-is-open-source-and-how-to-get-started-3iia</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-open-source"&gt;
  &lt;/a&gt;
  What is Open Source?
&lt;/h3&gt;

&lt;p&gt;Open source is a commonly used term for the code which is publically accessible and people can see, edit, and share the data. In open-source projects, developers from all around the world can contribute to the project and make it better.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benefits-of-open-source"&gt;
  &lt;/a&gt;
  Benefits of Open Source
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Lower cost&lt;/li&gt;
&lt;li&gt;Higher quality software and code&lt;/li&gt;
&lt;li&gt;Secure as code is public&lt;/li&gt;
&lt;li&gt;Flexible&lt;/li&gt;
&lt;li&gt;Faster development &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons-of-open-source"&gt;
  &lt;/a&gt;
  Cons of Open Source
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Needs maintenance&lt;/li&gt;
&lt;li&gt;Hidden costs&lt;/li&gt;
&lt;li&gt;Support&lt;/li&gt;
&lt;li&gt;User friendly&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#getting-started-with-open-source-as-a-maintainer"&gt;
  &lt;/a&gt;
  Getting started with open source as a maintainer
&lt;/h4&gt;

&lt;p&gt;To get started with open source as a maintainer, you need to do the following steps&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build a project&lt;/li&gt;
&lt;li&gt;Add it as a public repo to GitHub, GitLab, or BitBucket.&lt;/li&gt;
&lt;li&gt;Add some docs on what it is and how to contribute&lt;/li&gt;
&lt;li&gt;Add a license to your repo&lt;/li&gt;
&lt;li&gt;Add some issues in the issues section (if you have any)&lt;/li&gt;
&lt;li&gt;Let everyone know about it (if no one knows about it then no one will be able to contribute :P)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#getting-started-as-a-contributor"&gt;
  &lt;/a&gt;
  Getting started as a contributor
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Find a repo you want to contribute to&lt;/li&gt;
&lt;li&gt;Add the features or bug fixes&lt;/li&gt;
&lt;li&gt;Make a pull request&lt;/li&gt;
&lt;li&gt;Wait for your code to be merged&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main trouble for every beginner while starting to contribute is finding repositories.&lt;br&gt;
So here are some useful articles-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://blog.greenroots.info/8-resources-to-start-with-opensource-immediately"&gt;8 resources to start with opensource immediately&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://catalins.tech/find-open-source-projects-to-contribute-as-a-beginner"&gt;Find Open Source Projects To Contribute As A Beginner&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://vinitshahdeo.dev/beginner-friendly-issues-for-hacktoberfest-2021"&gt;A curated list of beginner-friendly issues for Hacktoberfest 2021&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you were ever thinking of contributing to open source, now is the perfect time to start üòâ&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://opensource.org/"&gt;Open Source Initiative&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://avneesh-links.vercel.app/"&gt;All socials&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>opensource</category>
      <category>git</category>
      <category>gitlab</category>
    </item>
    <item>
      <title>Array.map() Method in JavaScript üöÄ</title>
      <author>Shubham Jadhav</author>
      <pubDate>Mon, 20 Sep 2021 05:43:21 +0000</pubDate>
      <link>https://dev.to/dev_shubham/array-map-method-in-javascript-2fi</link>
      <guid>https://dev.to/dev_shubham/array-map-method-in-javascript-2fi</guid>
      <description>&lt;p&gt;Hello, guys today we are covering one of the most important topic.&lt;br&gt;
 Today we are learning map() method, so let's start today's article. &lt;/p&gt;

&lt;p&gt;üëâ Article Content&lt;br&gt;
‚Ä¢ What is Array.map() method ?&lt;br&gt;
‚Ä¢ Syntax of Array.map() method ?&lt;br&gt;
‚Ä¢ Use of Array.map() method ? &lt;br&gt;
‚Ä¢ Example of Array.map() method ?&lt;br&gt;
‚Ä¢ Explanation of example&lt;/p&gt;

&lt;p&gt;üëâ What is Array.map() method ? &lt;br&gt;
=&amp;gt; The map() method is used for array transformation. It takes another custom function as an argument and on each array item applies that function.&lt;/p&gt;

&lt;p&gt;üëâ Syntax of Array.map() method ? &lt;br&gt;
=&amp;gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qeYHpXSk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6q2xsuvzs1krsfhscqko.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qeYHpXSk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6q2xsuvzs1krsfhscqko.jpg" alt="syntax "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üëâ Use of Array.map() method ?&lt;br&gt;
=&amp;gt; Map() method used to iterate over an all array item one by one and apply function on each array items. &lt;/p&gt;

&lt;p&gt;üëâ Example of Array.map() method &lt;br&gt;
=&amp;gt; See following image &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BcYqvgBS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kaafkhqh861uc06l309t.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BcYqvgBS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kaafkhqh861uc06l309t.jpg" alt="Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üëâ Explanation &lt;br&gt;
=&amp;gt; As shown above image we need an array with some values. That's why I am created an array and it's name is 'arr' and stored [1,2,3,4,5] this values. &lt;/p&gt;

&lt;p&gt;Now I am using map() method to increase every array item by one. &lt;/p&gt;

&lt;p&gt;I used map() method and pass a function and this function takes one argument and this argument hold all the array items. &lt;/p&gt;

&lt;p&gt;When this method call all array items iterate one by one and apply function. When array item '1' is pass through a map() method it's simply increment by 1.&lt;/p&gt;

&lt;p&gt;üëâ Map() method take a function which will be arrows function or normal Js function. &lt;/p&gt;

&lt;p&gt;üëâ This method works like a loop and it's similar to for and forEach. &lt;/p&gt;

&lt;p&gt;üôè Thank you for reading.... &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>#6 Best  Ways to Host Your React JS App For Free..üíØ</title>
      <author>Deepak Gupta</author>
      <pubDate>Mon, 20 Sep 2021 05:35:43 +0000</pubDate>
      <link>https://dev.to/deepakguptacoder/6-best-ways-to-host-your-react-js-app-for-free-50mp</link>
      <guid>https://dev.to/deepakguptacoder/6-best-ways-to-host-your-react-js-app-for-free-50mp</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;I will tell you the best ways to host your React JS application.&lt;br&gt;
Follow the point :&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#netlify"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JuEkAjIR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5hcajmf2qer1k2npzo29.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JuEkAjIR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5hcajmf2qer1k2npzo29.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Netlify is an incredibly rapid solution to assure that websites and apps are considerably more performant, scalable, and secure.. Netlify is a fantastic web development tool that is designed to help you increase your productivity as much as possible.It's the one I utilize for the majority of my projects.Developers can use the platform to create, test, and deploy websites. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vercel"&gt;
  &lt;/a&gt;
  &lt;a href="https://vercel.com/docs/next.js/image-optimization"&gt;Vercel&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t6gsHSg4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cimzqiyslqlwkl30t5hk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t6gsHSg4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cimzqiyslqlwkl30t5hk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Vercel is a static site and frontend framework platform designed to interact with headless content, commerce, and databases.&lt;br&gt;
Every Vercel personal account is a hobby account.Hobby accounts are free for life and can only be used for personal, non-commercial purposes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#heroku"&gt;
  &lt;/a&gt;
  &lt;a href="https://elements.heroku.com/addons/cloudinary"&gt;Heroku&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tm9SkEvg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jk00f8bwxu624cotu78x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tm9SkEvg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jk00f8bwxu624cotu78x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Heroku is so simple to use, it's a popular choice for many development projects.&lt;br&gt;
Heroku is a cloud service platform that has been increasingly popular in recent years.Because  It offers straightforward application creation and deployment, with a specific focus on customer-focused solutions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#firebase-hosting"&gt;
  &lt;/a&gt;
  &lt;a href="https://firebase.google.com/products/hosting?gclsrc=aw.ds&amp;amp;gclid=Cj0KCQjwv5uKBhD6ARIsAGv9a-x_gGnANGY_DUoeUdA2Yn_pbl-Q5imBWZpNe-BGZTPRNRVDpaBAi-caAiy2EALw_wcB"&gt;Firebase Hosting&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zW1RZSSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qo1nc2h3gccrejsq24wz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zW1RZSSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qo1nc2h3gccrejsq24wz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Firebase is a Google product that provides completely managed hosting for static and dynamic content, as well as microservices. SSD storage and a worldwide CDN are used to support the service.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#surge"&gt;
  &lt;/a&gt;
  &lt;a href="https://razorhost.in/shared-hosting/?gclid=Cj0KCQjwv5uKBhD6ARIsAGv9a-xrnqnpQKmAIIgs5knRvy9vI2_B0wcdJAKqb7r2bwK6rAH49IwLXpwaAiFWEALw_wcB"&gt;Surge&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TBDiKd2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxz13xms5t8fvb0vdqty.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TBDiKd2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxz13xms5t8fvb0vdqty.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Their free tier allows for unlimited publishing, bespoke domains, and basic SSL, with more options available through their professional plan.Surge is a cloud platform for hosting static websites that is relatively easy to use while also providing customization possibilities for those that require them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-pages"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/"&gt;GitHub Pages&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dG2Zj5Lq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czhd4hg2f9p369kuumgd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dG2Zj5Lq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czhd4hg2f9p369kuumgd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
GitHub Pages is one of the quickest and most extensively utilized techniques for deploying websites. It's easy to maintain than many of the other tools mentioned in this article. You may use GitHub actions to automate deployments, configure CI/CD, and much more.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;I hope you found this article useful, if you need any help please let me know in the comment section.&lt;/p&gt;

&lt;p&gt;Thanks for reading, See you next time.&lt;/p&gt;

</description>
      <category>react</category>
      <category>android</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Which CSS framework should you use?</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Mon, 20 Sep 2021 05:00:56 +0000</pubDate>
      <link>https://dev.to/abhirajb/which-css-framework-should-you-use-2ea7</link>
      <guid>https://dev.to/abhirajb/which-css-framework-should-you-use-2ea7</guid>
      <description>&lt;p&gt;Responsive CSS frameworks take a lot of work and persistence to build and create when building CSS on HTML responsiveness, accessibility, and structure. This is why CSS frameworks were created, to take the stress off of you!&lt;/p&gt;

&lt;p&gt;A CSS framework is a software framework created to allow for easier, more standards-compliant web design using HTML/CSS. Many popular CSS frameworks are design-oriented and contain elements that can be re-used in the creation of any website or app, as well as a grid system designed to provide a responsive CSS layout to webpages.&lt;/p&gt;

&lt;p&gt;All the frameworks listed in this article are free and open source.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-bootstrap"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Without a doubt, Bootstrap is the most widely used free and open source CSS framework. Created in 2011 by developers Mark Otto and Jacob Thornton, Bootstrap is now used by millions of websites.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tyt7O8qB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5poa6t34yby6duk3j6jq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tyt7O8qB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5poa6t34yby6duk3j6jq.png" alt="bootstrap"&gt;&lt;/a&gt;&lt;br&gt;
Bootstrap features Sass variables and mixins, a responsive grid system, extensive prebuilt components for building layouts, and powerful plugins built on jQuery.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-tailwind"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://tailwindcss.com/"&gt;Tailwind&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Tailwind is a relatively new CSS framework, designed to be different from its competitors. Instead of predesigned components, Tailwind provides low-level utility classes that let you build your own designs. I personally have used Tailwind in my projects and loved it so far. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b3f4nWZP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nt3hkvn4r9kxdpzlvd0b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b3f4nWZP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nt3hkvn4r9kxdpzlvd0b.png" alt="tailwind"&gt;&lt;/a&gt;&lt;br&gt;
Let‚Äôs have a quick look to some HTML used with Tailwind:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-blue hover:bg-blue-dark text-white font-bold py-2 px-4 rounded"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Button
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the example is using many utility classes on a button element. Those classes allow you to finely style any element: We can easily spot classes named text-white, font-bold and rounded, defining the visual aspect of the button.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-bulma"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://bulma.io/"&gt;Bulma&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;With 21kB minified and gzipped, Bulma isn‚Äôt the most lightweight of this list, but this open source CSS framework is so interesting that it totally deserves a mention. Bulma is built with a mobile-first approach, which makes every element optimized for vertical reading, and its grid system is fully built with Flexbox.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ew8UExze--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5d8q63wyepr0ovnofnmg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ew8UExze--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5d8q63wyepr0ovnofnmg.png" alt="bulma"&gt;&lt;/a&gt;&lt;br&gt;
Achieving flexible layout with same-size columns is as simple as adding a .column class to any of your HTML elements.&lt;/p&gt;

&lt;p&gt;Bulma is also built with Sass, which allows you to only use the features you really need in your web development tasks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-ui-kit"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://getuikit.com/"&gt;UI Kit&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;UIkit is a lightweight and responsive CSS framework for developing fast and powerful web interfaces.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BjTUxwIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iz9rjfg2iswrcp9gywbd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BjTUxwIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iz9rjfg2iswrcp9gywbd.png" alt="uikit"&gt;&lt;/a&gt;&lt;br&gt;
Consisting of compiled CSS and JavaScript, UIKit is easy to use and provides all the needed tools for modern web design: Grid, custom icons, components, animations, and a lot more. UIKit is compatible with Less and Sass.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-semantic-ui"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://semantic-ui.com/"&gt;Semantic UI&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This framework stands out in many ways. It has become popular over a short period of time because of its simplicity.  Semantic UI is well customized and IT doesn‚Äôt take much to comprehend. It is also easy to learn. This framework is lightweight and beginner-friendly&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iuPMM6og--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dnxdwbesj2ih717heeqj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iuPMM6og--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dnxdwbesj2ih717heeqj.png" alt="semantic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-spectre"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://picturepan2.github.io/spectre/"&gt;Spectre&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;A lightweight (~10KB gzipped) starting point for your projects, Spectre provides elegantly designed elements, as well as a flexbox-based, responsive and mobile-friendly layout.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ohGyyiio--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5lgb75qc2zz5aznh6lbw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ohGyyiio--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5lgb75qc2zz5aznh6lbw.png" alt="spectre"&gt;&lt;/a&gt;&lt;br&gt;
Much smaller in size and features than fully-featured frameworks like Bootstrap, Spectre is a great choice for single-page websites and small web applications&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;All CSS frameworks bring different benefits and are useful in all projects as far development of the web is concerned and it requires CSS frameworks.it is advisable to select any CSS framework of your choice that can help you in your project considering your skill level and requirement of the project you are doing. This list contains all the frameworks I have used personally. If I have missed out on some great picks, feel free to comment to let everyone and me know about it.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Some of New ES12(ES2021) JavaScript Features.</title>
      <author>EswaraPrakash Vaithiyanathan</author>
      <pubDate>Mon, 20 Sep 2021 03:21:15 +0000</pubDate>
      <link>https://dev.to/eswaraprakash/some-of-new-es12-es2021-javascript-features-3pmo</link>
      <guid>https://dev.to/eswaraprakash/some-of-new-es12-es2021-javascript-features-3pmo</guid>
      <description>&lt;p&gt;&lt;strong&gt;Changes released in ES2021&lt;/strong&gt;&lt;br&gt;
The changes released in ES2021 are as follows.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;String.prototype.replaceAll()&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Perform string replacement for all applicable parts&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Existing replace()methods are valid only for the first part to be replaced, so if you wanted to replace everything you had to use a regular expression&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With this method, you can prevent replacement omissions due to regular expression mistakes, and it is easy to understand what you want to do at a glance.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let str = "I like programming. I like my job."
str.replaceAll ( "like" , "love" ) 
// Output result: "I love programming. I love my job." 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;It is not yet supported by TypeScript by default, but you can  use it by changing the setting in tsconfig.json as follows. (Other changes to ES2021 will also be available)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{ "compilerOptions" : { "lib" : [ "ES2021" ],    }, }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Promise.any()&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When any one of the promises running at the same time is processed resolved, that promise will be returned.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If all promises are reject, then AggregateError(the type when one operation needs to return multiple errors) is returned.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you want to know that the process was successful but you don't need to know which one, using any seems to be useful.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is also not yet supported by default in TypeScript. tsconfig.json It can be used by changing the settings as described above .&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Promise .any ([ new Promise ( ( resolve, reject ) =&amp;gt; 
setTimeout (reject, 100 , '1st' )), 
new Promise (( resolve, reject ) =&amp;gt; setTimeout (resolve, 200, '2nd')) ]) 
.then ( value =&amp;gt; console .log ( `first completed process: $ {value} `)) 
.catch (err =&amp;gt; console .log (err))
// Output result 
// First completed process: 2nd 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;WeakRefs&lt;/strong&gt;&lt;br&gt;
Makes the following feasible:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Creating a "weak reference" to an object&lt;br&gt;
User-defined finalizer execution after objects are garbage collected.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A "weak reference" is a reference to an object that does not interfere with the execution of garbage collection.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Normally, when an object is created, it is kept in memory (a "strong reference"), but a "weak reference" is subject to garbage collection collection when memory needs to be freed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you use these two well, you can prevent memory leaks of data that is no longer referenced, such as deleted objects.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;However, the functionality of garbage collection is complex (when and how garbage collection occurs depends on the implementation of the JavaScript engine you are using ) and should be carefully considered for proper use. Officially, there is a note that it is better to avoid using it if possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It wasn't mentioned in the official TypeScript documentation, but according to this issue , it's available in version 4.1 and later.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I tried to execute the following code in PlayGround, but it was certainly able to compile with 4.1 or later version.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const obj = new  Map (); 
const cache = new WeakRef (obj); 
// Output result 
// v4.0.5 
// Cannot find name'WeakRef'. 
// v4.1.5 
// None
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Logical Assignment Operators&lt;/strong&gt;&lt;br&gt;
You will be able to write as follows&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;No extra branching is required when entering the initial value, and the implementation is refreshing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Available from version 4.0 on TypeScript&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// a || (a = b);
 a || = b;

// a &amp;amp;&amp;amp; (a = b);
 a &amp;amp;&amp;amp; = b;

// a ?? (a = b);
 a ?? = b;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Numeric separators&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;_Can be inserted between the numbers. (Even if you enter it, it will be recognized as a numerical value)&lt;/li&gt;
&lt;li&gt;This is possible with all numeric literals, not just decimal numbers. This makes the numbers easier to read&lt;/li&gt;
&lt;li&gt;Available from version 2.7 in TypeScript.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1_000_000_000            // 1.0101_475_938.38 // 
1.01           million, decimal point can also be used
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>es12</category>
      <category>es2021</category>
      <category>ecmascript</category>
    </item>
    <item>
      <title>Things I Wish I Knew Before My First Full-Time Job.</title>
      <author>Ankur Tyagi</author>
      <pubDate>Mon, 20 Sep 2021 02:54:01 +0000</pubDate>
      <link>https://dev.to/tyaga001/things-i-wish-i-knew-before-my-first-full-time-job-3878</link>
      <guid>https://dev.to/tyaga001/things-i-wish-i-knew-before-my-first-full-time-job-3878</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m9xxYaSk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632105105720/8y4MS-mQA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m9xxYaSk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632105105720/8y4MS-mQA.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#your-20s-could-be-your-most-defining-decade"&gt;
  &lt;/a&gt;
  Your 20s could be your most defining decade.
&lt;/h3&gt;

&lt;p&gt;You‚Äôll have more freedoms &amp;amp; more choices than you‚Äôve ever had in the past or will ever have in the future.&lt;/p&gt;

&lt;p&gt;It‚Äôs going to be a great adventure.&lt;/p&gt;

&lt;p&gt;The ‚Äúreal tech world‚Äù that everyone tries to scare you about is actually really awesome.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-you-know-here-are-things-i-wish-i-knew-before-my-first-fulltime-job"&gt;
  &lt;/a&gt;
  But you know, Here are things I wish I knew before my first full-time job.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Don‚Äôt be afraid to learn on the job.&lt;/li&gt;
&lt;li&gt;Don‚Äôt pretend to know more than you actually do&lt;/li&gt;
&lt;li&gt;You're responsible for your career, not your employer&lt;/li&gt;
&lt;li&gt;Everything is negotiable&lt;/li&gt;
&lt;li&gt;Live to work, but the right Way&lt;/li&gt;
&lt;li&gt;Working late is overrated&lt;/li&gt;
&lt;li&gt;The grass will always be greener&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#1-dont-be-afraid-to-learn-on-the-job"&gt;
  &lt;/a&gt;
  1. Don‚Äôt be afraid to learn on the job:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You‚Äôre not going to learn much if you just do what you‚Äôre assigned tasks in the office. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You also won‚Äôt move forward if you ask for more work and get grunt work. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Slow down and do things right and read up on the fundamentals.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-dont-pretend-to-know-more-than-you-actually-do"&gt;
  &lt;/a&gt;
  2. Don‚Äôt pretend to know more than you actually do:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you do this, the team will smell a rat very quickly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your co-workers will lose respect for you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don‚Äôt feel bad about asking questions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Nothing will sound too silly, in fact, your team will respect you more.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-youre-responsible-for-your-career-not-your-employer"&gt;
  &lt;/a&gt;
  3. You're responsible for your career, not your employer:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We spend most of our time at work But know that you're certainly not obligated to tell your employer that you're job hunting.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Respect your work-life balance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Never let your boss micromanage you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find a mentor&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-almost-everything-is-negotiable-in-life"&gt;
  &lt;/a&gt;
  4. (Almost) everything is negotiable in life:
&lt;/h2&gt;

&lt;p&gt;Maybe the 1st offer you receive is exactly in line with your desired path, but often that isn't the case. &lt;/p&gt;

&lt;p&gt;It's easy to assume when you are just starting out, you may not have much leverage when it comes to jobs offered.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The most dangerous negotiation is the one you don't know you're in.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Never let your salary control your career.&lt;/p&gt;

&lt;p&gt;You get in career what you have the courage to ask for.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-live-to-work-but-the-right-way"&gt;
  &lt;/a&gt;
  5. Live to work, but the right Way:
&lt;/h2&gt;

&lt;p&gt;"Should I work to live or live to work? "&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Work isn‚Äôt a curse, but a gift God gave us.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Work stands at the center of your life. &lt;br&gt;
You never feel like you have done enough work.&lt;/p&gt;

&lt;p&gt;Finding a balance is the key in long term.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-working-late-is-overrated"&gt;
  &lt;/a&gt;
  6. Working late is overrated:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Your job is about long-term value creation, not about how many hours you work today.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you‚Äôre overloaded, don‚Äôt be afraid to take something off your plate.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create an env where work can be done in a rewarding, satisfying, &amp;amp; productive way.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#7-the-grass-will-always-be-greener"&gt;
  &lt;/a&gt;
  7. The grass will always be greener:
&lt;/h2&gt;

&lt;p&gt;One of the biggest temptations you will face in your career is the  ‚û° ‚ÄúWhat‚Äôs next?‚Äù&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There will always be a better job out there.&lt;/li&gt;
&lt;li&gt;Some discomfort is part of every job.&lt;/li&gt;
&lt;li&gt;You learn to appreciate things that you have right now.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When I started my career, I was looking for a mentor for my career growth. &lt;/p&gt;

&lt;p&gt;Initial few years I didn't get a mentor &amp;amp; I struggled a lot. &lt;/p&gt;

&lt;p&gt;This was the pain but not now, I have shared all my experience with you to start in my book &amp;amp; grow like a champ dev.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FJzNkMHH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632105456570/IIzaHvFCp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FJzNkMHH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632105456570/IIzaHvFCp.png" alt="book.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Awesome feedback I received from the community. Check out the book below.&lt;/p&gt;

&lt;p&gt;Grab the book now‚Ä¶ &lt;a href="https://theankurtyagi.gumroad.com/l/nextgendev"&gt;ThePrimeGuide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;p&gt;If you‚Äôre a regular reader, thank you, you‚Äôre a big part of the reason I‚Äôve been able to share my life/career experiences with you.&lt;/p&gt;

&lt;p&gt;Connect with me on &lt;a href="https://twitter.com/TheAnkurTyagi"&gt;Twitter &lt;/a&gt; &lt;/p&gt;

</description>
      <category>career</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>To Comment or Not To Comment</title>
      <author>Robin</author>
      <pubDate>Mon, 20 Sep 2021 02:27:59 +0000</pubDate>
      <link>https://dev.to/bastianrob/to-comment-or-not-to-comment-55i3</link>
      <guid>https://dev.to/bastianrob/to-comment-or-not-to-comment-55i3</guid>
      <description>&lt;p&gt;Sometimes I feel like writing comment is a controversial topic in programming. Some will take the stance of:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Code is like humor. When you have to explain it, it‚Äôs bad.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of which, I don't 100% agree with.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#misinterpretation"&gt;
  &lt;/a&gt;
  Mis-interpretation
&lt;/h2&gt;

&lt;p&gt;Let's take a bit of a bad example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;applyDiscount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At a glance, the code is quite obvious: Apply discount to a number, pass on the rate and the function will return the final result.&lt;/p&gt;

&lt;p&gt;Two months goes by and somebody else wanted to use this function and at a glance they use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;finalPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;applyDiscount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;expecting the &lt;code&gt;finalPrice = 90&lt;/code&gt; but instead got &lt;code&gt;finalPrice = -900&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this case, there's an illusion where the code is already self-documenting and self explanatory, but interpretation of a word between each developer might be different! What &lt;code&gt;rate&lt;/code&gt; means for the original coder is the rate of discount after it is divided by 100. But the next coder who tried to use it interpreted it as a percentage number.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Naming things is always regarded as one of the hardest thing in programming. Mis-interpretation will always happen when glossary of words between developers are different.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#too-much-focus-on-what-but-not-why"&gt;
  &lt;/a&gt;
  Too Much Focus on What but not Why
&lt;/h2&gt;

&lt;p&gt;Consider this bad and exaggerated example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;applyDiscount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;submitOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Oder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setFinalPrice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;applyDiscount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subTotal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sure now the code is obvious, every order will be given 10% discount. But it's now missing an important context on:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why should every order be applied 10% discount?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Most of the time we can easily understand the code on what it does by tracing it line by line. But when things gets complicated, only focusing on what the code does loses the context where we need to know&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why the code is written as it is?&lt;br&gt;
Or, why there's a branching condition?&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#comment-your-intent"&gt;
  &lt;/a&gt;
  Comment your intent
&lt;/h2&gt;

&lt;p&gt;Most of the times, comment should never explain what the code does. But rather what the intention is.&lt;/p&gt;

&lt;p&gt;Let's again take a look of this simple example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doPayment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cardNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isVisa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cardNumber&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;processPaymentOnlyForVisa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cardNumber&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sure we know how to read that there's a special treatment for payment using Visa. But after maybe 1-2 months or when the original coder leave, the context of why Visa payment should be different is lost. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It might be business decision, it might be caused by some technical hurdles.&lt;br&gt;
But as long as the intention was not documented, the cause is lost for the next person who touched the code.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://unsplash.com/photos/Gll-v69L8iA?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditShareLink"&gt;Cover image credits to: Artur Shamsutdinov&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>Domain Driven Design Aggregates in Laravel</title>
      <author>Benjamin Delespierre</author>
      <pubDate>Mon, 20 Sep 2021 02:07:18 +0000</pubDate>
      <link>https://dev.to/bdelespierre/domain-driven-design-aggregates-in-laravel-5ei8</link>
      <guid>https://dev.to/bdelespierre/domain-driven-design-aggregates-in-laravel-5ei8</guid>
      <description>&lt;p&gt;Lately, I've been focusing on finding ways to bring &lt;a href="https://laravel.com/docs/8.x"&gt;Laravel&lt;/a&gt; and &lt;a href="https://martinfowler.com/bliki/DomainDrivenDesign.html"&gt;Domain Driven Design&lt;/a&gt; closer together. Because I love üòç Laravel, but its architecture sucks ü§Æ&lt;/p&gt;

&lt;p&gt;So today, we're going to look at &lt;strong&gt;how to implement &lt;a href="https://martinfowler.com/bliki/DDD_Aggregate.html"&gt;aggregates&lt;/a&gt; using Laravel &amp;amp; &lt;a href="https://laravel.com/docs/8.x/eloquent"&gt;Eloquent&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-an-aggregate"&gt;
  &lt;/a&gt;
  What IS an aggregate?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A DDD aggregate is a cluster of domain objects that can be treated as a single unit. An example may be an &lt;strong&gt;order&lt;/strong&gt; and its &lt;strong&gt;line-items&lt;/strong&gt;, these will be separate objects, but it's useful to treat the &lt;strong&gt;order&lt;/strong&gt; (together with its &lt;strong&gt;line items&lt;/strong&gt;) as a single aggregate.&lt;br&gt;
‚Äî Martin Fowler&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, an aggregate is a &lt;em&gt;bag&lt;/em&gt; of domain objects that represents something meaningful. Let's consider Fowler's order example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Domain\Model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Models\Order&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Models\LineItem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OrderAggregate&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;Order&lt;/span&gt; &lt;span class="nv"&gt;$root&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cd"&gt;/** @var LineItem* */&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$lineItems&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Order&lt;/span&gt; &lt;span class="nv"&gt;$root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$lineItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$root&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lineItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$lineItems&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getRoot&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;Order&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cd"&gt;/** @return LineItem* */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getLineItems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lineItems&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this aggregate, the domain objects are our Eloquent models &lt;code&gt;Order&lt;/code&gt; and &lt;code&gt;LineItem&lt;/code&gt;. It also embodies the following business rule: &lt;em&gt;"An order consists of an identifier, a creation date, and zero or more line items."&lt;/em&gt; (That business rule is sometimes referred to as an &lt;em&gt;invariant&lt;/em&gt;.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-can-we-put-in-an-aggregate"&gt;
  &lt;/a&gt;
  What can we put in an aggregate?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;An aggregate will have one of its component objects be the aggregate root. Any references from outside the aggregate should only go to the aggregate root. The root can thus ensure the integrity of the aggregate as a whole.&lt;br&gt;
‚Äî Martin Fowler&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Beyond that, they may contain:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Entities&lt;/li&gt;
&lt;li&gt;Collections, Lists, Sets, etc.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/bdelespierre/using-value-objects-in-laravel-models-44la"&gt;Value objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Value-typed properties (integers, strings, booleans etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may think of it as a &lt;em&gt;document&lt;/em&gt; holding &lt;strong&gt;ALL&lt;/strong&gt; the data necessary to a given transaction (or use case.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; Eloquent makes it easy to implement lazy-loading in your aggregates. In the above example, we could restructure the &lt;code&gt;getLineItems&lt;/code&gt; method so that it loads when it's used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getLineItems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRoot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#can-they-have-commands"&gt;
  &lt;/a&gt;
  Can they have commands?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Yes.&lt;/strong&gt; And they should.&lt;/p&gt;

&lt;p&gt;You are not supposed to do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$car&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getEngine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But rather:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$car&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Forcing the exposure of aggregate's internal structure is &lt;em&gt;bad design&lt;/em&gt; üëé&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-persistretrieve-them"&gt;
  &lt;/a&gt;
  How do I persist/retrieve them?
&lt;/h2&gt;

&lt;p&gt;You're going to use the &lt;a href="https://martinfowler.com/eaaCatalog/repository.html"&gt;Repository Pattern&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Repositories&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OrderRepository&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;OrderAggregate&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$orderEntity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Order&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'items'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;findOrFail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;OrderAggregate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nv"&gt;$orderEntity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nv"&gt;$orderEntity&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;OrderAggregate&lt;/span&gt; &lt;span class="nv"&gt;$order&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="no"&gt;DB&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$order&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRoot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$order&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getLineItems&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;associate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$order&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRoot&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#rules-for-making-your-aggregates-pretty"&gt;
  &lt;/a&gt;
  Rules for making your aggregates pretty üíÖ
&lt;/h2&gt;

&lt;p&gt;From the awesome &lt;a href="https://www.dddcommunity.org/wp-content/uploads/files/pdf_articles/Vernon_2011_1.pdf"&gt;article series by Vaughn Vernon&lt;/a&gt; ü§©&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rule #1: Keep them small.&lt;/strong&gt; It is tempting to cram one giant aggregate with anything every use case present and future might need. But it's a terrible design. You're going to run into performances and concurrency issues (when several people are working on the same aggregate at the same time).&lt;/p&gt;

&lt;p&gt;It's better to have several representations of order, depending on the broader context, than one. For instance, an order from a cart display page's point-of-view is not the same as from a billing system.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If we are going to design small aggregates, what does ‚Äúsmall‚Äù mean? The extreme would be an aggregate with only its globally unique identity and one additional attribute, which is not what's being recommended [...].&lt;br&gt;
Rather, limit the aggregate to just the root entity and a minimal number of attributes and/or value-typed properties. The correct minimum is the ones necessary, and no more.&lt;br&gt;
Smaller aggregates not only perform and scale better, they are also biased toward transactional success, meaning that conflicts preventing [an update] are rare. This makes a system more usable.&lt;br&gt;
‚Äî Vaughn Vernon&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Rule #2: Model true invariants in consistency boundaries.&lt;/strong&gt; It sounds barbaric, but it's pretty simple; it means that, within a single transaction, there is no way one could &lt;em&gt;break&lt;/em&gt; the aggregate consistency (its compliance to business rules.)&lt;/p&gt;

&lt;p&gt;In other words, it should be impossible to create a bugged version of an aggregate from calling its methods.&lt;/p&gt;

&lt;p&gt;One implication of this rule is that a transaction should only commit a &lt;em&gt;single aggregate&lt;/em&gt;, since it's not possible by design to guarantee the consistency of several aggregates at once.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A properly designed aggregate is one that can be modified in any way required by the business with its invariants completely consistent within a single transaction.&lt;br&gt;
And a properly designed bounded context modifies only one aggregate instance per transaction in all cases. What is more, we cannot correctly reason on aggregate design without applying transactional analysis.&lt;br&gt;
Limiting the modification of one aggregate instance per transaction may sound overly strict. However, it is a rule of thumb and should be the goal in most cases. It addresses the very reason to use aggregates.&lt;br&gt;
‚Äî Vaughn Vernon&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Rule #3: Don't Trust Every Use Case.&lt;/strong&gt; Don't blindly assemble your aggregates based on what the use case specification dictates. They may contain elements that contradict the existing model or force you into committing several aggregates in a single transaction or worse, to model a giant aggregate that fits in a single transaction.&lt;/p&gt;

&lt;p&gt;Apply your judgment here and keep in mind that sometimes, the business goal can be achieved using &lt;a href="https://en.wikipedia.org/wiki/Eventual_consistency"&gt;&lt;em&gt;eventual consistency&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The team should critically examine the use cases and challenge their assumptions, especially when following them as written would lead to unwieldy designs.&lt;br&gt;
The team may have to rewrite the use case (or at least re-imagine it if they face an uncooperative business analyst).&lt;br&gt;
The new use case would specify eventual consistency and the acceptable update delay.&lt;br&gt;
‚Äî Vaughn Vernon&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Murphy's law states:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Anything that can possibly go wrong, does.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Properly designed aggregates guarantees that, within its boundaries, nothing can go wrong (well, if you write them according to the rules above, of course.) You can say goodbye to those &lt;code&gt;ifs&lt;/code&gt; laying around in your code, handling those cases &lt;em&gt;that are not supposed to happen but happen anyway.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Don't allow your model to grow beyond your control. Stop using raw data, &lt;a href="https://stackoverflow.com/questions/41188002/what-does-the-term-plain-old-php-object-popo-exactly-mean"&gt;POPOs&lt;/a&gt;, and unguarded models whose state is uncertain everywhere in your Laravel application. Use aggregates instead üëç and connect your model to the actual business your app is supposed to carry.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h2&gt;

&lt;p&gt;I hope you enjoyed reading this article! If so, please leave a ‚ù§Ô∏è or a ü¶Ñ and &lt;a href="https://dev.to/bdelespierre"&gt;consider subscribing!&lt;/a&gt; I write posts on PHP, architecture, and Laravel on a monthly basis.&lt;/p&gt;

&lt;p&gt;A huge thanks to &lt;a href="https://vaughnvernon.com/"&gt;Vaughn Vernon&lt;/a&gt; for his articles on &lt;a href="https://martinfowler.com/bliki/DomainDrivenDesign.html"&gt;DDD&lt;/a&gt; üôè&lt;/p&gt;

</description>
      <category>php</category>
      <category>laravel</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>If we're talking about learning... I'm Batman!</title>
      <author>Bruno Noriller</author>
      <pubDate>Mon, 20 Sep 2021 01:35:24 +0000</pubDate>
      <link>https://dev.to/noriller/if-we-re-talking-about-learning-i-m-batman-1f00</link>
      <guid>https://dev.to/noriller/if-we-re-talking-about-learning-i-m-batman-1f00</guid>
      <description>&lt;p&gt;2021-09-18 was Batman's Day, and should you have to deal with a nasty bug or with a clown in make up... you have to be prepared!&lt;/p&gt;

&lt;p&gt;My question for you today is:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you prepare yourself? How do you learn?&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Little Disclaimer&lt;/em&gt;: &lt;/p&gt;

&lt;p&gt;This is what works for me. It maybe won't work for you, and that's ok.&lt;/p&gt;

&lt;p&gt;Maybe you're the learning Superman or Wonderwoman...&lt;/p&gt;




&lt;p&gt;When I started I did the whole shebang of watching while copying everything... as is... with the bare minimum thought.&lt;/p&gt;

&lt;p&gt;I did ended up learning, but I could go only as far as whatever I was watching, and as we know, that's usually not enough.&lt;/p&gt;

&lt;p&gt;As I said last week &lt;a href="https://dev.to/noriller/if-you-have-this-three-things-you-can-be-a-programmer-too-28b8"&gt;here&lt;/a&gt;, we programmers thrive on problems. We need a problem to be able to find some solution... and to find a solution? We need to learn first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-then-comes-your-inner-batman"&gt;
  &lt;/a&gt;
  And then comes your inner Batman!
&lt;/h2&gt;

&lt;p&gt;While I could speak all about how Batman trains everyday. That's just the minimum of what you should be doing. &lt;/p&gt;

&lt;p&gt;And if you're facing problems, then you're probably been having enough training.&lt;/p&gt;

&lt;p&gt;But that's not enough! Not in the least... what you need is...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-utility-belt"&gt;
  &lt;/a&gt;
  The utility belt!
&lt;/h3&gt;

&lt;p&gt;If you're a Batman of learning, then you have your own utility belt. And what's so great about it? &lt;/p&gt;

&lt;p&gt;You don't need to know by heart how to reverse a binary tree, you just need to know how/where to start!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#filling-your-belt"&gt;
  &lt;/a&gt;
  Filling your belt
&lt;/h3&gt;

&lt;p&gt;Sometimes you have a nasty bug, how did you solve it?&lt;/p&gt;

&lt;p&gt;You've seen a video where they did something cool? What did they do?&lt;/p&gt;

&lt;p&gt;That's when you fill your belt! And I mean quite literally... &lt;/p&gt;

&lt;p&gt;Although I don't recommend you to keep everything in memory, you can do it... but I would really recommend you using something like &lt;a href="http://notion.so"&gt;Notion&lt;/a&gt; to keep your notes organized.&lt;/p&gt;

&lt;p&gt;Keep a brief summary of what was done, where you've seen it, links, tags... anything to help you later find by one word or phrase.&lt;/p&gt;

&lt;p&gt;And when you need it... you just just save Gotham using the tools you've gathered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-joker-of-your-batman-learning"&gt;
  &lt;/a&gt;
  The Joker of your Batman Learning
&lt;/h2&gt;

&lt;p&gt;But be careful of one thing: Tutorial Hell! &lt;/p&gt;

&lt;p&gt;(That's when you keep on learning without ever using... and that's bad.)&lt;/p&gt;

&lt;p&gt;You need to never stop learning, but you also need practice. Too much of one without the other and Gotham will be in dang&lt;/p&gt;




&lt;p&gt;&lt;a href="https://buymeacoffee.com/noriller"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C1BJM5F4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zwvjemxwcoh1a0i0ieca.png" alt="Buy me a Coffee Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@sajjadahmadi?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Sajjad Ahmadi&lt;/a&gt; on &lt;a href="https://unsplash.com/@sajjadahmadi?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>learning</category>
      <category>productivity</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Programming languages are overrated!</title>
      <author>Hargunbeer Singh</author>
      <pubDate>Mon, 20 Sep 2021 01:31:12 +0000</pubDate>
      <link>https://dev.to/hamiecod/programming-languages-are-overrated-1aba</link>
      <guid>https://dev.to/hamiecod/programming-languages-are-overrated-1aba</guid>
      <description>&lt;p&gt;‚ÄúMost People‚Äù go on to learn  to use programming languages and frameworks rather than learning the core concepts of how a particular platform (say the web) works. ‚ÄúThey‚Äù do not go on to learn how code gets executed in a programming language they rather pay more attention to learn how to code.&lt;/p&gt;

&lt;p&gt;I‚Äôll support my opinion with an analogy to convince you - if you teach a person how to catch fish using a spear, the person would catch the fish and use the fish for nutrition but if you teach a person how exactly a spear works, or in other words, teach them the craft to use any weapon, the person would be able to feed himself for his whole life; even id the fish disappear, the person would be able to hunt other animals for food.&lt;/p&gt;

&lt;p&gt;Such is programming you teach a person how to write a timer in JavaScript, he will be able to sell that timer code for some money once; but if you teach the person how does programming and problem solving work at its core, the person will be able to feed himself for life. What I wanted to express via this short article is that - don‚Äôt go after learning more and more ‚Äúprogramming languages‚Äù, go after learning how a particular niche works IN DEPTH.&lt;/p&gt;

&lt;p&gt;If you know the concepts well you can easily implement the system design easily in code. As very less people learn these concepts, it is an opportunity for you to become one of the top programmers in a niche.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>computerscience</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Bomberland: a competitive sandbox for practising machine learning</title>
      <author>Joy</author>
      <pubDate>Mon, 20 Sep 2021 00:48:51 +0000</pubDate>
      <link>https://dev.to/joooyz/bomberland-a-new-artificial-intelligence-competition-2i1k</link>
      <guid>https://dev.to/joooyz/bomberland-a-new-artificial-intelligence-competition-2i1k</guid>
      <description>&lt;h2&gt;
  &lt;a href="#welcome-to-bomberland"&gt;
  &lt;/a&gt;
  Welcome to Bomberland
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.gocoder.one/bomberland?s=devto-blog"&gt;Bomberland&lt;/a&gt; is a new 1v1 AI competition developed by &lt;a href="https://www.gocoder.one?s=devto-blog"&gt;Coder One&lt;/a&gt;. It features a multi-agent adversarial environment inspired by the classic console game, Bomberman. &lt;/p&gt;

&lt;p&gt;Your task is to program an intelligent agent navigating a 2D grid world. Your agent controls a team of units collecting powerups and placing explosives, with the ultimate goal of taking your opponent down.&lt;/p&gt;

&lt;p&gt;Bomberland is a challenging problem for out-of-the-box machine learning algorithms. Be prepared to manage real-time decision making, planning, game theory, and both adversarial and cooperative play.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qDXeEEi1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ybvj1iq76d3vpf87558.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qDXeEEi1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ybvj1iq76d3vpf87558.gif" alt="Bomberland preview" title="In Bomberland, each agent controls several units with the ultimate goal of taking down the opposing team."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-open-bomberland-arena"&gt;
  &lt;/a&gt;
  An open Bomberland arena
&lt;/h2&gt;

&lt;p&gt;Bomberland will feature an ongoing, always-on arena with an active leaderboard. Participants can get direct feedback on their strategies in 1v1 matches against other players.&lt;/p&gt;

&lt;p&gt;From time to time, we'll hold tournaments featuring live streams and prizes. Check out our previous &lt;a href="https://twitch.tv/CoderOneHQ"&gt;AI Sports Challenge streams&lt;/a&gt; for a sneak peek of what's ahead.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wcVVVTCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yum6w3j7mjotdaudjnux.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wcVVVTCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yum6w3j7mjotdaudjnux.jpg" alt="AI Sports Challenge Live Stream" title="AI Sports Challenge 2021 live stream on Twitch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-bomberland"&gt;
  &lt;/a&gt;
  Why Bomberland?
&lt;/h2&gt;

&lt;p&gt;We're creating Bomberland as a place for the community to explore and experiment with the latest cutting edge technologies from tree search algorithms to deep reinforcement learning.&lt;/p&gt;

&lt;p&gt;You'll want to check it out if:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You're looking for a challenging hands-on ML project&lt;/li&gt;
&lt;li&gt;You're looking for a place to try out new libraries, frameworks, or research papers&lt;/li&gt;
&lt;li&gt;You've been fascinated by the work of companies like DeepMind and OpenAI&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-future"&gt;
  &lt;/a&gt;
  The future
&lt;/h2&gt;

&lt;p&gt;We envision Bomberland to evolve over time with new metas and challenges.&lt;/p&gt;

&lt;p&gt;Bomberland is part of our larger goal at Coder One to make cutting-edge ML accessible. We're focused on building out the right tools and infrastructure to support the community in progressively pushing the boundaries of what's possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#join-us-for-bomberland"&gt;
  &lt;/a&gt;
  Join us for Bomberland!
&lt;/h2&gt;

&lt;p&gt;The Bomberland competition is now live üéâ&lt;/p&gt;

&lt;p&gt;We have starter kits in Python and TypeScript to help you get started (and encourage any community contributions to the &lt;a href="https://github.com/CoderOneHQ/bomberland"&gt;starter kit repo&lt;/a&gt;).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.gocoder.one/bomberlands=devto-blog"&gt;Join Bomberland&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discord.gg/DXpTKWQSpP"&gt;Join Discord&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>machinelearning</category>
      <category>programming</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Rubberducking</title>
      <author>ùôπùöäùöúùöòùöó ùôªùöéùöòùö† üë®üèª‚Äçüíª</author>
      <pubDate>Sun, 19 Sep 2021 23:46:22 +0000</pubDate>
      <link>https://dev.to/jasonleowsg/rubberducking-29gm</link>
      <guid>https://dev.to/jasonleowsg/rubberducking-29gm</guid>
      <description>&lt;p&gt;True story:&lt;/p&gt;

&lt;p&gt;When it happens to you not just once but twice, thrice, it‚Äôs fair to say there‚Äôs some truth to the title statement. That in asking a question, your answer is already half answered. This totally happened to me on multiple occasions on the past few weeks when I hit a wall with my code. Because I hate troubling others and also because I feel personally responsible to try to solve things on my own first before seeking help, I often don‚Äôt ask for help until I‚Äôd spent almost a day banging my head against a wall. That‚Äôs my limit when it comes to debugging. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-i-rubberduck"&gt;
  &lt;/a&gt;
  How I rubberduck
&lt;/h3&gt;

&lt;p&gt;What would follow would be me taking the time to upload my code into Github, Codepen or Codesandbox, and taking some time to type out my question, making sure that I give the context, frame it properly, phrase the question with the right technical terms. And then posting it to various maker/coder channels, or directly to helpful folks who offered a hand in the past. Then I wait, for people to reply. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-i-end-up-solving-my-own-issue"&gt;
  &lt;/a&gt;
  But I end up solving my own issue
&lt;/h3&gt;

&lt;p&gt;Meantime, I continue trying to resolve it. One or two friends might reply, and I try to explain it a bit more. And then what happens next goes right into uncanny valley. Very often, before they can even understand the problem and resolve it, I solve it. On my own. A weird character nested in the code, or a some obscure tutorial or Stack Overflow answer that doesn‚Äôt seem related at first glance. &lt;/p&gt;

&lt;p&gt;It‚Äôs embarrassing, to say the least.&lt;/p&gt;

&lt;p&gt;It‚Äôs almost lame, like all the &lt;em&gt;hoo-haa&lt;/em&gt; to ask the question, only to answer it yourself. I‚Äôm sure my friends feel cheated. But I can‚Äôt help myself. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#skip-the-last-step-of-asking-a-friend"&gt;
  &lt;/a&gt;
  Skip the last step of asking a friend
&lt;/h3&gt;

&lt;p&gt;So perhaps the next time I will do the same thing, but maybe skip the last step of actually posting it out to friends. And then see what happens. Whether I solve it myself or not. Because I believe the break in the process‚Äîwhen I step out of problem-solving, trench-digging mode to an overview mode of framing and phrasing my question‚ÄîI break the momentum that caused the problem in the first place, and get perspective. That‚Äôs usually what we need to squash a bug in the code. &lt;/p&gt;

&lt;p&gt;A break. And perspective. &lt;/p&gt;

&lt;p&gt;That‚Äôs why: in asking the question, you already half-answered it. Or the answer is already right at the tip of your tongue, hovering under your nose all the while. All that was needed, was a question. &lt;/p&gt;

&lt;p&gt;Ask, and you shall find.&lt;/p&gt;




&lt;p&gt;Follow my daily writings on &lt;a href="https://golifelog.com/goals/30"&gt;Lifelog&lt;/a&gt;, where I write about learning to code, goals, productivity, indie hacking and tech for good.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>decodingcoding</category>
    </item>
  </channel>
</rss>
