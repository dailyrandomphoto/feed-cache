<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>
Alpha Network - CryptominingApp</title>
      <author>CryptominingApps for Android/iOS</author>
      <pubDate>Thu, 16 Sep 2021 18:17:01 +0000</pubDate>
      <link>https://dev.to/cryptominingapps/alpha-network-cryptominingapp-fn1</link>
      <guid>https://dev.to/cryptominingapps/alpha-network-cryptominingapp-fn1</guid>
      <description>&lt;p&gt;&lt;strong&gt;Alpha Network: Next chapter of Mobile Crypto&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Alpha network is a revolutionary system that provides an alternative to existing cryptocurrency models with a focus on balancing the demand and supply of the market. The view of alpha network is to provide each player (miner) a simple, secure and robust experience in earning alpha coin, a next-gen digital asset.&lt;/p&gt;

&lt;p&gt;The mining experience is playful and straightforward making it easy for everyone regardless of background or previous knowledge of the crypto industry to be able to earn alpha coin just by tapping a button on their phone. The best part of the concept is that it is entirely free to get started and mine alpha coin (just download our app) for as long as the supply lasts (more on this below).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mining and Userbase:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The project has been structured in three phases in order to create an easy-to-understand overview of the development plan from the team. Each phase represents a milestone for Alpha Network and can be triggered by a specific event. &lt;/p&gt;

&lt;p&gt;Alpha Network is one of the newest crypto mining apps, which means that you can mine Alpha coins with better hash rate or mining rate then what other cryptocurrency mining apps are offering. Alpha networks mining experience is playful and straight forward making it easy for everyone regardless of background or previous knowledge of the crypto industry to be able to earn alpha coin just by tapping a button on their phone. These coins are free to mine and you can enhance hash rate on every 30 minutes if you wish to earn more, or just clicking once in a day on app is enough for you to be active and earn with base rate. &lt;/p&gt;

&lt;p&gt;**Alpha Network App Details: -&lt;/p&gt;

&lt;p&gt;Google Play Store: - &lt;a href="https://play.google.com/stor/apps/details?id=com.alphanetwork.alphaminer"&gt;https://play.google.com/stor/apps/details?id=com.alphanetwork.alphaminer&lt;/a&gt;&lt;br&gt;
Rating on Android: - 4.4 by 7,473&lt;/p&gt;

&lt;p&gt;Website: - &lt;a href="https://www.minealpha.net"&gt;https://www.minealpha.net&lt;/a&gt; &lt;br&gt;
Whitepaper: - &lt;a href="https://www.minealpha.net/whitepaper"&gt;https://www.minealpha.net/whitepaper&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alpha Network referral code: K24ind&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To know more about CryptominingApps --&amp;gt; &lt;a href="https://bit.ly/cryptominingapps"&gt;https://bit.ly/cryptominingapps&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>cryptominingapps</category>
      <category>pinetwork</category>
      <category>cryptomining</category>
      <category>crypto</category>
    </item>
    <item>
      <title>A powerful full-text search in PostgreSQL in less than 20 lines</title>
      <author>Leandro Proen√ßa</author>
      <pubDate>Thu, 16 Sep 2021 18:15:57 +0000</pubDate>
      <link>https://dev.to/leandronsp/a-powerful-full-text-search-in-postgresql-in-less-than-20-lines-5c0d</link>
      <guid>https://dev.to/leandronsp/a-powerful-full-text-search-in-postgresql-in-less-than-20-lines-5c0d</guid>
      <description>&lt;p&gt;This blogpost will guide you to understand the fundamental pieces needed to implement a &lt;strong&gt;good enough&lt;/strong&gt; &lt;a href="https://en.wikipedia.org/wiki/Full-text_search"&gt;full-text search&lt;/a&gt; using &lt;a href="https://www.postgresql.org/docs/13/textsearch-intro.html"&gt;PostgreSQL&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spoiler alert&lt;/strong&gt;: for those curious people looking for a "okay, just show me a full-text search with ranking and fuzzy search in Postgres in less than 20 lines", so here you go:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; 
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;rank_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;rank_description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;similarity&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; 
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sales'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;NULLIF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ts_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rank_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;NULLIF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ts_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rank_description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;SIMILARITY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sales'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;similarity&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="n"&gt;similarity&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;rank_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rank_description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;similarity&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt; &lt;span class="n"&gt;NULLS&lt;/span&gt; &lt;span class="k"&gt;LAST&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But if you need to understand what the heck is the above SQL statement doing, let me explain you a bit of context and FTS (Full-text search) fundamentals in PostgreSQL.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#context-matters"&gt;
  &lt;/a&gt;
  Context matters
&lt;/h3&gt;

&lt;p&gt;A bunch of years ago I read &lt;a href="http://rachbelaid.com/postgres-full-text-search-is-good-enough/"&gt;this awesome blogpost&lt;/a&gt; called "Postgres full-text search is good enough". It's really worth reading, I could get many insights, since I was already using PostgreSQL as my standard database. &lt;/p&gt;

&lt;p&gt;By the time, I was comfortable using ElasticSearch for text searching (and if we go even before that back to 2009, I have experience using Apache Lucene, from which ElasticSearch is based on). &lt;/p&gt;

&lt;p&gt;However, managing ElasticSearch deployment &lt;a href="https://qbox.io/blog/memory-considerations-in-elasticsearch-deployment/"&gt;is not easy&lt;/a&gt;. It requires a lot of patience and memory üç™.&lt;/p&gt;

&lt;p&gt;Then back to 2014 I wrote &lt;a href="https://medium.com/@leandronsp/a-practical-look-at-postgresql-text-search-part-i-aee3f65e3b79#.qza7vxlet"&gt;this article&lt;/a&gt; explaining the reasons why I decided to experiment on PG text search as well as showing a practical example in a Ruby application. &lt;/p&gt;

&lt;p&gt;In this guide, I'll focus on a simpler yet powerful example using only SQL, so if you want to follow me in this adventure, make sure you have &lt;a href="https://www.postgresqltutorial.com/postgresql-getting-started/"&gt;PostgreSQL installed&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That's the only requirement. No more tools to install or setup. Postgres solely. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#seeding-data"&gt;
  &lt;/a&gt;
  Seeding data
&lt;/h3&gt;

&lt;p&gt;In order to explain further the fundamentals of textual search, relevance and results ranking, we have to seed our database with real data and compare different search strategies.&lt;/p&gt;

&lt;p&gt;Let's create a table called &lt;code&gt;courses&lt;/code&gt; containing only a &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt; columns. Those columns will be our "searchable" columns in which we will perform a text search against:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;SERIAL&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we will populate the table with some dummy data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;VALUES&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Improve your sales skills'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'A complete course that will help you to improve your sales skills'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Intro to Computer Science'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Understant how computers work'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Law 101'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Have you ever wondered doing some Law?'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Natural Sciences the easy way'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Your guide to understand the world'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Mathematics: a gentle introduction'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Numbers are easy'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'The crash course of Data Science'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Be a data scientist in 5 weeks'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Sales crash course'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Yet another course on Sales'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Java in a nutshell'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Learn Java in 21 days'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Ruby programming language'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'DDH sales Ruby, but could you buy it?'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Sales matter'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Really?'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'History in 3 pages'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Can you learn history in 3 pages?'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Mastering Git'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Git history will no longer bother you'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Cooking like a boss'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Be the next master chef'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Master Chef 3.0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Cooking revisited'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Functional Programming in a nutshell'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Learn FP in 4 days'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check the data was properly created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eVkfMoxl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631802829883/tVvB-a46n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eVkfMoxl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631802829883/tVvB-a46n.png" alt="Screenshot 2021-09-16 at 15.32.50.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cool. Now, before going to "full-text search", let's perform a simple textual search as used in many SQL systems: &lt;a href="https://www.postgresql.org/docs/12/functions-matching.html"&gt;pattern matching&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#textual-search-using-like-and-ilike"&gt;
  &lt;/a&gt;
  Textual search using LIKE and ILIKE
&lt;/h3&gt;

&lt;p&gt;Textual search using LIKE is pretty straightforward as doing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; 
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; 
    &lt;span class="n"&gt;courses&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;  
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="s1"&gt;'%java%'&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="s1"&gt;'%java%'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But it returned no results, since the &lt;code&gt;LIKE&lt;/code&gt; is &lt;strong&gt;case-sensitive&lt;/strong&gt;, which means we have to specify the upcase letter as saved in the table:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="s1"&gt;'%Java%'&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="s1"&gt;'%Java%'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;8   "Java in a nutshell"    "Learn Java in 21 days"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are lucky today, then let's use the &lt;code&gt;ILIKE&lt;/code&gt; which is &lt;strong&gt;case-insensitive&lt;/strong&gt;, so there's no need to upcase as it will perform pattern matching on either capital and non-capital letters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;ILIKE&lt;/span&gt; &lt;span class="s1"&gt;'%java%'&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="k"&gt;ILIKE&lt;/span&gt; &lt;span class="s1"&gt;'%java%'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;8   "Java in a nutshell"    "Learn Java in 21 days"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#considerations-on-likeilike"&gt;
  &lt;/a&gt;
  Considerations on LIKE/ILIKE
&lt;/h4&gt;

&lt;p&gt;Many systems use the &lt;em&gt;pattern matching&lt;/em&gt; feature to implement very simple text searches. It can be enough for many scenarios but the more the platform grows in demanding users, the more search needs to return &lt;strong&gt;better&lt;/strong&gt; results, with a more accurate relevance and ranking. &lt;/p&gt;

&lt;p&gt;According to the &lt;a href="https://www.postgresql.org/docs/13/textsearch-intro.html"&gt;official Postgres documentation&lt;/a&gt;, the pattern matching &lt;code&gt;LIKE | ILIKE&lt;/code&gt; lacks essential properties required by modern systems:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;They provide no ordering (ranking) of search results, which makes them ineffective when thousands of matching documents are found.&lt;/p&gt;

&lt;p&gt;They tend to be slow because there is no index support, so they must process all documents for every search.&lt;/p&gt;

&lt;p&gt;There is no linguistic support, even for English. Regular expressions are not sufficient because they cannot easily handle derived words...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For a more practical example, and being that we give more relevance for the &lt;em&gt;title over description&lt;/em&gt;, let's see in action the &lt;code&gt;ILIKE&lt;/code&gt; lacking such a requirement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="k"&gt;ILIKE&lt;/span&gt; &lt;span class="s1"&gt;'%sales%'&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="k"&gt;ILIKE&lt;/span&gt; &lt;span class="s1"&gt;'%sales%'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qXKqanP6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631806733291/r_xe-29yG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qXKqanP6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631806733291/r_xe-29yG.png" alt="Screenshot 2021-09-16 at 16.38.31.png"&gt;&lt;/a&gt;&lt;br&gt;
Not good. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;We want the course 10, which contains the word "Sales" in its title, to appear before the course 9, which holds the word in its description.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Furthermore, which would be our &lt;strong&gt;order criteria&lt;/strong&gt;? How about ordering by a "score" so we can build a rank of our results?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Full-text search for the rescue&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#fulltext-search-in-postgresql"&gt;
  &lt;/a&gt;
  Full-text search in PostgreSQL
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Full-text searching&lt;/strong&gt; (FTS) allows documents to be preprocessed and an index saved for later rapid searching and ranking. Please refer to the &lt;a href="https://www.postgresql.org/docs/13/textsearch-intro.html"&gt;official documentation&lt;/a&gt; which is quite complete and provides all the information needed to understand and implement a FTS. &lt;/p&gt;

&lt;p&gt;The main building blocks for FTS in PG (Postgres) are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;tsvector&lt;/code&gt;, which represents a searchable &lt;strong&gt;document&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;tsquery&lt;/code&gt;, which is the &lt;strong&gt;search query&lt;/strong&gt; to perform against a document&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#tsvector"&gt;
  &lt;/a&gt;
  tsvector
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;to_tsvector&lt;/code&gt; function parses an input text and converts it to the search type that represents a searchable document. For instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Java in a nutshell'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...will give the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"'java':1 'nutshel':4"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;the result is a list of lexemes ready to be searched&lt;/li&gt;
&lt;li&gt;stop words ("in", "a", "the", etc) were removed&lt;/li&gt;
&lt;li&gt;the numbers are the position of the lexemes in the document: &lt;code&gt;java:1&lt;/code&gt; starts at the 1st position whereas &lt;code&gt;nutshell:4&lt;/code&gt; starts at the 4th position&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#tsquery"&gt;
  &lt;/a&gt;
  tsquery
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;to_tsquery&lt;/code&gt; function parses an input text and converts it to the search type that represents a query. For instance, the user wants to search "java in a nutshell":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'java &amp;amp; in &amp;amp; a &amp;amp; nutshell'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...will give the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"'java' &amp;amp; 'nutshel'"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;the result is a list of tokens ready to be queried&lt;/li&gt;
&lt;li&gt;stop words ("in", "a", "the", etc) were removed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, how to match a query against a document? &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-operator"&gt;
  &lt;/a&gt;
  The @@ operator
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;@@&lt;/code&gt;  operator allows to match a query against a document and returns true or false. Simple as that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* true */&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'java &amp;amp; in &amp;amp; a &amp;amp; nutshell'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt; &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Java in a nutshell'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

&lt;span class="cm"&gt;/* true */&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'java'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt; &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Java in a nutshell'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

&lt;span class="cm"&gt;/* true */&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'nutshell'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt; &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Java in a nutshell'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 

&lt;span class="cm"&gt;/* false */&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'batatas'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt; &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Java in a nutshell'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yay! As for now, we have the essential requirements to implement FTS on our courses table. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#search-against-courses"&gt;
  &lt;/a&gt;
  Search against courses
&lt;/h3&gt;

&lt;p&gt;Let's perform the basic full-text search, looking for courses containing "java" in their titles:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; 
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'java'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt; &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;8   "Java in a nutshell"    "Learn Java in 21 days"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great. Let's perform the search "sales" against the title and description as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; 
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sales'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt; &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; 
&lt;span class="k"&gt;FROM&lt;/span&gt; 
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sales'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0JIfTu2g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631807292499/XK_VPsV6H.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0JIfTu2g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631807292499/XK_VPsV6H.png" alt="Screenshot 2021-09-16 at 16.38.31.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this moment, the results are similar to our &lt;code&gt;ILIKE&lt;/code&gt; version. Let's see where the FTS really shines. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tsrank"&gt;
  &lt;/a&gt;
  ts_rank
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;ts_rank&lt;/code&gt; function takes the document and query as arguments attempts to measure &lt;strong&gt;how relevant are documents to a particular query&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;ts_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Java in a nutshell'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'java'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"0.06079271"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Checking multiple variations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* 0.06079271 */&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;ts_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Java in a nutshell'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'nutshell'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 

&lt;span class="cm"&gt;/* 0 */&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;ts_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Java in a nutshell'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'batatas'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A more sophisticated simulating a rank of potential titles and descriptions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;ts_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Java in a nutshell'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'java'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;rank_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ts_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Learn in 21 days'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'java'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;rank_description&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yk8bDgmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631808567146/d36sLDZap.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yk8bDgmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631808567146/d36sLDZap.png" alt="Screenshot 2021-09-16 at 17.09.11.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great! Now we have all the needed to implement a better textual search with proper ranking against our courses.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#search-courses-with-ranking"&gt;
  &lt;/a&gt;
  Search courses with ranking
&lt;/h3&gt;

&lt;p&gt;Ranking results means that we have to split the document in different rankings so we can perform &lt;strong&gt;ordering&lt;/strong&gt; accordingly. &lt;/p&gt;

&lt;p&gt;We basically need to export the ranking fields:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;ts_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;rank_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ts_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;rank_description&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and perform the query against the whole document containing either title and description:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt; 
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sales'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we are ready to perform the correct ordering:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;rank_description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rank_title&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-implementation-with-ranking"&gt;
  &lt;/a&gt;
  The implementation with ranking
&lt;/h3&gt;

&lt;p&gt;So here we have a implementation of a &lt;strong&gt;full-text search with ranking in PostgreSQL&lt;/strong&gt; in just 12 lines of SQL code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; 
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ts_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;rank_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ts_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;rank_description&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; 
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sales'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;rank_description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rank_title&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K6cx5LGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631809230312/sihdXAjU-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K6cx5LGM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631809230312/sihdXAjU-.png" alt="Screenshot 2021-09-16 at 17.20.19.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-it-fast"&gt;
  &lt;/a&gt;
  Is it fast?
&lt;/h3&gt;

&lt;p&gt;Depending on the amount of data, such a query may face performance issues, since it needs to convert data to searchable documents &lt;strong&gt;on the fly&lt;/strong&gt;. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#index-for-the-rescue"&gt;
  &lt;/a&gt;
  Index for the rescue
&lt;/h4&gt;

&lt;p&gt;Creating the &lt;a href="https://www.postgresql.org/docs/13/textsearch-indexes.html"&gt;proper index&lt;/a&gt; (a GIN index for text search), it can improve the performance by orders of magnitude. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/leandronsp/yacs"&gt;In this project&lt;/a&gt; I made a proof of concept in which 12 millions of cities could be searched in just a &lt;strong&gt;few milliseconds&lt;/strong&gt;. GIN index only. No materialized view needed. &lt;/p&gt;

&lt;p&gt;Let's see how a GIN index could be created for our courses table:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="n"&gt;courses_search_idx&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt; &lt;span class="k"&gt;USING&lt;/span&gt; &lt;span class="n"&gt;GIN&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we are good. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Just sit down, relax and enjoy a search across millions of courses with no performance issues.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-about-fuzzy-searching"&gt;
  &lt;/a&gt;
  How about fuzzy searching?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Approximate_string_matching"&gt;Fuzzy search&lt;/a&gt;, or "string approximation matching", is the technique used to calculate the approximation of two strings. It's commonly used to anticipate mispellings on the queries and so on.&lt;/p&gt;

&lt;p&gt;Unfortunately, the Postgres built-in FTS doesn't support fuzzy searching, however, by using an extension, we can combine full-text search and fuzzy search in the same SQL query.&lt;/p&gt;

&lt;p&gt;Let's create the extension:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="n"&gt;EXTENSION&lt;/span&gt; &lt;span class="n"&gt;pg_trgm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can see the differences in action:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; 
    &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'jova'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt; &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Java in a nutshell'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="k"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;SIMILARITY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'jova'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Java in a nutshell'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;similarity&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dk8WraIR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631810732379/g20lyQ171.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dk8WraIR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631810732379/g20lyQ171.png" alt="Screenshot 2021-09-16 at 17.45.23.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that searching for "jova" against a a text "Java in a nutshell", the full-text search match operator returns false whilst the &lt;code&gt;SIMILARITY&lt;/code&gt; function, provided by the &lt;code&gt;pg_trgm&lt;/code&gt; extension, returns a value &lt;code&gt;0.09&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;*&lt;em&gt;In a scale from 0 to 1, similar strings tend to be close to 1. *&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-final-implementation-using-ranking-and-fuzzy-search"&gt;
  &lt;/a&gt;
  The final implementation, using ranking and fuzzy search
&lt;/h3&gt;

&lt;p&gt;So here we have a implementation of a &lt;strong&gt;full-text search with ranking and fuzzy search in PostgreSQL&lt;/strong&gt; in just 16 lines of SQL code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; 
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;rank_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;rank_description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;similarity&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; 
    &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'curse'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;NULLIF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ts_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rank_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;NULLIF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ts_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_tsvector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;rank_description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;SIMILARITY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'curse'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;similarity&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt; &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="n"&gt;similarity&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;rank_title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rank_description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;similarity&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt; &lt;span class="n"&gt;NULLS&lt;/span&gt; &lt;span class="k"&gt;LAST&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Highlights:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we apply the similarity function against the title and description&lt;/li&gt;
&lt;li&gt;when the search has no match, we filter the results which have a similarity above 0&lt;/li&gt;
&lt;li&gt;added the &lt;code&gt;NULLIF&lt;/code&gt; function so when the &lt;code&gt;rank_*&lt;/code&gt; is zero, we cast the value to &lt;code&gt;NULL&lt;/code&gt; so the &lt;strong&gt;ordering&lt;/strong&gt; can consider NULL values to be the last in ranking results&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This guide was quite heavy but it covered only the very basics of full-text search in Postgres. In the official documentation you can see much more features and capabilities, such as &lt;em&gt;highlight documents, weights, query tree, query rewrite, dictionaries, triggers&lt;/em&gt; and so on. &lt;/p&gt;

&lt;p&gt;It's reliable and fast, which means that it can be used in a wide range of requirements, from simple search systems to complex ones. In case you already have PostgreSQL in your stack, it's worth considering to experiment on it before going to an external/expensive alternative which will demand more attention to operations complexity. &lt;/p&gt;

&lt;p&gt;I hope you could enjoy this ride of implementing FTS in PostgreSQL. &lt;em&gt;Happy searching!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>postgres</category>
    </item>
    <item>
      <title>Timestope - CryptominingApp</title>
      <author>CryptominingApps for Android/iOS</author>
      <pubDate>Thu, 16 Sep 2021 18:12:04 +0000</pubDate>
      <link>https://dev.to/cryptominingapps/timestope-cryptominingapp-2j03</link>
      <guid>https://dev.to/cryptominingapps/timestope-cryptominingapp-2j03</guid>
      <description>&lt;p&gt;&lt;strong&gt;Timestope: Digital Currency You Can Mine on Your Phone&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Just like a PI network, TimeStope is also a new cryptocurrency, which any smartphone users can mine for free. Timestope is developed by Seoul University in South Korea and was launched in Oct 2021 as first phase. As Timestope is one of the Korean apps, it seems like XRP (Ripple labs). There are some research reports that it can beat XRP in future. Daily morning you need to click attendance button and it will give attendance score of 2 points in addition to default 100 points, if you forget to give attendance, it will reduce 3 points, but if your attendance score reached 0, your account will be deactivated and cannot be reactivated.&lt;/p&gt;

&lt;p&gt;In TimeStope, TIME will be used like money. You just need to use the app for less than 1 minute daily only to start your mining like PI Network and BEE. You can earn more TIME by inviting other to join the app. Timestope cryptocurrency has a 2-year validity period. You can collect Time for next 2 years in free.&lt;/p&gt;

&lt;p&gt;**TimeStope App Details: -&lt;/p&gt;

&lt;p&gt;Google Play Store: -&lt;a href="https://play.google.com/store/apps/details?id=com.timestope"&gt;https://play.google.com/store/apps/details?id=com.timestope&lt;/a&gt;&lt;br&gt;
Rating on Android: - 4.4 by 44,376&lt;/p&gt;

&lt;p&gt;Website: - &lt;a href="https://www.timestope.com/"&gt;https://www.timestope.com/&lt;/a&gt;&lt;br&gt;
Whitepaper: - &lt;a href="https://www.timestope.com/white-paper**"&gt;https://www.timestope.com/white-paper**&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is 100 attendance point?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The attendance score is 100 points for initial participation. Attendance must be checked in the attendance book within 24h hours based on UTC. If you check attendance, your attendance score increases by 2 points, and if you do not check attendance, your attendance score decreases by 3 points. Keep in mind that if you are absent for exactly 31 days, that participant will not be able to join in the TimeStope permanently. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Timestope Witness (referral) code: k4ind&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To know more about CryptominingApps --&amp;gt; &lt;a href="https://bit.ly/cryptominingapps"&gt;https://bit.ly/cryptominingapps&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>cryptominingapps</category>
      <category>pinetwork</category>
      <category>cryptomining</category>
      <category>crypto</category>
    </item>
    <item>
      <title>Phoneum PHT- CryptominingApp</title>
      <author>CryptominingApps for Android/iOS</author>
      <pubDate>Thu, 16 Sep 2021 18:10:07 +0000</pubDate>
      <link>https://dev.to/cryptominingapps/phoneum-pht-cryptominingapp-5e97</link>
      <guid>https://dev.to/cryptominingapps/phoneum-pht-cryptominingapp-5e97</guid>
      <description>&lt;p&gt;&lt;strong&gt;Cloud Earning PHT or Phoneum: True mobile-only cryptocurrency&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In market many cryptocurrency mining apps are available and almost every app needs you to click on them at least once a day, but on Cloud Earning PHT to be active all you need to click once in a week and you will remain active for 7 days, however Cloud Earning PHT provides little low has rate then other crypto mining apps. The level increases according to the total number of PHT token mining. This app allows you to mine PHT token cryptocurrency directly in the cloud from your smartphone without consuming energy. App is little bit slow. Try if you do not want to miss out anything available free now.&lt;/p&gt;

&lt;p&gt;Phoneum is a true mobile-only cryptocurrency, designed to deliver a simplified user experience and platform that enables all users, regardless of technical aptitude, to fully participate in the new cryptocurrency economy. Phoneum (PHT) is a Tron (TRX) based token. Similar to Bitcoin, and many other cryptocurrencies, PHT is a Blockchain cryptocurrency that supports peer-to-peer transactions.&lt;/p&gt;

&lt;p&gt;**Cloud Earning PHT or Phoneum App Details: -&lt;/p&gt;

&lt;p&gt;Google Play Store: -&lt;a href="https://play.google.com/store/apps/details?id=com.cloud.earning"&gt;https://play.google.com/store/apps/details?id=com.cloud.earning&lt;/a&gt;&lt;br&gt;
Rating on Android: - 4.4 by 54,856&lt;/p&gt;

&lt;p&gt;Website: - &lt;a href="https://phoneum.io/"&gt;https://phoneum.io/&lt;/a&gt;&lt;br&gt;
Whitepaper: - &lt;a href="https://phoneum.io/**"&gt;https://phoneum.io/**&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Phoneum (PHT)  referral code: 4fwf3aun&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To know more about CryptominingApps --&amp;gt; &lt;a href="https://bit.ly/cryptominingapps"&gt;https://bit.ly/cryptominingapps&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>cryptominingapps</category>
      <category>pinetwork</category>
      <category>cryptomining</category>
      <category>crypto</category>
    </item>
    <item>
      <title>Bee Network - CryptoMiningApp</title>
      <author>CryptominingApps for Android/iOS</author>
      <pubDate>Thu, 16 Sep 2021 17:57:13 +0000</pubDate>
      <link>https://dev.to/cryptominingapps/bee-network-cryptominingapp-5ajo</link>
      <guid>https://dev.to/cryptominingapps/bee-network-cryptominingapp-5ajo</guid>
      <description>&lt;p&gt;&lt;strong&gt;Bee Network: Earn Free Bee Coins in the Era of Cryptocurrency&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bee network is one of crypto mining app, which is almost similar to Pi Network and have a huge number of users. Till now it‚Äôs not listed on cryptocurrency exchanges and there is no value for now but in future there will be value of these currencies when these cryptocurrencies will be listed on exchanges. In simple words Bee Network is digital money or ‚Äòtoken‚Äô that you can procure utilizing your smartphone. It sounds basic and, with computerized monetary forms being more famous than any other time in recent memory right now, it could have colossal potential. There are presently more than 8 million individuals mining it on their cell phones.&lt;/p&gt;

&lt;p&gt;There are many experts who had exceptionally evaluated application on different stages and in the play store as well. Most clients say the application is extraordinary and are happy with what they get. The application additionally gives clients a gaming experience as they exchange. What makes obviously this network is practically false is the hopeful breeze that wins among the clients. &lt;/p&gt;

&lt;p&gt;**Bee Network App Details: - &lt;br&gt;
By Bee.com for iOS and Android&lt;br&gt;
Number of Active users: - 1 Million active users&lt;/p&gt;

&lt;p&gt;Apple Store: - &lt;a href="https://apps.apple.com/us/app/bee-network-phone-based-asset/id1529988919"&gt;https://apps.apple.com/us/app/bee-network-phone-based-asset/id1529988919&lt;/a&gt;&lt;br&gt;
Rating on iOS: - 4.6 rating by 4,100 &lt;/p&gt;

&lt;p&gt;Google Play Store: -&lt;a href="https://play.google.com/store/apps/details?id=network.bee.app"&gt;https://play.google.com/store/apps/details?id=network.bee.app&lt;/a&gt;&lt;br&gt;
Rating on Android: - 4.5 rating by 24,835&lt;/p&gt;

&lt;p&gt;Website: - &lt;a href="https://bee.com/en"&gt;https://bee.com/en&lt;/a&gt; &lt;br&gt;
Whitepaper: - &lt;a href="https://bee.com/en/white-paper**"&gt;https://bee.com/en/white-paper**&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bee network referral code: k4ind&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To know more about CryptominingApps --&amp;gt; &lt;a href="https://bit.ly/cryptominingapps"&gt;https://bit.ly/cryptominingapps&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>cryptominingapps</category>
      <category>pinetwork</category>
      <category>cryptomining</category>
      <category>crypto</category>
    </item>
    <item>
      <title>8 Things I've Learned Working in a Legacy Codebase</title>
      <author>Abbey Perini</author>
      <pubDate>Thu, 16 Sep 2021 17:51:33 +0000</pubDate>
      <link>https://dev.to/abbeyperini/8-things-i-ve-learned-working-in-a-legacy-codebase-4h6c</link>
      <guid>https://dev.to/abbeyperini/8-things-i-ve-learned-working-in-a-legacy-codebase-4h6c</guid>
      <description>&lt;p&gt;My first dev job threw me into a huge legacy codebase. My last big ticket involved getting a modern library to work within the deprecated UI framework it uses. After that journey, I wanted to share some tips I've learned along the way.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#1-learn-the-codebase-by-fixing-bugs"&gt;
  &lt;/a&gt;
  (1) Learn the codebase by fixing bugs.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yTQL8rSf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/8Tr3SyO82lkAAAAM/bug-eating.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yTQL8rSf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/8Tr3SyO82lkAAAAM/bug-eating.gif" alt="A cockroach sits at a table in the Krusty Krab, happily eating a Krabby Patty"&gt;&lt;/a&gt;&lt;br&gt;
Ideally your company will have good documentation, but often legacy codebases are the ones that used to be maintained by that one developer who left. Reading through the entire codebase to get up to speed may be nigh impossible. I've found fixing bugs is a great way to get to know your app's "personality" while getting more familiar with its workflows. Even just reading backlog tickets gives you an idea of the company's priorities, abbreviations, and what the users want fixed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-tutorials-and-reference-materials-may-be-hard-to-find"&gt;
  &lt;/a&gt;
  (2) Tutorials and reference materials may be hard to find.
&lt;/h3&gt;

&lt;p&gt;This is especially true if any of the packages, libraries, or tools in the codebase have been deprecated. Get familiar with the versions of what you have installed. Include the version in your Googling. Even if you can find tutorials, your app may be written in a different design pattern. Plus, a lot of tutorials act like the app is built around the tool they're demonstrating. Getting something to work inside an established, opinionated app is a whole new ballgame. Don't be afraid to try literally any idea that occurs to you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-youll-want-to-lean-on-people-who-have-more-experience-with-the-app"&gt;
  &lt;/a&gt;
  (3) You'll want to lean on people who have more experience with the app.
&lt;/h3&gt;

&lt;p&gt;This doesn't just mean other devs. QA, data science, and project managers who have worked on the app for years will know things that will help you immensely. When I get stuck trying to find where a bug is coming from, I'll often ask them "Is there a workflow that could affect this that I'm missing?" Sometimes, knowing how a feature was implemented will give you an idea of why a bug has only started happening now, was just reported, or not a priority to fix.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-always-check-to-see-if-someone-has-solved-the-problem-previously-before-writing-a-whole-new-way-to-solve-it"&gt;
  &lt;/a&gt;
  (4) Always check to see if someone has solved the problem previously before writing a whole new way to solve it.
&lt;/h3&gt;

&lt;p&gt;Lean on utilities and code previously written. If you're not adding in a new type of data, the interactions with the database you're trying to implement probably already exist. Don't forget to look at workflows outside of the one you're currently trying to fix. Previous developers were only looking at their tickets not yours.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-try-not-to-ever-duplicate-code"&gt;
  &lt;/a&gt;
  (5) Try not to ever duplicate code.
&lt;/h3&gt;

&lt;p&gt;Get familiar with your codebase's utilities and import methods so you can use the already written code you need anywhere in the codebase. No need to add complexity or have to change things in multiple places. A legacy codebase that has already had plenty of developers on it probably has more than one example of both. Plus, they may have known about a quirk in the system you don't.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-on-the-flip-side-lots-of-utilities-means-lots-of-abstraction"&gt;
  &lt;/a&gt;
  (6) On the flip side, lots of utilities means lots of abstraction.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8PozYIzq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/88u7xuipr0mj1kxlwkn5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8PozYIzq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/88u7xuipr0mj1kxlwkn5.png" alt="A seagull and crab discuss the crab's mysterious journey in a small row boat, ending with &amp;quot;any details will remain a mystery.&amp;quot;"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Source: &lt;a href="http://www.poorlydrawnlines.com/comic/your-story/"&gt;http://www.poorlydrawnlines.com/comic/your-story/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Functions that rely on the established utilities can become very dense to read from start to finish. It's ok to only have a high level understanding of what a utility does. If you ever need to implement it in another place or something has gone horribly wrong within it, that's the time to dig deep into how it works. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-if-you-dont-have-an-answer-for-how-youd-improve-it-dont-complain-about-it"&gt;
  &lt;/a&gt;
  (7) If you don't have an answer for how you'd improve it, don't complain about it.
&lt;/h3&gt;

&lt;p&gt;You don't know the time constraints that developer was under or if they were told to go in a direction they didn't personally agree with. If you do have an answer, discuss with your team whether that's a priority you can dedicate time to. If it's a small ticket or something you can break into small tickets, you can use those passion projects as rewards for completing the bugs that really challenged you or didn't challenge you at all.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-lets-limit-the-scope-of-this-is-your-new-motto"&gt;
  &lt;/a&gt;
  (8) "Let's limit the scope of this." is your new motto.
&lt;/h3&gt;

&lt;p&gt;You want to try to affect as few workflows as possible. A legacy codebase is usually pretty stable and something people are counting on to work. Sweeping reform is tempting, but often your job is just to patch up the small holes.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>lessons</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Pi Network -CryptominingApp</title>
      <author>CryptominingApps for Android/iOS</author>
      <pubDate>Thu, 16 Sep 2021 17:40:42 +0000</pubDate>
      <link>https://dev.to/cryptominingapps/pi-network-cryptominingapp-1c5f</link>
      <guid>https://dev.to/cryptominingapps/pi-network-cryptominingapp-1c5f</guid>
      <description>&lt;p&gt;&lt;strong&gt;Pi Network : The First Digital Currency You Can Mine On Your Phone&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pi Network is another digital currency for and by regular individuals that you can ‚Äúmine‚Äù (or procure) from your telephone. Digital currencies are another type of advanced cash that is kept up and gotten by a local area, rather than by governments or banks. Today, you can mine (or acquire) Pi by assisting with getting the money and by developing Pi‚Äôs confidence in the organization. While most digital forms of money (like Bitcoin) have been difficult for ordinary individuals to utilize and get to, Pi places the influence of cryptographic money into the palm of your hand.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pi Network referral code: K4Ind&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pi Network's app is a cloud mining based crypto currency which is quite different from other crypto currencies. However, other crypto currencies have seen how easy it is for Pi to be mined and are trying to copy Pi's mode of operation because its attractive huge base of users and as of now 23 million active users are mining Pi tokens. One most important fact is that the founder of this currency put their face in front of the public for this project and developers are doing regular seminars and presentation to make sure that users are understanding the cryptocurrency and the developer does not push people to join this app; they invite you to join the Pi network to earn digital currency. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pi Network App Details-&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By SOCIALCHAIN Inc. for iOS and Android&lt;br&gt;
Number of Active Users: - 24 Million active user&lt;/p&gt;

&lt;p&gt;Apple Store: -  &lt;a href="https://apps.apple.com/us/app/pi-network/id1445472541"&gt;https://apps.apple.com/us/app/pi-network/id1445472541&lt;/a&gt;&lt;br&gt;
Rating on iOS: - 4.4 rating by 7000 users &lt;/p&gt;

&lt;p&gt;GooglePlayStore- &lt;a href="https://play.google.com/stor/apps/details?id=com.blockchainvault"&gt;https://play.google.com/stor/apps/details?id=com.blockchainvault&lt;/a&gt;&lt;br&gt;
Rating on Android: - 4.4 rating by 3,15,578 users &lt;/p&gt;

&lt;p&gt;Website: - &lt;a href="https://minepi.com/"&gt;https://minepi.com/&lt;/a&gt; &lt;br&gt;
Whitepaper: - &lt;a href="https://minepi.com/white-paper"&gt;https://minepi.com/white-paper&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pi Network referral code: K4Ind&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To know more about CryptominingApps --&amp;gt; &lt;a href="https://bit.ly/cryptominingapps"&gt;https://bit.ly/cryptominingapps&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Download the mobile app to start earning today!! &lt;/p&gt;

</description>
      <category>cryptominingapps</category>
      <category>pinetwork</category>
      <category>cryptomining</category>
      <category>crypto</category>
    </item>
    <item>
      <title>Guide to an Effective Code Review</title>
      <author>Mrinalini Sugosh (Mrina)</author>
      <pubDate>Thu, 16 Sep 2021 17:29:18 +0000</pubDate>
      <link>https://dev.to/mrinasugosh/guide-to-an-effective-code-review-p15</link>
      <guid>https://dev.to/mrinasugosh/guide-to-an-effective-code-review-p15</guid>
      <description>&lt;p&gt;Sometimes, a code review can leave both the author and the reviewer with a great deal of frustration. But it doesn‚Äôt have to be that way.&lt;/p&gt;

&lt;p&gt;In this blog, I‚Äôll share some of the things that I‚Äôve learned over the years reviewing code as a developer. Although I‚Äôll touch on some things that affect the author of the code, I‚Äôm writing mainly from a code reviewer‚Äôs perspective.&lt;/p&gt;

&lt;p&gt;But before I begin, let me tell you a story‚Ä¶&lt;br&gt;
As a developer at one of my previous teams, I regularly performed code reviews on my coworkers‚Äô pull requests. When I was asked to mentor a team of interns, I had one intern in particular who, whenever I made any comments on their pull requests, just couldn‚Äôt take constructive criticism ‚Ä¶ or so I thought.&lt;/p&gt;

&lt;p&gt;It turns out that I wasn‚Äôt very good at giving constructive criticism. I thought all I had to do was point out the issues in a cold, to-the-point way. That works fine for some people, but not for others.&lt;/p&gt;

&lt;p&gt;Something had to be done, and it got me thinking about how to perform an effective code review.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#critique-dont-criticize"&gt;
  &lt;/a&gt;
  Critique, don‚Äôt criticize
&lt;/h2&gt;

&lt;p&gt;All too often I hear developers say, ‚ÄúI don‚Äôt want to be the one who criticizes another person‚Äôs code.‚Äù The word ‚Äúcriticize‚Äù comes from the same root word as ‚Äúcritical‚Äù and ‚Äúcritique.‚Äù To critique something is not a bad thing. So the next time you do a code review, try not to think of it as criticizing; think of it as an honest and helpful critique of someone‚Äôs work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cri¬∑tique /kriÀàtƒìk/

an analysis or assessment of something, typically art, literature, or music
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#be-kind"&gt;
  &lt;/a&gt;
  Be kind
&lt;/h2&gt;

&lt;p&gt;Choose your words wisely. Use suggestive, collaborative and encouraging words instead of demanding something.&lt;/p&gt;

&lt;p&gt;For example, instead of commenting:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚ÄúChange this to use a temporary variable.‚Äù
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might want to say instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚ÄúThis might be more readable if we changed this to use a temporary variable like `let`.‚Äù
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See how this changed the tone of the discussion? It brings the author into the conversation. Who knows, the simple gesture of asking may even spark a better alternative solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-everyones-code"&gt;
  &lt;/a&gt;
  It‚Äôs everyone‚Äôs code
&lt;/h2&gt;

&lt;p&gt;When you work on a team, the responsibility of gating dirty code from getting into the code repository is shared by everyone. Some of the most valuable advice I give new developers is to treat the source code not as your code, or their code, but as "our" code.&lt;/p&gt;

&lt;p&gt;At some point down the road, you may find yourself working on code that another developer is checking in today. It‚Äôs not only your right, but your obligation, to make sure that the code is of the highest quality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#let-your-tools-be-the-bad-guy"&gt;
  &lt;/a&gt;
  Let your tools be the "bad" guy
&lt;/h2&gt;

&lt;p&gt;The last thing that you want to do as a code reviewer is to comment that the author forgot a semi-colon, or a space before a parenthesis. It is a waste of your time. You will most likely have more helpful, substantive, and encouraging things to say in your review. Leave the rest to automated services.&lt;/p&gt;

&lt;p&gt;The modern software development world has many tools to automate what used to be a manual process of reviewing code. There are a number of commercial and free services (like TravisCI and CircleCI) that can perform unit tests before a human ever needs to get involved.&lt;/p&gt;

&lt;p&gt;If your organization has rules about code style, let an automated linter do the complaining (ie ESLint for JS projects). Most of these services are free for personal or open source use. Use them!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-be-afraid-to-be-wrong"&gt;
  &lt;/a&gt;
  Don‚Äôt be afraid to be wrong
&lt;/h2&gt;

&lt;p&gt;If you see something in the code that doesn‚Äôt look right, but you‚Äôre not quite sure, go ahead and ask. It‚Äôs OK to be wrong. Just leave a comment and ask.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚ÄúAre you sure that this shouldn‚Äôt return a PENDING status instead?‚Äù
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It causes the author to recheck their work. They are, after all, the subject matter expert for the PR. You may get a reply like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚ÄúYes, I‚Äôm sure. LOADED is the correct return value here.‚Äù
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that‚Äôs fine. In fact, you just learned something. But who knows ‚Äì you may get a reply such as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚ÄúYou‚Äôre right. This should return PENDING. Good catch!‚Äù
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congratulations. In this scenario, you just caught a possible production bug!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#never-just-rubberstamp-it"&gt;
  &lt;/a&gt;
  Never just rubber-stamp it!
&lt;/h2&gt;

&lt;p&gt;Here‚Äôs a scenario for you. You‚Äôve been asked to do a code review for a highly respected senior developer on the team. You go to this person all the time for help and advice. ‚ÄúTheir code can‚Äôt possibly be wrong,‚Äù you say to yourself. ‚ÄúI should just approve it.‚Äù&lt;/p&gt;

&lt;p&gt;Here‚Äôs another scenario. A fellow intern or co-worker just did you a favor last week. Now they are under pressure to get their latest feature out the door, so they come to you and say: ‚ÄúThis pull request is pretty minor. I refactored a few things and added a few files. No big deal. Just approve it for me, will ya?‚Äù&lt;/p&gt;

&lt;p&gt;The answer to both situations above is: No! Neither the skill level of the author nor the urgency of the situation matter. You should approach each code review with the same level of commitment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#give-helpful-suggestions"&gt;
  &lt;/a&gt;
  Give helpful suggestions
&lt;/h2&gt;

&lt;p&gt;If you are suggesting a change, please don‚Äôt just describe your issues, or say something like, ‚ÄúThis is all wrong.‚Äù Try to give practical code samples or links to supporting documentation where applicable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#teamwork-makes-the-code-work"&gt;
  &lt;/a&gt;
  Teamwork makes the code work
&lt;/h2&gt;

&lt;p&gt;Too often, developers fail to remember that coding is a partnership. You should give the author every opportunity to succeed. Don‚Äôt make them guess what you are thinking. You should always treat the developer with as much respect as you do the code, and vice versa. Writing code in an organization is a team sport.&lt;/p&gt;

&lt;p&gt;Remember‚Ä¶ There is no ‚ÄúI‚Äù in ‚ÄúCODE.‚Äù&lt;/p&gt;

&lt;p&gt;==== Follow me on Social Media(&lt;code&gt;@mrinasugosh&lt;/code&gt;) ====&lt;br&gt;
Dev.to: &lt;a class="mentioned-user" href="https://dev.to/mrinasugosh"&gt;@mrinasugosh&lt;/a&gt;
 &lt;br&gt;
Github: &lt;a href="https://github.com/mrinasugosh"&gt;@mrinasugosh&lt;/a&gt;&lt;br&gt;
Twitter: &lt;a href="https://twitter.com/mrinasugosh"&gt;@mrinasugosh&lt;/a&gt;&lt;br&gt;
LinkedIn: &lt;a href="https://www.linkedin.com/in/mrinasugosh/"&gt;@mrinasugosh&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codereview</category>
      <category>codenewbie</category>
      <category>codequality</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Cloud Mining Crypto Apps like Pi Network
</title>
      <author>CryptominingApps for Android/iOS</author>
      <pubDate>Thu, 16 Sep 2021 17:23:14 +0000</pubDate>
      <link>https://dev.to/cryptominingapps/cloud-mining-crypto-apps-like-pi-network-3olp</link>
      <guid>https://dev.to/cryptominingapps/cloud-mining-crypto-apps-like-pi-network-3olp</guid>
      <description>&lt;p&gt;We are now living in the age of mobile in the 21st century. Not being able to use mobile for 24 minutes in 24 hours makes you feel restless. Now it seems that our life is incomplete without mobile. We can get most of what we are looking for from mobile. Your mobile phone has so much computational power, so its your choice if you want to use that just to browse social media or wish to earn some valuable coins which can have value of $1 to $10 or $100 in next few years. In 2008 there was an opportunity to earn Bitcoin (modern money around the world) from computers but at that time we did not all have commuters. But if we had a computer at that time and if we could earn only 1 Bitcoin, we would have Rs. 5,513,869 now. But now if we want to earn 1 Bitcoin it may take more than 10 years. &lt;/p&gt;

&lt;p&gt;There are more then 12-15 crypto mining apps, which are offering free mining for their coins, but if you will look closely, so there are only 5 to7 apps which looks legit and most of these apps are following the model of Pi Network. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pi Network  -&lt;br&gt;
Pi Network reference code: K4Ind&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pi Network's app is a cloud mining based crypto currency which is quite different from other crypto currencies. However, other crypto currencies have seen how easy it is for Pi to be mined and are trying to copy Pi's mode of operation because its attractive huge base of users and as of now 23 million active users are mining Pi tokens. One most important fact is that the founder of this currency put their face in front of the public for this project and developers are doing regular seminars and presentation to make sure that users are understanding the cryptocurrency and the developer does not push people to join this app; they invite you to join the Pi network to earn digital currency. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bee Network-&lt;br&gt;
Bee Network reference code: k4ind&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bee network is one of crypto mining app, which is almost similar to Pi Network and have a huge number of users. Till now it‚Äôs not listed on cryptocurrency exchanges and there is no value for now but in future there will be value of these currencies when these cryptocurrencies will be listed on exchanges. In simple words Bee Network is digital money or ‚Äòtoken‚Äô that you can procure utilizing your smartphone. It sounds basic and, with computerized monetary forms being more famous than any other time in recent memory right now, it could have colossal potential. There are presently more than 8 million individuals mining it on their cell phones.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Timestope-&lt;br&gt;
TimeStope witness code:  k4ind&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Just like a PI network, TimeStope is also a new cryptocurrency, which any smartphone users can mine for free. Timestope is developed by Seoul University in South Korea and was launched in Oct 2021 as first phase. As Timestope is one of the Korean apps, it seems like XRP (Ripple labs). There are some research reports that it can beat XRP in future. Daily morning you need to click attendance button and it will give attendance score of 2 points in addition to default 100 points, if you forget to give attendance, it will reduce 3 points, but if your attendance score reached 0, your account will be deactivated and cannot be reactivated.&lt;/p&gt;

&lt;p&gt;In TimeStope, TIME will be used like money. You just need to use the app for less than 1 minute daily only to start your mining like PI Network and BEE. You can earn more TIME by inviting other to join the app. Timestope cryptocurrency has a 2-year validity period. You can collect Time for next 2 years in free.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alpha Network-&lt;br&gt;
Alpha Network reference code: K24ind&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Alpha Network is one of the newest crypto mining apps, which means that you can mine Alpha coins with better hash rate or mining rate then what other cryptocurrency mining apps are offering. Alpha networks mining experience is playful and straight forward making it easy for everyone regardless of background or previous knowledge of the crypto industry to be able to earn alpha coin just by tapping a button on their phone. These coins are free to mine and you can enhance hash rate on every 30 minutes if you wish to earn more, or just clicking once in a day on app is enough for you to be active and earn with base rate. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Phoneum (PHT) or Cloud Earning PHT-&lt;br&gt;
Cloud Earning PHT or Phoneum reference code: 4fwf3aun&lt;/strong&gt; (Use this code to claim 200 free PHTs)&lt;/p&gt;

&lt;p&gt;In market many cryptocurrency mining apps are available and almost every app needs you to click on them at least once a day, but on Cloud Earning PHT to be active all you need to click once in a week and you will remain active for 7 days, however Cloud Earning PHT provides little low has rate then other crypto mining apps. The level increases according to the total number of PHT token mining. This app allows you to mine PHT token cryptocurrency directly in the cloud from your smartphone without consuming energy. App is little bit slow. Try if you do not want to miss out anything available free now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Referral codes:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pi Network referral code: K4Ind&lt;br&gt;
Bee Network referral code: k4ind&lt;br&gt;
Alpha Network referral code: K24ind&lt;br&gt;
TimeStope witness (referral) code:  k4ind&lt;br&gt;
CloudEarning PHT or Phoneum referral code: 4fwf3aun&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To know more about CryptominingApps --&amp;gt; &lt;a href="https://bit.ly/cryptominingapps"&gt;https://bit.ly/cryptominingapps&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are many others crypto mining apps such as;  Midoin (Android &amp;amp; iOS), CowCow (Android), Spotter (Android), Reflex (Android), AntCoin (Android), Eagle Network (Android), Thundercore Hub (Android), Swissborg Community App (Android), etc but as i mentioned in start you should always do research and check their background as well as future plans before investing time in them even if they are free. As much I have checked i found only 5 to 6 legit cloud based crypto mining apps and about that i have shared, however I have done research for other apps too and they looks and sound like fishy so I prefer to not invest my time in them...&lt;/p&gt;

&lt;p&gt;Happy Mining!!!&lt;/p&gt;

</description>
      <category>cryptominingapps</category>
      <category>pinetwork</category>
      <category>cryptomining</category>
      <category>crypto</category>
    </item>
    <item>
      <title>
List of Best Crypto Mining Apps 2021
</title>
      <author>CryptominingApps for Android/iOS</author>
      <pubDate>Thu, 16 Sep 2021 16:59:58 +0000</pubDate>
      <link>https://dev.to/cryptominingapps/list-of-best-crypto-mining-apps-2021-42ne</link>
      <guid>https://dev.to/cryptominingapps/list-of-best-crypto-mining-apps-2021-42ne</guid>
      <description>&lt;p&gt;&lt;strong&gt;Cloud Based Crypto Mining Apps like Pi Network&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are looking for Cloud Based Crypto Mining Apps like Pi Network, so you find it difficult to look for legit apps, so you should always look for few specific elements such as; face behind app (founders), their research paper (White Paper), their future plans and what permissions these apps looking for when you install them in your phone. So i guess there are more then 12-15 crypto mining apps, which are offering free mining for their coins, but if you will look closely, so there are only 5 to7 apps which looks legit and most of these apps are following the model of Pi Network.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you wish to use these crypto mining apps, so you need to follow below mentioned process;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Download the app from Apple Store or Google Play Store.&lt;/p&gt;

&lt;p&gt;-Install the app.&lt;br&gt;
-Click on the signup button/page.&lt;br&gt;
-Create your id/username.&lt;br&gt;
-Use reference Id (reference Id will increase your hash rate or mining rate).&lt;br&gt;
-Check the app.&lt;br&gt;
-Daily open the app at-least once at same time and click on desired button to remain active.&lt;br&gt;
-And you are done!!! &lt;/p&gt;

&lt;p&gt;For more information about coin or mining, read their whitepaper and FAQ.&lt;/p&gt;

&lt;p&gt;There are many clouds based crypto mining apps like Pi Network and some of them are following which seems and sound legit because I myself using them from last 6 months and there is no harm to my smartphone instead, I'm gaining coins or tokens daily. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;--Pi Network (Android &amp;amp; iOS) &lt;br&gt;
--Bee Network (Android &amp;amp; iOS) &lt;br&gt;
--Alpha Network (Android) &lt;br&gt;
--TimeStope (Android) &lt;br&gt;
--Cloud Earning PHT or Phoneum (Android)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Referral codes for Best Crypto mining apps :-&lt;/p&gt;

&lt;p&gt;You can also refer these crypto mining apps to friends or relatives or people and it will increase your hash rate or mining rate as well as their hash rate too. If you looking for start and need reference codes, so you can use my referral codes because you need a referral code to join most of these networks. When you use someone‚Äôs code, they get a better mining rate. Make sure to choose someone who is always active, like I am, as this will improve your own mining rate too: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pi Network referral code: K4Ind &lt;br&gt;
Bee Network referral code: k4ind &lt;br&gt;
Alpha Network referral code: K24ind &lt;br&gt;
TimeStope witness (referral) code:  k4ind &lt;br&gt;
Cloud Earning PHT or Phoneum referral code: 4fwf3aun&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To know more about CryptominingApps --&amp;gt; &lt;a href="https://bit.ly/cryptominingapps"&gt;https://bit.ly/cryptominingapps&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Happy Mining!!! &lt;/p&gt;

</description>
      <category>cryptominingapps</category>
      <category>pinetwork</category>
      <category>cryptomining</category>
      <category>crypto</category>
    </item>
    <item>
      <title>Standard Banking Demo: Discovering Entando CMS Components</title>
      <author>Anthony Viard ü•ë</author>
      <pubDate>Thu, 16 Sep 2021 16:53:02 +0000</pubDate>
      <link>https://dev.to/entando/standard-banking-demo-discovering-entando-cms-components-4o9j</link>
      <guid>https://dev.to/entando/standard-banking-demo-discovering-entando-cms-components-4o9j</guid>
      <description>&lt;p&gt;Hey my fellow developers,&lt;/p&gt;

&lt;p&gt;Here‚Äôs the last blog post in the Standard Banking Demo series. After a deep dive into the microservices and micro frontends, we are now discovering the CMS components that make up this banking application and how we can manage our content to provide a great user experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#content-management-the-standard-demo-banner"&gt;
  &lt;/a&gt;
  Content Management: The Standard Demo Banner
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#compose-components-to-display-a-banner"&gt;
  &lt;/a&gt;
  Compose Components to Display a Banner
&lt;/h3&gt;

&lt;p&gt;In the Standard Banking Demo, banners are defined to display pieces of content in pages rendered in a modern website style.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pElTIBLS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6fk7vuc1rwecgecxo1z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pElTIBLS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6fk7vuc1rwecgecxo1z.png" alt="image4_2_d0"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will use this content type to explain how an Entando application leverages CMS components to build composable applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cms-component-architecture"&gt;
  &lt;/a&gt;
  CMS component architecture
&lt;/h3&gt;

&lt;p&gt;To manage content, we need to know how to define it (the Type), how to display it (the Model), and how to create a new instance (the Content).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ccpJcVoH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmaq2o61jrqah5lcvw89.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ccpJcVoH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmaq2o61jrqah5lcvw89.png" alt="image2_2_d0"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Content Type&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The ContentType defines the attributes available when adding a new instance of content. The type is defined by a name and a code and defines fields and rules to apply.&lt;/p&gt;

&lt;p&gt;Each attribute has a code, a name, and a type. Attributes can be mandatory and be used to filter content. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Content Template&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Content Template defines how a ContentType is displayed. A ContentType can be displayed in different ways by creating additional Content Templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Content&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Content refers to a piece (or instance) of content and is based on a ContentType. The Content defines the values of the attributes for a ContentType.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Assets&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A collection of assets you can use in a piece of content and share across multiple content entries, e.g. an image.&lt;/p&gt;

&lt;p&gt;When a page is designed, the Content widget is configured to render a piece of content based on the Content Template.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#compose-components-in-the-app-builder"&gt;
  &lt;/a&gt;
  Compose components in the App Builder
&lt;/h3&gt;

&lt;p&gt;In the Page Designer, this content is placed in a frame as a ‚ÄúContent‚Äù widget. Here in red, the Content widget is used to display the main banner on the homepage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qF6CAgv1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xnr2m93k8xcr8gja73k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qF6CAgv1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xnr2m93k8xcr8gja73k.png" alt="image5_2_d0"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This widget is configured to display the content you want to display along with the desired content template.&lt;/p&gt;

&lt;p&gt;In this case, the Home SD page contains multiple Content widgets that all use the same content type (SDB).&lt;/p&gt;

&lt;p&gt;Although the Content Type is the same, each section is rendered differently by choosing different Content Templates. There is a content template for displaying the main banner, another for displaying a light background, and another to render an accordion inside the banner.&lt;/p&gt;

&lt;p&gt;The content to display can be selected from the Settings menu in the kebab menu.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VHrFAf7z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vci0hfte2d2jvx9padf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VHrFAf7z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vci0hfte2d2jvx9padf.png" alt="image1_2_d0"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then we can select the content we want to display (displayed below in blue) and the template we want to use for this instance of content (in orange).&lt;/p&gt;

&lt;p&gt;Only a template linked to the same content type can be used.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W5qZqT3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/59lv6ew3owhix9pywz21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W5qZqT3m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/59lv6ew3owhix9pywz21.png" alt="image3_2_d0"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All of the CMS components are defined as code in the Standard Banking Demo.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cms-components-as-code"&gt;
  &lt;/a&gt;
  CMS Components as Code
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#the-standard-demo-banner-content-type"&gt;
  &lt;/a&gt;
  The Standard Demo Banner: Content Type
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;SDB&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Standard Demo Banners&lt;/span&gt;
&lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;0'&lt;/span&gt;
&lt;span class="na"&gt;attributes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
 &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;title&lt;/span&gt;
   &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Text&lt;/span&gt;
   &lt;span class="na"&gt;names&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
     &lt;span class="na"&gt;en&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;title&lt;/span&gt;
   &lt;span class="na"&gt;roles&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[]&lt;/span&gt;
   &lt;span class="na"&gt;disablingCodes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[]&lt;/span&gt;
   &lt;span class="na"&gt;mandatory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
   &lt;span class="na"&gt;listFilter&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
   &lt;span class="na"&gt;indexable&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
   &lt;span class="na"&gt;validationRules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
     &lt;span class="na"&gt;minLength&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;maxLength&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;regex&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;rangeStartString&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;rangeEndString&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;rangeStartStringAttribute&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;rangeEndStringAttribute&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;equalString&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;equalStringAttribute&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;rangeStartDate&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;rangeEndDate&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;rangeStartDateAttribute&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;rangeEndDateAttribute&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;equalDate&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;equalDateAttribute&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;rangeStartNumber&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;rangeStartNumberAttribute&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;rangeEndNumber&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;rangeEndNumberAttribute&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;equalNumber&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;equalNumberAttribute&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="na"&gt;ognlValidation&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
     &lt;span class="s"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#the-standard-demo-banner-template"&gt;
  &lt;/a&gt;
  The Standard Demo Banner: Template
&lt;/h4&gt;

&lt;p&gt;The template references the content type through the &lt;em&gt;contentType&lt;/em&gt; field: &lt;code&gt;SDB&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;id: 1
contentType: SDB
description: Main Banner
contentShape: |-
 &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"main-banner"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-lg-6 col-xs-12 main-banner-center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
             &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt; $content.title.text&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
                 &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;$content.subtitle.text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
             &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#the-standard-demo-banner-content"&gt;
  &lt;/a&gt;
  The Standard Demo Banner: Content
&lt;/h4&gt;

&lt;p&gt;The content references the content type through the &lt;em&gt;typeCode&lt;/em&gt; field: &lt;code&gt;SDB&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;SDB37&lt;/span&gt;
&lt;span class="na"&gt;typeCode&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;SDB&lt;/span&gt;
&lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;main-banner&lt;/span&gt;
&lt;span class="na"&gt;mainGroup&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;free&lt;/span&gt;
&lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PUBLIC&lt;/span&gt;
&lt;span class="na"&gt;attributes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
 &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;title&lt;/span&gt;
   &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
   &lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
     &lt;span class="na"&gt;en&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;A Better Way to Bank&lt;/span&gt;
   &lt;span class="na"&gt;elements&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[]&lt;/span&gt;
   &lt;span class="na"&gt;compositeelements&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[]&lt;/span&gt;
   &lt;span class="na"&gt;listelements&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;{}&lt;/span&gt;
   &lt;span class="s"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-standard-demo-homepage"&gt;
  &lt;/a&gt;
  The Standard Demo Homepage
&lt;/h3&gt;

&lt;p&gt;The page template defines the widgets on the page like the Content widget: &lt;code&gt;code: content_viewer&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The Content widget is then configured to display the top banner using the contentId &lt;code&gt;SDB37&lt;/code&gt; and the template &lt;code&gt;'modelId: 1'&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;homepagesd&lt;/span&gt;
&lt;span class="na"&gt;parentCode&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;homepage&lt;/span&gt;
&lt;span class="na"&gt;titles&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
 &lt;span class="na"&gt;en&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Home SD&lt;/span&gt;
 &lt;span class="na"&gt;it&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Home SD&lt;/span&gt;
&lt;span class="na"&gt;pageModel&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;seed_home&lt;/span&gt;
&lt;span class="na"&gt;ownerGroup&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;free&lt;/span&gt;
&lt;span class="na"&gt;joinGroups&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[]&lt;/span&gt;
&lt;span class="na"&gt;displayedInMenu&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;seo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
&lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;utf8&lt;/span&gt;
&lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;published&lt;/span&gt;
&lt;span class="na"&gt;widgets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
 &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Brand-Logo&lt;/span&gt;
   &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
   &lt;span class="na"&gt;pos&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
 &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Login_buttons&lt;/span&gt;
   &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;null&lt;/span&gt;
   &lt;span class="na"&gt;pos&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
 &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;content_viewer&lt;/span&gt;
   &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
     &lt;span class="na"&gt;contentDescription&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;main-banner&lt;/span&gt;
     &lt;span class="na"&gt;modelId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;1'&lt;/span&gt;
     &lt;span class="na"&gt;ownerGroup&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;free&lt;/span&gt;
     &lt;span class="na"&gt;contentId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;SDB37&lt;/span&gt;
     &lt;span class="na"&gt;joinGroups&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;[]'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This series is ending with the CMS Standard Banking Demo overview, it provides a working example of how traditional micro frontends can be composed alongside CMS components. The banner example is great to understand how a given content type can be used in multiple ways to render different content using the same attributes and improve your capacity to deliver content quickly and easily.&lt;/p&gt;

&lt;p&gt;User-editable content can also be exported using the bundle export/import feature and managed as code along with micro frontends and microservices across multiple environments or clusters.&lt;/p&gt;

&lt;p&gt;Now it‚Äôs time to play with the Standard Banking Demo. Be sure to follow our &lt;a href="https://dev.entando.org/v6.3.2/tutorials/samples/install-standard-demo.html#introduction"&gt;documentation&lt;/a&gt; and reach out on the &lt;a href="https://forum.entando.org/c/getting-started/12"&gt;Entando forum&lt;/a&gt; for feedback.&lt;/p&gt;

</description>
      <category>cms</category>
      <category>contentmanagement</category>
    </item>
    <item>
      <title>Function composition and higher-order function</title>
      <author>Benoit Ruiz</author>
      <pubDate>Thu, 16 Sep 2021 16:32:36 +0000</pubDate>
      <link>https://dev.to/ruizb/function-composition-and-higher-order-function-3953</link>
      <guid>https://dev.to/ruizb/function-composition-and-higher-order-function-3953</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#function-composition"&gt;Function composition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-far-we-can-go-with-it"&gt;How far we can go with it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#higherorder-function"&gt;Higher-order function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#function-composition"&gt;
  &lt;/a&gt;
  Function composition
&lt;/h2&gt;

&lt;p&gt;Function composition is a simple yet powerful key concept in Functional Programming.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-it"&gt;
  &lt;/a&gt;
  What is it?
&lt;/h3&gt;

&lt;p&gt;In a nutshell, it's the ability to combine behaviors together in a specific order, transforming data little by little from an initial &lt;em&gt;shape&lt;/em&gt; into new one.&lt;/p&gt;

&lt;p&gt;More concretely, it's the combination of functions where the output (returned value) of the previous function becomes the input (argument) of the next one, and so on until the last function.&lt;/p&gt;

&lt;p&gt;We can visualize it as a pipeline where some data of a given &lt;em&gt;shape&lt;/em&gt; enters on one side, then comes out with a new (same or different) &lt;em&gt;shape&lt;/em&gt; on the other side.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9hBEsiO_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ortpdv1qk43j3v0paxr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9hBEsiO_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ortpdv1qk43j3v0paxr.png" alt="A blue square goes inside an opaque pipe on one side, then comes out as a purple hexagon on the other side"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Composing functions yields... Another function! Therefore a pipeline is, in turn, a function. We don't know exactly how it's defined from an external point of view, and that's why it's so powerful: &lt;strong&gt;it's an abstraction that hides implementation details&lt;/strong&gt;. The intermediate steps to transform a &lt;code&gt;BlueSquare&lt;/code&gt; into a &lt;code&gt;PurpleHexagon&lt;/code&gt; are hidden/abstracted.&lt;/p&gt;

&lt;p&gt;Given the following 3 functions &lt;code&gt;f&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, and &lt;code&gt;h&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u2jV5mK2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2p6x5wsq1owahwvca9x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u2jV5mK2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2p6x5wsq1owahwvca9x.png" alt='3 functions are defined: "f" as blue square to green circle, "g" as green circle to red diamond, then "h" as red diamond to purple hexagon'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Can we compose these functions to create the pipeline from above? Let's see:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;f&lt;/code&gt; takes a &lt;code&gt;BlueSquare&lt;/code&gt; as input, then returns a &lt;code&gt;GreenCircle&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;g&lt;/code&gt; takes a &lt;code&gt;GreenCircle&lt;/code&gt; as input (therefore, it can be composed with &lt;code&gt;f&lt;/code&gt;, if &lt;code&gt;f&lt;/code&gt; comes first), then returns a &lt;code&gt;RedDiamond&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;h&lt;/code&gt; takes a &lt;code&gt;RedDiamond&lt;/code&gt; as input (therefore, it can be composed with &lt;code&gt;g&lt;/code&gt;, if &lt;code&gt;g&lt;/code&gt; comes first), then returns a &lt;code&gt;PurpleHexagon&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By aligning &lt;code&gt;f&lt;/code&gt;, then &lt;code&gt;g&lt;/code&gt; and finally &lt;code&gt;h&lt;/code&gt;, we end up with a pipeline that takes a &lt;code&gt;BlueSquare&lt;/code&gt; as input, and returns a &lt;code&gt;PurpleHexagon&lt;/code&gt;, which is exactly what we were looking for!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6TwZusds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xznkhlvph2h2o37zr4ot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6TwZusds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xznkhlvph2h2o37zr4ot.png" alt='Composition of the 3 functions "f", "g" and "h" illustrated, ending up with a final function "h round g round f", taking a blue square as input and returning a purple hexagon'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The weird notation with circles is the way &lt;a href="https://en.wikipedia.org/wiki/Function_composition"&gt;function composition in mathematics&lt;/a&gt; is written: &lt;code&gt;h ‚àò g ‚àò f&lt;/code&gt; can be read as "h round g round f", and is applied from right to left: &lt;code&gt;h(g(f(x)))&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#how-far-we-can-go-with-it"&gt;
  &lt;/a&gt;
  How far we can go with it
&lt;/h3&gt;

&lt;p&gt;Since pipelines are functions, it means we can compose them with other functions as well. This is the &lt;strong&gt;essence&lt;/strong&gt; of software programming: composing smaller pieces together to end up with a complex system that fulfills all the requirements.&lt;/p&gt;

&lt;p&gt;Suppose we need to transform some &lt;code&gt;GreenCircle&lt;/code&gt; into a &lt;code&gt;PurpleHexagon&lt;/code&gt; somewhere in our code base. Do we have to implement this function by ourselves, or can we simply compose functions that already exist?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BBWauxIz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bo4wm4rwd2kprspomk61.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BBWauxIz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bo4wm4rwd2kprspomk61.png" alt="Can we compose the functions defined earlier to come up with a new function that takes a green circle as input, and returns a purple hexagon?"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Here, we are assuming the actual implementations of the functions from above suit our needs. In reality, there could be several implementations for a function transforming a &lt;code&gt;GreenCircle&lt;/code&gt; into a &lt;code&gt;PurpleHexagon&lt;/code&gt;. For example, &lt;code&gt;isEven&lt;/code&gt; and &lt;code&gt;isOdd&lt;/code&gt; are both functions that transform numbers (green circles) into booleans (purple hexagons), but with different implementations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of course we can, by composing &lt;code&gt;g&lt;/code&gt; with &lt;code&gt;h&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IJKQui0d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5pywjif7tzr0p2igunem.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IJKQui0d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5pywjif7tzr0p2igunem.png" alt='The composition of "g" and "h" functions yields a function that takes a green circle as input, and returns a purple hexagon'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And since this pipeline is a function, we can actually define the previous pipeline using this one and &lt;code&gt;f&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_lmZB1ln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0wh8r82q4lcmhmmkfk3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_lmZB1ln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0wh8r82q4lcmhmmkfk3.png" alt='The composition of the function "g" with the pipeline "h round g" yields the pipeline "(h round g) round f", which is the same pipeline as the first example, but with the reusable "h round g" that we just defined'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This way, we have reusable units/functions in our code base that can be composed anywhere to form new functions/pipelines that are more and more complex.&lt;/p&gt;

&lt;p&gt;Shapes are nice, but if you're looking for something more concrete, here's an example with simple functions in TypeScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getNumberOfCharacters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isGreaterThan5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="c1"&gt;// pipeline definition&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isTextLongEnough&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="nx"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getNumberOfCharacters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isGreaterThan5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isTextLongEnough&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isTextLongEnough&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abcde&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm using the &lt;code&gt;flow&lt;/code&gt; function from the &lt;a href="https://github.com/gcanti/fp-ts"&gt;fp-ts&lt;/a&gt; library, which is used specifically to compose functions, from left to right. I could've written it the following way, but it's less readable in my opinion:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isTextLongEnough&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="nx"&gt;isGreaterThan5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getNumberOfCharacters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The advantage of having small units/functions is that we can reuse some of them to create different pipelines. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isEven&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hasEvenNumberOfCharacters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="nx"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getNumberOfCharacters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isEven&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hasEvenNumberOfCharacters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hasEvenNumberOfCharacters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;abcd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wait a minute... All these functions have only 1 argument, also called &lt;em&gt;unary functions&lt;/em&gt;. What happens if we want to compose functions that take multiple arguments? For example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2z-9zvlB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4d2winwid0haat7s7uwb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2z-9zvlB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4d2winwid0haat7s7uwb.png" alt="Function that takes 3 arguments (in the order: yellow star, green circle, and cyan diamond) and returns a red diamond"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or more concretely:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isGreaterThan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;limit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The answer lies in &lt;strong&gt;currying&lt;/strong&gt; and &lt;strong&gt;partial application&lt;/strong&gt;, which are 2 concepts we'll see later in this series. Stay tuned!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#higherorder-function"&gt;
  &lt;/a&gt;
  Higher-order function
&lt;/h2&gt;

&lt;p&gt;A higher-order function, or HOF for short, is a function that takes at least a function as its argument(s), and/or returns a new function.&lt;/p&gt;

&lt;p&gt;If you have used the &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; methods on an array in JavaScript, then you have already used HOFs, because these 2 methods take a function as their arguments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;evenNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// or the shorter version: [1, 2, 3, 4].filter(isEven)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evenNumbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [2, 4]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doubledNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;doubledNumbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [2, 4, 6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can create our own higher-order functions as well. Let's have a look at a simple example, in TypeScript and Scala:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="kr"&gt;enum&lt;/span&gt; &lt;span class="nx"&gt;Shape&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;BlueSquare&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;GreenCircle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;RedDiamond&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createShapes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;volume&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;generateShape&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Shape&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Shape&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;volume&lt;/span&gt;&lt;span class="p"&gt;)].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;generateShape&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="nc"&gt;Shape&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;BlueSquare&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Shape&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;GreenCircle&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Shape&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;RedDiamond&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Shape&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;createShapes&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;volume&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;        &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;generateShape&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Shape&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Shape&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt;
  &lt;span class="nv"&gt;List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;range&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;volume&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="py"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;generateShape&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the &lt;code&gt;createShapes&lt;/code&gt; function is a HOF, because it takes a function as one of its arguments: &lt;code&gt;generateShape&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you are familiar with design patterns from Object-Oriented Programming, then you might have thought about the &lt;em&gt;Strategy pattern&lt;/em&gt; here, and you would've been correct. In fact, a lot of OO design patterns can be implemented using HOFs. That being said, some of the OO patterns don't make sense in FP, since we are not trying to solve problems with classes and objects, but rather with data and functions.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;flow&lt;/code&gt; function that we saw earlier is also a HOF, since it takes multiple functions as its arguments, and returns a function at the end.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can define a higher-order function in TypeScript to emulate some form of &lt;em&gt;pattern matching&lt;/em&gt; on these shapes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;matchShape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;onBlueSquare&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BlueSquare&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;onGreenCircle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GreenCircle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;onRedDiamond&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RedDiamond&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Shape&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="na"&gt;BlueSquare&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;onBlueSquare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="na"&gt;GreenCircle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;onGreenCircle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="na"&gt;RedDiamond&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;onRedDiamond&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;matchShape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;shape&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Blue is my favorite color!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;shape&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I love green tea!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;shape&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I have a red car!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;GreenCircle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, &lt;code&gt;matchShape&lt;/code&gt; is a HOF as it takes 3 arguments that are functions, and returns a new function that takes a &lt;code&gt;Shape&lt;/code&gt; as its argument.&lt;/p&gt;

&lt;p&gt;If you are from the web app development world, you might have crossed path with &lt;a href="https://reactjs.org/docs/higher-order-components.html"&gt;Higher-Order Components&lt;/a&gt;, or HOCs. In React, a HOC is a function that takes a component as its argument, and returns a new component. We can clearly see the similarities with HOFs here.&lt;/p&gt;




&lt;p&gt;Alright, we've reached the end of this chapter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Function composition is the ability to combine functions together, in a specific order, to transform some shape into a new shape.&lt;/li&gt;
&lt;li&gt;A higher-order function, or HOF, is a function that takes at least 1 function as its argument(s), and may return a new function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading this far! I hope everything was clear and you learned something. If you have any question or need some clarifications, feel free to leave a comment :) &lt;/p&gt;

&lt;p&gt;The next article in this series will be about "declarative vs imperative" programming. See you next time!&lt;/p&gt;




&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@xavi_cabrera?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Xavi Cabrera&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pictures created with &lt;a href="https://excalidraw.com/"&gt;Excalidraw&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>functional</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>typescript</category>
    </item>
  </channel>
</rss>
