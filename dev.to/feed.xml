<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Self-Parking Car in &lt;500 Lines of Code</title>
      <author>Oleksii Trekhleb</author>
      <pubDate>Tue, 28 Sep 2021 14:43:58 +0000</pubDate>
      <link>https://dev.to/trekhleb/self-parking-car-in-500-lines-of-code-58ea</link>
      <guid>https://dev.to/trekhleb/self-parking-car-in-500-lines-of-code-58ea</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Training the car to do self-parking using a genetic algorithm&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;In this article, we'll train the car to do self-parking using a &lt;a href="https://en.wikipedia.org/wiki/Genetic_algorithm"&gt;genetic algorithm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We'll create &lt;strong&gt;the 1st generation&lt;/strong&gt; of cars with random genomes that will behave something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SEZW4Dye--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/02-cars-before-01.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SEZW4Dye--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/02-cars-before-01.gif" alt="The 1st generation of cars with random genomes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On the ‚âà40th generation&lt;/strong&gt; the cars start learning what the self-parking is and start getting closer to the parking spot:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m3V8XzKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/03-car-after-01.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m3V8XzKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/03-car-after-01.gif" alt="The 40th generation start learning how to park"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another example with a bit more challenging starting point:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BuDkpJTu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/03-car-after-03.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BuDkpJTu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/03-car-after-03.gif" alt="More challenging starting point for self-parking"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Yeah-yeah, the cars are hitting some other cars along the way, and also are not perfectly fitting the parking spot, but this is only the 40th generation since the creation of the world for them, so be merciful and give the cars some space to grow :D&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You may launch the üöï &lt;a href="https://trekhleb.dev/self-parking-car-evolution"&gt;Self-parking Car Evolution Simulator&lt;/a&gt; to see the evolution process directly in your browser. The simulator gives you the following opportunities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You may &lt;a href="https://trekhleb.dev/self-parking-car-evolution?parking=evolution#/"&gt;train the cars from scratch&lt;/a&gt; and adjust genetic parameters by yourself&lt;/li&gt;
&lt;li&gt;You may &lt;a href="https://trekhleb.dev/self-parking-car-evolution?parking=automatic#/"&gt;see the trained self-parking cars in action&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;You may also &lt;a href="https://trekhleb.dev/self-parking-car-evolution?parking=manual#/"&gt;try to park the car manually&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The genetic algorithm for this project is implemented in TypeScript. The full genetic source code will be shown in this article, but you may also find the final code examples in the &lt;a href="https://github.com/trekhleb/self-parking-car-evolution"&gt;Evolution Simulator repository&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We're going to use a genetic algorithm for the particular task of evolving cars' genomes. However, this article only touches on the basics of the algorithm and is by no means a complete guide to the genetic algorithm topic.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Having that said, let's deep dive into more details...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-plan"&gt;
  &lt;/a&gt;
  The Plan
&lt;/h2&gt;

&lt;p&gt;Step-by-step we're going to break down a high-level task of creating the self-parking car to the straightforward low-level optimization problem of finding the optimal combination of &lt;code&gt;180&lt;/code&gt; bits (finding the optimal car genome).&lt;/p&gt;

&lt;p&gt;Here is what we're going to do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;üí™üèª Give the &lt;strong&gt;muscles&lt;/strong&gt; (engine, steering wheel) to the car so that it could move towards the parking spot.&lt;/li&gt;
&lt;li&gt;üëÄ Give the &lt;strong&gt;eyes&lt;/strong&gt; (sensors) to the car so that it could see the obstacles around.&lt;/li&gt;
&lt;li&gt;üß† Give the &lt;strong&gt;brain&lt;/strong&gt; to the car that will control the muscles (movements) based on what the car sees (obstacles via sensors). The brain will be simply a pure function &lt;code&gt;movements = f(sensors)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;üß¨ &lt;strong&gt;Evolve the brain&lt;/strong&gt; to do the right moves based on the sensors input. This is where we will apply a genetic algorithm. Generation after generation our brain function &lt;code&gt;movements = f(sensors)&lt;/code&gt; will learn how to move the car towards the parking spot.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#giving-the-muscles-to-the-car"&gt;
  &lt;/a&gt;
  Giving the muscles to the car
&lt;/h2&gt;

&lt;p&gt;To be able to move, the car would need "muscles". Let's give the car two types of muscles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Engine muscle&lt;/strong&gt; - allows the car to move &lt;em&gt;‚Üì back&lt;/em&gt;, &lt;em&gt;‚Üë forth&lt;/em&gt;, or &lt;em&gt;‚óé stand steel&lt;/em&gt; (neutral gear)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Steering wheel muscle&lt;/strong&gt; - allows the car to turn &lt;em&gt;‚Üê left&lt;/em&gt;, &lt;em&gt;‚Üí right&lt;/em&gt;, or &lt;em&gt;‚óé go straight&lt;/em&gt; while moving&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With these two muscles the car can perform the following movements:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_8eAkOlE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/03-car-muscles-01.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_8eAkOlE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/03-car-muscles-01.gif" alt="Car movements achieved by car muscles"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In our case, the muscles are receivers of the signals that come from the brain once every &lt;code&gt;100ms&lt;/code&gt; (milliseconds). Based on the value of the brain's signal the muscles act differently. We'll cover the "brain" part below, but for now, let's say that our brain may send only 3 possible signals to each muscle: &lt;code&gt;-1&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, or &lt;code&gt;+1&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;MuscleSignal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example, the brain may send the signal with the value of &lt;code&gt;+1&lt;/code&gt; to the engine muscle and it will start moving the car forward. The signal &lt;code&gt;-1&lt;/code&gt; to the engine moves the car backward. At the same time, if the brain will send the signal of &lt;code&gt;-1&lt;/code&gt; to the steering wheel muscle, it will turn the car to the left, etc.&lt;/p&gt;

&lt;p&gt;Here is how the brain signal values map to the muscle actions in our case:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Muscle&lt;/th&gt;
&lt;th&gt;&lt;code&gt;Signal = -1&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;Signal = 0&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;Signal = +1&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Engine&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;‚Üì Backward&lt;/td&gt;
&lt;td&gt;‚óé Neutral&lt;/td&gt;
&lt;td&gt;‚Üë Forward&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Steering wheel&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;‚Üê Left&lt;/td&gt;
&lt;td&gt;‚óé Straight&lt;/td&gt;
&lt;td&gt;‚Üí Right&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;You may &lt;a href="https://trekhleb.dev/self-parking-car-evolution?parking=manual#/"&gt;use the Evolution Simulator&lt;/a&gt; and try to park the car manually to see how the car muscles work. Every time you press one of the &lt;code&gt;WASD&lt;/code&gt; keyboard keys (or use a touch-screen joystick) you send these &lt;code&gt;-1&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, or &lt;code&gt;+1&lt;/code&gt; signals to the engine and steering wheel muscles.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#giving-the-eyes-to-the-car"&gt;
  &lt;/a&gt;
  Giving the eyes to the car
&lt;/h2&gt;

&lt;p&gt;Before our car will learn how to do self-parking using its muscles, it needs to be able to "see" the surroundings. Let's give it the &lt;code&gt;8&lt;/code&gt; eyes in a form of distance sensors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each sensor can detect the obstacle in a distance range of &lt;code&gt;0-4m&lt;/code&gt; (meters).&lt;/li&gt;
&lt;li&gt;Each sensor reports the latest information about the obstacles it "sees" to the car's "brain" every &lt;code&gt;100ms&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Whenever the sensor doesn't see any obstacles it reports the value of &lt;code&gt;0&lt;/code&gt;. On the contrary, if the value of the sensor is small but not zero (i.e. &lt;code&gt;0.01m&lt;/code&gt;) it would mean that the obstacle is close.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z3_blDGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/04-sensors-01.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z3_blDGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/04-sensors-01.jpg" alt="Car sensors with distances"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You may &lt;a href="https://trekhleb.dev/self-parking-car-evolution?parking=manual#/"&gt;use the Evolution Simulator&lt;/a&gt; and see how the color of each sensor changes based on how close the obstacle is.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Sensors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#giving-the-brain-to-the-car"&gt;
  &lt;/a&gt;
  Giving the brain to the car
&lt;/h2&gt;

&lt;p&gt;At this moment, our car can "see" and "move", but there is no "coordinator", that would transform the signals from the "eyes" to the proper movements of the "muscles". We need to give the car a "brain".&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#brain-input"&gt;
  &lt;/a&gt;
  Brain input
&lt;/h3&gt;

&lt;p&gt;As an input from the sensors, every &lt;code&gt;100ms&lt;/code&gt; the brain will be getting &lt;code&gt;8&lt;/code&gt; float numbers, each one in range of &lt;code&gt;[0...4]&lt;/code&gt;. For example, the input might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sensors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Sensors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;s0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;s3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;s4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;s5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;s6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;s7&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="c1"&gt;// i.e. üß† ‚Üê [0, 0.5, 4, 0.002, 0, 3.76, 0, 1.245]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#brain-output"&gt;
  &lt;/a&gt;
  Brain output
&lt;/h3&gt;

&lt;p&gt;Every &lt;code&gt;100ms&lt;/code&gt; the brain should produce two integers as an output:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;One number as a signal for the engine: &lt;code&gt;engineSignal&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;One number as a signal for the steering wheel: &lt;code&gt;wheelSignal&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each number should be of the type &lt;code&gt;MuscleSignal&lt;/code&gt; and might take one of three values: &lt;code&gt;-1&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, or &lt;code&gt;+1&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#brain-formulasfunctions"&gt;
  &lt;/a&gt;
  Brain formulas/functions
&lt;/h3&gt;

&lt;p&gt;Keeping in mind the brain's input and output mentioned above we may say that the brain is just a function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;engineSignal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wheelSignal&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;brainToMuscleSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;brainFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sensors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// i.e. { engineSignal: 0, wheelSignal: -1 } ‚Üê üß† ‚Üê [0, 0.5, 4, 0.002, 0, 3.76, 0, 1.245]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where &lt;code&gt;brainToMuscleSignal()&lt;/code&gt; is a function that converts raw brain signals (any float number) to muscle signals (to  &lt;code&gt;-1&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, or &lt;code&gt;+1&lt;/code&gt; number) so that muscles could understand it. We'll implement this converter function below.&lt;/p&gt;

&lt;p&gt;The main question now is what kind of a function the &lt;code&gt;brainFunction()&lt;/code&gt; is.&lt;/p&gt;

&lt;p&gt;To make the car smarter and its movements to be more sophisticated we could go with a &lt;a href="https://en.wikipedia.org/wiki/Multilayer_perceptron"&gt;Multilayer Perceptron&lt;/a&gt;. The name is a bit scary but this is a simple Neural Network with a basic architecture (think of it as a big formula with many parameters/coefficients).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I've covered Multilayer Perceptrons with a bit more details in my &lt;a href="https://github.com/trekhleb/homemade-machine-learning#-multilayer-perceptron-mlp"&gt;homemade-machine-learning&lt;/a&gt;, &lt;a href="https://github.com/trekhleb/machine-learning-experiments#multilayer-perceptron-mlp-or-simple-neural-network-nn"&gt;machine-learning-experiments&lt;/a&gt;, and &lt;a href="https://github.com/trekhleb/nano-neuron"&gt;nano-neuron&lt;/a&gt; projects. You may even challenge that simple network &lt;a href="https://trekhleb.dev/machine-learning-experiments/#/experiments/DigitsRecognitionMLP"&gt;to recognize your written digits&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, to avoid the introduction of a whole new concept of Neural Networks, we'll go with a much simpler approach and we'll use two &lt;strong&gt;Linear Polynomials&lt;/strong&gt; with multiple variables (to be more precise, each polynomial will have exactly &lt;code&gt;8&lt;/code&gt; variables, since we have &lt;code&gt;8&lt;/code&gt; sensors) which will look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;engineSignal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;brainToMuscleSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;s0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e7&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;s7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;e8&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- brainFunction&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;wheelSignal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;brainToMuscleSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;s0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;w7&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;s7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;w8&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- brainFunction&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;[s0, s1, ..., s7]&lt;/code&gt; - the &lt;code&gt;8&lt;/code&gt; variables, which are the &lt;code&gt;8&lt;/code&gt; sensor values. These are dynamic.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;[e0, e1, ..., e8]&lt;/code&gt; - the &lt;code&gt;9&lt;/code&gt; coefficients for the engine polynomial. These the car will need to learn, and they will be static.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;[w0, w1, ..., w8]&lt;/code&gt; - the &lt;code&gt;9&lt;/code&gt; coefficients for the steering wheel polynomial. These the car will need to learn, and they will be static&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The cost of using the simpler function for the brain will be that the car won't be able to learn some sophisticated moves and also won't be able to generalize well and adapt well to unknown surroundings. But for our particular parking lot and for the sake of demonstrating the work of a genetic algorithm it should still be enough.&lt;/p&gt;

&lt;p&gt;We may implement the generic polynomial function in the following way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Coefficients&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="c1"&gt;// Calculates the value of a linear polynomial based on the coefficients and variables.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;linearPolynomial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coefficients&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coefficients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coefficients&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Incompatible number of polynomial coefficients and variables&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;coefficients&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;coefficient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;coefficientIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coefficientIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;coefficient&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;coefficientIndex&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// The last coefficient needs to be added up without multiplication.&lt;/span&gt;
      &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;coefficient&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The car's brain in this case will consist of two polynomials and will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;engineSignal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MuscleSignal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;brainToMuscleSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;linearPolynomial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;engineCoefficients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sensors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wheelSignal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MuscleSignal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;brainToMuscleSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;linearPolynomial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wheelCoefficients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sensors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output of a &lt;code&gt;linearPolynomial()&lt;/code&gt; function is a float number. The &lt;code&gt;brainToMuscleSignal()&lt;/code&gt; function need to convert the wide range of floats to three particular integers, and it will do it in two steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Convert the float of a wide range (i.e. &lt;code&gt;0.456&lt;/code&gt; or &lt;code&gt;3673.45&lt;/code&gt; or &lt;code&gt;-280&lt;/code&gt;) to the float in a range of &lt;code&gt;(0...1)&lt;/code&gt; (i.e. &lt;code&gt;0.05&lt;/code&gt; or &lt;code&gt;0.86&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Convert the float in a range of &lt;code&gt;(0...1)&lt;/code&gt; to one of three integer values of &lt;code&gt;-1&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, or &lt;code&gt;+1&lt;/code&gt;. For example, the floats that are close to &lt;code&gt;0&lt;/code&gt; will be converted to &lt;code&gt;-1&lt;/code&gt;, the floats that are close to &lt;code&gt;0.5&lt;/code&gt; will be converted to &lt;code&gt;0&lt;/code&gt;, and the floats that are close to &lt;code&gt;1&lt;/code&gt; will be converted to &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To do the first part of the conversion we need to introduce a &lt;a href="https://en.wikipedia.org/wiki/Sigmoid_function"&gt;Sigmoid Function&lt;/a&gt; which implements the following formula:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rkeSZtoj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/05-sigmoid-01.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rkeSZtoj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/05-sigmoid-01.svg" alt="Sigmoid formula"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It converts the wide range of floats (the &lt;code&gt;x&lt;/code&gt; axis) to float numbers with a limited range of &lt;code&gt;(0...1)&lt;/code&gt; (the &lt;code&gt;y&lt;/code&gt; axis). This is exactly what we need.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Naaewu_X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/05-sigmoid-02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Naaewu_X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/05-sigmoid-02.png" alt="Sigmoid graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is how the conversion steps would look on the Sigmoid graph.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_vAigmLY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/05-sigmoid-03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_vAigmLY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/05-sigmoid-03.png" alt="Conversion steps on the graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The implementation of two conversion steps mentioned above would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Calculates the sigmoid value for a given number.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sigmoid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;E&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Converts sigmoid value (0...1) to the muscle signals (-1, 0, +1)&lt;/span&gt;
&lt;span class="c1"&gt;// The margin parameter is a value between 0 and 0.5:&lt;/span&gt;
&lt;span class="c1"&gt;// [0 ... (0.5 - margin) ... 0.5 ... (0.5 + margin) ... 1]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sigmoidToMuscleSignal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sigmoidValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;MuscleSignal&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sigmoidValue&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sigmoidValue&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Converts raw brain signal to the muscle signal.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;brainToMuscleSignal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rawBrainSignal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;MuscleSignal&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;normalizedBrainSignal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sigmoid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rawBrainSignal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sigmoidToMuscleSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;normalizedBrainSignal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#cars-genome-dna"&gt;
  &lt;/a&gt;
  Car's genome (DNA)
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;‚òùüèª The main conclusion from the "Eyes", "Muscles" and "Brain" sections above should be this: the coefficients &lt;code&gt;[e0, e1, ..., e8]&lt;/code&gt; and &lt;code&gt;[w0, w1, ..., w8]&lt;/code&gt; defines the behavior of the car. These &lt;code&gt;18&lt;/code&gt; numbers together form the unique car's Genome (or car's DNA).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#car-genome-in-a-decimal-form"&gt;
  &lt;/a&gt;
  Car genome in a decimal form
&lt;/h3&gt;

&lt;p&gt;Let's join the &lt;code&gt;[e0, e1, ..., e8]&lt;/code&gt; and &lt;code&gt;[w0, w1, ..., w8]&lt;/code&gt; brain coefficients together to form a car's genome in a decimal form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Car genome as a list of decimal numbers (coefficients).&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;carGenomeBase10&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;e0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...,&lt;/span&gt; &lt;span class="nx"&gt;e8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...,&lt;/span&gt; &lt;span class="nx"&gt;w8&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// i.e. carGenomeBase10 = [17.5, 0.059, -46, 25, 156, -0.085, -0.207, -0.546, 0.071, -58, 41, 0.011, 252, -3.5, -0.017, 1.532, -360, 0.157]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#car-genome-in-a-binary-form"&gt;
  &lt;/a&gt;
  Car genome in a binary form
&lt;/h3&gt;

&lt;p&gt;Let's move one step deeper (to the level of the genes) and convert the decimal numbers of the car's genome to the binary format (to the plain &lt;code&gt;1&lt;/code&gt;s and &lt;code&gt;0&lt;/code&gt;s).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I've described in the detail the process of converting the floating-point numbers to binary numbers in the &lt;a href="https://trekhleb.dev/blog/2021/binary-floating-point/"&gt;Binary representation of the floating-point numbers&lt;/a&gt; article. You might want to check it out if the code in this section is not clear.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is a quick example of how the floating-point number may be converted to the &lt;code&gt;16 bits&lt;/code&gt; binary number (again, feel free to &lt;a href="https://trekhleb.dev/blog/2021/binary-floating-point/"&gt;read this first&lt;/a&gt; if the example is confusing):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CkfmTH67--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/06-floating-point-conversion-01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CkfmTH67--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/06-floating-point-conversion-01.png" alt="Example of floating to binary numbers conversion"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In our case, to reduce the genome length, we will convert each floating coefficient to the non-standard &lt;code&gt;10 bits&lt;/code&gt; binary number (&lt;code&gt;1&lt;/code&gt; sign bit, &lt;code&gt;4&lt;/code&gt; exponent bits, &lt;code&gt;5&lt;/code&gt; fraction bits).&lt;/p&gt;

&lt;p&gt;We have &lt;code&gt;18&lt;/code&gt; coefficients in total, every coefficient will be converted to &lt;code&gt;10&lt;/code&gt; bits number. It means that the car's genome will be an array of &lt;code&gt;0&lt;/code&gt;s and &lt;code&gt;1&lt;/code&gt;s with a length of &lt;code&gt;18 * 10 = 180 bits&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, for the genome in a decimal format that was mentioned above, its binary representation would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Gene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Genome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Gene&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;genome&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Genome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="c1"&gt;// Engine coefficients.&lt;/span&gt;
  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- 17.5&lt;/span&gt;
  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- 0.059&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- -46&lt;/span&gt;
  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- 25&lt;/span&gt;
  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- 156&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- -0.085&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- -0.207&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- -0.546&lt;/span&gt;
  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- 0.071&lt;/span&gt;

  &lt;span class="c1"&gt;// Wheels coefficients.&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- -58&lt;/span&gt;
  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- 41&lt;/span&gt;
  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- 0.011&lt;/span&gt;
  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- 252&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- -3.5&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- -0.017&lt;/span&gt;
  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- 1.532&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- -360&lt;/span&gt;
  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- 0.157&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Oh my! The binary genome looks so cryptic. But can you imagine, that these &lt;code&gt;180&lt;/code&gt; zeroes and ones alone define how the car behaves in the parking lot! It's like you hacked someone's DNA and know what each gene means exactly. Amazing!&lt;/p&gt;

&lt;p&gt;By the way, you may see the exact values of genomes and coefficients for the best performing car on the &lt;a href="https://trekhleb.dev/self-parking-car-evolution?parking=evolution#/"&gt;Evolution Simulator&lt;/a&gt; dashboard:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mewj-4rH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/06-genome-examples.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mewj-4rH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/06-genome-examples.png" alt="Car genomes and coefficients examples"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the source code that performs the conversion from binary to decimal format for the floating-point numbers (the brain will need it to decode the genome and to produce the muscle signals based on the genome data):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Bit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Bits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Bit&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;PrecisionConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;signBitsCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;exponentBitsCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;fractionBitsCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;totalBitsCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;PrecisionConfigs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;custom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PrecisionConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;precisionConfigs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PrecisionConfigs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Custom-made 10-bits precision for faster evolution progress.&lt;/span&gt;
  &lt;span class="na"&gt;custom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;signBitsCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;exponentBitsCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fractionBitsCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;totalBitsCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Converts the binary representation of the floating-point number to decimal float number.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bitsToFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Bits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;precisionConfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PrecisionConfig&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;signBitsCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;exponentBitsCount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;precisionConfig&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Figuring out the sign.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sign&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="nx"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// -1^1 = -1, -1^0 = 1&lt;/span&gt;

  &lt;span class="c1"&gt;// Calculating the exponent value.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;exponentBias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;exponentBitsCount&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;exponentBits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;signBitsCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;signBitsCount&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;exponentBitsCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;exponentUnbiased&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;exponentBits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;exponentSoFar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentBit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Bit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bitIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bitPowerOfTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;exponentBitsCount&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;bitIndex&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;exponentSoFar&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;currentBit&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;bitPowerOfTwo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;exponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;exponentUnbiased&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;exponentBias&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Calculating the fraction value.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fractionBits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;signBitsCount&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;exponentBitsCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fraction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fractionBits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fractionSoFar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentBit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Bit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bitIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bitPowerOfTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bitIndex&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fractionSoFar&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;currentBit&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;bitPowerOfTwo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Putting all parts together to calculate the final number.&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sign&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="nx"&gt;exponent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;fraction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Converts the 8-bit binary representation of the floating-point number to decimal float number.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bitsToFloat10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Bits&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;bitsToFloat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;precisionConfigs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;custom&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#brain-function-working-with-binary-genome"&gt;
  &lt;/a&gt;
  Brain function working with binary genome
&lt;/h3&gt;

&lt;p&gt;Previously our brain function was working with the decimal form of &lt;code&gt;engineCoefficients&lt;/code&gt; and &lt;code&gt;wheelCoefficients&lt;/code&gt; polynomial coefficients directly. However, these coefficients are now encoded in the binary form of a genome. Let's add a &lt;code&gt;decodeGenome()&lt;/code&gt; function that will extract coefficients from the genome and let's rewrite our brain functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Car has 16 distance sensors.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CAR_SENSORS_NUM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Additional formula coefficient that is not connected to a sensor.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BIAS_UNITS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// How many genes do we need to encode each numeric parameter for the formulas.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GENES_PER_NUMBER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;precisionConfigs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;custom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;totalBitsCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Based on 8 distance sensors we need to provide two formulas that would define car's behavior:&lt;/span&gt;
&lt;span class="c1"&gt;// 1. Engine formula (input: 8 sensors; output: -1 (backward), 0 (neutral), +1 (forward))&lt;/span&gt;
&lt;span class="c1"&gt;// 2. Wheels formula (input: 8 sensors; output: -1 (left), 0 (straight), +1 (right))&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ENGINE_FORMULA_GENES_NUM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CAR_SENSORS_NUM&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;BIAS_UNITS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;GENES_PER_NUMBER&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WHEELS_FORMULA_GENES_NUM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CAR_SENSORS_NUM&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;BIAS_UNITS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;GENES_PER_NUMBER&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// The length of the binary genome of the car.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GENOME_LENGTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ENGINE_FORMULA_GENES_NUM&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;WHEELS_FORMULA_GENES_NUM&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;DecodedGenome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;engineFormulaCoefficients&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coefficients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;wheelsFormulaCoefficients&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coefficients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Converts the genome from a binary form to the decimal form.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;genomeToNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;genome&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Genome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;genesPerNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;genome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;genesPerNumber&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Wrong number of genes in the numbers genome&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numberIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;numberIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;genome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;numberIndex&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;genesPerNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bitsToFloat10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;genome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;numberIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;numberIndex&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;genesPerNumber&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Converts the genome from a binary form to the decimal form&lt;/span&gt;
&lt;span class="c1"&gt;// and splits the genome into two sets of coefficients (one set for each muscle).&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decodeGenome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;genome&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Genome&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;DecodedGenome&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;engineGenes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Gene&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;genome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ENGINE_FORMULA_GENES_NUM&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;wheelsGenes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Gene&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;genome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;ENGINE_FORMULA_GENES_NUM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;ENGINE_FORMULA_GENES_NUM&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;WHEELS_FORMULA_GENES_NUM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;engineFormulaCoefficients&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coefficients&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;genomeToNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;engineGenes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;GENES_PER_NUMBER&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;wheelsFormulaCoefficients&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coefficients&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;genomeToNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wheelsGenes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;GENES_PER_NUMBER&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;engineFormulaCoefficients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;wheelsFormulaCoefficients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Update brain function for the engine muscle.&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getEngineMuscleSignal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;genome&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Genome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sensors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Sensors&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;MuscleSignal&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;engineFormulaCoefficients&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;coefficients&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;decodeGenome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;genome&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rawBrainSignal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;linearPolynomial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coefficients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sensors&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;brainToMuscleSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rawBrainSignal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Update brain function for the wheels muscle.&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getWheelsMuscleSignal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;genome&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Genome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sensors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Sensors&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;MuscleSignal&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;wheelsFormulaCoefficients&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;coefficients&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;decodeGenome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;genome&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rawBrainSignal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;linearPolynomial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coefficients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sensors&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;brainToMuscleSignal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rawBrainSignal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#selfdriving-car-problem-statement"&gt;
  &lt;/a&gt;
  Self-driving car problem statement
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;‚òùüèª So, finally, we've got to the point when the high-level problem of making the car to be a self-parking car is broken down to the straightforward optimization problem of finding the optimal combination of &lt;code&gt;180&lt;/code&gt; ones and zeros (finding the "good enough" car's genome). Sounds simple, doesn't it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#naive-approach"&gt;
  &lt;/a&gt;
  Naive approach
&lt;/h3&gt;

&lt;p&gt;We could approach the problem of finding the "good enough" genome in a naive way and try out all possible combinations of genes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;[0, ..., 0, 0]&lt;/code&gt;, and then...&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;[0, ..., 0, 1]&lt;/code&gt;, and then...&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;[0, ..., 1, 0]&lt;/code&gt;, and then...&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;[0, ..., 1, 1]&lt;/code&gt;, and then...&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But, let's do some math. With &lt;code&gt;180&lt;/code&gt; bits and with each bit being equal either to &lt;code&gt;0&lt;/code&gt; or to &lt;code&gt;1&lt;/code&gt; we would have &lt;code&gt;2^180&lt;/code&gt; (or &lt;code&gt;1.53 * 10^54&lt;/code&gt;) possible combinations. Let's say we would need to give &lt;code&gt;15s&lt;/code&gt; to each car to see if it will park successfully or not. Let's also say that we may run a simulation for &lt;code&gt;10&lt;/code&gt; cars at once. Then we would need &lt;code&gt;15 * (1.53 * 10^54) / 10 = 2.29 * 10^54 [seconds]&lt;/code&gt; which is &lt;code&gt;7.36 * 10^46 [years]&lt;/code&gt;. Pretty long waiting time. Just as a side thought, it is only &lt;code&gt;2.021 * 10^3 [years]&lt;/code&gt; that have passed after Christ was born.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#genetic-approach"&gt;
  &lt;/a&gt;
  Genetic approach
&lt;/h3&gt;

&lt;p&gt;We need a faster algorithm to find the optimal value of the genome. This is where the genetic algorithm comes to the rescue. We might not find the best value of the genome, but there is a chance that we may find the optimal value of it. And, what is, more importantly, we don't need to wait that long. With the &lt;a href="https://trekhleb.dev/self-parking-car-evolution"&gt;Evolution Simulator&lt;/a&gt; I was able to find a pretty good genome within &lt;code&gt;24 [hours]&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#genetic-algorithm-basics"&gt;
  &lt;/a&gt;
  Genetic algorithm basics
&lt;/h2&gt;

&lt;p&gt;A &lt;a href="https://en.wikipedia.org/wiki/Genetic_algorithm"&gt;genetic algorithms&lt;/a&gt; (GA) inspired by the process of natural selection, and are commonly used to generate high-quality solutions to optimization problems by relying on biologically inspired operators such as &lt;em&gt;crossover&lt;/em&gt;, &lt;em&gt;mutation&lt;/em&gt; and &lt;em&gt;selection&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The problem of finding the "good enough" combination of genes for the car looks like an optimization problem, so there is a good chance that GA will help us here.&lt;/p&gt;

&lt;p&gt;We're not going to cover a genetic algorithm in all details, but on a high level here are the basic steps that we will need to do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;CREATE&lt;/strong&gt; ‚Äì the very first generation of cars &lt;a href="https://en.wikipedia.org/wiki/Laws_of_thermodynamics"&gt;can't come out of nothing&lt;/a&gt;, so we will generate a set of random car genomes (set of binary arrays with the length of &lt;code&gt;180&lt;/code&gt;) at the very beginning. For example, we may create &lt;code&gt;~1000&lt;/code&gt; cars. With a bigger population the chances to find the optimal solution (and to find it faster) increase.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;SELECT&lt;/strong&gt; - we will need to select the fittest individuums out of the current generation for further mating (see the next step). The fitness of each individuum will be defined based on the fitness function, which in our case, will show how close the car approached the target parking spot. The closer the car to the parking spot, the fitter it is.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;MATE&lt;/strong&gt; ‚Äì simply saying we will allow the selected &lt;em&gt;"‚ôÇ father-cars"&lt;/em&gt; to have &lt;em&gt;"sex"&lt;/em&gt; with the selected &lt;em&gt;"‚ôÄ mother-cars"&lt;/em&gt; so that their genomes could mix in a &lt;code&gt;~50/50&lt;/code&gt; proportion and produce &lt;em&gt;"‚ôÇ‚ôÄ children-cars"&lt;/em&gt; genomes. The idea is that the children cars might get better (or worse) in self-parking, by taking the best (or the worst) bits from their parents.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;MUTATE&lt;/strong&gt; - during the mating process some genes may randomly mutate (&lt;code&gt;1&lt;/code&gt;s and &lt;code&gt;0&lt;/code&gt;s in child genome may flip). This may bring a wider variety of children genomes and, thus, a wider variety of children cars behavior. Imagine that the 1st bit was accidentally set to &lt;code&gt;0&lt;/code&gt; for all &lt;code&gt;~1000&lt;/code&gt; cars. The only way to try the car with the 1st bit being set to &lt;code&gt;1&lt;/code&gt; is through the random mutations. At the same time, extensive mutations may ruin healthy genomes.&lt;/li&gt;
&lt;li&gt;Go to "Step 2" unless the number of generations has reached the limit (i.e. &lt;code&gt;100&lt;/code&gt; generations have passed) or unless the top-performing individuums have reached the expected fitness function value (i.e. the best car has approached the parking spot closer than &lt;code&gt;1 meter&lt;/code&gt;). Otherwise, quit.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--btVD50Qc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/07-genetic-algorithm-flow-01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--btVD50Qc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/07-genetic-algorithm-flow-01.png" alt="Genetic algorithm flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#evolving-the-cars-brain-using-a-genetic-algorithm"&gt;
  &lt;/a&gt;
  Evolving the car's brain using a Genetic Algorithm
&lt;/h2&gt;

&lt;p&gt;Before launching the genetic algorithm let's go and create the functions for the "CREATE", "SELECT", "MATE" and "MUTATE" steps of the algorithm.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#functions-for-the-create-step"&gt;
  &lt;/a&gt;
  Functions for the CREATE step
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;createGeneration()&lt;/code&gt; function will create an array of random genomes (a.k.a. population or generation) and will accept two parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;generationSize&lt;/code&gt; - defines the size of the generation. This generation size will be preserved from generation to generation.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;genomeLength&lt;/code&gt; - defines the genome length of each individuum in the cars population. In our case, the length of the genome will be &lt;code&gt;180&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is a &lt;code&gt;50/50&lt;/code&gt; chance for each gene of a genome to be either &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Generation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Genome&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;GenerationParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;generationSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;genomeLength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createGenome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Genome&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createGeneration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GenerationParams&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Generation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;generationSize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;genomeLength&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;generationSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;createGenome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;genomeLength&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#functions-for-the-mutate-step"&gt;
  &lt;/a&gt;
  Functions for the MUTATE step
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;mutate()&lt;/code&gt; function will mutate some genes randomly based on the &lt;code&gt;mutationProbability&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;For example, if the &lt;code&gt;mutationProbability = 0.1&lt;/code&gt; then there is a &lt;code&gt;10%&lt;/code&gt; chance for each genome to be mutated. Let's say if we would have a genome of length &lt;code&gt;10&lt;/code&gt; that looks like &lt;code&gt;[0, 0, 0, 0, 0, 0 ,0 ,0 ,0 ,0]&lt;/code&gt;, then after the mutation, there will be a chance that 1 gene will be mutated and we may get a genome that might look like &lt;code&gt;[0, 0, 0, 1, 0, 0 ,0 ,0 ,0 ,0]&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// The number between 0 and 1.&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Probability&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// @see: https://en.wikipedia.org/wiki/Mutation_(genetic_algorithm)&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;genome&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Genome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mutationProbability&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Probability&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Genome&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;geneIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;geneIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;genome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;geneIndex&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;gene&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Gene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;genome&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;geneIndex&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mutatedGene&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Gene&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gene&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;genome&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;geneIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;mutationProbability&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;mutatedGene&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;gene&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;genome&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#functions-for-the-mate-step"&gt;
  &lt;/a&gt;
  Functions for the MATE step
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;mate()&lt;/code&gt; function will accept the &lt;code&gt;father&lt;/code&gt; and the &lt;code&gt;mother&lt;/code&gt; genomes and will produce two children. We will imitate the real-world scenario and also do the mutation during the mating.&lt;/p&gt;

&lt;p&gt;Each bit of the child genome will be defined based on the values of the correspondent bit of the father's or mother's genomes. There is a &lt;code&gt;50/50%&lt;/code&gt; probability that the child will inherit the bit of the father or the mother. For example, let's say we have genomes of length &lt;code&gt;4&lt;/code&gt; (for simplicity reasons):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Father's genome: [0, 0, 1, 1]
Mother's genome: [0, 1, 0, 1]
                  ‚Üì  ‚Üì  ‚Üì  ‚Üì
Possible kid #1: [0, 1, 1, 1]
Possible kid #2: [0, 0, 1, 1]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above the mutation were not taken into account.&lt;/p&gt;

&lt;p&gt;Here is the function implementation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Performs Uniform Crossover: each bit is chosen from either parent with equal probability.&lt;/span&gt;
&lt;span class="c1"&gt;// @see: https://en.wikipedia.org/wiki/Crossover_(genetic_algorithm)&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;mate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;father&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Genome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;mother&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Genome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;mutationProbability&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Probability&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Genome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Genome&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;father&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;mother&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cannot mate different species&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstChild&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Genome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secondChild&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Genome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="c1"&gt;// Conceive children.&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;geneIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;geneIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;father&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;geneIndex&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;firstChild&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;father&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;geneIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mother&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;geneIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;secondChild&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;father&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;geneIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mother&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;geneIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstChild&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mutationProbability&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;secondChild&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mutationProbability&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#functions-for-the-select-step"&gt;
  &lt;/a&gt;
  Functions for the SELECT step
&lt;/h3&gt;

&lt;p&gt;To select the fittest individuums for further mating we need a way to find out the fitness of each genome. To do this we will use a so-called fitness function.&lt;/p&gt;

&lt;p&gt;The fitness function is always related to the particular task that we try to solve, and it is not generic. In our case, the fitness function will measure the distance between the car and the parking spot. The closer the car to the parking spot, the fitter it is. We will implement the fitness function a bit later, but for now, let's introduce the interface for it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;FitnessFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;genome&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Genome&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's say we have fitness values for each individuum in the population. Let's also say that we sorted all individuums by their fitness values so that the first individuums are the strongest ones. How should we select the fathers and the mothers from this array? We need to do the selection in a way, that the higher the fitness value of the individuum, the higher the chances of this individuum being selected for mating. The &lt;code&gt;weightedRandom()&lt;/code&gt; function will help us with this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Picks the random item based on its weight.&lt;/span&gt;
&lt;span class="c1"&gt;// The items with a higher weight will be picked more often.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;weightedRandom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Items and weights must be of the same size&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Preparing the cumulative weights array.&lt;/span&gt;
  &lt;span class="c1"&gt;// For example:&lt;/span&gt;
  &lt;span class="c1"&gt;// - weights = [1, 4, 3]&lt;/span&gt;
  &lt;span class="c1"&gt;// - cumulativeWeights = [1, 5, 8]&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;cumulativeWeights&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cumulativeWeights&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;weights&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cumulativeWeights&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Getting the random number in a range [0...sum(weights)]&lt;/span&gt;
  &lt;span class="c1"&gt;// For example:&lt;/span&gt;
  &lt;span class="c1"&gt;// - weights = [1, 4, 3]&lt;/span&gt;
  &lt;span class="c1"&gt;// - maxCumulativeWeight = 8&lt;/span&gt;
  &lt;span class="c1"&gt;// - range for the random number is [0...8]&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maxCumulativeWeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cumulativeWeights&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;cumulativeWeights&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randomNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;maxCumulativeWeight&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// Picking the random item based on its weight.&lt;/span&gt;
  &lt;span class="c1"&gt;// The items with higher weight will be picked more often.&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cumulativeWeights&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;randomNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The usage of this function is pretty straightforward. Let's say you really like bananas and want to eat them more often than strawberries. Then you may call &lt;code&gt;const fruit = weightedRandom(['banana', 'strawberry'], [9, 1])&lt;/code&gt;, and in &lt;code&gt;‚âà9&lt;/code&gt; out of &lt;code&gt;10&lt;/code&gt; cases the &lt;code&gt;fruit&lt;/code&gt; variable will be equal to &lt;code&gt;banana&lt;/code&gt;, and only in &lt;code&gt;‚âà1&lt;/code&gt; out of &lt;code&gt;10&lt;/code&gt; times it will be equal to &lt;code&gt;strawberry&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To avoid losing the best individuums (let's call them champions) during the mating process we may also introduce a so-called &lt;code&gt;longLivingChampionsPercentage&lt;/code&gt; parameter. For example, if the &lt;code&gt;longLivingChampionsPercentage = 10&lt;/code&gt;, then &lt;code&gt;10%&lt;/code&gt; of the best cars from the previous population will be carried over to the new generation. You may think about it as there are some long-living individuums that can live a long life and see their children and even grandchildren.&lt;/p&gt;

&lt;p&gt;Here is the actual implementation of the &lt;code&gt;select()&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// The number between 0 and 100.&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Percentage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;SelectionOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;mutationProbability&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Probability&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;longLivingChampionsPercentage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Percentage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// @see: https://en.wikipedia.org/wiki/Selection_(genetic_algorithm)&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;generation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Generation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;fitness&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FitnessFunction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SelectionOptions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;mutationProbability&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;longLivingChampionsPercentage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newGeneration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Generation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;oldGeneration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;generation&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="c1"&gt;// First one - the fittest one.&lt;/span&gt;
  &lt;span class="nx"&gt;oldGeneration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;genomeA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Genome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;genomeB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Genome&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fitnessA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fitness&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;genomeA&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fitnessB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fitness&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;genomeB&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fitnessA&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;fitnessB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fitnessA&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fitnessB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// Let long-liver champions continue living in the new generation.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;longLiversCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;longLivingChampionsPercentage&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;oldGeneration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;longLiversCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;oldGeneration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;longLiversCount&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;longLivingGenome&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Genome&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;newGeneration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;longLivingGenome&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Get the data about he fitness of each individuum.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fitnessPerOldGenome&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;oldGeneration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;genome&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Genome&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fitness&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;genome&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="c1"&gt;// Populate the next generation until it becomes the same size as a old generation.&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newGeneration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;generation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Select random father and mother from the population.&lt;/span&gt;
    &lt;span class="c1"&gt;// The fittest individuums have higher chances to be selected.&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;father&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Genome&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fatherGenomeIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mother&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Genome&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;matherGenomeIndex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// To produce children the father and mother need each other.&lt;/span&gt;
    &lt;span class="c1"&gt;// It must be two different individuums.&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;father&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;mother&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;fatherGenomeIndex&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;matherGenomeIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;randomFather&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;randomFatherGenomeIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;weightedRandom&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Genome&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;generation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fitnessPerOldGenome&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;randomMother&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;randomMotherGenomeIndex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;weightedRandom&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Genome&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;generation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fitnessPerOldGenome&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="nx"&gt;father&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;randomFather&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;fatherGenomeIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;randomFatherGenomeIndex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nx"&gt;mother&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;randomMother&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;matherGenomeIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;randomMotherGenomeIndex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Let father and mother produce two children.&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;firstChild&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secondChild&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;father&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mother&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mutationProbability&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;newGeneration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstChild&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Depending on the number of long-living champions it is possible that&lt;/span&gt;
    &lt;span class="c1"&gt;// there will be the place for only one child, sorry.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newGeneration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;generation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;newGeneration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;secondChild&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newGeneration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fitness-function"&gt;
  &lt;/a&gt;
  Fitness function
&lt;/h3&gt;

&lt;p&gt;The fitness of the car will be defined by the distance from the car to the parking spot. The higher the distance, the lower the fitness.&lt;/p&gt;

&lt;p&gt;The final distance we will calculate is an average distance from &lt;code&gt;4&lt;/code&gt; car wheels to the correspondent &lt;code&gt;4&lt;/code&gt; corners of the parking spot. This distance we will call the &lt;code&gt;loss&lt;/code&gt; which is inversely proportional to the &lt;code&gt;fitness&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MWwNxdrF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/08-distance-to-parkin-lot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MWwNxdrF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/08-distance-to-parkin-lot.png" alt="The distance from the car to the parking spot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Calculating the distance between each wheel and each corner separately (instead of just calculating the distance from the car center to the parking spot center) will make the car preserve the proper orientation relative to the parking spot.&lt;/p&gt;

&lt;p&gt;The distance between two points in space will be calculated based on the &lt;a href="https://en.wikipedia.org/wiki/Pythagorean_theorem"&gt;Pythagorean theorem&lt;/a&gt; like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;NumVec3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Calculates the XZ distance between two points in space.&lt;/span&gt;
&lt;span class="c1"&gt;// The vertical Y distance is not being taken into account.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;euclideanDistance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NumVec3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NumVec3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fromX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fromZ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toZ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;fromX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;toX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fromZ&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;toZ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The distance (the &lt;code&gt;loss&lt;/code&gt;) between the car and the parking spot will be calculated like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;RectanglePoints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;fl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NumVec3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Front-left&lt;/span&gt;
  &lt;span class="na"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NumVec3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Front-right&lt;/span&gt;
  &lt;span class="na"&gt;bl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NumVec3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Back-left&lt;/span&gt;
  &lt;span class="na"&gt;br&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NumVec3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Back-right&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;GeometricParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;wheelsPosition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RectanglePoints&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;parkingLotCorners&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RectanglePoints&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;carLoss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GeometricParams&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;wheelsPosition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parkingLotCorners&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;fl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;flWheel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;frWheel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;br&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;brWheel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;bl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;blWheel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;wheelsPosition&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;fl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;flCorner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;frCorner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;br&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;brCorner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;bl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;blCorner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parkingLotCorners&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;flDistance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;euclideanDistance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flWheel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;flCorner&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;frDistance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;euclideanDistance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;frWheel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;frCorner&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;brDistance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;euclideanDistance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;brWheel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;brCorner&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blDistance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;euclideanDistance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blWheel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;blCorner&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flDistance&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;frDistance&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;brDistance&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;blDistance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since the &lt;code&gt;fitness&lt;/code&gt; should be inversely proportional to the &lt;code&gt;loss&lt;/code&gt; we'll calculate it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;carFitness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GeometricParams&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loss&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;carLoss&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// Adding +1 to avoid a division by zero.&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loss&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may see the &lt;code&gt;fitness&lt;/code&gt; and the &lt;code&gt;loss&lt;/code&gt; values for a specific genome and for a current car position on the &lt;a href="https://trekhleb.dev/self-parking-car-evolution?parking=evolution#/"&gt;Evolution Simulator&lt;/a&gt; dashboard:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wApCgoPz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/09-fitness-function.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wApCgoPz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/09-fitness-function.png" alt="Evolution simulator dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#launching-the-evolution"&gt;
  &lt;/a&gt;
  Launching the evolution
&lt;/h2&gt;

&lt;p&gt;Let's put the evolution functions together. We're going to "create the world", launch the evolution loop, make the time going, the generation evolving, and the cars learning how to park.&lt;/p&gt;

&lt;p&gt;To get the fitness values of each car we need to run a simulation of the cars behavior in a virtual 3D world. The &lt;a href="https://trekhleb.dev/self-parking-car-evolution"&gt;Evolution Simulator&lt;/a&gt; does exactly that - it runs the code below in the simulator, which is &lt;a href="https://github.com/trekhleb/self-parking-car-evolution"&gt;made with Three.js&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Evolution setup example.&lt;/span&gt;
&lt;span class="c1"&gt;// Configurable via the Evolution Simulator.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GENERATION_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LONG_LIVING_CHAMPIONS_PERCENTAGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MUTATION_PROBABILITY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.04&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MAX_GENERATIONS_NUM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Fitness function.&lt;/span&gt;
&lt;span class="c1"&gt;// It is like an annual doctor's checkup for the cars.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;carFitnessFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;genome&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Genome&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The evolution simulator calculates and stores the fitness values for each car in the fitnessValues map.&lt;/span&gt;
  &lt;span class="c1"&gt;// Here we will just fetch the pre-calculated fitness value for the car in current generation.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;genomeKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;genome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fitnessValues&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;genomeKey&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Creating the "world" with the very first cars generation.&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;generationIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;generation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Generation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createGeneration&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;generationSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GENERATION_SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;genomeLength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GENOME_LENGTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;- 180 genes&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Starting the "time".&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;generationIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;MAX_GENERATIONS_NUM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// SIMULATION IS NEEDED HERE to pre-calculate the fitness values.&lt;/span&gt;

  &lt;span class="c1"&gt;// Selecting, mating, and mutating the current generation.&lt;/span&gt;
  &lt;span class="nx"&gt;generation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;generation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;carFitnessFunction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;mutationProbability&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MUTATION_PROBABILITY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;longLivingChampionsPercentage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LONG_LIVING_CHAMPIONS_PERCENTAGE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Make the "time" go by.&lt;/span&gt;
  &lt;span class="nx"&gt;generationIndex&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Here we may check the fittest individuum of the latest generation.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fittestCar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;generation&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running the &lt;code&gt;select()&lt;/code&gt; function, the &lt;code&gt;generation&lt;/code&gt; array is sorted by the fitness values in descending order. Therefore, the fittest car will always be the first car in the array.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The 1st generation&lt;/strong&gt; of cars with random genomes will behave something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SEZW4Dye--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/02-cars-before-01.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SEZW4Dye--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/02-cars-before-01.gif" alt="The 1st generation of cars with random genomes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;On the ‚âà40th generation&lt;/strong&gt; the cars start learning what the self-parking is and start getting closer to the parking spot:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m3V8XzKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/03-car-after-01.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m3V8XzKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/03-car-after-01.gif" alt="The 40th generation start learning how to park"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another example with a bit more challenging starting point:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BuDkpJTu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/03-car-after-03.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BuDkpJTu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/03-car-after-03.gif" alt="More challenging starting point for self-parking"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The cars are hitting some other cars along the way, and also are not perfectly fitting the parking spot, but this is only the 40th generation since the creation of the world for them, so you may give the cars some more time to learn.&lt;/p&gt;

&lt;p&gt;From generation to generation we may see how the loss values are going down (which means that fitness values are going up). The &lt;code&gt;P50 Avg Loss&lt;/code&gt; shows the average loss value (average distance from the cars to the parking spot) of the &lt;code&gt;50%&lt;/code&gt; of fittest cars. The &lt;code&gt;Min Loss&lt;/code&gt; shows the loss value of the fittest car in each generation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--__zYPTAx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/10-loss-history-00.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--__zYPTAx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/10-loss-history-00.png" alt="Loss history"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You may see that on average the &lt;code&gt;50%&lt;/code&gt; of the fittest cars of the generation are learning to get closer to the parking spot (from &lt;code&gt;5.5m&lt;/code&gt; away from the parking spot to &lt;code&gt;3.5m&lt;/code&gt; in 35 generations). The trend for the &lt;code&gt;Min Loss&lt;/code&gt; values is less obvious (from &lt;code&gt;1m&lt;/code&gt; to &lt;code&gt;0.5m&lt;/code&gt; with some noise signals), however from the animations above you may see that cars have learned some basic parking moves.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we've broken down the high-level task of creating the self-parking car to the straightforward low-level task of finding the optimal combination of &lt;code&gt;180&lt;/code&gt; ones and zeroes (finding the optimal car genome).&lt;/p&gt;

&lt;p&gt;Then we've applied the genetic algorithm to find the optimal car genome. It allowed us to get pretty good results in several hours of simulation (instead of many years of running the naive approach).&lt;/p&gt;

&lt;p&gt;You may launch the üöï &lt;a href="https://trekhleb.dev/self-parking-car-evolution"&gt;Self-parking Car Evolution Simulator&lt;/a&gt; to see the evolution process directly in your browser. The simulator gives you the following opportunities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You may &lt;a href="https://trekhleb.dev/self-parking-car-evolution?parking=evolution#/"&gt;train the cars from scratch&lt;/a&gt; and adjust genetic parameters by yourself&lt;/li&gt;
&lt;li&gt;You may &lt;a href="https://trekhleb.dev/self-parking-car-evolution?parking=automatic#/"&gt;see the trained self-parking cars in action&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;You may also &lt;a href="https://trekhleb.dev/self-parking-car-evolution?parking=manual#/"&gt;try to park the car manually&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The full genetic source code that was shown in this article may also be found in the &lt;a href="https://github.com/trekhleb/self-parking-car-evolution"&gt;Evolution Simulator repository&lt;/a&gt;. If you are one of those folks who will actually count and check the number of lines to make sure there are less than 500 of them (excluding tests), please feel free to check the code &lt;a href="https://github.com/trekhleb/self-parking-car-evolution/tree/master/src/libs"&gt;here&lt;/a&gt; ü•∏.&lt;/p&gt;

&lt;p&gt;There are still some &lt;strong&gt;unresolved issues&lt;/strong&gt; with the code and the simulator:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The car's brain is oversimplified and it uses linear equations instead of, let's say, neural networks. It makes the car not adaptable to the new surroundings or to the new parking lot types.&lt;/li&gt;
&lt;li&gt;We don't decrease the car's fitness value when the car is hitting the other car. Therefore the car doesn't "feel" any guilt in creating the road accident.&lt;/li&gt;
&lt;li&gt;The evolution simulator is not stable. It means that the same car genome may produce different fitness values, which makes the evolution less efficient.&lt;/li&gt;
&lt;li&gt;The evolution simulator is also very heavy in terms of performance, which slows down the evolution progress since we can't train, let's say, 1000 cars at once.&lt;/li&gt;
&lt;li&gt;Also the Evolution Simulator requires the browser tab to be open and active to perform the simulation.&lt;/li&gt;
&lt;li&gt;and &lt;a href="https://github.com/trekhleb/self-parking-car-evolution/issues"&gt;more&lt;/a&gt;...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, the purpose of this article was to have some fun while learning how the genetic algorithm works and not to build a production-ready self-parking Teslas. So, even with the issues mentioned above, I hope you've had a good time going through the article.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GXvuFIda--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/11-fin.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GXvuFIda--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://trekhleb.dev/self-parking-car-evolution/article/images/11-fin.png" alt="Fin"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>[Launch] Sunflower - Rewire your brain to associate sobriety with reward üåª</title>
      <author>kobyconrad</author>
      <pubDate>Tue, 28 Sep 2021 14:29:46 +0000</pubDate>
      <link>https://dev.to/kobyconrad/launch-sunflower-rewire-your-brain-to-associate-sobriety-with-reward-3i01</link>
      <guid>https://dev.to/kobyconrad/launch-sunflower-rewire-your-brain-to-associate-sobriety-with-reward-3i01</guid>
      <description>&lt;p&gt;After 1.5 years of learning to code, half a bootcamp, 1150 Github commits, and one failed startup - I finally built an iOS app that people &lt;strong&gt;actually&lt;/strong&gt; use. :)&lt;/p&gt;

&lt;p&gt;Despite being a super shitty programmer, today I am proud to announce the launch of Sunflower. üåª&lt;/p&gt;

&lt;p&gt;&lt;a href="https://apps.apple.com/us/app/sunflower-sober-tracker/id1547099435"&gt;Sunflower is an iOS app&lt;/a&gt; that uses a version of bastardized Cognitive Behavioral Therapy combined with the core tenants of progression tracking to help train your brain into associating sobriety with reward. &lt;/p&gt;

&lt;p&gt;In this post I'm going to outline the story behind Sunflower, the product strategy that helped me build something people actually use, and the technical specs of how it's built. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#story-time"&gt;
  &lt;/a&gt;
  Story Time
&lt;/h2&gt;

&lt;p&gt;I'm a high preforming addict. &lt;/p&gt;

&lt;p&gt;Starting from the age of 19, I smoked Cannabis almost every day for about 4 years. &lt;/p&gt;

&lt;p&gt;I was really good at smoking Cannabis. &lt;/p&gt;

&lt;p&gt;I started a Hippie Shop that had 500,000 followers. I started the highest rated cleaning service in Idaho. I built an amazing digital marketing agency. I became the National Advertising Director for a $500M mortgage bank. &lt;/p&gt;

&lt;p&gt;Between society telling me "weed isn't addictive" and my own personal achievements, it took a LOT of soul searching to realize that I had a problem. &lt;/p&gt;

&lt;p&gt;After spending enough time on &lt;a href="https://reddit.com/r/leaves"&gt;r/leaves&lt;/a&gt;, I decided it was time to quit. &lt;/p&gt;

&lt;p&gt;I threw away all of my Cannabis, gave away my glass... and then 48 hours later I relapsed for the first time. &lt;/p&gt;

&lt;p&gt;Turns out, quitting Cannabis after 4 years of daily heavy 24/7 use &lt;strong&gt;fucking sucks&lt;/strong&gt;. At least it did for me. &lt;/p&gt;

&lt;p&gt;For about the first two weeks I could hardly eat or sleep. After that a &lt;strong&gt;heavy&lt;/strong&gt; depression set in for about ~12 months. I continued to fail at getting sober, relapse after relapse after relapse. &lt;/p&gt;

&lt;p&gt;After maybe the 100th time of trying to quit smoking, I painfully started to learn the core tenant of Sunflower. &lt;/p&gt;

&lt;p&gt;It's not enough to stay sober. You HAVE to rewire your brain. &lt;/p&gt;

&lt;p&gt;As a product manager we learn there are 3 core motivators, rewards of the self, of the tribe, and of the hunt. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Drugs are a cheat code.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;They teach you to ignore these natural rewards, and to seek them through substances. &lt;/p&gt;

&lt;p&gt;Simply stopping your use isn't enough, because even once you make it through the physical withdrawals, your brain still deeply associates your drug of choice, with reward. &lt;/p&gt;

&lt;p&gt;The true secret to becoming sober, is learning to associate healthy activities with reward. &lt;/p&gt;

&lt;p&gt;For me - it was a combination of exercise (Brazilian Jiu Jitsu), and learning to code. &lt;/p&gt;

&lt;p&gt;Learning things is deeply addictive. It's a good kind of addictive. The kind that triggers your reward of self, that pushes you to be a better person. Programming to me is this beautiful never ending rabbit hole of self improvement.&lt;/p&gt;

&lt;p&gt;I was a high preforming addict, but getting sober just drastically multiplied my potential. &lt;/p&gt;

&lt;p&gt;Programming was something I always failed at because I was high, and Sunflower is my testament that while I'm still a major noob, I'm now good enough to build a shitty product that some people use. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-something-people-use"&gt;
  &lt;/a&gt;
  Building Something People Use
&lt;/h2&gt;

&lt;p&gt;I built Sunflower around a few core "tasks to be done" that has resulted in a product that has extremely flat retention, and that a small core group of users actually love! &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Addicts need to track how long they have been sober for.&lt;/li&gt;
&lt;li&gt;Addicts need to track their cravings (and learn to overcome them). &lt;/li&gt;
&lt;li&gt;Addicts need to learn to associate positive activities with reward. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first point is the core of the product. Every day you stay sober, you earn a new sunflower within the app.&lt;/p&gt;

&lt;p&gt;It's cheesy, but this is surprisingly effective at helping you to associate sobriety with "reward" AND it helps create very strong retention. &lt;/p&gt;

&lt;p&gt;If you are an addict, you never give up your sobriety chip. &lt;/p&gt;

&lt;p&gt;Cravings are a trigger that bring people back into the app. There is a guided journaling exercise that helps to track you cravings, and identify common fallacies with your thinking. &lt;/p&gt;

&lt;p&gt;Finally, there is a second guided journaling exercise that uses a bastardized version of Cognitive Behavioral Therapy to help teach your brain to associate positive activities with reward.&lt;/p&gt;

&lt;p&gt;It's really simple, and again I'm a shit programmer, but the combination of building around these core tasks to be done has resulted in super flat retention &amp;amp; a strong NPS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tech-stack"&gt;
  &lt;/a&gt;
  Tech Stack
&lt;/h2&gt;

&lt;p&gt;The entire app is built using React Native! I went through half of a Hack Reactor bootcamp which helped boost my javascript skills, so while I kind of want to learn Swift, I am mainly a Javascript programmer. &lt;/p&gt;

&lt;p&gt;I use &lt;a href="https://expo.dev/"&gt;Expo&lt;/a&gt; as my framework, it's honestly really amazing for building and testing mobile apps. If you've never tried it, I highly recommend. It comes with a number of libraries that I've used to add in the haptics, splash screen, "ask for review" feature, Segment analytics, and a ton more. &lt;/p&gt;

&lt;p&gt;Expo makes it super easy to run a Simulator on my computer (or iPhone) and then I can simply &lt;code&gt;expo build ios&lt;/code&gt; to create the build which I use Transporter to send to the iOS store. &lt;/p&gt;

&lt;p&gt;For analytics I set up &lt;a href="https://segment.com/"&gt;Segment&lt;/a&gt; and then hooked up a combination of &lt;a href="https://posthog.com/"&gt;Posthog&lt;/a&gt; &amp;amp; &lt;a href="https://amplitude.com/"&gt;Amplitude&lt;/a&gt;. Amplitude is probably the main analytics tool that allows me to see DAU, anonymized journal usage, and retention, but I just love the funnel visualizations that Posthog provides. &lt;/p&gt;

&lt;p&gt;If you have some sadistic desire to look at my terrifying code, you can check it out on Github &lt;a href="https://github.com/kobyconrad/Sunflower-App"&gt;here&lt;/a&gt;. ‚≠ê&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; Today I launched &lt;a href="https://apps.apple.com/us/app/sunflower-sober-tracker/id1547099435"&gt;Sunflower&lt;/a&gt;! An iOS app that helps you rewire your mind to associate sobriety with reward through a combination of progression tracking &amp;amp; bastardized Cognitive Behavioral Therapy. &lt;/p&gt;

</description>
      <category>ios</category>
      <category>reactnative</category>
      <category>javascript</category>
      <category>startup</category>
    </item>
    <item>
      <title>Hi, I'm Tricky, and I just started learning webdev, about a week ago. Here is a small website I made :D</title>
      <author>Tricky</author>
      <pubDate>Tue, 28 Sep 2021 14:28:41 +0000</pubDate>
      <link>https://dev.to/tricky4747/hi-i-m-tricky-and-i-just-started-learning-webdev-about-a-week-ago-here-is-a-small-website-i-made-d-3i02</link>
      <guid>https://dev.to/tricky4747/hi-i-m-tricky-and-i-just-started-learning-webdev-about-a-week-ago-here-is-a-small-website-i-made-d-3i02</guid>
      <description>&lt;p&gt;Here is the website -&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.tricky.ml/"&gt;https://www.tricky.ml/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the repo -&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Tricky4747/Tricky4747.github.io"&gt;https://github.com/Tricky4747/Tricky4747.github.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me know your thoughts :)&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Update an object in nested array in MongoDB</title>
      <author>Rajesh Royal</author>
      <pubDate>Tue, 28 Sep 2021 14:06:46 +0000</pubDate>
      <link>https://dev.to/rajeshroyal/update-an-object-in-nested-array-in-mongodb-o5a</link>
      <guid>https://dev.to/rajeshroyal/update-an-object-in-nested-array-in-mongodb-o5a</guid>
      <description>&lt;p&gt;Hello Reader üëã&lt;/p&gt;

&lt;p&gt;To update an object inside a nested array in MongoDB you can use this approach, Its well tested and working.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#case"&gt;
  &lt;/a&gt;
  Case:
&lt;/h4&gt;

&lt;p&gt;Update nested array objects. See below picture for a better Idea what we are going to do. We will update the object which is nested by 3 levels of array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;discussionList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="nx"&gt;discussionList&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;updated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cMxmivVu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0h9ievy3ybu66mc2b3v.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cMxmivVu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0h9ievy3ybu66mc2b3v.jpg" alt="mongodb - update an object inside multilevel nested array"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;courseCategoryPostCommentReplyUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CommentReplyUpdateMutation&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IDocumentUpdateType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;courseCategoryPostCommentsModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;postId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;discussionList&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$elemMatch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commentId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;discussionList._id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replyId&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;$set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;discussionList.$[outer].discussionList.$[inner].payload&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;discussionList.$[outer].discussionList.$[inner].isUpdated&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;discussionList.$[outer].discussionList.$[inner].commentUpdateTime&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;arrayFilters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;outer._id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commentId&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;inner._id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replyId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;FootNotes - this code is to update the reply of a comment.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That's how you can perform operations on an object in nested array in mongoDB document. You can also update/delete the objects which are having the more level of nesting by just modifying the query.&lt;/p&gt;

&lt;p&gt;Please let me know if the code needs an explanation. Thanks üôÇ&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>database</category>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>üöÄ The Missing SQL Basics Crash Course</title>
      <author>Bobby Iliev</author>
      <pubDate>Tue, 28 Sep 2021 14:00:20 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/the-missing-sql-basics-crash-course-323l</link>
      <guid>https://dev.to/bobbyiliev/the-missing-sql-basics-crash-course-323l</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;No matter if you are a DevOps/SysOps engineer, developer, or just a Linux enthusiast, you will most likely have to use SQL at some point in your career.&lt;/p&gt;

&lt;p&gt;The guide is suitable for anyone working as a developer, system administrator, or a DevOps engineer and wants to learn the basics of SQL.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#databases"&gt;
  &lt;/a&gt;
  Databases
&lt;/h1&gt;

&lt;p&gt;Before we dive deep into SQL, let's quickly define what a database is.&lt;/p&gt;

&lt;p&gt;The definition of databases from Wikipedia is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A database is an organized collection of data, generally stored and accessed electronically from a computer system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, a database is a collection of data stored and structured in different database tables.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tables-and-columns"&gt;
  &lt;/a&gt;
  Tables and columns
&lt;/h2&gt;

&lt;p&gt;You've most likely worked with spreadsheet systems like Excel or Google Sheets. At the very basic, database tables are quite similar to spreadsheets.&lt;/p&gt;

&lt;p&gt;Each table has different &lt;strong&gt;columns&lt;/strong&gt; which could contain different types of data.&lt;/p&gt;

&lt;p&gt;For example, if you have a todo list app, you would have a database, and in your database, you would have different tables storing different information like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Users - In the users table, you would have some data for your users like: &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, and &lt;code&gt;active&lt;/code&gt;, for example.&lt;/li&gt;
&lt;li&gt;Tasks - The tasks table would store all of the tasks that you are planning to do. The columns of the tasks table would be for example, &lt;code&gt;task_name&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt;, &lt;code&gt;due_date&lt;/code&gt; and &lt;code&gt;priority&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Users table will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+----+----------+---------------+--------+
| id | username | name          | active |
+----+----------+---------------+--------+
| 1  |    bobby | Bobby Iliev   |   true |
| 2  |   greisi | Greisi I.     |   true |
| 3  |  devdojo | Dev Dojo      |  false |
+----+----------+---------------+--------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rundown of the table structure:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have 4 columns: &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;username&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;active&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;We also have 3 entries/users&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;id&lt;/code&gt; column is a unique identifier of each user and is auto-incremented.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next we will learn how to install MySQL and create our first database.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#mysql"&gt;
  &lt;/a&gt;
  MySQL
&lt;/h1&gt;

&lt;p&gt;Now that you know what a database, table, and column are, the next thing that you would need to do is install a database service where you would be running your SQL queries on.&lt;/p&gt;

&lt;p&gt;We would be using MySQL as it is free, open-source, and very widely used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-mysql"&gt;
  &lt;/a&gt;
  Installing MySQL
&lt;/h2&gt;

&lt;p&gt;As we are going to use &lt;strong&gt;Ubuntu&lt;/strong&gt;, in order to install MySQL run the following commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First update your &lt;code&gt;apt&lt;/code&gt; repository:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt update -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Then install MySQL:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install mysql-server mysql-client
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are installing 2 packages, one is the actual MySQL server, and the other is the MySQL client, which would allow us to connect to the MySQL server and run our queries.&lt;/p&gt;

&lt;p&gt;In order to check if MySQL is running, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl status mysql.service
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to secure your MySQL server, you could run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo mysql_secure_installation
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then follow the prompt and finally choose a secure password and save it in a secure place like a password manager.&lt;/p&gt;

&lt;p&gt;With that, you would have MySQL installed on your Ubuntu server. The above should also work just fine on Debian.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-mysql-on-mac"&gt;
  &lt;/a&gt;
  Install MySQL on Mac
&lt;/h3&gt;

&lt;p&gt;I would recommend installing MySQL using &lt;a href=""&gt;Homebrew&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that start MySQL:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew services start mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, secure it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mysql_secure_installation
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case that you ever need to stop the MySQL service, you could do so with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew services stop mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#install-mysql-on-windows"&gt;
  &lt;/a&gt;
  Install MySQL on Windows
&lt;/h3&gt;

&lt;p&gt;In order to install MySQL on Windows, I would recommend following the steps from the official documentation here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.mysql.com/doc/refman/8.0/en/windows-installation.html"&gt;https://dev.mysql.com/doc/refman/8.0/en/windows-installation.html&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessing-mysql-via-cli"&gt;
  &lt;/a&gt;
  Accessing MySQL via CLI
&lt;/h2&gt;

&lt;p&gt;To access MySQL run the &lt;code&gt;mysql&lt;/code&gt; command followed by your user:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mysql -u root -p
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-a-database"&gt;
  &lt;/a&gt;
  Creating a database
&lt;/h2&gt;

&lt;p&gt;After that, switch to the &lt;code&gt;demo&lt;/code&gt; database that we created in the previous chapter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;USE demo_db;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To exit the just type the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exit;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configuring-raw-mycnf-endraw-"&gt;
  &lt;/a&gt;
  Configuring &lt;code&gt;.my.cnf&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;By configuring the &lt;code&gt;~/.my.cnf&lt;/code&gt; file in your user's home directory, MySQL would allow you to login without prompting you for a password.&lt;/p&gt;

&lt;p&gt;In order to make that change, what you need to do is first create a &lt;code&gt;.my.cnf&lt;/code&gt; file in your user's home directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch ~/.my.cnf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, set secure permissions so that other regular users could not read the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;chmod 600 ~/.my.cnf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then using your favorite text editor, open the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nano ~/.my.cnf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add the following configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[client]
user=YOUR_MYSQL_USERNAME
password=YOUR_MYSQL_PASSWORD
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to update your MySQL credentials accordingly, then save the file and exit.&lt;/p&gt;

&lt;p&gt;After that, if you run just &lt;code&gt;mysql&lt;/code&gt;, you will be authenticated directly with the credentials that you've specified in the &lt;code&gt;~/.my.cnf&lt;/code&gt; file without being prompted for a password.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-mysqladmin-command"&gt;
  &lt;/a&gt;
  The mysqladmin command
&lt;/h2&gt;

&lt;p&gt;As a quick test, you could check all of your open SQL connections by running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mysqladmin proc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;mysqladmin&lt;/code&gt; tool would also use the client details from the &lt;code&gt;~/.my.cnf&lt;/code&gt; file, and it would list your current MySQL process list.&lt;/p&gt;

&lt;p&gt;Another cool thing that you could try doing is combining this with the &lt;code&gt;watch&lt;/code&gt; command and kind of monitor your MySQL connections in almost real-time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;watch -n1 mysqladmin proc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To stop the &lt;code&gt;watch&lt;/code&gt; command, just hit &lt;code&gt;CTRL+C&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gui-clients"&gt;
  &lt;/a&gt;
  GUI clients
&lt;/h2&gt;

&lt;p&gt;If you prefer using GUI clients, you could take a look a the following ones and install them locally on your laptop:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.mysql.com/products/workbench/"&gt;MySQL Workbench&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sequelpro.com/"&gt;Sequel Pro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tableplus.com/"&gt;TablePlus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will allow you to connect to your database via a graphical interface rather than the &lt;code&gt;mysql&lt;/code&gt; command-line tool.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tables"&gt;
  &lt;/a&gt;
  Tables
&lt;/h1&gt;

&lt;p&gt;Before we get started with SQL, let's learn how to create tables and columns.&lt;/p&gt;

&lt;p&gt;As an example, we are going to create a &lt;code&gt;users&lt;/code&gt; table with the following columns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;id&lt;/code&gt; - this is going to be the primary key of the table and would be the unique identifier of each user.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;username&lt;/code&gt; - this column would hold the username of our users&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;name&lt;/code&gt; - here, we will store the full name of users&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;status&lt;/code&gt; - here, we will store the status of a user, which would indicate if a user is active or not.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You need to specify the data type of each column.&lt;/p&gt;

&lt;p&gt;In our case it would be like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;id&lt;/code&gt; - Integer&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;username&lt;/code&gt; - Varchar&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;name&lt;/code&gt; - Varchar&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;status&lt;/code&gt; - Number&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#data-types"&gt;
  &lt;/a&gt;
  Data types
&lt;/h2&gt;

&lt;p&gt;The most common data types that you would come across are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;CHAR&lt;/code&gt;(size): Fixed-length character string with a maximum length of 255 bytes.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;VARCHAR&lt;/code&gt;(size):  Variable-length character string. Max size is specified in parenthesis.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;TEXT&lt;/code&gt;(size): A string with a maximum length of 65,535 bytes.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;INTEGER&lt;/code&gt;(size) or &lt;code&gt;INT&lt;/code&gt;(size): A medium integer.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;BOOLEAN&lt;/code&gt; or &lt;code&gt;BOOL&lt;/code&gt;: Holds a true or false value.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DATE&lt;/code&gt;: Holds a date.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's have the following users table as an example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;id&lt;/code&gt;: We would want to set the ID to &lt;code&gt;INT&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;name&lt;/code&gt;: The name should fit in a &lt;code&gt;VARCHAR&lt;/code&gt; column.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;about&lt;/code&gt;: As the about section could be longer, we could set the column data type to &lt;code&gt;TEXT&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;birthday&lt;/code&gt;: For the birthday column of the user, we could use &lt;code&gt;DATE&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information on all data types available, make sure to check out the official documentation &lt;a href="https://dev.mysql.com/doc/refman/8.0/en/data-types.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-database"&gt;
  &lt;/a&gt;
  Creating a database
&lt;/h2&gt;

&lt;p&gt;As we briefly covered in the previous chapter, before you could create tables, you would need to create a database by running the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First access MySQL:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mysql -u root -p
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Then create a database called &lt;code&gt;demo_db&lt;/code&gt;:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE DATABASE demo_d;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: the database name needs to be unique, if you already have a database named &lt;code&gt;demo_db&lt;/code&gt; you would receive an error that the database already exists.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can consider this database as the container where we would create all of the tables in.&lt;/p&gt;

&lt;p&gt;Once you've created the database, you need to switch to that database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;USE demo_db;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can think of this as accessing a directory in Linux with the &lt;code&gt;cd&lt;/code&gt; command. With &lt;code&gt;USE&lt;/code&gt;, we switch to a specific database.&lt;/p&gt;

&lt;p&gt;Alternatively, if you do not want to 'switch' to the specific database, you would need to specify the so-called fully qualified table name. For example, if you had a &lt;code&gt;users&lt;/code&gt; table in the &lt;code&gt;demo_db&lt;/code&gt;, and you wanted to select all of the entries from that table, you could use one of the following two approaches:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Switch to the &lt;code&gt;demo_db&lt;/code&gt; first and then run a select statement:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;USE demo_db;
SELECT username FROM demo_db.users;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Alternatively, rather than using the &lt;code&gt;USE&lt;/code&gt; command first, specify the database name followed by the table name separated with a  dot: &lt;code&gt;db_name.table_name&lt;/code&gt;:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT username FROM demo_db.users;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are going to cover the &lt;code&gt;SELECT&lt;/code&gt; statement more in-depth in the following chapters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-tables"&gt;
  &lt;/a&gt;
  Creating tables
&lt;/h2&gt;

&lt;p&gt;In order to create a table, you need to use the &lt;code&gt;CREATE TABLE&lt;/code&gt; statement followed by the columns that you want to have in that table and their data type.&lt;/p&gt;

&lt;p&gt;Let's say that we wanted to create a &lt;code&gt;users&lt;/code&gt; table with the following columns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;id&lt;/code&gt;: An integer value&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;username&lt;/code&gt;: A varchar value&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;about&lt;/code&gt;: A text type&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;birthday&lt;/code&gt;: Date&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;active&lt;/code&gt;: True or false&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The query that we would need to run to create that table would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE users
(
    id INT,
    username VARCHAR(255),
    about TEXT,
    birthday DATE,
    active BOOL
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: You need to select a database first with the &lt;code&gt;USE&lt;/code&gt; command as mentioned above. Otherwise you will get the following error: &lt;code&gt;ERROR 1046 (3D000): No database selected&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To list the available tables, you could run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SHOW TABLES;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+-------------------+
| Tables_in_demo_db |
+-------------------+
| users             |
+-------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dropping-tables"&gt;
  &lt;/a&gt;
  Dropping tables
&lt;/h2&gt;

&lt;p&gt;You can drop or delete tables by using the &lt;code&gt;DROP TABLE&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;Let's test that and drop the table that we've just created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DROP TABLE users;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output that you would get would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Query OK, 0 rows affected (0.03 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, if you were to run the &lt;code&gt;SHOW TABLES;&lt;/code&gt; query again, you would get the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Empty set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#allowing-null-values"&gt;
  &lt;/a&gt;
  Allowing NULL values
&lt;/h2&gt;

&lt;p&gt;By default, each column in your table can hold NULL values. In case that you don't wanted to allow NULL values for some of the columns in a specific table, you need to specify this during the table creation or later on change the table to allow that.&lt;/p&gt;

&lt;p&gt;For example, let's say that we want the &lt;code&gt;username&lt;/code&gt; column to be a required one, we would need to alter the table create statement and include &lt;code&gt;NOT NULL&lt;/code&gt; right next to the &lt;code&gt;username&lt;/code&gt; column like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE users
(
    id INT,
    username VARCHAR(255) NOT NULL,
    about TEXT,
    birthday DATE,
    active BOOL
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That way, when you try to add a new user, MySQL will let you know that the &lt;code&gt;username&lt;/code&gt; column is required.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#specifying-a-primary-key"&gt;
  &lt;/a&gt;
  Specifying a primary key
&lt;/h2&gt;

&lt;p&gt;The primary key column, which in our case is the &lt;code&gt;id&lt;/code&gt; column, is a unique identifier for our users.&lt;/p&gt;

&lt;p&gt;We want the &lt;code&gt;id&lt;/code&gt; column to be unique, and also, whenever we add new users, we want the ID of the user to autoincrement for each new user.&lt;/p&gt;

&lt;p&gt;This can be achieved with a primary key and &lt;code&gt;AUTO_INCREMENT&lt;/code&gt;. The primary key column needs to be &lt;code&gt;NOT NULL&lt;/code&gt; as well.&lt;/p&gt;

&lt;p&gt;If we were to alter the table creation statement, it would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE users
(
    id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(255) NOT NULL,
    about TEXT,
    birthday DATE,
    active BOOL
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#updating-tables"&gt;
  &lt;/a&gt;
  Updating tables
&lt;/h2&gt;

&lt;p&gt;In the above example, we created a new table and then dropped it as it was empty. However, in a real-life scenario, this would really be the case.&lt;/p&gt;

&lt;p&gt;So whenever you need to add or remove a new column from a specific table, you would need to use the &lt;code&gt;ALTER TABLE&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;Let's say that we wanted to add an &lt;code&gt;email&lt;/code&gt; column with type varchar to our &lt;code&gt;users&lt;/code&gt; table.&lt;/p&gt;

&lt;p&gt;The syntax would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ALTER TABLE users ADD email VARCHAR(255);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, if you were to describe the table, you would see the new column:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DESCRIBE users;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+----------+--------------+------+-----+---------+
| Field    | Type         | Null | Key | Default |
+----------+--------------+------+-----+---------+
| id       | int          | NO   | PRI | NULL    |
| username | varchar(255) | NO   |     | NULL    |
| about    | text         | YES  |     | NULL    |
| birthday | date         | YES  |     | NULL    |
| active   | tinyint(1)   | YES  |     | NULL    |
| email    | varchar(255) | YES  |     | NULL    |
+----------+--------------+------+-----+---------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you wanted to drop a specific column, the syntax would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ALTER TABLE table_name DROP COLUMN column_name;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: keep in mind that this is a permanent change, and if you have any critical data in the specific column, it would be deleted instantly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can use the &lt;code&gt;ALTER TABLE&lt;/code&gt; statement to also change the data type of a specific column. For example, you could change the &lt;code&gt;about&lt;/code&gt; column from &lt;code&gt;TEXT&lt;/code&gt; to &lt;code&gt;LONGTEXT&lt;/code&gt; type, which could hold longer strings.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Important thing to keep in mind is that if a specific table already holds a particular type of data value like an integer, you can't alter it to varchar, for example. Only if the column does not contain any values, then you could make the change.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#basic-syntax"&gt;
  &lt;/a&gt;
  Basic Syntax
&lt;/h1&gt;

&lt;p&gt;In this chapter, we will go over the basic SQL syntax.&lt;/p&gt;

&lt;p&gt;SQL statements are basically the 'commands' that you run against a specific database. Through the SQL statements, you are telling MySQL what you want it to do, for example, if you wanted to get the &lt;code&gt;username&lt;/code&gt; of all of your users stored in the &lt;code&gt;users&lt;/code&gt; table, you would run the following SQL statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT username FROM users ;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rundown of the statement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;SELECT&lt;/code&gt;: First, we specify the &lt;code&gt;SELECT&lt;/code&gt; keyword, which indicates that we want to select some data from the database. Other popular keywords are: &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;username&lt;/code&gt;: Then we specify which column we want to select&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;users&lt;/code&gt;: After that, we specify the table that we want to select the data from.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;;&lt;/code&gt; is required. Every SQL statement needs to end with a semicolumn.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you run the above statement, you will get no results as the new &lt;code&gt;users&lt;/code&gt; table that we've just created is empty.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As a good practice, all SQL keywords should be with uppercase, however, it would work just fine if you use lower case as well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's go ahead and cover the basic operations next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#insert"&gt;
  &lt;/a&gt;
  INSERT
&lt;/h2&gt;

&lt;p&gt;To add data to your database, you would use the &lt;code&gt;INSERT&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;Let's use the table that we created in the last chapter and insert 1 user into our &lt;code&gt;users&lt;/code&gt; table:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSERT INTO users(username, email, active) VALUES('bobby', 'bobby@bobbyiliev.com', true);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rundown of the insert statement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;INSERT INTO users&lt;/code&gt;: first, we specify the &lt;code&gt;INSERT INTO&lt;/code&gt; keyword, which tells MySQL that we want to insert data into the &lt;code&gt;users&lt;/code&gt; table.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;users (username, email, active)&lt;/code&gt;: then, we specify the table name &lt;code&gt;users&lt;/code&gt; and the columns that we want to insert data into.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;VALUES&lt;/code&gt;: then, we specify the values that we want to insert in.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#select"&gt;
  &lt;/a&gt;
  SELECT
&lt;/h2&gt;

&lt;p&gt;Once we've inserted that user, let's go ahead and retrieve the information.&lt;/p&gt;

&lt;p&gt;To retrieve information from your database, you could use the &lt;code&gt;SELECT&lt;/code&gt; statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM users;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+----+----------+-------+----------+--------+---------------+
| id | username | about | birthday | active | email         |
+----+----------+-------+----------+--------+---------------+
|  1 | bobby    | NULL  | NULL     |      1 | bobby@b...com |
+----+----------+-------+----------+--------+---------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we specify &lt;code&gt;*&lt;/code&gt; right after the &lt;code&gt;SELECT&lt;/code&gt; keyword, this means that we want to get all of the columns from the &lt;code&gt;users&lt;/code&gt; table.&lt;/p&gt;

&lt;p&gt;If we wanted to the only the &lt;code&gt;username&lt;/code&gt; and the &lt;code&gt;email&lt;/code&gt; columns instead, we would change the statement to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT username,email FROM users;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will return all of the users, but as of the time being we have only 1:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+----------+----------------------+
| username | email                |
+----------+----------------------+
| bobby    | bobby@bobbyiliev.com |
+----------+----------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#update"&gt;
  &lt;/a&gt;
  UPDATE
&lt;/h2&gt;

&lt;p&gt;In order to modify data in your database, you could use the &lt;code&gt;UPDATE&lt;/code&gt; statement.&lt;/p&gt;

&lt;p&gt;The syntax would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;UPDATE users SET username='bobbyiliev' WHERE id=1;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rundown of the statement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;UPDATE users&lt;/code&gt;: first, we specify the &lt;code&gt;UPDATE&lt;/code&gt; keyword followed by the table that we want to update&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;username='bobbyiliev'&lt;/code&gt; Then we specify the columns that we want to update and the new value that we want to set.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;WHERE id=1&lt;/code&gt;: Finally, by using the &lt;code&gt;WHERE&lt;/code&gt; clause, we specify which user should be updated. In our case it is the user with ID 1.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: If we don't specify a &lt;code&gt;WHERE&lt;/code&gt; clause, all of the entries inside the &lt;code&gt;users&lt;/code&gt; table would be updated, and all users would have the &lt;code&gt;username&lt;/code&gt; set to &lt;code&gt;bobbyiliev&lt;/code&gt;. You need to be careful when you use the &lt;code&gt;UPDATE&lt;/code&gt; statement without a &lt;code&gt;WHERE&lt;/code&gt; clause, as every single row will be updated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We are going to cover &lt;code&gt;WHERE&lt;/code&gt; more in-depth in the next few chapters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#delete"&gt;
  &lt;/a&gt;
  DELETE
&lt;/h2&gt;

&lt;p&gt;As the name suggests, the &lt;code&gt;DELETE&lt;/code&gt; statement would remove data from your database.&lt;/p&gt;

&lt;p&gt;The syntax is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DELETE FROM users WHERE id=1;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similar to the &lt;code&gt;UPDATE&lt;/code&gt; statement, if you don't specify a &lt;code&gt;WHERE&lt;/code&gt; clause, all of the entries from the table will be affected, meaning that all of your users will be deleted.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comments"&gt;
  &lt;/a&gt;
  Comments
&lt;/h2&gt;

&lt;p&gt;In case that you are writing a larger SQL script, it might be helpful to add some comments so that later on, when you come back to the script, you would know what each line does.&lt;/p&gt;

&lt;p&gt;As with all programming languages, you can add comments in SQL as well.&lt;/p&gt;

&lt;p&gt;There are two types of comments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inline comments:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To do so, you just need to add &lt;code&gt;--&lt;/code&gt; before the text that you want to comment out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM users; -- Get all users
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Multiple-line comments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Similar to some other programming languages in order to comment multiple lines, you could wrap the text in &lt;code&gt;/*&lt;/code&gt; &lt;code&gt;*/&lt;/code&gt; as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/*
Get all of the users
from your database
*/
SELECT * FROM users;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could write that in &lt;code&gt;.sql&lt;/code&gt; file and then run it later on, or execute the few lines directly.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Those were some of the most common basic SQL statements.&lt;/p&gt;

&lt;p&gt;If you want to learn more about SQL make sure to check out my free eBook on GitHub:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bobbyiliev/introduction-to-sql"&gt;Free Introduction to SQL eBook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To support me, you could follow me on Twitter: &lt;a href="https://twitter.com/bobbyiliev_"&gt;@bobbyiliev_&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you already know the basics, I would suggest checking out &lt;a href="https://materialize.com/"&gt;Materialize&lt;/a&gt;. Materialize is a reactive database that delivers incremental view updates. Materialize helps developers easily build with streaming data using standard SQL.&lt;/p&gt;

</description>
      <category>database</category>
      <category>sql</category>
      <category>devops</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Fast Perl module installation with cpm</title>
      <author>Mark Gardner</author>
      <pubDate>Tue, 28 Sep 2021 14:00:00 +0000</pubDate>
      <link>https://dev.to/mjgardner/fast-perl-module-installation-with-cpm-3724</link>
      <guid>https://dev.to/mjgardner/fast-perl-module-installation-with-cpm-3724</guid>
      <description>&lt;p&gt;One of Perl‚Äôs cardinal strengths is the depth and variety of add-on modules to extend its capabilities, collected for &lt;a href="https://groups.google.com/g/comp.lang.perl.announce/c/1qlLHdviZlY/m/hU90ubJHrf4J?pli=1"&gt;the past 26 years&lt;/a&gt; and counting on &lt;a href="https://www.cpan.org/"&gt;CPAN, the Comprehensive Perl Archive Network&lt;/a&gt;. Starting with &lt;a href="https://perldoc.perl.org/perl5004delta"&gt;version 5.004&lt;/a&gt; in 1997, Perl has come packaged with a module (also &lt;a href="https://perldoc.perl.org/CPAN"&gt;called CPAN&lt;/a&gt;) and associated command-line client for downloading and installing from this service. Some developers favor alternative tools such as &lt;a href="https://metacpan.org/pod/CPANPLUS"&gt;CPANPLUS&lt;/a&gt; and its &lt;code&gt;cpanp&lt;/code&gt; command or &lt;a href="https://metacpan.org/pod/App::cpanminus"&gt;cpanminus&lt;/a&gt; and its &lt;code&gt;cpanm&lt;/code&gt;, or tools built on the latter such as &lt;a href="https://metacpan.org/pod/Carton"&gt;Carton&lt;/a&gt; and &lt;a href="https://metacpan.org/pod/Carmel"&gt;Carmel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My favorite of these over the past several years has been Shoichi Kaji‚Äôs &lt;a href="https://metacpan.org/pod/App::cpm"&gt;&lt;code&gt;cpm&lt;/code&gt;&lt;/a&gt;, mainly because it‚Äôs blazingly fast. As an example, the documentation &lt;a href="https://metacpan.org/pod/App::cpm#HOW-FAST?"&gt;cites&lt;/a&gt; an installation of &lt;a href="https://plackperl.org/"&gt;Plack&lt;/a&gt;, the Perl web application toolkit, as taking three times as long using &lt;code&gt;cpanm&lt;/code&gt; versus &lt;code&gt;cpm&lt;/code&gt;. Both use the same &lt;a href="https://metacpan.org/pod/Menlo::Legacy"&gt;Menlo&lt;/a&gt; core code but &lt;code&gt;cpm&lt;/code&gt; achieves its speed by breaking down dependencies into individual streams, installing modules in parallel, and synchronizing the necessary worker processes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/CdpBV8BgPI4"&gt;Shoichi‚Äôs presentation&lt;/a&gt; from &lt;a href="https://perlconference.us/"&gt;The Perl Conference&lt;/a&gt; 2016 provides a great summary:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/CdpBV8BgPI4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It‚Äôs very important to note that &lt;strong&gt;&lt;code&gt;cpm&lt;/code&gt; is not a drop-in replacement&lt;/strong&gt; for the &lt;code&gt;cpan&lt;/code&gt; or &lt;code&gt;cpanm&lt;/code&gt; command-line tools. Firstly, it uses the subcommand &lt;code&gt;install&lt;/code&gt;, e.g., &lt;code&gt;cpm install Module::Name&lt;/code&gt;. Also, by default, it installs modules into a subdirectory named &lt;code&gt;local/&lt;/code&gt; as if you specified &lt;code&gt;cpanm --local-lib-contained local&lt;/code&gt;. You might want this if you‚Äôre setting up a Perl project with its non-core dependencies in a separate location addressed by the &lt;a href="https://metacpan.org/pod/local::lib"&gt;local::lib&lt;/a&gt; module; otherwise, you should use &lt;code&gt;cpm install --global&lt;/code&gt; to install into a directory in Perl‚Äôs &lt;a href="https://perldoc.perl.org/variables/@INC"&gt;&lt;code&gt;@INC&lt;/code&gt; array&lt;/a&gt;. I tend to do the latter when developing, declaring my project‚Äôs dependencies in a &lt;code&gt;cpanfile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Speaking of &lt;code&gt;cpanfile&lt;/code&gt;s, like &lt;code&gt;cpanm --installdeps&lt;/code&gt; &lt;code&gt;cpm&lt;/code&gt; will use a &lt;code&gt;cpanfile&lt;/code&gt; to drive project dependency installation. In fact, it defaults to looking for one if you don‚Äôt specify individual modules on the command line and supports the version-controlled &lt;code&gt;cpanfile.snapshot&lt;/code&gt; file &lt;a href="https://metacpan.org/pod/Carton#DESCRIPTION"&gt;introduced by Carton&lt;/a&gt; for tracking exact dependencies used by your project. This is great for repeatedly building &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt; containers and &lt;code&gt;cpm&lt;/code&gt; makes that process even faster.&lt;/p&gt;

&lt;p&gt;Although speed is its most important feature, &lt;code&gt;cpm&lt;/code&gt; has a couple more tricks up its sleeve like installing from a &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt; repository or self-hosted ‚ÄúDarkPAN.‚Äù Check out its &lt;a href="https://metacpan.org/pod/App::cpm::Tutorial"&gt;included tutorial&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>perl</category>
      <category>cpan</category>
      <category>conferences</category>
      <category>dependencies</category>
    </item>
    <item>
      <title>[PT-BR] Minhas duas features preferidas do Java 17</title>
      <author>Jo√£o Victor Martins</author>
      <pubDate>Tue, 28 Sep 2021 13:56:06 +0000</pubDate>
      <link>https://dev.to/j_a_o_v_c_t_r/pt-br-minhas-duas-features-preferidas-do-java-17-5aa</link>
      <guid>https://dev.to/j_a_o_v_c_t_r/pt-br-minhas-duas-features-preferidas-do-java-17-5aa</guid>
      <description>&lt;p&gt;No dia 14/09/2021, foi lan√ßada a vers√£o 17 do Java, sendo ela uma vers√£o LTS &lt;em&gt;(Long Term Support)&lt;/em&gt;. Assim como nas √∫ltimas vers√µes, a 17 trouxe algumas features bem divertidas. Minha ideia nesse post √© mostrar as duas que mais me chamaram aten√ß√£o, que s√£o a &lt;strong&gt;409:Sealed Classes&lt;/strong&gt; e a &lt;strong&gt;406:Pattern Matching for Switch&lt;/strong&gt;. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#sealed-classes"&gt;
  &lt;/a&gt;
  Sealed Classes
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Sealed&lt;/em&gt; classes e interfaces restringem quais outras classes ou interfaces devem estend√™-las e/ou implementa-las. O objetivo √© permitir que o autor da classe ou interface tenha mais controle sobre a mesma, al√©m de prover um jeito mais declarativo de restringir o uso da super classe. Um outro objetivo √© o suporte a &lt;em&gt;pattern matchings&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;sealed&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Automovel&lt;/span&gt; 
    &lt;span class="n"&gt;permits&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exemplo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;automovel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Carro&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;examplo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;automovel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Moto&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Uma vez que eu defino quais classes ir√£o poder estender de Automovel, qualquer outra classe diferente de Carro e Moto n√£o deve ser permitida. √â importante ressaltar, que as classes que ir√£o estender uma &lt;em&gt;sealed class&lt;/em&gt;, dever√£o estar no mesmo m√≥dulo, caso esteja usando &lt;em&gt;JPMS (Java Platform Module System)&lt;/em&gt; ou no mesmo pacote, caso n√£o esteja usando &lt;em&gt;JPMS&lt;/em&gt;. Para a classes que estendem, existem algumas regras. S√£o elas: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Uma subclasse deve ser declarada como final para manter a hierarquia. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Uma subclasse deve ser declarada como &lt;em&gt;sealed&lt;/em&gt; e permitir a extens√£o de um novo conjunto de classes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Uma subclasse deve ser declarada como &lt;em&gt;non-sealed&lt;/em&gt; e assim permitir que qualquer classe a estenda. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#pattern-matching-for-switch"&gt;
  &lt;/a&gt;
  Pattern Matching for Switch
&lt;/h1&gt;

&lt;p&gt;Estender a correspond√™ncia de padr√µes para &lt;em&gt;switch&lt;/em&gt; permite que uma express√£o seja testada em rela√ß√£o a v√°rios padr√µes, cada um com uma a√ß√£o espec√≠fica, de forma que consultas complexas orientadas a dados possam ser expressas de forma concisa e segura. O objetivo √© melhorar a expressividade e a aplicabilidade das extens√µes e instru√ß√µes &lt;em&gt;switch&lt;/em&gt;, al√©m de certificar que todas as express√µes e instru√ß√µes existentes continuem a compilar sem altera√ß√µes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;printarTipoAutomovel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Automovel&lt;/span&gt; &lt;span class="n"&gt;automovel&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;automovel&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Carro&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"√â um carro"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
     &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Moto&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"√â uma moto"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
     &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Autom√≥vel n√£o identificado"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;√â importante ressaltar que a &lt;strong&gt;JEP 406: Pattern Matching for switch&lt;/strong&gt; est√° como preview, o que significa que ela pode ser retirada e n√£o fazer parte das pr√≥ximas vers√µes do Java. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#concluindo"&gt;
  &lt;/a&gt;
  Concluindo
&lt;/h1&gt;

&lt;p&gt;O objetivo do post era trazer as features que mais me interessaram no Java 17, sendo essa uma escolha totalmente pessoal. Existem muitas outras features legais, que podem ser vistas em: &lt;a href="https://openjdk.java.net/projects/jdk/17/"&gt;https://openjdk.java.net/projects/jdk/17/&lt;/a&gt;. Espero que gostem da leitura. D√∫vidas, sugest√µes e/ou cr√≠ticas, estou √† disposi√ß√£o. &lt;/p&gt;

&lt;p&gt;Refer√™ncias&lt;br&gt;
&lt;a href="https://openjdk.java.net/jeps/409"&gt;https://openjdk.java.net/jeps/409&lt;/a&gt;&lt;br&gt;
&lt;a href="https://openjdk.java.net/jeps/406"&gt;https://openjdk.java.net/jeps/406&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>jdk17</category>
    </item>
    <item>
      <title>Do you know all the popular NPM commands?</title>
      <author>Ankit Kumar</author>
      <pubDate>Tue, 28 Sep 2021 13:47:45 +0000</pubDate>
      <link>https://dev.to/knowankit/do-you-know-all-the-popular-npm-commands-22ac</link>
      <guid>https://dev.to/knowankit/do-you-know-all-the-popular-npm-commands-22ac</guid>
      <description>&lt;p&gt;We all have setup our node package manager application at least once. We hardly give importance to the &lt;code&gt;npm&lt;/code&gt; because it is not a core part of our development. We perceive &lt;code&gt;npm&lt;/code&gt; as a file which is just a dependency holder. But npm is much more than that, it is not difficult to have an average grip on npm.&lt;/p&gt;




&lt;p&gt;Let's begin with all the popular commands üõ£&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#-raw-npm-init-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm init&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;This is the first command which you will use when you are setting up your project.&lt;/p&gt;

&lt;p&gt;This command asks for general information about the project name, description, version, author, github-link, homepage etc. It will generate a &lt;code&gt;package.json&lt;/code&gt; file in your root folder.&lt;br&gt;
You can edit the information anytime.&lt;/p&gt;

&lt;p&gt;If you don't want to enter the information and want to go for defaults then run this &lt;code&gt;npm init --yes&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will pick the data from your config setup. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#-raw-npm-config-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm config&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;You can update your config with this.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm config set init-author-name "Ankit Kumar"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fetch the value&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm config get init-author-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-npm-install-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm install&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Install the dependencies present in the package.json. Shorthand&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To install a package use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i package-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To save in dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i package-name --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To save in dev dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i package-name --save-dev or npm i package-name -D
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install a package globally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i package-name --global
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i package-name -g
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-npm-uninstall-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm uninstall&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Shorthand&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm un
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To uninstall a package do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm un package-name -g or -D or --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;-g&lt;/strong&gt; - remove package from global list&lt;br&gt;
&lt;strong&gt;--save&lt;/strong&gt; - remove package from dependency list&lt;br&gt;
&lt;strong&gt;-D&lt;/strong&gt; - remove package from dev dependency list&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#-raw-npm-ci-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm ci&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;This command is similar to &lt;code&gt;npm install&lt;/code&gt; except it is used in automated environment like test platforms, continuous integration and deployments.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To run &lt;code&gt;npm ci&lt;/code&gt;, &lt;code&gt;package-lock.json&lt;/code&gt; must be present&lt;/li&gt;
&lt;li&gt;If there is any version mismatch between &lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;package-lock.json&lt;/code&gt; then it will exit with errors.&lt;/li&gt;
&lt;li&gt;It is used to install entire projects and not individual package&lt;/li&gt;
&lt;li&gt;It will never write to &lt;code&gt;package.json&lt;/code&gt; or any of the &lt;code&gt;package-locks&lt;/code&gt;: installs are essentially frozen.&lt;/li&gt;
&lt;li&gt;If a node_modules is already present, it will be automatically removed before &lt;code&gt;npm ci&lt;/code&gt; begins its install.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#-raw-npm-audit-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm audit&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Scan your project for vulnerabilities and automatically install any compatible updates to vulnerable dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm audit fix
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-npm-cache-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm cache&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Add the specified package to the local cache. This command is primarily intended to be used internally by NPM, but it can provide a way to add data to the local installation cache explicitly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm cache add &amp;lt;tarball file&amp;gt;
npm cache add &amp;lt;folder&amp;gt;
npm cache add &amp;lt;tarball url&amp;gt;
npm cache add &amp;lt;name&amp;gt;@&amp;lt;version&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whenever we install any package it does not caches so to make it available offline, we can use this command.&lt;/p&gt;

&lt;p&gt;Fortunately, &lt;code&gt;yarn&lt;/code&gt; caches all the packages you install and is available offline.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-npm-ls-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm ls&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;This command will print to stdout all the versions of packages that are installed, as well as their dependencies, in a tree-structure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-npm-link-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm link&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;This is very common for dev who wants to test their component  locally before publishing it on the &lt;code&gt;npm&lt;/code&gt; registry. It will create a symbolic link in the global folder. &lt;code&gt;{prefix}/lib/node_modules/&amp;lt;package&amp;gt;&lt;/code&gt; that links to the package where the &lt;code&gt;npm&lt;/code&gt; link command was executed.&lt;/p&gt;

&lt;p&gt;Next, in some other location, &lt;code&gt;npm link package-name&lt;/code&gt; will create a symbolic link from globally-installed package-name to node_modules/ of the current folder. Now you can import your created component and it should be present in the &lt;code&gt;node_modules&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note that package-name is taken from package.json, not from directory name.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-npm-publish-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm publish&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Publishes a package to the registry so that it can be installed by name. All files in the package directory are included if no local .gitignore or .npmignore file exists.&lt;/p&gt;

&lt;p&gt;By default npm will publish to the public registry. This can be overridden by specifying a different default registry or using a scope in the name (see package.json).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-npm-pack-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm pack&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;It creates a installable file with &lt;code&gt;.tgz&lt;/code&gt; extension called tarball. This is a package file which can be install in any app. &lt;/p&gt;

&lt;p&gt;For example :&lt;br&gt;
&lt;code&gt;example-component.tgz&lt;/code&gt; is tarball file. I will copy this in any node app. I will add this in my package.json like below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"dependency": {
 "example-component: "file: ./example-component.tgz"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i/install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-npm-help-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm help&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;If supplied a topic, then show the appropriate documentation page.&lt;/p&gt;

&lt;p&gt;If the topic does not exist, or if multiple terms are provided, then run the help-search command to find a match.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-npm-whoami-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm whoami&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Print the username config to standard output.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-npm-loginlogout-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npm login/logout&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;It just logins and logout &lt;/p&gt;

&lt;p&gt;Please go through the full &lt;a href="https://docs.npmjs.com/cli/v6/commands"&gt;NPM docs&lt;/a&gt; as I have mentioned only those commands which I have seen others and used myself commonly.&lt;/p&gt;




&lt;p&gt;Thanks for dropping by üåü&lt;br&gt;
Add a ‚ù§Ô∏è if you liked it. Checkout my &lt;a href="https://github.com/knowankit"&gt;GitHub&lt;/a&gt; profile for cool projects. I have published many NPM packages.&lt;br&gt;
Support me by following me on &lt;a href="https://twitter.com/knowankit"&gt;twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>HTTP Prompt for Performance Engineers</title>
      <author>NaveenKumar Namachivayam ‚ö°</author>
      <pubDate>Tue, 28 Sep 2021 13:37:54 +0000</pubDate>
      <link>https://dev.to/qainsights/http-prompt-for-performance-engineers-33jg</link>
      <guid>https://dev.to/qainsights/http-prompt-for-performance-engineers-33jg</guid>
      <description>&lt;p&gt;In this blog post, we are going to see how you can get started with HTTP Prompt - an interactive command-line HTTP client for testing and debugging purpose. In the last couple of posts, I have covered &lt;a href="https://qainsights.com/httpie-for-performance-engineers/" rel="noreferrer noopener"&gt;HTTPie &lt;/a&gt;and &lt;a href="https://qainsights.com/http-toolkit-for-performance-engineers/" rel="noreferrer noopener"&gt;HTTP Toolkit&lt;/a&gt; utilities for performance testers and engineers. Let us get started by installing it.&lt;/p&gt;

&lt;h2&gt;How to install HTTP Prompt?&lt;/h2&gt;

&lt;p&gt;The prerequisite is to have the latest version of Python and the PIP package. To install HTTP Prompt, I am going to use Windows Subsystem for Linux (WSL) and by issuing the below command. Alternatively, you can install it on the native OS as well.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install http-prompt&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;P.S: using the &lt;code&gt;sudo&lt;/code&gt; on &lt;code&gt;pip&lt;/code&gt; is not recommended.&lt;/p&gt;

&lt;p&gt;If you would like to upgrade, issue the below command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install -U http-prompt&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To validate the installation, issue the below command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http-prompt --version&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;HTTP Prompt Features&lt;/h2&gt;

&lt;p&gt;HTTP Prompt has all the essential features for testing HTTP requests. But what is unique in HTTP Prompt is the following features: &lt;strong&gt;interactive, auto-complete and syntax highlighting&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Other features are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Auto Cookies&lt;/li&gt;
&lt;li&gt;OpenAPI/Swagger Integration&lt;/li&gt;
&lt;li&gt;Unix-like Pipelines&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://qainsights.com/httpie-for-performance-engineers/"&gt;HTTPie&lt;/a&gt;¬†compatible&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Hello World&lt;/h2&gt;

&lt;p&gt;To start HTTP Prompt, open the command line prompt and issue the below command to start a session targetting https://example.com&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http-prompt https://example.com&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above command creates a session where you can interact with it, e.g. issuing the below command displays the HTTP response. While typing the command, HTTP Prompt will autofill it for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/09/supershot.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f5TMbW-K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/09/supershot.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The below screenshot is how the response will show up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/09/supershot-1.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--atynGNDY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/09/supershot-1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To exit the session, type &lt;code&gt;exit&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Let us order a pizza.&lt;/h2&gt;

&lt;p&gt;By leveraging the httpbin.org sample demo app, let us use the HTTP Prompt to send a POST request. HTTP Prompt provides an easy way to interact with the session, just like how you interact with the computer to navigate between folders. &lt;/p&gt;

&lt;p&gt;E.g. &lt;code&gt;cd&lt;/code&gt; for change directory, &lt;code&gt;ls&lt;/code&gt; or &lt;code&gt;dir&lt;/code&gt; to list contents in the current directory etc.&lt;/p&gt;

&lt;p&gt;To order a pizza on httpbin.org, below is the POST request that needs to be sent from an HTTP client.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://httpbin.org/post

POST data:
custname=Lilly&amp;amp;custtel=9876543210&amp;amp;custemail=lilly%40example.com&amp;amp;size=medium&amp;amp;topping=cheese&amp;amp;topping=onion&amp;amp;delivery=21%3A00&amp;amp;comments=please+knock+the+door&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But in HTTP Prompt, you can do this in an interactive way. First, you need to navigate to the URL  https://httpbin.org by issuing the below command. This will create a new session for httpbin.org&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http-prompt http://httpbin.org&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To navigate into /post URL, issue the below command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd post&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will navigate into the  http://httpbin.org/post URL.&lt;/p&gt;

&lt;p&gt;To order a pizza, you can send the key value pair one by one as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/09/supershot-2.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x86lMPUL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/09/supershot-2.png" alt=""&gt;&lt;/a&gt;The HTTP Prompt keeps adding the above key value pairs to the request. Once all the payload is added, to send the POST request, just issue the command &lt;code&gt;post&lt;/code&gt; inside the session. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/09/supershot-4.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BNVyuZxi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/09/supershot-4.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To send other methods, you can use the below commands.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; get
&amp;gt; post
&amp;gt; put
&amp;gt; patch
&amp;gt; delete
&amp;gt; head&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the HTTPie commands are valid in HTTP Prompt.&lt;/p&gt;

&lt;p&gt;To view all the current session details, issue the &lt;code&gt;env&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;To save the current session, use &lt;code&gt;env &amp;gt; filepath_to_save&lt;/code&gt;, e.g. &lt;code&gt;env &amp;gt; ./mysession&lt;/code&gt;, this will save the session info to the current location.&lt;/p&gt;

&lt;p&gt;To load the current session, use &lt;code&gt;exec ./mysession&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To save the response, use &lt;code&gt;post &amp;gt; myresponse&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To leverage piping, &lt;code&gt;post | grep "data"&lt;/code&gt; or &lt;code&gt;post | jq '.data'&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To remove all the options and parameters, &lt;code&gt;rm *&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To add a header, e.g. &lt;code&gt;Content-Type:application/json&lt;/code&gt;, auto-fill will assist you find the right syntax.&lt;/p&gt;

&lt;p&gt;To send a secret payload, store the content in a file and create a variable that needs to be sent using the below code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;secret==`cat my_secret_post_payload`&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The backticks load it from the shell. Send the request using the &lt;code&gt;post&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://httpbin.org/response-headers&amp;gt; env
cd https://httpbin.org/response-headers
'secret=={"name":"morpheus","job":"leader"}'&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/09/supershot-5.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ECAfNADb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/09/supershot-5.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Configuration Location&lt;/h2&gt;

&lt;p&gt;In Windows, the first user config file will be created at, &lt;code&gt;%LOCALAPPDATA%/http-prompt/config.py&lt;/code&gt;. Default location is &lt;code&gt;~/.config/http-prompt/config.py&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;HTTP Prompt supports OpenAPI specs using &lt;code&gt;--spec&lt;/code&gt;. You can refer to the other important commands from the HTTP Prompt documents. &lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Like HTTP Pie and HTTP Toolkit, HTTP Prompt helps to test and debug HTTP requests in an interactive way with syntax highlighting and color coding. Command-line in nature helps to automate and is easy to incorporate in CI/CD as well.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>tools</category>
      <category>webperf</category>
      <category>performance</category>
    </item>
    <item>
      <title>Splunk - Rex command</title>
      <author>Maxime Guilbert</author>
      <pubDate>Tue, 28 Sep 2021 13:27:47 +0000</pubDate>
      <link>https://dev.to/adaendra/splunk-rex-command-2c02</link>
      <guid>https://dev.to/adaendra/splunk-rex-command-2c02</guid>
      <description>&lt;p&gt;When you are debugging an application, you may need to extract some data from logs &lt;em&gt;(like an id in an URI...)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To help you to do that, Splunk has the &lt;strong&gt;rex&lt;/strong&gt; command.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#command"&gt;
  &lt;/a&gt;
  Command
&lt;/h2&gt;

&lt;p&gt;The simpliest way to use it is &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;| rex &lt;em&gt;regex&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With this command, you will search for an element in the whole log.&lt;/p&gt;

&lt;p&gt;If you want to search in a specific field, add &lt;strong&gt;field=&lt;/strong&gt; and the name of your field.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;| rex field=&lt;em&gt;&lt;/em&gt; &lt;em&gt;regex&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;example&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| rex field=uri *regex*
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#regex"&gt;
  &lt;/a&gt;
  Regex
&lt;/h2&gt;

&lt;p&gt;About how to write the regex, you have to follow the next pattern&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[Regex about the text before the desired value][Regex about the desired value][Regex about the text after the desired value]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first and the last part are really look like a classic regex.&lt;br&gt;
But the middle part is a little bit particular.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;(?\w+)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Wrote like this, you will declare the field where you want insert your new data and you have the regex corresponding to your value.&lt;/p&gt;

&lt;p&gt;Also you can retrieve multiple datas from a single rex command.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;

&lt;p&gt;Retrieve a username&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| rex "user\s(?&amp;lt;username&amp;gt;\w+)\s"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Retrieve the email sender and the destination of a mail&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| rex field=_raw "From: &amp;lt;(?&amp;lt;from&amp;gt;.*)&amp;gt; To: &amp;lt;(?&amp;lt;to&amp;gt;.*)&amp;gt;"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.splunk.com/Documentation/SplunkCloud/8.2.2106/SearchReference/Rex"&gt;Splunk - Rex command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.splunk.com/Documentation/SCS/current/SearchReference/RexCommandExamples"&gt;Splunk - Rex examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://karunsubramanian.com/splunk/how-to-use-rex-command-to-extract-fields-in-splunk/"&gt;Karunsubramanian.com - Post about Splunk rex command&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;I hope it will help you! üç∫&lt;/p&gt;

</description>
      <category>devops</category>
      <category>sre</category>
      <category>splunk</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Lessons from a student hackathon</title>
      <author>Jelle Smeets</author>
      <pubDate>Tue, 28 Sep 2021 13:25:27 +0000</pubDate>
      <link>https://dev.to/smeetsmeister/lessons-from-a-student-hackathon-1kdb</link>
      <guid>https://dev.to/smeetsmeister/lessons-from-a-student-hackathon-1kdb</guid>
      <description>&lt;p&gt;I'd like to take you back to the second year of my degree in Computer science. All the way back to 2014 to be precise. A hackathon was organized where we could travel to Belgium and do a 2-day hackathon for a company, win a cash prize and stay the night in a hostel.&lt;/p&gt;

&lt;p&gt;This sounded like an exciting adventure! Getting to code with some of my classmates in a more competitive setting sounded like a nice change from the usual school projects. And having the evening to explore a nice town (and beers) in Belgium, sign me up!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-hackathon"&gt;
  &lt;/a&gt;
  The Hackathon
&lt;/h2&gt;

&lt;p&gt;In hindsight, the hackathon project was nothing special. It was for a company that thought it invented a new social media that could get big. The goal was to build a Chrome extension where users could share the page they were on. Calling their APIs and scraping the page you were on.&lt;/p&gt;

&lt;p&gt;Our group consisted of a few students who already had some experience outside of the course. Some had some summer jobs or internships as web developers. By the end of day 1, our group was miles ahead of the other groups.&lt;/p&gt;

&lt;p&gt;The evening was spent on nice food, awesome Belgian beers, and we had a long and fun night exploring the local bars. Which is honestly why we were a bit tired and hungover for day 2. Halfway through the day, we saw that the other groups were never going to catch up with us, and we decided to take it easy for the rest of the day.&lt;/p&gt;

&lt;p&gt;When the final demos were done we thought this one is in the pocket! No other team was near as far as we were. But when the results came out, they announced we had the nicest solution but they did not like the fact we took such a slow pace on the second day. Instead, they gave the prize to the runner-ups, who did not have such a nice product but instead worked their asses off.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XEt_Jd8---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pvannlfbcppj3qqka1j4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XEt_Jd8---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pvannlfbcppj3qqka1j4.jpg" alt="loser"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While I respect the decision made, we felt screwed. Instead of a ‚Ç¨400 cash prize, we got a bottle of beer. We quickly thanked them for organizing and had a long and grumpy ride home to The Netherlands.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-aftermath"&gt;
  &lt;/a&gt;
  The aftermath
&lt;/h2&gt;

&lt;p&gt;A few weeks later we got an email from the company that organized the hackathon. They were still interested in our solution and asked if we could mail the source code. We felt used, apparently, it was not good enough to win, but they still wanted to use it.&lt;/p&gt;

&lt;p&gt;After some discussions in our group, we decided to make a bold statement. We emailed them back, that for ‚Ç¨300 we could send them the source code. Feeling almost as scared as taking your driver's license exam we sent the email.&lt;/p&gt;

&lt;p&gt;Honestly, we did not expect to get it. As we sort of guessed, we got a very angry email telling us we were entitled students that still had a lot to learn in the "grown-up world".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lessons-learned"&gt;
  &lt;/a&gt;
  Lessons learned
&lt;/h2&gt;

&lt;p&gt;Our group talked to some teachers. Expecting to get in trouble. After all, they made the arrangements for the hackathon. Some agreed some did not really care, but one reaction really stood out and stuck with me.&lt;/p&gt;

&lt;p&gt;A teacher told us, you guys know what you were worth, they were probably pissed off you caught them in their game. Companies often take advantage of students/interns and I think it's a really good thing you stood up for yourselves. They probably just wanted to use what you coded and thought they could get away with getting it for (almost) free.&lt;/p&gt;

&lt;p&gt;The lesson this incident thought me is to always know your worth. Don't be afraid to stand your ground, but that can also mean you don't get what you want. But at least you won't feel taken advantage of.&lt;/p&gt;

&lt;p&gt;If you are interested in other lessons I learned, check the &lt;a href="https://blog.jellesmeets.nl/lists/4-lessons-i-learned-as-a-starting-scrum-master/"&gt;4 lessons I learned as a&lt;/a&gt; starting scrum master.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>career</category>
      <category>lessons</category>
    </item>
    <item>
      <title>Clean REACT Solutions</title>
      <author>Rupak Dey</author>
      <pubDate>Tue, 28 Sep 2021 13:19:45 +0000</pubDate>
      <link>https://dev.to/deyrupak/clean-react-solutions-10lg</link>
      <guid>https://dev.to/deyrupak/clean-react-solutions-10lg</guid>
      <description>&lt;p&gt;&lt;em&gt;Save for later.&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-selfinvoking-functions"&gt;
  &lt;/a&gt;
  1. Self-invoking functions
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Fetch data async when the page loads&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q1Yk545b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8faw8pn9l6njly3s02as.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q1Yk545b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8faw8pn9l6njly3s02as.jpg" alt="Fetch data async"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-long-shadows"&gt;
  &lt;/a&gt;
  2. Long Shadows
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Create artistic effects easily with CSS in JS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vkLK9_8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tb4azuwy6q5h2qhu3jz9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vkLK9_8X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tb4azuwy6q5h2qhu3jz9.jpg" alt="Long Shadows"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-building-timers"&gt;
  &lt;/a&gt;
  3. Building Timers
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Make super simple timer with useRef hook&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SUFatf5m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lykrtid2ctcexgrdvmd2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SUFatf5m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lykrtid2ctcexgrdvmd2.jpg" alt="Timer"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;P.S. Want the next post to be something specific? Do let me know in the comments.&lt;/p&gt;

&lt;p&gt;ü§òüèª&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Connect with me : &lt;a href="https://github.com/deyRupak"&gt;Github&lt;/a&gt; | &lt;a href="https://www.fiverr.com/share/V763ld"&gt;Tutoring&lt;/a&gt; | &lt;a href="https://www.fiverr.com/share/Rld9Y8"&gt;Freelance Web Dev&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
