<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Syncing tabs via service worker</title>
      <author>Madhav Jha</author>
      <pubDate>Wed, 09 Dec 2020 06:21:32 +0000</pubDate>
      <link>https://dev.to/jhamadhav/syncing-tabs-via-service-worker-ep7</link>
      <guid>https://dev.to/jhamadhav/syncing-tabs-via-service-worker-ep7</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;The idea of having to sync different tabs within the same browser is not something new and there are tons of different ways in which it can be done, there is no &lt;em&gt;right way&lt;/em&gt; to do it; it will always depend on the situation and task at hand.&lt;/p&gt;

&lt;p&gt;Here's a brilliant video on the very topic by Google Chrome developers on YouTube. &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/9UNwHmagedE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In this post we will achieve this by using &lt;a href="https://developers.google.com/web/fundamentals/primers/service-workers/"&gt;Service workers&lt;/a&gt; in the browser, it is not yet 100% supported in all browsers but its support is increasing day by day in modern browsers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#demonstrating-tabsync" class="anchor"&gt;
  &lt;/a&gt;
  Demonstrating tabSync
&lt;/h1&gt;

&lt;p&gt;Let's make a simple project to achieve the mentioned syncing in our projects.&lt;br&gt;
Get the &lt;a href="https://jhamadhav.com/tabSync"&gt;demo here&lt;/a&gt; and the complete code in my &lt;a href="https://github.com/jhamadhav/tabSync"&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is the final version once we implement tabSync :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O58w5Zfr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rysogbiwtv4uxpcb0552.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O58w5Zfr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rysogbiwtv4uxpcb0552.gif" alt="tabSync demo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-the-project" class="anchor"&gt;
  &lt;/a&gt;
  Setting up the project
&lt;/h2&gt;

&lt;p&gt;We will be making a simple clicker button and increment its counter value on each click by 1, and via tab sync we will be able to see the same effect on different tabs.&lt;br&gt;
Check the clicker markup and code from the &lt;a href="https://github.com/jhamadhav/hex-clicker"&gt;Hex clicker&lt;/a&gt; GitHub repo.&lt;/p&gt;

&lt;p&gt;Now we have a simple counter-click page ready.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#sending-the-increment-value-to-service-worker" class="anchor"&gt;
  &lt;/a&gt;
  Sending the increment value to service worker
&lt;/h2&gt;

&lt;p&gt;From the above repo it is clear what the hex button does, once the button is clicked it increments the global variable &lt;strong&gt;num&lt;/strong&gt; value by one and assign it to the counter.&lt;br&gt;
But since we want this value to be the same across all tabs we will send the &lt;strong&gt;num&lt;/strong&gt; variable value to the service worker via the following function below.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#receiving-and-broadcasting-the-received-data-via-service-worker" class="anchor"&gt;
  &lt;/a&gt;
  Receiving and broadcasting the received data via service worker
&lt;/h2&gt;

&lt;p&gt;Now that we sent the incremented &lt;strong&gt;num&lt;/strong&gt; value to the service worker we will have to receive it in the worker and then send the same value to all the tabs(same tabs) in the browser.&lt;/p&gt;

&lt;p&gt;The event listener for that in worker is as follows:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#updating-the-increment-value-in-tabs" class="anchor"&gt;
  &lt;/a&gt;
  Updating the increment value in tabs
&lt;/h2&gt;

&lt;p&gt;Now that we have sent the incremented value across the tab now we need to receive the same in all the tabs and then display it via the counter as follows.:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;And with that we have all our tabs(of hex-clicker) in sync with each other.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#final-words" class="anchor"&gt;
  &lt;/a&gt;
  Final words
&lt;/h1&gt;

&lt;p&gt;This was a very simplified way of using service worker to keep tabs in sync. To get started and know more on the topic check the links and resources given in the above post.&lt;br&gt;
For any and all questions regarding this comment down below.&lt;br&gt;
All helpful suggestion are welcome :)&lt;/p&gt;

</description>
      <category>serviceworker</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>browser</category>
    </item>
    <item>
      <title>Deciding to write a coding blog... Should I?</title>
      <author>Atif Aiman</author>
      <pubDate>Wed, 09 Dec 2020 05:10:46 +0000</pubDate>
      <link>https://dev.to/alserembani94/deciding-to-write-a-coding-blog-should-i-5cml</link>
      <guid>https://dev.to/alserembani94/deciding-to-write-a-coding-blog-should-i-5cml</guid>
      <description>&lt;h2&gt;
  &lt;a href="#a-new-beginning" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;A New Beginning&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;As all coders out there, we all have a beginning. Each of us has different motivation - excitement, finances offered, popularity, trendsetters - to keep us sane in coding, for any kind of coding. For enthusiast coders, they joined the communities, either local or global, to catch up with current trends and best practices. We keep improving ourselves by catching up learning new technology, and keep building things.&lt;/p&gt;

&lt;p&gt;As we progress learning to code, we have to learn different theories, concepts, paradigms, mental modals, etc. to improve how we perceive the best way of coding. Then, there are &lt;em&gt;a lot of things&lt;/em&gt; we need to remember, though there are a lot of cheat sheets out there to help you. So, how do you keep track of things that you have learn till now?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#keep-everything-tracked" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Keep everything tracked&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;It is not about your ability to catch up things, but &lt;strong&gt;a matter of time it takes until you forgot one specific thing when you didn't use that for a long time&lt;/strong&gt;. It is better, of course, if you keep practice and build things using whatever you learn, but imagine how those knowledges can also benefit you in term of self-retrospection and keep track of your learning path for others to learn as well.&lt;/p&gt;

&lt;p&gt;I believe, most of coders keep track of these things somewhere. Journals, personal site, notes, diaries, or somewhere in your IDE. People records their journey summary of code learning, and start modifying or appending a better way as soon as they find out a better way of doing things, so later on they can look back and wondering how they grow as they move forward.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#time-to-put-it-online" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Time to put it online!&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Every knowledge is a jewellery. Thus, I believe that part of those knowledges should be put online, so anyone can benefit from them as well. So, articles and podcasts can be a way of you to share your knowledge and opinions on anything you are working on. There are tons of channels you can share, such as DEV.to, Medium for articles (you can also use your own, like Hashnode), and lots of podcast channels you can discover, like Developer Tea or Full Stack Radio. You can also use microblogging approach like Twitter, as long as you share and gather input and feedback on others, so you can share and learn at the same time.&lt;/p&gt;

&lt;p&gt;But here's the question. There are a lot of coding articles out there, even in DEV.to, where the masters, the mythical 10X Developer creatures put their articles as well. You might think that your articles didn't really bring an impact, in addition that you might make a mistake somewhere in your article. Other factors such as language boundaries, makes you a bit unmotivated to produce articles.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#just-do-it" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Just Do It!&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sZb_qNmA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ry71mo7o67np4go6ay7h.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sZb_qNmA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ry71mo7o67np4go6ay7h.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember this. Writing article is not about you flexing, telling people "Hey! I follow the latest trend, just released a minute ago!", or flexing how powerful you are. There are tons of coders like you, who is still confused and try to figure out the solution which you just discovered. I know, people will still go to Stack Overflow and then go for the first one (pssst, the experienced one didn't really go for the first 😂), and just go with it, right?&lt;/p&gt;

&lt;p&gt;Here's the thing. Forums and articles have different formats. While forums are used for discussion and seeking for solution, articles are more structured and focused more on sharing a chunk of solution. And of course, when you write an article, you will think about how you want to put it in sequence, layout your content, think about languages that you will use, and et cetera. Along that process, you are actually polishing your knowledge, filtering what really matters to the solution you suggested, improving your methodology, and deliver your solution, while you learn yet another knowledge because you will do some research to make sure your articles is properly written.&lt;/p&gt;

&lt;p&gt;For language barrier thing. Treat it as a way you want to improve your writing skills. It might look scattered for the first time, but believe me, it will get better in each article. My primary language is Malay Language, and I still use this platform to improve my English (so, if you noticed a grammatical error here and there, I humbly sorry 🤣🙇‍♂️).&lt;/p&gt;

&lt;p&gt;Just write it! I am just 2-year-old in programming world (as far as I am active in industry, learnt coding long before). I believe my writing will help someone out there, adding a small impact to someone's live. Keep hustling, and learn!&lt;/p&gt;

&lt;p&gt;Peace be upon ya!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>welcome</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Running rspec tests with keyboard shortcuts in VS Code</title>
      <author>Emily Giurleo</author>
      <pubDate>Wed, 09 Dec 2020 03:26:53 +0000</pubDate>
      <link>https://dev.to/emilygiurleo/running-rspec-tests-with-keyboard-shortcuts-in-vs-code-375o</link>
      <guid>https://dev.to/emilygiurleo/running-rspec-tests-with-keyboard-shortcuts-in-vs-code-375o</guid>
      <description>&lt;p&gt;Running tests is an important part of the code-writing process, but typing the same commands over and over again can slow down your workflow.&lt;/p&gt;

&lt;p&gt;Earlier this year, I was pair-programming with a new friend at the virtual &lt;a href="https://rubyforgood.org"&gt;Ruby For Good&lt;/a&gt; conference, and he showed me a trick that blew my mind -- he used keyboard shortcuts for running rspec tests! He even had a shortcut that only ran the test he was currently working on.&lt;/p&gt;

&lt;p&gt;I can't believe this hadn't occurred to me sooner.&lt;/p&gt;

&lt;p&gt;I recently started a new job, so I decided to set up similar keyboard shortcuts in VS Code. Here's how I did it:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-user-tasks" class="anchor"&gt;
  &lt;/a&gt;
  Create User Tasks
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://code.visualstudio.com/docs/editor/tasks"&gt;Tasks&lt;/a&gt; are a feature in VS Code that allow you to automate common workflows, like linting, building, or even testing! As with most features in VS Code, it is possible to build and customize your own tasks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-the-user-tasks-settings" class="anchor"&gt;
  &lt;/a&gt;
  Open the "User Tasks" settings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Open the "all commands" menu by pressing &lt;code&gt;Cmd + Shift + P&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Type "Open User Tasks," and select the menu item that comes up&lt;/li&gt;
&lt;li&gt;This should open a file called &lt;code&gt;tasks.json&lt;/code&gt;, which should have the following format:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "version": "2.0.0",
  "tasks": [ ... ] // &amp;lt;-- There'll be some stuff in this array
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#add-a-new-task-to-your-user-tasks" class="anchor"&gt;
  &lt;/a&gt;
  Add a new task to your User Tasks
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Copy and paste the following code into the tasks array in your &lt;code&gt;tasks.json&lt;/code&gt;:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "(ruby) run all tests",
      "type": "shell",
      "command": "bundle exec rspec",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
      }
    },
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This task has the following fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;label&lt;/code&gt;: The name of the task&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;type&lt;/code&gt;: Telling VS Code to run this task as a shell command&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;command&lt;/code&gt;: The command to run in the shell (in this case, run all the rspec tests in this project)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;presentation&lt;/code&gt;: This is a list of options determining how the output of the task is displayed. Read more about those in the &lt;a href="https://code.visualstudio.com/docs/editor/tasks"&gt;VS Code Tasks Documentation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#add-the-rest-of-your-tasks-to-your-user-tasks" class="anchor"&gt;
  &lt;/a&gt;
  Add the rest of your tasks to your User Tasks
&lt;/h3&gt;

&lt;p&gt;In the previous step, you added one task, but you can add as many as you want! I have three tasks:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;bundle exec rspec&lt;/code&gt;: Run all the rspec tests in the project&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;bundle exec rspec &amp;lt;filename&amp;gt;&lt;/code&gt;: Run all the tests in a file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;bundle exec rspec &amp;lt;filename&amp;gt;:&amp;lt;line number&amp;gt;&lt;/code&gt;: Run the test at a specific line number&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's what my &lt;code&gt;tasks.json&lt;/code&gt; file looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "(ruby) run all tests",
      "type": "shell",
      "command": "bundle exec rspec",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
      }
    },
    {
      "label": "(ruby) run tests",
      "type": "shell",
      "command": "bundle exec rspec ${relativeFile}",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
      }
    },
    {
      "label": "(ruby) run current test",
      "type": "shell",
      "command": "bundle exec rspec ${relativeFile}:${lineNumber}",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
      }
    },
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You'll notice that these two new commands use the variables &lt;code&gt;relativeFile&lt;/code&gt; and &lt;code&gt;lineNumber&lt;/code&gt;. These will be replaced with the relative path to the current open file and the line number where your cursor is located. &lt;/p&gt;

&lt;p&gt;Using these variables allows you to run all the tests in the file you currently have open, or even the specific test that you currently have your cursor on!&lt;/p&gt;

&lt;p&gt;You can read more about these variables in &lt;a href="https://code.visualstudio.com/docs/editor/variables-reference"&gt;VS Code's Variable Reference&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-keyboard-shortcuts" class="anchor"&gt;
  &lt;/a&gt;
  Add keyboard shortcuts
&lt;/h2&gt;

&lt;p&gt;Once you've added new User Tasks, you can create custom shortcuts to run them whenever you want.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-the-keyboard-shortcuts-settings" class="anchor"&gt;
  &lt;/a&gt;
  Open the Keyboard Shortcuts settings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Open the "all commands" menu by pressing &lt;code&gt;Cmd + Shift + P&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Type "Open Keyboard Shortcuts (JSON)," and select the menu item that comes up&lt;/li&gt;
&lt;li&gt;This should open a file called &lt;code&gt;keybindings.json&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#create-new-shortcuts" class="anchor"&gt;
  &lt;/a&gt;
  Create new shortcuts
&lt;/h3&gt;

&lt;p&gt;Here's what my &lt;code&gt;keybindings.json&lt;/code&gt; file looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[
  {
    "key": "cmd+shift+0",
    "command": "workbench.action.tasks.runTask",
    "args": "(ruby) run all tests"
  },
  {
    "key": "cmd+shift+9",
    "command": "workbench.action.tasks.runTask",
    "args": "(ruby) run tests"
  },
  {
    "key": "cmd+shift+8",
    "command": "workbench.action.tasks.runTask",
    "args": "(ruby) run current test"
  }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For each keyboard shortcut, the &lt;code&gt;key&lt;/code&gt; option determines which keys you have to press to activate the shortcut. I've opted for &lt;code&gt;Cmd + Shift + 0&lt;/code&gt;, &lt;code&gt;Cmd + Shift + 9&lt;/code&gt;, and &lt;code&gt;Cmd + Shift + 8&lt;/code&gt;, but you should pick key combinations that feel comfortable to you and don't interfere with any existing keyboard shortcuts you like to use.&lt;/p&gt;

&lt;p&gt;Use the &lt;code&gt;args&lt;/code&gt; option to specify which task gets run with each shortcut. Make sure this value matches the &lt;code&gt;label&lt;/code&gt; you used when you created the User Tasks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#profit" class="anchor"&gt;
  &lt;/a&gt;
  Profit
&lt;/h2&gt;

&lt;p&gt;Now, when you use one of your custom shortcuts, VS Code will open a new terminal tab and run your tests for you! No more typing out a long command or remembering exactly which line number your test is on.&lt;/p&gt;

&lt;p&gt;This has saved me so much time in the past couple weeks, and I hope it saves you time, too!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2WP2j15w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mkl6v3z6y7qqzus7be72.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2WP2j15w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mkl6v3z6y7qqzus7be72.gif" alt="Kapture 2020-12-08 at 22.36.30"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>testing</category>
      <category>vscode</category>
    </item>
    <item>
      <title>How this keyword works in JavaScript</title>
      <author>Ganesh Kumar</author>
      <pubDate>Wed, 09 Dec 2020 02:44:58 +0000</pubDate>
      <link>https://dev.to/ganeshkumar6/how-this-keyword-works-in-javascript-29f3</link>
      <guid>https://dev.to/ganeshkumar6/how-this-keyword-works-in-javascript-29f3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;this&lt;/code&gt; is a keyword in JavaScript which works very differently based on how you are using it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In this article we'll go through all different possible cases and see how &lt;code&gt;this&lt;/code&gt; keyword works.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#where-raw-this-endraw-points-to-" class="anchor"&gt;
  &lt;/a&gt;
  Where &lt;code&gt;this&lt;/code&gt; points to ?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The reference of &lt;code&gt;this&lt;/code&gt; depends on where and how you are using it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let us take some examples to see where &lt;code&gt;this&lt;/code&gt; points to.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-this-endraw-globally" class="anchor"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;this&lt;/code&gt; globally
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;When you are using &lt;code&gt;this&lt;/code&gt; globally it points to the global window object.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-raw-this-endraw-inside-a-function" class="anchor"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;this&lt;/code&gt; inside a function
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;this&lt;/code&gt; works differently when your using a regular function v/s using an arrow function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The reference of &lt;code&gt;this&lt;/code&gt; inside a regular function depends on &lt;strong&gt;who is invoking the function which is accessing &lt;code&gt;this&lt;/code&gt; keyword.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In arrow functions the reference of &lt;code&gt;this&lt;/code&gt; depends on &lt;strong&gt;the surrounding scope of the function which is accessing &lt;code&gt;this&lt;/code&gt; keyword.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don't worry if you didn't fully understand the above definition, we'll see lot of examples to understand them.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Whenever you want to know where &lt;code&gt;this&lt;/code&gt; points to you can recall the above definition.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's take an example to see the difference between using &lt;code&gt;this&lt;/code&gt; in regular and arrow function.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// window&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;At first &lt;code&gt;this&lt;/code&gt; was pointing to the button but after 2 seconds it points to the window object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's see why this is the case.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Intially &lt;code&gt;this&lt;/code&gt; points to the button because button was the one which called the callback function (regular function) when a click event took place.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;But after 2 seconds another callback function (regular function) is accessing &lt;code&gt;this&lt;/code&gt; but it points to the window not the button because the callback function is not being invoked by the button.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's see what happens if we used an arrow function as callback.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// button&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Now &lt;code&gt;this&lt;/code&gt; points to the same button even after 2 seconds.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Try to recall the definition of &lt;code&gt;this&lt;/code&gt; in an arrow function to know why this is the case. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It's because the surrounding scope of the callback function is the button, that is why &lt;code&gt;this&lt;/code&gt; still points to the button. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#using-raw-this-endraw-inside-a-method" class="anchor"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;this&lt;/code&gt; inside a method
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;When you are using &lt;code&gt;this&lt;/code&gt; inside a method, the same rules that are discussed above can be used.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;peter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="nx"&gt;showThisOuter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// object&lt;/span&gt;

        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showThisInner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// window&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;showThisInner&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showThisOuter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Here the &lt;code&gt;this&lt;/code&gt; in outer function (regular function) points to the object because the object is the one who is invoking the outer function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And the &lt;code&gt;this&lt;/code&gt; in the inner function (regular function) is not being invoked by the object so it points to the global window object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's see what happens if we used an arrow function as outer function.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;peter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;showThisOuter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// window&lt;/span&gt;

        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showThisInner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// window&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;showThisInner&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showThisOuter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Here both in outer and inner function the &lt;code&gt;this&lt;/code&gt; points to the global window object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It's because in the outer function (arrow function) the &lt;code&gt;this&lt;/code&gt; points to surrounding scope which is the global window object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And the inner function (regular function) is not being invoked by the object so &lt;code&gt;this&lt;/code&gt; points to the global window object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's see what happens if we used an arrow function as inner function.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;peter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="nx"&gt;showThisOuter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// object&lt;/span&gt;

        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;showThisInner&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// object&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;showThisInner&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showThisOuter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In both the outer and inner function the &lt;code&gt;this&lt;/code&gt; points to the object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the outer function (regular function) the &lt;code&gt;this&lt;/code&gt; points to the object because the object is the one who is invoking the outer function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And the &lt;code&gt;this&lt;/code&gt; in the inner function (arrow function) points to the surrounding scope which is the object.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#changing-the-reference-of-raw-this-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Changing the reference of &lt;code&gt;this&lt;/code&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;There are ways to change the reference of &lt;code&gt;this&lt;/code&gt; using methods like call, apply and bind.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;peter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;displayThis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;displayThis&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Here &lt;code&gt;this&lt;/code&gt; points to global window object. If you want &lt;code&gt;this&lt;/code&gt; to point to the object we can use any of the above three mentioned methods.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's see all the methods one by one.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#using-call-method" class="anchor"&gt;
  &lt;/a&gt;
  Using call method
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;peter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;displayThis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// a b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;displayThis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The call method makes &lt;code&gt;this&lt;/code&gt; inside the function point to the object passed as first argument.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And it takes the rest of the parameters of the function as seperate arguments.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#using-apply-method" class="anchor"&gt;
  &lt;/a&gt;
  Using apply method
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;peter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;displayThis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//true&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// a b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;displayThis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The apply method is same as call it makes &lt;code&gt;this&lt;/code&gt; inside the function point to the object passed as first argument.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;But it takes the parameters of the function as a single array passed as second argument.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#using-bind-method" class="anchor"&gt;
  &lt;/a&gt;
  Using bind method
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;peter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;displayThis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["a","b"]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;changedThis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;displayThis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nx"&gt;changedThis&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The bind method makes &lt;code&gt;this&lt;/code&gt; inside the function point to the object passed as first argument.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It takes the parameters of the function as a single array passed as second argument.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And it returns a function with above changes so that you can call them later.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Note that the above three methods call, apply and bind can not change the reference of &lt;code&gt;this&lt;/code&gt; inside the arrow function.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Here are few things to take away from this article&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the global scope, &lt;code&gt;this&lt;/code&gt; refers to the global window object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In regular function the value of &lt;code&gt;this&lt;/code&gt; is determined by who is invoking the function which is accessing &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In arrow function the value of &lt;code&gt;this&lt;/code&gt; is determined by the surrounding scope of the function which is accessing &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can change the reference of &lt;code&gt;this&lt;/code&gt; using call, apply, and bind.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The call and apply can be used when you want to change the reference of &lt;code&gt;this&lt;/code&gt; while calling the function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The bind can be used when you want a separate function with modified reference of &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can not modify the reference of &lt;code&gt;this&lt;/code&gt; for arrow functions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>5 Great React Libraries to Look Out for in 2021</title>
      <author>Michael Bagley</author>
      <pubDate>Wed, 09 Dec 2020 02:36:45 +0000</pubDate>
      <link>https://dev.to/mbagley1020/5-great-react-libraries-to-look-out-for-in-2021-4g23</link>
      <guid>https://dev.to/mbagley1020/5-great-react-libraries-to-look-out-for-in-2021-4g23</guid>
      <description>&lt;p&gt;Front-end JavaScript frameworks have become incredibly popular over the last five years, including &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt;, &lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt;, and &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;. These modules have allowed beginners and exports turn their ideas into reality. Furthermore, they can deploy their applications on all kinds of devices.&lt;/p&gt;

&lt;p&gt;Let's take a look at 5 React libraries that are going to be very influential in 2021. Particularly, we'll focus on packages that are relatively new and making strides in the community.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#1-reactdatagrid" class="anchor"&gt;
  &lt;/a&gt;
  1. &lt;strong&gt;react-data-grid&lt;/strong&gt;
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#github" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/adazzle/react-data-grid"&gt;Github&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EWpr8k96--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/bundlephobia/min/react-data-grid%3Fstyle%3Dsocial" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EWpr8k96--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/bundlephobia/min/react-data-grid%3Fstyle%3Dsocial" alt="npm bundle size"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, an Excel clone for React that's actually intuitive and aesthetically pleasing. This is a difficult task to accomplish and I must say that this project really nails it. The featured grid has support for editors, keyboard navigation, and copy &amp;amp; paste.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adazzle.github.io/react-data-grid/canary/iframe.html?id=demos--common-features&amp;amp;viewMode=story"&gt;Here's an example of a react-data-grid sheet&lt;/a&gt;. Notice how snappy it is. I'm assuming they utilized some form of virtualization and it really shows in this example. The application is snappy and sharp. Plus, initializing one of these grid could not be easier!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;DataGrid&lt;/span&gt;
      &lt;span class="na"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ID&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

      &lt;span class="na"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Example&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Demo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;h1&gt;
  &lt;a href="#2-useeditable" class="anchor"&gt;
  &lt;/a&gt;
  2. &lt;strong&gt;use-editable&lt;/strong&gt;
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#github" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/kitten/use-editable"&gt;Github&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZPAcPpJD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/bundlephobia/min/use-editable%3Fstyle%3Dsocial" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZPAcPpJD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/bundlephobia/min/use-editable%3Fstyle%3Dsocial" alt="npm bundle size"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There a plethora of text editors available for React [especially when it comes to WYSIWYG]. This library takes a different approach though. I have to start by saying this library is incredibly small, so give it a look if this could be useful for your projects. The &lt;code&gt;use-editable&lt;/code&gt; library provides a small hook that allows elements to be &lt;code&gt;contenteditable&lt;/code&gt; while still being fully React renderable. This project's goal is to eliminate the needs for any interfacing with the DOM or &lt;code&gt;innerHTML&lt;/code&gt; to deal with natively editable content. It works on almost much any element too!&lt;/p&gt;

&lt;p&gt;To use this library, simply initiate a ref your React element and a state for your element. From there all you have to do is pass it to the useEditable hooks as follows: &lt;code&gt;useEditable(editorRef, setRefContent)&lt;/code&gt;. Here's a &lt;a href="https://codesandbox.io/s/use-editable-0l9kc"&gt;CodeSandbox demo&lt;/a&gt;. Give it a try!&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#3-easybasereact" class="anchor"&gt;
  &lt;/a&gt;
  3. &lt;strong&gt;easybase-react&lt;/strong&gt;
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#github" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/easybase/easybase-react"&gt;Github&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CBaNFtJ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/bundlephobia/min/easybase-react%3Fstyle%3Dsocial" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CBaNFtJ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/bundlephobia/min/easybase-react%3Fstyle%3Dsocial" alt="npm bundle size"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You know we had to plug our own! This library makes user authentication and database integration easier than ever before. It works with both Easybase projects or REACT integrations. The &lt;code&gt;useEasybase()&lt;/code&gt; hook gives developers access to the functions needed for a scalable project. Just wrap your root component in a custom &lt;code&gt;ebconfig.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;EasybaseProvider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEasybase&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;easybase-react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ebconfig&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ebconfig.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;EasybaseProvider&lt;/span&gt; &lt;span class="na"&gt;ebconfig&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ebconfig&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ProjectUser&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;EasybaseProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;p&gt;From there you can perform user authentication operations and access a stateful database array! Just for you, &lt;a href="https://app.easybase.io"&gt;it's free&lt;/a&gt;. Here's some more information if you want to &lt;a href="https://easybase.io/react/2020/09/20/The-Best-Way-To-Add-A-Database-To-Your-React-React-Native-Apps/"&gt;learn about Easybase and React&lt;/a&gt;. Let's take a brief look at user authentication with &lt;code&gt;easybase-react&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ProjectUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isUserSignedIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;signIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;signUp&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useEasybase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isUserSignedIn&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;You're signed in!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FrameRenderer&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;flexDirection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;column&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Username&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;usernameValue&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setUsernameValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Password&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;passwordValue&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setPasswordValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;signIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;usernameValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;passwordValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Sign In
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;signUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;usernameValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;passwordValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Sign Up
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;h1&gt;
  &lt;a href="#4-reactflow" class="anchor"&gt;
  &lt;/a&gt;
  4. &lt;strong&gt;react-flow&lt;/strong&gt;
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#github" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/wbkd/react-flow"&gt;Github&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OyLHMd2T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/bundlephobia/min/react-flow%3Fstyle%3Dsocial" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OyLHMd2T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/bundlephobia/min/react-flow%3Fstyle%3Dsocial" alt="npm bundle size"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This package has solid usage for its age. It's main implementation is the ability to build interactive node-based editors, flow charts and diagrams. The developers focused on a solid mix of functionality and customizability.&lt;/p&gt;

&lt;p&gt;The package accomplishes it goal of making it easy to implement node-based graphs with custom node types. Plus, it comes with components (mini-map, graph controls, etc.). Feel free to check out the examples or read the blog post to get started.&lt;/p&gt;

&lt;p&gt;Take a look at an &lt;a href="https://reactflow.dev/examples/"&gt;example here&lt;/a&gt;. This library appears to cover a lot of developer use cases regarding flow chart visualizations. It's fast and responsive too!&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#5-atomic-layout" class="anchor"&gt;
  &lt;/a&gt;
  5. &lt;strong&gt;Atomic Layout&lt;/strong&gt;
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#github" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/kettanaito/atomic-layout"&gt;Github&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GYgjog2z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/bundlephobia/min/atomic-layout%3Fstyle%3Dsocial" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GYgjog2z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/bundlephobia/min/atomic-layout%3Fstyle%3Dsocial" alt="npm bundle size"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note this project's peer dependencies&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Surprisingly this is our only layout library in this list (even though it feels like there's millions out there) and there is a good reason for that. I personally am not one for layout libraries due to the functionality of &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox"&gt;flexbox&lt;/a&gt;, but this package might change how I structure my projects in the future. Turns out &lt;code&gt;atomic-layout&lt;/code&gt; handles much more than just spacing.&lt;/p&gt;

&lt;p&gt;It's often very difficult to handle proper distributing and spacing when considering device scalability. Atomic Layout helps you to compose your elements by introducing a dedicated spacing layer called Composition. It encourages you to separate concerns between UI elements' visual appearance and spacing between them. Let's take a look at a brief example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;areasMobile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
  thumbnail
  header
  footer
`&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;areasTablet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
  thumbnail header
  thumbnail footer
`&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Card&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;imageUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Composition&lt;/span&gt; &lt;span class="na"&gt;areas&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;areasMobile&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;areasMd&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;areasTablet&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Thumbnail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Footer&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Thumbnail&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;imageUrl&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Thumbnail&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Header&lt;/span&gt; &lt;span class="na"&gt;as&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"h3"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Footer&lt;/span&gt; &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;paddingMd&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Footer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Composition&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;p&gt;The &lt;code&gt;Composition&lt;/code&gt; element allows developers to contextualize their React components based on the size of the users device. This is much cleaner than conditionally rendering every attribute of the component. Take a look at a more &lt;a href="https://codesandbox.io/s/responsive-props-8m14f?file=/src/components/Item.js"&gt;detailed example&lt;/a&gt; that shows the true power of this library.&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Thanks a lot for reading! Feel free to leave a comment if you have any questions/concerns, I'll be sure to get back to you.&lt;/p&gt;

</description>
      <category>react</category>
      <category>reactnative</category>
      <category>git</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Handling Command-line Arguments in NPM Scripts</title>
      <author>Felippe Regazio</author>
      <pubDate>Wed, 09 Dec 2020 02:00:55 +0000</pubDate>
      <link>https://dev.to/felipperegazio/handling-command-line-arguments-in-npm-scripts-2ean</link>
      <guid>https://dev.to/felipperegazio/handling-command-line-arguments-in-npm-scripts-2ean</guid>
      <description>&lt;h2&gt;
  &lt;a href="#custom-arguments" class="anchor"&gt;
  &lt;/a&gt;
  Custom Arguments
&lt;/h2&gt;

&lt;p&gt;Lets imagine that you have a NPM script to lint your application. Something like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eslint './src/**/*.{js,ts,tsx}'"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then you decide to add a lint --fix in quiet mode because sometimes you want the linter to fix the errors quietly for you. Then you add another script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eslint './src/**/*.{js,ts,tsx}'"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"lint:fix"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eslint './src/**/*.{js,ts,tsx}' --quiet --fix"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Your &lt;code&gt;lint:fix&lt;/code&gt; is basically your &lt;code&gt;lint&lt;/code&gt; script with two new params. So, you can rewrite it to pass the params directly to the &lt;code&gt;lint&lt;/code&gt; command instead, without repeat it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eslint './src/**/*.{js,ts,tsx}'"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"lint:fix"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run lint -- --quiet --fix"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This approach is more succinct and scalable. If you change your &lt;code&gt;lint&lt;/code&gt; command, all the variations will inherit the modifications. Is also easier to read and quickly understand.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;--&lt;/code&gt; notation tells your script to pass the parameters to the current command invoked by NPM. From the NPM docs: "NPM will pass all the arguments after the &lt;code&gt;--&lt;/code&gt; directly to your script". This feature is available on NPM &amp;gt;=2.0.0  | &lt;a href="https://docs.npmjs.com/cli/v6/commands/npm-run-script"&gt;See the Docs&lt;/a&gt;. You can pass parameters to any command.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#named-parameters" class="anchor"&gt;
  &lt;/a&gt;
  Named Parameters
&lt;/h2&gt;

&lt;p&gt;From NPM docs: "Any environment variables that start with npm_config_ will be interpreted as a configuration parameter | &lt;a href="https://docs.npmjs.com/cli/v6/using-npm/config"&gt;See the Docs&lt;/a&gt;. That said, you can use the &lt;code&gt;npm_config_&lt;/code&gt; variable to pass named parameters to your NPM scripts executions.&lt;/p&gt;

&lt;p&gt;Lets imagine that you have a &lt;code&gt;serve&lt;/code&gt; script that can serve your application in 4 modes: &lt;code&gt;development&lt;/code&gt;, &lt;code&gt;staging&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;production&lt;/code&gt; based on your NODE_ENV. So, you could have the following NPM scripts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"serve"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"nodemon index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"serve:dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"NODE_ENV=development npm run serve"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"serve:staging"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"NODE_ENV=staging npm run serve"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"serve:test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"NODE_ENV=test npm run serve"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"serve:prod"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"NODE_ENV=production npm run serve"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Cool, mission accomplished: you can serve your application based on your &lt;code&gt;stage&lt;/code&gt;, that is also very useful. But we can refactor this code to use only one script, and pass our stage as an argument using the &lt;code&gt;npm_config_&lt;/code&gt; variable like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"serve"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"NODE_ENV=$npm_config_stage nodemon index.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we can pass our &lt;code&gt;stage&lt;/code&gt; parameter ($npm_config_stage) to modify the NODE_ENV when calling our script like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run serve &lt;span class="nt"&gt;--stage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;development
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can pass any value to the &lt;code&gt;stage&lt;/code&gt; parameter, like &lt;code&gt;npm run serve stage=whatever&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Also you could want another name, like &lt;code&gt;myvar&lt;/code&gt;. So, you would call &lt;code&gt;npm run serve --myvar=whatever&lt;/code&gt; and your &lt;code&gt;npm_config_&lt;/code&gt; var would be &lt;code&gt;$npm_config_myvar&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Using Custom Parameters and Named Variables allow your NPM scripts to be smaller, easy understandable and maintainable. Thats all folks :)&lt;/p&gt;

&lt;p&gt;Cover Image by Luca Bravo @ Unsplash&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>Can you age out of dev?</title>
      <author>Sarah 🦄</author>
      <pubDate>Tue, 08 Dec 2020 23:17:26 +0000</pubDate>
      <link>https://dev.to/sarahob/can-you-age-out-of-dev-2ncf</link>
      <guid>https://dev.to/sarahob/can-you-age-out-of-dev-2ncf</guid>
      <description>&lt;p&gt;I've been thinking lately about how much I absolutely love to code, like just taking a task and building something cool. And I've also been thinking about my future with development, I'm a Senior Engineer now and I've been coding for 8 years, also taking responsibilities to design, team lead &amp;amp; architect at times. I worry that as I progress the only path is to move more and more into management responsibilities/roles or move into product. &lt;/p&gt;

&lt;p&gt;As a web engineer I feel too specialised to move into a full architect role which seems to be the only technical option for career progression. But I also have the worry that I'll get "too old" and not be hireable because all the new kids will know React v239 better than me 🙄&lt;/p&gt;

&lt;p&gt;Am I the only who worries about this? Is there career progression where you get to just stay coding/building cool shit most of the time or &lt;em&gt;can you age out of dev&lt;/em&gt;? &lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>healthydebate</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Learn React context by example
</title>
      <author>Kristijan Pajtasev</author>
      <pubDate>Tue, 08 Dec 2020 23:13:41 +0000</pubDate>
      <link>https://dev.to/chriss/learn-react-context-by-example-j7k</link>
      <guid>https://dev.to/chriss/learn-react-context-by-example-j7k</guid>
      <description>&lt;p&gt;Passing data in React is straightforward. It is top to down, from the parent to the child component. But what when you need some data in the root component and have to pass it a few levels down? It can be messy doing it like that. That is the reason why there is context. It allows us to share values down the tree without explicitly passing them. In this post, you can find out how to use the context feature with React hooks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fw5Sh0ub--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cs4tb0epebf9ntkju247.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fw5Sh0ub--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cs4tb0epebf9ntkju247.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As mentioned before, the context has many different use cases. For this post, I am using user data as an example. When you log in, this is the object you use in different places. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-create-a-context" class="anchor"&gt;
  &lt;/a&gt;
  Step 1: Create a context
&lt;/h2&gt;

&lt;p&gt;Creating context is simple, and for that, you have one function, createContext. This function receives only one parameter, default data. The result of this function is the context object, which contains the provider component.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#step-2-using-the-provide-component" class="anchor"&gt;
  &lt;/a&gt;
  Step 2: Using the provide component
&lt;/h2&gt;

&lt;p&gt;Context data is available anywhere inside the context. Still, you need to wrap all the components into the provider. The provider is a component that is available to you by executing the createContext function. This component requires one prop, value. Whatever you pass in this prop is available in all components underneath it.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#step-3-access-context-data" class="anchor"&gt;
  &lt;/a&gt;
  Step 3: Access context data
&lt;/h2&gt;

&lt;p&gt;Once you create the context and wrap everything in the provider, you want to access that data. Here is the place where the React hooks come in. All you need to do is use the useContext hook and pass context to it. After that, your context data is available.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;You can find code from this post in my &lt;a href="https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2Fkristijan-pajtasev%2Freact-hooks"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;For more, you can follow me on &lt;a href="https://twitter.com/hi_iam_chris_"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/kpajtasev/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://github.com/kristijan-pajtasev/"&gt;GitHub&lt;/a&gt;, or &lt;a href="https://www.instagram.com/hi_iam_chris_/"&gt;Instagram&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>tutorial</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>Jess Lee (she/her)</author>
      <pubDate>Tue, 08 Dec 2020 20:41:39 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-3cbo</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-3cbo</guid>
      <description>&lt;p&gt;Every Tuesday, we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week. ❤️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#docker-containers-and-images-are-still-alive" class="anchor"&gt;
  &lt;/a&gt;
  Docker containers and images are still alive
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/inductor"&gt;@inductor&lt;/a&gt;
 wants you to know that all hope is not lost after the announcement that Kubernetes is deprecating Docker as a container runtime after v1.20. This post walks devs through how to understand this update.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inductor" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IY1d8LC2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--jT2fi-Gd--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/48425/c59486d9-7b8c-4b72-bde8-7aa227fb5b02.jpeg" alt="inductor image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inductor/wait-docker-is-deprecated-in-kubernetes-now-what-do-i-do-e4m" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Wait, Docker is deprecated in Kubernetes now? What do I do?&lt;/h2&gt;
      &lt;h3&gt;Kohei Ota ・ Dec  2 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#docker&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#kubernetes&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 
&lt;h3&gt;
  &lt;a href="#what-advice-would-you-give-to-developers-trying-to-move-into-engineering-from-nontraditional-roles" class="anchor"&gt;
  &lt;/a&gt;
  What advice would you give to developers trying to move into engineering from non-traditional roles?
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/shaundai"&gt;@shaundai&lt;/a&gt;
 asked the same question of a handful of developers: “As someone coming from a non-technical role - how can I make myself stand out?” Here’s what they learned...&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/shaundai" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_MjF7Wjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--aJeUw1q7--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/255076/b7ce6a16-65c4-4633-9651-b3c378227ccc.png" alt="shaundai image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/shaundai/5-things-i-learned-by-asking-developers-one-question-52h7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;5 Things I Learned by Asking Developers One Question&lt;/h2&gt;
      &lt;h3&gt;Shaundai Person ・ Dec  7 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 
&lt;h3&gt;
  &lt;a href="#stonks" class="anchor"&gt;
  &lt;/a&gt;
  Stonks!
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/nirvikagarwal"&gt;@nirvikagarwal&lt;/a&gt;
 shared an awesome tutorial for building a basic stock prediction application using Machine Learning and its concepts. P.S. If you need a primer on what the heck the “stonks” meme is all about check out &lt;a href="https://knowyourmeme.com/memes/stonks"&gt;this&lt;/a&gt; page.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/nirvikagarwal" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y_Lhnfy1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--EGxHpzl5--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/446720/74427276-6708-4a2e-bfb2-d0f83d2109f2.png" alt="nirvikagarwal image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/nitdgplug/stonksmaster-predict-stock-prices-using-python-ml-3hmc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Stonksmaster - Predict Stock prices using Python &amp;amp; ML 📈&lt;/h2&gt;
      &lt;h3&gt;Nirvik Agarwal ・ Dec  2 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#machinelearning&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#python&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#happy-25th-javascript" class="anchor"&gt;
  &lt;/a&gt;
  Happy 25th, JavaScript!
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/danielleadams"&gt;@danielleadams&lt;/a&gt;
 is celebrating the 25th anniversary of JavaScript in a very DEV Community manner: sharing a timeline of the top JS milestones since its inception. Love it!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/danielleadams" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4OtAI2-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--SkQaWUaa--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/275207/807c7c0f-74ca-40aa-84de-d00f4e85b823.jpeg" alt="danielleadams image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/heroku/celebrating-25-years-of-javascript-2c29" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Celebrating 25 Years of JavaScript&lt;/h2&gt;
      &lt;h3&gt;Danielle Adams ・ Dec  4 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#npm&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#maximize-the-odds-of-your-resume-being-read" class="anchor"&gt;
  &lt;/a&gt;
  Maximize the odds of your resume being read
&lt;/h3&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/gergelyorosz"&gt;@gergelyorosz&lt;/a&gt;
 has been a hiring manager at a handful of companies you’ve very likely heard of. Here’s what they recommend if you want your resume to stand out from the pack. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/gergelyorosz" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YBCJelsM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XC3jWBWf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/207574/bde7de5d-a161-40af-b00b-1d819a18a8dc.png" alt="gergelyorosz image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/gergelyorosz/six-principles-your-resume-should-follow-so-recruiters-will-read-it-3a0o" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Six Principles Your Resume Should Follow - So Recruiters Will Read It&lt;/h2&gt;
      &lt;h3&gt;Gergely Orosz ・ Dec  1 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#books&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#resume&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#its-possible-to-get-a-ps5" class="anchor"&gt;
  &lt;/a&gt;
  It’s possible to get a PS5
&lt;/h3&gt;

&lt;p&gt;Yep, you read that right. Maybe you’ll be able to pull of that holiday gift-giving miracle after all following &lt;a class="comment-mentioned-user" href="https://dev.to/marisayou"&gt;@marisayou&lt;/a&gt;
’s tutorial&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/marisayou" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1EAU5Mst--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--RtKq7Kmj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/496319/50104667-6c52-4b0c-be79-ad1a6471c8ec.jpeg" alt="marisayou image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/marisayou/how-to-get-a-playstation-5-when-it-s-always-out-of-stock-5d4i" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How To Get a PlayStation 5 When It's Always Out of Stock&lt;/h2&gt;
      &lt;h3&gt;Marisa You ・ Dec  1 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#automation&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#authenticating-against-microservices" class="anchor"&gt;
  &lt;/a&gt;
  Authenticating against microservices
&lt;/h3&gt;

&lt;p&gt;“Microservices are a great tool when it comes to designing scalable and extensible architectures” writes &lt;a class="comment-mentioned-user" href="https://dev.to/deleteman123"&gt;@deleteman123&lt;/a&gt;
 -- especially when paired with a REST-based interface. In this post, they share how to accomplish an important microservice requirement: authenticating against them.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/deleteman123" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Do_cmJ1i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--fcDG_uU4--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/77392/2434afcd-acef-4b1f-a3fb-eeab4acec940.jpg" alt="deleteman123 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/deleteman123/jwt-authentication-best-practices-3lf9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;JWT Authentication Best Practices&lt;/h2&gt;
      &lt;h3&gt;Fernando Doglio ・ Dec  4 ・ 14 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#jwt&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#authentication&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Improving and optimizing performance of React apps with Reactime v7.0 </title>
      <author>Tania Lind</author>
      <pubDate>Tue, 08 Dec 2020 20:23:18 +0000</pubDate>
      <link>https://dev.to/lindtania/improving-and-optimizing-performance-of-react-apps-with-reactime-v7-0-3d0o</link>
      <guid>https://dev.to/lindtania/improving-and-optimizing-performance-of-react-apps-with-reactime-v7-0-3d0o</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--osf_9swh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sbjzux9wvz6fj8bc22yg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--osf_9swh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sbjzux9wvz6fj8bc22yg.gif" alt="reactime7"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nominated-for-2020-react-open-source-awards" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://osawards.com/react/"&gt;Nominated for 2020 React Open Source Awards&lt;/a&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#what-is-reactime" class="anchor"&gt;
  &lt;/a&gt;
  What is Reactime?
&lt;/h2&gt;

&lt;p&gt;When it comes to React applications, one of the most challenging aspects of optimizing your application is state management debugging. Nowadays there are so many ways to handle the state of your application, Hooks, Context API, Redux, etc, but not too many tools that are fully compatible with it all. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Reactime helps centralize the complex state debugging process.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Prior to Reactime v.7.0, Reactime was known simply as a time-travel debugging tool for React applications. With the new latest version, we have expanded its functionality and increased its accuracy. Now, Reactime 7.0 is a performance tool for React applications, including frameworks like Gatsby and Next.js. Not only does it help manage  and understand the state of your application, but you can now also visualize the rendering frequency of your components. Additionally, Reactime now only runs in development mode which allows us to enhance its speed without slowing down your applications. &lt;/p&gt;

&lt;p&gt;Let’s elaborate on what we improved and added with this new release of Reactime. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-features-of-reactime-v70" class="anchor"&gt;
  &lt;/a&gt;
  New features of Reactime v7.0
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;New rendering feature + rendering time for each component ; &lt;/li&gt;
&lt;li&gt;Compatibility with Gatsby and Next.js; &lt;/li&gt;
&lt;li&gt;Runs on single and multi-page applications;
&lt;/li&gt;
&lt;li&gt;Brand new minimalist and intuitive design for UI; &lt;/li&gt;
&lt;li&gt;Improved algorithm in terms of time-complexity for the performance tab; &lt;/li&gt;
&lt;li&gt;Works in development mode only, and doesn’t affect the speed of your app; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works" class="anchor"&gt;
  &lt;/a&gt;
  How it works
&lt;/h2&gt;

&lt;p&gt;Utilizing the React Fiber reconciliation, Reactime records and caches snapshots of your application’s state every time it is changed and enables you to time-travel through previous states. It allows the developer to visualize a tree graph of the state changes, calculate the diff between snapshots, and have a playback option that helps identify the changes of the state step by step. Additionally, you can analyze each component’s rendering frequency and speed with our performance tab.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-helps" class="anchor"&gt;
  &lt;/a&gt;
  How it helps
&lt;/h2&gt;

&lt;p&gt;Have you ever wondered why your application is running slow? One of the most common issues that can affect your React application’s performance is unnecessary render cycles. Typically, React components re-renders whenever their parent renders. It can be pretty overwhelming to debug and optimize a React app especially if you are not the one who built the application. With a quick google search, you can see countless articles on how a React developer can view the render cycles of their components. There are some great npm packages that engineers can incorporate in their development processes. Some examples include why-did-you-render, react-render-visualizer, rerendering-react-redux, and react-updates. Unfortunately, these require the developer to add packages that take up space and the extra step of wrapping their components or props in functions or even more components. However, with a simple download of Reactime v7.0, you no longer have to take up unnecessary time and space in your codebase.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#render-optimizer" class="anchor"&gt;
  &lt;/a&gt;
  Render Optimizer
&lt;/h2&gt;

&lt;p&gt;Reactime now offers a way to visualize and track each of your react’s components renders. In Reactime’s performance tab, you will find a toggle button that switches the view between the graph of a snapshot’s performance as a whole, and the new rendering feature that shows you how many times a component has rendered. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nc7x6Mw4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tjw6ho6oc18n27u4pbcn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nc7x6Mw4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tjw6ho6oc18n27u4pbcn.gif" alt="reactime-new"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The rendering view updates in real-time as you make state changes to your application. Streamline your debugging process by taking a look at how one child component renders in comparison to the rest of your components. You may find that there is a component that re-renders regardless of where you are changing state. Reactime will immediately pick this up, so you can jump back into your codebase and make performance-enhancing changes. &lt;/p&gt;

&lt;p&gt;The rendering view also shows whether your component is stateful, as well as the average time a component takes to render. Some experimental users have found that Reactime has been very helpful for the optimization of their application. Using this new feature, one developer was notified that an image on their website was rendering 300 times over the course of a few seconds. They were able to easily fix this issue and substantially improve their website’s efficiency with one change.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Ax2riRO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0v2bga3oci8egqsbsepp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Ax2riRO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0v2bga3oci8egqsbsepp.gif" alt="reactime-render"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#performant-algorithm" class="anchor"&gt;
  &lt;/a&gt;
  Performant Algorithm
&lt;/h3&gt;

&lt;p&gt;In addition to the new render optimizer, Reactime’s performance itself got a face lift with this latest version. While these changes are not visible on the extension itself, it greatly improves the developer experience with its improved time complexity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uiux-design" class="anchor"&gt;
  &lt;/a&gt;
  UI/UX Design
&lt;/h3&gt;

&lt;p&gt;Older Reactime users will notice one of the biggest changes to the extension is its more intuitive and modernized UI/UX design. Blue gradients, fiery-rose buttons, and additional icons make elements easier to find and guide you to the best parts of the application. In the component map tab, developers can now expand and close nodes, making it an effortless process to view specific parent-child relationships between your components.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-collaborate-with-reactime" class="anchor"&gt;
  &lt;/a&gt;
  How to collaborate with Reactime
&lt;/h3&gt;

&lt;p&gt;As an open-source application, we’d love for you to test this application out and submit any issues or contributions you may have. We are always interested in improving and hearing your ideas. Let us know what you think down below or head over to Github or reactime.io for more information. The ReadMe for the developers you can find in the source folder.   &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-resources" class="anchor"&gt;
  &lt;/a&gt;
  More Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/better-programming/time-traveling-state-with-reactime-6-0-53fdc3ae2a20"&gt;Time-Travel State with Reactime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@aquinojardim/react-fiber-reactime-4-0-f200f02e7fa8"&gt;React Fiber and Reactime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@yujinkay/meet-reactime-a-time-traveling-state-debugger-for-react-24f0fce96802"&gt;Meet Reactime - a time-traveling State Debugger for React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://itnext.io/deep-in-the-weeds-with-reactime-concurrent-react-fiberroot-and-browser-history-caching-7ce9d7300abb"&gt;Deep in Weeds with Reactime, Concurrent React_fiberRoot, and Browser History Caching&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#contributors" class="anchor"&gt;
  &lt;/a&gt;
  Contributors:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/rtviner"&gt;Becca Viner&lt;/a&gt;, &lt;a href="https://github.com/caitlinchan23"&gt;Caitlin Chan&lt;/a&gt;, &lt;a href="https://github.com/Nkmai"&gt;Kim Mai Nguyen&lt;/a&gt;, &lt;a href="https://github.com/rtviner"&gt;Tania Lind&lt;/a&gt; &lt;/p&gt;

</description>
      <category>react</category>
      <category>gatsby</category>
      <category>nextjs</category>
      <category>devtools</category>
    </item>
    <item>
      <title>Git hook is the new Husky</title>
      <author>Krzysztof Kaczyński</author>
      <pubDate>Tue, 08 Dec 2020 20:17:02 +0000</pubDate>
      <link>https://dev.to/krzysztofkaczy9/do-you-really-need-husky-247b</link>
      <guid>https://dev.to/krzysztofkaczy9/do-you-really-need-husky-247b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#backstory" class="anchor"&gt;
  &lt;/a&gt;
  Backstory
&lt;/h2&gt;

&lt;p&gt;Some time ago I was asked to introduce an automatization which would check if committed files fit linter rules responsible for uniform code formatting and code quality (e.g.: &lt;code&gt;eslint&lt;/code&gt;, &lt;code&gt;prettier&lt;/code&gt;, &lt;code&gt;stylelint&lt;/code&gt; e.t.c.)  &lt;/p&gt;

&lt;p&gt;After I did some research it came out that the most common way to do that is to use &lt;a href="https://github.com/typicode/husky"&gt;&lt;code&gt;husky&lt;/code&gt;&lt;/a&gt; with &lt;a href="https://github.com/okonet/lint-staged"&gt;&lt;code&gt;lint-staged&lt;/code&gt;&lt;/a&gt;. I installed and configured those tools. Everything worked as expected. If the file contained any errors which couldn't be auto-fixed by linter, committing process was interrupted and the error message was shown in the terminal. Unfortunately, this solution has one problem. Running &lt;code&gt;husky&lt;/code&gt; and &lt;code&gt;lint-staged&lt;/code&gt; takes much more time than I expected. Sometimes it even took more time than the committing process itself (including checking the files for any errors).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#githooks" class="anchor"&gt;
  &lt;/a&gt;
  Git-hooks
&lt;/h2&gt;

&lt;p&gt;As I had some time left after I completed this task I decided that I will look for another solution. I searched a little more and I found &lt;a href="https://git-scm.com/docs/githooks"&gt;&lt;code&gt;git-hooks&lt;/code&gt;&lt;/a&gt;. I read a bit more about &lt;code&gt;git-hooks&lt;/code&gt; and it came out that &lt;code&gt;git&lt;/code&gt; offer native solution to do some custom actions at certain points in &lt;code&gt;git&lt;/code&gt; execution for example committing changes. &lt;a href="https://git-scm.com/docs/githooks#_pre_commit"&gt;&lt;code&gt;pre-commit&lt;/code&gt;&lt;/a&gt; caught my attention, which is briefly described like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"This hook is invoked by &lt;a href="https://git-scm.com/docs/git-commit"&gt;git-commit[1]&lt;/a&gt;, and can be bypassed with the &lt;code&gt;--no-verify&lt;/code&gt; option. It takes no parameters, and is invoked before obtaining the proposed commit log message and making a commit. ..."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From the above text it follows, that before commit becomes submitted we have some time to execute custom operations like linting and auto-fixing staged files. All files changed in this phase can be added and included in the same commit (it means that we do not have to create a separated commit to apply changes from linters auto-fixes). After I read some about &lt;code&gt;shell&lt;/code&gt; scripting I was ready to create my first &lt;code&gt;git-hook&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pre-commit&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="nv"&gt;RED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\0&lt;/span&gt;&lt;span class="s2"&gt;33[1;31m"&lt;/span&gt;
&lt;span class="nv"&gt;GREEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\0&lt;/span&gt;&lt;span class="s2"&gt;33[1;32m"&lt;/span&gt;
&lt;span class="nv"&gt;NC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\0&lt;/span&gt;&lt;span class="s2"&gt;33[0m"&lt;/span&gt;
&lt;span class="nv"&gt;linter_exit_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;span class="nv"&gt;all_ts_files&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;git diff &lt;span class="nt"&gt;--cached&lt;/span&gt; &lt;span class="nt"&gt;--diff-filter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;d &lt;span class="nt"&gt;--name-only&lt;/span&gt; | &lt;span class="nb"&gt;grep &lt;/span&gt;ts&lt;span class="nv"&gt;$)&lt;/span&gt;
&lt;span class="nv"&gt;all_scss_files&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;git diff &lt;span class="nt"&gt;--cached&lt;/span&gt; &lt;span class="nt"&gt;--diff-filter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;d &lt;span class="nt"&gt;--name-only&lt;/span&gt; | &lt;span class="nb"&gt;grep &lt;/span&gt;scss&lt;span class="nv"&gt;$)&lt;/span&gt;
./node_modules/.bin/eslint &lt;span class="nv"&gt;$all_ts_files&lt;/span&gt; &lt;span class="nt"&gt;--quiet&lt;/span&gt; &lt;span class="nt"&gt;--fix&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./node_modules/.bin/stylelint &lt;span class="nv"&gt;$all_scss_files&lt;/span&gt; &lt;span class="nt"&gt;--stdin&lt;/span&gt; &lt;span class="nt"&gt;--quiet&lt;/span&gt; &lt;span class="nt"&gt;--fix&lt;/span&gt;
&lt;span class="nv"&gt;linter_exit_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;
git add &lt;span class="nt"&gt;-f&lt;/span&gt; &lt;span class="nv"&gt;$all_ts_files&lt;/span&gt; &lt;span class="nv"&gt;$all_scss_files&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$linter_exit_code&lt;/span&gt; &lt;span class="nt"&gt;-ne&lt;/span&gt; 0 &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then
  &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RED&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ❌ Linter errors have occurred ( ͡ಥ ͜ʖ ͡ಥ)&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;NC&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;exit &lt;/span&gt;1
&lt;span class="k"&gt;else
  &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GREEN&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ✔ Eslint and Stylelint did not find any errors [̲̅&lt;/span&gt;&lt;span class="nv"&gt;$̲&lt;/span&gt;&lt;span class="s2"&gt;̅(̲̅ ͡° ͜ʖ ͡°̲̅)̲̅&lt;/span&gt;&lt;span class="nv"&gt;$̲&lt;/span&gt;&lt;span class="s2"&gt;̅]&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;NC&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;exit &lt;/span&gt;0
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What is going on in above code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;git diff --cached --diff-filter=d --name-only | grep ts$&lt;/code&gt;&lt;/strong&gt; → we are collecting all staged files, then we are filtering out deleted ones (if you do not do that your linter will throw an error for those files because this linter won't be able to resolve paths for deleted files) then I am using &lt;code&gt;grep&lt;/code&gt; to take only files which I am interested in. In my case, I am collecting &lt;code&gt;.ts&lt;/code&gt; files for &lt;code&gt;eslint&lt;/code&gt; and &lt;code&gt;.scss&lt;/code&gt; for stylelint,&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;linter_exit_code=$?&lt;/code&gt;&lt;/strong&gt; → save &lt;em&gt;exit code&lt;/em&gt; of last executed action(&lt;code&gt;0&lt;/code&gt; in case no errors or errors that can be auto-fixed by linter or &lt;code&gt;1&lt;/code&gt; in case of errors not fixable by linters)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;git add -f $all_ts_files $all_scss_files&lt;/code&gt;&lt;/strong&gt; → add files auto-fixed by linters. We need to use &lt;code&gt;-f&lt;/code&gt; flag to force &lt;code&gt;git add&lt;/code&gt; in case of &lt;code&gt;$all_ts_files&lt;/code&gt; and &lt;code&gt;$all_scss_files&lt;/code&gt; are empty&lt;/li&gt;
&lt;li&gt;At the end of this script I am displaying proper information basing on &lt;em&gt;exit code&lt;/em&gt; value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After we create a &lt;code&gt;git-hook&lt;/code&gt; we have to remember to update &lt;code&gt;git&lt;/code&gt; configuration or create a symlink between &lt;code&gt;git&lt;/code&gt; configuration and created &lt;code&gt;git-hook&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git&lt;/code&gt; command (should work for every operating system)&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config core.hooksPath ./git-hooks
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;symlink (Linux)&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ln -s -f ../../git-hooks/pre-commit .git/hooks/pre-commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is worth to add above scripts to &lt;code&gt;npm postinstall&lt;/code&gt;, because of that every developer which will clone our repository and run &lt;code&gt;npm install&lt;/code&gt; script will also configure &lt;code&gt;git-hooks&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Using &lt;code&gt;git-hooks&lt;/code&gt; instead of &lt;code&gt;husky&lt;/code&gt; and &lt;code&gt;lint-staged&lt;/code&gt; came out to be an excellent idea because committing time was sped up about twice. In addition, I got rid of two additional dependencies in the project, what can become very useful especially in case of &lt;code&gt;husky&lt;/code&gt; because from &lt;code&gt;Husky 5&lt;/code&gt; documentation we can find out that &lt;code&gt;Husky 5&lt;/code&gt; will be &lt;a href="https://typicode.github.io/husky/#/"&gt;&lt;strong&gt;free only for open-source projects&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#seven-steps-to-set-up-raw-githooks-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Seven steps to set up &lt;code&gt;git-hooks&lt;/code&gt;
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;In project directory create &lt;em&gt;&lt;code&gt;git-hooks&lt;/code&gt;&lt;/em&gt; directory&lt;/li&gt;
&lt;li&gt;Go to &lt;em&gt;&lt;code&gt;.git/hooks&lt;/code&gt;&lt;/em&gt; directory&lt;/li&gt;
&lt;li&gt;From the name of hook which you want to use remove &lt;code&gt;.sample&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Move this hook into created &lt;em&gt;&lt;code&gt;git-hooks&lt;/code&gt;&lt;/em&gt; directory&lt;/li&gt;
&lt;li&gt;Create your &lt;code&gt;git-hook&lt;/code&gt; body&lt;/li&gt;
&lt;li&gt;Update &lt;code&gt;git&lt;/code&gt; configuration or create a symlink from &lt;em&gt;&lt;code&gt;git-hooks&lt;/code&gt;&lt;/em&gt; to &lt;em&gt;&lt;code&gt;.git/hooks&lt;/code&gt;&lt;/em&gt; directory&lt;/li&gt;
&lt;li&gt;Add the appropriate script to &lt;code&gt;npm postinstall&lt;/code&gt; command &lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>git</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Here Are 8 Questions You Should Ask Your Employer Before Taking the Job</title>
      <author>Indrek Lasn</author>
      <pubDate>Tue, 08 Dec 2020 19:48:20 +0000</pubDate>
      <link>https://dev.to/indreklasn/here-are-8-questions-you-should-ask-your-employer-before-taking-the-job-5c9o</link>
      <guid>https://dev.to/indreklasn/here-are-8-questions-you-should-ask-your-employer-before-taking-the-job-5c9o</guid>
      <description>&lt;p&gt;This article was originally published at &lt;a href="https://thewholesome.dev/p/here-are-8-questions-you-should-ask"&gt;https://thewholesome.dev/p/here-are-8-questions-you-should-ask&lt;/a&gt; &lt;/p&gt;




&lt;p&gt;Working as a developer is a lot of fun — you get to solve challenging and complex tasks every day. Oh, and the pay is okay too.&lt;/p&gt;

&lt;p&gt;Often, your team consists of smart developers who are eager to solve the tasks as a team. Great teammates are crucial when working on larger projects, and so is the environment you work in. &lt;/p&gt;

&lt;p&gt;You don’t want to burn out in two weeks — ideally, you want to work there for years to fully see the project flourish.&lt;/p&gt;

&lt;p&gt;Finding the right developer job can be tricky since there are a lot of crappy jobs out there. A crappy developer job will you make unhappy, depressed, and unfilled — It’s a rough road you would want to avoid.&lt;/p&gt;

&lt;p&gt;Thus, I put together a list of questions you should ask your employer before taking on the job. These questions will give you a rough estimation of how much you’ll be appreciated by the company.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-how-often-do-you-work-evenings-and-weekends" class="anchor"&gt;
  &lt;/a&gt;
  1. How Often Do You Work Evenings and Weekends?
&lt;/h2&gt;

&lt;p&gt;A simple yet important question — this tells you if they respect work-life balance or not. You might have a life outside of work, or you might have a dog, wife, and kids that you’re looking forward to being with.&lt;/p&gt;

&lt;p&gt;If your employer doesn’t respect your work-life balance, you have hot potatoes in your lap.&lt;/p&gt;

&lt;p&gt;If you’re in your 20s, this might not be as big of a red flag, but the older you get, the more you’re going to appreciate this. &lt;/p&gt;

&lt;p&gt;Remember, no company is loyal to its employees — it’s a hoax. The company is there to make money. That’s their ultimate goal, and they’ll do whatever it takes, including working you to death. You have to fight for your freedom.&lt;/p&gt;

&lt;p&gt;If you have the chance, ask another developer on the team this question. The more they beat around the bush, the more overworked they are. If you’re not getting honest and forthright answers, assume they’re not telling you the truth.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-whats-the-average-turnover-rate" class="anchor"&gt;
  &lt;/a&gt;
  2. What’s the Average Turnover Rate?
&lt;/h2&gt;

&lt;p&gt;The turnover rate refers to the percentage of employees leaving a company within a certain period of time. Companies keep track of their average tenure —it’s a measurement for them to understand their workforce better.&lt;/p&gt;

&lt;p&gt;Firing people is expensive — it’s the last thing a company wants to do. Let’s say you’re about to work on a massive project, and if there are only two core developers left out of 25, that’s a huge red flag.&lt;/p&gt;

&lt;p&gt;With limited information, you have to figure out why so many developers left the project. &lt;/p&gt;

&lt;p&gt;Does the interviewer provide you with a reasonable explanation of why so many people left in a flurry? If they tell you they don’t know the answer, assume they're not being honest, unless it’s a startup at a really early-stage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-whats-a-typical-day-like-in-this-position" class="anchor"&gt;
  &lt;/a&gt;
  3. What’s a Typical Day Like in This Position?
&lt;/h2&gt;

&lt;p&gt;This question gives the interviewer the opportunity to talk about the best bits of the job — and if they don’t open up and start talking out of delight, something might be off.&lt;/p&gt;

&lt;p&gt;Really, there are no right or wrongs here. I worked for a company where we all watched “South Park” during lunch breaks. At a different startup, we went swimming near the lake during lunch.&lt;/p&gt;

&lt;p&gt;Each company has a different culture, and this question gives you the chance to clear things up and see if you’re potentially a good match for the company and vice versa.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-how-have-you-supported-developer-professional-development-in-the-past" class="anchor"&gt;
  &lt;/a&gt;
  4. How Have You Supported Developer Professional Development in the Past?
&lt;/h2&gt;

&lt;p&gt;If you’re just starting out, you really want a team that will allow time for a senior dev to mentor you as you’re completing your work. This is expected of more experienced developers, and you should try to find a place that values this type of mentorship. &lt;/p&gt;

&lt;p&gt;If they’re a company that will just throw you to the wolves for your tasks, it’s probably best to skip them, unless you thrive in those types of environments.&lt;/p&gt;

&lt;p&gt;Every decent company that wants to retain its talent should work very hard on educating its junior ranks while letting the more experienced developers explore different paths. &lt;/p&gt;

&lt;p&gt;Traveling for developer conferences, coding courses, guest speakers, and in-house conferences are great ways for developers to share their knowledge and learn new things. A great company will keep its developers by providing new and more challenging tasks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-ask-for-a-tour-around-the-office-at-the-end" class="anchor"&gt;
  &lt;/a&gt;
  5. Ask for a Tour Around the Office at the End
&lt;/h2&gt;

&lt;p&gt;Tours are important — they show initiative and that you’re interested and actually want the gig.&lt;/p&gt;

&lt;p&gt;Asking for a tour also gives you an exact image of what your future working environment looks like. If you get off the elevator and see everyone working shoulder to shoulder on pairs of tiny 19" monitors with barely enough room to move their mouse without hitting someone else’s keyboard — you’ve got a problematic employer.&lt;/p&gt;

&lt;p&gt;During the tour, and even when you first walk into the place, pay attention to the people. Are they happy? Smiling? Conversing? Or are they all miserable and have bags under their eyes? This is really telling of the workplace.&lt;/p&gt;

&lt;p&gt;If you’re not leaving the office with a big grin on your face the first day, chances are high you might never leave the building with a smile on your face.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-whats-the-best-and-worst-thing-about-working-here" class="anchor"&gt;
  &lt;/a&gt;
  6. What’s the Best and Worst Thing About Working Here?
&lt;/h2&gt;

&lt;p&gt;This is my favorite question to ask in any sort of interview since it really turns the tables. It seems obvious, but I’ve had multiple recruiters have to stop and think about this one before giving me an answer.&lt;/p&gt;

&lt;p&gt;A perfect job doesn’t exist — every job has its ups and downs. It’s your task to find out the good and bad parts and decide for yourself.&lt;/p&gt;

&lt;p&gt;I remember asking this question from a chief operating officer (COO) in a medium-sized company, and the answer I got was very, very vague. It almost seemed like he was annoyed with the question, or he was just scared to say anything bad about the company.&lt;/p&gt;

&lt;p&gt;You guessed it — I didn’t take the job.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-ask-them-to-describe-their-software-development-lifecycle-how-often-do-they-release-code" class="anchor"&gt;
  &lt;/a&gt;
  7. Ask Them to Describe Their Software Development Lifecycle (How Often Do They Release Code?)
&lt;/h2&gt;

&lt;p&gt;If they’re constantly trying to hit deadlines, have limited testing environments, don’t have automated tests, don’t have multi-tenancy, and have a horrific deployment process, then walk away.&lt;/p&gt;

&lt;p&gt;It sucks to work your butt off for six months only to be told, “Hey, scratch that, we’re not going to release the product.”&lt;/p&gt;

&lt;p&gt;Anger, disappointment, and resentment will follow, and you’ll start to reject ideas from the management team. After all, you worked nights and days only to be tossed aside. This is a downward spiral into unhappiness, unfulfillment, and probably switching companies.&lt;/p&gt;

&lt;p&gt;I’ve learned to ask what days they release their software on — if the answer is Fridays before the afternoon, you have a problem. &lt;/p&gt;

&lt;p&gt;Why would any company that makes money online make such critical changes during the hours when everyone has gone home and forgotten about their jobs?&lt;/p&gt;

&lt;p&gt;Most people have left the office already, and if things were to go wrong, there’s only a small fleet ready to handle the issue. A sensible company will push a newer version of their software when the people are in or near the office, not when they’re spending time with their families.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-ask-about-the-companys-long-term-vision-what-are-your-plans-for-the-next-five-years" class="anchor"&gt;
  &lt;/a&gt;
  8. Ask About the Company’s Long Term Vision (What Are Your Plans for the Next Five Years?)
&lt;/h2&gt;

&lt;p&gt;This question gives the interviewer a chance to give you a clear view of the company's vision. Is the vision exciting and clear? Do you agree and align with that vision?&lt;/p&gt;

&lt;p&gt;You can usually tell when a company has a great vision. Even if it’s a startup. Usually, vision is what feeds people. A place with no vision often has a horrible culture and high turnover.&lt;/p&gt;

&lt;p&gt;You’re going to spend most of your life in that workplace and environment, and so it’s critical to be on board and agree as a collective about what you want to achieve.&lt;/p&gt;

&lt;p&gt;It’s very hard to hide the fact that you’re not passionate about the project and vision. So, save yourself the trouble and hassle if you’re just not feeling like that’s something you would want to do for the longterm. &lt;/p&gt;

&lt;p&gt;There are hundreds of thousands of developer jobs — pick the one that suits you the most. I would pick the job where I believe in the company’s vision over any other job, even one that pays double. Of course, don’t let the company take advantage of you. They should still offer competitive pay even if the vision is exciting.&lt;/p&gt;

&lt;p&gt;Conclusion&lt;br&gt;
Thanks for reading, I hoped you learned something new. After reading this article, you should be equipped with knowledge on how to find that exciting new job the next time you’re in the job market.&lt;/p&gt;

&lt;p&gt;Feel free to sign up to get future articles in your email inbox. &lt;a href="https://thewholesome.dev/"&gt;https://thewholesome.dev/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
