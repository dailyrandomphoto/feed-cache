<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Como instalar Java no Linux com SDKMAN!</title>
      <author>Natália Oliveira</author>
      <pubDate>Thu, 09 Dec 2021 10:08:20 +0000</pubDate>
      <link>https://dev.to/nfo94/como-instalar-java-no-linux-com-sdkman-31i9</link>
      <guid>https://dev.to/nfo94/como-instalar-java-no-linux-com-sdkman-31i9</guid>
      <description>&lt;p&gt;Quando estava estudando orientação a objetos com Java uns anos atrás me lembro de ter bastante dificuldade de instalar o Java e configurar o PATH. Testei fazer o processo várias vezes em máquinas virtuais com Linux até me sentir mais segura. &lt;/p&gt;

&lt;p&gt;Tempos depois conheci o &lt;a href="https://sdkman.io/"&gt;SDKMAN&lt;/a&gt;, uma ótima ferramenta para facilitar a instalação e gerenciamento de versões do Java. &lt;/p&gt;

&lt;p&gt;Vale o aviso: não trabalho profissionalmente com Java, utilizei para estudos e para a faculdade, então não sei como está o ecossistema, melhores práticas, enfim.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-que-%C3%A9-o-sdkman"&gt;
  &lt;/a&gt;
  O que é o “SDKMAN!”?
&lt;/h2&gt;

&lt;p&gt;Segundo o próprio site:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SDKMAN! é uma ferramenta para gerenciar versões paralelas de múltiplos kits de desenvolvimento de software&lt;/strong&gt; na maioria dos sistemas baseados no Unix. Ela provê uma interface de linha de comando conveniente e API para instalar, mudar, remover e listar candidatos.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Os “candidatos” que o site se refere são as &lt;strong&gt;possíveis versões que uma tecnologia pode ter&lt;/strong&gt;, como Java 8 ou 11. O SDKMAN! também serve para Scala, Spring Boot, Maven, entre outras.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#instalando-o-sdkman"&gt;
  &lt;/a&gt;
  Instalando o SDKMAN!
&lt;/h2&gt;

&lt;p&gt;Para &lt;a href="https://sdkman.io/install"&gt;instalar o SDKMAN!&lt;/a&gt; abra um terminal e faça o seguinte:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-s&lt;/span&gt; &lt;span class="s2"&gt;"https://get.sdkman.io"&lt;/span&gt; | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Siga as instruções que forem aparecendo no terminal, depois digite:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/.sdkman/bin/sdkman-init.sh"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Verifique se tudo foi instalado corretamente:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sdk version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Você verá algo como &lt;code&gt;sdkman 5.0.0+51&lt;/code&gt;. Se você entrar no seu &lt;code&gt;.bashrc&lt;/code&gt; verá, ao final do arquivo, uma configuração do SDKMAN!, e é importante que você não a remova.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#listando-as-poss%C3%ADveis-vers%C3%B5es-do-java"&gt;
  &lt;/a&gt;
  Listando as possíveis versões do Java
&lt;/h2&gt;

&lt;p&gt;Para ver todas as versões disponíveis digite:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sdk list java
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Você verá algo assim:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BmyPaYAk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lvmc1dhsp95p077fq320.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BmyPaYAk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lvmc1dhsp95p077fq320.png" alt="Terminal iamge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;O AdoptOpenJDK é o que eu uso (até onde sei esta versão é open source). Tem também as versões Java do Alibaba, Amazon, SAP, etc. &lt;strong&gt;O &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; indica a versão default que tem na máquina&lt;/strong&gt;, e o &lt;strong&gt;&lt;code&gt;local only&lt;/code&gt; as que estão instaladas&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#baixando-uma-vers%C3%A3o-do-java"&gt;
  &lt;/a&gt;
  Baixando uma versão do Java
&lt;/h2&gt;

&lt;p&gt;Para baixar uma versão listada:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sdk &lt;span class="nb"&gt;install &lt;/span&gt;java 12.0.2.hs-adpt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O SDKMAN! sempre pergunta se você deseja setar a versão instalada como default, então é só digitar &lt;code&gt;Y&lt;/code&gt; ou &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Para verificar a versão atual digite &lt;code&gt;skd current&lt;/code&gt; e ele irá listar todas as tecnologias que você instalou e suas respectivas versões. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#definindo-uma-vers%C3%A3o-como-padr%C3%A3o"&gt;
  &lt;/a&gt;
  Definindo uma versão como padrão
&lt;/h2&gt;

&lt;p&gt;Para definir uma versão com default, digite&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sdk default java &lt;span class="o"&gt;[&lt;/span&gt;versão desejada]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E pronto, a versão será setada.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Fontes&lt;/em&gt;:&lt;br&gt;
&lt;a href="https://sdkman.io/"&gt;SDKMAN!&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Esse texto não tem intenção de esgotar o tema. Acrescente nos comentários, e também aponte erros quando os identificar.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>linux</category>
      <category>sdkman</category>
      <category>portugues</category>
    </item>
    <item>
      <title>Extending Bootstrap components using utility classes only, just like Tailwind</title>
      <author>Alexis</author>
      <pubDate>Thu, 09 Dec 2021 10:06:34 +0000</pubDate>
      <link>https://dev.to/webpixels/extending-bootstrap-components-using-utility-classes-only-just-like-tailwind-59am</link>
      <guid>https://dev.to/webpixels/extending-bootstrap-components-using-utility-classes-only-just-like-tailwind-59am</guid>
      <description>&lt;p&gt;In this post, I will talk about the utility classes concept to demonstrate how you can use Bootstrap in a way that allows you to build faster, better, and with no duplicate code or custom CSS classes.&lt;/p&gt;

&lt;p&gt;Using the utility API included in the framework, you can create classes like &lt;code&gt;mx-auto&lt;/code&gt; or &lt;code&gt;shadow-5&lt;/code&gt; to change the default style of an element, just like Tailwind does. This is a great approach that allows us to remain consistent, by having pre-built patterns (buttons, cards, etc.) and these classes to tweak the components quickly without messing with CSS. &lt;/p&gt;

&lt;p&gt;To make things easier in my development process, I created a Bootstrap 5 extension to add new components that are not included in the core of the framework (e.g. avatars), new colors and typography, and an extended set of utility classes to allow you to customize your components directly into you HTML. It is open-source. Here is the &lt;a href="https://webpixels.io/docs/css/1.0/transform"&gt;demo&lt;/a&gt; and the &lt;a href="https://github.com/webpixels/css"&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#customizing-bootstrap-components"&gt;
  &lt;/a&gt;
  Customizing Bootstrap components
&lt;/h2&gt;

&lt;p&gt;How can you customize and extend a Bootstrap component? There are two approaches I recommend:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-the-sass-variables"&gt;
  &lt;/a&gt;
  Using the Sass variables
&lt;/h3&gt;

&lt;p&gt;I highly recommend using Sass when you want to change the default style provided by Bootstrap. Change the padding, color, border using variables. Bootstrap did a great job documenting each component and its variables.&lt;/p&gt;

&lt;p&gt;Say you want to change the appearance of the alert component. Head to the documentation and scroll to the Sass variables section. You will find something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nv"&gt;$alert-padding-y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;               &lt;span class="nv"&gt;$spacer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$alert-padding-x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;               &lt;span class="nv"&gt;$spacer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$alert-margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;           &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$alert-border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;           &lt;span class="nv"&gt;$border-radius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$alert-link-font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;        &lt;span class="nv"&gt;$font-weight-bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$alert-border-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;            &lt;span class="nv"&gt;$border-width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$alert-bg-scale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;                &lt;span class="m"&gt;-80%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$alert-border-scale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;            &lt;span class="m"&gt;-70%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$alert-color-scale&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;             &lt;span class="m"&gt;40%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$alert-dismissible-padding-r&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="nv"&gt;$alert-padding-x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 3x covers width of x plus default padding on either side&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replace the values with your own and compile it to see the changes using Gulp, Webpack, Laravel Mix, or your current setup.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-utility-classes"&gt;
  &lt;/a&gt;
  Using utility classes
&lt;/h3&gt;

&lt;p&gt;Instead of creating new custom CSS classes, you can use utilities. These allow you to avoid duplicate code and help you keep things very clean. Every time you need a custom style or behavior for your components, try using utility classes.&lt;/p&gt;

&lt;p&gt;Say you want a pill button. Instead of going to your CSS and create a new class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.btn-pill&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;border-radius-pill&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It would look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary rounded-pill"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Button&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So simple right? And this is just the easiest example. Things get much more interesting when you need more complex stuff. &lt;/p&gt;

&lt;p&gt;Check out how I used the transform utilities to change the orientation or rotation of an element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"d-flex"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"transform translate-x-n1/2 translate-y-n1/2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"transform rotate-12"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"transform skew-x-12"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"transform scale-50"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://webpixels.io/docs/css/"&gt;Check out the documentation&lt;/a&gt; to see all the utility classes included in Webpixels CSS using the Bootstrap utility API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-responsive-breakpoints"&gt;
  &lt;/a&gt;
  Using the responsive breakpoints
&lt;/h2&gt;

&lt;p&gt;Use the &lt;code&gt;.transform-none&lt;/code&gt; to remove this behaviour on any breakpoint.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"transform translate-x-32 transform-md-none"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;This was just a short introduction to the Bootstrap utility API and how you can use Webpixels CSS to extend the framework's default look and feel.&lt;/p&gt;

&lt;p&gt;What do you think about this approach? Is this how you build UIs too, or do you prefer a different method? 🤔&lt;/p&gt;

</description>
      <category>bootstrap</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>tailwindcss</category>
    </item>
    <item>
      <title>Advent of code  Day 9</title>
      <author>Marco Servetto</author>
      <pubDate>Thu, 09 Dec 2021 10:03:34 +0000</pubDate>
      <link>https://dev.to/marcoservetto/advent-of-code-day-9-4l7p</link>
      <guid>https://dev.to/marcoservetto/advent-of-code-day-9-4l7p</guid>
      <description>&lt;p&gt;I'm very satisfied for my solution today.&lt;br&gt;
This problem fits very well with AdamsTowel matrixes.&lt;br&gt;
You can see a video description of my solution at &lt;br&gt;
(&lt;a href="https://www.youtube.com/watch?v=tSTDJlICst8"&gt;https://www.youtube.com/watch?v=tSTDJlICst8&lt;/a&gt;)&lt;br&gt;
Some highlights of the solution:&lt;br&gt;
(1)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(new=that.with(row=\row-1\) catch error Any _ void \add(new))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is making a new coordinate and adding it to the list under construction. If the coordinate would be outside of the matrix, an error is raised and ignored.&lt;br&gt;
(2)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sizes=I.List()( for i in Range(seeds.size()) 
    \add(Match.Count()(for v in matrix \add(v==i+100I)))
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we taint the seeds using a number much bigger than any height.&lt;br&gt;
The number can be tracked back as the corresponding seed index.&lt;/p&gt;

&lt;p&gt;(3)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GrowBasin={class method Void(mut Matrix matrix)=(
  for c in matrix.coords() var h in matrix {
    if h&amp;gt;=9I return void
    return for ci in Near(c) if matrix.val(ci)&amp;gt;99I return h:=matrix.val(ci)
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To grow a basin one step, we search for all the coordinates c of height h; if there is a ci near c that is tainted with a basin number, we taint the current height too.&lt;/p&gt;

&lt;p&gt;Here is the full code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;reuse [L42.is/AdamsTowel]

Fs = Load:{reuse[L42.is/FileSystem]}

Matrix = Collection.matrix(I.List,row=100I, col=100I)

Coords = Collection.list(Matrix.Coord)

Split={class method S.List (S that)=\()(//should be in adamsTowel
  for c in that.replace(S"" with=S",").split(S",")\add(c)
  )}
Near={class method Coords (Matrix.Coord that)=Coords()((
  (new=that.with(row=\row-1\) catch error Any _ void \add(new))
  (new=that.with(row=\row+1\) catch error Any _ void \add(new))
  (new=that.with(col=\col-1\) catch error Any _ void \add(new))
  (new=that.with(col=\col+1\) catch error Any _ void \add(new))
  ))}
GrowBasin={class method Void(mut Matrix matrix)=(
  for c in matrix.coords() var h in matrix {
    if h&amp;gt;=9I return void
    return for ci in Near(c) if matrix.val(ci)&amp;gt;99I return h:=matrix.val(ci)
    }
  )}
NeedsMore={class method Bool(read Matrix matrix) = 
  Match.Some()(for e in matrix \add(e&amp;lt;9I))  
  }
PopMax ={class method I (mut I.List that)=(
  var i = 0I
  var e = 0I
  for ei in that, ii in Range(that.size()) if ei&amp;gt;e (
    e:=ei, i:=ii
    )
  that.remove(i)
  e
  )}

MainPart2 = (
  input = Fs.Real.#$of().read(\"input")
  matrix = Matrix(\()(
    for s in input.split(S.nl()) for si in Split(s) \add(I(string=si))
    ))
  seeds = Coords()(for c in matrix.coords() h in matrix (
    min = Match.All()(for ci in Near(c) \add(matrix.val(ci)&amp;gt;h))
    if min \add(c)
    ))
  for c in seeds, i in Range(seeds.size()) (matrix.set(c val=i+100I))
  while NeedsMore(matrix=matrix) ( GrowBasin(matrix=matrix) )
  sizes=I.List()( for i in Range(seeds.size()) 
    \add(Match.Count()(for v in matrix \add(v==i+100I)))
    )
  v1=PopMax(sizes)
  v2=PopMax(sizes)
  v3=PopMax(sizes)
  Debug(v1*v2*v3)//882942
  )

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>adventofcode</category>
      <category>adventofcode2021</category>
      <category>programming</category>
      <category>42</category>
    </item>
    <item>
      <title>Data Types in JavaScript</title>
      <author>Khyati Baria</author>
      <pubDate>Thu, 09 Dec 2021 09:50:19 +0000</pubDate>
      <link>https://dev.to/khyatibaria/data-types-in-javascript-1mal</link>
      <guid>https://dev.to/khyatibaria/data-types-in-javascript-1mal</guid>
      <description>&lt;p&gt;Data types describe the characteristics of data stored in a variable. Data types can be divided into two:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Primitive Data types&lt;/li&gt;
&lt;li&gt;Non-primitive Data types&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;1. Primitive Data Types&lt;/strong&gt;&lt;br&gt;
Primitive data types are immutable or non-modifiable data types. Once a primitive data type is created we cannot modify it. Primitive data types in JavaScript include:-&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Number&lt;/strong&gt;&lt;br&gt;
Number datatype can stores both integers and decimal values. Using Number data type we can do all the arithmetic operations.&lt;br&gt;
&lt;code&gt;let age = 21;&lt;br&gt;
var quantity= 12;&lt;br&gt;
const gravity = 9.81  // we use const for non-changing values&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Strings&lt;/strong&gt;&lt;br&gt;
Strings data type are used to store textual data. To declare a string, we need a variable name, assignment operator, and a value under a single quote, double quote, or backtick quote.&lt;br&gt;
&lt;code&gt;let userName = "Khyati";&lt;br&gt;
let city = 'Mumbai';&lt;br&gt;
let language = 'JavaScript';&lt;br&gt;
let space = ' ';           // an empty space string&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Booleans&lt;/strong&gt;&lt;br&gt;
The Boolean data type can store only two values i.e. true and false.This type is commonly used to store yes or no types values.&lt;br&gt;
&lt;code&gt;var yes = true;&lt;br&gt;
var no= false;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Null&lt;/strong&gt;&lt;br&gt;
null data type is special type of placeholder in JavaScript. Null value represents the intentional absence of any object value.&lt;br&gt;
&lt;code&gt;var vaule = null;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Undefined&lt;/strong&gt;&lt;br&gt;
The undefined data type is special type of placeholder in JavaScript, undefined means “value is not assigned”. If a variable is declared, but not assigned, then its value is undefined.&lt;br&gt;
&lt;code&gt;var  userName;&lt;br&gt;
console.log(userName);  // shows "undefined"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Non-primitive Data Types&lt;/strong&gt;&lt;br&gt;
Non-primitive data types are modifiable or mutable. We can modify the value of non-primitive data types even after it gets created. Non-primitive data types in JavaScript includes:-&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Arrays&lt;/strong&gt;&lt;br&gt;
Arrays data type are used to store multiple values at a time in single variable. An array is a list of values store within a variable, and can access these values by referring to their index number.&lt;br&gt;
&lt;code&gt;let numbers = [1, 2, 3];&lt;br&gt;
let fruits=['apple', 'banana', 'mango'];&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Objects&lt;/strong&gt;&lt;br&gt;
Objects are the complex data type in JavaScript. Object tries to map real like things in programing. Object stores the data in form of key value pair. Where key is string and value can be anything.&lt;br&gt;
&lt;code&gt;let car={&lt;br&gt;
name: 'Honda City',&lt;br&gt;
model: 'VMT' ,&lt;br&gt;
color: 'Black',&lt;br&gt;
}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So this is it for this article. If you find it informative please leave a like and consider following me. Thanks for reading.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Binary Tree Traversal, Part 1</title>
      <author>Mia</author>
      <pubDate>Thu, 09 Dec 2021 09:50:18 +0000</pubDate>
      <link>https://dev.to/miatemma/binary-tree-traversal-part-1-2m0m</link>
      <guid>https://dev.to/miatemma/binary-tree-traversal-part-1-2m0m</guid>
      <description>&lt;p&gt;In the last post, we discussed how &lt;a href="https://picolisp-blog.hashnode.dev/picolisp-explored-the-idx-function"&gt;binary trees&lt;/a&gt; are created in PicoLisp. Now let's play a little more with them. See the following &lt;a href="https://rosettacode.org/wiki/Tree_traversal#PicoLisp"&gt;task from the Rosetta Code&lt;/a&gt;:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Implement a binary tree where each node carries an integer, and implement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pre-order,&lt;/li&gt;
&lt;li&gt;in-order,&lt;/li&gt;
&lt;li&gt;post-order, and&lt;/li&gt;
&lt;li&gt;level-order traversal. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use those traversals to output the following tree:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;         1
        / \
       /   \
      /     \
     2       3
    / \     /
   4   5   6
  /       / \
 7       8   9
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The correct output should look like this:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;preorder:    1 2 4 7 5 3 6 8 9
inorder:     7 4 2 5 1 8 6 9 3
postorder:   7 4 5 2 8 9 6 3 1
level-order: 1 2 3 4 5 6 7 8 9
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#some-thoughts-about-the-task"&gt;
  &lt;/a&gt;
  Some thoughts about the task
&lt;/h3&gt;

&lt;p&gt;The first thing we need to clarify is the meaning of "preorder", "inorder", "postorder" and "level-order". This &lt;a href="https://en.wikipedia.org/wiki/Tree_traversal"&gt;Wikipedia article&lt;/a&gt; can help:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;preorder&lt;/strong&gt;: visit current node, traverse the left subtree, traverse right subtree. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;inorder&lt;/strong&gt;  traverse left subtree, visit current node, traverse right subtree. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;postorder&lt;/strong&gt; traverse left subtree, traverse right subtree, visit  current node. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;level-order&lt;/strong&gt;  (also called "breadth first search") the tree is broadened as much as possible before going to the next depth.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One key characteristic of binary trees is that a "large" binary tree is constructed from a repetitive pattern of "small" trees. This is very convenient for us: It means we can define the above four rules in a very simple way &lt;strong&gt;by use of recursion&lt;/strong&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#step-1-defining-the-tree"&gt;
  &lt;/a&gt;
  Step 1. Defining the tree
&lt;/h2&gt;

&lt;p&gt;We have learned in the previous post that a binary tree is represented as a nested list where the syntax is &lt;code&gt;(root (left-child) right-child)&lt;/code&gt;. Let's set a global variable &lt;code&gt;*Tree&lt;/code&gt; as list:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(setq *Tree
   (1
      (2 (4 (7)) (5))
      (3 (6 (8) (9))) ) )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;You can double-check the tree structure in the REPL with &lt;code&gt;(view &amp;lt;var&amp;gt;)&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Question: &lt;strong&gt;Why didn't we use the &lt;code&gt;idx&lt;/code&gt; function as learned in the previous post?&lt;/strong&gt; - Because the tree from the task is not a &lt;em&gt;search&lt;/em&gt; tree. In a search tree, the left child is supposed to be smaller, the right child larger than the root.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-recursive-nature-of-binary-trees"&gt;
  &lt;/a&gt;
  The recursive nature of binary trees
&lt;/h2&gt;

&lt;p&gt;Now we need to think a little bit about the nature of binary trees. We said before that a large binary tree is a &lt;em&gt;composition&lt;/em&gt; of small binary trees. What does that mean exactly? &lt;/p&gt;

&lt;p&gt;Look at the binary tree example from above and "chop" off the root. What do you get? &lt;strong&gt;Two new binary trees!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YzHiGID---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631698821200/WmDepGhHW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YzHiGID---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631698821200/WmDepGhHW.png" alt="choppedtree.png" width="517" height="330"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Together with the fact that binary trees are actually implemented as lists, this is a very handy characteristics. In lists we can access the first list element with the &lt;code&gt;car&lt;/code&gt; function, and all the rest with the &lt;code&gt;cdr&lt;/code&gt;-function. &lt;em&gt;(Go back to the &lt;a href="https://picolisp-blog.hashnode.dev/60-picolisp-functions-you-should-know-6-lists-and-strings"&gt;List and Strings post&lt;/a&gt; if you forgot why).&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;: (car *Tree)
-&amp;gt; (1)
: (cdr *Tree)
-&amp;gt; -&amp;gt; ( (2 (4 (7)) (5)) (3 (6 (8) (9))) )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we know that &lt;code&gt;2, 4, 7, 5&lt;/code&gt; forms one subtree, and &lt;code&gt;3, 6, 8, 9&lt;/code&gt; forms another subtree. This corresponds to the output of &lt;code&gt;(cdr *Tree)&lt;/code&gt;:  &lt;code&gt;( (subtree 2-4-7-5) (subtree 3-6-8-9)&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;This means: &lt;strong&gt;if we do &lt;code&gt;car&lt;/code&gt; and &lt;code&gt;cdr&lt;/code&gt; on &lt;code&gt;(cdr *Tree)&lt;/code&gt;, we can get the subtrees on each side.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Instead of &lt;code&gt;car (cdr ...)&lt;/code&gt; we can write &lt;code&gt;cadr&lt;/code&gt;, and instead of &lt;code&gt;cdr (cdr ..)&lt;/code&gt;, we can write &lt;code&gt;cddr&lt;/code&gt;. So let's use this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;: (cadr *Tree)
-&amp;gt; (2 (4 (7)) (5))
: (cddr *Tree)
-&amp;gt; ((3 (6 (8) (9))))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
&lt;code&gt;&lt;br&gt;
Looks almost good, only one minor modification is needed.&lt;/code&gt;&lt;code&gt;cddr&lt;/code&gt;&lt;code&gt;returns a **list with only one item**. In order to get this single item, let's take the&lt;/code&gt;&lt;code&gt;car&lt;/code&gt;&lt;code&gt;of&lt;/code&gt;&lt;code&gt;cddr&lt;/code&gt;&lt;code&gt;, in short&lt;/code&gt;&lt;code&gt;caddr&lt;/code&gt;`, for the right subtree:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
: (caddr *Tree)&lt;br&gt;
-&amp;gt; (3 (6 (8) (9)))&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;




&lt;p&gt;One last thing to mention is that the &lt;code&gt;&lt;/code&gt;car&lt;code&gt;&lt;/code&gt; and &lt;code&gt;&lt;/code&gt;cdr&lt;code&gt;&lt;/code&gt; functions do not modify the original &lt;code&gt;&lt;/code&gt;&lt;em&gt;Tree&lt;code&gt;&lt;/code&gt;. We merely move the pointers around. This means, these functions are **not destructive&lt;/em&gt;*:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
: *Tree&lt;br&gt;
-&amp;gt; (1 (2 (4 (7)) (5)) (3 (6 (8) (9))))&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-endraw-raw-"&gt;
  &lt;/a&gt;
  `&lt;code&gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#and-recurse"&gt;
  &lt;/a&gt;
  ...and recurse!
&lt;/h3&gt;

&lt;p&gt;Let's double-check the recursive nature of our tree. Let's take the left subtree, &lt;code&gt;&lt;/code&gt;2-4-7-5&lt;code&gt;&lt;/code&gt;. Again, we get the &lt;strong&gt;node&lt;/strong&gt; by &lt;code&gt;&lt;/code&gt;car&lt;code&gt;&lt;/code&gt;, the &lt;strong&gt;left subtree&lt;/strong&gt; by the &lt;code&gt;&lt;/code&gt;cadr&lt;code&gt;&lt;/code&gt; and the &lt;strong&gt;right subtree&lt;/strong&gt; by &lt;code&gt;&lt;/code&gt;caddr&lt;code&gt;&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
: (car (cadr *Tree))&lt;br&gt;
-&amp;gt; 2&lt;br&gt;
: (cadr (cadr *Tree))&lt;br&gt;
-&amp;gt; (4 (7))&lt;br&gt;
: (caddr (cadr *Tree))&lt;br&gt;
-&amp;gt; (5)&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
If we try to access a breach that does not exist, we get &lt;code&gt;&lt;/code&gt;NIL&lt;code&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
: (caddr (caddr (cadr *Tree)))&lt;br&gt;
-&amp;gt; NIL&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#step-2-defining-the-functions"&gt;
  &lt;/a&gt;
  Step 2. Defining the functions
&lt;/h2&gt;

&lt;p&gt;Now comes the interesting part - how can we use this recursive nature to solve the pre-order task? Well, the definition from above already tells us how to do it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;preorder&lt;/strong&gt;: visit current node, traverse the left subtree, traverse right subtree. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's define a function &lt;code&gt;&lt;/code&gt;preorder&lt;code&gt;&lt;/code&gt;, with an argument &lt;code&gt;&lt;/code&gt;Tree&lt;code&gt;&lt;/code&gt; (which is a list, as we know now). If &lt;code&gt;&lt;/code&gt;Tree&lt;code&gt;&lt;/code&gt; is defined, let's print its root:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
(de preorder (Tree)&lt;br&gt;
    (printsp (car Tree)&lt;br&gt;
    ....&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we want to "traverse the left subtree", and if there is a left child, we print it. And then we take again the left child, if available. If there is no left child, we return &lt;code&gt;&lt;/code&gt;NIL&lt;code&gt;&lt;/code&gt; and try the right side next. Well, and that's already all there is to do.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
(de preorder (Tree)&lt;br&gt;
   (when Tree&lt;br&gt;
      (printsp (car Tree))&lt;br&gt;
      (preorder (cadr Tree) )&lt;br&gt;
      (preorder (caddr Tree) ) ) )&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The function returns &lt;code&gt;&lt;/code&gt;1 2 4 7 5 3 6 8 9&lt;code&gt;&lt;/code&gt;. &lt;/p&gt;




&lt;p&gt;Now it is easy to define &lt;code&gt;&lt;/code&gt;inorder&lt;code&gt;&lt;/code&gt; and &lt;code&gt;&lt;/code&gt;postorder&lt;code&gt;&lt;/code&gt;.  Basically, they are just variations in order.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;inorder&lt;/strong&gt;:  traverse left subtree, visit current node, traverse right subtree. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
(de inorder (Tree)&lt;br&gt;
   (when Tree&lt;br&gt;
      (inorder (cadr Tree))&lt;br&gt;
      (printsp (car Tree))&lt;br&gt;
      (inorder (caddr Tree)) ) )&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;postorder&lt;/strong&gt;: traverse left subtree, traverse right subtree, visit  current node. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
(de postorder (Tree)&lt;br&gt;
   (when Tree&lt;br&gt;
      (postorder (cadr Tree))&lt;br&gt;
      (postorder (caddr Tree))&lt;br&gt;
      (printsp (car Tree)) ) )&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#step-3-calling-the-functions"&gt;
  &lt;/a&gt;
  Step 3. Calling the functions
&lt;/h2&gt;

&lt;p&gt;Last step is to call the functions and get the output.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
(printsp 'preorder:) &lt;br&gt;
(preorder *Tree)&lt;br&gt;
(prinl)&lt;/p&gt;

&lt;p&gt;(printsp 'inorder:) &lt;br&gt;
(inorder *Tree)&lt;br&gt;
(prinl)&lt;/p&gt;

&lt;p&gt;(printsp 'postorder:) &lt;br&gt;
(postorder *Tree)&lt;br&gt;
(prinl)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-endraw-raw-"&gt;
  &lt;/a&gt;
  `&lt;code&gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The code above is working, but very redundant with all its &lt;code&gt;&lt;/code&gt;printsp&lt;code&gt;&lt;/code&gt; and &lt;code&gt;&lt;/code&gt;prinl&lt;code&gt;&lt;/code&gt;. Let's try to improve it. We can simply pack all three functions in a list and loop through it:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
(for Order '(preorder inorder postorder)&lt;br&gt;
   (prin Order ": ")&lt;br&gt;
   (Order *Tree)&lt;br&gt;
   (prinl) )&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
&lt;em&gt;As you can see, &lt;code&gt;&lt;/code&gt;Order&lt;code&gt;&lt;/code&gt; can both work as **string&lt;/em&gt;* to be printed, or as &lt;strong&gt;function name&lt;/strong&gt;. This is one of the nice things you can do in functional languages!*&lt;/p&gt;

&lt;p&gt;Output:&lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
preorder: 1 2 4 7 5 3 6 8 9 &lt;br&gt;
inorder: 7 4 2 5 1 8 6 9 3 &lt;br&gt;
postorder: 7 4 5 2 8 9 6 3 1 &lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#wrapup"&gt;
  &lt;/a&gt;
  Wrap-Up
&lt;/h3&gt;

&lt;p&gt;So far, so good. However, we are not done yet: The &lt;code&gt;&lt;/code&gt;level-order&lt;code&gt;&lt;/code&gt; traversal route is missing. But before we do that, we will first study another interesting function that might help us wth that: the &lt;code&gt;&lt;/code&gt;fifo&lt;code&gt;&lt;/code&gt; function.&lt;/p&gt;




&lt;p&gt;You can download the finished code up to this point &lt;a href="https://gitlab.com/picolisp-blog/single-plage-scripts/-/blob/main/rosetta/tree-traversal-part1.l"&gt;here&lt;/a&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#sources"&gt;
  &lt;/a&gt;
  Sources
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://rosettacode.org/wiki/Tree_traversal"&gt;http://rosettacode.org/wiki/Tree_traversal&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>picolisp</category>
      <category>lisp</category>
      <category>functional</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Practice Asynchronous JavaScript with Quiz</title>
      <author>Sraboni Islam</author>
      <pubDate>Thu, 09 Dec 2021 09:35:44 +0000</pubDate>
      <link>https://dev.to/sraboni/practice-asynchronous-javascript-with-quiz-22a7</link>
      <guid>https://dev.to/sraboni/practice-asynchronous-javascript-with-quiz-22a7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#01-asynchronous-javascript-quiz"&gt;
  &lt;/a&gt;
  01. &lt;a href="https://www.codingame.com/playgrounds/347/javascript-promises-mastering-the-asynchronous/what-is-asynchronous-in-javascript"&gt;Asynchronous JavaScript quiz&lt;/a&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#02-asynchronous-javascript-quiz"&gt;
  &lt;/a&gt;
  02. &lt;a href="https://dev.to/ditdot/quiz-how-well-do-you-understand-asynchronous-javascript-5e4j"&gt;Asynchronous JavaScript quiz&lt;/a&gt;
&lt;/h2&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to Build a Successful DevOps Testing Strategy for Agile Teams</title>
      <author>Cody Simons</author>
      <pubDate>Thu, 09 Dec 2021 09:17:28 +0000</pubDate>
      <link>https://dev.to/codysimons20/how-to-build-a-successful-devops-testing-strategy-for-agile-teams-4le</link>
      <guid>https://dev.to/codysimons20/how-to-build-a-successful-devops-testing-strategy-for-agile-teams-4le</guid>
      <description>&lt;p&gt;As the definition suggests, speed and reliability are the two main objectives in a DevOps testing strategy.&lt;/p&gt;

&lt;p&gt;The traditional independent-working mindset would be removed by tightening the Dev (development) and Ops (operations) functions together. The process, in turn, makes tight delivery schedules for processes at scale less of a nightmare.&lt;br&gt;
&lt;a href="https://www.katalon.com/resources-center/blog/devops-testing-strategy/"&gt;How to Build a Successful DevOps Testing Strategy for Agile Teams&lt;/a&gt;&lt;/p&gt;

</description>
      <category>agile</category>
      <category>devops</category>
      <category>testing</category>
      <category>strategy</category>
    </item>
    <item>
      <title>Using Flex like a Pro</title>
      <author>Sumrit Grover</author>
      <pubDate>Thu, 09 Dec 2021 09:01:16 +0000</pubDate>
      <link>https://dev.to/grover_sumrit/using-flex-like-a-pro-5cm3</link>
      <guid>https://dev.to/grover_sumrit/using-flex-like-a-pro-5cm3</guid>
      <description>&lt;h3&gt;
  &lt;a href="#flex-defines-how-much-that-view-would-fill-the-screen"&gt;
  &lt;/a&gt;
  Flex defines how much that view would fill the screen.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#space-would-be-divided-according-to-the-flex-property-of-each-element"&gt;
  &lt;/a&gt;
  Space would be divided according to the flex property of each element.
&lt;/h3&gt;

&lt;p&gt;In the following example, the container view has flex: 1. &lt;/p&gt;

&lt;p&gt;The red view has flex: 1, the yellow view has flex: 2, and the green view has flex: 3. &lt;/p&gt;

&lt;p&gt;1+2+3 = 6, which means that the red view will get 1/6 of the space, the yellow 2/6 of the space, and the green 3/6 of the space.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zHS3xPn2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l50svdkr2xcdhtywamkv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zHS3xPn2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l50svdkr2xcdhtywamkv.png" alt="Image description" width="880" height="342"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5eYrKk2j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zljxfy2i3f2483rii7jo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5eYrKk2j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zljxfy2i3f2483rii7jo.png" alt="Image description" width="150" height="261"&gt;&lt;/a&gt;&lt;/p&gt;







&lt;h3&gt;
  &lt;a href="#flexdirection"&gt;
  &lt;/a&gt;
  FlexDirection
&lt;/h3&gt;

&lt;p&gt;It is the property which defines the direction in which the child components are laid out. &lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#flexdirection-row"&gt;
  &lt;/a&gt;
  FlexDirection -"Row"
&lt;/h4&gt;

&lt;p&gt;Align children from left to right.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V5mLrjdD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rslipmcpbcpsrcq61ue.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V5mLrjdD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rslipmcpbcpsrcq61ue.png" alt="Image description" width="880" height="378"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2QzkvYMb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jffvkj8zua1wqrhq0235.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2QzkvYMb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jffvkj8zua1wqrhq0235.png" alt="Image description" width="198" height="37"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#flexdirection-columndefault"&gt;
  &lt;/a&gt;
  FlexDirection - Column(default)
&lt;/h4&gt;

&lt;p&gt;Align children from top to bottom.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x-VvUtzn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmezglyz9i0ns4yw2rj1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x-VvUtzn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmezglyz9i0ns4yw2rj1.png" alt="Image description" width="880" height="393"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JKsjz_vR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jqk6wtvkeq2prfhv9asr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JKsjz_vR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jqk6wtvkeq2prfhv9asr.png" alt="Image description" width="232" height="114"&gt;&lt;/a&gt;&lt;/p&gt;







&lt;blockquote&gt;
&lt;p&gt;Web development has tons of different layout techniques and &amp;gt;tricks available. While in React Native your best tool for &amp;gt;building layouts be will be Flexbox.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;DISCLAIMER&lt;/strong&gt;&lt;br&gt;
Flexbox in React Native is a bit different from &lt;em&gt;CSS Flexbox&lt;/em&gt;. Differences are subtle but they are still there.&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Easy File Uploads in Go Fiber with Minio</title>
      <author>MinhBLues</author>
      <pubDate>Thu, 09 Dec 2021 08:54:59 +0000</pubDate>
      <link>https://dev.to/minhblues/easy-file-uploads-in-go-fiber-with-minio-393c</link>
      <guid>https://dev.to/minhblues/easy-file-uploads-in-go-fiber-with-minio-393c</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Introduction&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Hello, friends! 😉 Welcome to a really great tutorial. I've tried to make for you as simple step-by-step instructions as possible, based on a real-life application, so that you can apply this knowledge here and now.&lt;br&gt;
I'm writing this tutorial only to share my experience and to show that backend development in Golang using the Fiber framework is easy!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-do-we-want-to-build"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What do we want to build?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Let's create a REST API  with fiber which we upload file into &lt;a href="https://min.io/"&gt;Minio&lt;/a&gt;. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#setting-minio-with-docker"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Setting Minio with Docker&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Install and run Docker service for your OS. By the way, in this tutorial I'm using the latest version (at this moment) v20.10.10&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;docker run \
  -p 9000:9000 \
  -p 9001:9001 \
  --name minio1 \
  -v D:\data:/data \
  -e "MINIO_ROOT_USER=AKIAIOSFODNN7EXAMPLE" \
  -e "MINIO_ROOT_PASSWORD=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY" \
  quay.io/minio/minio server /data --console-address ":9001"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;☝️ For more information, please visit: &lt;a href="https://docs.min.io/docs/minio-docker-quickstart-guide.html"&gt;https://docs.min.io/docs/minio-docker-quickstart-guide.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#fiber-config-in-env-file"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Fiber config in ENV file&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Minio&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;MINIO_ENDPOINT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"localhost:9000"&lt;/span&gt;
&lt;span class="n"&gt;MINIO_PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;9000&lt;/span&gt;
&lt;span class="n"&gt;MINIO_ACCESSKEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"AKIAIOSFODNN7EXAMPLE"&lt;/span&gt;
&lt;span class="n"&gt;MINIO_SECRETKEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"&lt;/span&gt;
&lt;span class="n"&gt;MINIO_BUCKET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"dev-minio"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#minio-connection"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Minio connection&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The minio connection is the most important part of this application. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The method for the connection:&lt;/li&gt;
&lt;/ul&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./platform/minio/minio.go&lt;/span&gt;

&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;minioUpload&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"context"&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"os"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/minio/minio-go/v7"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/minio/minio-go/v7/pkg/credentials"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;// MinioConnection func for opening minio connection.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;MinioConnection&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;minio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;endpoint&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MINIO_ENDPOINT"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;accessKeyID&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MINIO_ACCESSKEY"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;secretAccessKey&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MINIO_SECRETKEY"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;useSSL&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
    &lt;span class="c"&gt;// Initialize minio client object.&lt;/span&gt;
    &lt;span class="n"&gt;minioClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errInit&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;minio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;minio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Options&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Creds&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;credentials&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewStaticV4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accessKeyID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secretAccessKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;Secure&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;useSSL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;errInit&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatalln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errInit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Make a new bucket called dev-minio.&lt;/span&gt;
    &lt;span class="n"&gt;bucketName&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MINIO_BUCKET"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"us-east-1"&lt;/span&gt;

    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;minioClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MakeBucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bucketName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MakeBucketOptions&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Region&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// Check to see if we already own this bucket (which happens if you run this twice)&lt;/span&gt;
        &lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errBucketExists&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;minioClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BucketExists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bucketName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;errBucketExists&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;exists&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"We already own %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bucketName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatalln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Successfully created %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bucketName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;minioClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errInit&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-controllers"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Create controllers&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The principle of the POST methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make a request to the API endpoint;&lt;/li&gt;
&lt;li&gt;Parse Form File of request (or an error);&lt;/li&gt;
&lt;li&gt;Make a connection to the minio (or an error);&lt;/li&gt;
&lt;li&gt;Validate file with a new file from Form-data (or an error);&lt;/li&gt;
&lt;li&gt;Upload a new record in the table books (or an error);&lt;/li&gt;
&lt;li&gt;Return the status 200 and JSON with a new info file;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./app/controllers.upload_controller.go&lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;controllers&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"context"&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"os"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/gofiber/fiber/v2"&lt;/span&gt;
    &lt;span class="n"&gt;minioUpload&lt;/span&gt; &lt;span class="s"&gt;"github.com/minhblues/api/platform/minio"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/minio/minio-go/v7"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;UploadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;bucketName&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MINIO_BUCKET"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FormFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"fileUpload"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusBadRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"error"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"msg"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Get Buffer from file&lt;/span&gt;
    &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Open&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusBadRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"error"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"msg"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

     &lt;span class="c"&gt;// Create minio connection.&lt;/span&gt;
    &lt;span class="n"&gt;minioClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;minioUpload&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MinioConnection&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c"&gt;// Return status 500 and minio connection error.&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"error"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"msg"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;objectName&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Filename&lt;/span&gt;
    &lt;span class="n"&gt;fileBuffer&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;
    &lt;span class="n"&gt;contentType&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;fileSize&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Size&lt;/span&gt;

    &lt;span class="c"&gt;// Upload the zip file with PutObject&lt;/span&gt;
    &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;minioClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PutObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bucketName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;objectName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fileBuffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fileSize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PutObjectOptions&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;contentType&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"error"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"msg"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Successfully uploaded %s of size %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;objectName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"error"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"msg"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"info"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#routes-for-the-api-endpoints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Routes for the API endpoints&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// ./pkg/routes/not_found_route.go&lt;/span&gt;

&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;routes&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/gofiber/fiber/v2"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/minhblues/api/app/controllers"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;// PublicRoutes func for describe group of public routes.&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;PublicRoutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Create routes group.&lt;/span&gt;
    &lt;span class="n"&gt;route&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/api/v1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// upload files&lt;/span&gt;
    &lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/upload"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controllers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UploadFile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-main-function"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The main function&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/gofiber/fiber/v2"&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="s"&gt;"github.com/joho/godotenv/autoload"&lt;/span&gt; &lt;span class="c"&gt;// load .env file automatically&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/minhblues/api/pkg/configs"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/minhblues/api/pkg/routes"&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/minhblues/api/pkg/utils"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Define Fiber config.&lt;/span&gt;

    &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;configs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FiberConfig&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Define a new Fiber app with config.&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fiber&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PublicRoutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;// Register a public routes for app.&lt;/span&gt;


    &lt;span class="c"&gt;// Start server (with graceful shutdown).&lt;/span&gt;
    &lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StartServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#run-project"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Run project&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Some people (including me) crave live reloading in Go, especially the ones who are used to working with interpreted languages like JavaScript, Python, and Ruby. This project I will use nodemon.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;☝️ For more ways, please visit: &lt;a href="https://techinscribed.com/5-ways-to-live-reloading-go-applications/"&gt;https://techinscribed.com/5-ways-to-live-reloading-go-applications/&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;nodemon&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;exec&lt;/span&gt; &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt; &lt;span class="n"&gt;SIGNTERM&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#test-upload-file"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Test upload file&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;http://localhost:9001/dashboard&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AKIAIOSFODNN7EXAMPLE&lt;/span&gt;
&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;wJalrXUtnFEMI&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;K7MDENG&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;bPxRfiCYEXAMPLEKEY&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JrCGDZkv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rt4jfpr66vdjge82n12h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JrCGDZkv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rt4jfpr66vdjge82n12h.png" alt="Image description" width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Postman&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;http://localhost:5000/api/v1/upload&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zeSCrry9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pw6lggdahuqvx175km9r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zeSCrry9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pw6lggdahuqvx175km9r.png" alt="Image description" width="880" height="504"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Result Minio&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;http://localhost:9001/buckets/dev-minio/browse&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pyk7raOt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7kl7yewhpfv8mlvqokiz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pyk7raOt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7kl7yewhpfv8mlvqokiz.png" alt="Image description" width="880" height="609"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It works. Woohoo! 🎉&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ps"&gt;
  &lt;/a&gt;
  &lt;strong&gt;P.S.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;If you want more articles like this on this blog, then post a comment below and subscribe to me. Thanks! 😘&lt;/p&gt;

</description>
      <category>go</category>
      <category>minio</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Docker Ubuntu LAMP Setup on Windows</title>
      <author>vkuberan@gmail.com</author>
      <pubDate>Thu, 09 Dec 2021 08:49:00 +0000</pubDate>
      <link>https://dev.to/vkuberan_88/docker-ubuntu-lamp-setup-on-windows-36l5</link>
      <guid>https://dev.to/vkuberan_88/docker-ubuntu-lamp-setup-on-windows-36l5</guid>
      <description>&lt;p&gt;&lt;strong&gt;MY LAMP SETUP&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pull Ubuntu&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;docker pull &lt;a href="https://hub.docker.com/_/ubuntu"&gt;ubuntu:latest&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pull Mariadb&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;docker pull &lt;a href="https://hub.docker.com/_/mariadb?tab=tags"&gt;mariadb:latest&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create the shared network&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;docker network create --driver=bridge lampstack&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create MariaDB Container&lt;/strong&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;docker run -itd -p 33063:3306 --name=lampmysql --network=lampstack --env MARIADB_USER=root --env MARIADB_PASSWORD=google --env MARIADB_ROOT_PASSWORD=google mariadb:latest&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create Ubuntu Container&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Replace &lt;strong&gt;"N:\dockercompose\lamp\src"&lt;/strong&gt; with your working directory path.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;docker run -itd -p 8080:80 --user root --name=lampstack --network=lampstack -v N:\dockercompose\lamp\src:/var/www/html/ ubuntu:22.04 /bin/bash&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Get in to the Ubuntu Container&lt;/strong&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;docker attach lampstack&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Install all necessary Apache/PHP packages&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Refer 1: &lt;a href="https://www.tecmint.com/install-wordpress-in-ubuntu-lamp-stack/"&gt;Ubuntu - Install LAMP Stack&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Execute the following commands one by one.&lt;/p&gt;

&lt;p&gt;apt-get update&lt;/p&gt;

&lt;p&gt;apt-get upgrade&lt;/p&gt;

&lt;p&gt;apt-get install iputils-ping&lt;/p&gt;

&lt;p&gt;apt-get install vim&lt;/p&gt;

&lt;p&gt;apt-get install systemctl&lt;/p&gt;

&lt;p&gt;apt-get install apache2 apache2-utils&lt;/p&gt;

&lt;p&gt;systemctl enable apache2&lt;/p&gt;

&lt;p&gt;systemctl start apache2 &lt;/p&gt;

&lt;p&gt;systemctl status apache2&lt;/p&gt;

&lt;p&gt;apt-get install mariadb-client&lt;/p&gt;

&lt;p&gt;apt-get install php libapache2-mod-php php-mysql php-curl php-gd php-mbstring php-xml php-soap php-intl php-zip&lt;/p&gt;

&lt;p&gt;systemctl restart apache2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Rewrite Mode&lt;/strong&gt;&lt;br&gt;
  If you want seo like links, You need to do some additional work&lt;/p&gt;

&lt;p&gt;Refer 1: &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-rewrite-urls-with-mod_rewrite-for-apache-on-ubuntu-20-04"&gt;Ubuntu - Enable Mod Rewrite&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Refer 2: &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-configure-the-apache-web-server-on-an-ubuntu-or-debian-vps"&gt;Ubuntu - Enable Mod Rewrite&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /etc/apache2/sites-available/
vi default.conf or vi 000-default.conf
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Add following section to the one of the above mentionted file.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Directory /var/www/html&amp;gt;
    Options Indexes FollowSymLinks
    AllowOverride all
    Require all granted
&amp;lt;/Directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Enable mod rewrite and restart apache&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;a2enmod rewrite 
systemctl apache2 restart
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Additional configuration&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Install phpMyAdmin&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;docker pull &lt;a href="https://hub.docker.com/r/phpmyadmin/phpmyadmin/"&gt;phpmyadmin/phpmyadmin&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Create container for phpMyAdmin&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;docker run -itd -p 2599:80 --name=lampphpmyadmin -e PMA_ARBITRARY=1 --network=lampstack phpmyadmin/phpmyadmin&lt;/em&gt;&lt;/p&gt;

</description>
      <category>docker</category>
      <category>ubuntu</category>
      <category>lamp</category>
    </item>
    <item>
      <title>Scraping a Web Page in Browser using XPath and Javascript</title>
      <author>Dendi Handian</author>
      <pubDate>Thu, 09 Dec 2021 07:53:52 +0000</pubDate>
      <link>https://dev.to/dendihandian/scrapping-a-web-page-in-browser-using-xpath-and-javascript-3m17</link>
      <guid>https://dev.to/dendihandian/scrapping-a-web-page-in-browser-using-xpath-and-javascript-3m17</guid>
      <description>&lt;p&gt;As a programmer we should think to automate anything related to our daily task every single time if possible. For instance when you gathering amount of data on a web page, rather than copying the text one-by-one you could do a simple web scraping.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-case"&gt;
  &lt;/a&gt;
  The Case
&lt;/h2&gt;

&lt;p&gt;I will demonstrate how to scrap the youtube playlist of PyCon ID 2020 Talks in this youtube page &lt;a href="https://www.youtube.com/playlist?list=PLIv0V1YCmEi3A6H6mdsoxh4RDpzvnJpMq"&gt;https://www.youtube.com/playlist?list=PLIv0V1YCmEi3A6H6mdsoxh4RDpzvnJpMq&lt;/a&gt;. As the result, I will have a list of the video titles.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zfmY8t5e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p7dz4ac060oborpzi0sj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zfmY8t5e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p7dz4ac060oborpzi0sj.png" alt="pycon id 2020 playlist" width="880" height="375"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-xpath"&gt;
  &lt;/a&gt;
  The XPath
&lt;/h2&gt;

&lt;p&gt;XPath is the query languange to get the nodes/element on the XML or HTML, you could learn it more on other resources like W3school &lt;a href="https://www.w3schools.com/xml/xpath_intro.asp"&gt;https://www.w3schools.com/xml/xpath_intro.asp&lt;/a&gt;. The simple query example for getting nodes containing the video titles is this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//a[@class="yt-simple-endpoint style-scope ytd-playlist-video-renderer"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The above xpath syntax may not work if the web page structure is changed in the future.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You could also try this yourself in the Chrome/Edge Browser developer tools, on the &lt;code&gt;Elements&lt;/code&gt; tab and &lt;code&gt;Ctrl + F&lt;/code&gt; to start using Xpath. The result indicates that it has 39 items and it seems to be right.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EPN9dLys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8309zb3zgjkhytqkdaqt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EPN9dLys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8309zb3zgjkhytqkdaqt.png" alt="xpath for the playlist" width="880" height="208"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-xpath-utility-function-in-javascript"&gt;
  &lt;/a&gt;
  The XPath Utility Function in Javascript
&lt;/h2&gt;

&lt;p&gt;After found the right xpath for the element, now open &lt;code&gt;Console&lt;/code&gt; tab in the browser developer tools to begin typing some javascript. Javascript has built-in XPath utility function that syntax like this &lt;code&gt;$x()&lt;/code&gt;. We could add the xpath string the function and check the length:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;//a[@class="yt-simple-endpoint style-scope ytd-playlist-video-renderer"]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h6OTVPnE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/udk9i7dilifod22n2ndk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h6OTVPnE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/udk9i7dilifod22n2ndk.png" alt="xpath result count" width="741" height="129"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the output length matches the numbers of items we want to scrap, then the function will works. Now we just get list of titles and return it to the console screen:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;//a[@class="yt-simple-endpoint style-scope ytd-playlist-video-renderer"]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()}).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XPz6p1jJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ypn04ix9r120uls718gx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XPz6p1jJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ypn04ix9r120uls718gx.png" alt="xpath result list" width="880" height="259"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The output in the console may be weird because of the &lt;code&gt;\n&lt;/code&gt; but if you copy the string contents and paste it on the editor like Visual Studio Code, you will get the clean result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CZYe_U4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6acjoc16kqgyhawkx8a9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CZYe_U4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6acjoc16kqgyhawkx8a9.png" alt="result strings" width="880" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope this will be useful for you.&lt;/p&gt;

</description>
      <category>xpath</category>
      <category>webscraping</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Why Confidence Is Important For Developers?</title>
      <author>Mr. Unity Buddy</author>
      <pubDate>Thu, 09 Dec 2021 07:47:02 +0000</pubDate>
      <link>https://dev.to/unitybuddy/why-confidence-is-important-for-developers-4o9g</link>
      <guid>https://dev.to/unitybuddy/why-confidence-is-important-for-developers-4o9g</guid>
      <description>&lt;p&gt;Hello, buddies! Self-Confidence. This word may very similar to you. But the problem is, most of us are not having it. The improvements of Self-confidence is mostly can be seen in Self-taught developers. And also, lack of self-confidence mostly can be seen in Self-taught developers. How? &lt;/p&gt;

&lt;p&gt;Well, self-taught developer must have enough strength to fight with Imposter's syndrome. To fight with Imposter's syndrome, they must have a self-confidence. That's the reason why they have a good self-confidence.&lt;/p&gt;

&lt;p&gt;On the other hand, we can(rarely) say Self-taught developers are lack of Self-confidence. Cause when they  code together with College-educated developers, they feel they are not good enough and they lose their self-confidence and become the victims of Imposter's syndrome. Anyway, I can say this article is for Self-taught developers to learn the importance of Self-Confidence.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selfconfidence-makes-you-attractive"&gt;
  &lt;/a&gt;
  Self-confidence makes you attractive
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oqPmX9dW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622558388105/anA89wBEi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oqPmX9dW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622558388105/anA89wBEi.png" alt="image.png" width="768" height="511"&gt;&lt;/a&gt;&lt;br&gt;
Do you want to live the life of your dreams?&lt;/p&gt;

&lt;p&gt;Do you want to become a person of affluence?&lt;/p&gt;

&lt;p&gt;You need to be able to attract the right kind of people into your life. You need to learn how to be attractive.&lt;br&gt;
People are attracted to self-confident people.&lt;/p&gt;

&lt;p&gt;If you walked into a room, which of these two people would you be attracted to? The buddy standing in a corner with a smile on his face or the another buddy whose head is bent, staring down at his phone. You would be attracted to the first buddy in a corner.&lt;/p&gt;

&lt;p&gt;When you are self-confident, you are more attractive.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selfconfidence-gets-you-hired-for-your-desired-jobs-and-clients"&gt;
  &lt;/a&gt;
  Self-confidence gets you hired for your desired jobs and clients
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eNRqV9s---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622558410864/FRKVLiRcf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eNRqV9s---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622558410864/FRKVLiRcf.png" alt="image.png" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
If you were the main attendee at a presentation, would you listen to the presenter if he wasn’t looking directly at you? You wouldn’t listen. You would switch off in your mind.&lt;/p&gt;

&lt;p&gt;But what if this man was engaging in his presentation? What if he was confident? He asked the right questions and said the things you wanted to hear. His persona was engaging. You would listen to him.&lt;/p&gt;

&lt;p&gt;If you want to seal a business deal, you need to express self-confidence to your prospective client. If you want to get hired for a job, you need to express self-confidence to the interviewers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selfconfidence-helps-you-aim-for-things-you-only-dream-about"&gt;
  &lt;/a&gt;
  Self-confidence helps you aim for things you only dream about
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---dsVCWcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622558523936/X0aEHpVOU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---dsVCWcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622558523936/X0aEHpVOU.png" alt="image.png" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Are you waiting for your big break? Does the life you want seem unreachable? Self-confidence gives you the guts to ask for what you want.&lt;/p&gt;

&lt;p&gt;If you want to live the life of your dreams, you need to be confident. If you are not, everyday miracles will pass you by. You won’t ask for what you really want. Don’t expect people to read your mind. &lt;strong&gt;Ask!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selfconfidence-helps-you-make-the-right-decisions"&gt;
  &lt;/a&gt;
  Self-confidence helps you make the right decisions
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RoV1YipT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622558313110/HIO-UpxTq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RoV1YipT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622558313110/HIO-UpxTq.png" alt="image.png" width="700" height="467"&gt;&lt;/a&gt;&lt;br&gt;
When you are self-confident, you choose yourself. Most people who lack self-confidence love to please people. They don’t choose themselves. Because they don’t, they make the wrong decisions.&lt;/p&gt;

&lt;p&gt;The more you make the right decisions aligned with your deepest desires and your core values, the faster you will achieve your goals.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selfconfidence-makes-you-productive"&gt;
  &lt;/a&gt;
  Self-confidence makes you productive
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RviIZV7_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622558333563/QiDVBwsbY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RviIZV7_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622558333563/QiDVBwsbY.png" alt="image.png" width="880" height="403"&gt;&lt;/a&gt;&lt;br&gt;
You need to be productive and manage your time wisely. Eliminate all the unnecessary activities. You can’t do this effectively without self-confidence.&lt;/p&gt;

&lt;p&gt;Without self-confidence, you will spend time on activities that don’t help you achieve your goals.&lt;br&gt;
The surprising thing is this action is done unconsciously. You don’t realize you’re doing it. I’ve realized when I don’t feel confident in my ability to achieve a goal, I waste time. I do mechanical tasks like checking my emails instead of focusing on the creative task I want to do.&lt;br&gt;
When you are self-confident — confident in your abilities, you are super productive.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-i-improve-my-confidence-then"&gt;
  &lt;/a&gt;
  How Can I Improve My Confidence, Then?
&lt;/h2&gt;

&lt;p&gt;I don't have to explain you. @&lt;a href="https://dev.to@victoria"&gt;Victoria Lo&lt;/a&gt; has already explained about &lt;a href="https://lo-victoria.com/365-days-of-hashnode-how-i-overcome-imposters-syndrome"&gt;How To Overcome Imposter's Syndrome&lt;/a&gt; Don't worry about &lt;em&gt;Imposter's Syndrome&lt;/em&gt; word cause all the Tips in that article can be used to Improve your self-confidence.&lt;/p&gt;

&lt;p&gt;So buddies, Self-Confidence is very, very important for Developers. So make yours strong as well. Happy Coding!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.devgenius.io/how-to-deal-with-self-doubt-in-programming-22af62dcb395"&gt;https://blog.devgenius.io/how-to-deal-with-self-doubt-in-programming-22af62dcb395&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.infoworld.com/article/2072517/confidence--an-important-software-developer-trait.html"&gt;https://www.infoworld.com/article/2072517/confidence--an-important-software-developer-trait.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>productivity</category>
      <category>career</category>
    </item>
  </channel>
</rss>
