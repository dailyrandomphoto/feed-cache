<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What is a REST API?</title>
      <author>Mira Marshall</author>
      <pubDate>Sat, 04 Dec 2021 02:22:49 +0000</pubDate>
      <link>https://dev.to/miramarshall/what-is-a-rest-api-m5k</link>
      <guid>https://dev.to/miramarshall/what-is-a-rest-api-m5k</guid>
      <description>&lt;h3&gt;
  &lt;a href="#an-introduction-to-restful-api-design"&gt;
  &lt;/a&gt;
  An introduction to RESTful API design.
&lt;/h3&gt;

&lt;p&gt;So what makes an API RESTful? I’m sure the term REST API or RESTful API has come across your screen countless times in your coding journey. This article gives an introduction to RESTful API design principles.&lt;/p&gt;

&lt;p&gt;Before diving into the six constraints, I’ll briefly describe what an API is and how REST APIs work. API stands for Application Programming Interface. REST stands for REpresentational State Transfer. It is an API architecture with design principles for client-server communication and features.&lt;/p&gt;

&lt;p&gt;RESTful APIs communicate through HTTP requests to perform CRUD (create, read, update, and delete) operations in a resource. These operations correspond with method requests (GET, POST, PUT, DELETE). A POST request adds information, a GET request retrieves information, a PUT request updates information, and a DELETE request deletes information. An API that follows the six constraints outlined below is considered RESTful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-clientserver-independence"&gt;
  &lt;/a&gt;
  1. Client-Server Independence
&lt;/h2&gt;

&lt;p&gt;In RESTful design, the client and server must be distinct from one another. The client requests information with a Uniform Resource Identifier (URI), and the server responds to the request through HTTP/HTTPS. Both the client and server should evolve independently. This independence allows for scalability on both sides.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-stateless"&gt;
  &lt;/a&gt;
  2. Stateless
&lt;/h2&gt;

&lt;p&gt;The Stateless constraint means that the client state is not stored between requests. The request from the client provides the server with enough information to understand the request without needing to remember any client state. Not storing data about the client request improves scalability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-uniform-interface"&gt;
  &lt;/a&gt;
  3. Uniform Interface
&lt;/h2&gt;

&lt;p&gt;A Uniform Interface ensures standard client-server communication across platforms. With REST API architecture, a request for the same resource should have the same data. As well as response status codes from the server such as 200 ok, 401 unauthorized, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-layered-system"&gt;
  &lt;/a&gt;
  4. Layered System
&lt;/h2&gt;

&lt;p&gt;The client does not always communicate directly with the server. There may be layers of communication. For architecture with several layers, each layer only knows about its immediate communication layer. The layered system allows for intricate tasks to be completed without needing to understand the complexity of what is being done to receive a response.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-cacheable"&gt;
  &lt;/a&gt;
  5. Cacheable
&lt;/h2&gt;

&lt;p&gt;Cacheable data is information in the response that can be stored and used later.&lt;/p&gt;

&lt;p&gt;Server responses should declare if the data is cacheable. For network efficiency, the data in a response from the server is either implicitly or explicitly labeled cacheable or non-cacheable. For cacheable data, the client can reuse the response for future requests.&lt;/p&gt;

&lt;p&gt;This constraint improves performance for clients while reducing the payload and improving scalability on the server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-code-on-demandoptional"&gt;
  &lt;/a&gt;
  6. Code on Demand(Optional)
&lt;/h2&gt;

&lt;p&gt;The final “constraint” is optional. Code on Demand allows for logic to be sent from the server to the client for execution. The server can send some executable code to the client. For example, if an API sends a &amp;lt; script &amp;gt; tag in its response, the client will execute the JavaScript.&lt;/p&gt;

&lt;p&gt;There you have it, the six REST API architecture constraints. Hopefully, this helped fill in some knowledge gaps or gave you a good refresher on RESTful APIs.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>apis</category>
    </item>
    <item>
      <title>What Data Structures and Algorithms to Practice if You Want to Get a Job at Top Tech Companies</title>
      <author>Shaheer</author>
      <pubDate>Sat, 04 Dec 2021 01:44:31 +0000</pubDate>
      <link>https://dev.to/shaheer912/what-data-structures-and-algorithms-to-practice-if-you-want-to-get-a-job-at-top-tech-companies-5ejf</link>
      <guid>https://dev.to/shaheer912/what-data-structures-and-algorithms-to-practice-if-you-want-to-get-a-job-at-top-tech-companies-5ejf</guid>
      <description>&lt;p&gt;Getting a job at a top tech company is no easy feat. It takes hard work and sometimes luck. One way to up your chances of being recruited by a top tech company is to be proficient in data structures and algorithms. Google, Apple, Microsoft, Amazon, Facebook, SpaceX, and more are on the hunt for talented engineers who can build products quickly and efficiently. &lt;/p&gt;

&lt;p&gt;Do you know what these terms mean? If not, don’t worry! This article will cover everything you need to start tackling this intimidating but important subject head-on. From understanding the basics to learning how to interview for a job in this field, read on to learn what it really takes to get hired by top tech companies.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#data-structures-and-algorithms"&gt;
  &lt;/a&gt;
  Data Structures and Algorithms
&lt;/h1&gt;

&lt;p&gt;Data structures and algorithms are the backbone of computer programming. They're what allow engineers to design programs that solve problems in quick and efficient ways.&lt;/p&gt;

&lt;p&gt;In order to work at a top tech company, you'll need to be proficient with data structures and algorithms. It's an integral component in any interview and is required for most jobs. &lt;/p&gt;

&lt;p&gt;Some of you might already be familiar with these terms, but if not, don't worry! We'll cover the basics so it's easy to understand.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-are-data-structures-and-algorithms"&gt;
  &lt;/a&gt;
  What Are Data Structures and Algorithms?
&lt;/h1&gt;

&lt;p&gt;Data structures and algorithms are the language of computer science. They’re what allow programmers to make code more efficient, scalable, and secure.&lt;/p&gt;

&lt;p&gt;Data structures are sets of data that are organized in a specific way. Algorithms are series of steps a computer takes to solve a problem or accomplish a goal.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-you-should-know-data-structures-and-algorithms"&gt;
  &lt;/a&gt;
  Why You Should Know Data Structures and Algorithms
&lt;/h1&gt;

&lt;p&gt;There is a lot of competition when it comes to landing a job in the tech industry. The good news? Being proficient in data structures and algorithms will make you stand out.&lt;/p&gt;

&lt;p&gt;Why do these skills give you an edge over other applicants? It's all about how quickly you can build products. &lt;/p&gt;

&lt;p&gt;Top companies like Google, Apple, Facebook, Amazon, and more are looking for engineers that can work quickly to create innovative features that will help grow their company. Knowing how to identify the best solution for a problem using data structures and algorithms will be an asset to any company that employs you.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-the-difference-between-data-structures-and-algorithms"&gt;
  &lt;/a&gt;
  What is the difference between data structures and algorithms?
&lt;/h1&gt;

&lt;p&gt;Data structure is "the way data is organized." Algorithms are basically steps or instructions so that your computer knows what to do with the information stored in the data structure.&lt;/p&gt;

&lt;p&gt;One example of this would be an algorithm for searching through an unsorted list so you know where each item is located on the list. &lt;/p&gt;

&lt;p&gt;When applied to sorting data into lists, algorithms allow us to present information in a way that people can easily understand or use it for research purposes (.e., what items are popular).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#basic-types-of-data-structures"&gt;
  &lt;/a&gt;
  Basic Types of Data Structures
&lt;/h1&gt;

&lt;p&gt;Let's start with the basics. Data structures are ways for computer scientists to organize large amounts of data in a structured manner.&lt;/p&gt;

&lt;p&gt;There are many different types of data structures, most of which are classified by complexity. A simple type is an array, which is made up of two parts: elements and indices. Elements are the things that we want to store; indices are how we reference those elements.&lt;/p&gt;

&lt;p&gt;Other more complex data structures include tree and graph structures like binary search trees and directed acyclic graphs (DAGs). For example, a binary search tree is a tree-based structure that has both nodes and leaves, where each node holds information about its children. A DAG is simply an ordered list of nodes or vertices where there's no loops or cycles.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-interview-with-top-tech-companies"&gt;
  &lt;/a&gt;
  How to Interview with Top Tech Companies
&lt;/h1&gt;

&lt;p&gt;Interviewing for a job at a top tech company can be intimidating. You may not know what you’re talking about and be interviewing alongside PhDs and engineers. It may also feel like you don’t have the necessary background to get hired, but this is where data structures and algorithms come in handy!&lt;/p&gt;

&lt;p&gt;It may seem like talk of stacks, queues, and sorting is unrelated to your daily responsibilities. But knowing these concepts will help you land an interview with top tech companies.&lt;/p&gt;

&lt;p&gt;So what are these things? Data structures are simply different ways to store information. Algorithms are sets of instructions that tell computers how to solve problems. Both data structures and algorithms are built on mathematical models that describe how data should be organized and/or processed in order to work efficiently and quickly.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prepare-for-the-interview"&gt;
  &lt;/a&gt;
  Prepare for the interview
&lt;/h1&gt;

&lt;p&gt;Interviewing for a job at a top tech company can be intimidating. &lt;/p&gt;

&lt;p&gt;You need to know everything about data structures and algorithms, and you have to nail the interview. Luckily, there are resources available that can help you prepare for your interview.&lt;/p&gt;

&lt;p&gt;One of the best resources is [JudoCoder.com](&lt;a href="https://judocoder.com"&gt;https://judocoder.com&lt;/a&gt;] &lt;br&gt;
You'll work with different forms of technical interview questions, asked by top tech companies and improve your programming skills, the questions on Judocoder.com are sorted by varying level of difficulty (easy, medium, hard and expert) so you can pick and choose based on where you are in your journey.&lt;/p&gt;

&lt;p&gt;If you're interested in practicing data structure and algorithms, &lt;a href="https://judocoder.com"&gt;click here!&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#practice-with-these-data-structures-and-algorithms"&gt;
  &lt;/a&gt;
  Practice with these data structures and algorithms
&lt;/h1&gt;

&lt;p&gt;Data structures and algorithms are the building blocks of computer science. You can't become a talented engineer without mastering these concepts.&lt;/p&gt;

&lt;p&gt;But what are they? Data structures is the way data is stored in a computer system, and an algorithm is a set of instructions for solving a problem. They're essential to understanding how computers work and they form the basis of programming languages.&lt;/p&gt;

&lt;p&gt;As you may have guessed, you can't just read about data structures and algorithms, so we've compiled some coding challenges to help you learn more about them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;There is a mapping a = 1, b = 2, ... z = 26 given and an encoded message. You have to count the number of ways it can be decoded. - asked by Facebook &lt;a href="https://judocoder.com/try/challenge/Ways-message-can-be-decoded"&gt;practice here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Two arrays and an element x is given. Find the element that would be at the xth position of the final sorted array. - Asked by Google &lt;a href="https://judocoder.com/try/challenge/X-th-Element"&gt;practice here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Given a list of integers, return the largest product that can be made by multiplying any three integers - Asked by Facebook &lt;a href="https://judocoder.com/try/challenge/largest-product"&gt;practice here&lt;/a&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;The world of data structures and algorithms can be scary. But, with the right approach, it doesn't have to be!&lt;/p&gt;

&lt;p&gt;This article covers the basics for understanding what this field is all about. It also provides information on how to interview for a job in this field. From data structures to algorithm development, read on to learn more about this important industry that you may not have known too much about before.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>career</category>
      <category>programming</category>
    </item>
    <item>
      <title>Modeling algorithms with types</title>
      <author>Bruno Dias</author>
      <pubDate>Sat, 04 Dec 2021 00:54:20 +0000</pubDate>
      <link>https://dev.to/diasbruno/modeling-with-types-52jc</link>
      <guid>https://dev.to/diasbruno/modeling-with-types-52jc</guid>
      <description>&lt;p&gt;[First draft]&lt;/p&gt;

&lt;p&gt;Things get so much easier when you try&lt;br&gt;
to understand how the types work together&lt;br&gt;
to accomplish some work.&lt;/p&gt;

&lt;p&gt;In this article, we are going to model&lt;br&gt;
a system that apply discounts using many&lt;br&gt;
strategies.&lt;/p&gt;

&lt;p&gt;I'm going to use Haskell and javascript.&lt;br&gt;
haskell (or ocaml if you like) is great to visualize&lt;br&gt;
what's going on the type level...&lt;/p&gt;

&lt;p&gt;We can starting by trying to think&lt;br&gt;
on the simplest way to accomplish the job.&lt;/p&gt;

&lt;p&gt;We can start by using a simple subtraction &lt;code&gt;(-)&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;applyDiscount&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt;
&lt;span class="n"&gt;applyDiscount&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="n"&gt;discount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;discount&lt;/span&gt;

&lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;10.0&lt;/span&gt;
    &lt;span class="n"&gt;discounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;finalPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;
&lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="n"&gt;foldl&lt;/span&gt; &lt;span class="n"&gt;applyDiscount&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="n"&gt;discounts&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;finalPrice&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;applyDiscount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;discount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;discount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;discounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;finalPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;discounts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;applyDiscount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;finalPrice&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can clarify what which &lt;code&gt;Float&lt;/code&gt; means&lt;br&gt;
on the type specifiction...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt;
&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Discount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt;

&lt;span class="n"&gt;applyDiscount&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Price&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Discount&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Price&lt;/span&gt;
&lt;span class="n"&gt;applyDiscount&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="n"&gt;discount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;discount&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have &lt;code&gt;Price -&amp;gt; Discount -&amp;gt; Price&lt;/code&gt; which means&lt;br&gt;
"given a Price and a Discount, it returns back the price&lt;br&gt;
after the discount"...and that means, in this case,&lt;br&gt;
that the Price acts like an accumulator!&lt;/p&gt;

&lt;p&gt;With this information, we can now improve &lt;code&gt;applyDiscount&lt;/code&gt;&lt;br&gt;
to be more generic.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;ApplyDiscount&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;
  &lt;span class="n"&gt;applyDiscount&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Discount&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;

&lt;span class="n"&gt;applyDiscounts&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;ApplyDiscount&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Discount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;applyDiscounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;foldl&lt;/span&gt; &lt;span class="n"&gt;applyDiscount&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, in typescript, it should be the same as...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ApplyDiscount&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;applyDiscount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;discount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Discount&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;ApplyDiscount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we just need to create instances for each &lt;code&gt;a&lt;/code&gt;!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;newtype&lt;/span&gt; &lt;span class="kt"&gt;ApplyAll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;ApplyAll&lt;/span&gt; &lt;span class="kt"&gt;Price&lt;/span&gt;
  &lt;span class="kr"&gt;deriving&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;instance&lt;/span&gt; &lt;span class="kt"&gt;ApplyDiscount&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;
  &lt;span class="n"&gt;applyDiscount&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;ApplyAll&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;ApplyAll&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;discounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;ApplyAll&lt;/span&gt; &lt;span class="mf"&gt;10.0&lt;/span&gt;
    &lt;span class="n"&gt;finalPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;ApplyAll&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;
&lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="n"&gt;foldl&lt;/span&gt; &lt;span class="n"&gt;applyDiscount&lt;/span&gt; &lt;span class="n"&gt;strategy&lt;/span&gt; &lt;span class="n"&gt;discounts&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;finalPrice&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ApplyAll&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;applyDiscount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ApplyAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;discounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ApplyAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;finalPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;applyDiscount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;discount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applyDiscount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;discount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;discounts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;applyDiscount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;finalPrice&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have our first strategy! &lt;code&gt;ApplyAll&lt;/code&gt;&lt;br&gt;
just apply all discounts available,&lt;br&gt;
and this is a great first strategy.&lt;/p&gt;

&lt;p&gt;A new requirement has arived!&lt;/p&gt;

&lt;p&gt;Now, we have too apply all discounts,&lt;br&gt;
but we are not going to let the final price&lt;br&gt;
goes negative.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;newtype&lt;/span&gt; &lt;span class="kt"&gt;ApplyAllNoNegative&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;ApplyAllNoNegative&lt;/span&gt; &lt;span class="kt"&gt;Price&lt;/span&gt;
  &lt;span class="kr"&gt;deriving&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;instance&lt;/span&gt; &lt;span class="kt"&gt;ApplyDiscount&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;
  &lt;span class="n"&gt;applyDiscount&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;ApplyAllNoNegative&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="kt"&gt;ApplyAllNoNegative&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;discounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;ApplyAllNoNegative&lt;/span&gt; &lt;span class="mf"&gt;8.0&lt;/span&gt;
    &lt;span class="n"&gt;finalPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;ApplyAllNoNegative&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="n"&gt;foldl&lt;/span&gt; &lt;span class="n"&gt;applyDiscount&lt;/span&gt; &lt;span class="n"&gt;strategy&lt;/span&gt; &lt;span class="n"&gt;discounts&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;finalPrice&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ApplyAllNoNegative&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;applyDiscount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ApplyAllNoNegative&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;discounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ApplyAllNoNegative&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;finalPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;discounts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;applyDiscount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;finalPrice&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Too easy!&lt;/p&gt;

&lt;p&gt;Our next task is to:&lt;/p&gt;

&lt;p&gt;"If it goes negative, just collect&lt;br&gt;
all discounts that we couldn't apply,&lt;br&gt;
otherwise return the final price."&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;newtype&lt;/span&gt; &lt;span class="kt"&gt;CollectDiscountWhenGoesNegative&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="kt"&gt;Applying&lt;/span&gt; &lt;span class="kt"&gt;Price&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="kt"&gt;NotApplied&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Discount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="kr"&gt;deriving&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;instance&lt;/span&gt; &lt;span class="kt"&gt;ApplyDiscount&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;
  &lt;span class="n"&gt;applyDiscount&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Applying&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
    &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
         &lt;span class="kt"&gt;Applying&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
       &lt;span class="kr"&gt;else&lt;/span&gt;
         &lt;span class="kt"&gt;NotApplied&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;applyDiscount&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;NotApplied&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="kt"&gt;NotApplied&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;discounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Applying&lt;/span&gt; &lt;span class="mf"&gt;10.0&lt;/span&gt;
    &lt;span class="n"&gt;finalPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Applying&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
&lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="n"&gt;foldl&lt;/span&gt; &lt;span class="n"&gt;applyDiscount&lt;/span&gt; &lt;span class="n"&gt;strategy&lt;/span&gt; &lt;span class="n"&gt;discounts&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;finalPrice&lt;/span&gt;

&lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;discounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;8.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Applying&lt;/span&gt; &lt;span class="mf"&gt;10.0&lt;/span&gt;
    &lt;span class="n"&gt;finalPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;NotApplied&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;8.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="n"&gt;foldl&lt;/span&gt; &lt;span class="n"&gt;applyDiscount&lt;/span&gt; &lt;span class="n"&gt;strategy&lt;/span&gt; &lt;span class="n"&gt;discounts&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;finalPrice&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Don't do this! It's just to help visualize what's going on.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CollectDiscountWhenGoesNegative&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;NotApplied&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;CollectDiscountWhenGoesNegative&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;applyDiscount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;retun&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Applying&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;CollectDiscountWhenGoesNegative&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;applyDiscount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Applying&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NotApplied&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;discounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Applying&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;finalPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;discounts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;applyDiscount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;finalPrice&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;discounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Applying&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;discounts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;applyDiscount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's really easy to work with this. If&lt;br&gt;
the discount goes negative, we know exactly&lt;br&gt;
which discounts were not applied to mark on&lt;br&gt;
the frontend as feedback.&lt;/p&gt;

&lt;p&gt;Our final task is:&lt;/p&gt;

&lt;p&gt;"It must not apply duplicate discounts,&lt;br&gt;
 and it must keep the duplicated to send as feedback&lt;br&gt;
 to the user. Also, it must use the previous strategies&lt;br&gt;
 so we can allow it goes negative or not."&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;DontApplyDuplicate&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="kt"&gt;DontApplyDuplicate&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Set&lt;/span&gt; &lt;span class="kt"&gt;Discount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Discount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
  &lt;span class="kr"&gt;deriving&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Eq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;dadup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;DontApplyDuplicate&lt;/span&gt;

&lt;span class="kr"&gt;instance&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;ApplyDiscount&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;ApplyDiscount&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;DontApplyDuplicate&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;
  &lt;span class="n"&gt;applyDiscount&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;DontApplyDuplicate&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="kt"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
      &lt;span class="n"&gt;dadup&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
    &lt;span class="kr"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;dadup&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;applyDiscount&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;

&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dadup&lt;/span&gt; &lt;span class="kt"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;

&lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;discounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Applying&lt;/span&gt; &lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;finalPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dadup&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromList&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Applying&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="n"&gt;foldl&lt;/span&gt; &lt;span class="n"&gt;applyDiscount&lt;/span&gt; &lt;span class="n"&gt;strategy&lt;/span&gt; &lt;span class="n"&gt;discounts&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;finalPrice&lt;/span&gt;

&lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;discounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;8.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Applying&lt;/span&gt; &lt;span class="mf"&gt;10.0&lt;/span&gt;
    &lt;span class="n"&gt;finalPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;NotApplied&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;8.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="n"&gt;foldl&lt;/span&gt; &lt;span class="n"&gt;applyDiscount&lt;/span&gt; &lt;span class="n"&gt;strategy&lt;/span&gt; &lt;span class="n"&gt;discounts&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;finalPrice&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;DontApplyDuplicate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;usedDiscounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;duplicated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;applyDiscount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;usedDiscount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;duplicated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;usedDiscount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applyDiscount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;discounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;DontApplyDuplicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Applying&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;finalPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;discounts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;applyDiscount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;strategy&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;finalPrice&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;discounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;6.0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;DontApplyDuplicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Applying&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;usedDiscounts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;duplicated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;discounts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;applyDiscount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;usedDiscount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;duplicated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;6.0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>haskell</category>
      <category>designpatterns</category>
    </item>
    <item>
      <title>Developing A Game Engine with Perl: Part 7 - Fork</title>
      <author>Shawn Holland</author>
      <pubDate>Fri, 03 Dec 2021 23:34:45 +0000</pubDate>
      <link>https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-7-fork-3acm</link>
      <guid>https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-7-fork-3acm</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-2-mouse-input-43nj"&gt;Pssssst...&lt;/a&gt; &lt;strong&gt;I DO NOT KNOW WHAT I AM DOING.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to start reading from the beginning. Check out the &lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-3b8"&gt;first article in this series&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Continuing from our last post, I talked about how &lt;a href="https://www.instagram.com/ANSIGameEngine/"&gt;ANSI Game Engine&lt;/a&gt; is a &lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-6-a-colourful-telnet-server-4i7g"&gt;colourful telnet server&lt;/a&gt;. We left off with needing to fork the engines telnet server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#player-2-has-joined-the-game"&gt;
  &lt;/a&gt;
  Player 2 has joined the game!
&lt;/h2&gt;

&lt;p&gt;Time to level up our telnet server and make it multi-player with some knify forky.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mh4vwXMU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyx9lszlna5k69crhw62.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mh4vwXMU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyx9lszlna5k69crhw62.png" alt="Image description" width="487" height="365"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've added in the &lt;a href="https://man7.org/linux/man-pages/man3/strftime.3.html"&gt;&lt;code&gt;strftime&lt;/code&gt;&lt;/a&gt; identifier from &lt;a href="https://perldoc.perl.org/POSIX"&gt;Perl's POSIX module&lt;/a&gt; to help with time stamping the output. The &lt;a href="https://man7.org/linux/man-pages/man2/setsid.2.html"&gt;&lt;code&gt;setsid&lt;/code&gt;&lt;/a&gt; identifier is for starting a new session and group ID for each forked process. A.K.A, the child process. &lt;a href="https://perldoc.perl.org/functions/waitpid"&gt;&lt;code&gt;:sys_wait_h&lt;/code&gt;&lt;/a&gt; is for returning without wait after the child process has exited, using the WNOHANG flag when calling &lt;a href="https://man7.org/linux/man-pages/man2/wait.2.html"&gt;waitpid()&lt;/a&gt;. This provides non-blocking wait for all pending &lt;strong&gt;zombie&lt;/strong&gt; children.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#zombie-attack"&gt;
  &lt;/a&gt;
  Zombie Attack!!!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4_dXRqOa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31gew1fffn1ac0v0zfzn.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4_dXRqOa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31gew1fffn1ac0v0zfzn.jpeg" alt="Image description" width="500" height="281"&gt;&lt;/a&gt;&lt;br&gt;
You see, when a process dies (exits), it becomes a zombie and needs to be &lt;strong&gt;reaped&lt;/strong&gt;. This will be done when our parent process calls &lt;a href="https://man7.org/linux/man-pages/man2/wait.2.html"&gt;waitpid&lt;/a&gt; after receiving a &lt;a href="https://man7.org/linux/man-pages/man7/signal.7.html"&gt;CHLD signal&lt;/a&gt;, indicating the child has stopped or terminated.&lt;/p&gt;

&lt;p&gt;Ok, I hope that will give you enough information to work with while dissecting the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/usr/bin/perl
use strict;
use warnings;
use IO::Socket::INET;
use POSIX qw(setsid);
use POSIX qw(strftime);
use POSIX ":sys_wait_h";

sub timestamp {
    my $epoc_seconds = time();
    my $time = strftime "%H:%M:%S", localtime($epoc_seconds);
    my $date = strftime "%m/%d/%Y", localtime;
    my $return = $date . " " . $time;
    return ($return);
}

sub logmsg { print timestamp . " -&amp;gt; $0 -&amp;gt; PID:$$: @_ \n" }
logmsg "Begin";

my $socket = new IO::Socket::INET (
    LocalHost =&amp;gt; '192.168.1.15',
    LocalPort =&amp;gt; '27777',
    Proto =&amp;gt; 'tcp',
    Listen =&amp;gt; SOMAXCONN,
    ReuseAddr =&amp;gt; 1
);

my $waitedpid = 0;
my $player_data;
my $player_socket;

sub REAPER {
    local $!;   # don't let waitpid() overwrite current error
    logmsg "Ending Player's Game";
    while ((my $pid = waitpid(-1, WNOHANG)) &amp;gt; 0 &amp;amp;&amp;amp; WIFEXITED($?)) {
        logmsg "Closed Game ID:$pid : WaitPid:$waitedpid : " . ($? ? " with exit $?" : "");
    }
    $SIG{CHLD} = \&amp;amp;REAPER;  # loathe SysV
}
#if we get the CHLD signal call REAPER sub
$SIG{CHLD} = \&amp;amp;REAPER;

logmsg "Ready and waiting for connection";
while(1)
{
    next unless $player_socket = $socket-&amp;gt;accept();
    logmsg ("Incomming Connection");
    logmsg ("Spawning Player A Game");
    my $pid = fork();

    next if $pid; #NEXT if $pid exists (parent)

    #As Child
    setsid();
    my $proc = $$;

    logmsg ("Game ID:$proc -&amp;gt; Ready");

    # get information about a newly connected player
    my $player_address = $player_socket-&amp;gt;peerhost();
    my $player_port    = $player_socket-&amp;gt;peerport();
    logmsg "Game ID:$proc -&amp;gt; Connection from $player_address:$player_port";

    my $response = "Welcome Player: $player_address:$player_port. Press any key to disconnect.";
    $player_socket-&amp;gt;send($response);

    while ($player_socket-&amp;gt;connected()) {
        $player_socket-&amp;gt;recv($player_data, 1024);
            if ($player_data) {
                logmsg "Player Disconnecting $player_address : $player_port";
                $socket-&amp;gt;close();
                logmsg "Player Disconnected";
                last;
            }
    }
    last;
}
exit;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running this code and connecting with two players via &lt;a href="https://syncterm.bbsdev.net/"&gt;SyncTERM&lt;/a&gt;, our &lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-6-a-colourful-telnet-server-4i7g"&gt;client of choice&lt;/a&gt;, shows the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;localhost:~/ANSIGameEngine # perl forking_telnet_server.pl 
12/03/2021 18:16:58 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15978: Begin 
12/03/2021 18:16:58 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15978: Ready and waiting for connection 
12/03/2021 18:17:04 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15978: Incomming Connection 
12/03/2021 18:17:04 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15978: Spawning Player A Game 
12/03/2021 18:17:04 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15979: Game ID:15979 -&amp;gt; Ready 
12/03/2021 18:17:04 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15979: Game ID:15979 -&amp;gt; Connection from 192.168.1.9:33422 
12/03/2021 18:17:08 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15978: Incomming Connection 
12/03/2021 18:17:08 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15978: Spawning Player A Game 
12/03/2021 18:17:08 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15980: Game ID:15980 -&amp;gt; Ready 
12/03/2021 18:17:08 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15980: Game ID:15980 -&amp;gt; Connection from 192.168.1.9:33428 
12/03/2021 18:17:11 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15979: Player Disconnecting 192.168.1.9 : 33422 
12/03/2021 18:17:11 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15979: Player Disconnected 
12/03/2021 18:17:11 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15978: Ending Player's Game 
12/03/2021 18:17:11 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15978: Closed Game ID:15979 : WaitPid:0 :  
12/03/2021 18:17:13 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15980: Player Disconnecting 192.168.1.9 : 33428 
12/03/2021 18:17:13 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15980: Player Disconnected 
12/03/2021 18:17:13 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15978: Ending Player's Game 
12/03/2021 18:17:13 -&amp;gt; forking_telnet_server.pl -&amp;gt; PID:15978: Closed Game ID:15980 : WaitPid:0 :  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lJVxSJuN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/my89biw6wsyhn0kx7klb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lJVxSJuN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/my89biw6wsyhn0kx7klb.png" alt="Image description" width="880" height="1100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-all-works"&gt;
  &lt;/a&gt;
  How it all works
&lt;/h2&gt;

&lt;p&gt;The main (parent) process that accepts new incoming telnet requests is &lt;code&gt;PID:15978&lt;/code&gt; in the above example. After it sets up the listen server, it waits for a connection request and creates a forked process when a new player connects (child). The code distinguishes the parent (main waiting telnet server) process from the child (player) process with the value &lt;a href="https://perldoc.perl.org/functions/fork"&gt;&lt;code&gt;fork()&lt;/code&gt;&lt;/a&gt; returns. The parent process receives the child's (player) PID as the return value of &lt;code&gt;fork()&lt;/code&gt;, so it loops back up and waits for another player to connect. The child (player) process receives a value of &lt;code&gt;0&lt;/code&gt; from &lt;code&gt;fork()&lt;/code&gt;, so we continue downward in the code. In Perl doing &lt;code&gt;if($pid)&lt;/code&gt; does &lt;strong&gt;NOT&lt;/strong&gt; evaluate &lt;code&gt;TRUE&lt;/code&gt; if &lt;code&gt;$pid == (0 || undef)&lt;/code&gt;, which is what the child (player) process will receive as the returned value from &lt;code&gt;fork()&lt;/code&gt;. We give the child (player) process a new session, record it's PID (&lt;code&gt;$$&lt;/code&gt;) and wait for them to press any key. When the player presses a key the socket is closed and the child (player) process exists and becomes a zombie. This is when the parent (main) process receives the CHLD signal (&lt;code&gt;$SIG{CHLD}&lt;/code&gt;) and calls &lt;strong&gt;&lt;code&gt;REAPER&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-about-you"&gt;
  &lt;/a&gt;
  How about you?
&lt;/h2&gt;

&lt;p&gt;Have you worked with fork before? Have you unleashed a zombie apocalypse forgetting to reap? Comment about your experience, I'd love to hear your stories.&lt;/p&gt;

&lt;p&gt;If you have any suggestions or comments please share constructively. Also please visit our social media pages for lots of fun videos and pictures showing the game engine in action. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.instagram.com/ANSIGameEngine/"&gt;ANSI Game Engine on Instagram&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.facebook.com/ANSIGameEngine"&gt;ANSI Game Engine on Facebook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/ansigameengine/developing-a-game-engine-with-perl-part-6-a-colourful-telnet-server-4i7g"&gt;Prev &amp;lt;&amp;lt; Part 6 - A Colourful Telnet Server&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Next &amp;gt;&amp;gt; Coming Soon&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cheers!&lt;br&gt;
Shawn&lt;/p&gt;

</description>
      <category>perl</category>
      <category>linux</category>
      <category>gamedev</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Advent of code, day 3</title>
      <author>Marco Servetto</author>
      <pubDate>Fri, 03 Dec 2021 23:28:47 +0000</pubDate>
      <link>https://dev.to/marcoservetto/advent-of-code-day-3-24pp</link>
      <guid>https://dev.to/marcoservetto/advent-of-code-day-3-24pp</guid>
      <description>&lt;p&gt;Ok, day 3 part one was nice and simple. FIrst I defined a couple of utility static methods, then just rolled over the data.&lt;br&gt;
In this code I managed to showcase a unique feature of 42 'for-in':&lt;br&gt;
you can update the element under iteration!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Pow2 = {class method I (I that) =
  if that==0I 1I else 2I*This(that-1I) }
Is1 = {class method Bool(S that, I i) =
  that.startsWith(S"1" leftOffSet=i)}
MainPart1 = (
  input = Fs.Real.#$of().read(\"input")
  tot = I.List[0I;0I;0I;0I;0I;0I;0I;0I;0I;0I;0I;0I]
  var size = 0I
  for s in input.split(S.nl()) (
    size+=1I
    for var e in tot, i in Range(tot.size()) (
      if Is1(s i=i) e:=e+1I //update the value inside of 'tot'
      )
    )
  var gamma = 0I
  var epsilon = 0I
  for e in tot, i in Range(tot.size()).reverse() (
    if e+e&amp;gt;size gamma+=Pow2(i) 
    else      epsilon+=Pow2(i)
    )
  Debug(gamma*epsilon)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The second part, I found it involved in a boring way. I think there must have been a smarted way to solve it, but I could not find it. I had to read the description a couple of time to understand that I had to look for the most common bit in the REMAINING elements...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Part2 = {class method I (S that, Bool geq) = (
  res = S.List()(for s in that.split(S.nl()) \add(s))
  size = res.left().size()
  var remaining = res.size()
  for  i in Range(size) (
    if remaining==1I ( Break() )
    e = Match.Count()(for s in res if s!=S"" \add(Is1(s,i=i)))
    seek1 = ( if geq e+e&amp;gt;=remaining else e+e&amp;lt;remaining )
    for var s in res if s!=S"" &amp;amp;&amp;amp; seek1!=Is1(s,i=i) (
      s:=S"" remaining-=1I 
      )
    )
  var resI = 0I
  for s in res if s!=S"" (
    for j in Range(size), i in Range(size).reverse() (
      if Is1(s,i=j) resI+=Pow2(i)
      )
    )
  resI
  )}
MainPart2 = (
  input = Fs.Real.#$of().read(\"input")
  ogr = Part2(input,geq=\.true())
  co2sr = Part2(input,geq=\.false())
  Debug(ogr*co2sr)
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, I just end up calling the same function twice.&lt;br&gt;
You can notice that I'm still unsure how to format my code:&lt;br&gt;
for example I wrote&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for var s in res if s!=S"" &amp;amp;&amp;amp; seek1!=Is1(s,i=i) (
  s:=S"" remaining-=1I 
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;instead of the more conventional&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for var s in res (
  if s!=S"" &amp;amp;&amp;amp; seek1!=Is1(s,i=i) s:=S"" remaining-=1I 
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or the even longer version with also the 'if' indented.&lt;br&gt;
What would be more readable? and why?&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>42</category>
      <category>adventofcode</category>
    </item>
    <item>
      <title>Why does AI responsibility matter</title>
      <author>Mage</author>
      <pubDate>Fri, 03 Dec 2021 21:57:46 +0000</pubDate>
      <link>https://dev.to/mage_ai/why-does-ai-responsibility-matter-34jl</link>
      <guid>https://dev.to/mage_ai/why-does-ai-responsibility-matter-34jl</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;A machine learning (ML) model is only as good as its input data. In a world of inequity, developers must ensure they build responsible models void of bias.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;What is algorithmic bias?&lt;/li&gt;
&lt;li&gt;Societal harm&lt;/li&gt;
&lt;li&gt;Closing thoughts&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;As artificial intelligence (AI) begins to integrate itself into daily life, it’s essential that the technology be created for equitable and ethical use. Creating a responsible product is essential and failure to do so can have very real consequences. While neutral in theory, algorithms are at risk to become as biased as the world they were created from.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-algorithmic-bias"&gt;
  &lt;/a&gt;
  What is algorithmic bias?
&lt;/h2&gt;

&lt;p&gt;Algorithmic bias occurs when computers make systematically biased and unfair decisions based on the data they're given. AI has the power to be a tool for the implementation of diversity and inclusion in many facets of life — increase workplace diversity, better access to healthcare, etc.&lt;/p&gt;

&lt;p&gt;When looking to create more inclusive AI, we must look to who is creating the algorithms. According to &lt;a href="https://www.zippia.com/software-engineer-jobs/demographics/"&gt;Zippia&lt;/a&gt;, only 25% of software developers in the US identify as female. Furthermore, over half of the 57% male developers are white. Even while well intentioned, a lack of diversity amongst programmers increases the chances that the algorithms created don’t reflect the experiences of the entire population.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rViIQ25i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/st2u9dp1b23k7lyinro0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rViIQ25i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/st2u9dp1b23k7lyinro0.png" alt="Image description" width="880" height="220"&gt;&lt;/a&gt;&lt;em&gt;“SOFTWARE ENGINEER STATISTICS BY GENDER” via Zippia&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When creating AI models, developers either curate or choose from an existing training set that will be fed into the algorithm. Problems can arise when input data goes against the established norm of the dataset or when it’s curated on biased data. Developers cannot address problems that they aren’t aware of. And with a very homogenous group of people creating these models, many biases go unnoticed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#societal-harm"&gt;
  &lt;/a&gt;
  Societal harm
&lt;/h2&gt;

&lt;p&gt;Can an algorithm be prejudice? While algorithms are a neutral force, data and developer’s biases often appear in the final product. This can have very real implications for those who use or are affected by AI.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apple-credit-card"&gt;
  &lt;/a&gt;
  Apple Credit Card
&lt;/h3&gt;

&lt;p&gt;In partnership with Goldman Sachs, Apple launched their first credit card in 2019. Problems arose when David Heinemeier Hansson &lt;a href="https://twitter.com/stevewoz/status/1193422616016519168?ref_src=twsrc%5Etfw"&gt;tweeted&lt;/a&gt; that when applying for the Apple credit card, it gave him a 20x higher limit than his wife. This was echoed many times over, including by Apple co-founder Steve Wozniak.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NovfJudh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqhy1r2l8lgk2d4aif36.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NovfJudh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqhy1r2l8lgk2d4aif36.png" alt="Image description" width="880" height="384"&gt;&lt;/a&gt; &lt;br&gt;
Goldman Sachs issued a statement explaining that gender wasn’t an input variable when determining credit limits. Experts have said that this could be a part of the problem as omitting a variable could leave developers unaware of any problems. Will Knight with &lt;a href="https://www.wired.com/story/the-apple-card-didnt-see-genderand-thats-the-problem/"&gt;Wired&lt;/a&gt; explained “a gender-blind algorithm could end up biased against women as long as it’s drawing on any input or inputs that happen to correlate with gender.” As companies like Apple continue to make business decisions based on algorithms, rigorous testing, and trials must be done to ensure that human bias doesn’t make its way into machines.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overpolicing"&gt;
  &lt;/a&gt;
  Over-policing
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gUdrT1pt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71fpwzm3qkdmbkm9gq6k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gUdrT1pt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71fpwzm3qkdmbkm9gq6k.png" alt="Image description" width="880" height="550"&gt;&lt;/a&gt;&lt;em&gt;Example of PredPol’s predictive policing software via &lt;a href="https://www.wabe.org/concerns-arise-over-new-predictive-policing-program/"&gt;Wabe&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;AI is currently being used for law enforcement and policing. Some worry that technology could exacerbate biases and racial stereotypes. &lt;a href="https://www.predpol.com/"&gt;PredPol&lt;/a&gt; is one company using algorithms to predict where crimes are most likely to happen and is currently being deployed in police stations around the world.&lt;/p&gt;

&lt;p&gt;PredPol and other AI policing technologies have left many concerned that the technology will only perpetuate existing racial bias. Racial disparities in criminal justice laws and the over-policing of certain neighborhoods could be factors in the data that would direct police back to these same neighborhoods. With a greater police presence, a vicious cycle of over-policing could continue.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---1ZPydAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zd9cyxdll911uuthl4tf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---1ZPydAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zd9cyxdll911uuthl4tf.png" alt="Image description" width="880" height="584"&gt;&lt;/a&gt;&lt;em&gt;PredPol looks for patterns to dispatch police in neighborhoods&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;PredPol’s CEO, &lt;a href="https://www.linkedin.com/in/brianmacd/"&gt;Brian MacDonald&lt;/a&gt;, has claimed that data is a much more reliable source for making decisions than human judgement. Policing software tools have the power to make determinations about people’s lives. Some use cases from police officers have backed up its claims. While algorithms can make life easier, we should be confident that they are free from biased data of the past before using them to make future decisions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing thoughts
&lt;/h2&gt;

&lt;p&gt;The rapid rate of development for AI has led to great innovation. It’s essential that ethical practices are integrated into technology to ensure equitable use. Next week’s blog covers responsible AI in practice and how to check for algorithmic bias.&lt;/p&gt;

&lt;p&gt;Interested in reducing social biases in AI? See how &lt;a href="https://www.mage.ai/"&gt;Mage&lt;/a&gt; can give you a display of bias and suggestions on how to lower them. Sign up for &lt;a href="https://share.hsforms.com/1LjMsA01RSoqu8qKomb_x8gcddw7"&gt;Early Access&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>ai</category>
      <category>mage</category>
      <category>machinelearning</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Form Validation with CSS</title>
      <author>Enes Kılıç</author>
      <pubDate>Fri, 03 Dec 2021 21:51:27 +0000</pubDate>
      <link>https://dev.to/enesskilic/form-validation-with-css-2hc4</link>
      <guid>https://dev.to/enesskilic/form-validation-with-css-2hc4</guid>
      <description>&lt;p&gt;In this post, I will show you how to validation the required form fields with CSS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you want to see full version of this project or all HTML-CSS projects look this &lt;a href="https://github.com/enesskilic/html-css-projects"&gt;Repository&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Create HTML&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!--==== Add required attribute to input tag  ====--&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; Login &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;CSS&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="nd"&gt;:invalid&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;pointer-events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="nd"&gt;:valid&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;pointer-events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;My output with some styles&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/eneskilic/embed/rNGOMze?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Getting Started with Azure Load Testing</title>
      <author>NaveenKumar Namachivayam ⚡</author>
      <pubDate>Fri, 03 Dec 2021 21:33:13 +0000</pubDate>
      <link>https://dev.to/qainsights/getting-started-with-azure-load-testing-1n24</link>
      <guid>https://dev.to/qainsights/getting-started-with-azure-load-testing-1n24</guid>
      <description>&lt;p&gt;A new sheriff in town. Microsoft launched the fully managed Azure service for performance test engineers and developers to perform high scale load testing called Azure Load Testing, currently in preview mode. It is quite a big announcement for performance engineers. Let us see whether Azure Load Testing fulfills our needs or not in this blog post.&lt;/p&gt;

&lt;h2&gt;What is Azure Load Testing?&lt;/h2&gt;

&lt;p&gt;As foretold, aptly put, Azure Load Testing is an offering for the customers who are in the Azure ecosystem. Even if you are not in Azure, you can still spin up the load test resource for performance testing. But the catch is, PRICING. We can discuss the pricing in another blog post. Let us focus on the features, how to get started and more.&lt;/p&gt;

&lt;p&gt;Azure Load Testing is backed up by none other than Apache JMeter and Azure infrastructure. Here is a meme I created after the announcement was made.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/Azure-JMeter.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qpSqEIwC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/Azure-JMeter.jpg" alt="Azure Load Testing Meme" width="500" height="666"&gt;&lt;/a&gt;Azure Load Testing Meme&lt;/p&gt;

&lt;h2&gt;Azure Services&lt;/h2&gt;

&lt;p&gt;In Azure Load Testing, the core component is the latest version of Apache JMeter 5.4.1 and the Open JDK 64-bit 15.0.5. Microsoft has its own flavor of &lt;a href="https://docs.microsoft.com/en-us/java/openjdk/download" rel="noreferrer noopener"&gt;JDK&lt;/a&gt;. But I am not sure whether Azure Load Testing uses Microsoft distribution or other flavors. &lt;/p&gt;

&lt;p&gt;Tests will be executed on Linux AMD instance with 4 cores and 16 GB RAM.&lt;/p&gt;

&lt;p&gt;Apart from JMeter and JDK, following are the dependencies which will be created for performance testing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;App Service&lt;/li&gt;
&lt;li&gt;Kubernetes&lt;/li&gt;
&lt;li&gt;Application Insights&lt;/li&gt;
&lt;li&gt;Virtual Machine&lt;/li&gt;
&lt;li&gt;Azure SQL Server&lt;/li&gt;
&lt;li&gt;Storage account&lt;/li&gt;
&lt;li&gt;Azure Monitor (for monitoring)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the sample dashboard:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/QAInsights-12-2-2021-10.39.46-PM-000000.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZXVQ8zGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/QAInsights-12-2-2021-10.39.46-PM-000000-1024x450.png" alt="Azure Monitor" width="880" height="387"&gt;&lt;/a&gt;Azure Monitor&lt;/p&gt;

&lt;h2&gt;Getting Started with Azure Load Testing&lt;/h2&gt;

&lt;p&gt;To get started with Azure Load Testing, the following are the prerequisites:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Azure account with active subscription&lt;/li&gt;
&lt;li&gt;JMeter script and its dependencies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Creating an &lt;a href="https://azure.microsoft.com/en-us/free/" rel="noreferrer noopener"&gt;Azure account&lt;/a&gt; is simple and free. If you are new to Azure, you will get a $200 credit for 30 days.&lt;/p&gt;

&lt;h3&gt;Assigning roles&lt;/h3&gt;

&lt;p&gt;Before creating Azure Load Testing resources, let us create a Management Group and assign a valid role to spin up the resource.&lt;/p&gt;

&lt;p&gt;In the Azure portal, search for &lt;strong&gt;Management Groups&lt;/strong&gt;. In &lt;strong&gt;Management Groups&lt;/strong&gt;, click on &lt;strong&gt;Create &lt;/strong&gt;and enter the valid &lt;strong&gt;Management group ID&lt;/strong&gt; and then click on &lt;strong&gt;Submit&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Management Groups&lt;/strong&gt; help to organize the various entities such as policies, compliance and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---XcIICQz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-1024x644.png" alt="Management Groups" width="880" height="553"&gt;&lt;/a&gt;Management Groups&lt;/p&gt;

&lt;p&gt;Inside the created management group, it is important to add an active subscription. Click on &lt;strong&gt;Add Subcription&lt;/strong&gt; and select the &lt;strong&gt;active subscription&lt;/strong&gt; and then click on &lt;strong&gt;Save&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-2.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MYqhmcZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-2-1024x516.png" alt="Active Subscription" width="880" height="443"&gt;&lt;/a&gt;Active Subscription&lt;/p&gt;

&lt;p&gt;To spin up the resources, it is critical to have valid roles assigned. To assign a &lt;strong&gt;Load Test Owner&lt;/strong&gt; role, click on &lt;strong&gt;Access Control (IAM) &lt;/strong&gt;and then click on the &lt;strong&gt;Add role assignment&lt;/strong&gt; button as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-3.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iUUvXVEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-3-1024x446.png" alt="Add a Role" width="880" height="383"&gt;&lt;/a&gt;Add a Role&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;Add role assignment&lt;/strong&gt; window, search for "&lt;em&gt;load&lt;/em&gt;" and then select the appropriate role. In this example, I selected &lt;strong&gt;Load Test Owner&lt;/strong&gt;. Click on the &lt;strong&gt;Next &lt;/strong&gt;button to add the members.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-5.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AkmAcaDy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-5-1024x570.png" alt="Role Assignment" width="880" height="490"&gt;&lt;/a&gt;Role Assignment&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Select Members&lt;/strong&gt; and then add the valid members. Click on &lt;strong&gt;Next &lt;/strong&gt;to &lt;strong&gt;Review and Assign&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-4.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aKezI4dd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-4-1024x503.png" alt="Select Members" width="880" height="432"&gt;&lt;/a&gt;Select Members&lt;/p&gt;



&lt;h3&gt;Create a new Azure Load Testing resource&lt;/h3&gt;

&lt;p&gt;To begin with the performance testing, the first step is to create a new &lt;strong&gt;Azure Load Testing&lt;/strong&gt; resource. Go to the home page of Azure portal, and enter &lt;em&gt;Load Test &lt;/em&gt;in the search text bar. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-6.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oiftuOCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-6.png" alt="Getting Started with Azure Load Testing" width="421" height="311"&gt;&lt;/a&gt;Getting Started with Azure Load Testing&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Azure Load Testing&lt;/strong&gt; under &lt;strong&gt;Services&lt;/strong&gt; as shown above.&lt;/p&gt;

&lt;p&gt;On the Azure Load Testing page, click on &lt;strong&gt;Create &lt;/strong&gt;to create a new Load Test Resource. Under the &lt;strong&gt;Basics &lt;/strong&gt;tab, fill in the mandatory fields as shown below. Then, click on the &lt;strong&gt;Review + create&lt;/strong&gt; button. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-7.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1VL2Uz6P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-7-1024x881.png" alt="Create Load Test Resource" width="880" height="757"&gt;&lt;/a&gt;Create Load Test Resource&lt;/p&gt;

&lt;p&gt;After validation is successful, click on &lt;strong&gt;Create&lt;/strong&gt;. This will initialize the deployment and, once it is successfully completed, you will get the status.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-8.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nbEdYGnd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-8-1024x386.png" alt="Deployment Status" width="880" height="332"&gt;&lt;/a&gt;Deployment Status&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;Go to resource&lt;/strong&gt; button to view the landing page of Azure Load Testing. Welcome home :) &lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-9.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w8gNOb3---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-9-1024x370.png" alt="Home page of Azure Load Testing" width="880" height="318"&gt;&lt;/a&gt;Home page of Azure Load Testing&lt;/p&gt;

&lt;h3&gt;Create a new test&lt;/h3&gt;

&lt;p&gt;Click on the &lt;strong&gt;Create &lt;/strong&gt;button to start a new test for performance testing. It is a 7 - step easy process. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-10.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--saS-_sKv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-10.png" alt="Create a new test" width="716" height="339"&gt;&lt;/a&gt;Create a new test&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In the &lt;strong&gt;Basics &lt;/strong&gt;tab, enter the test name and description.&lt;/li&gt;
&lt;li&gt;In &lt;strong&gt;Test plan&lt;/strong&gt;, upload the JMeter test plan and its dependencies. Only one test plan is allowed. &lt;/li&gt;
&lt;li&gt;In &lt;strong&gt;Parameters&lt;/strong&gt;, enter sensitive information like API keys, Passwords and more.&lt;/li&gt;
&lt;li&gt;In &lt;strong&gt;Load&lt;/strong&gt;, configure the number of engines you need for your test. 1 engine will spin up 250 threads.&lt;/li&gt;
&lt;li&gt;In &lt;strong&gt;Test criteria&lt;/strong&gt;, configure the SLAs&lt;/li&gt;
&lt;li&gt;In &lt;strong&gt;Monitoring&lt;/strong&gt;, you can link the resources to monitor&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Click on &lt;strong&gt;Review + create&lt;/strong&gt; and then click on &lt;strong&gt;Create&lt;/strong&gt;, which will spin up the test.&lt;/p&gt;

&lt;p&gt;After the validation success, the test will start. A few moments later, you will see the dashboard as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-12.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B1uW5T88--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-12-1024x517.png" alt="Runtime Dashboard" width="880" height="444"&gt;&lt;/a&gt;Runtime Dashboard&lt;/p&gt;

&lt;p&gt;During the test, you can stop the test, refresh the dashboard, share the dashboard, and download the input file.&lt;/p&gt;

&lt;p&gt;After the test is done, you can rerun the test, compare the test, download the logs and results and delete the run.&lt;/p&gt;

&lt;h3&gt;Delete the Azure Load Test resource&lt;/h3&gt;

&lt;p&gt;Once the test is done, please make sure that you are deleting the resource. Before deleting it, download all the artifacts.&lt;/p&gt;

&lt;p&gt;To delete, go to the &lt;strong&gt;Azure Load Test&lt;/strong&gt; resource, click on &lt;strong&gt;Delete&lt;/strong&gt;, type &lt;strong&gt;yes&lt;/strong&gt;, select the reason and then click on the &lt;strong&gt;Delete &lt;/strong&gt;button as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/12/image-14.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fclZTb7s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/12/image-14-1024x503.png" alt="Delete Azure Load Testing resource" width="880" height="432"&gt;&lt;/a&gt;Delete Azure Load Testing resource&lt;/p&gt;

&lt;h2&gt;Limitations and Cons&lt;/h2&gt;

&lt;p&gt;Every solution will have its own limitations. Azure Load Test comes with the following limitations from my exploration:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Only one JMeter test plan is allowed to upload&lt;/li&gt;
&lt;li&gt;a limited number of regions.&lt;/li&gt;
&lt;li&gt;A maximum of 25,000 virtual users is supported.&lt;/li&gt;
&lt;li&gt;A maximum of 3 hours duration is supported. If you want to run endurance testing, you cannot trigger.&lt;/li&gt;
&lt;li&gt;Dashboard update is flaky. &lt;/li&gt;
&lt;li&gt;Expensive solution&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Azure Load Test offering is a great solution if you are into Azure ecosystem and your performance test requirements aren't crazy. The intuitive user interface and fluid workflow makes it easy to trigger the test. &lt;/p&gt;

&lt;p&gt;The essential features such as creating tests, dashboards, compare, download logs/results and more have been implemented. But features such as network virtualization, multiple tests support, more virtual users, more duration, split the load across multiple engines or regions, built-in JMeter plugins support, custom snippet support and more are missing.&lt;/p&gt;

&lt;p&gt;Give the Azure Load Test a shot, you may like it. &lt;/p&gt;

</description>
      <category>performance</category>
      <category>azure</category>
      <category>testing</category>
      <category>webperf</category>
    </item>
    <item>
      <title>Open Source Runtime Exploitability Management with ThreatMapper</title>
      <author>Deepfence</author>
      <pubDate>Fri, 03 Dec 2021 21:03:39 +0000</pubDate>
      <link>https://dev.to/deepfence/open-source-runtime-exploitability-management-with-threatmapper-3iel</link>
      <guid>https://dev.to/deepfence/open-source-runtime-exploitability-management-with-threatmapper-3iel</guid>
      <description>&lt;p&gt;CNCF Webinar - Move from mere vulnerability management to exploitability management with ThreatMapper&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=S-sNUuLDhz0"&gt;https://www.youtube.com/watch?v=S-sNUuLDhz0&lt;/a&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>security</category>
      <category>cloudnative</category>
      <category>devops</category>
    </item>
    <item>
      <title>Flutter User Authentication Part 1: Models and API</title>
      <author>gardnerapp</author>
      <pubDate>Fri, 03 Dec 2021 20:38:23 +0000</pubDate>
      <link>https://dev.to/coreyscorner/flutter-user-authentication-part-1-models-and-api-eb</link>
      <guid>https://dev.to/coreyscorner/flutter-user-authentication-part-1-models-and-api-eb</guid>
      <description>&lt;p&gt;Signing user up, in and out are nearly universal features for every type of app. In this series I’ll teach you how to build a simple authentication system. Part 1 will cover the basics of API calls and models. In part 2 I’ll teach you how to store authenticated users inside your app with the Cubit package and in part 3 we’ll be learning how to maintain sign-in after our app closes by using the shared preferences package.&lt;/p&gt;

&lt;p&gt;Podcast: &lt;a href="https://podcasts.apple.com/us/podcast/coreys-corner/id1479097455"&gt;https://podcasts.apple.com/us/podcast/coreys-corner/id1479097455&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn to code: &lt;a href="https://www.youtube.com/channel/UCfd8A1xfzqk7veapUhe8hLQ"&gt;https://www.youtube.com/channel/UCfd8A1xfzqk7veapUhe8hLQ&lt;/a&gt;&lt;br&gt;
Creating a Base API class:&lt;/p&gt;

&lt;p&gt;Our first step is to build a BaseAPI class to hold all of the URL’s of our API. In my How To Make Flutter API Calls Easy I taught you how to use class inheritance as a means of simplifying and organizing your API calls. This class isn’t to complex it just stores the routes we will be requesting, check out the code below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Class BaseAPI{    static String base = "http://localhost:3000"; 
    static var api = base + "/api/v1";
    var customersPath = api + "/customers";
    var authPath = api + "/auth"; 
   // more routes   Map&amp;lt;String,String&amp;gt; headers = {                           
       "Content-Type": "application/json; charset=UTF-8" };                                      

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ultimately creating our Base class makes it easier for us to manage our API endpoints.&lt;br&gt;
Creating A Customer API Class&lt;/p&gt;

&lt;p&gt;Next we’re going to create a class to store all of the API calls for customer authentication.&lt;/p&gt;

&lt;p&gt;We’ll make request using darts HTTP library, any data we send will be encoded in JSON format. Each request will return a Future of type HTTP response. Inside of our widgets we’ll be using the Response’s statusCode attribute to determine if our calls were successful.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import 'dart:convert';

import 'package:resteraunt_starter/api/BaseAPI.dart';
import 'package:http/http.dart' as http;

class AuthAPI extends BaseAPI {  Future&amp;lt;http.Response&amp;gt; signUp(String name, String email, String phone,
      String password, String passwordConfirmation) async {
    var body = jsonEncode({
      'customer': {
        'name': name,
        'email': email,
        'phone': phone,
        'password': password,
        'password_confirmation': passwordConfirmation
      }
    });

    http.Response response =
        await http.post(super.customersPath, headers: super.headers, body: body);
    return response;
  }

  Future&amp;lt;http.Response&amp;gt; login(String email, String password) async {
    var body = jsonEncode({'email': email, 'password': password});

    http.Response response =
        await http.post(super.authPath, headers: super.headers, body: body);

    return response;
  }


  Future&amp;lt;http.Response&amp;gt; logout(int id, String token) async {
    var body = jsonEncode({'id': id, 'token': token});

    http.Response response = await http.post(super.logoutPath,
        headers: super.headers, body: body);

    return response;
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it’s time to create our Customer class!&lt;br&gt;
Creating a Customer Object&lt;/p&gt;

&lt;p&gt;When we create an object we are creating our own data type, we’re creating a blue print that outlines all the properties that each of our customers will have.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import 'dart:convert';

class Customer{
  int id;
  String email;
  String phone;
  String name;
  String token;

  User({this.id, this.email, this.phone, this.name, this.token});

  factory Customer.fromReqBody(String body) {
    Map&amp;lt;String, dynamic&amp;gt; json = jsonDecode(body);

    return Customer(
      id: json['id'],
      email: json['email'],
      name: json['name'],
      phone: json['phone'],
      token: json['token'],
    );

  }

  void printAttributes() {
    print("id: ${this.id}\n");
    print("email: ${this.email}\n");
    print("phone: ${this.phone}\n");
    print("name: ${this.name}\n");
    print("token: ${this.token}\n");
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first thing we did was create class constructors to initialize new instances of our Customer objects. We use the factory constructor because there might be a time when we don’t need to create an entirely new instance of our class. Our factory method will receive a JSON object, from our API call request body, which we will decode into a Map of type(s) String &amp;amp; dynamic. From their it’s only a matter of setting our Customer attributes to their corresponding keys in the map. Lastly the printAttributes() helper method will print out all of the attributes and their values, this is very useful for debugging.&lt;br&gt;
In Our Widgets&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;../authentication/auth.dart

class Auth extends StatefulWidget {
  @override
  _AuthState createState() =&amp;gt; _AuthState();
}

class _AuthState extends State&amp;lt;Auth&amp;gt; {
  bool showSignUp = true;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(
            title: Text(
              "Corey's Corner",
            ),
          elevation: 16.0,
          actions: [
            IconButton(
                icon: Icon(Icons.swap_horiz),
                onPressed: () {
                  setState(() {                    showSignUp = !showSignUp;
                  });
                })
          ],
        ),
        // ternary operator 
      body: Container(child: showSignUp ? SignUp() : SignIn()));
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this widget we are setting up a container to hold both our Signup() &amp;amp; SignIn() widgets. We use a boolean to toggle back and forth between the different pages, this prevents use from having to write push functions to get to different pages.&lt;br&gt;
../authentication/sign_in.dart&lt;/p&gt;

&lt;p&gt;For the sake of brevity I’m going to leave all form, text and button styling out of the picture and this tutorial will only cover the signIn page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class SignIn extends StatefulWidget {

  @override
  _SignInState createState() =&amp;gt; _SignInState();
}

class _SignInState extends State&amp;lt;SignIn&amp;gt; {
  AuthAPI _authAPI = AuthAPI();
  final _key =  GlobalKey&amp;lt;FormState&amp;gt;();
  String email;
  String password;
  @override
  Widget build(BuildContext context) {

    return  Container(
        padding: EdgeInsets.symmetric(vertical: 20.0, horizontal: 25.0),
        child: Form(
            key: _key,
            child: Column(
              mainAxisAlignment: MainAxisAlignment.start,
              children: &amp;lt;Widget&amp;gt;[
                SizedBox(height: 70),
                Text("Sign In", style: formTitleStyle(),),
                SizedBox(height: 30),
                Container(
                    width: 400,
                    child: TextFormField(
                      decoration: textInputDecoration("Email", context),
             onChanged: (val) =&amp;gt; setState(() =&amp;gt; email = val),
                    )
                ),
                SizedBox(height: 30),
                Container(
                  width: 400,
                  child: TextFormField(
                    obscureText: true,
                    decoration: textInputDecoration("Password", context),
                    onChanged: (val) =&amp;gt; setState(() =&amp;gt; password = val),
                  ),
                ),
                SizedBox(height: 25),
                GestureDetector(
                  child: Text("Forgot Password ?", style: TextStyle(
                      fontSize: 18.0,
                      decoration: TextDecoration.underline
                  ),),
                  onTap: (){
                  // todo 
                  },
                ),
                SizedBox(height: 25),
                Container(
                    width: 400,
                    child: customRaisedIconButton("Sign In !", Icons.send, context, () async {
                      if(_key.currentState.validate()){
                        try{
                          var req = await 
                       _authAPI.login(email,  password);
                          if(req.statusCode == 200){print(req.body);
var customer = 
                              Customer.fromReqBody(req.body);customer.printAttributes();
                        Navigator.push(context, MaterialPageRoute(
                         builder: (context) =&amp;gt; MyHomePage(customer:                 customer)));
                          } else {
                            pushError(context);
                          }
                        } on Exception catch (e){
                        print(e.toString());
                        pushError(context);
                        }
                      }
                    })
                )
              ],
            )
        )
    );
  }
void PushError(){
    Navigator.push(context, MaterialPageRoute(
        builder: (context) =&amp;gt; Error()
    ));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first thing we do is create to Strings email &amp;amp; password within state. In side of our text forms we call setState to set the stateful fields to the values our customer types in. Before our API call we’ll use validators to ensure that our email and password aren’t bank so we don’t make any necessary API calls.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;AuthAPI _authAPI = AuthAPI();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this line of code we initialized an instance of our AuthAPI object and store it in a variable.&lt;/p&gt;

&lt;p&gt;Our API call is asynchronous because we have to wait for our data. We use the await statement to wait for our request. Asynchronous programming allows our code to execute non-linearly. We wrap our call in a try statement to catch any errors and we call our login function and pass it the objects stored in state with line of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var req = await _authAPI.login(email,  password);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we receive our request we use its statusCode attribute to decide what to do next. If our code reads 200 we pass the request body attribute, which is of type JSON to the factory constructor of our Customer model. From there we print out our users new attributes, the request body and push to home. If we don’t receive the proper statusCode or we catch an exception we push to an error page.&lt;/p&gt;

&lt;p&gt;Thanks for reading! in the next post we’ll discuss how to use Cubits to store our customer in our app making it available to all of our widgets.&lt;/p&gt;

&lt;p&gt;Be sure to checkout Part II and III !&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>mvc</category>
      <category>api</category>
    </item>
    <item>
      <title>You may want to consider this when using docker images and Dockerfiles</title>
      <author>Ernesto Lopez</author>
      <pubDate>Fri, 03 Dec 2021 20:15:21 +0000</pubDate>
      <link>https://dev.to/aernesto24/you-may-want-to-consider-this-when-using-docker-images-and-dockerfiles-starting-point-51ag</link>
      <guid>https://dev.to/aernesto24/you-may-want-to-consider-this-when-using-docker-images-and-dockerfiles-starting-point-51ag</guid>
      <description>&lt;p&gt;One of the advantages of using containers is &lt;strong&gt;the ability to have images with our environment pre configured and ready to go&lt;/strong&gt; with our application code. These images is what allows us to run a container on our laptop and then run the same image on a container in the cloud. But building this images is not a trivial task, and we tend add useless tasks or overhead to the images we create. This entry is to share some of the best practices that has work for me in the past when building docker images.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First of all we need to define what a docker image is&lt;/strong&gt;. A docker image is a unit of packaging that may includes Operating systems constructs or packages, application dependencies and libraries and application code. If you came from the virtualization world, see the image as a VM template, and the containers are instances created using this template. Otherwise, if you are a developer, you can think of images as a class definition, and containers are instances of that class.&lt;/p&gt;

&lt;p&gt;Docker images must be stored somewhere, right?, these are the called image registries. These registries are like repositories where you store your images. Some examples are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hub.docker.com/"&gt;Docker Hub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/ecr/"&gt;AWS ECR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.oracle.com/en-us/iaas/Content/Registry/Concepts/registryoverview.htm"&gt;Oracle Container Registry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://azure.microsoft.com/en-us/services/container-registry/#overview"&gt;Azure Container Registry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/container-registry"&gt;Google Container Registry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.redhat.com/en/technologies/cloud-computing/quay"&gt;Red Hat Quay&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; you will need to create an account on these registries if you want to pull or push docker images. You need to pull images to your local computer to use it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; you can also create a docker image locally without the need of a registry but if you want to use that image on another computer, server o cloud yo need to use the registry.&lt;/p&gt;

&lt;p&gt;Images are made up of multiple layers represented as a single object. One layer that is out of the instance is the kernel, as container use the host kernel.&lt;/p&gt;

&lt;p&gt;Example of this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;☁  docker [master] ⚡  docker image pull mongo:latest  
latest: Pulling from library/mongo
7b1a6ab2e44d: Already exists 
90eb44ebc60b: Pull complete 
5085b59f2efb: Pull complete 
c7499923d022: Pull complete 
019496b6c44a: Pull complete 
c0df4f407f69: Pull complete 
351daa315b6c: Pull complete 
5b6df31e95f8: Pull complete 
e82745116109: Pull complete 
98e820b4cad7: Pull complete 
Digest: sha256:cf9f5df5419319390cc3b5d9abfc2d0d0b149b3e9e3e29b579
Status: Downloaded newer image for mongo:latest
docker.io/library/mongo:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we can see other interesting characteristics from docker images: when you pull an image, docker only download the layers that changed or the ones that are new in your local system, helping to reduce overhead on network traffic.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This layer &amp;gt; &lt;code&gt;7b1a6ab2e44d: Already exists&lt;/code&gt; was already on my system&lt;/li&gt;
&lt;li&gt;This one &amp;gt; &lt;code&gt;90eb44ebc60b: Pull complete&lt;/code&gt; was downloaded.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Images can be really small, let see the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;☁  docker [master] ⚡  docker pull alpine
Using default tag: latest
latest: Pulling from library/alpine
59bf1c3509f3: Pull complete 
Digest: sha256:21a3deaa0d32a8057914f36584b5288d2e0118285c70fa8c9300
Status: Downloaded newer image for alpine:latest
docker.io/library/alpine:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you may noticed, there are fewer layers on alpine image. Just bo be sure we are going to execute an ls:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;☁  docker [master] ⚡  docker image ls
REPOSITORY                             TAG         IMAGE ID       CREATED        SIZE
alpine                                 latest      c059bfaa849c   8 days ago     5.59MB
mongo                                  latest      4253856b2570   2 weeks ago    701MB
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;5MB vs 700MB, and the standard is around 40-200MB for images.&lt;/p&gt;

&lt;p&gt;Another aspect to consider is the images naming, if we observed previous command images are called from &lt;em&gt;:&lt;/em&gt; &lt;strong&gt;(This is for official images)&lt;/strong&gt;, being &lt;em&gt;latest&lt;/em&gt; the default if you do not specify any version.&lt;/p&gt;

&lt;p&gt;There is a way to query if an image is an official one, by using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;☁  docker [master] ⚡  docker search ubuntu --filter "is-official=true" 
NAME                 DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
ubuntu               Ubuntu is a Debian-based Linux operating sys…   13244     [OK]       
websphere-liberty    WebSphere Liberty multi-architecture images …   282       [OK]       
ubuntu-upstart       DEPRECATED, as is Upstart (find other proces…   112       [OK]       
ubuntu-debootstrap   DEPRECATED; use "ubuntu" instead                45        [OK]      
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;NOW&lt;/strong&gt;, after the images 101, we need to move to some of the best practices using or creating images, lets get to it...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#oh-wait"&gt;
  &lt;/a&gt;
  OH WAIT!!
&lt;/h3&gt;

&lt;p&gt;I almost forgot to talk about Dockerfile ...&lt;br&gt;
Basically:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Text document that contains commands to build an image&lt;/li&gt;
&lt;li&gt;Yeap, it must be named Dockerfile with uppercase at the beginning&lt;/li&gt;
&lt;li&gt;Nop, it cannot be named &lt;strong&gt;dockerfile&lt;/strong&gt;, &lt;strong&gt;docker-file&lt;/strong&gt;, &lt;strong&gt;docker file&lt;/strong&gt;...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is an small example of a Dockerfile from the &lt;a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/"&gt;docker official documentation&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM ubuntu:18.04
COPY . /app
RUN make /app
CMD python /app/app.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;AND now, we can move on with the recommendations...&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-use-official-docker-images-as-base-image"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1.- Use Official Docker images as base Image&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;From previous example on &lt;strong&gt;Dockerfile&lt;/strong&gt;, the base image is the one that we use on the &lt;strong&gt;FROM&lt;/strong&gt; statement&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM ubuntu:18.04
COPY . /app
RUN make /app
CMD python /app/app.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#but-but-but"&gt;
  &lt;/a&gt;
  &lt;strong&gt;BUT, BUT, BUT&lt;/strong&gt;
&lt;/h5&gt;

&lt;p&gt;There is caveat, instead of using a base OS image and then add a RUN statement to install dependencies, use the official image that has the dependencies already installed.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#this-is-ok-but-it-is-not-the-best-approach"&gt;
  &lt;/a&gt;
  &lt;strong&gt;this is ok, but it is not the best approach:&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM ubuntu:18.04

RUN apt-get update &amp;amp;&amp;amp; apt-get install -y gnupg

RUN wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -

COPY ./mongodb-org-5.0.list /etc/apt/sources.list.d/mongodb-org-5.0.list

RUN apt-get install -y mongodb-org

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#this-is-a-better-approach"&gt;
  &lt;/a&gt;
  &lt;strong&gt;This is a better approach&lt;/strong&gt;
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM mongo:4.4.11-rc0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will simplify your Dockerfiles, and make your live easier...&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-avoid-adding-your-code-at-the-beginning"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2.- Avoid adding your code at the beginning&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;As I mentioned before, a docker images are layered, some of this images can be cached on your local system, &lt;strong&gt;YOU WANT&lt;/strong&gt; to have cached layers, it will take less to create your container when pulling your images.&lt;/p&gt;

&lt;p&gt;When using a Dockerfile&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM ubuntu
COPY . /app

CMD ["java", "-jar", "/app/target/app.jar"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you make a change on your code, which corresponds to the second line &lt;code&gt;COPY . /app&lt;/code&gt;, the rest of the layers will be pulled only the  &lt;code&gt;FROM ubuntu&lt;/code&gt; will be cached.&lt;/p&gt;

&lt;p&gt;Put the COPY of your code at the end.&lt;br&gt;
Also, as a bonus, just copy the jar file to the container, you do not need all the files. For example, yo do not need the &lt;strong&gt;README file&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM ubuntu
RUN apt-get update &amp;amp;&amp;amp; apt-get install -y --no-install-recommends \
openjdk-8-jdk ssh vim
COPY target/app.jar /app
CMD ["java", "-jar", "/app/target/app.jar"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if we remember the first recommendation, someone already worked on an image with openjdk installed&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM openjdk
COPY target/app.jar /app
CMD ["java", "-jar", "/app/target/app.jar"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And it is an official one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;☁  docker [master] ⚡  docker search openjdk --filter "is-official=true"
NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
openjdk   OpenJDK is an open-source implementation of …   3046      [OK]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#3-add-an-specific-version-for-your-base-image"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3.- Add an specific version for your Base Image&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;If you remember, at the begining we saw that if you do not specify any version, &lt;em&gt;latest&lt;/em&gt; will be used...&lt;br&gt;
Right?&lt;br&gt;
&lt;strong&gt;OK&lt;/strong&gt;, yo do not want to use &lt;em&gt;latest&lt;/em&gt;...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;latest&lt;/em&gt; is unpredictable&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;latest&lt;/em&gt; can change between pulls&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;latest&lt;/em&gt; can break your code&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;latest&lt;/em&gt; is not love!!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Use an specific image version&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM mongo:4.4.11-rc0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM openjdk:slim
COPY target/app.jar /app
CMD ["java", "-jar", "/app/target/app.jar"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can consult the images versions under &lt;strong&gt;Tags&lt;/strong&gt; inside docker hub&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BjR_iD6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x37wsmyag9xh90xi0h63.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BjR_iD6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x37wsmyag9xh90xi0h63.png" alt="Docker-hub-tags" width="880" height="731"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;non-relevant for this entry TIP&lt;/strong&gt;&lt;br&gt;
You can also pull a repo with all its images:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;☁  docker [master] ⚡  docker pull --all-tags alpine
     #output too long to be shown

☁  docker [master] ⚡  docker image ls | grep alpine
alpine                                 3           c059bfaa849c   9 days ago      5.59MB
alpine                                 latest      c059bfaa849c   9 days ago      5.59MB
ansible-base-lab_managed-host-alpine   latest      77f2f125fa50   6 weeks ago     80.8MB
alpine                                 20210804    4e873038b87b   4 months ago    5.59MB
alpine                                 20210730    8fd5af68fdb2   4 months ago    5.59MB
alpine                                 3.10        e7b300aee9f9   7 months ago    5.58MB
alpine                                 20210212    b0da5d0678e7   8 months ago    5.62MB
alpine                                 20201218    430cc6504dbd   11 months ago   5.61MB
alpine                                 20200917    003bcf045729   14 months ago   5.62MB
alpine                                 20200626    3c791e92a856   17 months ago   5.57MB
alpine                                 20200428    5737d7d248e9   19 months ago   5.6MB
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#4-decouple-your-applications-on-different-container"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4.- Decouple your applications on different container&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;This is going to be a short one, a container should have only one concern. A web application may consist of 3 containers &lt;strong&gt;(The web app code, the database, the cache)&lt;/strong&gt; instead of only one doing all. &lt;/p&gt;

&lt;p&gt;This help to scale and make atomic changes.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-use-leaner-official-images-also-referred-to-minimal-flavors"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5.- Use leaner official images also referred to minimal flavors&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Official OS images like &lt;strong&gt;ubuntu&lt;/strong&gt; may contain some packages or services installed that we do not need.&lt;/p&gt;

&lt;p&gt;Remember the idea of a container is to provide just the necessary software for your application to run as expected, you may not even need to enter the container, this is why some images does not have a shell installed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Smaller flavors&lt;/strong&gt; also improve security, because there are less services to attack and less services to update.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AND&lt;/strong&gt; smaller flavors are easy to transfer and store.&lt;/p&gt;

&lt;p&gt;Let see an example on the openjdk slim vs the jdk&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;☁  docker [master] ⚡  docker image ls | grep openjdk
openjdk                                slim                8b0ead3b8172   33 hours ago    407MB
openjdk                                18-jdk-alpine3.15   c89120dcca4c   3 days ago      329MB
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Other option:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;☁  docker [master] ⚡  docker image ls | grep python
python                                 latest              47ebea899258   20 hours ago    917MB
python                                 3.7.12-alpine3.15   a1034fd13493   3 days ago      41.8MB
☁  docker [master] ⚡ 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#comments"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Comments&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;This is not intended to be an extensive list of best practices, these represents the easiest steps you can start working with, on following entries i will write about more advanced topics like multistage builds and all that beautiful things that we can make.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>devops</category>
      <category>opensource</category>
      <category>bestpractices</category>
    </item>
    <item>
      <title>Rethinking Teamwork with Range</title>
      <author>Conor Bronsdon</author>
      <pubDate>Fri, 03 Dec 2021 20:04:53 +0000</pubDate>
      <link>https://dev.to/linearb/rethinking-teamwork-with-range-4on1</link>
      <guid>https://dev.to/linearb/rethinking-teamwork-with-range-4on1</guid>
      <description>&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/6hNM8sVOjSuew4iCn3AAQG"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;"&lt;em&gt;Where&lt;/em&gt; is the future of work" is almost as important a question as, "&lt;em&gt;What&lt;/em&gt; is the future of work?"&lt;/p&gt;

&lt;p&gt;That's why the minds behind &lt;a href="https://www.range.co/"&gt;Range&lt;/a&gt; are on a mission to keep teams connected, focused and productive no matter where they're working.&lt;/p&gt;

&lt;p&gt;Dan Pupius, CEO and co-founder of Range, joins us this week to discuss the need for better, more collaborative tools as work becomes increasingly team and project based. Dan believes software development was the vanguard to the 21st century work model: when a distinction between 'normal' work and hybrid work will no longer exist because all work will be hybrid work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  Episode Highlights Include:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Why current management models are designed around factories&lt;/li&gt;
&lt;li&gt;What is &lt;a href="https://linearb.io/blog/asynchronous-development/"&gt;hybrid&lt;/a&gt; work and is it the future?&lt;/li&gt;
&lt;li&gt;Hybrid work best practices&lt;/li&gt;
&lt;li&gt;How a sense of belonging helps teams move faster&lt;/li&gt;
&lt;li&gt;The reasons work has become increasingly team-based&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#join-the-dev-interrupted-community"&gt;
  &lt;/a&gt;
  Join the Dev Interrupted Community
&lt;/h2&gt;

&lt;p&gt;With over 2000 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.com/invite/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hfrPoujB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fly50ko28731rxpffgyw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hfrPoujB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fly50ko28731rxpffgyw.png" alt="https://discord.com/invite/devinterrupted" width="880" height="182"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>techtalks</category>
      <category>podcast</category>
      <category>management</category>
      <category>devops</category>
    </item>
  </channel>
</rss>
