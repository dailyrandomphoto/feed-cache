<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The 3 October Frontend tips about a11y and UX</title>
      <author>Stas Melnikov</author>
      <pubDate>Tue, 12 Oct 2021 16:35:24 +0000</pubDate>
      <link>https://dev.to/melnik909/the-3-october-frontend-tips-about-a11y-and-ux-11ba</link>
      <guid>https://dev.to/melnik909/the-3-october-frontend-tips-about-a11y-and-ux-11ba</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-bigger-clickable-area-the-better-userfriendly-interactive-elements"&gt;
  &lt;/a&gt;
  The bigger clickable area the better user-friendly interactive elements
&lt;/h2&gt;

&lt;p&gt;When we design interactive elements we have to think about how users will interact with them, in particular, a clickable area. &lt;/p&gt;

&lt;p&gt;That is important because users use different kinds of interactions. I often see designers and developers make a clickable area that is equal sizes of the element. &lt;/p&gt;

&lt;p&gt;It's nice for users who use a mouse. But that's a big problem for other users. If users have  a motor disability click on such an element is a nearly impossible task,&lt;/p&gt;

&lt;p&gt;Sometimes I can't hit on such elements when I tap on them using a finger. Also outline around elements has not enough contrast, if I focused on them using a keyboard,&lt;/p&gt;

&lt;p&gt;But we can solve these problems easily. Just we should design more largest clickable area that will not conflict with other elements around.   &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y7rDml1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJ3Ijo2MjB9/patreon-media/p/post/56937666/67caae32ca1a41859f94e25be24d8579/1.jpg%3Ftoken-time%3D1635292800%26token-hash%3DpVEa_BCCuXgCfixBPmjEiBrn72YcJP6BxUvZQ2j2Hg0%253D" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y7rDml1X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJ3Ijo2MjB9/patreon-media/p/post/56937666/67caae32ca1a41859f94e25be24d8579/1.jpg%3Ftoken-time%3D1635292800%26token-hash%3DpVEa_BCCuXgCfixBPmjEiBrn72YcJP6BxUvZQ2j2Hg0%253D" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-button-role-isnt-enough-for-an-accessible-interface"&gt;
  &lt;/a&gt;
  The button role isn't enough for an accessible interface
&lt;/h2&gt;

&lt;p&gt;There is a practice of overriding the button's default role. It's a bad practice already because authors of the ARIA in HTML standard prohibit overriding of default roles in section 2.1.&lt;/p&gt;

&lt;p&gt;But in addition, people think if they define role="button" this element becomes accessible. Yes, it's true for screen readers. But that's only one case!&lt;/p&gt;

&lt;p&gt;This "button" isn't accessible for a keyboard. Users can't focus on this element using the tab key. Also, this "button" isn't accessible for interaction using the enter or space keys.&lt;/p&gt;

&lt;p&gt;So if you want to define role="button" don't do that. Just use the button element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Go&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- or --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Go&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;you can use it instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Go&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-arialabelledby-simplify-navigation-for-users-of-screen-readers"&gt;
  &lt;/a&gt;
  The aria-labelledby simplify navigation for users of screen readers
&lt;/h2&gt;

&lt;p&gt;Any web interface has a lot of sections that help users without vision disabilities orient at the page. We just see headings and understand that is a section and also its sense.&lt;/p&gt;

&lt;p&gt;But some users can't see. They use the special quick navigation mode known as "Regions list" in screen readers. In this mode screen readers display all regions on the page. So users can go to any by some taps.&lt;/p&gt;

&lt;p&gt;Unfortunately, there is a problem that is section elements aren't displayed in this mode until we associate section heading with a section using the aria-labelledby attribute.&lt;/p&gt;

&lt;p&gt;So we have to add the id to the heading and add this as a value to the aria-labelledby attribute that is defined for the section element.  As a result, this section will be added to the regions list and users will know about it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;About me&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Lorem ipsum, dolor sit amet consectetur...&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;you can use it instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;aria-labelledby=&lt;/span&gt;&lt;span class="s"&gt;"about-me"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"about-me"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About me&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Lorem ipsum, dolor sit amet consectetur...&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;br&gt;
Also read &lt;a href="https://dev.to/melnik909/the-4-frontend-tips-for-improving-a11y-and-ux-539e"&gt;The 4 September Frontend tips about a11y and UX&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚ù§ Thank you so much, my sponsors: Ben Rinehart, Sergio Kagiema, Jesse Willard, Tanya Ten, Spiridon Konofaos. &lt;/p&gt;

&lt;p&gt;I wrote this article with donations of them because content creating is my full-time job. That's free because I want everyone to have the opportunity to learn how to make interfaces more user-friendly. &lt;/p&gt;

&lt;p&gt;I do that while I have donations from my sponsors. I'm looking for new sponsors who will help me. So if you want me to continue to write articles, please, support me on Patreon.&lt;br&gt;
&lt;a href="https://www.patreon.com/melnik909"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S0zkeHmS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://c10.patreonusercontent.com/3/eyJ3IjoxOTIwLCJ3ZSI6MX0%253D/patreon-media/p/campaign/2871133/09751df69a6d4a3990d4f6a2fb77340f/19.jpg%3Ftoken-time%3D1633305600%26token-hash%3DF2s9h-8VI8cZLJiiUalO1rewbCh6FPD_Qyepp1C7Aiw%253D" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.patreon.com/melnik909"&gt;Go to Patreon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üñê I help people fix accessibility mistakes. If you need help chat me on &lt;a href="mailto:melnik909@ya.ru"&gt;melnik909@ya.ru&lt;/a&gt; or dev.to direct. Please, specify the subject of the email "Stas, I need help"&lt;/p&gt;

&lt;p&gt;üëÄ Friends, I tell stories from my career on Substack. Join &lt;a href="https://stasmelnikov.substack.com"&gt;my free newsletter&lt;/a&gt;, if you're interested in my background or you want to get my updates first&lt;/p&gt;

</description>
      <category>css</category>
      <category>a11y</category>
      <category>ux</category>
      <category>html</category>
    </item>
    <item>
      <title>JavaScript Game Dev | Sprite Animations with Keyboard Input and a Halloween Theme
</title>
      <author>CodingWith-Adam</author>
      <pubDate>Tue, 12 Oct 2021 16:03:45 +0000</pubDate>
      <link>https://dev.to/codingwithadam/javascript-game-dev-sprite-animations-with-keyboard-input-and-a-halloween-theme-1gko</link>
      <guid>https://dev.to/codingwithadam/javascript-game-dev-sprite-animations-with-keyboard-input-and-a-halloween-theme-1gko</guid>
      <description>&lt;p&gt;In this exciting tutorial we're going to learn how to animate using a series of images on a html canvas for a game. The code that we will write is going to be super clean and well architected. No Game development frameworks were used in this tutorial!&lt;/p&gt;

&lt;p&gt;Our player will have the following animations: idle, walk, run, jump and a death animation.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yTlmOpW6kOc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What HTML tag do you use for Sarcasm?</title>
      <author>Timothy Foster</author>
      <pubDate>Tue, 12 Oct 2021 16:00:32 +0000</pubDate>
      <link>https://dev.to/auroratide/what-html-tag-do-you-use-for-sarcasm-48he</link>
      <guid>https://dev.to/auroratide/what-html-tag-do-you-use-for-sarcasm-48he</guid>
      <description>&lt;p&gt;Ah yes, sarcasm, the &lt;em&gt;pinnacle&lt;/em&gt; of human language. Life would be so &lt;em&gt;incredibly&lt;/em&gt; dull without it.&lt;/p&gt;

&lt;p&gt;And yet, despite sarcasm's profound influence on both oral and written conversation, we don't have a way to denote it in text! I mean, at least in person you can roll your eyes or change your tone to indicate some witty derision. But text? It's just neutral words on a page. We can't even use code to properly mark something as sarcastic!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Or &lt;em&gt;can&lt;/em&gt; we?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#cant-we-use-punctuation"&gt;Can't we use punctuation‚∏Æ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#beyond-the-period"&gt;Beyond the period üßê&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#huh-textual-punctuation-ltsarcasmgt"&gt;Huh, textual punctuation? &amp;lt;/sarcasm&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ltsarcasmgt-is-official"&gt;&amp;lt;/sarcasm&amp;gt; is official?!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#html-tags-are-like-knives"&gt;HTML Tags are like Knives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#tagging-sarcasm-with-html"&gt;Tagging Sarcasm with HTML&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-ltigt-tag"&gt;The... &amp;lt;i&amp;gt; Tag?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#emulating-verbal-cues"&gt;&lt;em&gt;Em&lt;/em&gt;ulating Verbal Cues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#but-dont-use-ltqgt"&gt;But don't use &amp;lt;q&amp;gt;!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#sooo-where-does-this-leave-us"&gt;Sooo... where does this leave us?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cant-we-use-punctuation"&gt;
  &lt;/a&gt;
  Can't we use punctuation‚∏Æ
&lt;/h2&gt;

&lt;p&gt;Do you enjoy lemonade on a hot summer day. I know I sure do?&lt;/p&gt;

&lt;p&gt;...Is it just me, or is something &lt;em&gt;off&lt;/em&gt; about those two sentences‚∏Æ&lt;/p&gt;

&lt;p&gt;Sorry, that was meant to be a rhetorical question! You could tell because I used the &lt;b&gt;percontation point&lt;/b&gt;, that backwards question mark thing. It was invented in the 1500s specifically for questions not meant to be answered. You don't really see it &lt;del&gt;a lot&lt;/del&gt; ever nowadays though, as it fell out of favor a long time ago.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2nPL2vQn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/by9b6rlfoacma6qhlf7a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2nPL2vQn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/by9b6rlfoacma6qhlf7a.png" alt="A backwards question mark"&gt;&lt;/a&gt;&lt;p&gt;The Percontation Point sure looks funky.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;Anyways, those first couple sentences feel wrong because I used unexpected punctuation. In a way, our periods, exclamation points, and question marks convey &lt;em&gt;tone&lt;/em&gt;, namely a neutral, excited, and questioning tone respectively.&lt;/p&gt;

&lt;p&gt;So if punctuation makes words sound exciting, how about punctuation for making something sound sarcastic?&lt;/p&gt;

&lt;p&gt;And people have tried that! Let me introduce you to...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WPiwEeKj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efbyohr3ytxophafcsj2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WPiwEeKj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efbyohr3ytxophafcsj2.png" alt="Four punctuation points in a row."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The point d'ironie (1899)&lt;/li&gt;
&lt;li&gt;The irony point (1966)&lt;/li&gt;
&lt;li&gt;The ironieteken (2007)&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://www.sarcmark.com/"&gt;SarkMark&lt;/a&gt;&lt;sup&gt;TM&lt;/sup&gt; (2010, and yes... it's even trademarked)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And of course, none of these ever caught on. Looks like we're stuck with just three ways to end a sentence, &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, or &lt;code&gt;!&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Except...&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xTdQEBHC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qy9vtnyybfc9j2qkyk8p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xTdQEBHC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qy9vtnyybfc9j2qkyk8p.png" alt="What if I told you we have hundreds of punctuation marks?"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#beyond-the-period"&gt;
  &lt;/a&gt;
  Beyond the period üßê
&lt;/h2&gt;

&lt;p&gt;The web has inspired written (typed?) language to adapt in fascinating ways, not the least of which is the advent of &lt;strong&gt;emoji&lt;/strong&gt;. Text loses facial cues, so... let's just add faces to text!&lt;/p&gt;

&lt;p&gt;End a sentence with an emoji and suddenly the words have a voice üòä&lt;/p&gt;

&lt;p&gt;Let's see how emoji changes one simple sentence...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;That was a good joke ü§£&lt;/li&gt;
&lt;li&gt;That was a good joke üëè&lt;/li&gt;
&lt;li&gt;That was a good joke üôÉ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first two seem sincere in their praise, albeit in different ways. That last one, though, sounds a bit... &lt;em&gt;sarcastic&lt;/em&gt; ü§î&lt;/p&gt;

&lt;p&gt;So in a way, emoji used this way can be thought of &lt;em&gt;like&lt;/em&gt; punctuation, giving sentences a very wide variety of tones you'd otherwise only be able to pick up in person.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wTu1UIX---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmgig4lnonyf87rtc558.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wTu1UIX---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmgig4lnonyf87rtc558.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But maybe a yellow face isn't appropriate or possible where you want to make your snide comment. Is there a way to use &lt;em&gt;just text&lt;/em&gt; as punctuation?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#huh-textual-punctuation-ltsarcasmgt"&gt;
  &lt;/a&gt;
  Huh, textual punctuation? &amp;lt;/sarcasm&amp;gt;
&lt;/h2&gt;

&lt;p&gt;Using text as punctuation may sound a bit silly at first, but people have (and still do) actually do this for sarcasm! Peruse the internet long enough and you might have seen people write sentences like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;John Doe is a brilliant politician &amp;lt;/sarcasm&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That &lt;a href="https://www.urbandictionary.com/define.php?term=%3C%2Fsarcasm%3E"&gt;&amp;lt;/sarcasm&amp;gt;&lt;/a&gt; bit denotes sarcasm (clearly). And yes, I &lt;em&gt;did&lt;/em&gt; just link Urban Dictionary as a reference &amp;lt;/sarcasm&amp;gt;.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Nowadays, it's usually shortened to just &lt;code&gt;/s&lt;/code&gt;.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;So where did such a funny looking thing come from anyway?&lt;/p&gt;

&lt;p&gt;Well, it turns out to be a bit of a &lt;strong&gt;code joke&lt;/strong&gt;! Websites are coded (in part) using a language called Hypertext Markup Language (HTML). HTML gives pages structure, determining whether a block of text is a paragraph, or a heading, or some other thing. This is done using &lt;b&gt;tags&lt;/b&gt;; for example, the bolded "code joke" from the earlier sentence uses the &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; tag, which indicates it is an &lt;em&gt;important&lt;/em&gt; phrase.&lt;/p&gt;

&lt;p&gt;A web author would code it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;It is a &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;code joke&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every start tag is paired with an end tag, so the &lt;code&gt;&amp;lt;/strong&amp;gt;&lt;/code&gt; there indicates the end of the important text. &lt;/p&gt;

&lt;p&gt;And while &lt;code&gt;&amp;lt;sarcasm&amp;gt;&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; a real HTML tag, people started using "&amp;lt;/sarcasm&amp;gt;" to indicate the end of a sarcastic phrase!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Wait wait wait&lt;/em&gt;, did I say it wasn't a real tag? Let me correct myself real quick...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WhlbFJr8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nsm37wxx5qqjocj2aj6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WhlbFJr8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nsm37wxx5qqjocj2aj6.gif" alt="A man quickly flips through a book."&gt;&lt;/a&gt;&lt;p&gt;&lt;a href="https://tenor.com/view/book-confusion-huh-what-read-gif-16432979"&gt;Book Confusion&lt;/a&gt; by &lt;a href="https://tenor.com"&gt;tenor.com&lt;/a&gt;&lt;/p&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ltsarcasmgt-is-official"&gt;
  &lt;/a&gt;
  &amp;lt;/sarcasm&amp;gt; is official?!
&lt;/h2&gt;

&lt;p&gt;Funnily enough, &lt;code&gt;&amp;lt;/sarcasm&amp;gt;&lt;/code&gt; is in the &lt;em&gt;&lt;a href="https://html.spec.whatwg.org"&gt;official HTML rulebook&lt;/a&gt;&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;All the way down in &lt;a href="https://html.spec.whatwg.org/#parsing-main-inbody"&gt;section 13.2.6.4.7&lt;/a&gt; is a little blurb telling browsers what to do if they encounter &lt;code&gt;&amp;lt;/sarcasm&amp;gt;&lt;/code&gt; in code:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[When handling a token with] An end tag whose tag name is "sarcasm": Take a deep breath, then act as described in the "any other end tag" entry below.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ironically, the instruction itself is rather sarcastic. But perhaps disappointingly, this is saying there's nothing special about the sarcasm end tag, and it should be treated like everything else. In other words, it's just a jab at the historical use of the meme.&lt;/p&gt;

&lt;p&gt;And besides, this just the &lt;em&gt;end&lt;/em&gt; tag; the handbook has nothing for a start tag &lt;code&gt;&amp;lt;sarcasm&amp;gt;&lt;/code&gt;, and every &lt;em&gt;real&lt;/em&gt; HTML element has a start tag.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gsCwvnl2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vg1rmeombu34r5igzbzs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gsCwvnl2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vg1rmeombu34r5igzbzs.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hmm, speaking of &lt;em&gt;real&lt;/em&gt; HTML elements... above we saw that &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; was used to mark text as being very important, and yet it wasn't &lt;em&gt;named&lt;/em&gt; &lt;code&gt;&amp;lt;important&amp;gt;&lt;/code&gt;. So, even if there's not an HTML element &lt;em&gt;named&lt;/em&gt; &lt;code&gt;&amp;lt;sarcasm&amp;gt;&lt;/code&gt;, is it possible for there to be something we could &lt;em&gt;use&lt;/em&gt; for sarcasm?&lt;/p&gt;

&lt;p&gt;In other words, &lt;strong&gt;is there a way to denote sarcasm... with code?!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-tags-are-like-knives"&gt;
  &lt;/a&gt;
  HTML Tags are like Knives
&lt;/h2&gt;

&lt;p&gt;Did you know that some knives have holes in them?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WVHp5kDz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gq0i9x90wtkyvtww4hz9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WVHp5kDz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gq0i9x90wtkyvtww4hz9.png" alt="A knife with three large holes on the blade."&gt;&lt;/a&gt;&lt;p&gt;A &lt;a href="https://www.cutco.com/products/product.jsp?item=traditional-cheese-knife"&gt;Cutco Cheese Knife&lt;/a&gt;&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;Those holes aren't there to be trendy. It turns out a knife like this is designed specifically for cutting &lt;em&gt;cheese&lt;/em&gt;. I dunno if you're like me and just cut cheese with a normal knife, but sometimes when I do that the cheese sticks to the blade. The holes on a cheese knife prevent that stickage, allowing for a cleaner, far more exquisite cut.&lt;/p&gt;

&lt;p&gt;Indeed, cooking is an advanced enough field that it has a specific knife for practically any conceivable purpose...&lt;/p&gt;

&lt;p&gt;...kinda like HTML tags! The &lt;a href="https://html.spec.whatwg.org"&gt;official HTML rulebook&lt;/a&gt; lists a myriad of tags, each with a specific purpose in mind.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bbZnceoI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dfcc7dyhhu4pv2f94bo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bbZnceoI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dfcc7dyhhu4pv2f94bo.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See, HTML tags impart meaning, or &lt;strong&gt;semantics&lt;/strong&gt;, to text they annotate. Here are some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; indicates that the text is important, serious, or urgent.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;blockquote&amp;gt;&lt;/code&gt; is used for text that is a direct quote from somewhere else.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; denotes the main title of the web page. As a side effect, it also usually makes the title visibly larger.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because each tag has specific semantics, it's possible to misuse them. Just as how I shouldn't use a butter knife to cut boned meat, a web author would not use an &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag just to make some text big. The &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag is &lt;em&gt;only&lt;/em&gt; for the page's title, so to make some different text big the author would need to use something else.&lt;/p&gt;

&lt;p&gt;So our question, really, is whether or not the glorious HTML handbook has a tag whose semantics include sarcasm!&lt;/p&gt;

&lt;p&gt;
  &lt;small&gt;Why would we want this anyway?&lt;/small&gt;
  &lt;p&gt;&lt;small&gt;&lt;a href="https://users.soe.ucsc.edu/~maw/papers/kbs_2014_justo.pdf"&gt;Studies with computers&lt;/a&gt; have shown that machines are not great at identifying sarcasm without significant help. Using code to annotate things like importance, emphasis, and sarcasm can help machines.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;One practical use is with screen readers, which read web pages aloud to those who cannot see the page. Maybe there's a future where if text is marked as sarcastic, the screen reader can indicate as much by fluctuating its tone.&lt;/small&gt;&lt;/p&gt; 


&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#tagging-sarcasm-with-html"&gt;
  &lt;/a&gt;
  Tagging Sarcasm with HTML
&lt;/h2&gt;

&lt;p&gt;Let's say your friend told a pretty bad pun, and somehow your able to respond with HTML code. You want to say, "That was perfect." Problem is, that phrase on its own is very ambiguous. If only you could mark it somehow...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;SOMETHING&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;That was perfect.&lt;span class="nt"&gt;&amp;lt;/SOMETHING&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-ltigt-tag"&gt;
  &lt;/a&gt;
  The... &amp;lt;i&amp;gt; Tag?
&lt;/h3&gt;

&lt;p&gt;Well, there are dozens upon dozens of HTML tags, and &lt;em&gt;none&lt;/em&gt; of them are specifically for sarcasm. How perfect üôÉ&lt;/p&gt;

&lt;p&gt;The one tag that comes the closest is the &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; tag. It has many uses, one of them being used for text that is in an &lt;q&gt;alternate voice or mood&lt;/q&gt;. In a way, sarcasm &lt;em&gt;is&lt;/em&gt; a different mood from the rest of the text, so lacking an alternative...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sarcasm"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;That was perfect.&lt;span class="nt"&gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;small&gt;It is recommended to use &lt;code&gt;class&lt;/code&gt; to specify why the &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; tag is being used, since the tag can be used for many different things.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;There's one &lt;strong&gt;very big problem&lt;/strong&gt; with this idea, though.&lt;/p&gt;

&lt;p&gt;By default, the &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; tag &lt;em&gt;italicizes&lt;/em&gt; text, and by convention, italic text is interpretted as verbal stress, not sarcasm. It is possible to undo the italics with Cascading Style Sheets (CSS), a web technology that lets authors adjust how things look. But doing that leaves us back at the beginning: "That was perfect," with no indication of sarcasm!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UCZh2M12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vstu0xzskb2zjgwyzaqc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UCZh2M12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vstu0xzskb2zjgwyzaqc.gif" alt="A man dramatically rolls his eyes."&gt;&lt;/a&gt;&lt;p&gt;&lt;a href="https://tenor.com/view/house-md-gregory-house-ugh-whatever-eye-roll-gif-7380271"&gt;Gregory House&lt;/a&gt; by &lt;a href="https://tenor.com"&gt;tenor.com&lt;/a&gt;&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;Even though the text is &lt;em&gt;semantically&lt;/em&gt; tagged as being sarcastic, it does not outwardly present itself that way, which is arguably &lt;em&gt;less&lt;/em&gt; than useless. If only there were &lt;em&gt;some&lt;/em&gt; other way to make something appear sarcastic...&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Textual semantics is usually tied with conversations about &lt;b&gt;accessibility&lt;/b&gt;, making pages work for abled and disabled people alike. By adding semantics to a page, it becomes more usable by people who cannot otherwise see the page.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Thing is, accessibility goes both ways. If a screen reader announces text as a title to a non-sighted person, then that text better &lt;em&gt;appear&lt;/em&gt; like a title to sighted people as well!&lt;/small&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#emulating-verbal-cues"&gt;
  &lt;/a&gt;
  &lt;em&gt;Em&lt;/em&gt;ulating Verbal Cues
&lt;/h3&gt;

&lt;p&gt;Sarcasm gets lost in text due to losing certain cues, like body language and tone. We saw that emoji are kind of able to simulate facial language, so is there a way to simulate &lt;em&gt;tone&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;In fact, there &lt;em&gt;is&lt;/em&gt;, and I've been using it all throughout this post!&lt;/p&gt;

&lt;p&gt;All of the &lt;strong&gt;&lt;em&gt;italic text&lt;/em&gt;&lt;/strong&gt; hints at some kind of verbal stress. In HTML code, this is accomplished using the &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; tag, and according to the rulebook, its purpose is to &lt;em&gt;em&lt;/em&gt;phasize words and phrases in order to change the overall meaning of the sentence.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;This &lt;span class="nt"&gt;&amp;lt;em&amp;gt;&lt;/span&gt;emphasizes&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&lt;/span&gt; the word.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example, the following two sentences are exactly the same, but because a different word is emphasized in each, they imply different situations.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"I did not eat the &lt;em&gt;cookie&lt;/em&gt;." - implying something else was eaten&lt;/li&gt;
&lt;li&gt;"I did not &lt;em&gt;eat&lt;/em&gt; the cookie." - implying something else happened to the cookie&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6EzqaXhR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njzvzzx8s186f52e4iz1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6EzqaXhR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njzvzzx8s186f52e4iz1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So let's get back to our "That was perfect" phrase. Now equipped with the glorious power of &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;, we can do two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add &lt;em&gt;word cues&lt;/em&gt;, extra words that suggest a deeper meaning&lt;/li&gt;
&lt;li&gt;Add &lt;em&gt;verbal stress&lt;/em&gt; to sharpen the phrase's sarcasm&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
    &lt;p&gt;Wow, &lt;em&gt;that&lt;/em&gt; was &lt;em&gt;just&lt;/em&gt; perfect.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;Wow, &lt;span class="nt"&gt;&amp;lt;em&amp;gt;&lt;/span&gt;that&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&lt;/span&gt; was &lt;span class="nt"&gt;&amp;lt;em&amp;gt;&lt;/span&gt;just&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&lt;/span&gt; perfect.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;
  &lt;small&gt;Can't I use &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; instead of &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; for italics?&lt;/small&gt;
  &lt;p&gt;&lt;small&gt;&lt;strong&gt;No!&lt;/strong&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Even though both tags result in italic text, they have different purposes. The &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; tag is for an alternate mood, which is why it is appropriate to use to tag an entire sentence as generally sarcastic. The &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; tag is used for verbal emphasis, which is why it is better for modifying key words to simulate speaking a phrase sarcastically.&lt;/small&gt;&lt;/p&gt; 

&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-dont-use-ltqgt"&gt;
  &lt;/a&gt;
  But don't use &amp;lt;q&amp;gt;!
&lt;/h3&gt;

&lt;p&gt;There's one last HTML element worth talking about: &lt;code&gt;&amp;lt;q&amp;gt;&lt;/code&gt;! It represents text that is &lt;q&gt;quoted from another source&lt;/q&gt;, and has the effect of automatically adding quotation marks.&lt;/p&gt;

&lt;p&gt;Sarcasm is often associated with so-called "air quotes", but the &lt;code&gt;&amp;lt;q&amp;gt;&lt;/code&gt; element is &lt;em&gt;only&lt;/em&gt; for quoting some other thing. In fact, the HTML handbook goes so far to say &lt;q&gt;it is inappropriate to use the q element for marking up sarcastic statements&lt;/q&gt;!&lt;/p&gt;

&lt;p&gt;So yeah, don't use it üôÉ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sooo-where-does-this-leave-us"&gt;
  &lt;/a&gt;
  Sooo... where does this leave us?
&lt;/h2&gt;

&lt;p&gt;Text loses both verbal and non-verbal cues, making it harder to detect sarcasm. Oh no!&lt;/p&gt;

&lt;p&gt;But when there's a will, there's a way!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Recreate facial cues with emoji üôÉ&lt;/li&gt;
&lt;li&gt;Wittily use textual convention to your advantage &amp;lt;/sarcasm&amp;gt;&lt;/li&gt;
&lt;li&gt;In HTML code, tag a sentence as sarcastic with the &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; tag.&lt;/li&gt;
&lt;li&gt;Or, strategically stress words with italics and &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So thousands of words later, I guess I should end by asking one last question.&lt;/p&gt;

&lt;p&gt;Was this ever &lt;em&gt;really&lt;/em&gt; a problem to begin with‚∏Æ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.quickanddirtytips.com/education/grammar/how-to-show-sarcasm-in-text"&gt;How to show sarcasm in text&lt;/a&gt; - Sarah Peters&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://en.wikipedia.org/wiki/Irony_punctuation"&gt;Irony Punctuation&lt;/a&gt; - Wikipedia&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://web-docs.stern.nyu.edu/pa/kruger_email_ego.pdf"&gt;Egocentrism Over E-Mail&lt;/a&gt; - Kruger et al&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://users.soe.ucsc.edu/~maw/papers/kbs_2014_justo.pdf"&gt;Extracting relevant knowledge for the detection of sarcasm&lt;/a&gt; - Justo et al&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://html.spec.whatwg.org"&gt;HTML Living Standard&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://html.spec.whatwg.org/#the-i-element"&gt;The i element&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://html.spec.whatwg.org/#the-em-element"&gt;The em element&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://html.spec.whatwg.org/#the-q-element"&gt;The q element&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>If You're Reading This, Contribute to Forem</title>
      <author>Rizel Scarlett</author>
      <pubDate>Tue, 12 Oct 2021 15:58:09 +0000</pubDate>
      <link>https://dev.to/github/if-you-re-reading-this-contribute-to-forem-368o</link>
      <guid>https://dev.to/github/if-you-re-reading-this-contribute-to-forem-368o</guid>
      <description>&lt;p&gt;&lt;em&gt;(I hope you enjoyed the title. It's a reference to Canadian Rapper Drake's 2015 mixtape: If You're Reading This, It's Too Late.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Happy Hacktober! 'Tis the season to contribute. If you're excited about contributing to open source, but you're not sure which project you should contribute to, we'll be posting about tips, tricks, and extraordinary projects looking for contributors all month long.&lt;/p&gt;

&lt;p&gt;Are you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Looking to contribute to an open source project this Hacktober?&lt;/li&gt;
&lt;li&gt;Reading this article on DEV, which Forem powers?&lt;/li&gt;
&lt;li&gt;Passionate about fostering developer communities?&lt;/li&gt;
&lt;li&gt;Interested in one day building your own community?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If &lt;strong&gt;any&lt;/strong&gt; of the above sounds like you, I suggest considering contributing to Forem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Forem?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CEO Ben Halpern describes Forem as an "Open source software for building communities.  Communities for your peers, customers, fanbases, families, friends, and any other time and space where people need to come together to be part of a collective." Community builders can use Forem to create their own independent web application equipped with standalone databases, authentication mechanisms, configuration, dedicated URL, and more. Basically, with Forem, community builders can create and scale a community with all the same features as DEV, and community members can more easily keep up with content. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Communities powered by Forem&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I'm currently active on &lt;a href="https://community.codenewbie.org"&gt;Code Newbie Community&lt;/a&gt;, &lt;a href="https://community.devocate.com/"&gt;Devocate&lt;/a&gt;, and &lt;a href="http://dev.to"&gt;Dev&lt;/a&gt; -- all built with Forem. Here's a list of community platforms built by Forem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code Newbie Community&lt;/li&gt;
&lt;li&gt;Dev&lt;/li&gt;
&lt;li&gt;The Relicans&lt;/li&gt;
&lt;li&gt;Fashion Page Community&lt;/li&gt;
&lt;li&gt;This MMA Life&lt;/li&gt;
&lt;li&gt;The Elastic Guru&lt;/li&gt;
&lt;li&gt;Web Monetization Community&lt;/li&gt;
&lt;li&gt;Snyk Community&lt;/li&gt;
&lt;li&gt;COSS Community&lt;/li&gt;
&lt;li&gt;The Community Club&lt;/li&gt;
&lt;li&gt;Devocate&lt;/li&gt;
&lt;li&gt;Crypto Punk&lt;/li&gt;
&lt;li&gt;Flow State&lt;/li&gt;
&lt;li&gt;1Vibe&lt;/li&gt;
&lt;li&gt;Hometechnica Community &lt;/li&gt;
&lt;li&gt;VS Code Tips&lt;/li&gt;
&lt;li&gt;Forem.dev&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can learn more about each of these communities &lt;a href="https://discover.forem.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How it's made&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On the backend, Forem is leveraging Ruby on Rails. On the frontend, the Forem team is transitioning to a Preact-first frontend. And if there are any SQL fans out there, like me, Forem uses PostgreSQL for its database. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to contribute&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You probably benefit from Forem in some way, so why not contribute? &lt;/p&gt;

&lt;p&gt;If Forem has piqued your interest, take a look at the&lt;a href="https://github.com/forem/forem"&gt; repository&lt;/a&gt; and &lt;a href="https://github.com/forem/forem/blob/main/CONTRIBUTING.md"&gt;Contributing.md&lt;/a&gt;. Currently, the repo has approximately 415 open issues, so get started and pick up an issue today!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reminder:&lt;/strong&gt; This &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest&lt;/a&gt;, you can receive swag (or have a tree planted in your name) as a reward for making pull requests to projects participating in &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest&lt;/a&gt;. Hint: Forem is participating in &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest&lt;/a&gt; and is welcoming contributions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I'm nervous about contributing because I'm not familiar with the technologies!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Don't be nervous. The contributors and maintainers are friendly and excited to help you learn. The Forem team ensures the community abides by its &lt;a href="https://dev.to/code-of-conduct"&gt;Code of Conduct&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;You can learn and still make a significant impact by contributing to the documentation. The full contributing guidelines exist &lt;a href="https://developers.forem.com/contributing-guide/forem/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The cool thing about contributing to open source is that you can use the experience as an opportunity to learn and get familiar with new technologies, so it's okay if you don't know Preact! This is your chance to learn it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to learn more about Forem, check out our &lt;a href="https://www.youtube.com/watch?v=YugO6TPC_tc"&gt;Open Source Friday stream&lt;/a&gt; featuring Forem's Co-CEO Ben Halpern and GitHub's Director of Developer Advocacy, Brian Douglas.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/YugO6TPC_tc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>opensource</category>
      <category>github</category>
      <category>forem</category>
    </item>
    <item>
      <title>How I rebuilt my Angular blog and became an Astronaut üöÄ</title>
      <author>Brandon Roberts</author>
      <pubDate>Tue, 12 Oct 2021 15:45:25 +0000</pubDate>
      <link>https://dev.to/brandontroberts/how-i-rebuilt-my-angular-blog-and-became-an-astronaut-2ali</link>
      <guid>https://dev.to/brandontroberts/how-i-rebuilt-my-angular-blog-and-became-an-astronaut-2ali</guid>
      <description>&lt;p&gt;Building your own blogging platform is no small feat. From picking the stack you want to use, along with CSS solutions, to how you're going to organize your content are all the decisions that you have to make. I have gone down this path a few times with my own blog built with just Angular, and Angular and Scully, and hosted solutions like Dev.to. I continue to want something with low-friction so that I could get my thoughts out and be able to write blog posts more quickly about things that I've learned along the way or things that I'm tinkering with. This post is how I started on a different path, ended up rebuilding my blog and became an Astronaut üöÄ.&lt;/p&gt;

&lt;p&gt;TL;DR - &lt;a href="https://github.com/brandonroberts/astro-blog"&gt;GitHub Repo&lt;/a&gt; for my blog rebuilt with Astro.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#backstory"&gt;
  &lt;/a&gt;
  Backstory
&lt;/h2&gt;

&lt;p&gt;My friend and colleague &lt;a href="https://twitter.com/juristr"&gt;Juri&lt;/a&gt; just finished a blog post series on &lt;a href="https://juristr.com/blog/2021/06/create-nextjs-webapp-nx/"&gt;building a blog with Next.JS&lt;/a&gt;, so I was all but ready to rebuild my Angular blog using the same stack. But as with all things in tech, when something else comes along the way we want to take a look and see what can be done with that also. Along my Twitter feed, I noticed a relatively new static site builder named &lt;a href="https://astro.build"&gt;Astro&lt;/a&gt; that piqued my interest. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#astro"&gt;
  &lt;/a&gt;
  Astro
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aFYkyJzj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pb4nn9js04tb1kn299jb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aFYkyJzj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pb4nn9js04tb1kn299jb.jpg" alt="Astro Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Astro is a new and different type of approach to building a static site. It ships &lt;em&gt;zero&lt;/em&gt; JavaScript by default, has its own notion of components, and one of the most interesting parts of it is that you can bring your own framework. &lt;/p&gt;

&lt;p&gt;After reading the docs, I &lt;em&gt;originally&lt;/em&gt; sought out to build an Astro renderer for Angular components. I made some progress there, but that‚Äôs a digression for another post. While reading the docs, most of what I needed to rebuild my relatively simple blog was supported by Astro, so I decided to try it out. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-current-stack"&gt;
  &lt;/a&gt;
  My Current Stack
&lt;/h3&gt;

&lt;p&gt;Before getting started, this is what my current blog platform stack looks like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://angular.io"&gt;Angular&lt;/a&gt; - Frontend framework for web development&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/angular-component/router"&gt;Angular Component Router&lt;/a&gt; - My declarative router for Angular&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://firebase.com"&gt;Firebase&lt;/a&gt; - Hosting solution for websites&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://prismjs.com"&gt;Prism&lt;/a&gt; - A JavaScript library that provides syntax highlighting for code snippets &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/PrismJS/prism-themes"&gt;Prism Themes&lt;/a&gt; - Themes for syntax highlighting&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/reading-time"&gt;Reading Time&lt;/a&gt; - Calculates the minutes it takes to read the blog post&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://scully.io"&gt;Scully&lt;/a&gt; - A JAMstack static site builder for Angular apps w/Markdown support&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://tailwindcss.com"&gt;Tailwind CSS&lt;/a&gt; - A utility-first CSS framework&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Currently, no interactive JavaScript functionality is present. Scully is the main tool behind the stack. At a high level, I build my Angular application first. Scully then takes the built Angular application and renders each page statically using Puppeteer underneath the hood.&lt;/p&gt;

&lt;p&gt;So why switch? Mainly for two reasons.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I wanted explore building the same site without shipping any JavaScript.&lt;/li&gt;
&lt;li&gt;I wanted to have a better workflow for building the components that make up the site without having to rebuild the application and content every time I make a change.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let's get started with Astro.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#getting-started-with-astro"&gt;
  &lt;/a&gt;
  Getting Started with Astro
&lt;/h2&gt;

&lt;p&gt;To create a new project with Astro, I followed the &lt;a href="https://docs.astro.build/quick-start"&gt;Quickstart&lt;/a&gt; from the docs to create a new project.&lt;/p&gt;

&lt;p&gt;Open a terminal, create the directory for the project, and navigate into that directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;astro-blog &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;astro-blog
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, initialize the project with Astro&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init astro
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;I chose the &lt;code&gt;Generic&lt;/code&gt; site.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Install the project dependencies&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the dev server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the site starts running, visit &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; in your browser to view the landing page.&lt;/p&gt;

&lt;p&gt;Next, I jumped into making components.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#astro-components-htmlbyoc-bring-your-own-components"&gt;
  &lt;/a&gt;
  Astro Components = HTML+BYOC (Bring Your Own Components)
&lt;/h2&gt;

&lt;p&gt;Astro introduces its own component syntax using the &lt;code&gt;.astro&lt;/code&gt; extension. Astro‚Äôs Component Syntax is a special HTML-like file format which Astro uses for templating. It looks and feels very familiar to people familiar with HTML or JSX.&lt;/p&gt;

&lt;p&gt;The first page I migrated was &lt;code&gt;/blog&lt;/code&gt;, which lists each blog post by title. I copied my markdown files into the &lt;code&gt;src/pages/blog/posts&lt;/code&gt; directory. I then created a &lt;code&gt;src/components/Posts.astro&lt;/code&gt; file to read the contents of those files to get the metadata from the Markdown file, or frontmatter. I then used the &lt;code&gt;Astro.fetchContent()&lt;/code&gt; method to read those files and list them in the content area below the code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;---&lt;/span&gt;
&lt;span class="c1"&gt;// Posts.astro&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;allPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Astro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetchContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../pages/blog/posts/*.md&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;allPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;allPosts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publishedDate&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publishedDate&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;valueOf&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;allPosts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;published&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;---&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text-2xl w-4/5"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"py-4"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/blog/posts/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text-gray-600"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text-sm"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publishedDate&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the snippet above, Astro let‚Äôs you embed code directly into the &lt;code&gt;.astro&lt;/code&gt; file enclosed in a block of three dashes. This is where you can bring in JSX style templates, along with React/Svelte/Vue/Lit/etc components for use in the template area, and use JavaScript/TypeScript code directly. The one caveat is that there is no type-checking a compile time.&lt;/p&gt;

&lt;p&gt;The area below the embedded code is your template. You can also embed &lt;code&gt;style&lt;/code&gt; and &lt;code&gt;script&lt;/code&gt; tags directly in the &lt;code&gt;.astro&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Posts.astro&lt;/code&gt; file is now a reusable component I can use within a page. &lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#using-tailwind"&gt;
  &lt;/a&gt;
  Using Tailwind
&lt;/h2&gt;

&lt;p&gt;Using Tailwind inside an Astro project is a matter of installing Tailwind, adding a Tailwind config, enabling the Tailwind config in the Astro config, and setting up a global css file to import it. I won‚Äôt rehash those instructions here, but you can reference them in the Astro docs for &lt;a href="https://docs.astro.build/guides/styling#-tailwind"&gt;setting up Tailwind&lt;/a&gt;.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#routing"&gt;
  &lt;/a&gt;
  Routing
&lt;/h2&gt;

&lt;p&gt;Astro uses file-based routing, which has really grown on me from seeing it in other React frameworks like Next.js, and Vue's Nuxt.js. To create a ‚Äúroute‚Äù, I created an &lt;code&gt;index.astro&lt;/code&gt; file inside the &lt;code&gt;src/pages/blog&lt;/code&gt; directory. &lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;src/pages/blog/index.astro&lt;/code&gt; file, I imported the &lt;code&gt;Posts&lt;/code&gt; component and drop it into the template.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;--------&lt;/span&gt;
&lt;span class="c1"&gt;// index.astro&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Posts&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../components/Posts.astro&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;--------&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Posts&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No configuration to update, no components to map, just following folder and file conventions. My custom declarative router? Nowhere to be found üò¢,  but that‚Äôs ok. Now when I navigate to &lt;a href="http://localhost:3000/blog"&gt;http://localhost:3000/blog&lt;/a&gt;, I see a listing of blog posts. &lt;/p&gt;

&lt;p&gt;Any file within the &lt;code&gt;src/pages&lt;/code&gt; directory with an &lt;code&gt;.astro&lt;/code&gt; or &lt;code&gt;.md&lt;/code&gt; extension is treated as a route. It also supports static routes, dynamic routes, 404 routes, along with named and rest parameters.&lt;/p&gt;

&lt;p&gt;For redirecting from &lt;code&gt;/&lt;/code&gt; to &lt;code&gt;/blog&lt;/code&gt;, I updated the &lt;code&gt;src/pages/index.astro&lt;/code&gt; to use a meta tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Brandon Roberts - Web Developer&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"refresh"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"0; URL=/blog"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#using-layouts-for-common-pages"&gt;
  &lt;/a&gt;
  Using Layouts for Common Pages
&lt;/h2&gt;

&lt;p&gt;The blog posts page is just a plain list of posts, and I will have other pages also, so next I needed to create a layout. A &lt;strong&gt;Layout&lt;/strong&gt; in Astro is a special type of &lt;code&gt;Component&lt;/code&gt; to help you share and reuse common layouts within the project.&lt;/p&gt;

&lt;p&gt;I created a &lt;code&gt;src/layouts/BaseLayout.astro&lt;/code&gt; file, and added some static HTML markup for structure&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// BaseLayout.astro&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;charset&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Brandon Roberts - Web Developer&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;base&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt;
      &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Brandon Roberts - Web Developer, Angular Team Member, NgRx Core Team, Open Source Project Maintainer"&lt;/span&gt;
    &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"keywords"&lt;/span&gt;
      &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Brandon Roberts, Blog, Web Development, Angular, HTML, CSS, JavaScript, TypeScript"&lt;/span&gt;
    &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"image/x-icon"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/favicon.ico"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt;
      &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.googleapis.com/css?family=Roboto:300,400,500"&lt;/span&gt;
      &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;
    &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt;
      &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.googleapis.com/icon?family=Material+Icons"&lt;/span&gt;
      &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;
    &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Astro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../styles/global.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;    
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex flex-grow justify-center min-h-screen p-4"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;BaseLayout&lt;/code&gt; includes the global styles setup with Tailwind.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Astro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../styles/global.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Astro.resolve()&lt;/code&gt; handles retrieving contents of files embedded in your templates.&lt;/p&gt;

&lt;p&gt;I updated the &lt;code&gt;src/pages/blog/index.astro&lt;/code&gt; component to use the &lt;code&gt;BaseLayout&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;--------&lt;/span&gt;
&lt;span class="c1"&gt;// index.astro&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;BaseLayout&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../layouts/BaseLayout.astro&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Posts&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../components/Posts.astro&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;--------&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BaseLayout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Posts&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;BaseLayout&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I also needed a layout for each blog post, so I created a &lt;code&gt;src/layouts/BlogPostLayout.astro&lt;/code&gt; with similar HTML structure for the blog posts, along with the title of the blog post, and the date it was published.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;--------&lt;/span&gt;
&lt;span class="c1"&gt;// BlogPostLayout.astro&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Astro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;--------&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;!--&lt;/span&gt; &lt;span class="na"&gt;excluded&lt;/span&gt; &lt;span class="na"&gt;for&lt;/span&gt; &lt;span class="na"&gt;brevity&lt;/span&gt; &lt;span class="err"&gt;--&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Astro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../styles/global.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Astro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../themes/prism-atom-dark.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;    
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex flex-grow justify-center min-h-screen"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;article&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"w-screen max-w-4xl p-8"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text-gray-600 text-2xl"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"font-light text-sm"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publishedDate&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;article&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Things to note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;a href="https://docs.astro.build/reference/api-reference"&gt;Astro&lt;/a&gt; object is global and provides information about the page, provided props, and so on.&lt;/li&gt;
&lt;li&gt;In order for the syntax highlighting from Prism to work, I copied the theme into the &lt;code&gt;src/themes&lt;/code&gt; directory and referenced it in the &lt;code&gt;BlogPostLayout&lt;/code&gt; markup.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;&amp;lt;slot/&amp;gt;&lt;/code&gt; is used to render the content from the markdown inside the layout.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that I have layouts for pages and posts, I needed to render the blog post content.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#using-markdown-for-page-content"&gt;
  &lt;/a&gt;
  Using Markdown for page content
&lt;/h2&gt;

&lt;p&gt;In Astro, markdown files are treated as plain text, and converted to HTML using &lt;a href="https://remark.js.org/"&gt;remark&lt;/a&gt; with syntax highlighting done using &lt;a href="https://prismjs.com/"&gt;Prism&lt;/a&gt; pre-enabled. In order to use the &lt;code&gt;BlogPostLayout.astro&lt;/code&gt; in my markdown files, I had to add the &lt;code&gt;layout&lt;/code&gt; property to the frontmatter in the markdown file. One example file looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// 2021-10-12-how-i-rebuilt-my-angular-blog-and-became-an-astronaut.md
--------
title: 'How I rebuilt my Angular blog and became an Astronaut'
description: 'I was ready to rebuild my blog with Next.JS
but then decided to take another approach'
published: true
slug: 2021-10-12-how-i-rebuilt-my-angular-blog-and-became-an-astronaut
publishedDate: '2021-10-12 02:00 PM CST'
layout: ../../../layouts/BlogPostLayout.astro
--------
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Astro also has a &lt;strong&gt;Markdown&lt;/strong&gt; component you can embed into your own components and layouts for rendering markdown content inline. Now when visiting a link to a blog post, it is displayed with the structure of the layout.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#additional-migrations-without-special-plugins"&gt;
  &lt;/a&gt;
  Additional migrations without special plugins
&lt;/h2&gt;

&lt;p&gt;There were a few things that Astro didn‚Äôt provide me out of the box, including: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Date formatting&lt;/li&gt;
&lt;li&gt;Reading time for blog posts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For date formatting, I installed the &lt;code&gt;date-fns&lt;/code&gt; npm package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;date-fns
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I used the &lt;code&gt;format&lt;/code&gt; function to give me a well-formatted date based on the &lt;code&gt;publishedDate&lt;/code&gt; from my markdown frontmatter. Read more about date-fns from their docs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="o"&gt;--------&lt;/span&gt;
&lt;span class="c1"&gt;// BlogPostLayout.astro&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;date-fns&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;--------&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To add reading time for blog posts, I installed the &lt;code&gt;reading-time&lt;/code&gt; npm package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;reading-time
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After I mported it, I used it to read the contents of the markdown source compiled by Astro. There global &lt;strong&gt;Astro&lt;/strong&gt; object provided the source of the markdown content for the blog post.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="o"&gt;--------&lt;/span&gt;
&lt;span class="c1"&gt;// BlogPostLayout.astro&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;date-fns&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;readingTime&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;reading-time&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Astro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;readingTime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;astro&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;--------&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;readingTime&lt;/code&gt; function can read the source content of the blog post to calculate the reading time. This gave me stats from the blog post in minutes to add to the template of the &lt;code&gt;BlogPostLayout.astro&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// // BlogPostLayout.astro&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex flex-grow justify-center min-h-screen"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;article&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"w-screen max-w-4xl p-8"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text-gray-600 text-2xl"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"font-light text-sm"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publishedDate&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MMMM dd, yyyy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      -
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;minutes&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;  &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;minutes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; min read
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;slot&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;article&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#build-and-deployment"&gt;
  &lt;/a&gt;
  Build and Deployment
&lt;/h2&gt;

&lt;p&gt;To build the website, I used the npm command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which runs Astro:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;astro build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This produces the statically built version of the site.I can also preview the statically built version with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run preview
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I‚Äôm currently using Firebase to host my site, so there were no real changes here for deployment. Other static site hosts such as Netlify, GitHub Pages, Vercel, Azure Static Websites, and others are &lt;a href="https://docs.astro.build/guides/deploy"&gt;all supported&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Not bad for a day‚Äôs work, right?&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#wrapup"&gt;
  &lt;/a&gt;
  Wrap-up
&lt;/h2&gt;

&lt;p&gt;After the changes, this is what my current new stack looks like.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://astro.build"&gt;Astro&lt;/a&gt; - Static site builder that includes Markdown, Prism, Routing, and more.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://date-fns.org/"&gt;date-fns&lt;/a&gt; - Modern functional library for working with dates.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://firebase.com"&gt;Firebase&lt;/a&gt; - Hosting solution for websites&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/PrismJS/prism-themes"&gt;Prism Themes&lt;/a&gt; - Themes for syntax highlighting&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/reading-time"&gt;Reading Time&lt;/a&gt; - Calculates the minutes it takes to read the blog post&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://tailwindcss.com"&gt;Tailwind CSS&lt;/a&gt; - A utility-first CSS framework&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the biggest things I gained was not having to rebuild my Angular application every time I made a change, and not having to rebuild all of my content when editing. If I‚Äôm working on a single blog post or page, only that page is built and served when I need it. Astro is still a work in progress, but I enjoy using it. I may need to add some interactivity to the site at some point, and I could do that with Astro‚Äôs support for integrating most frontend frameworks.&lt;/p&gt;

&lt;p&gt;You can visit my site at &lt;a href="https://brandonroberts.dev"&gt;https://brandonroberts.dev&lt;/a&gt; and  &lt;a href="https://github.com/brandonroberts/astro-blog"&gt;my GitHub repo&lt;/a&gt; to see the full source code for my blog. Feel free to send me PRs for CSS üòâ.&lt;/p&gt;

&lt;p&gt;So what do you think? Leave a comment and let me know your thoughts. &lt;/p&gt;

&lt;p&gt;Like this post? You can also follow me on &lt;a href="https://twitter.com/brandontroberts"&gt;Twitter&lt;/a&gt;, &lt;a href="https://youtube.com/brandonrobertsdev"&gt;YouTube&lt;/a&gt;, &lt;a href="https://twitch.tv/brandontroberts"&gt;Twitch&lt;/a&gt;, and &lt;a href="https://github.com/brandonroberts"&gt;GitHub&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>astro</category>
      <category>angular</category>
      <category>blogging</category>
      <category>jamstack</category>
    </item>
    <item>
      <title>How To Enable Real-Time Merge Conflict Detection in PhpStorm</title>
      <author>Agnieszka</author>
      <pubDate>Tue, 12 Oct 2021 15:38:05 +0000</pubDate>
      <link>https://dev.to/gitlive/how-to-enable-real-time-merge-conflict-detection-in-phpstorm-1ki2</link>
      <guid>https://dev.to/gitlive/how-to-enable-real-time-merge-conflict-detection-in-phpstorm-1ki2</guid>
      <description>&lt;p&gt;Ah, the dreaded &lt;em&gt;resolve conflicts&lt;/em&gt; popup. You've finished crafting the perfect code, just a quick merge in of master (ahem, &lt;em&gt;main&lt;/em&gt;) before you submit your PR, and then... üí•&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KnrfzObL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631105453895/YWXZ2S8AY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnrfzObL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631105453895/YWXZ2S8AY.png" alt="img-1-scaled.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If only there was an early warning system for merge conflicts so you could be better prepared or even avoid the conflicts in the first place I hear you say? Well if you are a PhpStorm user today is your lucky day!&lt;/p&gt;

&lt;p&gt;Firstly, you'll need to install and set up &lt;a href="https://plugins.jetbrains.com/plugin/11955-gitlive"&gt;GitLive&lt;/a&gt;. Then if you right click the gutter on PhpStorm, you will see the option to ‚ÄúShow Other's Changes‚Äù.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7SvJwkz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631105494603/8m0GvqeVw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7SvJwkz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631105494603/8m0GvqeVw.png" alt="img-2-scaled.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It will be disabled if the file open in the editor is not from git or there are no other changes to it from contributors working on other branches (aka you are safe from conflicts). If it's enabled there will be one or more change indicators in the gutter of the editor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pI-BL2TW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634047012377/_7D2aL44K.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pI-BL2TW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634047012377/_7D2aL44K.png" alt="img-3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These will show you where your teammates have made changes compared to your version of the file and even update in real-time as you and your teammates are editing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--szMZgrkP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631105477371/nVpMNFsi2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--szMZgrkP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631105477371/nVpMNFsi2.png" alt="key indicators-dark.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you've made a conflicting change you will see the bright red conflict indicator. These conflicts can be uncommitted local changes you have not pushed yet or existing changes on your branch that conflict with your teammates‚Äô changes.&lt;/p&gt;

&lt;p&gt;Click your teammate‚Äôs icon in the gutter to see the diff between your version and theirs, the branch the offending changes are from, and the issue connected to that branch if there is one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QQbrs_zZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634047122136/lAc75r6N_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QQbrs_zZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634047122136/lAc75r6N_.png" alt="img-5.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From this popup you can also cherry-pick your teammate‚Äôs change directly from their local version of the file. For simple conflicts this can be a quick way to resolve them as identical changes on different branches will merge cleanly.&lt;/p&gt;

&lt;p&gt;Unfortunately, it's not always possible to resolve a conflict straight away but with the early warning, you'll be better prepared, avoiding any nasty surprises at merge time!&lt;/p&gt;

&lt;p&gt;Check out &lt;a href="https://blog.git.live/gitlive-11.0-Real-time-merge-conflict-detection"&gt;this blog post&lt;/a&gt; or the &lt;a href="https://docs.git.live/docs/mergeconflicts/"&gt;GitLive docs&lt;/a&gt; if you want to learn more.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>php</category>
      <category>git</category>
    </item>
    <item>
      <title>TypeScript is the Only Programming Language you Need to Learn. One language to rule them all!</title>
      <author>Remi W.</author>
      <pubDate>Tue, 12 Oct 2021 15:15:49 +0000</pubDate>
      <link>https://dev.to/ixartz/typescript-is-the-only-programming-language-you-need-to-learn-one-language-to-rule-them-all-1jb9</link>
      <guid>https://dev.to/ixartz/typescript-is-the-only-programming-language-you-need-to-learn-one-language-to-rule-them-all-1jb9</guid>
      <description>&lt;p&gt;TypeScript has become extremely popular among JavaScript developers and more and more projects use it as the primary programming language.&lt;/p&gt;

&lt;p&gt;Today, most frameworks or libraries have support for TypeScript, which makes it easy to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typescript-everywhere"&gt;
  &lt;/a&gt;
  TypeScript Everywhere
&lt;/h2&gt;

&lt;p&gt;JavaScript/TypeScript can be executed on every platform. You can now use TypeScript for all your projects without any limitation: one programming language to rule them all!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7JV9B02r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/typescript-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7JV9B02r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/typescript-logo.png" alt="TypeScript programming language logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It also means you only need to learn one programming language for all your projects. For any senior developer learning a new programming language isn't difficult but the time to master one is time-consuming.&lt;/p&gt;

&lt;p&gt;You only need to use one ecosystem: one package manager, one linter, one code formatter, etc. You only need to configure once and share it across all your projects. Saving you a ton of time ;)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typescript-for-frontend"&gt;
  &lt;/a&gt;
  TypeScript for Frontend
&lt;/h3&gt;

&lt;p&gt;The most used framework to build user interfaces is React and Vue.js. Both now support TypeScript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lLYetDe8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/react-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lLYetDe8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/react-logo.png" alt="React frontend logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm a React developer, I won't be able to say much about Vue.js. But when I started to use TypeScript with React, it wasn't an easy process because I was doing two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learning TypeScript&lt;/li&gt;
&lt;li&gt;Applying TypeScript in React context&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the beginning, you'll definitively lose your time &lt;em&gt;fighting&lt;/em&gt; against TypeScript. But, once you understand the basics, it makes your developer life much easier. It helps you to write better code with fewer errors.&lt;/p&gt;

&lt;p&gt;I like to write small components and you should too if you want to make your React code more modular. By using TypeScript on top of React components makes the code easy to navigate and maintain.&lt;/p&gt;

&lt;p&gt;You can check out some React components written in TypeScript at this &lt;a href="https://github.com/ixartz/Next-js-Boilerplate" rel="noopener noreferrer"&gt;React Boilerplate&lt;/a&gt; repository. You can start your React projects with all modern tools like React, Next JS, TypeScript, Tailwind CSS with great tooling like ESLint, Prettier and Husky configured for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FIzRONs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/nextjs-boilerplate-tech-stack.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FIzRONs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/nextjs-boilerplate-tech-stack.png" alt="Next JS boilerplate tech stack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typescript-for-backend"&gt;
  &lt;/a&gt;
  TypeScript for Backend
&lt;/h3&gt;

&lt;p&gt;In the past, you need to write in different programming languages for the frontend and backend. The backend was mostly written in Java, PHP, Ruby, etc.&lt;/p&gt;

&lt;p&gt;It makes the development experience not so great and the developers need to do a lot of context switching between frontend development and backend. The experience wasn't unified.&lt;/p&gt;

&lt;p&gt;Node JS made it possible to write backend code with JavaScript. You can now write your REST API in the same language as your frontend.&lt;/p&gt;

&lt;p&gt;Not only do you get the same development tools for both environments, but you can also even share the same code between your two environments. You don't need to write the same logic twice.&lt;/p&gt;

&lt;p&gt;There are some edge cases where you aren't able to share the code due to the nature of the platform. Some packages or some APIs can only work in the browser. So, you couldn't run it with Node JS. On the opposite, some packages can only work in Node JS. This case is extremely rare but you need to be aware of it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tLUpU0Kf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/serverless-framework-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tLUpU0Kf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/serverless-framework-logo.png" alt="Serverless framework AWS lambda"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7dEgbYjc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/express-js-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7dEgbYjc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/express-js-logo.png" alt="Express js serverless"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have also build a &lt;a href="https://github.com/ixartz/Serverless-Boilerplate-Express-TypeScript" rel="noopener noreferrer"&gt;Serverless Express JS Boilerplate&lt;/a&gt; to quickly create a Serverless backend REST API faster with everything configured: TypeScript supports, Offline support, automatic reload, ESLint, Prettier, Husky, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typescript-for-infra-as-code"&gt;
  &lt;/a&gt;
  TypeScript for Infra as Code
&lt;/h3&gt;

&lt;p&gt;Several years ago, I used to rent a dedicated server to host my full-stack application based on the LAMP stack. It wasn't an easy task to manually configure everything from scratch.&lt;/p&gt;

&lt;p&gt;First, you need to install the dependencies, secure your server, update the configuration file, etc. The most annoying thing is to maintain it.&lt;/p&gt;

&lt;p&gt;The Infrastructure as Code (IaC) was the ideal solution to solve this issue. It makes the process smoother using definition files. For someone with a developer background, you want to version control your infrastructure resources and remove the repetitive task when configuring several servers. The IaC is the perfect tool.&lt;/p&gt;

&lt;p&gt;With recent development, a new wave of IaC has emerged where you can use your favorite programming language instead of using configuration/definition files. Recently, I started to use AWS CDK with TypeScript to define my cloud resources.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5iXu2dpw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/aws-cdk-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5iXu2dpw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/aws-cdk-logo.png" alt="AWS CDK infrastructure as code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AWS CDK makes learning extremely easy: you don't need to learn a new tool and new ecosystem. You can still use your favorite JavaScript package manager, tooling and it works perfectly well with your favorite editor (my favorite one is VSCode üòú). Because I use it with TypeScript, I know when there is an error or when I misuse a function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typescript-for-mobile-development"&gt;
  &lt;/a&gt;
  TypeScript for Mobile Development
&lt;/h3&gt;

&lt;p&gt;With hybrid application and React Native, JavaScript isn't limited to the web application. You can now start building iOS and Android applications with JavaScript. So, you can now use TypeScript without any issue to create your future apps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pidaoH2X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/react-native-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pidaoH2X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/react-native-logo.png" alt="React native TypeScript logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, I'm not able to share much about mobile development with TypeScript. In the past, I've done some native mobile development on iOS in objective-C (pretty old school, before Swift) but not on React Native.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Zgrfd8Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/expo-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Zgrfd8Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/expo-logo.png" alt="Expo JS React native logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If I had the opportunity to make a mobile development, I'll definitively try React Native with TypeScript because I'm already familiar with React and TypeScript. I hope it makes the process easier and smoother. And on top of that, I also want to use Expo, a React Native framework. The framework seems to be very promising and it's considering a NextJS-like for mobile development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typescript-for-machine-learning"&gt;
  &lt;/a&gt;
  TypeScript for Machine Learning
&lt;/h3&gt;

&lt;p&gt;Even if Python has a much larger ecosystem and community, you can also use TypeScript for Machine Learning. I've built a small OCR using React and Tensorflow.js for digits number.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--We8pEzNQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/tensorflow-js-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--We8pEzNQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/tensorflow-js-logo.png" alt="Machine learning TypeScript with Tensorflow.js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The user can draw any number on the screen and the application can guess the input. Here is an example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mvf6w9bQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://creativedesignsguru.com/assets/images/themes/digit-recognition-tensorflow-react.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mvf6w9bQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://creativedesignsguru.com/assets/images/themes/digit-recognition-tensorflow-react.gif" alt="Digit recognition with Tensorflow JS and React"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's possible to train the model directly inside the browser, but the result wasn't great. It was slow to train the model and the accuracy of the prediction drop. You should train your model on a more powerful computer and only load the trained model when needed.&lt;/p&gt;

&lt;p&gt;It's still great to have the ability to run a machine learning model directly inside your browser, it makes your integration into your existing project easier.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In conclusion
&lt;/h2&gt;

&lt;p&gt;TypeScript can now be used everywhere and make the development much smoother with only one programming language to learn. No more context switching between programming language and all the stack is unified.&lt;/p&gt;

&lt;p&gt;If you are building a SaaS product and want this unified experience, you can try &lt;a href="https://nextlessjs.com"&gt;Next JS SaaS&lt;/a&gt; to start your TypeScript projects in seconds. We handle all the boring things for you like Auth, Payment, Landing Page, User Dashboard, form and error handling, database, CRUD operation, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextlessjs.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1qKLlCI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/nextless-react-saas-boilerplate.png" alt="Next JS SaaS Boilerplate Starter"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to print "Hello, World!"üíª</title>
      <author>Aditya Priyadarshi</author>
      <pubDate>Tue, 12 Oct 2021 15:02:17 +0000</pubDate>
      <link>https://dev.to/foxy4096/how-to-print-hello-world-3ah4</link>
      <guid>https://dev.to/foxy4096/how-to-print-hello-world-3ah4</guid>
      <description>&lt;p&gt;Printing "Hello, World!" is a kind of ritual that start the journey every programmer.&lt;/p&gt;

&lt;p&gt;According to Wikipedia:&lt;br&gt;
A "Hello, World!" program generally is a computer program that outputs or displays the message "Hello, World!". Such a program is very simple in most programming languages, and is often used to illustrate the basic syntax of a programming language. It is often the first program written by people learning to code.&lt;/p&gt;

&lt;p&gt;In this post I will show you how to print &lt;code&gt;"Hello, World!"&lt;/code&gt; in Python&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;small&gt;This is first post and I am scared&lt;/small&gt;&lt;/small&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#step-1-download-and-install-python"&gt;
  &lt;/a&gt;
  Step 1: Download and Install Python
&lt;/h1&gt;

&lt;p&gt;[skip this step if you have already installed it]&lt;/p&gt;

&lt;p&gt;Just head to &lt;a href="https://python.org/download/"&gt;https://python.org/download/&lt;/a&gt; and download the install the program supported by your os, i.e. .msi for windows and .dmg for mac &lt;/p&gt;

&lt;p&gt;In the windows you have to tick the check box saying Add Python3.xx to path&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1msuNZBx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nyrn71vwy39tme34y8a4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1msuNZBx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nyrn71vwy39tme34y8a4.jpg" alt="An image showing to check the box add to path in windows installer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For Linux you have to open an application named terminal and type the following command, make sure you are connected to internet and have &lt;code&gt;sudo&lt;/code&gt; privilege.&lt;/p&gt;

&lt;p&gt;Command to install python on Linux&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;python3.8
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-2-writing-the-program"&gt;
  &lt;/a&gt;
  Step 2: Writing the program
&lt;/h1&gt;

&lt;p&gt;Open a suitable text editor of your choice and type the following code and save it in &lt;code&gt;.py&lt;/code&gt; extension&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are printing the "Hello, World!" with &lt;code&gt;print&lt;/code&gt; function.&lt;br&gt;
It is a built-in function in python which helps to print thing in the console window&lt;/p&gt;

&lt;p&gt;If you wish you can skip this section&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;print&lt;/code&gt; function have the following arguments&lt;/p&gt;

&lt;p&gt;&lt;code&gt;print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Prints the values to a stream, or to sys.stdout by default.&lt;br&gt;
Optional keyword arguments:&lt;br&gt;
file:  a file-like object (stream); defaults to the current sys.stdout.&lt;br&gt;
sep:   string inserted between values, default a space.&lt;br&gt;
end:   string appended after the last value, default a newline.&lt;br&gt;
flush: whether to forcibly flush the stream.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#step-3-running-the-program"&gt;
  &lt;/a&gt;
  Step 3: Running the program
&lt;/h1&gt;

&lt;p&gt;In windows, open the folder in where is your program is located and press &lt;code&gt;shift + right click&lt;/code&gt; to open the context menu and select the &lt;code&gt;Open with powershell&lt;/code&gt; option&lt;/p&gt;

&lt;p&gt;In Linux/Unix, open the folder in where is your program is located and press &lt;code&gt;right click&lt;/code&gt; to open the context menu and select the &lt;code&gt;Open in Terminal&lt;/code&gt; option&lt;/p&gt;

&lt;p&gt;Now in the terminal type the following command&lt;/p&gt;

&lt;p&gt;For Windows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python app.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For Linux/Mac&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python3 app.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following thing will be print&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;So that was a simple tutorial on how to print "Hello, World!" in Python.&lt;br&gt;
Well then see you all next time.&lt;/p&gt;

&lt;p&gt;Peace ‚úå&lt;/p&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>Best Places Are Fixed Phone Screens</title>
      <author>Mahbubul Alam</author>
      <pubDate>Tue, 12 Oct 2021 14:46:36 +0000</pubDate>
      <link>https://dev.to/mahbubu78806610/best-places-are-fixed-phone-screens-4h89</link>
      <guid>https://dev.to/mahbubu78806610/best-places-are-fixed-phone-screens-4h89</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jnvhjn6m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2uxidx3qbd9jvaku4bx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jnvhjn6m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2uxidx3qbd9jvaku4bx.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hello Designer!&lt;/p&gt;

&lt;p&gt;Our Home Place Screen is meant to give people the gift of space. These Places Are Fixed Phone Screens. Whether it‚Äôs that worn-in place on your sofa or that special spot on the beach, places are fixed.&lt;/p&gt;

&lt;p&gt;Download:&lt;a href="https://lnkd.in/ehZ8A6wT"&gt;https://lnkd.in/ehZ8A6wT&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get Lifetime Access Only for 99$. Use "ton10" coupon for the extra 10% off.&lt;/p&gt;

</description>
      <category>appdesign</category>
      <category>appuikit</category>
      <category>homescreen</category>
    </item>
    <item>
      <title>Start your Open Source Journey with Git</title>
      <author>Abhinav Dubey</author>
      <pubDate>Tue, 12 Oct 2021 14:41:41 +0000</pubDate>
      <link>https://dev.to/abhinavd26/start-your-open-source-journey-with-git-20o3</link>
      <guid>https://dev.to/abhinavd26/start-your-open-source-journey-with-git-20o3</guid>
      <description>&lt;p&gt;Here, we are again with another beginner friendly blog. In this blog we will learn about one of the most popular version control tool, yes you guessed it right. I am talking about git.&lt;/p&gt;

&lt;p&gt;In the blog we shall learn about -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is Version Control&lt;/li&gt;
&lt;li&gt;Why do we need Version Control&lt;/li&gt;
&lt;li&gt;Git, One of the best Version Control tool&lt;/li&gt;
&lt;li&gt;Start with Open Source Contributions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's start with the Version Control.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-version-control"&gt;
  &lt;/a&gt;
  What is Version Control?
&lt;/h2&gt;

&lt;p&gt;Version Control is a system which helps you to keep a track of all the changes you made in files or codes by keeping the track of each version you build so that you can rollback to previous version if needed. In layman language, it helps you to organize the things in a better way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-need-version-control"&gt;
  &lt;/a&gt;
  Why do we need Version Control?
&lt;/h2&gt;

&lt;p&gt;Version Control provides an efficient way to manage your codes or files, but if you are thinking why exactly do we need it, let me give you an example.&lt;br&gt;
Let's assume a scenario, today most of the companies are adopting Work From Home culture. Let's say we have 10 developers working on a product, building features for it from their home, so now how will they organize their code. Here comes the role of Version Control tools like git. &lt;/p&gt;

&lt;p&gt;Still confused ü§î!&lt;/p&gt;

&lt;p&gt;Let me give you another use-case. For example, you have build an application and deployed it. Everything works fine in the current version. Maybe you have added few new features and again deployed it but this time the application breaks. Now again comes the role of Version Control. By using version control tools such as git you can easily rollback to the previous version of your code.&lt;br&gt;
This is how Version Control tools acts as a &lt;code&gt;Savior&lt;/code&gt; for almost every organization.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#introducing-git"&gt;
  &lt;/a&gt;
  Introducing Git
&lt;/h2&gt;

&lt;p&gt;In the above section we learned about Version Control and its need. Now let's understand what exactly is Git and why it is so popular in the industry. Git is a version control system which is adopted by many companies and OSS users to maintain their code in local as well as remote repositories. The term repository here refers to storage container where project files are being stored and it can be any repository, be it GitHub, GitLab or Bitbucket. It is mostly used in the Software Development Industry to keep a track of changes made in code and also helps to increase the speed of development by providing a better support for distributed/collaborative development environment.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#begin-your-opensource-contributions"&gt;
  &lt;/a&gt;
  Begin your opensource contributions
&lt;/h2&gt;

&lt;p&gt;Now let's start with the open source contributions and learn about some of the most useful git commands which are used commonly. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Note: The blog is specific for open source contributions so we will discuss only those commands which are related to it]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step-1:&lt;/strong&gt; For making any Open Source Contribution, first we need to fork the respective repository to your account. Here's how you can fork it - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vgaeL8Wg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yz27jooqm5g8ndoy3ayc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vgaeL8Wg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yz27jooqm5g8ndoy3ayc.png" alt="Devtron-Repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the fork is being completed, it would look something like this in your account - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dcqk_G9l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q82ot8sz67ecblu2f1ts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dcqk_G9l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q82ot8sz67ecblu2f1ts.png" alt="Abhinav-26"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step-2:&lt;/strong&gt; Now clone the forked repo in your system using the following command.&lt;br&gt;
Replace &lt;code&gt;RemoteUrl&lt;/code&gt; with the URL of Repository you want to clone&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone RemoteUrl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Step-3:&lt;/strong&gt; Create a new branch for adding your changes. Use the below command, it will create a new branch and checkout into the newly created branch.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout &lt;span class="nt"&gt;-b&lt;/span&gt; NewBranchName
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To verify your current branch you can use &lt;code&gt;git status&lt;/code&gt; command. It will give you all necessary details of git initialized repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step-4:&lt;/strong&gt; Now make the changes which you want as your contributions. After the changes has been done, you need to add those changes to git. Use the following command to add those changes.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add ChangedFileName
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Also you can add all the changes by using period(.) If you have changed multiple files this can be really useful. Move to the root directory of the project and then run the following command.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Step-5:&lt;/strong&gt; Now commit the changes you made with a commit message. The message should be relevant to the change you did as it would be helpful for tracing. &lt;br&gt;
For example, I made changes in README.md file so the command would be something like this -&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Added discord link in README"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;[Note: It is not mandatory, but as a best practice you should add relevant commit messages]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step-6:&lt;/strong&gt; Now we need to push the changes we did. We have to push in the same branch in which we are working. Use the below command to push your change -&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git push &lt;span class="nt"&gt;-u&lt;/span&gt; origin NewBranchName
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Congratulations üéâ! Now we are ready to raise our first Pull Request and make our first open source contribution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step-7:&lt;/strong&gt; Go-to your forked Github Repository, you will see something like the below image. Click on &lt;code&gt;Compare &amp;amp; pull request&lt;/code&gt; button in the UI.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lKdNuSCV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r9i3cs5viuwctwxsdm27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lKdNuSCV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r9i3cs5viuwctwxsdm27.png" alt="PR-Raise"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step-8:&lt;/strong&gt; After that add the necessary details asked, like title of PR, Description, etc and then click on &lt;code&gt;Create pull request&lt;/code&gt; button as you can see in the image below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p2ibDv85--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uc5pla2kfrokgewml1ru.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p2ibDv85--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uc5pla2kfrokgewml1ru.png" alt="Create-PR"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tada! We just did our first open source contribution üéä. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-next"&gt;
  &lt;/a&gt;
  What next?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#contribute-amp-earn-swags"&gt;
  &lt;/a&gt;
  Contribute &amp;amp; Earn Swags
&lt;/h3&gt;

&lt;p&gt;Now we understood how we can start our open source contributions. If you want to do some quality contributions and be the part of biggest opensource fest, yes I am talking about Hacktoberfest, feel free to check out this repository and unlock the cool giveaways along with the Hacktoberfest swags. &lt;br&gt;
Yes! You read it right. You will get some awesome giveaways from Devtron for contributing on their repositories apart from the hacktoberfest swags. Everyone at any level is invited to contribute and take the giveaways. Please refer the below repository for better understanding of the swags and contributions guidelines. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/devtron-labs"&gt;
        devtron-labs
      &lt;/a&gt; / &lt;a href="https://github.com/devtron-labs/hacktoberfest2021"&gt;
        hacktoberfest2021
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Opensource Celebration 
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>github</category>
      <category>hacktoberfest</category>
      <category>opensource</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Configmap - Kubernetes Volumes - (CKA) Prep.</title>
      <author>jmbharathram</author>
      <pubDate>Tue, 12 Oct 2021 14:35:34 +0000</pubDate>
      <link>https://dev.to/jmbharathram/configmap-kubernetes-volumes-cka-prep-5hhn</link>
      <guid>https://dev.to/jmbharathram/configmap-kubernetes-volumes-cka-prep-5hhn</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/HADVtK3Byx8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
    </item>
    <item>
      <title>Building a realtime ticket booking solution with Kafka, FastAPI, and Ably
</title>
      <author>Ben Gamble</author>
      <pubDate>Tue, 12 Oct 2021 14:24:52 +0000</pubDate>
      <link>https://dev.to/ugbot/building-a-realtime-ticket-booking-solution-with-kafka-fastapi-and-ably-1nn2</link>
      <guid>https://dev.to/ugbot/building-a-realtime-ticket-booking-solution-with-kafka-fastapi-and-ably-1nn2</guid>
      <description>&lt;p&gt;As the post-pandemic world emerges, the future of events such as summits, conferences or concerts is brighter than ever. Thanks to¬†&lt;a href="https://hopin.com/blog/hopin-and-cogx-to-deliver-the-worlds-largest-hybrid-event"&gt;hybrid events&lt;/a&gt;, in-person events are now doubled by online happenings, which allows event organizers to reach much larger, geographically distributed audiences. For organizers and ticket distributors, providing a great ticket-booking experience to their global audiences has become more important than ever.&lt;/p&gt;

&lt;p&gt;In this guide we'll show you how to build a ticket booking solution that allows you to process and distribute large quantities of ticket data for live, virtual or hybrid conferences, to and from a large number of customers - with reliability and speed.&lt;/p&gt;

&lt;p&gt;The guide is divided in the following sections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://ably.com/blog/realtime-ticket-booking-solution-kafka-fastapi-ably#characteristics-of-a-dependable-ticket-booking-solution"&gt;Characteristics of a dependable ticket booking solution&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://ably.com/blog/realtime-ticket-booking-solution-kafka-fastapi-ably#tech-stack"&gt;Tech Stack&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://ably.com/blog/realtime-ticket-booking-solution-kafka-fastapi-ably#ticket-booking-solution-architecture"&gt;Ticket booking solution architecture&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://ably.com/blog/realtime-ticket-booking-solution-kafka-fastapi-ably#building-the-realtime-ticket-booking-solution"&gt;Building the realtime ticket booking solution&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://ably.com/blog/realtime-ticket-booking-solution-kafka-fastapi-ably#conclusion"&gt;Conclusion&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#characteristics-of-a-dependable-ticket-booking-solution"&gt;
  &lt;/a&gt;
  Characteristics of a dependable ticket booking solution
&lt;/h2&gt;

&lt;p&gt;Building a ticket booking solution that provides an optimum user experience is by no means an easy feat. There are several factors that need to be taken into account and addressed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scalability"&gt;
  &lt;/a&gt;
  Scalability
&lt;/h3&gt;

&lt;p&gt;The ticket booking system will likely have to deal with a very high and unpredictable number of concurrent users. Therefore, you need to ensure that it is dynamically elastic, and can quickly scale to handle up to millions of simultaneous users, without the quality of service being degraded.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-must-flow-in-realtime"&gt;
  &lt;/a&gt;
  Data must flow in realtime
&lt;/h3&gt;

&lt;p&gt;Instantaneous data exchanges are of the utmost importance. The number of remaining tickets must be updated in realtime, so users always have accurate, up-to-date visibility into the status of any given conference. To achieve this immediacy, data must not only be stored and processed in realtime, but it must also flow between client devices and other components as fast as possible, with consistently low latencies.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-integrity"&gt;
  &lt;/a&gt;
  Data integrity
&lt;/h3&gt;

&lt;p&gt;Guaranteed ordering and exactly-once semantics are critical for any reliable ticket booking solution. If data is sent out of order and delivered multiple times (or not at all), it can negatively impact the user experience. Think, for example, of a scenario where customers need multiple attempts to book a single ticket to a conference, because the system only supports at-most-once semantics.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tech-stack"&gt;
  &lt;/a&gt;
  Tech stack
&lt;/h2&gt;

&lt;p&gt;Let's cover the various components we will use to build our dependable realtime ticket booking solution. All of the technologies chosen for this demo are freely accessible, and require no more than making accounts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5u5W_VAD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ably/ghost/prod/2021/10/Screenshot-2021-10-12-at-08.41.31.png%3Ftr%3Dw-1520" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5u5W_VAD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ik.imagekit.io/ably/ghost/prod/2021/10/Screenshot-2021-10-12-at-08.41.31.png%3Ftr%3Dw-1520" alt="The tech stack: FastAPI, Confluent and Kafka, ksqlDB, Ably, and ngrok"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fastapi-as-the-api-server-layer-for-writing-events-to-kafka-and-consuming-webhooks-from-ably"&gt;
  &lt;/a&gt;
  FastAPI as the API server layer for writing events to Kafka and consuming webhooks from Ably
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://fastapi.tiangolo.com/"&gt;FastAPI&lt;/a&gt;¬†is a high-performance, highly-structured web framework for developing web APIs with Python, based on standard Python type hints. It's built on top of Starlette and Pydantic, and it enables us to use a REST interface to validate, serialize, and deserialize data. We'll use FastAPI to build our frontend API component, which is responsible for writing to Kafka topics, and consuming webhooks from Ably.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apache-kafka-on-confluent-for-internal-event-streaming-and-persistent-storage"&gt;
  &lt;/a&gt;
  Apache Kafka on Confluent for internal event streaming and persistent storage
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://kafka.apache.org/"&gt;Apache Kafka&lt;/a&gt;¬†is becoming the standard for building event-driven pipelines. A distributed¬†&lt;a href="https://ably.com/topic/pub-sub"&gt;pub/sub&lt;/a&gt;¬†platform, Kafka has impressive characteristics, such as low latency, high throughput and concurrency, fault tolerance, high availability, and robust data integrity assurances. Additionally, Kafka provides persistent storage (data can be stored to disk indefinitely), and integrates with multiple stream processing components, like ksqlDB.&lt;/p&gt;

&lt;p&gt;For our tutorial, we'll use Kafka as a backend component responsible for reliable storage and realtime distribution of data to the public Internet-facing messaging layer, Ably. ¬†&lt;/p&gt;

&lt;p&gt;The most convenient way to get started with Kafka is via the¬†&lt;a href="https://www.confluent.io/"&gt;Confluent platform&lt;/a&gt;. Founded by the original creators of Kafka, Confluent provides fully managed Kafka deployments, and a host of other features, such as stream processing capabilities and sink and source connectors, so you can easily transfer data between Kafka and other systems.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ksqldb-for-stream-processing"&gt;
  &lt;/a&gt;
  ksqlDB for stream processing
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://ksqldb.io/"&gt;ksqlDB&lt;/a&gt;¬†is a Kafka-native database purpose-built for stream processing applications. It allows us to filter, process, and join Kafka topics in order to create new, derived topics.&lt;/p&gt;

&lt;p&gt;ksqlDB is an abstraction over the well-known and used Kafka Streams library, allowing us to use familiar SQL to sort, shape, and transform data directly rather than having to write Java code to do it. Though less flexible than Kafka Streams, ksqlDB makes common use cases far simpler and quicker to iterate. In addition, it does directly integrate with Kafka Connect (although, in our case, we'll be reading from a destination topic rather than pushing data straight to a connector.)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ably-for-scalable-and-dependable-data-streaming-to-and-from-clients-at-the-edge"&gt;
  &lt;/a&gt;
  Ably for scalable and dependable data streaming to and from clients at the edge
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://ably.com/"&gt;Ably&lt;/a&gt;¬†is a cloud-native¬†&lt;a href="https://ably.com/pub-sub-messaging"&gt;pub/sub messaging&lt;/a&gt;¬†platform chiefly designed for distributing data in realtime to any number of web and mobile clients, anywhere in the world. You can think of Ably as the public Internet-facing equivalent of your internal Kafka-powered event-driven pipeline. Ably matches, enhances, and complements Kafka's capabilities. Our platform offers a simple,¬†&lt;a href="https://ably.com/four-pillars-of-dependability"&gt;dependable&lt;/a&gt;, scalable, and secure way to distribute Kafka data across firewalls to end-user devices over a¬†&lt;a href="https://ably.com/network"&gt;global edge network&lt;/a&gt;, at consistently low latencies (&amp;lt;65 ms median round-trip latency) - without any need for you to manage infrastructure.&lt;/p&gt;

&lt;p&gt;Publishing Kafka records to Ably is easily achieved by using the¬†&lt;a href="https://github.com/ably/kafka-connect-ably"&gt;Ably Kafka Connector&lt;/a&gt;, a sink connector that can be self-hosted, or hosted with a third-party provider - the most common being the Confluent Platform. ¬†&lt;/p&gt;

&lt;p&gt;In addition to distributing data to end-users, Ably is often used for streaming data from client ¬†devices to other systems (in our case, we will use Ably to send batched webhooks to the FastAPI component).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ngrok-as-a-proxy-for-ingesting-webhooks-sent-from-ably-into-fastapi"&gt;
  &lt;/a&gt;
  Ngrok as a proxy for ingesting webhooks sent from Ably into FastAPI
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://ngrok.com/product"&gt;Ngrok&lt;/a&gt;¬†exposes local servers placed behind NATs and firewalls to the public Internet over secure tunnels. We'll use Ngrok to proxy the batched webhooks sent from Ably into the local FastAPI instance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ticket-booking-solution-architecture"&gt;
  &lt;/a&gt;
  Ticket booking solution architecture
&lt;/h2&gt;

&lt;p&gt;This diagram presents the high-level architecture of our realtime ticket booking solution:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7KGpnbjK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/l2Fq47Drs48pf4eohs9jLJjtAsaP1Y7YEDXpCidfBu0UCKFWnMAWPJKp4xqfJ73CVuBgV6LuoSPhNTPi5HEw-CcoTPwiAGOwPsYq0skHh8z5nWwdhlHpaYeAG4ATl30mYZwMkjRF%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7KGpnbjK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/l2Fq47Drs48pf4eohs9jLJjtAsaP1Y7YEDXpCidfBu0UCKFWnMAWPJKp4xqfJ73CVuBgV6LuoSPhNTPi5HEw-CcoTPwiAGOwPsYq0skHh8z5nWwdhlHpaYeAG4ATl30mYZwMkjRF%3Ds0" alt="Architecture of our realtime ticket booking solution: Apache Kafka, Python and FastAPI, ksqlDB, and Ably Realtime for scalable pub/sub"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's dive into details and see how the system works, end-to-end.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Whenever a new conference is planned, the organizer sends a "Create conference" API request to the frontend API component (FastAPI).&lt;/li&gt;
&lt;li&gt; Next, the frontend API publishes the conference-related data as a¬†&lt;em&gt;record&lt;/em&gt;¬†in the "Conferences"¬†&lt;em&gt;topic&lt;/em&gt;¬†in Kafka. To make an analogy, a Kafka topic can be thought of as a folder in a filesystem, while the record can be regarded as a file in the respective folder.&lt;/li&gt;
&lt;li&gt; Records stored in the "Conferences" topic are then processed by ksqlDB, the stream processing component in our architecture. The output is written to the "Materialized view" Kafka topic. Note that Kafka can persist records to disk for as long as needed, and guarantees that they will be sent downstream in the same order as they were written.&lt;/li&gt;
&lt;li&gt; Kafka data from the "Materialized view" topic is sent to the "Conference &amp;amp; ticket availability" Ably¬†&lt;a href="https://ably.com/documentation/core-features/channels"&gt;channel&lt;/a&gt;, via the¬†&lt;a href="https://github.com/ably/kafka-connect-ably"&gt;Ably Kafka Connector&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt; Ably then broadcasts the data in realtime to all client devices who are subscribed to the "Conference &amp;amp; ticket availability" channel. Ably guarantees ordering and¬†&lt;a href="https://ably.com/blog/achieving-exactly-once-message-processing-with-ably"&gt;exactly-once semantics&lt;/a&gt;, and ensures data is distributed at consistently low latencies (&amp;lt;65 ms median round-trip latency), over a globally distributed and¬†&lt;a href="https://ably.com/blog/engineering-dependability-and-fault-tolerance-in-a-distributed-system"&gt;fault-tolerant&lt;/a&gt;¬†global edge network. Furthermore, Ably is dynamically elastic and can quickly scale horizontally to handle millions of concurrent subscribers.&lt;/li&gt;
&lt;li&gt; Whenever a user books a ticket for a conference, a webhook is triggered; webhooks are sent in batches to the FastAPI component over Ngrok secure tunnels.&lt;/li&gt;
&lt;li&gt; FastAPI publishes the booking-related data to Kafka. However, this time, data is written to the "Bookings" topic instead of the "Conferences" topic.&lt;/li&gt;
&lt;li&gt; Each time a new record is written to the "Bookings" or "Conferences" topics, ksqlDB merges the changes into a unified view, the "Materialized view" topic - which reflects the latest state.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This architecture ensures that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Users have an accurate, always up-to-date view of all upcoming conferences, together with the number of available tickets for each conference.&lt;/li&gt;
&lt;li&gt;  Data travels in realtime, with last-mile ordering and exactly-once semantics ensured by Ably.&lt;/li&gt;
&lt;li&gt;  The system can scale to handle a significantly high and rapidly changing number of concurrent users.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#building-the-realtime-ticket-booking-solution"&gt;
  &lt;/a&gt;
  Building the realtime ticket booking solution
&lt;/h2&gt;

&lt;p&gt;Now let's walk through all the steps required to configure the constituent components and build our realtime ticket booking solution.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#out-of-scope"&gt;
  &lt;/a&gt;
  Out of scope
&lt;/h3&gt;

&lt;p&gt;A¬†*complete¬†*ticket booking solution would involve payment processing, account management, and additional features, but these are out of scope for our demo. However, due to the decoupled nature of the project, with Kafka and Ably acting as message busses, adding these features later through microservices would be a straightforward process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#schemas-and-specifications"&gt;
  &lt;/a&gt;
  Schemas and specifications
&lt;/h3&gt;

&lt;p&gt;API and data definition specifications allow developers to easily build services that can communicate with each other reliably, and validate data. For our REST API component (FastAPI), this means using an¬†&lt;a href="https://swagger.io/specification/"&gt;OpenAPI Specification&lt;/a&gt;¬†(Swagger), with a JSON schema. The REST API uses¬†&lt;a href="https://pydantic-docs.helpmanual.io/"&gt;Pydantic&lt;/a&gt;¬†to provide the information needed to create the OpenAPI Specification and generate the functions required to validate and deserialize the inbound data.&lt;/p&gt;

&lt;p&gt;Just like Ably, Kafka can transport any type of data type you want, but it's best known and configured for Apache Avro-encoded data. Avro is an efficient, open-source, schema-driven binary encoding library (similar to Apache Thrift or Protobuf). In the Confluent ecosystem,¬†&lt;a href="https://docs.confluent.io/platform/current/schema-registry/serdes-develop/serdes-avro.html"&gt;Avro is the standard way to encode your Kafka data&lt;/a&gt;, and it's very well supported.&lt;/p&gt;

&lt;p&gt;The Confluent platform comes with¬†&lt;a href="https://docs.confluent.io/platform/current/schema-registry/index.html#"&gt;Schema Registry&lt;/a&gt;, a convenient tool for storing the schemas for Kafka records. As long as you use Avro as your wire format, ksqlDB can access the schemas to reduce the boilerplate code required per query. In addition, ksqlDB's output can be in JSON format, so end-users can easily consume it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-started-with-ably"&gt;
  &lt;/a&gt;
  Getting started with Ably
&lt;/h3&gt;

&lt;p&gt;Ably allows you to effortlessly scale to millions of concurrent users, without having to manage or even think about messy infrastructure for last mile delivery. All you need to do is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="https://ably.com/sign-up"&gt;Sign up for a free developer account&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://ably.com/tutorials/publish-subscribe#setup-ably-account"&gt;Create an Ably app and API key&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-the-confluent-ecosystem"&gt;
  &lt;/a&gt;
  Setting up the Confluent ecosystem
&lt;/h3&gt;

&lt;p&gt;Setting up Confluent can be done in different ways - for example, with Docker, or by running it locally. For our demo, we'll be running it locally.&lt;/p&gt;

&lt;p&gt;Start by¬†&lt;a href="https://www.confluent.io/get-started/?product=software"&gt;downloading the Confluent Platform&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note:¬†Be sure to have your local JDK set to version 11, which is required by the¬†&lt;a href="https://docs.confluent.io/platform/current/control-center/index.html"&gt;Confluent Control Center&lt;/a&gt;¬†(more about this later).&lt;/p&gt;

&lt;p&gt;Assuming you're working on a Mac, you can install the JDK by using¬†&lt;code&gt;brew&lt;/code&gt;¬†with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew cask install java11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once this is done, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export JAVA_HOME =/usr/local/Cellar/openjdk@11/11.0.12/libexec/openjdk.jdk/Contents/Home
export CONFLUENT_HOME=~/confluent-6.2.0
export PATH=$PATH:$CONFLUENT_HOME/bin
confluent local services start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These commands ensure that the Confluent platform sees a compatible JDK, and adds Kafka, ksqlDB, and other Confluent components to your session, making it easier to command and control the system.&lt;/p&gt;

&lt;p&gt;You should see the following response:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Starting ZooKeeper
ZooKeeper is [UP]
Starting Kafka
Kafka is [UP]
Starting Schema Registry
Schema Registry is [UP]
Starting Kafka REST
Kafka REST is [UP]
Starting Connect
Connect is [UP]
Starting ksqlDB Server
ksqlDB Server is [UP]
Starting Control Center
Control Center is [UP]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To confirm, visit¬†&lt;a href="http://localhost:9021/"&gt;http://localhost:9021/&lt;/a&gt;, where you should see a Confluent Control Center cluster:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gKT4D4_5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/goAR1MWfMsqZMCIn46IIUibR7feV-gZhup9cGNuugGEm9osMB0R9P3OJgxNqZhviCeHiPbZcRcqtzkjgnhMEWZn7PHTuEhlcOAXRzGa-r6fYcECmub5mLt0hGrZGuGBu485jFul2%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gKT4D4_5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/goAR1MWfMsqZMCIn46IIUibR7feV-gZhup9cGNuugGEm9osMB0R9P3OJgxNqZhviCeHiPbZcRcqtzkjgnhMEWZn7PHTuEhlcOAXRzGa-r6fYcECmub5mLt0hGrZGuGBu485jFul2%3Ds0" alt="Confluent Control Center cluster"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Confluent Control Center cluster&lt;/p&gt;

&lt;p&gt;The cluster comes with some pre-made Kafka topics and data, which are used to manage the Connect cluster and the ksqlDB instance. Note that there is only a single broker; this would not be the case for any production system, which involves multi-broker deployments. However, for the purpose of our demo, one broker is all we need.&lt;/p&gt;

&lt;p&gt;Now,¬†&lt;a href="https://www.confluent.io/hub/ably/kafka-connect-ably"&gt;download and install the Ably Kafka Connector&lt;/a&gt;, a sink connector used for streaming data from Kafka topics into Ably channels.&lt;/p&gt;

&lt;p&gt;After running the install command in your terminal session, you'll have added the Ably¬†&lt;code&gt;ChannelSinkConnector&lt;/code&gt;¬†to your local¬†&lt;code&gt;confluent-hub&lt;/code&gt;. The tool will walk you through a series of instructions which you'll need to follow in accordance with your system. The defaults are fine here, but if you have multiple clusters, please select the ones you need.&lt;/p&gt;

&lt;p&gt;Once you've completed this step, let's check the connector is indeed installed by going to the Confluent Control Center (&lt;a href="http://localhost:9021/"&gt;http://localhost:9021/&lt;/a&gt;), and navigating to the Connect cluster:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bs63R1dk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/yFJyQVERiMOGcEVj__u8cBZhklyjJJ2YI4yCs_Dt4hyFYaiN4kWjLWWrd_4dAwmneRXZynsiXEaQvR-waQ1mPv_fv5gXPvtVbR08izvCoRU6lkT6gz-lNrXSqDIq-z8ZMDIsQeQk%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bs63R1dk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/yFJyQVERiMOGcEVj__u8cBZhklyjJJ2YI4yCs_Dt4hyFYaiN4kWjLWWrd_4dAwmneRXZynsiXEaQvR-waQ1mPv_fv5gXPvtVbR08izvCoRU6lkT6gz-lNrXSqDIq-z8ZMDIsQeQk%3Ds0" alt="Confluent Control Center: connecting the clusters"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, select the¬†&lt;code&gt;ChannelSinkConnector&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jl-9AIZ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/CUnV2kDTzhAuQ50DKQFeh_op_P6Kn4yjjzvigtp9JJMQ0Fv7XhiNNzFJoHHgErwIvcjvYlKWuivRlEV5CoERzZizd11_66UL60wxHQkwuUwndEXcwL7qSHDB8ROJ8yNguF8M5xkz%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jl-9AIZ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/CUnV2kDTzhAuQ50DKQFeh_op_P6Kn4yjjzvigtp9JJMQ0Fv7XhiNNzFJoHHgErwIvcjvYlKWuivRlEV5CoERzZizd11_66UL60wxHQkwuUwndEXcwL7qSHDB8ROJ8yNguF8M5xkz%3Ds0" alt="Confluent Control Center"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kafka Connect is effectively a no-code solution; you just have to select the topic you wish to use as the source of the outbound messages, add in your Ably API key, and you're ready to go. We'll be walking through this later once we have the data ready to go.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-fastapi"&gt;
  &lt;/a&gt;
  Setting up FastAPI
&lt;/h3&gt;

&lt;p&gt;Note: For this demo we recommend using Python 3.9.&lt;/p&gt;

&lt;p&gt;To install FastAPI, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pip install fastapi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;FastAPI is built on top of two key libraries:¬†&lt;a href="https://www.starlette.io/"&gt;Starlette&lt;/a&gt;¬†and¬†&lt;a href="https://pydantic-docs.helpmanual.io/"&gt;Pydantic&lt;/a&gt;. Starlette was developed by one of the creators of the Django REST framework in an attempt to simplify and speed up the process of building REST APIs in Python. Starlette is fast and asynchronous by design, giving FastAPI runtime speed, and a simple, extensible foundation.&lt;/p&gt;

&lt;p&gt;The other library, Pydantic, is designed to handle serialization and type enforcement. It provides a clean way to make and expose type-safe Python classes to API users, and helps validate data coming in and out. You can even use this library to generate Pydantic classes from JSON Schema to use in your codebase.&lt;/p&gt;

&lt;p&gt;In FastAPI, Pydantic allows for simple serialization and deserialization of requests to and from JSON and Python objects. Due to its type enforcements, Pydantic can validate data over any of the API routes, and is used to auto generate all of the OpenAPI documentation for our Python API.&lt;/p&gt;

&lt;p&gt;FastAPI requires an Asynchronous Server Gateway Interface (ASGI) server to power it. Popular choices include Uvicorn, Gunicorn, and Hypercorn. In production, it's probably worth using Hypercorn, ¬†which comes with HTTP/2 support, increasing performance (this is especially useful for outbound webhooks received from Ably). However, for this demo we are going to use¬†&lt;a href="https://www.uvicorn.org/"&gt;Uvicorn&lt;/a&gt;, since it has a friendly debugging setup.&lt;/p&gt;

&lt;p&gt;This is how you install Uvicorn:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pip install "uvicorn[standard]"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Schemas represent the core of our ticket booking solution. With pydantic, we have a series of Python objects that define the Ably webhook schema, and also the schema for the REST API we'll be exposing for conference creation.&lt;/p&gt;

&lt;p&gt;We need to import the parts we are going to use and add¬†&lt;code&gt;BaseModel&lt;/code&gt;¬†as the parent of our data classes. The data class depicted below defines a conference in the system and on the API:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Conference(BaseModel):
    eventId: str
    eventCapacity: int
    eventDate: int
    bookingStart: int
    bookingEnd: int
    timestamp: int
    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pydantic gives these classes a series of methods, allowing us to expose them as dictionaries, and validate input. The¬†&lt;code&gt;Conference&lt;/code&gt;¬†class is a parameter in the post request handler function on the API:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@app.post('/inbound-conferences')
async def conference_creation(data: Conference, request: Request):
    try:
        conference_producer.produce(conference_topic, None, data.dict())
        conference_producer.poll(0)
        conference_producer.flush()
        print(data.dict())
    except Exception as e:
        print(e)
        return 400
   return 200
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This makes it easy to add it to the OpenAPI specification generated by FastAPI:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OVTnG2-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/P2FasGmfZ5aYiwqENNO6lbuH0MGGX_Yj_qRe8Lb1C_r4xb2hYa6FvBsDGBTTwzfFRDPMp7D3YCVw8-lkKbcdpFPabSO4zi8MQoRBNnbh0qweGetcErENPFKp4db5XGLiQnJsNLrQ%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OVTnG2-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/P2FasGmfZ5aYiwqENNO6lbuH0MGGX_Yj_qRe8Lb1C_r4xb2hYa6FvBsDGBTTwzfFRDPMp7D3YCVw8-lkKbcdpFPabSO4zi8MQoRBNnbh0qweGetcErENPFKp4db5XGLiQnJsNLrQ%3Ds0" alt="The OpenAPI specification generated by FastAPI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, let's cover the Avro schema. Avro is a tool that performs binary serialization of data defined by a schema, and it's the canonical way to serialize and store data in Kafka. The Confluent Platform includes a tool called Schema Registry, which:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Makes it easy to store and validate data published into Kafka topics.&lt;/li&gt;
&lt;li&gt;  Acts as a source of truth for what the schema of the data in a Kafka topic is.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When combined with ksqlDB, the Schema Registry offers the added benefit of providing it with the types, keys, and structure of the data you can query.&lt;/p&gt;

&lt;p&gt;We have schemas for two Kafka topics: "Conferences" and "Bookings", the latter containing records about the number of places being reserved for the conference in question. They have a¬†&lt;code&gt;userId&lt;/code&gt;, an¬†&lt;code&gt;eventId&lt;/code&gt;, and a number (of available tickets left).&lt;/p&gt;

&lt;p&gt;The Kafka producers (FastAPI) are serializing producers; they write data as Avro in the two Kafka topics. Note that there are two separate producers, since each topic requires a different schema. Currently, although the Confluent Kafka Python producer SDK can serialize to Avro, it does so by using a dictionary rather than just an object. However, as our data objects are Pydantic models, we can just call the¬†&lt;code&gt;dict()&lt;/code&gt;¬†function and go from there.&lt;/p&gt;

&lt;p&gt;The "Bookings" endpoint is a bit more complex. Ably allows you to send a large number of messages into a single endpoint via webhooks. We'll be using batched webhooks, since this allows us to collate individual messages (up to 1000) into a single call. The first Pydantic model converts this batch into a Python object called an¬†&lt;code&gt;Ably_webhook&lt;/code&gt;. As the payload JSON data is serialized to strings in Ably webhooks, we need to do a second step, with a simple list comprehension to deserialize these to objects before they can be published into Kafka.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuring-ngrok"&gt;
  &lt;/a&gt;
  Configuring Ngrok
&lt;/h3&gt;

&lt;p&gt;Ngrok is one of the most helpful developer tools out there for building systems that make use of webhooks. It provides you with a URL that serves as a proxy for external traffic to an internal API. Once you match the ports and the routes, you're good to go.&lt;/p&gt;

&lt;p&gt;First, you have to¬†&lt;a href="https://ngrok.com/download"&gt;download and set up Ngrok&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once that's done, start it up with this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ngrok http 8000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now see a window with your new URL:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YBSbhOon--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/IXHNAOcxJFc3dxFY4nF5L3ySCFLK2jr486TNGxyUktr4J_6sIyVdj4lQyCZxdUmXYeeTZAWvSUUQyzxDPg_Z7fIY5c0acOJ46eJauVDAMitxmXI3_cI-nkYac0J7MRGF0DKQcQe0%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YBSbhOon--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/IXHNAOcxJFc3dxFY4nF5L3ySCFLK2jr486TNGxyUktr4J_6sIyVdj4lQyCZxdUmXYeeTZAWvSUUQyzxDPg_Z7fIY5c0acOJ46eJauVDAMitxmXI3_cI-nkYac0J7MRGF0DKQcQe0%3Ds0" alt="Configuring Ngrok"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have your URL, you need to¬†&lt;a href="https://faqs.ably.com/how-to-set-up-a-reactor-rule"&gt;set up a new Ably Reactor rule&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9lWC2n8z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/3oS-PeCLUh20vrwsuCUXoZCkdDJDqvoatswWpclCAmBafqJb9m-D13ivzEwknE_IyQyD9SxCMmObVaQ-xvk1xOVKcasGbWedpk78bWCw9-mZmQqv3th_Wn_Kt7wdTJAFkl0PkKc9%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9lWC2n8z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/3oS-PeCLUh20vrwsuCUXoZCkdDJDqvoatswWpclCAmBafqJb9m-D13ivzEwknE_IyQyD9SxCMmObVaQ-xvk1xOVKcasGbWedpk78bWCw9-mZmQqv3th_Wn_Kt7wdTJAFkl0PkKc9%3Ds0" alt="Ably Integration Rules"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add your Ngrok URL as the target, set it to batched mode, and add¬†&lt;code&gt;bookings:*&lt;/code&gt;¬†in the ¬†Channel Filter field. What this does is add a filter to all the channels created by your application; any channel that has a name starting with "bookings:" will be automatically processed by this rule.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CVpba1Ky--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/PjcXX24Atpi-u32icLl-XaksDY4l-rsKJWGBaCDjLpEQAlSZfP3J1lPauK7KXlrX-ZW9ie3EDLh9rYssADV_EK8kMPL5ArZ_cyAbzubxI4AT1l-wlU9xjbC5_qQeHpVTQwH8QDCR%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CVpba1Ky--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/PjcXX24Atpi-u32icLl-XaksDY4l-rsKJWGBaCDjLpEQAlSZfP3J1lPauK7KXlrX-ZW9ie3EDLh9rYssADV_EK8kMPL5ArZ_cyAbzubxI4AT1l-wlU9xjbC5_qQeHpVTQwH8QDCR%3Ds0" alt="Setting up a new integration rule in Ably"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you test the new rule, you should see data hit your API. Note that it will throw an error, due to the empty message payload:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JQLJkSkQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/yHjBgYRc8-vMrj_I3Pkv4vl3u5SRSIkAR8jdAiRXnuB_FklW4q5by6WzNJtigdr6XnaQKL9mYuycZFh1UD6RARLkug1xMAqsMKVZ1swTBeefSE2lwaMQi0dLk7YA9iW4eQiguagC%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JQLJkSkQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/yHjBgYRc8-vMrj_I3Pkv4vl3u5SRSIkAR8jdAiRXnuB_FklW4q5by6WzNJtigdr6XnaQKL9mYuycZFh1UD6RARLkug1xMAqsMKVZ1swTBeefSE2lwaMQi0dLk7YA9iW4eQiguagC%3Ds0" alt="Expected error while triggering this rule"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On your console, you should see the following message, which confirms that the webhook has reached the API (but has been rejected for not conforming to the specification):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QWgRCHLF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/fkXV8NjXnrsAAyTb_-g1id4RiGyDHTnRYx5Aqo7QB1JmkVPIoC8L55UT--5G6Lhf6BYVfdDTdqJXQKBihTBqujtcrqAka18yECFEHWaJEog26_eag0ydvn1rfemcRl1Vu-VGBse5%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QWgRCHLF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/fkXV8NjXnrsAAyTb_-g1id4RiGyDHTnRYx5Aqo7QB1JmkVPIoC8L55UT--5G6Lhf6BYVfdDTdqJXQKBihTBqujtcrqAka18yECFEHWaJEog26_eag0ydvn1rfemcRl1Vu-VGBse5%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't worry that you are getting errors at this point; the purpose is simply to test that the webhooks are indeed reaching their destination endpoint.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#putting-it-all-together"&gt;
  &lt;/a&gt;
  Putting it all together
&lt;/h3&gt;

&lt;p&gt;It's time to see how the components of our system interact with one another, and how data travels in realtime.&lt;/p&gt;

&lt;p&gt;Let's start by generating some conferences! We can do this by using the generation script called¬†&lt;code&gt;event-creation.py&lt;/code&gt;, which you can find in the¬†&lt;a href="https://github.com/ably-labs/booking-calander/tree/main/test-scripts"&gt;testing folder&lt;/a&gt;. The script creates a defined set of JSON payloads - these are events (conferences) that start from the current date. All of them have random names and ticket numbers. The conferences are offset through time to make it a bit easier to see the streaming window in action.&lt;/p&gt;

&lt;p&gt;Once you've run the script, you'll see the data hit the API, create the "Conferences" topic in Kafka, and add the schema to the Confluent Schema Registry.&lt;/p&gt;

&lt;p&gt;You can see the list of conferences in the Confluent Control Center:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eG6EvVVV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/Qwu_YslnElmcmpEPnvyudtSrIBck0D6jwo7CvKjwxBR1lOUD0DZDeYErd_Q8cWaPSZOAvq_SjOZaG1txcVYrggtdEWSUW_byfm5MkPQDuNcFr3ERtVzJzBk1utmec2gnh54hArid%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eG6EvVVV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/Qwu_YslnElmcmpEPnvyudtSrIBck0D6jwo7CvKjwxBR1lOUD0DZDeYErd_Q8cWaPSZOAvq_SjOZaG1txcVYrggtdEWSUW_byfm5MkPQDuNcFr3ERtVzJzBk1utmec2gnh54hArid%3Ds0" alt="List of conferences in the Confluent Control Center"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we have created some conferences, we can start working with ksqlDB, a powerful tool that allows you to explore and learn about your data by creating tables and streams; additionally, ksqlDB also provides enrichment and data transformation features. For our demo, we'll only use a small subset of ksqlDB's capabilities. You can find all of the queries in the¬†&lt;a href="https://github.com/ably-labs/booking-calander/tree/main/queries"&gt;queries folder&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, we must create a stream from these conferences so we can act upon them. Use the following query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE STREAM conferences WITH(
    KAFKA_TOPIC = 'conference-topic',
    VALUE_FORMAT = 'AVRO'
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how it looks in the Confluent Control Center:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0gHLpT8w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/vqx7GsNTCLMk0RWU0gYHH3H4ZTxz_X0tpWQ7vO55Q5y3FrEws4srUwYoZBr0bW3v9mwdrR1QNFFePg4GHP9dh8vTBC_Lse1xesm726BpbXjjhvXrTvO5pRRVCqn6PVcZ8ZTUSeFX%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0gHLpT8w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/vqx7GsNTCLMk0RWU0gYHH3H4ZTxz_X0tpWQ7vO55Q5y3FrEws4srUwYoZBr0bW3v9mwdrR1QNFFePg4GHP9dh8vTBC_Lse1xesm726BpbXjjhvXrTvO5pRRVCqn6PVcZ8ZTUSeFX%3Ds0" alt="ksqlDB in the Confluent Control Center"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we need to query which of these conferences are bookable, and put them into another stream.&lt;/p&gt;

&lt;p&gt;Like any good SQL engine, we can get the current time, and then compare that against the booking windows, by using another query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE STREAM current_conferences AS SELECT * FROM conferences
WHERE BOOKINGSTART &amp;lt; (UNIX_TIMESTAMP()/1000)
AND BOOKINGEND &amp;gt; (UNIX_TIMESTAMP()/1000)
EMIT CHANGES;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you now query this new stream, you'll see just the subset of the conferences that are actually ¬†accepting bookings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--leboo4Q3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/1L5fI0VkNJROHkqj43Uz2xDM6FXAUUdwTuraENss1jfipmTmZtGb-lQGs8RNKoNdGh7oeohoRc-C0oZcI10se21jUrmGbPp4l0ck-PnM4y3qHOARRnBCr9nhPbW-WfAK3E-T6wBt%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--leboo4Q3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/1L5fI0VkNJROHkqj43Uz2xDM6FXAUUdwTuraENss1jfipmTmZtGb-lQGs8RNKoNdGh7oeohoRc-C0oZcI10se21jUrmGbPp4l0ck-PnM4y3qHOARRnBCr9nhPbW-WfAK3E-T6wBt%3Ds0" alt="Subset of the conferences that are actually  accepting bookings."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As these queries are continuous, if you then add more conferences to the system, you'll get more of the current events. If you modify the upstream windowing query by adding a time offset to the current timestamp, you can move the window through time and see the events in the¬†&lt;code&gt;current_conferences&lt;/code&gt;¬†stream change.&lt;/p&gt;

&lt;p&gt;Next, we have to make a table of bookings. For this purpose, we will join a stream of current conferences with a summation of all of the bookings for these conferences. To do this, first we sum up all of the bookings for each conference into a table with this query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE booking_list(
    id bigint PRIMARY KEY
  ) WITH (
    KAFKA_TOPIC = 'booking-topic',
    VALUE_FORMAT = 'AVRO'
  );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, to join them with the conferences stream, we only want the total number of bookings per conference (the user details should be dropped). The following query counts them up into buckets, using the¬†&lt;code&gt;eventID&lt;/code&gt;¬†and the number of bookings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE bookings_per_event AS
 SELECT eventID,
       SUM(TICKETNUMBER) AS TOTAL_BOOKINGS
 FROM  BOOKINGS
 GROUP BY eventID;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have a table and a stream that share a common key which we can do a left join on. This is an example of classic enrichment-type processes that ksqlDB supports. There are many fancier ways to do this, and ways to include far more detailed data per message, but for the sake of simplicity and brevity, I won't go into additional details.&lt;/p&gt;

&lt;p&gt;The join we are looking to do builds a new Kafka topic, which we can use as an output for the Ably Kafka Connector:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE STREAM output_stream
   WITH (kafka_topic='out-topic',
         value_format='json') AS
   SELECT current_conferences.EVENTID as id, EVENTCAPACITY, TOTAL_BOOKINGS, EVENTDATE, BOOKINGSTART, BOOKINGEND
   FROM current_conferences
   LEFT JOIN BOOKINGS_PER_EVENT ON  current_conferences.EVENTID = BOOKINGS_PER_EVENT.EVENTID;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that we are using JSON as the output format; although we could send any data format into Ably, JSON is an open standard, and the default choice for web and mobile applications. It also makes the output human-readable.&lt;/p&gt;

&lt;p&gt;Another thing worth mentioning is that ksqlDB is sending the output to an explicitly defined Kafka topic. We could configure ksqlDB to output directly to the Ably Kafka Connector; however, it makes more sense for the data to be written to a Kafka topic, since in a real-life scenario, you might have additional, non-Ably services connected to Kafka that are consuming that data. ¬†&lt;/p&gt;

&lt;p&gt;We can now visualize the data stream in the "Flow" tab on the ksqlDB page in the Confluent Control Center.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z9A_CR2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/jBWxLpiiBnMJFMxyzuprvqsZIATJLyzGkCV26aam0UkXWHiab17UYO5Ze3sliPE-cV5nbqv7pfo1jf2rZXabmkYqKchc4bGO-DH8tyIf6SkzBFLA2pjno0vO74yiSpbTY-NfJLGF%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z9A_CR2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/jBWxLpiiBnMJFMxyzuprvqsZIATJLyzGkCV26aam0UkXWHiab17UYO5Ze3sliPE-cV5nbqv7pfo1jf2rZXabmkYqKchc4bGO-DH8tyIf6SkzBFLA2pjno0vO74yiSpbTY-NfJLGF%3Ds0" alt="ksqlDB"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, let's now see how to configure sending data from Kafka into Ably via the¬†&lt;a href="https://www.confluent.io/hub/ably/kafka-connect-ably"&gt;Ably Kafka Connector&lt;/a&gt;. Once you've configured the¬†&lt;code&gt;ChannelSinkConnector&lt;/code&gt;¬†we mentioned earlier in the guide, you need to select a name for the connector, and choose the topic(s) it should read from.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8yfrfCl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/rpR5cor59R_p1Evq8EozwMpuJTc3yPdVeenGII89UG7YNmWzYcxkqF69F3IW_SgoNmCgUDJ6vb_nshhbNmDL2pMrA-HruK6kRYbOCgkm0C7cIIw5kQq5H3e9P5Uj_ndv06YoT1xh%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8yfrfCl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/rpR5cor59R_p1Evq8EozwMpuJTc3yPdVeenGII89UG7YNmWzYcxkqF69F3IW_SgoNmCgUDJ6vb_nshhbNmDL2pMrA-HruK6kRYbOCgkm0C7cIIw5kQq5H3e9P5Uj_ndv06YoT1xh%3Ds0" alt="How to configure sending data from Kafka into Ably via the Ably Kafka Connector"&gt;&lt;/a&gt;\&lt;br&gt;
Then, there are several optional steps that we'll skip, as the data we are dealing with is rather simple, and we already used ksqlDB to filter and enrich it.&lt;/p&gt;

&lt;p&gt;The next required step is to add an¬†&lt;a href="https://faqs.ably.com/setting-up-and-managing-api-keys"&gt;Ably API key&lt;/a&gt;, choose an Ably¬†&lt;a href="https://ably.com/documentation/core-features/channels"&gt;channel&lt;/a&gt;¬†to publish on, and give the connector an Id:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AHHwbq1u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/07okpJ1EH2wNmyHMTWqqR7Mp5ORTiTtFFzYLKo1QNWiLxmOipFVCfPhDYX1eFc5Q09ME4Bqsf6iCi4phoMM2QPMjmfc1uCQYw6qpHATmT2rMv3C4hZhqf0aA0ofM8Akx85kz49Xm%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AHHwbq1u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/07okpJ1EH2wNmyHMTWqqR7Mp5ORTiTtFFzYLKo1QNWiLxmOipFVCfPhDYX1eFc5Q09ME4Bqsf6iCi4phoMM2QPMjmfc1uCQYw6qpHATmT2rMv3C4hZhqf0aA0ofM8Akx85kz49Xm%3Ds0" alt="how to configure sending data from Kafka into Ably via the Ably Kafka Connector"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have completed these mandatory steps, scroll to the bottom and click the Next button; you should see this screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e9bHOozY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/sTfstzKyTKZbMFws3S7dpLBZpn0FFqe9X6wEQbOLgcBFfUtzlkfWy9sbzWECTFMuqgIWZLVoEPPb6AxHUgWDBTZYU6Ac0xdQ8FjiHHn4GMLLKrXkupsvZbYAt6W29wA3wQLUFYyp%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e9bHOozY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/sTfstzKyTKZbMFws3S7dpLBZpn0FFqe9X6wEQbOLgcBFfUtzlkfWy9sbzWECTFMuqgIWZLVoEPPb6AxHUgWDBTZYU6Ac0xdQ8FjiHHn4GMLLKrXkupsvZbYAt6W29wA3wQLUFYyp%3Ds0" alt="how to configure sending data from Kafka into Ably via the Ably Kafka Connector"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that you can download the connector config file in case you plan to use this setup outside of the Confluent Platform, or self-host the connector yourself.&lt;/p&gt;

&lt;p&gt;Now, whenever conferences are added to your system and bookings are made, you'll see the enriched stream of always-up-to-date data traveling through the Ably channel, ready to be delivered in realtime to any number of concurrent browsers and mobile app users.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The ticket booking solution we just built is deliberately simplistic. Several moving parts are involved: a REST API to create conferences, a realtime API to book tickets, and an event-driven layer to store and process data related to conferences and any changes it goes through. ¬†&lt;/p&gt;

&lt;p&gt;Since the Kafka + ksqlDB engine allows you to do realtime processing on a continuous stream of conference-related data, it's easy to add more functionality, such as waiting lists and the ability to cancel conferences.&lt;/p&gt;

&lt;p&gt;Due to Kafka's pub/sub nature, it's also low-risk to add steps for handling payments and user management; all you have to do is put in some additional microservices (consumers and producers) between Kafka topics.&lt;/p&gt;

&lt;p&gt;The dependability of the system is guaranteed by both Kaka and Ably. When hosted right, Kafka provides features such as low latency, high throughput and concurrency, fault tolerance, and high availability.&lt;/p&gt;

&lt;p&gt;By using Ably as your public Internet-facing messaging layer, you benefit from a massively scalable¬†&lt;a href="https://ably.com/network"&gt;global edge network&lt;/a&gt;¬†built for¬†&lt;a href="https://ably.com/four-pillars-of-dependability#performance"&gt;high performance&lt;/a&gt;, unique¬†&lt;a href="https://ably.com/four-pillars-of-dependability#integrity"&gt;data ordering and delivery guarantees&lt;/a&gt;¬†that ensure seamless end-user experiences, and legitimate 99.999% uptime SLAs thanks to our¬†&lt;a href="https://ably.com/four-pillars-of-dependability"&gt;fault tolerant infrastructure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope this guide serves as a helpful description and walkthrough of building a dependable realtime ticket booking solution. Next, you can dive into the¬†&lt;a href="https://github.com/ably-labs/Realtime-ticket-booking-solution"&gt;GitHub repository.&lt;/a&gt;¬†You might also want to check out¬†&lt;a href="https://github.com/ably-labs"&gt;Ably Labs&lt;/a&gt;¬†on GitHub, for more examples of what you can do with Ably.&lt;/p&gt;

&lt;p&gt;Further reading&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://ably.com/blog/ably-kafka-connector-extend-kafka-to-the-edge"&gt;Ably Kafka Connector: extend Kafka to the edge reliably and safely&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.confluent.io/hub/ably/kafka-connect-ably"&gt;Ably Kafka Connector on Confluent Hub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://ably.com/topic/websockets-kafka"&gt;How to stream Kafka messages to Internet-facing clients over WebSockets&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://ably.com/blog/dependable-realtime-banking-with-kafka-and-ably"&gt;Dependable realtime banking with Kafka and Ably&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="http://twitter.com/share?text=Building%20a%20realtime%20ticket%20booking%20solution%20with%20Kafka%2C%20FastAPI%2C%20and%20Ably&amp;amp;url=https://www.ably.io/blog/realtime-ticket-booking-solution-kafka-fastapi-ably/"&gt;&lt;/a&gt;&lt;a href="https://www.facebook.com/sharer/sharer.php?u=https://www.ably.io/blog/realtime-ticket-booking-solution-kafka-fastapi-ably/"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>eventdriven</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
