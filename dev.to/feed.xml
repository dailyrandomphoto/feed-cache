<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Building a web3 frontend with React</title>
      <author>Rounak Banik</author>
      <pubDate>Sun, 28 Nov 2021 10:46:46 +0000</pubDate>
      <link>https://dev.to/rounakbanik/building-a-web3-frontend-with-react-340c</link>
      <guid>https://dev.to/rounakbanik/building-a-web3-frontend-with-react-340c</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aS9pjcuV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2atk7k2oyoew8gpifj28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aS9pjcuV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2atk7k2oyoew8gpifj28.png" alt="React + Scrappy Squirrels" width="880" height="309"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In a &lt;a href="https://dev.to/rounakbanik/writing-an-nft-collectible-smart-contract-2nh8"&gt;previous tutorial&lt;/a&gt;, we covered how to create and deploy an NFT collectible smart contract from scratch. We also explored how to verify our contract on etherscan and enable yourself as well as your users to call functions directly from the contract’s etherscan page.&lt;/p&gt;

&lt;p&gt;However, most serious projects tend to deploy their own websites and allow users to mint directly from the website.&lt;/p&gt;

&lt;p&gt;This is exactly what we will be covering in this tutorial. More specifically, this tutorial will show you how to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Let users connect their Metamask wallet to your website&lt;/li&gt;
&lt;li&gt;Allow users to call a contract function, make a payment, and mint an NFT from your collection.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By the end of this tutorial, you’ll have a fully functioning web3 frontend built with React. You will have also gained the foundational knowledge required to build any general-purpose web3 frontend (beyond an NFT minter).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kzOBMLAR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5n2m87tq72ncq2zi2ny.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kzOBMLAR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k5n2m87tq72ncq2zi2ny.png" alt="React Tutorial" width="880" height="481"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This tutorial assumes you have already developed and deployed your smart contract to the Rinkeby test network. If you haven’t, we strongly suggest you go through &lt;a href="https://dev.to/rounakbanik/writing-an-nft-collectible-smart-contract-2nh8"&gt;this tutorial&lt;/a&gt;. In order to follow along with this tutorial, you will need the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The ABI file for your smart contract (which is available in the &lt;em&gt;artifacts&lt;/em&gt; folder of your smart contract project).&lt;/li&gt;
&lt;li&gt;The address of your smart contract.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We also assume that you have experience working with React and Javascript. If not, we strongly suggest you go through the &lt;a href="https://reactjs.org/tutorial/tutorial.html"&gt;official tutorial on React’s website&lt;/a&gt; first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-project"&gt;
  &lt;/a&gt;
  Setting up the project
&lt;/h2&gt;

&lt;p&gt;Let’s start off by creating a React project using &lt;code&gt;create-react-app&lt;/code&gt;. Open your terminal and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app nft-collectible-frontend
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The installation process will take anywhere between 2–10 minutes. Once its done, check that everything is working by running the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd nft-collectible-frontend
npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If all goes well, you should see your browser open a new tab at &lt;a href="http://localhost:3000/"&gt;localhost://3000&lt;/a&gt; with the following screen. Pretty standard React stuff.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KzE6TvWC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/byzvf3q49ybu6awir1f2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KzE6TvWC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/byzvf3q49ybu6awir1f2.png" alt="React starter website" width="880" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s do a little cleanup now.&lt;/p&gt;

&lt;p&gt;Go to &lt;code&gt;public/index.html&lt;/code&gt; and change the title and meta description of your website. This step is optional.&lt;/p&gt;

&lt;p&gt;Next, go to the src folder and delete the &lt;code&gt;App.test.js&lt;/code&gt;, &lt;code&gt;logo.svg&lt;/code&gt;, and &lt;code&gt;setupTests.js&lt;/code&gt; files. We will not be needing these files for this tutorial.&lt;/p&gt;

&lt;p&gt;Go to the &lt;code&gt;App.js&lt;/code&gt; file and replace its contents with the following boilerplate.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import './App.css';

function App() {
    return (
        &amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;
    );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remove all the contents of &lt;code&gt;App.css&lt;/code&gt; as well. Do not, however, delete this file. In a later section, we will provide you with some basic styling that should be good enough for this demo project.&lt;/p&gt;

&lt;p&gt;If you go back to localhost, you should see a screen that says &lt;strong&gt;Hello World&lt;/strong&gt;. We now have a basic react project set up and good to go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-contract-abi-and-address"&gt;
  &lt;/a&gt;
  Getting contract ABI and address
&lt;/h2&gt;

&lt;p&gt;For our React frontend to be able to connect and communicate with our smart contract, it needs the contract’s ABI and address.&lt;/p&gt;

&lt;p&gt;ABI (or Application Binary Interface) is a JSON file that is automatically generated during contract compilation. The blockchain we deploy to stores our smart contract in the form of bytecode. In order to invoke functions on it, pass the correct parameters, and parse return values using a high-level language, we need to specify details about the functions and the contract (such as name, arguments, types, etc.) to our frontend. This is exactly what the ABI file does. In order to learn more about the ABI, we suggest you go through &lt;a href="https://www.quicknode.com/guides/solidity/what-is-an-abi"&gt;this excellent post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To find your ABI file, go to your hardhat project and navigate to &lt;code&gt;artifacts/contracts/NFTCollectible.sol/NFTCollectible.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN-SOV-F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymm08q5ufrxk368ayon3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN-SOV-F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymm08q5ufrxk368ayon3.png" alt="Folder tree" width="274" height="503"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We need to now copy the JSON file to our React project. Create a new folder called &lt;code&gt;contracts&lt;/code&gt; in the &lt;code&gt;src&lt;/code&gt; folder and paste the &lt;code&gt;NFTCollectible.json&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;You should already have the address of your deployed smart contract. (If you don’t just deploy it to Rinkeby again, and get the latest address and ABI file).&lt;/p&gt;

&lt;p&gt;Our contract address from the previous tutorial is 0x355638a4eCcb777794257f22f50c289d4189F245. We will be using this contract in this tutorial too.&lt;/p&gt;

&lt;p&gt;Let us now import the contract ABI and define the contract address in the &lt;code&gt;App.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pD7SzVQ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hqetfa7sb4rkslu3df5y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pD7SzVQ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hqetfa7sb4rkslu3df5y.png" alt="App.js" width="880" height="638"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-boilerplate-html-css-and-js"&gt;
  &lt;/a&gt;
  Setting up boilerplate HTML, CSS, and JS
&lt;/h2&gt;

&lt;p&gt;Our website is going to be incredibly simple. All it will have is a heading and a &lt;em&gt;Connect Wallet&lt;/em&gt; button. Once the wallet is connected, the &lt;em&gt;Connect Wallet&lt;/em&gt; button will be replaced by a &lt;em&gt;Mint NFT&lt;/em&gt; button.&lt;/p&gt;

&lt;p&gt;We’re not going to bother with creating separate component files. Instead, we will write all our HTML and logic in &lt;code&gt;App.js&lt;/code&gt; and all our CSS in &lt;code&gt;App.css&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Copy the contents of the following Github gist into your &lt;code&gt;App.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useEffect } from 'react';
import './App.css';
import contract from './contracts/NFTCollectible.json';

const contractAddress = "0x355638a4eCcb777794257f22f50c289d4189F245";
const abi = contract.abi;

function App() {

  const checkWalletIsConnected = () =&amp;gt; { }

  const connectWalletHandler = () =&amp;gt; { }

  const mintNftHandler = () =&amp;gt; { }

  const connectWalletButton = () =&amp;gt; {
    return (
      &amp;lt;button onClick={connectWalletHandler} className='cta-button connect-wallet-button'&amp;gt;
        Connect Wallet
      &amp;lt;/button&amp;gt;
    )
  }

  const mintNftButton = () =&amp;gt; {
    return (
      &amp;lt;button onClick={mintNftHandler} className='cta-button mint-nft-button'&amp;gt;
        Mint NFT
      &amp;lt;/button&amp;gt;
    )
  }

  useEffect(() =&amp;gt; {
    checkWalletIsConnected();
  }, [])

  return (
    &amp;lt;div className='main-app'&amp;gt;
      &amp;lt;h1&amp;gt;Scrappy Squirrels Tutorial&amp;lt;/h1&amp;gt;
      &amp;lt;div&amp;gt;
        {connectWalletButton()}
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(Remember to set the correct contract address on line 5)&lt;/p&gt;

&lt;p&gt;Notice that we have defined a few functions for you which do not do a lot at the moment. We will be explaining their purpose and populating them with logic as we proceed with this tutorial.&lt;/p&gt;

&lt;p&gt;We have a small amount of CSS for you to use too. Copy the following into your &lt;code&gt;App.css&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.main-app {
    text-align: center;
    margin: 100px;
}

.cta-button {
    padding: 15px;
    border: none;
    border-radius: 12px;
    min-width: 250px;
    color: white;
    font-size: 18px;
    cursor: pointer;
}

.connect-wallet-button {
    background: rgb(32, 129, 226);
}

.mint-nft-button {
    background: orange;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your website should now look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HaNYVeqm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzmmz65rhjqngyjk1tpx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HaNYVeqm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzmmz65rhjqngyjk1tpx.png" alt="Frontend" width="880" height="483"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to customize the look of the website by adding more styles and static elements (images, header, footer, social media links, etc.).&lt;/p&gt;

&lt;p&gt;We’ve put together most of the foundational blocks of the project. We are now in a good position to tackle one of the first major objectives of this tutorial: allowing a user to connect their wallet to our website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connecting-metamask-wallet"&gt;
  &lt;/a&gt;
  Connecting Metamask Wallet
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2BKxC6TA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oamoap1p2sblkrlbqtoe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2BKxC6TA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oamoap1p2sblkrlbqtoe.png" alt="Metamask" width="555" height="368"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For a user to call functions from our contract, they need to be able to connect their wallet to our website. The wallet will enable the user to pay gas and the sale price in order to mint an NFT from our collection.&lt;/p&gt;

&lt;p&gt;In this tutorial, we will be working exclusively with the Metamask wallet and its suite of APIs. Off-the-shelf solutions like &lt;a href="https://moralis.io/"&gt;Moralis&lt;/a&gt; and &lt;a href="https://www.npmjs.com/package/web3modal"&gt;web3modal&lt;/a&gt; exist that allow you to add support for multiple wallets with very few lines of code. But for this project, we will focus on implementing connect wallet functionality from scratch. We will cover solutions like Moralis in a later tutorial.&lt;/p&gt;

&lt;p&gt;We assume you already have the Metamask wallet extension installed in your browser. If you do, Metamask injects an &lt;code&gt;ethereum&lt;/code&gt; object into your browser’s global &lt;code&gt;window&lt;/code&gt; object. We will be accessing &lt;code&gt;window.ethereum&lt;/code&gt; to perform the bulk of our functionality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#checking-if-metamask-wallet-exists"&gt;
  &lt;/a&gt;
  Checking if Metamask Wallet Exists
&lt;/h3&gt;

&lt;p&gt;A user cannot mint NFTs on our website unless they have a Metamask wallet. Let’s populate the &lt;code&gt;checkWalletIsConnected&lt;/code&gt; function within the &lt;code&gt;App&lt;/code&gt; component that checks if the Metamask wallet exists.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q2pKDjBM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9x3wluw6nofif4bu3z4o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q2pKDjBM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9x3wluw6nofif4bu3z4o.png" alt="Code" width="453" height="191"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that we have also defined the &lt;code&gt;useEffect&lt;/code&gt; hook that checks Metamask’s existence when the App component loads.&lt;/p&gt;

&lt;p&gt;Open the console on your app’s localhost page. If you have Metamask installed, you should see a message that says &lt;em&gt;Wallet exists! We’re ready to go!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nXK_ZLvR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjglm085ox31okd3gn7r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nXK_ZLvR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rjglm085ox31okd3gn7r.png" alt="Browser console output" width="417" height="510"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connecting-metamask-programmatically"&gt;
  &lt;/a&gt;
  Connecting Metamask Programmatically
&lt;/h3&gt;

&lt;p&gt;Just because we have the Metamask extension installed doesn’t mean that Metamask will automatically connect to every website we visit. We need to prompt Metamask to ask the user to do so.&lt;/p&gt;

&lt;p&gt;This is where the &lt;em&gt;Connect Wallet&lt;/em&gt; functionality comes in. It is the web3 equivalent of a login button. It allows the user to connect and send contract function call requests through the website frontend.&lt;/p&gt;

&lt;p&gt;Metamask makes this process remarkably simple with the &lt;code&gt;window.ethereum.request&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Let’s first define a variable in &lt;code&gt;App()&lt;/code&gt; with the useState hook that will keep track of the user’s wallet address. (Don’t forget to import &lt;code&gt;useState&lt;/code&gt; from React!)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [currentAccount, setCurrentAccount] = useState(null);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let’s define the &lt;code&gt;connectWalletHandler&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CtNJghcS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wtg2cpe30pfp7fqc14a5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CtNJghcS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wtg2cpe30pfp7fqc14a5.png" alt="Code" width="628" height="275"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s briefly go through what this function does.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It checks if you have Metamask installed. If not, the website displays a pop-up asking you to install Metamask.&lt;/li&gt;
&lt;li&gt;It requests Metamask for the user’s wallet addresses.&lt;/li&gt;
&lt;li&gt;Once the user has consented to connect with the website, it takes the first wallet address that is available and sets it as the value of the currentAccount variable.&lt;/li&gt;
&lt;li&gt;If something goes wrong (such as the user refusing to connect), it fails and prints an error message to the console.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At the moment, if you open the Metamask extension on your website, it will tell you that you’re not connected.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pJYrqNX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6icgk9022dyqtu0pqel5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pJYrqNX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6icgk9022dyqtu0pqel5.png" alt="Metamask wallet" width="880" height="526"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is now time for the moment of truth. Click on the &lt;em&gt;Connect Wallet&lt;/em&gt; button on your website. Metamask will prompt you to connect with the website. Once you agree to do so, your extension screen will look like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RyGmFruT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3o1csu71wxdsv9rt01u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RyGmFruT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3o1csu71wxdsv9rt01u.png" alt="Metamask wallet" width="356" height="596"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! We have successfully connected our wallet to our website.&lt;/p&gt;

&lt;p&gt;Once the wallet is connected, we should ideally replace the &lt;em&gt;Connect Wallet&lt;/em&gt; button with a &lt;em&gt;Mint NFT&lt;/em&gt; button. In the return value of App , let’s replace the render of a &lt;em&gt;Connect Wallet&lt;/em&gt; button with a conditional render.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{currentAccount ? mintNftButton() : connectWalletButton()}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our website should now look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AqcyLsa6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqp00nwj98isz0u59w1m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AqcyLsa6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqp00nwj98isz0u59w1m.png" alt="Mint NFT" width="522" height="243"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s refresh our page and check our extension. You will see that Metamask tells us that we are still connected to the website but our website still displays a &lt;em&gt;Connect Wallet&lt;/em&gt; button.&lt;/p&gt;

&lt;p&gt;If you’re familiar with React, it should be obvious why this is happening. After all, we are setting the &lt;code&gt;currentAccount&lt;/code&gt; state only within the &lt;code&gt;connectWallet&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Ideally what should happen is that the website should check if the wallet is connected every time the &lt;code&gt;App&lt;/code&gt; component is loaded (i.e every time we refresh).&lt;/p&gt;

&lt;p&gt;Let us extend the &lt;code&gt;checkWalletIsConnected&lt;/code&gt; function to check for accounts as soon as the website is loaded and set currentAccount if the wallet has already been connected.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IMmNlPTi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhy8d4qtxpt6o2v12nmk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IMmNlPTi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhy8d4qtxpt6o2v12nmk.png" alt="Code" width="544" height="380"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Note that we have marked this function async ). Let’s briefly touch upon what this function does:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It checks if Metamask is installed and outputs result to the console.&lt;/li&gt;
&lt;li&gt;It attempts to request Metamask for accounts that are connected.&lt;/li&gt;
&lt;li&gt;If Metamask is already connected, it obliges by giving the function a list of accounts. If not, an empty list is returned.&lt;/li&gt;
&lt;li&gt;If the list is not empty, the function picks the first account sent over by Metamask and sets it as the current account.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you now refresh the page, you will see that the website indeed displays the &lt;em&gt;Mint NFT&lt;/em&gt; button as it should.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mint-nfts-from-the-website"&gt;
  &lt;/a&gt;
  Mint NFTs from the website
&lt;/h2&gt;

&lt;p&gt;Let us now implement the core functionality of our website. When a user clicks on the &lt;em&gt;Mint NFT&lt;/em&gt; button, we expect the following to happen:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Metamask prompts the user to pay the NFT’s price + gas.&lt;/li&gt;
&lt;li&gt;Once the user accepts, Metamask calls the mintNFT function of our contract on behalf of the user.&lt;/li&gt;
&lt;li&gt;It notifies the user about the success/failure of the transaction once it is complete.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To do this, we will require the &lt;code&gt;ethers&lt;/code&gt; library from our smart contract project. In your terminal, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install ethers
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us import this library in &lt;code&gt;App.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { ethers } from 'ethers';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, let’s populate the &lt;code&gt;mintNftHandler&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e8sjM8vG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/so14774uc0dxqqxyiu53.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e8sjM8vG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/so14774uc0dxqqxyiu53.png" alt="Code" width="702" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Don’t forget to mark this function as &lt;code&gt;async&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;As usual, let’s touch upon what this function does.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It tries to access the ethereum object injected by Metamask.&lt;/li&gt;
&lt;li&gt;If ethereum exists, it sets Metamask as the RPC provider. This means that you will be issuing requests to the miners using your Metamask wallet.&lt;/li&gt;
&lt;li&gt;To issue requests, the user will need to sign transactions using their private key. We access signer for this purpose.&lt;/li&gt;
&lt;li&gt;We then initiate an ethers Contract instance using the deployed contract’s address, the contract ABI, and the signer.&lt;/li&gt;
&lt;li&gt;We can now call functions on our contract through the aforementioned contract object. We call the mintNFT function and ask Metamask to send 0.01 ETH (which is the price we set for our NFT).&lt;/li&gt;
&lt;li&gt;We wait for the transaction to be processed and once it’s done, we output the transaction hash to the console.&lt;/li&gt;
&lt;li&gt;If anything fails (the wrong function called, wrong parameters passed, &amp;lt; 0.01 ETH sent, user rejected transaction, etc.), an error is printed to the console.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;On your website, open your browser’s console so that you are able to view the mining status in real-time.&lt;/p&gt;

&lt;p&gt;Now, click on the &lt;em&gt;Mint NFT&lt;/em&gt; button. Metamask will prompt you to pay 0.01 ETH + gas. The transaction will take approximately 15–20 seconds to process. Once it’s done, the transaction will be confirmed both by a Metamask popup and the console output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p4EGl3U8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mm6i8q7wbxfe8gu23272.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p4EGl3U8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mm6i8q7wbxfe8gu23272.png" alt="Website + Console" width="880" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can now view the NFT on Opensea too. &lt;a href="https://testnets.opensea.io/account"&gt;Navigate to your account on testnets.opensea.io&lt;/a&gt; and you should be able to see your latest NFT.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jCRcVXj6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fesdcf1u9h7rg96zj06u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jCRcVXj6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fesdcf1u9h7rg96zj06u.png" alt="Scrappy Squirrel" width="880" height="481"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ux-improvements-amp-conclusion"&gt;
  &lt;/a&gt;
  UX Improvements &amp;amp; Conclusion
&lt;/h2&gt;

&lt;p&gt;Congratulations! You now have a fully functioning web3 frontend that users can mint NFTs from.&lt;/p&gt;

&lt;p&gt;However, as you may have noticed, the UX of the website leaves a lot to be desired. Here are a few improvements that you should consider doing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ensure-the-user-is-connected-to-the-right-network"&gt;
  &lt;/a&gt;
  Ensure the user is connected to the right network
&lt;/h3&gt;

&lt;p&gt;Our website assumes that the user is connected to the Rinkeby Network when interacting with our website. This may not always be the case.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PlI0inJ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3u7n2dz3oclm6bmfzkx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PlI0inJ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3u7n2dz3oclm6bmfzkx.png" alt="Change network banner" width="880" height="483"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Can you implement functionality that gently alerts the user if s/he is not connected to Rinkeby (like OpenSea does)? Also, ensure that the user is not able to see the &lt;em&gt;Mint NFT&lt;/em&gt; button when connected to the wrong network.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#show-transaction-status"&gt;
  &lt;/a&gt;
  Show transaction status
&lt;/h3&gt;

&lt;p&gt;Currently, our website prints the transaction status onto the console. In a real project, you cannot really expect your users to open their console while interacting with the website.&lt;/p&gt;

&lt;p&gt;Can you implement state which tracks the transaction status and gives feedback to the user in real-time? It should show a loader when the transaction is processing, notify the user if the transaction has failed, and display the transaction hash/Opensea link if the transaction has succeeded.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prompt-metamask-even-if-funds-are-nonexistent"&gt;
  &lt;/a&gt;
  Prompt Metamask even if funds are non-existent
&lt;/h3&gt;

&lt;p&gt;If you do not have any ETH in your Metamask wallet, clicking on Mint NFT will not prompt Metamask at all. In fact, the user will receive no feedback.&lt;/p&gt;

&lt;p&gt;Can you ensure that Metamask is prompted even when the user has insufficient funds? It should ideally be Metamask that informs the user how much ETH is required and how much s/he is short by.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-quality-of-life-changes"&gt;
  &lt;/a&gt;
  Other Quality of life changes
&lt;/h3&gt;

&lt;p&gt;Here are a few other quality of life changes that you can consider.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Allow users to mint more than 1 NFT at a time.&lt;/li&gt;
&lt;li&gt;Add a few sample artworks from your NFT collection.&lt;/li&gt;
&lt;li&gt;Add a link to your collection on Opensea.&lt;/li&gt;
&lt;li&gt;Add the verified smart contract address so people can double-check what’s really happening behind the scenes.&lt;/li&gt;
&lt;li&gt;Add links to your Twitter, IG, and Discord.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Q580jZI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/825l21hl7cy0ms8x8zs7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Q580jZI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/825l21hl7cy0ms8x8zs7.png" alt="Rinkeby Squirrels" width="724" height="785"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our NFT sandbox project, &lt;a href="https://medium.com/scrappy-squirrels/getting-started-with-nft-collectibles-communities-for-free-24bab021a97"&gt;Rinkeby Squirrels&lt;/a&gt;, implements a majority of the UX upgrades mentioned here. &lt;a href="https://rsq-frontend.vercel.app/"&gt;Try and mint one here&lt;/a&gt; and see if you can notice the difference between it and the website we built.&lt;/p&gt;

&lt;p&gt;We will be launching future tutorials showing you how to implement a few of these upgrades. But we really suggest you try doing this yourself. You’ll be one step closer to becoming a web3 frontend master.&lt;/p&gt;

&lt;p&gt;If you have any questions or are stuck, reach out to us on our &lt;a href="https://discord.gg/8UqJXTX7Kd"&gt;Discord&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you don’t have questions, come say hi to us on our &lt;a href="https://discord.gg/8UqJXTX7Kd"&gt;Discord&lt;/a&gt; anyway! Also, if you liked our content, we would be super grateful if you tweet about us, follow us(@ScrappyNFTs and @Rounak_Banik), and invite your circle to our Discord. Thank you for your support!&lt;/p&gt;

&lt;p&gt;Final code repository: &lt;a href="https://github.com/rounakbanik/nft-collectible-frontend"&gt;https://github.com/rounakbanik/nft-collectible-frontend&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#about-scrappy-squirrels"&gt;
  &lt;/a&gt;
  &lt;em&gt;About Scrappy Squirrels&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.scrappysquirrels.co/"&gt;Scrappy Squirrels&lt;/a&gt; is a collection of 10,000+ randomly generated NFTs. Scrappy Squirrels are meant for buyers, creators, and developers who are completely new to the NFT ecosystem.&lt;/p&gt;

&lt;p&gt;The community is built around learning about the NFT revolution, exploring its current use cases, discovering new applications, and finding members to collaborate on exciting projects with.&lt;/p&gt;

&lt;p&gt;Join our community here: &lt;a href="https://discord.gg/8UqJXTX7Kd"&gt;https://discord.gg/8UqJXTX7Kd&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>blockchain</category>
    </item>
    <item>
      <title>Request/Response Cycle of Django — Basic</title>
      <author>Ahmet Onur Solmaz</author>
      <pubDate>Sun, 28 Nov 2021 10:43:29 +0000</pubDate>
      <link>https://dev.to/ahmetonurslmz/requestresponse-cycle-of-django-basic-4n7f</link>
      <guid>https://dev.to/ahmetonurslmz/requestresponse-cycle-of-django-basic-4n7f</guid>
      <description>&lt;p&gt;Django is a popular framework that is used by many high level tech companies for back-end development. Django has lots of handy structure to handle web applications. One of them is request/response cycle of django that we will cover today.&lt;br&gt;
Article is &lt;a href="https://en.ahmetonursolmaz.com.tr/request-response-cycle-of-django-basic/"&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.ahmetonursolmaz.com.tr/request-response-cycle-of-django-basic/"&gt;https://en.ahmetonursolmaz.com.tr/request-response-cycle-of-django-basic/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SR34W8ig--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6cf3x20wdvtpjdif63co.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SR34W8ig--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6cf3x20wdvtpjdif63co.png" alt="Image description" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Typesafe F# configuration binding</title>
      <author>Matt Thornton</author>
      <pubDate>Sun, 28 Nov 2021 09:34:51 +0000</pubDate>
      <link>https://dev.to/symbolica/typesafe-f-configuration-binding-16gp</link>
      <guid>https://dev.to/symbolica/typesafe-f-configuration-binding-16gp</guid>
      <description>&lt;p&gt;At &lt;a href="https://www.symbolica.dev"&gt;Symbolica&lt;/a&gt; we're building a symbolic execution service that explores every reachable state of a user's program and verifies assertions at each of these states to check that the program is correct. By default it will check for common undefined behaviours, such as out-of-bounds memory reads or divide by zero, but it can also be used with custom, application specific, assertions too just like the kind you'd write in a unit test. Seen from this perspective it's kind of like &lt;a href="https://fscheck.github.io/FsCheck/"&gt;FsCheck&lt;/a&gt; (or Haskell's &lt;a href="https://hackage.haskell.org/package/QuickCheck"&gt;QuickCheck&lt;/a&gt; or Python's &lt;a href="https://hypothesis.readthedocs.io/en/latest/"&gt;Hypothesis&lt;/a&gt;), but much more exhaustive and without the randomness.&lt;/p&gt;

&lt;p&gt;As much as we like finding bugs with Symbolica, we prefer to not write any in the first place. Our first line of defence is a strong type system, so that we can try to design types that make invalid states impossible and let the compiler tell us off when we make a mistake. For that reason we've opted to build our service using F# as it also interops nicely with the core part of our &lt;a href="https://github.com/Symbolica/Symbolica"&gt;symbolic executor&lt;/a&gt; which is written in C#.&lt;/p&gt;

&lt;p&gt;One of the many things we love about F# is that, by default, it doesn't permit &lt;code&gt;null&lt;/code&gt; as a regular value. This feature eliminates a whole class of errors caused by &lt;code&gt;null&lt;/code&gt; values, most notably the cursed &lt;code&gt;NullReferenceException&lt;/code&gt;. Another feature that we like is having access to the vast wealth of .NET libraries that exist. However, many of these are written in C# and so they are often places where &lt;code&gt;null&lt;/code&gt; values can sneak into an F# program through the backdoor at runtime. &lt;/p&gt;

&lt;p&gt;One area where this was frequently biting us was the binding of configuration data using the &lt;code&gt;Microsoft.Extensions.Configuration&lt;/code&gt; library. Due to this and other problems that we'll go into below, we created a safer alternative for configuration binding for F# projects called &lt;code&gt;Symbolica.Extensions.Configuration.FSharp&lt;/code&gt; and open-sourced it on &lt;a href="https://github.com/Symbolica/Symbolica.Extensions.Configuration.FSharp"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Symbolica"&gt;
        Symbolica
      &lt;/a&gt; / &lt;a href="https://github.com/Symbolica/Symbolica.Extensions.Configuration.FSharp"&gt;
        Symbolica.Extensions.Configuration.FSharp
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Provides a safe API for binding the dotnet IConfiguration to types in F#.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Symbolica.Extensions.Configuration.FSharp&lt;/h1&gt;
&lt;p&gt;Provides a safe API for binding an F# type from the dotnet &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.configuration.iconfiguration?view=dotnet-plat-ext-5.0" rel="nofollow"&gt;&lt;code&gt;IConfiguration&lt;/code&gt;&lt;/a&gt; interface. It is an F#-friendly alternative to using the reflection-based &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.configuration.configurationbinder.bind?view=dotnet-plat-ext-5.0" rel="nofollow"&gt;&lt;code&gt;ConfigurationBinder.Bind&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Motivation&lt;/h2&gt;
&lt;p&gt;Out-of-the-box dotnet provides what it calls the &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?view=aspnetcore-5.0" rel="nofollow"&gt;"the Options pattern"&lt;/a&gt; which it describes as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The options pattern uses classes to provide strongly typed access to groups of related settings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Whilst this might be "strongly typed" in the sense that you're interacting with statically typed options objects, the binding mechanism is not strictly safe and so the static types are often a lie. This leads to a few notable problems, especially when working with it from F#.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It's a large source of &lt;code&gt;NullReferenceException&lt;/code&gt;s because the binder will hapily set a value to &lt;code&gt;null&lt;/code&gt; if it's missing in the underlying config. This means your F# type is probably lying to you about the fact its value cannot be null. F# developers would rather model…&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Symbolica/Symbolica.Extensions.Configuration.FSharp"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#the-problems-with-raw-microsoftextensionsconfigurationbinder-endraw-"&gt;
  &lt;/a&gt;
  The problems with &lt;code&gt;Microsoft.Extensions.Configuration.Binder&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The best way to highlight the shortcomings of the defacto config binder is with an example. Let's say we want to model some logging options in our code. We might start out with a simple record type like this to represent the options.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;LoggingOptions&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
      &lt;span class="nc"&gt;Sink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where &lt;code&gt;Level&lt;/code&gt; represents how verbose we want the logging output to be, e.g. &lt;code&gt;"Debug"&lt;/code&gt; or &lt;code&gt;"Error"&lt;/code&gt; etc and &lt;code&gt;Sink&lt;/code&gt; is where we want to send the logs, for example it might be &lt;code&gt;"Console"&lt;/code&gt; or &lt;code&gt;"File"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's test this out with a little fsx script that we can run with FSI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Microsoft.Extensions.Configuration.Binder"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Microsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Extensions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Configuration&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;LoggingOptions&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Sink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="nc"&gt;ConfigurationBuilder&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;AddInMemoryCollection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"Logging:Level"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Debug"&lt;/span&gt;
              &lt;span class="s2"&gt;"Logging:Sink"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Console"&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ofList&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Build&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;GetSection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Logging"&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="nc"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LoggingOptions&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we're just seeding the in memory configuration provider with a dictionary of config data and then attempting to retrieve and bind the &lt;code&gt;LoggingOptions&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#problem-1-mutable-data-and-raw-null-endraw-values"&gt;
  &lt;/a&gt;
  Problem 1: Mutable data and &lt;code&gt;null&lt;/code&gt; values
&lt;/h3&gt;

&lt;p&gt;If we run the above script you might be expecting it to print out a &lt;code&gt;LoggingOptions&lt;/code&gt; with a &lt;code&gt;Level&lt;/code&gt; of &lt;code&gt;"Debug"&lt;/code&gt; and a &lt;code&gt;Sink&lt;/code&gt; of &lt;code&gt;"Console"&lt;/code&gt;. However, we actually hit a different problem. The above script throws the following exception.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;System.InvalidOperationException: Cannot create instance of type 'FSI_0008+LoggingOptions' because it is missing a public parameterless constructor.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's because an F# record doesn't contain a parameterless constructor, because all of the record’s properties must be properly initialised and &lt;code&gt;null&lt;/code&gt; isn't an allowed value. To make matters worse, the defacto binder mandates that the properties of the type being bound must be settable too, breaking immutability and making the use of a record to model options kind of pointless.&lt;/p&gt;

&lt;p&gt;There are two typical workarounds to this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define a mutable class instead of a record for the options type, like we would in C#.&lt;/li&gt;
&lt;li&gt;Add the &lt;code&gt;[&amp;lt;CLIMutable&amp;gt;]&lt;/code&gt; attribute to the &lt;code&gt;LoggingOptions&lt;/code&gt; record.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Neither of these are particularly pleasing. The first one means we have to give up on having immutable options types and the rest of the code base has to deal with the added complexity of potential mutability. The second is basically a hack which provides a mutable backdoor at runtime to our immutable type.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;[&amp;lt;CLIMutable&amp;gt;]&lt;/code&gt; actually opens up a can of worms because our types are now deceiving us. Our simple record purports to be immutable and never contain &lt;code&gt;null&lt;/code&gt; values and so in the rest of the code base we program as if this is the case. On the other hand the config binder isn’t abiding by these compile time invariants and may in fact initialise the record’s properties as &lt;code&gt;null&lt;/code&gt; at runtime.&lt;/p&gt;

&lt;p&gt;To see this in action, let's rerun the above example, but this time with the &lt;code&gt;[&amp;lt;CLIMutable&amp;gt;]&lt;/code&gt; attribute added to the &lt;code&gt;LoggingOptions&lt;/code&gt; and a missing value for the &lt;code&gt;Level&lt;/code&gt; In the raw config. The modified script looks like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Microsoft.Extensions.Configuration.Binder"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Microsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Extensions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Configuration&lt;/span&gt;

&lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CLIMutable&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;LoggingOptions&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Sink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="nc"&gt;ConfigurationBuilder&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;AddInMemoryCollection&lt;/span&gt;&lt;span class="o"&gt;([&lt;/span&gt; &lt;span class="s2"&gt;"Logging:Sink"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Console"&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ofList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Build&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;GetSection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Logging"&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="nc"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LoggingOptions&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running it produces this output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;LoggingOptions&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Level&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
                           &lt;span class="nc"&gt;Sink&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Console"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We see that the type system has lied to us because the value of &lt;code&gt;Level&lt;/code&gt; was actually &lt;code&gt;null&lt;/code&gt; at runtime. In this case it's relatively harmless, but in a real application it's likely that we'll have a more complex hierarchy of option types and so we'd end up trying to dereference a potentially &lt;code&gt;null&lt;/code&gt; object leading to the dreaded &lt;code&gt;NullReferenceException&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When working in F# we'd rather the config binder returned a &lt;code&gt;Result&lt;/code&gt; if the config couldn't be parsed and allow us to use an &lt;code&gt;Option&lt;/code&gt; type for config data that is, well, optional. Which leads us to the next problem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#problem-2-no-native-support-for-binding-dus"&gt;
  &lt;/a&gt;
  Problem 2: No native support for binding DUs
&lt;/h3&gt;

&lt;p&gt;As the defacto binder uses reflection to bind the raw config to "strongly typed objects", it only has support for a limited set of types. This includes all the primitive types, like &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;string&lt;/code&gt; and a few of the common BCL collection types like &lt;code&gt;List&lt;/code&gt; and &lt;code&gt;Dictionary&lt;/code&gt;. This is frustrating for both C# and F# developers that wish to use more complex types to model their options.&lt;/p&gt;

&lt;p&gt;Particularly frustrating for F# developers though is that this means it doesn't support discriminated unions (DUs) and therefore doesn't support types like &lt;code&gt;Option&lt;/code&gt;. To highlight this let's imagine we wanted to improve our &lt;code&gt;LoggingOptions&lt;/code&gt; so that the &lt;code&gt;Level&lt;/code&gt; was restricted to a discrete set of values. To do this we'll create a DU called &lt;code&gt;LoggingLevel&lt;/code&gt; and use it as the type for the &lt;code&gt;Level&lt;/code&gt; property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Microsoft.Extensions.Configuration.Binder"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Microsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Extensions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Configuration&lt;/span&gt;

&lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;RequireQualifiedAccess&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;LogLevel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Debug&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Info&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Warning&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt;

&lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CLIMutable&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;LoggingOptions&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;LogLevel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Sink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="nc"&gt;ConfigurationBuilder&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;AddInMemoryCollection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"Logging:Level"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Debug"&lt;/span&gt;
              &lt;span class="s2"&gt;"Logging:Sink"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Console"&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ofList&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Build&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;GetSection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Logging"&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="nc"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LoggingOptions&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're now supplying a config dictionary that looks correct, it has properties for both of &lt;code&gt;"Logging:Level"&lt;/code&gt; and &lt;code&gt;"Logging:Sink"&lt;/code&gt;, so let's run it and see what the output is.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;LoggingOptions&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Level&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
                           &lt;span class="nc"&gt;Sink&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Console"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we can see here that the binder has silently failed to bind the &lt;code&gt;Level&lt;/code&gt; property now that its type is &lt;code&gt;LoggingLevel&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;If we want to bind more complex type, we'll first have to bind to a simple type, like a &lt;code&gt;string&lt;/code&gt;, and then write a parser ourselves to turn that into a &lt;code&gt;LoggingLevel&lt;/code&gt;. That’s a slippery slope because it then probably means having something like a &lt;code&gt;ParsedLoggingConfig&lt;/code&gt; which we create from the more loosely typed &lt;code&gt;LoggingConfig&lt;/code&gt;. Resulting in us needing to define a fair amount of config parsing “boilerplate” anyway. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#problem-3-parse-dont-validate"&gt;
  &lt;/a&gt;
  Problem 3: Parse, don't validate
&lt;/h3&gt;

&lt;p&gt;The defacto binder doesn't really give us much help when our configuration is faulty. We can write some &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?view=aspnetcore-5.0#options-validation"&gt;options validators&lt;/a&gt; and wire these up with DI, but as Alexis King has taught us - &lt;a href="https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/"&gt;parse, don't validate&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In short, "parse, don't validate" tells us that it's better to parse data into a type, that once constructed must be valid, than it is to read the data into a more loosely typed object and then run some post-validation actions over the values to make sure they're correct. The primary reason being that if we know that our type only permits valid values, then we no longer have to wonder whether or not it's already been validated.&lt;/p&gt;

&lt;p&gt;The defacto configuration binder doesn't make it easy to adhere to this. It's easy to forget to register a validator for the options and then when they're accessed at runtime we instead get a rather unhelpful &lt;code&gt;null&lt;/code&gt; value, like we observed earlier. What we'd prefer is for the compiler to prevent us from making such a mistake, by enforcing validation through the type system.&lt;/p&gt;

&lt;p&gt;To give a specific example, let's imagine we want to be able to restrict the logging level to only have the values, &lt;code&gt;"Info"&lt;/code&gt;, &lt;code&gt;"Debug"&lt;/code&gt;, &lt;code&gt;"Warning"&lt;/code&gt; and &lt;code&gt;"Error"&lt;/code&gt;. We've already seen we can't use a DU to model this. So we have no way of knowing whether or not &lt;code&gt;Level&lt;/code&gt; is valid when we come to use it, all we know is that it's a string. So if we want to be sure, we're forced to keep validating the logging level at every point of use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-better-binder-for-f"&gt;
  &lt;/a&gt;
  A better binder for F#
&lt;/h2&gt;

&lt;p&gt;Given these shortcomings we decided to write our own config binder with the following design goals in mind:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Binding failures should be expected and be reflected in the type returned from the binder. We should be made to deal with the unhappy path.&lt;/li&gt;
&lt;li&gt;Binding should not break immutability.&lt;/li&gt;
&lt;li&gt;Binding should work for all types including complex user defined types.&lt;/li&gt;
&lt;li&gt;Binding should be composable, such that if I can bind a type &lt;code&gt;X&lt;/code&gt; which is then later used within &lt;code&gt;Y&lt;/code&gt;, I should be able to reuse the binder for &lt;code&gt;X&lt;/code&gt; when defining the binder for &lt;code&gt;Y&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Error reporting should be greedy and descriptive so that developers can quickly fix as many errors as possible when binding fails.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To that end we opted to write a binder that didn't use any reflection. The trade-off we're making here is that we're forced to be much more explicit when we bind a type and so we end up with what some people might consider to be boilerplate. However, we'd personally rather have code that is explicit than have to read through documentation to discover the implicit behaviours of something magic, because when the magic thing breaks we usually spend more time debugging that than we would have spent writing the explicit "boilerplate" to begin with.&lt;/p&gt;

&lt;p&gt;Also, thanks to the composable nature of functional programming languages and the power of F#'s computation expressions it's possible to be both explicit and terse. It's probably best appreciated with an example. So let's see how we'd bind the above &lt;code&gt;LoggingOptions&lt;/code&gt; using our new approach.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s2"&gt;"nuget: Symbolica.Extensions.Configuration.FSharp"&lt;/span&gt;

&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Microsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Extensions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Configuration&lt;/span&gt;
&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="nn"&gt;Symbolica&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Extensions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FSharp&lt;/span&gt;

&lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;RequireQualifiedAccess&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;LogLevel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Debug&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Info&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Warning&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Error&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nc"&gt;LogLevel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="nc"&gt;Binder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ToLowerInvariant&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;
            &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;"info"&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Success&lt;/span&gt; &lt;span class="nn"&gt;LogLevel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Info&lt;/span&gt;
            &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;"debug"&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Success&lt;/span&gt; &lt;span class="nn"&gt;LogLevel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Debug&lt;/span&gt;
            &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;"warning"&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Success&lt;/span&gt; &lt;span class="nn"&gt;LogLevel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Warning&lt;/span&gt;
            &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;"error"&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Success&lt;/span&gt; &lt;span class="nn"&gt;LogLevel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Error&lt;/span&gt;
            &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Failure&lt;/span&gt; &lt;span class="nn"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invalidType&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LogLevel&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;LoggingOptions&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;LogLevel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Sink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;bindConfig&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="nn"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;section&lt;/span&gt;
        &lt;span class="s2"&gt;"Logging"&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;valueAt&lt;/span&gt; &lt;span class="s2"&gt;"Level"&lt;/span&gt; &lt;span class="nn"&gt;LogLevel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;
            &lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;sink&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;valueAt&lt;/span&gt; &lt;span class="s2"&gt;"Sink"&lt;/span&gt; &lt;span class="nn"&gt;Bind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Level&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Sink&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sink&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="o"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="nc"&gt;ConfigurationBuilder&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;AddInMemoryCollection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"Logging:Level"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Debug"&lt;/span&gt;
              &lt;span class="s2"&gt;"Logging:Sink"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Console"&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ofList&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Build&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;bindConfig&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Binder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;
&lt;span class="p"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;BindResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mapFailure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ToString&lt;/span&gt;&lt;span class="bp"&gt;()&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running this script produces the following output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;BindResult&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LoggingOptions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; 
    &lt;span class="nc"&gt;Success&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Level&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Debug&lt;/span&gt;
              &lt;span class="nc"&gt;Sink&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Console"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From this example we can see that it's successfully bound our more complex &lt;code&gt;LoggingOptions&lt;/code&gt; type that contains a &lt;code&gt;DU&lt;/code&gt;. There's also zero magic, the binding process is clear to see and simple to customise. Let's check that it's met our design goals.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Failures are expected - We can see this by the fact that right at the end, after we've called &lt;code&gt;eval&lt;/code&gt; on the &lt;code&gt;Binder&lt;/code&gt;, it's produced a &lt;code&gt;BindResult&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Binding doesn't break immutability - No &lt;code&gt;[&amp;lt;CLIMutable&amp;gt;]&lt;/code&gt; required here.&lt;/li&gt;
&lt;li&gt;Binding works for complex types - Binding a DU was no problem. We were also able to make it case insensitive just through a little function composition with &lt;code&gt;ToLowerInvariant&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Binding is composable - We defined the binder for the &lt;code&gt;LogLevel&lt;/code&gt; in isolation to the overall config binder.&lt;/li&gt;
&lt;li&gt;Error reporting is greedy and informative - Let's simulate some failures and see what happens.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's run the script again but this time with the following input config.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"Logging:Level"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Critical"&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So that the &lt;code&gt;Level&lt;/code&gt; is invalid and the &lt;code&gt;Sink&lt;/code&gt; is missing. We get the following output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="nc"&gt;Failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;Logging'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;these&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;Level'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nc"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="nc"&gt;Critical'&lt;/span&gt;
        &lt;span class="nc"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nc"&gt;Could&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="k"&gt;'&lt;/span&gt;&lt;span class="nn"&gt;LogLevel'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
      &lt;span class="err"&gt;@'&lt;/span&gt;&lt;span class="nc"&gt;Sink'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nc"&gt;The&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="o"&gt;.)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's shown us all of the paths in the config for which it found errors and what those errors are.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-implementation-details"&gt;
  &lt;/a&gt;
  The Implementation Details
&lt;/h2&gt;

&lt;p&gt;At the heart of all of this is a &lt;code&gt;Binder&amp;lt;'config, 'value, 'error&amp;gt;&lt;/code&gt; type. This type is just a wrapper around a function of the form &lt;code&gt;'config -&amp;gt; BindResult&amp;lt;'a,'error&amp;gt;&lt;/code&gt;. For the category theory inclined, it's just a &lt;a href="https://dev.to/choc13/grokking-the-reader-monad-4f45"&gt;reader monad&lt;/a&gt; whose return type has been specialised to a &lt;code&gt;BindResult&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;BindResult&lt;/code&gt; type is very similar to a regular F# &lt;code&gt;Result&lt;/code&gt; except that its applicative instance will accumulate errors, whereas the regular &lt;code&gt;Result&lt;/code&gt; will typically short-circuit on the first error it encounters.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Binder&lt;/code&gt; and &lt;code&gt;BindResult&lt;/code&gt; are defined generically to keep them as flexible as possible. However at some point we want to provide some specialisations for the common binding scenarios. There are really two primary specialisations to consider; one for binding sections and another for binding values.&lt;/p&gt;

&lt;p&gt;Section binders are of the form &lt;code&gt;Binder&amp;lt;#IConfiguration, 'a, Error&amp;gt;&lt;/code&gt; and value binders are of the form &lt;code&gt;Binder&amp;lt;string, 'a, ValueError&amp;gt;&lt;/code&gt;. By fixing &lt;code&gt;'error&lt;/code&gt; to the custom types &lt;code&gt;Error&lt;/code&gt; and &lt;code&gt;ValueError&lt;/code&gt; it's easy to compose &lt;code&gt;Binder&lt;/code&gt;s and also ensure that the errors can be properly accumulated in both applicative and alternative computations.&lt;/p&gt;

&lt;p&gt;One of the primary specialisations comes from the &lt;code&gt;bind&lt;/code&gt; &lt;a href="https://docs.microsoft.com/en-us/dotnet/fsharp/whats-new/fsharp-50#applicative-computation-expressions"&gt;applicative computation expression&lt;/a&gt;. We saw in the example above how &lt;code&gt;bind&lt;/code&gt; lets us compose a &lt;code&gt;Binder&lt;/code&gt; for an &lt;code&gt;IConfigurationSection&lt;/code&gt; by binding its properties using existing &lt;code&gt;Binder&lt;/code&gt;s and at the same time ensures all binding errors from this section are accumulated. The &lt;code&gt;bind&lt;/code&gt; CE gives us a declarative looking DSL for defining new binders for our application specific config objects.&lt;/p&gt;

&lt;p&gt;In the &lt;a href="https://github.com/Symbolica/Symbolica.Extensions.Configuration.FSharp/blob/master/src/Symbolica.Extensions.Configuration.FSharp/Bind.fs"&gt;&lt;code&gt;Bind&lt;/code&gt;&lt;/a&gt; module the library also provides various combinators for building new &lt;code&gt;Binder&lt;/code&gt;s. Such as &lt;code&gt;Bind.section&lt;/code&gt; and &lt;code&gt;Bind.valueAt&lt;/code&gt; which take an existing &lt;code&gt;Binder&lt;/code&gt; and bind them to a section or a value at a particular key, which are typically used inside a &lt;code&gt;bind&lt;/code&gt; CE. It also contains many binders for types like &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt; &lt;code&gt;System.DateTime&lt;/code&gt; and &lt;code&gt;System.Uri&lt;/code&gt; as well as more complex structures like &lt;code&gt;List&lt;/code&gt; and &lt;code&gt;IDictionary&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#try-it-out"&gt;
  &lt;/a&gt;
  Try it out
&lt;/h2&gt;

&lt;p&gt;The code is available on GitHub and you can install the library via &lt;a href="https://www.nuget.org/packages/Symbolica.Extensions.Configuration.FSharp/0.3.0"&gt;NuGet&lt;/a&gt;. If you want to see even more sophisticated examples that shows how to do things like handle optional values, deal with alternatives and bind units of measure then check out the &lt;a href="https://github.com/Symbolica/Symbolica.Extensions.Configuration.FSharp/blob/master/tests/Symbolica.Extensions.Configuration.FSharp.Tests/IntegrationTests.fs"&gt;IntegrationTests&lt;/a&gt;. Of course if there's something that you think is missing then open an issue or a pull request. I'm sure there are plenty of other &lt;code&gt;Binder&lt;/code&gt;s that we can add to the &lt;code&gt;Bind&lt;/code&gt; module to cover other common .NET types.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future-improvements"&gt;
  &lt;/a&gt;
  Future Improvements
&lt;/h2&gt;

&lt;p&gt;If you want to use things like &lt;code&gt;IOptionsSnapshot&lt;/code&gt; then it requires interaction with the &lt;code&gt;IServiceCollection&lt;/code&gt; and a call to &lt;code&gt;Configure&amp;lt;MyOptionsType&amp;gt;(configureAction)&lt;/code&gt;. Unfortunately the way that Microsoft have designed this means that a parameterless public constructor is required on the options type being configured so that an instance can be passed to &lt;code&gt;configureAction&lt;/code&gt;, which goes against our design principles here. So currently this library won't play nicely with things like reactive options updates. If this is something that you'd like then it should be possible to provide a way around this by providing an alternative &lt;code&gt;IOptionsFactory&lt;/code&gt;, so please open an issue and let us know. See the &lt;a href="https://github.com/Symbolica/Symbolica.Extensions.Configuration.FSharp#usage-with-di"&gt;README&lt;/a&gt; for more details.&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>fsharp</category>
      <category>showdev</category>
    </item>
    <item>
      <title>small Google Search Sheet Cheat </title>
      <author>Anne Quinkenstein</author>
      <pubDate>Sun, 28 Nov 2021 09:33:07 +0000</pubDate>
      <link>https://dev.to/annequinkenstein/small-google-search-sheet-cheat-3gk5</link>
      <guid>https://dev.to/annequinkenstein/small-google-search-sheet-cheat-3gk5</guid>
      <description>&lt;p&gt;&lt;code&gt;define&lt;/code&gt;   Returns Definition&lt;br&gt;
or &lt;code&gt;|&lt;/code&gt;&lt;br&gt;
&lt;code&gt;filetype:&lt;/code&gt; Returns only search results that match a particular file extension.&lt;br&gt;
&lt;code&gt;site:&lt;/code&gt;    Returns only search results from a particular website.&lt;br&gt;
&lt;code&gt;to&lt;/code&gt;   Convert measurements from one unit to another.&lt;br&gt;
&lt;code&gt;do a barrel roll&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;other Search engines: Duckduckgo, metager, ... &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Cost Modeling Data Lakes for Beginners| AWS White Paper Summary</title>
      <author>Adit Modi</author>
      <pubDate>Sun, 28 Nov 2021 09:19:37 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/cost-modeling-data-lakes-for-beginners-aws-white-paper-summary-kna</link>
      <guid>https://dev.to/awsmenacommunity/cost-modeling-data-lakes-for-beginners-aws-white-paper-summary-kna</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Customers want to realize the value held in the data their organization generates. Common use cases include helping them expedite decision making, publishing data externally to foster innovation, or creating new revenue streams by monetizing the data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Organizations that successfully generate business value from their data, will outperform their peers. An Aberdeen survey saw organizations who implemented a Data Lake outperforming similar companies by 9% in organic revenue growth. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;These leaders were able to do new types of analytics like machine learning over new sources like log files, data from click-streams, social media, and internet connected devices stored in the data lake. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This helped them to identify, and act upon opportunities for business growth faster by attracting and retaining customers, boosting productivity, proactively maintaining devices, and making informed decisions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To best realize this value using data lakes, customers need a technology cost breakdown for their budget to build a solution. But without building the solution, they don’t know how much it will cost. This is a common paradox that delays many customers from starting their data lake projects.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Customers need a platform that increases agility, lowers cost of experimentation, and provides a technical breadth to support all their use cases, through an innovative platform. Ideally, the platform can rapidly validate or discount solutions against business objectives. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This encourages a culture of failing fast, which enables further experimentation to optimize solution matching against business imperatives.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A data lake is a common way to realize these goals. There are many considerations along this journey, such as team structure, data culture, technology stack, governance risk, and compliance.&lt;br&gt;
Costing data lakes requires a different approach than delivering them. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Customers must focus on identifying and measuring business value early on so that they can start their projects quickly and demonstrate the value back to the business quickly and incrementally.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-should-the-business-team-focus-on"&gt;
  &lt;/a&gt;
  What should the business team focus on?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Think big&lt;/strong&gt; – It’s important to create a vision that your organization can rally around to help guide decision making in-line with a common goal. At Amazon, we have a phrase: “Stubborn on vision; flexible on details”. This sums up the importance of creating an environment that allows autonomous decision-making, while everyone pulls in the same direction and is flexible about the implementation details.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Measure business value&lt;/strong&gt; – Without measuring business value, it’s hard to justify any expenditure or drive any value from your testing early on in the project.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Prototype rapidly&lt;/strong&gt; – Focus your energy on driving business outcomes with any experiments you run.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Understand what influences costs&lt;/strong&gt; – Analytics projects generally have similar stages, ingestion, processing, analytics, and visualization. Each of these stages has key factors that influence the cost.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cost model a small set of experiments&lt;/strong&gt; – Your analytics project is a journey. As you expand your knowledge, your capabilities will change. The sooner you can start experimenting, the sooner your knowledge will grow. Build a cost model that covers to smallest amount of work to impact your business outcomes and iterate.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Avoid wasting energy building technology stacks&lt;/strong&gt; – Building solutions from the ground up is expensive, time-consuming, and very rarely provides any direct value to your organization.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#defining-the-approach-to-cost-modeling-data-lakes"&gt;
  &lt;/a&gt;
  Defining the approach to cost modeling data lakes
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;IT projects historically have well-defined milestones that make cost modeling a fairly simple process. Selected software is usually a commercial off-the-shelf (COTS) product, which can be costed (including licenses) and based on predictable metrics, such as number of users and number of CPUs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The effort to implement the software is well within the standard skill sets of the IT department, with plenty of experience in similar deployment models to draw on to get an accurate picture of the implementation time. This will all feed into a large design document that can be used to calculate costs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Therefore, you can expect to use the same cost modeling you have previously used for an analytics project. The challenge here is that an analytics project often doesn’t have a clear end. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It’s a journey where you explore and prepare data in line, with some aspirational business outcomes. This makes it’s difficult to know the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How much data will be ingested&lt;/li&gt;
&lt;li&gt;Where that data will come from&lt;/li&gt;
&lt;li&gt;How much storage or compute capacity will be needed to make sense of that data&lt;/li&gt;
&lt;li&gt;Which services are required to exploit the data to realize and deliver value throughout the business&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To experience the business values of analytics project, you must first get started. An on- premises data lake requires a large upfront expenditure, which can be hard to justify when you are unclear on the return on investment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;However, with the AWS Cloud, you can deploy AWS services in minutes, run your experiments, and then shut down the infrastructure, paying only for what you use. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With no capacity constraints and a broad array of analytics services, you can run many exploratory experiments concurrently to find the right solution. This, coupled with the ability to turn off your experiments, lowers the cost of experimentation while increasing speed.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#measuring-business-value"&gt;
  &lt;/a&gt;
  Measuring business value
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first project on your data lake journey starts by stating what your business goals are. These are often extracted from your business strategy. Business goals are high- level aspirations that support the business strategy, such as “improve customer intimacy”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once these business goals are identified, together with your team write a set of business outcomes that would have a positive impact against these goals. Outcomes are targeted and measurable, such as reduce cost of customer acquisition.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, we identify a number of metrics that can be measured to validate the success of the experiments. This helps ensure that the right business value is being achieved.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A good example of this is Hyatt Hotels, a leading global hospitality company. Hyatt wanted to improve customer loyalty, improve the success rate of upsells and add-ons, and better guide the users with accommodation recommendations. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This fed directly into their business goal to improve their American Customer Satisfaction Index (ACSI). To achieve this, the team at Hyatt identified a requirement to build personalized connections with their customers.&lt;br&gt;
Some example business outcomes could be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Number of return visits per 1000 customers per month&lt;/li&gt;
&lt;li&gt;Number of upsells per 100 customers per month&lt;/li&gt;
&lt;li&gt;Number of add-ons per 100 customers per month&lt;/li&gt;
&lt;li&gt;Number of bookings made per day&lt;/li&gt;
&lt;li&gt;Number of negative customer reviews per weeks&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is only an example of one piece of work a data lake could support. After the initial piece of work is delivered, the team can then iterate. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For example, as a by-product of delivering the previous feature, they could have identified important information. For example, perhaps Hyatt discovered that commonly searched for add-on purchases (for example, specific spa treatments) were not offered in the chosen location. Or, they might have discovered that customers were searching for accommodation in areas that Hyatt doesn’t yet have a footprint in.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The team could go on to develop new features and service offerings that would help them deliver a better customer experience or help them make decisions that would improve their chances of choosing the right location to scale their footprint globally to help them deliver against their business goal.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#establishing-an-agile-delivery-process"&gt;
  &lt;/a&gt;
  Establishing an agile delivery process
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Once the measurable metrics are captured, teams can start running a number of experiments to assess technology, methodologies, and, most importantly, explore the data to indicate whether a solution to deliver the business goals is possible and, if so, a possible design of that solution.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The breadth of AWS services helps remove the complexity and burden of designing and operationalizing the solution. This enables organizations to rapidly deploy solutions that typically would take months. It also allows organizations to focus on solving the business needs through deriving value from their data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The AWS serverless services (such as, Amazon Athena, Amazon Kinesis, and AWS Glue) allow for data manipulation and exploration without the need to deploy anything. These services can be consumed immediately in an on-demand basis.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can also deploy capacity provisioning services, where clusters can be provisioned in a matter of minutes. These clusters are then ready to process customer data for supporting analytic services such as Amazon EMR (Hadoop), Amazon Elasticsearch, Amazon Managed Streaming for Apache Kafka (Amazon MSK), and Amazon Redshift. If the experiment fails, you can shut down the services or just stop using the services to prevent incurring ongoing costs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This allows you to experiment rapidly. This was the case with Xylem, a leading water technology company. Xylem used AWS to increase innovation, allowing them to support their customer by creating smart technologies that meet the world’s water, wastewater, and energy needs.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#building-data-lakes"&gt;
  &lt;/a&gt;
  Building data lakes
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Because the aim is to get started on your data lake project, let’s break down your experiments into the phases that are typical in data analytics projects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data ingestion&lt;/li&gt;
&lt;li&gt;Processing and transformation&lt;/li&gt;
&lt;li&gt;Analytics&lt;/li&gt;
&lt;li&gt;Visualization, data access, and machine learning&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;By breaking down the problem into these phases, you reduce the complexity of the overall challenge. This makes the number of variables in each experiment lower, enabling you to get model costs more quickly and accurately.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We recommend that you start your analytics project by implementing the foundation of a data lake. This gives you a good structure to tackle analytics challenges and allow great flexibility for the evolution of the platform.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A data lake is a single store of enterprise data that includes raw copies from various source systems and processed data that is consumed for various analytics and machine learning activities that provide business value.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choosing the right storage to support a data lake is critical to its success. Amazon Simple Storage Service (Amazon S3) is an object storage service that offers industry- leading scalability, data availability, security, and performance. This means customers of all sizes and industries can use it to store and protect any amount of data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon S3 provides easy-to-use management features so you can organize your data and configure finely tuned access controls to meet your specific business, organizational, and compliance requirements. Amazon S3 is designed for 99.999999999% (11 9's) of durability, and stores data for millions of applications for companies all around the world.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data lakes generally support two types of processing: batch and real time. It is common for more advanced users to handle both types of processing within their data lake.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;However, they often use different tooling to deliver these capabilities. We will explore common architectures for both patterns and discuss how to estimates costs with both.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#batch-processing"&gt;
  &lt;/a&gt;
  Batch processing
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Batch processing is an efficient way to process large volumes of data. The data being processed is typically not time-critical and is usually processed over minutes, hours, and in some cases, days. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generally, batch processing systems automate the steps of gathering the data, extracting it, processing it, enriching it, and formatting it in a way that can be used by business applications, machine learning applications, or business intelligence reports.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Before we get started, let’s look at a common set of services that customers use to build data lakes for processing batch data.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r7gD2XLq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjp8s0tscscuz4xgdk5g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r7gD2XLq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjp8s0tscscuz4xgdk5g.png" alt="Image description" width="629" height="388"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Figure 1 – Common services used to build data lakes for batch data&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The following example architecture is relatively common. It uses AWS Glue, Amazon Athena, Amazon S3, and Amazon QuickSight.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zcQkHnEc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e5bnrprjt9jzl72nhrg9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zcQkHnEc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e5bnrprjt9jzl72nhrg9.png" alt="Image description" width="621" height="178"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Figure 2 – Example architecture for batch processing&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The preceding example shows a typical pipeline to ingest raw data from CSV files. AWS Glue automatically infers a schema to allow the data to be queried. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS Glue jobs are used to extract, clean, curate, and rewrite the data in an optimized format (Parquet) before exposing visualizations to end users. This is all achieved using serverless technologies that reduce the operational burden to the analytics team.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We are going to explore each of these steps in more detail, in addition to the things you need to consider along the way. But, before we do, let’s take a quick look at the other form of processing.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#realtime-processing"&gt;
  &lt;/a&gt;
  Real-time processing
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Real-time processing is a way of processing an unbounded stream of data in order to generate real-time (or nearly real-time) alerts or business decisions. The response time for real-time processing can vary from milliseconds to minutes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Real-time processing has its own ingestion components and has a streaming layer to stream data for further processing. Examples of real-time processing are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Processing IoT sensor data to generate alerts for predictive maintenance&lt;/li&gt;
&lt;li&gt;Trading data for financial analytics&lt;/li&gt;
&lt;li&gt;Identifying sentiment using a real-time Twitter feed&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Before we get started, let’s look at a common set of services that customers use to build data lakes for processing real-time data.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--46Gq5HGJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hfd3q75le1k61vhgdvng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--46Gq5HGJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hfd3q75le1k61vhgdvng.png" alt="Image description" width="631" height="327"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Figure 3 – Common services used to build data lakes for real-time data&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Our example architecture is relatively simple and uses the following services: Amazon Kinesis, AWS Lambda, AWS Glue, Amazon Athena, Amazon S3 and Amazon QuickSight.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7FK3Bk-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/il8r02xp2w4r2j9d0vp7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7FK3Bk-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/il8r02xp2w4r2j9d0vp7.png" alt="Image description" width="627" height="193"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Figure 4 – Example architecture for real-time processing&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Figure 4 shows that many IoT devices send their telemetry to AWS IoT Core. AWS IoT allows users to securely manage billions of connected devices and route those messages to other AWS endpoints.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In this case, AWS IoT Core passes the messages Amazon Kinesis, which ingests streaming data at any scale. The raw data is split into two streams, one that writes the raw data to Amazon S3 and a second that uses AWS Lambda (a serverless compute service) to filter, aggregate, and transform the data before again storing it on Amazon S3. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The manipulated data is then cataloged in AWS Glue and made available to end users to run ad hoc queries using Amazon Athena and create visualizations using Amazon QuickSight.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#understanding-what-influences-data-lakes-costs"&gt;
  &lt;/a&gt;
  Understanding what influences data lakes costs
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Across both real-time and batch processing, data flows through different stages. For each stage, there is an option to use managed services from AWS or to use compute, storage, or network services from AWS with third-party or open source software installed on top it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the case of managed services, AWS provides service features like high availability, backups, and management of underlying infrastructure at additional cost. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In some cases, the managed services are on-demand serverless based solutions, where the customer is charged only when the service is used.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More details on What Influences data lake costs can be found &lt;a href=""&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#monitoring-data-lakes-costs"&gt;
  &lt;/a&gt;
  Monitoring data lakes costs
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Once the data lake is built to provide its intended features, we recommend that you measure the cost and tie it back to business value it provides. This enables you to perform a return-on-investment analysis on your analytics portfolio. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To track the cost utilization for your analytic workloads, you need to define your cost allocation strategy. Cost-allocation tagging ensures that you tag your AWS resources with metadata key-value pairs that reflect the business unit the data lake pipeline was built for.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tags enable you to generate billing reports for the resources associated with a particular tag. This lets you to either do charge-back or return-on-investment analysis.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Another strategy to track your costs is to use multiple AWS accounts and manage them using AWS Organizations. In this approach, every business unit owns their AWS account and provisions and manages their own resources. This lets them track all cost associated with that account for their data lake needs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;By tracking costs and tying it back to your business value, you can complete your cost modeling for your first analytics workload. This process also lets you iterate and repeat the process again of deciding business use cases, defining KPI and building data lake features on top of your already built data lake foundation while monitoring the cost associated with it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#cost-modeling-your-first-experiments"&gt;
  &lt;/a&gt;
  Cost modeling your first experiments
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To help give confidence to cost model your first analytics project, we are going to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generate a couple of fictitious customer scenarios for analytics experiments&lt;/li&gt;
&lt;li&gt;Walk through our very lightweight cost model&lt;/li&gt;
&lt;li&gt;Build the actual solution and demonstrate how close we got to the actual costs.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS offers a free tier for most of its services. This lets you experiment with no cost. For the cost modeling that follows, we discuss both free tier and the actual costs.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#scenario-1-improving-healthcare-kpis"&gt;
  &lt;/a&gt;
  Scenario 1: Improving healthcare KPIs
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;In this scenario, we are a health trust company with a goal to improve the health of the community we are serving. The following are a few key performance indicators (KPIs) that we want to achieve in near future.

&lt;ul&gt;
&lt;li&gt;Reduce health-related crime rate by 5% over 12 months&lt;/li&gt;
&lt;li&gt;Reduce health-related crime rate by 15% over 36 months To achieve these KPIs, we decide to analyze:&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Drugs that have a strong correlation to criminal activity&lt;/li&gt;
&lt;li&gt;Health conditions that have a strong correlation to criminal activity&lt;/li&gt;
&lt;li&gt;Unique citizens who are using the drugs that have top five correlations to criminal activity&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unique citizens who have health conditions that have top five correlations to criminal activity&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Our plan is to use these and work with identified citizens and provide them alternate drugs or provide them counseling or any other treatments as applicable, to prevent them from committing any crime. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We believe doing this will improve the overall mental health of our community, in addition to other activities we have been working on.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rySTrBrI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y1b48ptltqm7omgzuyku.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rySTrBrI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y1b48ptltqm7omgzuyku.jpg" alt="Image description" width="534" height="201"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Figure 1 – Example architecture for Scenario 1&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;More details on this scenario available &lt;a href=""&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scenario-2-improving-manufacture-turnaround-time"&gt;
  &lt;/a&gt;
  Scenario 2: Improving manufacture turnaround time
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In this second scenario, we are a manufacturing company with a goal to improve the timing of our delivery. The purchasing team of this manufacturing company is looking to improve the turnaround time of the parts required for their orders by 20%&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To achieve this KPI, we decided to analyze:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Customer orders and line items, to identify parts that are frequently ordered&lt;/li&gt;
&lt;li&gt;Suppliers data to identify suppliers that kept orders waiting&lt;/li&gt;
&lt;li&gt;Customer data to identify large volume customers&lt;/li&gt;
&lt;li&gt;Supplier shipping modes and order priority&lt;/li&gt;
&lt;li&gt;Correlation of any returned items with supplier&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Our plan is to identify the suppliers with good track record and use them for parts requested by large volume customers. This should bring down the turnaround time for majority of the parts requested overall.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xD6SDKDp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mw1dcyewlnz31l19obtp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xD6SDKDp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mw1dcyewlnz31l19obtp.png" alt="Image description" width="528" height="235"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Figure 2 – Example architecture for Scenario 2&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;More details on this scenario available &lt;a href=""&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Customers struggle with starting their analytics projects because it is difficult to estimate costs when you have no knowledge or foresight of their unique requirements as an organization. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Without a cost estimate, projects fail to get funding and organizations miss the enormous value making data driven decisions can offer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can use the scenarios as templates to build out a picture of what your analytics experiment will look like. The scenarios can help your organization start a journey towards making data-based decisions and drive business value, offering benefits for your organization and its customers.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://d1.awsstatic.com/whitepapers/cost-modeling-data-lakes.pdf?did=wp_card&amp;amp;trk=wp_card"&gt;Original paper&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>datascience</category>
      <category>beginners</category>
      <category>cloudskills</category>
    </item>
    <item>
      <title>Ubuntu üzerinde SNMP servisi kurulumu</title>
      <author>Ali Orhun Akkirman</author>
      <pubDate>Sun, 28 Nov 2021 08:57:04 +0000</pubDate>
      <link>https://dev.to/aciklab/ubuntu-uzerinde-snmp-servisi-kurulumu-47d8</link>
      <guid>https://dev.to/aciklab/ubuntu-uzerinde-snmp-servisi-kurulumu-47d8</guid>
      <description>&lt;p&gt;Ağ izleme seçenekleri arasında en verimli yöntemlerden birisi SNMP protokolü olarak görülebilir. SNMP protokolü 161 ve 162 portlarını kullanır. Protokolün 3 farklı sürümü bulunmakta olup bunlar SNMP v1, SNMP v2c ve SNMP v3'tür. 1 ve 2c sürümleri &lt;em&gt;community&lt;/em&gt; adı verilen bir string ile haberleşip, mesajlar tamamen şifrelenmemiş şekilde taşınmaktadır. 3 sürümü ise kullanıcı giriş yöntemleri ve mesajların şifrelenmesi için zorunludur.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#snmp-servisi-kurulumu"&gt;
  &lt;/a&gt;
  SNMP servisi kurulumu
&lt;/h2&gt;

&lt;p&gt;Ubuntu 20.04 depolarında snmp paketi bulunmaktadır. Dolayısıyla direkt olarak kurulum yapılabilmektedir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt update
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;snmpd snmp libsnmp-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#snmp-servisi-yap%C4%B1land%C4%B1r%C4%B1lmas%C4%B1"&gt;
  &lt;/a&gt;
  SNMP servisi yapılandırılması
&lt;/h2&gt;

&lt;p&gt;Paketler yüklendikten sonra öncelikle eski yapılandırma dosyanın yedeklenmesi önerilir:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cp&lt;/span&gt; /etc/snmp/snmpd.conf&lt;span class="o"&gt;{&lt;/span&gt;,.yedek&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#d%C3%BC%C5%9F%C3%BCk-g%C3%BCvenlikli-y%C3%B6ntem-v2c-yap%C4%B1land%C4%B1rmas%C4%B1"&gt;
  &lt;/a&gt;
  Düşük güvenlikli yöntem: v2c yapılandırması
&lt;/h3&gt;

&lt;p&gt;Yapılandırma dosyasında 2 adım bulunmaktadır. Bu iki adım da &lt;strong&gt;/etc/snmp/snmpd.conf&lt;/strong&gt; dosyası içindeki düzenlemelerden oluşmaktadır.&lt;/p&gt;

&lt;p&gt;Bu adımlardan ilki servisin çalışacağı ip ve port bilgileridir. İlgili dosya içinde  &lt;strong&gt;agentaddress  127.0.0.1,[::1]&lt;/strong&gt; geçen satır bulunup aşağıdaki gibi düzenlenmelidir. İkinci kısımda belirtilen IP adresi servisin hizmet verdiği IP adresidir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#agentaddress  127.0.0.1,[::1]
agentAddress udp:127.0.0.1:161,udp:192.168.1.67:161
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;v2c yapılandırmasındaki ikinci adım ise dışarıdan erişilecek IP adresi ve community ismi (bir nevi parola) kısıtlamasıdır. Aşağıdaki satırdan birden fazla ekleyebilir ve bu şekilde yetkilendirme yapabilirsiniz. Fakat unutulmaması gereken en önemli nokta trafiğin şifrelenmediği ve verilen IP adresleri için community ismini bilen herkesin erişebileceği bilgisidir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rocommunity ornekparola 192.168.1.68
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Dosyayı kaydedip kapattıktan sonra servisi yeniden başlatıp servisin ayağa kalkıp kalmadığını kontrol edebilirsiniz.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl restart snmpd
&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl status snmpd
&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl &lt;span class="nb"&gt;enable &lt;/span&gt;snmpd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ve tabi ki eğer ufw güvenlik duvarı açıksa benzer şekilde kural girmeniz gerekmektedir:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ufw allow from 192.168.1.68 to any port 161 proto udp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#y%C3%BCksek-g%C3%BCvenlikli-y%C3%B6ntem-v3-yap%C4%B1land%C4%B1rmas%C4%B1"&gt;
  &lt;/a&gt;
  Yüksek güvenlikli yöntem: v3 yapılandırması
&lt;/h3&gt;

&lt;p&gt;v3 yapılandırması için öncelikle açık bir servis varsa kapatılması gerekmektedir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl stop snmpd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Daha sonrasında giriş yapacak read-only(sadece okuyabilir) kullanıcı oluşturmak için aşağıdaki gibi bir komut uygulanması gerekmektedir:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;net-snmp-create-v3-user -ro -A authparola -a SHA -X privparola -x AES snmpyonetici
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Kullanıcı eklendikten sonra iki dosyada da elle ekleme işlemi yapılması gerekmektedir.&lt;/p&gt;

&lt;p&gt;İlk olarak &lt;strong&gt;/var/lib/snmp/snmpd.conf&lt;/strong&gt; dosyası içine aşağıdaki satır eklenmeli:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;createUser snmpyonetici SHA "authparola" AES "privparola"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Daha sonra &lt;strong&gt;/usr/share/snmp/snmpd.conf&lt;/strong&gt; dosyası içerisinde aşağıdaki satır eklenmeli:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rouser snmpyonetici
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bu iki dosya da düzenlendikten sonra snmpd servisi tekrar başlatılabilir:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl start snmpd
&lt;span class="nb"&gt;sudo &lt;/span&gt;systemctl &lt;span class="nb"&gt;enable &lt;/span&gt;snmpd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#snmp-kontrol"&gt;
  &lt;/a&gt;
  SNMP kontrol
&lt;/h2&gt;

&lt;p&gt;İzin verilen IP adreslerinden aşağıdaki komut ile birlikte SNMP sorgusu atılıp atılmadığını v2c sürüm kontrol edebilirsiniz:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;snmpwalk &lt;span class="nt"&gt;-v2c&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; ornekparola 192.168.1.67
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;veya v3 sürüm kullanarak:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;snmpwalk &lt;span class="nt"&gt;-v3&lt;/span&gt; &lt;span class="nt"&gt;-a&lt;/span&gt; SHA &lt;span class="nt"&gt;-A&lt;/span&gt; authparola &lt;span class="nt"&gt;-x&lt;/span&gt; AES &lt;span class="nt"&gt;-X&lt;/span&gt; privparola &lt;span class="nt"&gt;-l&lt;/span&gt; authPriv &lt;span class="nt"&gt;-u&lt;/span&gt; snmpyonetici 192.168.1.67
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Çıktı olarak aşağıdaki gibi bir çıktı alıyorsanız erişim sağlanamamakta fakat SNMP OID'leri görmeye başladıysanız erişim sağlanmış demektir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Timeout: No Response from IPADRESİ
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iso.3.6.1.2.1.1.1.0 = STRING: "Linux snmpserver01 5.4.0-90-generic #101-Ubuntu SMP Fri Oct 15 20:00:55 UTC 2021 x86_64"
iso.3.6.1.2.1.1.2.0 = OID: iso.3.6.1.4.1.8072.3.2.10
iso.3.6.1.2.1.1.3.0 = Timeticks: (227298) 0:37:52.98
iso.3.6.1.2.1.1.4.0 = STRING: "Me &amp;lt;me@deneme.org&amp;gt;"
iso.3.6.1.2.1.1.5.0 = STRING: "snmpserver01"
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>snmp</category>
      <category>ubuntu</category>
      <category>server</category>
    </item>
    <item>
      <title>Go ile Algoritmalar — QuickSort</title>
      <author>Yusuf Turhan Papurcu</author>
      <pubDate>Sun, 28 Nov 2021 08:37:13 +0000</pubDate>
      <link>https://dev.to/go/go-ile-algoritmalar-quicksort-clc</link>
      <guid>https://dev.to/go/go-ile-algoritmalar-quicksort-clc</guid>
      <description>&lt;p&gt;Bu gün Go ile &lt;a href="https://en.wikipedia.org/wiki/Quicksort"&gt;QuickSort&lt;/a&gt; algoritmasını yazacağız. Bunun için harici bir kütüphaneye ihtiyacımız yok.&lt;/p&gt;

&lt;p&gt;Kısaca QuickSort algoritmasına değinmek gerekirse bu algoritma “Böl ve Fethet” mantığı ile çalışır. Eldeki veri kümesini sürekli daha da küçülterek sonuca ulaşır. Tabiki bu yöntem tamamen dağınık listelerde çok iyi çalışırken ne yazık ki sıralanmış listelerde düşük performans verir. Sebebini anlamak için öncelikle algoritmanın mantığını iyice kavramak gerekiyor. Bunun için buyrun çalışma sürecini açıklayalım ve 10 elemanlık bir dizide deneyelim.&lt;/p&gt;

&lt;p&gt;QuickSort algoritması verilen liste içerisinde öncelikle bir Dayanak (Pivot) belirler. Bunun için çeşitli teknikler kullanılmaktadır. Mesela 1961'de QuickSort’un ilk yayınlandığı makalede dayanak olarak ilk elemanın seçilmesi tavsiye ediliyordu. Fakat daha sonrasında bunun yerine listeden rastgele bir eleman seçilmesinin daha mantıklı olduğu ortaya çıktı. Çünkü Quicksort seçtiği dayanağa göre ikiye ayrılır. Dayanaktan küçükler ve dayanaktan büyükler. Bunu liste iki elemanlı hale gelene kadar tekrar eder. Sonra elde ettiği tüm listeleri birleştirir ve sıralanmış listeyi ortaya çıkarır. Eğer liste zaten sıralanmış ise tüm değerler dayanaktan büyük çıkar ve liste sadece 1 eleman eksik olarak ikiye ayrılır. Bu da listenin eleman kadar bölünmesi anlamına gelir. Bu olabilecek en kötü seneryodur. Bunu engellemek için de genellikle dayanak liste içinden rastgele seçilir. Ben dayanağımı şu şekilde seçeceğim.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// Dayanak Seçimi&lt;/span&gt;
&lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Dayanağımı almak için rastgele bir sayı tuttum ve onu dizimin uzunluğuna böldüm. Böylece yukarıdaki performans kaybını minimize edeceğim.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dizi&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Burada da gelen dizi tek elemanlı olursa fonksiyonun return etmesini sağladım. Bu kısmın amacı hatalı veri girişine engel olmak değil, fonksiyonun recursive (özyinelemeli) çalışmasını sağlamak.&lt;/p&gt;

&lt;p&gt;Ardından dizimin uzunluğunu da kullanarak ilk ve son elemanı aldım. Bu dizimi ikiye ayırırken gerekli olacak. Bundan sonra diziyi dayanğa göre ikiye ayırıp yeniden fonksiyona sokmak gerekiyor. Bunu da basit ve kullanışlı bir for döngüsü ile yapacağız.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;dizi&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Satır satır açıklamak gerekirse:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;İlk önce seçilen dayanak ile son elemanın yerlerini değiştiriyorum.&lt;/li&gt;
&lt;li&gt;Sonrasında Diziyi elemanları uzunluğunda bir döngüye sokuyorum.&lt;/li&gt;
&lt;li&gt;Ondan sonra listenin i indexindeki sayı dayanaktan küçük ise sola atıp left değişkenimi bir arttırıyorum.&lt;/li&gt;
&lt;li&gt;Sonrasında dizinin son elemanı ile döngüde değeri değişen left’in yerini değiştiriyorum.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bundan sonra yapılacak tek şey dizinin sol ve sağ taraflarını tekrardan bu döngüye sokmak.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;quickSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;quickSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dizi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bu da gayet basit.&lt;/p&gt;

&lt;p&gt;Ve en sonunda tüm fonksiyon bu hale geliyor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;quickSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dizi&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dizi&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;

    &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="c"&gt;// Dayanak Seçimi&lt;/span&gt;
    &lt;span class="n"&gt;pivot&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;dizi&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;quickSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;quickSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dizi&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dizi&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tüm kodu ve Test fonksiyonunu &lt;a href="https://github.com/yusufpapurcu/Algorithms"&gt;Github Depomda&lt;/a&gt; bulabilirsiniz.&lt;/p&gt;

</description>
      <category>go</category>
      <category>tutorial</category>
      <category>career</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Python decorator to show execution time of a function
</title>
      <author>Ahmed El Taweel</author>
      <pubDate>Sun, 28 Nov 2021 08:14:56 +0000</pubDate>
      <link>https://dev.to/ahmedeltaweel/python-decorator-to-show-execution-time-of-a-function-afk</link>
      <guid>https://dev.to/ahmedeltaweel/python-decorator-to-show-execution-time-of-a-function-afk</guid>
      <description>&lt;p&gt;When working on a high throughput, low latency  system, it's important to measure the execution time of your code to identify bottleneck and fix them. To do so, let's use a decorator to measure the execution time for the function it decorates.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wraps&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;timeit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;default_timer&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;timer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hms&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""Decorator to show execution time.

    :param func: Decorated function
    :param name: Metrics name
    :param hms: Show as human-readable string
    """&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;callable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Execution time of &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;:"&lt;/span&gt;
            &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;te&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;

            &lt;span class="c1"&gt;# Log metrics
&lt;/span&gt;            &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;common&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;
            &lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;withPrefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'[METRICS]'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;hms&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;te&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;te&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; sec"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;callable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By adding this decorator to each function, we can use the analytics from the APM to identify bottleneck and gain better visibility over the system.&lt;/p&gt;

&lt;p&gt;Happy coding :D &lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>performance</category>
    </item>
    <item>
      <title>Day 51 of 100 Days of Code &amp; Scrum: Company Website &amp; Professional Blog</title>
      <author>Rammina</author>
      <pubDate>Sun, 28 Nov 2021 07:43:48 +0000</pubDate>
      <link>https://dev.to/rammina/day-51-of-100-days-of-code-scrum-company-website-professional-blog-54lh</link>
      <guid>https://dev.to/rammina/day-51-of-100-days-of-code-scrum-company-website-professional-blog-54lh</guid>
      <description>&lt;p&gt;Happy Sunday, everyone!&lt;/p&gt;

&lt;p&gt;This week I will be focusing on fixing any remaining bugs and deploying my company website, as well as working on my professional blog. I most likely will work on them in that order, because I don't want to get distracted and leave anything unfinished. I think imposing a deadline on myself helped me be more productive last week, so I will most likely do that again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;Just like I do every weekend, I did my 7th Weekly Sprint Review and Retrospective, in which I went over what I've managed to do well, what my shortcomings were, and what I could do better in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;I set up my weekly Sprint Goals, which will focus on my &lt;strong&gt;company website and professional blog&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#weekly-sprint-goals"&gt;
  &lt;/a&gt;
  Weekly Sprint Goals
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;fix the bugs in my company website.&lt;/li&gt;
&lt;li&gt;deploy my company website after cleaning everything up.&lt;/li&gt;
&lt;li&gt;after the website, learn Ghost so I can use it to build my professional blog.&lt;/li&gt;
&lt;li&gt;continue to learn Next.js and Typescript by using concepts while I build my website or maybe just from reading documentations.&lt;/li&gt;
&lt;li&gt;continue studying for Professional Scrum Master I (PSM I) certification.&lt;/li&gt;
&lt;li&gt;continue networking, but allocate less time to this (coding is more important).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a great week, everyone!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" alt="Rammina Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/learn/basics/create-nextjs-app?utm_source=next-site&amp;amp;utm_medium=nav-cta&amp;amp;utm_campaign=next-website"&gt;Official Next.js tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/intro.html"&gt;The Typescript Handbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#other-media"&gt;
  &lt;/a&gt;
  Other Media
&lt;/h3&gt;

&lt;p&gt;Feel free to check me in other media and reach out to me!&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://twitter.com/RamminaR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C341ckO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636792959/twitter-logo_laoyfu_pdbagm.png" alt="Twitter logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://github.com/Rammina"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4ZlXeay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636795051/GitHub-Emblem2_epcp8r.png" alt="Github logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to become a Certified AWS Developer in 2022</title>
      <author>javinpaul</author>
      <pubDate>Sun, 28 Nov 2021 07:41:26 +0000</pubDate>
      <link>https://dev.to/javinpaul/how-to-become-a-certified-aws-developer-in-2022-4dme</link>
      <guid>https://dev.to/javinpaul/how-to-become-a-certified-aws-developer-in-2022-4dme</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hello Devs,  if you want to become a certified AWS developer in 2022 and preparing for AWS Developer Associate certification and looking for the best books, courses, and overall guidance to pass this prestigious but tough exam then you have come to the right place. &lt;/p&gt;

&lt;p&gt;Earlier, I have shared the &lt;a href="https://javarevisited.blogspot.com/2020/05/top-5-courses-to-crack-aws-certified-developer-associate-certification-exam.html"&gt;best AWS developer courses&lt;/a&gt; and &lt;a href="https://javarevisited.blogspot.com/2020/07/top-5-aws-certified-developer-associate-practice-tests-mock-exams.html"&gt;practice tests&lt;/a&gt;, and today, I am going to share the overall guide and complete resources to pass this prestigious AWS cloud certification. &lt;/p&gt;

&lt;p&gt;There is no doubt that &lt;a href="https://medium.com/javarevisited/top-10-cloud-certification-to-aim-in-2022-aws-azure-and-google-cloud-platform-bd054fff0538"&gt;AWS certifications&lt;/a&gt; are very valuable and opens the door for a lot of opportunities, not just for system admins and solution architects but also for developers and &lt;a href="https://medium.com/javarevisited/top-5-online-courses-to-become-a-devops-engineer-in-2020-764f5e60c2b"&gt;DevOps Engineers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The AWS Certified Developer Associate certification exams are for Software Developers and Web Developers and it tests your ability to develop and deploy software applications on AWS and work with databases, &lt;a href="https://medium.com/javarevisited/7-best-serverless-and-aws-lambda-courses-to-learn-in-2021-de1820111c85"&gt;serverless architecture&lt;/a&gt;, and use of AWS API.&lt;/p&gt;

&lt;p&gt;Even though there is no substitute for knowledge and experience and your certification is not very useful if you don't know how to work in AWS console, there are a lot of tangible and intangible benefits of &lt;a href="https://javarevisited.blogspot.com/2020/09/top-10-aws-certifications-for-cloud-professionals.html"&gt;AWS Cloud certifications&lt;/a&gt;, particularly the AWS Certified Developer Associate exam.&lt;/p&gt;

&lt;p&gt;For example, it gives you an opportunity to learn about AWS services and platforms in depth. It also gives you the recognition you deserve for your knowledge and cloud skills. &lt;/p&gt;

&lt;p&gt;It also allows you to put AWS in your resume and LinkedIn and that brings a lot of chances as recruiters and companies are always looking for certified AWS professionals.&lt;/p&gt;

&lt;p&gt;But, the most important benefit of the &lt;a href="https://medium.com/javarevisited/6-best-aws-developer-associate-dva-c001-certification-practice-test-mock-exams-and-dumps-9e24573f509a"&gt;AWS Developer certification&lt;/a&gt; or any other certification is the knowledge it gives you. &lt;/p&gt;

&lt;p&gt;I have learned a lot while preparing for certification and that's also my preferred way to learn new technology in depth.&lt;/p&gt;

&lt;p&gt;Once you know the basics, you should go for certification, along the way you will learn a lot and become an expert on that technology. I have tried this method to learn Java, Spring, and several other technologies and I can say it works well.&lt;/p&gt;

&lt;p&gt;Once you start preparing for &lt;a href="https://medium.com/javarevisited/top-5-aws-training-courses-to-crack-amazon-web-service-solutions-architect-associate-certification-3f4affa8f660"&gt;AWS certifications&lt;/a&gt;, you obviously start reading more about different AWS services, their pros, and cons, watching more online courses and tutorials on Youtube.&lt;/p&gt;

&lt;p&gt;You also start doing more hands-on labs, and start solving more practice questions, all these activities brings a lot of knowledge and experience related to AWS which serves well not just on certification but also during interviews and your day-to-day jobs.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-become-aws-certified-developer-in-2022"&gt;
  &lt;/a&gt;
  How to become AWS Certified Developer in 2022
&lt;/h2&gt;

&lt;p&gt;I have been focusing a lot on Cloud, Machine Learning, and Big Data since last year and reading a lot about associate-level AWS certifications like solution architect, cloud developer, and sysops administrator.&lt;/p&gt;

&lt;p&gt;I was also helping a couple of my readers with their &lt;a href="https://javarevisited.blogspot.com/2020/05/top-5-amazon-web-services-aws-courses-for-beginners-and-experienced-programmers.html"&gt;AWS&lt;/a&gt;, &lt;a href="https://javarevisited.blogspot.com/2020/09/top-5-courses-to-learn-microsoft-azure.html"&gt;Azure&lt;/a&gt;, and &lt;a href="https://javarevisited.blogspot.com/2019/07/top-5-google-cloud-platform-gcp-courses-certifications-online.html"&gt;Google cloud&lt;/a&gt; certification journey and I am happy that many of them have succeeded in their first attempt and now I am sharing the same blueprint with you guys.&lt;/p&gt;

&lt;p&gt;This is a tried and tested blueprint by myself and many of my friends and readers. I have followed this blueprint to get different &lt;a href="https://medium.com/javarevisited/top-7-practice-tests-and-mock-exams-to-prepare-for-oracles-java-certifications-ocajp-and-ocpjp-36502d4ca061"&gt;Oracle&lt;/a&gt;, &lt;a href="https://javarevisited.blogspot.com/2019/12/how-to-crack-java-se-11-certification.html"&gt;Java&lt;/a&gt;, &lt;a href="https://medium.com/javarevisited/top-5-spring-professional-certification-exam-resources-for-java-developers-3ef9fa42fe13"&gt;Spring Professional&lt;/a&gt;, SQL Server, &lt;a href="https://medium.com/javarevisited/my-favorite-data-science-and-machine-learning-courses-from-coursera-udemy-and-pluralsight-eafc73acc73f"&gt;Data Science&lt;/a&gt;, and &lt;a href="https://javarevisited.blogspot.com/2020/09/top-10-aws-certifications-for-cloud-professionals.html"&gt;AWS certifications&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It's pretty much a three-point formula where you need to choose a good course, do a lot of hands-on labs and then solve as many practice questions as possible. &lt;/p&gt;

&lt;p&gt;If you follow these three steps honestly, you are bound to score 800+ on your &lt;a href="https://medium.com/javarevisited/top-5-online-courses-to-become-aws-certified-developer-associate-in-2020-best-of-lot-9b22baf84ca8"&gt;AWS Developer Associate exam&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This blueprint will help you to get success in not just AWS certification but also in any IT certification, all you need to do is pick the right resources for each section. &lt;/p&gt;

&lt;p&gt;I mean choose the best online course for the AWS Certified Developer Associate exam and choose the best book and &lt;a href="https://javarevisited.blogspot.com/2020/07/top-5-aws-certified-developer-associate-practice-tests-mock-exams.html"&gt;Mock tests&lt;/a&gt;, and that's where this article will help you.&lt;/p&gt;

&lt;p&gt;In this article, I'll share your resources that will help you to pass the AWS Certified Developer Associate exam with flying colors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Faws-certified-developer-associate-dva-c01%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Fv2sV7H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-PewOvoAYt1Y/XzvWk0Ctl4I/AAAAAAAAiYY/NQwVR-oJfHcxtUPtDSJik97aU-D-cTyrgCLcBGAsYHQ/w400-h227/How%252Bto%252BCrack%252BAWS%252BDeveloper%252BAssociate%252BCertification.png" alt="How to Crack AWS Certified Developer Associate Exam" width="398" height="227"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#1-courses"&gt;
  &lt;/a&gt;
  1. Courses
&lt;/h3&gt;

&lt;p&gt;Online courses are the best resource to start your AWS certification preparation, the key here is to choose the right courses which not only cover the exam topics well but also teach you practical stuff so that you can learn AWS skills that are required in real-world jobs.&lt;/p&gt;

&lt;p&gt;For the AWS Developer Associate exam, I recommend following online training courses, some of them are free and others are also very affordable and you can buy them for just $10 on Udemy sales which happen every month.&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;1.1. &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Faws-certified-developer-associate-dva-c01%2F"&gt;Stephane Maarek's Ultimate AWS Certified Developer Associate Course&lt;/a&gt; *&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is the best online course to pass the AWS developer associate exam. Created by Stephane, an AWS expert which has passed all the AWS certifications this course will teach you everything you need to know to pass this prestigious cloud certification. &lt;/p&gt;

&lt;p&gt;If you can get just one course, buy this one, you won't regret it, it's worth both your time and money. More than 50K people have already joined this course.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Faws-certified-developer-associate-dva-c01%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t2551NEG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-9Hyea3bUmB0/XzvTpgqsZcI/AAAAAAAAiYA/ad3txnB0aI89L0sVBjQjIGNbJjlcfzTlQCLcBGAsYHQ/s320/Ultimate%252BAWS%252BCertified%252BDeveloper%252BAssociate%252B2020%252BUdemy%252Bbest%252Bcourse%252Bby%252BStephane%252BMaarek.png" alt="best course to pass AWS Developer Associate Exam" width="320" height="180"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;1.2. &lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Faws-certified-associate-architect-developer-sysops-admin%2F"&gt;Amazon Web Services (AWS) Certified 2022 - 4 Certifications! &lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is another high-quality online course to prepare for the AWS developer associate exam. Created by Backspace Academy, one of the leading training organizations when it comes to cloud training this course is both well structured and goes deep enough to pass the exam.&lt;/p&gt;

&lt;p&gt;This course is created by Paul Coady of Backspace Academy and if you are a complete beginner on AWS then this is the perfect course for you to both learn AWS and pass this valuable certification.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Faws-certified-associate-architect-developer-sysops-admin%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YY6mwkSc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-8Qd_VWs48BU/YZj8eed-lkI/AAAAAAAAqN8/054a09tmxAIcehLWwqHHeEXxOM8LrYrhQCLcBGAsYHQ/w351-h198/1047846_83ef_29.jpg" alt="best AWS Cloud Developer certification course" width="351" height="197"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-books"&gt;
  &lt;/a&gt;
  2. Books
&lt;/h3&gt;

&lt;p&gt;Apart from online courses, I highly recommend you get a study guide to learn exam topics in good detail. While the book provides the most comprehensive coverage they are often not up-to-date because it is practically not possible to update books every 6 months when exam topics and syllabus is updated for AWS certifications.&lt;/p&gt;

&lt;p&gt;Hence, I don't have any recommendations here except &lt;a href="https://gumroad.com/a/703100019/MsVlG"&gt;&lt;strong&gt;AWS: The Good Parts&lt;/strong&gt;&lt;/a&gt; which is my favorite book to learn essential AWS services that have to withstand the test of time and going to remain for quite some time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gumroad.com/a/703100019/MsVlG"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--juzfSoCH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-0hSGMrkMX3U/X4cOid-K10I/AAAAAAAAj0g/FeX6p0fl0zMzYMnNTRjL0KqxUAc6y1bpQCLcBGAsYHQ/w229-h320/AWS%252Bgood%252Bparts%252B-%252Bbest%252Baws%252Bbook.png" alt="best aws book for beginners" width="229" height="320"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is not like any other book which covers things based upon Docs and specification but it's born from real experience. Both the authors have worked for 15 years on Amazon and know AWS in and out. &lt;/p&gt;

&lt;p&gt;I highly recommend this book to anyone who wants to learn AWS and especially to those who are preparing for certification.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-practice-tests"&gt;
  &lt;/a&gt;
  3. Practice Tests
&lt;/h3&gt;

&lt;p&gt;Now, this is the third piece of the puzzle to your AWS certification journey. Mock tests are the most important part of your preparation as they can be used to assess your preparation level. &lt;/p&gt;

&lt;p&gt;You can also use them to find your strength and weakness and work on them before the real exam.&lt;/p&gt;

&lt;p&gt;I generally start with a topic-wise test to see if I am ready for a full mock test and then work my way there.&lt;/p&gt;

&lt;p&gt;When you consistently score 80% on mock tests and practice papers you are ready for the real exam. And, if you need recommendations, here are &lt;em&gt;AWS Developer Associate practice tests&lt;/em&gt; you can take to full proof of your preparation.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#31-whizlabs-834-questions"&gt;
  &lt;/a&gt;
  3.1. WhizLabs (&lt;a href="https://shrsl.com/25qjc"&gt;834 questions&lt;/a&gt;)
&lt;/h4&gt;

&lt;p&gt;When it comes to practice tests and AWS simulators I trust Whizlabs, their practice test is often of high quality and covers exam topics nicely. Their explanations are also revealing and I learn a lot from them.&lt;/p&gt;

&lt;p&gt;The AWS Developer Associate Practice tests from &lt;a href="https://shareasale.com/r.cfm?b=1551042&amp;amp;u=880419&amp;amp;m=43514&amp;amp;urllink=&amp;amp;afftrack="&gt;Whizlabs&lt;/a&gt; contains 834 unique questions divided into 12 full-length test which are enough to prepare for this exam. &lt;/p&gt;

&lt;p&gt;To get the most from this practice test, do the full-length test in a real exam like setting like a quiet room and time limit. This will help you to truly assess your preparation level.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://shrsl.com/25qjc"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Azd2lmdj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-z7Est6rzdMA/XzvTyGrCmSI/AAAAAAAAiYI/ARHi1Pa-F0wO13NH8NArmEe5QCOPkNZ-QCLcBGAsYHQ/s320/AWS%252BDeveloper%252BAssociate%252BPractice%252BTest%252BWhizlabs%252BBest.png" alt="best practice test to pass AWS Developer Associate certification" width="320" height="201"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#32-udemy-aws-practice-tests"&gt;
  &lt;/a&gt;
  3.2 Udemy AWS Practice Tests
&lt;/h4&gt;

&lt;p&gt;Along with online courses, Udemy also has some practice tests sold as online courses that you can use for preparing the AWS solution architect exam. Out of many AWS SAA-C01 Practice tests on Udemy, I recommend these two, both are the most up-to-date tests:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.1. Jon Bonson's AWS Developer Associate Practice tests (&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Faws-certified-developer-associate-practice-exams-amazon%2F"&gt;260  questions&lt;/a&gt;)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is another AWS developer associate mock test on Udemy which is worth the recommendation. This course contains 6 mock tests of 65 questions each, which are good for your final preparation. If you consistently score 80+ on this mock test then you are ready for the real exam.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/javarevisited/6-best-aws-developer-associate-dva-c001-certification-practice-test-mock-exams-and-dumps-9e24573f509a"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4taSi3St--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-qexn1OzUbDc/YZj9HHCF3zI/AAAAAAAAqOE/YPWP-a1ceCw3mWge4lAkRUai2StP5JhVQCLcBGAsYHQ/w320-h179/CDA-PT.jpg" alt="best AWS developer certificate practice test" width="320" height="179"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.2. David Mayer's AWS Developer Associate Practice Question (&lt;a href="https://www.certification-questions.com/practice-exam/amazon/aws-certified-developer-associate?affiliateCode=fcff36fd-557a-4713-abf6-973e9924770f&amp;amp;utm_source=Javin&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=affiliate"&gt;987 questions&lt;/a&gt;)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is another big list of AWS practice questions, actually, they are exam dumps means they are real questions from past exams if you like to really go for those 900+ scores. &lt;/p&gt;

&lt;p&gt;This mock test has got 987 questions and 20 exam tests which make it the mother of all AWS practice papers. You don't need anything else after doing it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.certification-questions.com/practice-exam/amazon/aws-certified-developer-associate?affiliateCode=fcff36fd-557a-4713-abf6-973e9924770f&amp;amp;utm_source=Javin&amp;amp;utm_medium=affiliate&amp;amp;utm_campaign=affiliate"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BP5b7j8p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-saXTem1Dtu8/YZj9Nr2xGrI/AAAAAAAAqOI/3AVdgYttREYD1X05LFlZlBm31JzKCarxACLcBGAsYHQ/1-xGWAPEy88Tfwvmn6LDR2hw.jpeg" alt="best AWS developer certificate exam dumps" width="512" height="396"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;3.3. Stephane Maarek's AWS Developer Mock tests (&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Faws-certified-developer-associate-practice-tests-dva-c01%2F"&gt;293 questions&lt;/a&gt;&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Another High-quality and scenario-based questions to do well on real AWS tests. sometimes tougher than the actual example level.  This is a perfect exam to hone your speed and accuracy before appearing for the real exam. &lt;/p&gt;

&lt;p&gt;I highly recommend this practice tests to anyone serious about passing this exam on the first attempt and scoring high.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Faws-certified-developer-associate-practice-tests-dva-c01%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZE7JyBnR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-YcgQ1j27s_w/XzvXErNViRI/AAAAAAAAiYo/XUVwc5Bu7fAAKzrtEgCKkmwyiVSGX8K2QCLcBGAsYHQ/s400/AWS%252BCertified%252BDeveloper%252BAssociate%252B2020%252B-%252BBest%252BPractice%252BTest%252BUdemy%252BAWS.jpg" alt="best udemy mock test to pass AWS developer associate exam" width="400" height="225"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-handson-labs"&gt;
  &lt;/a&gt;
  4. Hands-on Labs
&lt;/h3&gt;

&lt;p&gt;Practice inside the AWS console is very important if you aspire to work as an AWS Certified Developer for AWS Cloud. In general, I advise students to join a course that also has practice labs and also opens an AWS free tier account.&lt;/p&gt;

&lt;p&gt;Since, you only remember if you do the stuff, these AWS practical sessions will help you to understand and memorize the services which you are reading like &lt;a href="https://javarevisited.blogspot.com/2020/08/top-5-courses-to-learn-amazon-aws-ec-2.html"&gt;EC2&lt;/a&gt;, &lt;a href="https://www.java67.com/2020/08/top-5-courses-to-learn-aws-s3-and-dynamoDB-in-depth.html"&gt;S3&lt;/a&gt;, &lt;a href="https://medium.com/javarevisited/7-best-aws-s3-and-dynamodb-courses-for-beginners-in-2021-a8a44b6066da"&gt;DynamoDB&lt;/a&gt;, IAM, and others. &lt;/p&gt;

&lt;p&gt;You can sign up for a &lt;a href="https://aws.amazon.com/free"&gt;free AWS account&lt;/a&gt; at the AWS portal. I highly recommend this to anyone who wants to become a certified AWS developer in 2022. This free account is great for practice. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EtxTmyA---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1.awsstatic.com/tmt/control-your-costs-free-tier-budgets/control-your-costs-free-tier-budgets-1b.50ece015ff1c01e43f4fe2c31abccfc773963263.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EtxTmyA---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1.awsstatic.com/tmt/control-your-costs-free-tier-budgets/control-your-costs-free-tier-budgets-1b.50ece015ff1c01e43f4fe2c31abccfc773963263.png" alt="How to use AWS Free Tier for Practice | AWS" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5-white-papers"&gt;
  &lt;/a&gt;
  5. White Papers
&lt;/h3&gt;

&lt;p&gt;If you are someone, who is not happy with 800+ core and want to go for a 900+ score then I also suggest you read White Papers and Case studies provided by Amazon and AWS. These are some of the most in-depth and practical content you will get anywhere on the internet.&lt;/p&gt;

&lt;p&gt;If you want to go one step more, you can also read AWS documentation as it provides the most up-to-date information, which is certainly an important factor given AWS is still evolving and there are hundreds of updates to catch up.&lt;/p&gt;

&lt;p&gt;Alternatively, you can also signup for AWS weekly on ACloudGuru which is a great way to keep up-to-date with new AWS changes.&lt;br&gt;
Here is the link to read AWS whitepapers -&lt;a href="https://aws.amazon.com/whitepapers"&gt;https://aws.amazon.com/whitepapers &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/s3/whitepaper-best-practices-s3-performance/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1oukH_RA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1.awsstatic.com/product-marketing/S3/Screen%2520Shot%25202020-04-23%2520at%25202.48.14%2520PM.6f1a750b0edc6edf2da5840d45ff27ce1211e312.png" alt="Whitepaper - Best practices design patterns - Optimizing performance of  Amazon S3" width="880" height="899"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5-tips-to-pass-aws-developer-certification-in-2022"&gt;
  &lt;/a&gt;
  5 Tips to Pass AWS Developer Certification in 2022
&lt;/h3&gt;

&lt;p&gt;Now that you know how to prepare for AWS Developer certification and become a certified AWS developer and also have access to best book, courses, and practice test, it's time for some practical tips which you can use to not only accelerate your preparation but also avoid silly mistakes in the exam and pass the exam in your first attempt.&lt;/p&gt;

&lt;p&gt;1. Passing marks for the AWS Certified Developer Associate certification exam varies daily. It could be 60% or 72% or even more but you should always prepare for 75% to pass the exam on the very first attempt.&lt;/p&gt;

&lt;p&gt;2. How much time do you need to prepare for the AWS Developer Associate exam? Well, preparation time mostly depends on experience level. If you have some AWS experience under your belt then 2-3 weeks of preparation is enough but if you are a complete beginner to AWS then 4 to 6 weeks is a reasonable time.&lt;/p&gt;

&lt;p&gt;3. Hands-on lab exercises are a must if you don't want to become a paper-certified AWS developer or solution architect. All the things you will learn and earn via certification also need a backup of hands-on experience. &lt;/p&gt;

&lt;p&gt;It's even more important for people who are not actively working in AWS as part of their day job. In short, get a &lt;a href="https://aws.amazon.com/"&gt;free AWS account&lt;/a&gt; open and try to break things, and learn how to fix them.&lt;/p&gt;

&lt;p&gt;4. Join the courses which are most up-to-date and also include lab exercises for the reason I have mentioned above. Since AWS is still evolving and there is a new feature coming up daily, it's important to choose the course which is not most up-to-date, not just in terms of the certification syllabus and curriculum but also with AWS feature and how to do things in a best and latest way in AWS.&lt;/p&gt;

&lt;p&gt;5. Solve as many practice questions as possible. This is by far the most important tip for me. Since you are going to appear for an exam, where you need to solve questions in a limited time, you got to do practice to be able to read, understand, and solve those problems quickly. I know many people how have got 1o to 15 questions wrong just because of time pressure.&lt;/p&gt;

&lt;p&gt;Mock tests and practice questions also help to solidify your knowledge and highlight gaps in your learning. For example, you can use them to find your strong and weak areas and then cover them better before the real exam.&lt;/p&gt;

&lt;p&gt;That's all about &lt;strong&gt;how to become a certified AWS Developer in 2022&lt;/strong&gt;. AWS Certifications, particularly the solution architect one are very important. This not only gives you approval from the AWS but also prepares you for your interviews and further work. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2019/08/how-to-crack-aws-certified-solution-architect-exam.html"&gt;AWS Solution Architects&lt;/a&gt; are also the most high-paying professionals with annual salaries ranging from $120,000 to $130,000 and as more and more companies are moving towards the cloud, there are a lot of opportunities for cloud developers and architects.&lt;/p&gt;

&lt;p&gt;Other **AWS Certification Resources **you may like to explore&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/08/how-to-crack-aws-certified-solution-architect-exam.html"&gt;How to Crack the AWS Solution Architect Associate Exam&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://d1.awsstatic.com/training-and-certification/docs-dev-associate/AWS-Certified-Developer-Associate_Exam-Guide.pdf"&gt;The Official AWS Developer Associate Exam Guide&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://d1.awsstatic.com/training-and-certification/docs-dev-associate/AWS-Certified-Developer-Associate_Sample-Questions.pdf"&gt;AWS Certified Developer --Associate (DVA-C01) Sample Exam Questions&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/05/top-5-courses-to-crack-aws-solutions-architect-associate-certification-exam-SAA-C01.html#axzz5rHwAwycj"&gt;Top 5 Courses to Crack AWS Solution Architect Associate Certification&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/10-best-aws-certified-cloud-practitioner-clf-c01-online-courses-and-practice-test-to-crack-ecc0f913091e"&gt;Top 10 AWS Certified Cloud Practitioner Online Courses&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/5-best-azure-fundamentals-courses-to-pass-az-900-certification-exam-in-2020-9e602aea035d"&gt;5 Best Azure Fundamental Courses for Beginners&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/05/top-5-cloud-courses-for-java-and-spring-boot-developers.html"&gt;Top 5 AWS and Cloud Courses for Java Developers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-10-courses-to-learn-amazon-web-services-aws-cloud-in-2020-best-and-free-317f10d7c21d"&gt;My Favorite Courses to learn AWS in depth&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/08/top-5-free-aws-solution-architect-Associate-certification-dumps-practice-questions.html"&gt;5 Free AWS Solution Architect Associate Practice Test, Dumps, and Mock Exam&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/04/top-5-course-to-crack-aws-certified-devops-engineer-professional-exam-certification.html"&gt;5 Courses to become AWS DevOps Engineer Professional &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/04/top-5-course-to-crack-aws-solution-architect-professional-sap-c01-certification-exam.html"&gt;Top 5 Courses to become AWS Solution Architect Professional&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/04/how-to-crack-microsoft-azure-fundamentals-certification-az-900-exam.html"&gt;How to pass the Azure Fundamentals Exam (AZ-900)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/03/top-5-aws-certified-cloud-practitioner-mock-test-practice-questions.html"&gt;Top 5 Mock test and Exam Dumps for AWS Cloud Practitioner (CLF-C01)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/02/top-5-courses-to-crack-aws-certified-cloud-practitioner-exam-certification-clf-c01.html"&gt;5 Best courses to Pass the AWS Cloud Practitioner exam&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.java67.com/2018/05/top-5-amazon-web-services-or-aws-courses-to-learn-online.html"&gt;5 Free Courses to learn Amazon Web Service&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/04/top-5-course-to-crack-aws-certified-devops-engineer-professional-exam-certification.html"&gt;Top 5 Courses to Crack AWS DevOps Engineer Exam&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/04/top-5-course-to-crack-aws-solution-architect-professional-sap-c01-certification-exam.html"&gt;Top 5 Courses to Crack AWS Solution Architect Professional Exam&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-10-courses-to-learn-amazon-web-services-aws-cloud-in-2020-best-and-free-317f10d7c21d"&gt;How to prepare for AWS Solution Architect Certification&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading this article so far. If you like this AWS Developer Associate certification roadmap and guide then please share it with your friends and colleagues.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P. S. -&lt;/strong&gt; If you are keen to pass the AWS Certified Developer Associate Certification but can't afford these resources and instead of looking for free resources to prepare for this prestigious certification then you can also check out this &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Faws-developer-associate-training%2F"&gt;FREE AWS Developer Associate Training&lt;/a&gt;&lt;/strong&gt; on Udemy. It's completely free and you just need an Udemy account to join this AWS training course.&lt;/p&gt;

</description>
      <category>cloudcomputing</category>
      <category>aws</category>
      <category>programming</category>
      <category>development</category>
    </item>
    <item>
      <title>JavaScript Struggles - Part 4 | Comparing</title>
      <author>‘Abdelraḥman Dwedar 👨🏻‍💻🇵🇸</author>
      <pubDate>Sun, 28 Nov 2021 07:39:32 +0000</pubDate>
      <link>https://dev.to/abdelrahman_dwedar/javascript-struggles-part-4-comparing-1op4</link>
      <guid>https://dev.to/abdelrahman_dwedar/javascript-struggles-part-4-comparing-1op4</guid>
      <description>&lt;h3&gt;&lt;b&gt;&lt;u&gt;Here we go again!&lt;/u&gt;&lt;/b&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/l1J9urAfGd3grKV6E/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l1J9urAfGd3grKV6E/giphy.gif" alt="Welcome back" width="480" height="216"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one is very easy but we all have to know it, you may already heard about it somewhere else too.&lt;br&gt;
If you weren't familiar with JS's comparing way keep going. If you're then this post is not for you. 😊👏🏻 &lt;/p&gt;



&lt;p&gt;There's two ways of comparing variables in JavaScript:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#Dequal"&gt;&lt;strong&gt;Two&lt;/strong&gt; Equal Signs (==)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Tequal"&gt;&lt;strong&gt;Three&lt;/strong&gt; Equal Signs (===)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#two-equal-signs-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Two&lt;/strong&gt; Equal Signs (==) &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Most majority of programming languages uses &lt;code&gt;==&lt;/code&gt; as the one and only comparing operator, but in JavaScript we're special. 😏&lt;/p&gt;

&lt;p&gt;&lt;code&gt;==&lt;/code&gt; is only comparing the value of the variable, ignoring the data type of it; so if there's a number that is equal to a number &lt;u&gt;inside the string&lt;/u&gt; it'll always be true.&lt;/p&gt;

&lt;p&gt;E.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Outputs: true&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Outputs: true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The data type of the variable will not be changed after the comparison&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;
  Some of Its Uses
  &lt;br&gt;
We can use it to check if the number is not &lt;code&gt;0&lt;/code&gt; or an empty string.&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Outputs: false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Outputs: false&lt;/span&gt;

&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hey!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Outputs: true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Outputs: true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#three-equal-signs-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Three&lt;/strong&gt; Equal Signs (===) &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;We use this as the normal comparing operator, that's only working with &lt;strong&gt;JavaScript&lt;/strong&gt;, &lt;strong&gt;TypeScript&lt;/strong&gt;, &lt;strong&gt;PHP&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;What &lt;code&gt;===&lt;/code&gt; actually does is that it compares the value &lt;u&gt;and the data type&lt;/u&gt;.&lt;/p&gt;

&lt;p&gt;E.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Outputs: false&lt;/span&gt;

&lt;span class="cm"&gt;/* They must be of the same data type. */&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Outputs: true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;===&lt;/code&gt; is the most used one. Probably because it's the easy way of conparing and we all understand it even if JavaScript wasn't your first language.&lt;/p&gt;






&lt;h4&gt;Thanks for reading! 😌&lt;br&gt;&lt;br&gt;
I hope this may be helpful for someone.&lt;h4&gt;
&lt;br&gt;
&lt;/h4&gt;
&lt;br&gt;
&lt;/h4&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>help</category>
    </item>
    <item>
      <title>The Next Generation of Digital Identity</title>
      <author>Mark Vassilevskiy</author>
      <pubDate>Sun, 28 Nov 2021 06:51:17 +0000</pubDate>
      <link>https://dev.to/markfusion/the-next-generation-of-digital-identity-552e</link>
      <guid>https://dev.to/markfusion/the-next-generation-of-digital-identity-552e</guid>
      <description>&lt;p&gt;Metaverse is a 3D virtual world where you can explore and chat with people from all over the globe in a shared, immersive space. Metaverse has been compared to Facebook's Spaces feature because it allows users to create an avatar of themselves and interact with other avatars in their shared virtual world. Metaverse has also launched its own augmented reality glasses called Meta Frames which allow users to see digital objects overlaid onto real-world spaces around them through their lenses.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#so-what-is-metaverse-anyway"&gt;
  &lt;/a&gt;
  So What is Metaverse Anyway?
&lt;/h2&gt;

&lt;p&gt;It's a question with a surprisingly difficult answer: what is Metaverse? Metaverse is an AR space that has been developed by Facebook, which you might know from things like the social media platform and instant messaging service. Metaverse allows users to create their own worlds or spaces that can be explored via an application on your phone. Metaverse offers some really cool features such as 360-degree video capture and more! Metaverse's augmented reality glasses, Meta Frames, allow users to overlay digital objects onto their real-world surroundings. Metaverse is a virtual space that has some really cool features and it isn't just limited to VR either!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#from-social-media-site-to-virtual-world"&gt;
  &lt;/a&gt;
  From Social Media Site To Virtual World
&lt;/h2&gt;

&lt;p&gt;Some people might remember Metaverse as the social media site Facebook was working on before it started its second iteration of Spaces in 2017 which allowed users to create avatars for themselves and explore other spaces created by other people who are also using this platform. It seems like Metaverse could potentially be an even bigger deal than what many had originally thought when looking at the 2020 launch date because the AR experience it provides looks pretty awesome so far. Of course, we'll have to wait until Metaverse is actually released to the public, but Metaverse promises a lot of things that could make it worth looking into.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-does-metaverse-look-like-right-now"&gt;
  &lt;/a&gt;
  So What Does Metaverse Look Like Right Now?
&lt;/h2&gt;

&lt;p&gt;As I mentioned earlier, Metaverse offers some really cool features such as 360-degree video capture. Also, has its own AR glasses called Meta Frames which allow users to see digital objects overlaid onto real-world spaces through their lenses. The virtual space itself looks pretty amazing so far - take a look at the trailer below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=SAL2JZxpoGY"&gt;https://www.youtube.com/watch?v=SAL2JZxpoGY&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Replace the word "the metaverse" in a sentence with "cyberspace." The meaning of the sentence will not usually be altered 90% of the time.&lt;/p&gt;

&lt;p&gt;The idea of the metaverse is, at its essence, a grandiose vision—a fully simulated world in which we may all participate. It's no surprise that people who are promoting such things as NFTs —cryptographic tokens that can be used to certify ownership of a digital asset—also embrace the concept of the metaverse.&lt;/p&gt;

&lt;p&gt;It's vital to note all of this because while it may be tempting to compare today's proto-metaverse concepts to the early internet and assume that everything will improve and develop in a straight line, that isn't a given. There's no assurance that people will want to hang out in a virtual office or play Texas Hold'em with Dreamworks Mark Zuckerberg if they don't have legs, much less whether VR and AR technology will ever become seamless enough to compete with smartphones and PCs.&lt;/p&gt;

&lt;p&gt;It's also possible that any genuine "metaverse" would simply be some cool VR games and digital avatars in Zoom chats.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-i-get-metaverses-ar-experience"&gt;
  &lt;/a&gt;
  How Can I Get Metaverse's AR Experience?
&lt;/h2&gt;

&lt;p&gt;As I said Metaverse is only a really optimistic plan for the near future, and right now you can't get your hands on this experience since there are no headsets available for purchase yet however Facebook said that Meta will be launching in near future, so if you're interested in this new technology or sphere, call it as you want, you should read me further, and I'll tell you more about new features about it and not only :)&lt;/p&gt;

</description>
      <category>metaverse</category>
      <category>discuss</category>
      <category>news</category>
    </item>
  </channel>
</rss>
