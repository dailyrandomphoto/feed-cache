<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Portfolio Web App Development using React, Typescript and Chakra UI</title>
      <author>Balram Rathore</author>
      <pubDate>Thu, 04 Nov 2021 05:04:45 +0000</pubDate>
      <link>https://dev.to/devstack06/portfolio-web-app-development-using-react-typescript-and-chakra-ui-99l</link>
      <guid>https://dev.to/devstack06/portfolio-web-app-development-using-react-typescript-and-chakra-ui-99l</guid>
      <description>&lt;p&gt;Hi guys, I have started a new video series for portfolio web app development using #react #ChakraUI and #Typescript. I will be going to cover the storybook too. If anyone is interested in this series, they can find the links below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Introduction video: &lt;a href="https://youtu.be/-dxHHNgO1dg"&gt;https://youtu.be/-dxHHNgO1dg&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Typescript overview video: &lt;a href="https://youtu.be/_Kha2yBztWI"&gt;https://youtu.be/_Kha2yBztWI&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qQF_RUT0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exc6xj9e3mbbeoejx3me.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qQF_RUT0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exc6xj9e3mbbeoejx3me.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>portfolio</category>
    </item>
    <item>
      <title>Free Certification Courses for Developers 🔥</title>
      <author>Savio Martin</author>
      <pubDate>Thu, 04 Nov 2021 03:20:23 +0000</pubDate>
      <link>https://dev.to/saviomartin/free-certification-courses-for-developers-3378</link>
      <guid>https://dev.to/saviomartin/free-certification-courses-for-developers-3378</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello-folks"&gt;
  &lt;/a&gt;
  Hello Folks 👋
&lt;/h2&gt;

&lt;p&gt;This is Savio here. 14 year old, building useful products. Helping people with tweets and blogs on web development, frotend tips, and interesting resources.&lt;/p&gt;

&lt;p&gt;Today, I'd like to share 7 Free Certification Courses for Developers Let's goooo 🚀&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-freecodecamp"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://www.freecodecamp.org/learn/"&gt;FreeCodeCamp&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R00d_IcB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q4no7ov5d95xyq6f9ry1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R00d_IcB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q4no7ov5d95xyq6f9ry1.png" alt="FreeCodeCamp" width="880" height="495"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;FreeCodeCamp is one of the most popular sites offering free certification. FreeCodeCamp is a non-profit organization that consists of an interactive learning web platform, an online community forum, chat rooms, support etc. FreeCodeCamp is the best place to learn code free and earn certification.&lt;/p&gt;

&lt;p&gt;10 certifications available: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Responsive Web Design&lt;/li&gt;
&lt;li&gt;JavaScript Algorithms and Data Structures&lt;/li&gt;
&lt;li&gt;Front End Development&lt;/li&gt;
&lt;li&gt;Data Visualization&lt;/li&gt;
&lt;li&gt;Backend Development&lt;/li&gt;
&lt;li&gt;Quality Assurance&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Data Analysis with Python&lt;/li&gt;
&lt;li&gt;Information Security&lt;/li&gt;
&lt;li&gt;Machine Learning&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-fundamentals-of-digital-marketing-by-google"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://learndigital.withgoogle.com/digitalgarage/course/digital-marketing"&gt;Fundamentals of digital marketing by Google&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Me5e2H0q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gglcpxbllz3svtpdhtob.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Me5e2H0q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gglcpxbllz3svtpdhtob.png" alt="Fundamentals of digital marketing by Google" width="880" height="495"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;There are 26 modules to explore, all created by Google trainers, packed full of practical exercises and real-world examples to help you turn knowledge into action.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-cognitive-class-by-ibm"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://cognitiveclass.ai/learn"&gt;Cognitive Class by IBM&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JXjVwlqs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5melniqyazhsmbtkjw9v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JXjVwlqs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5melniqyazhsmbtkjw9v.png" alt="Cognitive Class by IBM" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn leading-edge technologies like Blockchain, Data Science, AI, Cloud, Serverless, Docker, Kubernetes and more... with certification fully free of charge. Build your career with skills employers seek.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-test-automation-university"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://testautomationu.applitools.com/"&gt;Test Automation University&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FaHwzoiW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6w8wttjes9zgciwmhv43.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FaHwzoiW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6w8wttjes9zgciwmhv43.png" alt="Test Automation University" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Free test automation courses with videos, transcripts, quizzes, credits, rank badges, and certificates! everything free thought by experts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-programming-essentials-in-python-by-cisco"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://www.netacad.com/courses/programming/pcap-programming-essentials-python"&gt;Programming Essentials in Python by Cisco&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ue0vvuA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0a0c6mizy2imf38t0hn5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ue0vvuA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0a0c6mizy2imf38t0hn5.png" alt="Programming Essentials in Python by Cisco" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;75 hours long course led by leading developers teching Python, the versatile programming language completely free of charge and with certification.&lt;/p&gt;

&lt;p&gt;Course includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;8 Modules&lt;/li&gt;
&lt;li&gt;Practice Labs&lt;/li&gt;
&lt;li&gt;Module Quizzes and Module Tests&lt;/li&gt;
&lt;li&gt;Summary Tests&lt;/li&gt;
&lt;li&gt;Final Exam&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#6-python-training-course"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://data-flair.training/python-course/"&gt;Python Training Course&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t36QkIVk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duxj4wk140ilavjd7pt6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t36QkIVk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/duxj4wk140ilavjd7pt6.png" alt="Python Training Course" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A perfect blend of in-depth Python theoretical knowledge and strong practical skills, this Free course for Python introduces real-time Python projects  to give you a headstart in learning Python and enables you to bag top Python jobs in the industry.&lt;/p&gt;

&lt;p&gt;Course includes: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;5 real-time projects and 20 complementary projects&lt;/li&gt;
&lt;li&gt;100+ hrs of study material, practical codes, quizzes, interview guides&lt;/li&gt;
&lt;li&gt;case studies to gain expertise&lt;/li&gt;
&lt;li&gt;certificate&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#7-learn-by-kaggle"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://www.kaggle.com/learn"&gt;Learn by Kaggle&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JuKNVdGb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/opxxs3mrbpbxhsbbrxrh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JuKNVdGb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/opxxs3mrbpbxhsbbrxrh.png" alt="Learn by Kaggle" width="880" height="495"&gt;&lt;/a&gt;   &lt;/p&gt;

&lt;p&gt;Gain the skills you need to do independent data science projects. They pare down complex topics to their key practical components, so you gain usable skills in a few hours (instead of weeks or months). The courses are free, and could earn certificates.&lt;/p&gt;

&lt;p&gt;Certifications available: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Pandas&lt;/li&gt;
&lt;li&gt;Data Visualization&lt;/li&gt;
&lt;li&gt;Feature Engineering&lt;/li&gt;
&lt;li&gt;SQL&lt;/li&gt;
&lt;li&gt;Deep Learning&lt;/li&gt;
&lt;li&gt;Computer Vision&lt;/li&gt;
&lt;li&gt;Time Series&lt;/li&gt;
&lt;li&gt;Data Cleaning&lt;/li&gt;
&lt;li&gt;AI Ethics&lt;/li&gt;
&lt;li&gt;Geospatial Analysis&lt;/li&gt;
&lt;li&gt;Machine Learning&lt;/li&gt;
&lt;li&gt;Natural Language Processing&lt;/li&gt;
&lt;li&gt;Intro Intro to Game AI&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  👀 Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Yeah, that's a wrap. Hope you enjoyed the article. Do not hesitate to share your feedback. I am on Twitter &lt;a href="https://twitter.com/SavioMartin7"&gt;@saviomartin7&lt;/a&gt;. Give a follow!&lt;/p&gt;

&lt;p&gt;Follow me on Github &lt;a href="https://github.com/saviomartin"&gt;@saviomartin&lt;/a&gt;, Don't miss my amazing projects! 💯&lt;/p&gt;

&lt;p&gt;Feedbacks are greatly appreciated! 🙌 Have an amazing day!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  🌎 Lets connect
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://github.com/saviomartin"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/saviomartin7"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>opensource</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>CSS em and rem units #CSSforJS</title>
      <author>Zach Snoek</author>
      <pubDate>Thu, 04 Nov 2021 03:03:30 +0000</pubDate>
      <link>https://dev.to/zachsnoek/css-em-and-rem-units-cssforjs-5697</link>
      <guid>https://dev.to/zachsnoek/css-em-and-rem-units-cssforjs-5697</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This is my first post in a series about topics covered in Josh Comeau's &lt;a href="https://css-for-js.dev/"&gt;CSS for JavaScript Developers&lt;/a&gt; course. These posts will be brief, polished versions of my notes. I'll write about new things I learned or deepen my understanding of something already familiar to me.&lt;/p&gt;

&lt;p&gt;In this post, we'll explore the &lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt; units in CSS, covered in module 0 of the course.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ems"&gt;
  &lt;/a&gt;
  Ems
&lt;/h2&gt;

&lt;p&gt;An &lt;code&gt;em&lt;/code&gt; is a unit relative to the &lt;code&gt;font-size&lt;/code&gt; of the current element. When used for the &lt;code&gt;font-size&lt;/code&gt; property, an &lt;code&gt;em&lt;/code&gt; is relative to the &lt;code&gt;font-size&lt;/code&gt; of the &lt;em&gt;parent&lt;/em&gt; element.&lt;/p&gt;

&lt;p&gt;For example, if an element has a &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;16px&lt;/code&gt; and &lt;code&gt;padding&lt;/code&gt; of &lt;code&gt;2em&lt;/code&gt;, the element's &lt;code&gt;padding&lt;/code&gt; will be 32 pixels (16 x 2):&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zachsnoek/embed/VwzPgjG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If an element has a &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;16px&lt;/code&gt; and its child has a &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;1.5em&lt;/code&gt;, the child's &lt;code&gt;font-size&lt;/code&gt; will be 24 pixels (16 x 1.5):&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zachsnoek/embed/abypXWE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If the element's  &lt;code&gt;font-size&lt;/code&gt; is not set, the closest ancestor with a &lt;code&gt;font-size&lt;/code&gt; gets used. Note that browsers have a default font size of 16 pixels out of the box, so &lt;code&gt;1em&lt;/code&gt; is generally equal to 16 pixels.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;em&lt;/code&gt;s are useful when scaling some property with the element's &lt;code&gt;font-size&lt;/code&gt;. Consider the following &lt;code&gt;.box&lt;/code&gt; class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To create small, medium, and large boxes with these same proportions, we can alter the  &lt;code&gt;font-size&lt;/code&gt; of each &lt;code&gt;.box&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zachsnoek/embed/porRGpR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-compounding-problem"&gt;
  &lt;/a&gt;
  The compounding problem
&lt;/h3&gt;

&lt;p&gt;Because &lt;code&gt;em&lt;/code&gt;s are relative, the value of an &lt;code&gt;em&lt;/code&gt; in descendant elements can compound. This can cause unexpected layout changes when a font size change ripples through descendant elements. For instance, if an element has a &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;2em&lt;/code&gt; and its child has a &lt;code&gt;font-size&lt;/code&gt; of &lt;code&gt;1.5em&lt;/code&gt;, the child's font size is 48 pixels (16 x 2 x 1.5):&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zachsnoek/embed/mdMRZjO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rems"&gt;
  &lt;/a&gt;
  Rems
&lt;/h2&gt;

&lt;p&gt;A &lt;code&gt;rem&lt;/code&gt;, short for "root em," is like an &lt;code&gt;em&lt;/code&gt;, but its value is relative to the root &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag. So, if the root &lt;code&gt;font-size&lt;/code&gt; is 16 pixels, a value of &lt;code&gt;2rem&lt;/code&gt; is 32 pixels at every level in the DOM:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zachsnoek/embed/wvqgLLy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rem&lt;/code&gt;s are always relative to the root element, so there isn't an issue with compounding. This makes them more predictable and consistent than &lt;code&gt;em&lt;/code&gt;s:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zachsnoek/embed/oNeBrKx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We can use &lt;code&gt;rem&lt;/code&gt;s to scale values globally by only changing the root &lt;code&gt;font-size&lt;/code&gt;. The following &lt;code&gt;article&lt;/code&gt; has many font sizes specified in &lt;code&gt;rem&lt;/code&gt;s, and we can use a media query to change all the sizes by setting the root &lt;code&gt;font-size&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/zachsnoek/embed/MWvJNYx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#em-and-rem-a11y-benefits"&gt;
  &lt;/a&gt;
  Em and rem a11y benefits
&lt;/h2&gt;

&lt;p&gt;Both &lt;code&gt;em&lt;/code&gt;s and &lt;code&gt;rem&lt;/code&gt;s help make our sites more accessible by respecting the user's default font size, set in their browser's settings. Using a fixed unit such as &lt;code&gt;px&lt;/code&gt; will override this setting, but &lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt; will scale it. This makes &lt;code&gt;rem&lt;/code&gt;s particularly good for typography because we can scale the user's font size preference globally without &lt;code&gt;em&lt;/code&gt; interference.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;em&lt;/code&gt; and &lt;code&gt;rem&lt;/code&gt; are relative units. An &lt;code&gt;em&lt;/code&gt; is generally relative to the current element's &lt;code&gt;font-size&lt;/code&gt;; when used for the &lt;code&gt;font-size&lt;/code&gt; property, it's relative to its parent's &lt;code&gt;font-size&lt;/code&gt;. A &lt;code&gt;rem&lt;/code&gt; is relative to the root &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element's &lt;code&gt;font-size&lt;/code&gt;, which is usually 16 pixels. Take caution when using &lt;code&gt;em&lt;/code&gt;s because of their compounding effect; &lt;code&gt;rem&lt;/code&gt;s are more predictable and increase accessibility by respecting the user's default font size.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  Let's connect
&lt;/h2&gt;

&lt;p&gt;Thanks for reading! If you enjoyed this post, connect with me on &lt;a href="https://www.linkedin.com/in/zach-snoek-5b327b179/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://github.com/zachsnoek"&gt;GitHub&lt;/a&gt;, and &lt;a href="https://twitter.com/zach_snoek"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://css-for-js.dev/"&gt;Josh Comeau | CSS for JavaScript Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=_-aDOAMmDHI"&gt;Kevin Powell | CSS em and rem explained #CSS #responsive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units"&gt;MDN | CSS values and units&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-size"&gt;MDN | font-size&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>cssforjs</category>
    </item>
    <item>
      <title>Java Tip: What are Methods, Functions, and Procedures?</title>
      <author>Edwin Torres ✨</author>
      <pubDate>Thu, 04 Nov 2021 02:43:16 +0000</pubDate>
      <link>https://dev.to/realedwintorres/java-tip-what-are-methods-functions-and-procedures-4nfm</link>
      <guid>https://dev.to/realedwintorres/java-tip-what-are-methods-functions-and-procedures-4nfm</guid>
      <description>&lt;p&gt;Methods 🦁, Functions 🐯, and Procedures 🐻, Oh My!&lt;/p&gt;

&lt;p&gt;Programmers often use these terms interchangeably. But there are differences among them. The following paragraphs describe methods, functions, and procedures in Java.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#methods"&gt;
  &lt;/a&gt;
  Methods
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;method&lt;/strong&gt; in Java is a subroutine that is part of a &lt;em&gt;class&lt;/em&gt;. The subroutine is like a miniature program that can execute in other parts of the program. Methods promote code reuse and maintainability.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;method definition&lt;/em&gt; consists of the modifier, return type, name, parameter list, exception list, and body. The method name and parameter types form the &lt;em&gt;method signature&lt;/em&gt;. The method signature uniquely identifies the method for execution.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Java also has &lt;em&gt;constructor methods&lt;/em&gt;. A constructor is a special method that creates an object of a class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are two types of methods: &lt;em&gt;procedures&lt;/em&gt; and &lt;em&gt;functions&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#procedures"&gt;
  &lt;/a&gt;
  Procedures
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;procedure&lt;/strong&gt; is a method that does &lt;em&gt;not&lt;/em&gt; have a return value. To define a method to be a procedure, define the return type to be &lt;code&gt;void&lt;/code&gt;. An example of a built-in procedure in Java is &lt;code&gt;System.out.println()&lt;/code&gt;. This procedure simply outputs its parameter to the console, without returning a value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;function&lt;/strong&gt; is a method that &lt;em&gt;does&lt;/em&gt; have a return value. To define a method to be a function, set its return type to be the type of the value it is returning. An example of a built-in function in Java is &lt;code&gt;Math.pow()&lt;/code&gt;. This &lt;code&gt;Math&lt;/code&gt; function accepts two &lt;code&gt;double&lt;/code&gt; parameters and returns the first parameter raised to the power of the second parameter. The return type is &lt;code&gt;double&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, &lt;em&gt;user-defined&lt;/em&gt; methods are procedures and functions that &lt;strong&gt;you&lt;/strong&gt; define. Since Java only provides general-purpose methods, it is up to you to define methods that make sense for your programming project.&lt;/p&gt;

&lt;p&gt;If you liked this article &lt;em&gt;proceed&lt;/em&gt; to my Twitter profile &lt;a href="https://twitter.com/realEdwinTorres"&gt;&lt;code&gt;@realEdwinTorres&lt;/code&gt;&lt;/a&gt; and follow me! 😊 &lt;/p&gt;

</description>
      <category>java</category>
      <category>codenewbie</category>
      <category>tutorial</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Database Management Systems Pt. 1</title>
      <author>Adrian Brown</author>
      <pubDate>Thu, 04 Nov 2021 01:44:08 +0000</pubDate>
      <link>https://dev.to/cloudguruab/database-management-systems-pt-1-1k7f</link>
      <guid>https://dev.to/cloudguruab/database-management-systems-pt-1-1k7f</guid>
      <description>&lt;h4&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h4&gt;

&lt;p&gt;Lets take a look at the ecosystem for databases and the tools that govern them.&lt;/p&gt;

&lt;p&gt;To note, a database is a collection of inter-related data which helps in efficient retrieval, insertion and deletion of data from database and organizes the data in the form of tables, views, schemas, reports and more.&lt;/p&gt;

&lt;p&gt;Looking at what database management systems can do we realize that these tools are used to manage our databases out of the box. &lt;/p&gt;

&lt;p&gt;In short, a database management system is the software used to efficiently and reliably handle data processing and management. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#by-the-end-of-this-tutorial-you-will"&gt;
  &lt;/a&gt;
  By the end of this tutorial, you will
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Understand the fundamentals of databases&lt;/li&gt;
&lt;li&gt;Working points of DBMS&lt;/li&gt;
&lt;li&gt;How to run simple Database queries&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#core-concepts"&gt;
  &lt;/a&gt;
  Core Concepts
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;We must always be thinking about our data&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5&gt;
  &lt;a href="#quick-use-cases"&gt;
  &lt;/a&gt;
  Quick use cases,
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Creation of a database&lt;/li&gt;
&lt;li&gt;Retrieval of information from the database&lt;/li&gt;
&lt;li&gt;Updating the database&lt;/li&gt;
&lt;li&gt;Managing a database&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With DBMS's being so important in the management of our databases a DBMS will look to focus on the following problems: Redundancy of data, Inconsistency of Data, Difficult Data Access, Unauthorized Access, No Concurrent Access, No Backup and Recovery.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#architecture"&gt;
  &lt;/a&gt;
  Architecture
&lt;/h5&gt;

&lt;p&gt;The structure of a DBMS is laid out in three levels which are known as your physical, conceptual and external levels. This can be looked at as a 3-tier'd architecture in relation to what a DBMS provides. &lt;/p&gt;

&lt;p&gt;Each level will serve a specific focus for a DBMS as the physical layer is the information about the location of database objects in the data store is kept. The conceptual level data is represented in the form of various database tables. At the external level objects will specify a view of the data in terms of conceptual level tables.&lt;/p&gt;

&lt;p&gt;As noted earlier, we must always think about our data. This is important walking through the 3-tier architecture as data independence states that changes in data at one level shouldn't affect another. &lt;/p&gt;

&lt;p&gt;Types of Data Independence: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Physical Data Independence: Any change in the physical location of tables and indexes should not affect the conceptual level or external view of data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Conceptual Data Independence: The data at conceptual level schema and external level schema must be independent.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;This concludes the first part of my series on Database Management Systems, I will be posting more on whats to be continued shortly!&lt;/em&gt; &lt;/p&gt;

</description>
      <category>database</category>
      <category>sql</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The key to developer happiness and how to prevent coding from becoming just another job</title>
      <author>Heshie Brody</author>
      <pubDate>Thu, 04 Nov 2021 00:31:08 +0000</pubDate>
      <link>https://dev.to/heshiebee/the-key-to-developer-happiness-and-how-to-prevent-coding-from-becoming-just-another-job-4m60</link>
      <guid>https://dev.to/heshiebee/the-key-to-developer-happiness-and-how-to-prevent-coding-from-becoming-just-another-job-4m60</guid>
      <description>&lt;h6&gt;
  &lt;a href="#this-article-first-appeared-here-httpswwwzigiaiblogthekeytodeveloperhappinessandhowtopreventcodingfrombecomingjustanotherjob"&gt;
  &lt;/a&gt;
  This article first appeared here:  &lt;a href="https://www.zigi.ai/blog/the-key-to-developer-happiness-and-how-to-prevent-coding-from-becoming-just-another-job"&gt;https://www.zigi.ai/blog/the-key-to-developer-happiness-and-how-to-prevent-coding-from-becoming-just-another-job&lt;/a&gt;
&lt;/h6&gt;

&lt;h2&gt;
  &lt;a href="#mid-sprint-gloom-day-tuesday"&gt;
  &lt;/a&gt;
  Mid Sprint Gloom Day Tuesday
&lt;/h2&gt;

&lt;p&gt;It was a week after sprint planning and I sat at my desk feeling lost and bored. Here I was in my third year in my software developer career feeling overwhelmed and uninspired. &lt;/p&gt;

&lt;p&gt;All the pain that motivated me into focusing my career on software development and out of my boring e-commerce job was back but yet as a software developer.&lt;/p&gt;

&lt;p&gt;I still remember the moment when at age 14 I double-clicked the Visual basic form editor button and coded my first &lt;code&gt;MessageBox.Show("Hello world")&lt;/code&gt;. The invigoration and excitement of seeing a computer execute the code that I just wrote were second to none. Ask every software developer this and they will remember that exact moment as if it happened yesterday. &lt;/p&gt;

&lt;p&gt;After experiencing the above I started questioning the creative work industry. &lt;/p&gt;

&lt;p&gt;Is it impossible to experience that same feeling of joy when working creatively on my hobby as when doing it as a job?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Will a job always be a job?&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Now, for us, as software developers to stay happy, we must stick close to our core motivation which is creation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-birth-of-a-software-developer"&gt;
  &lt;/a&gt;
  The birth of a software developer
&lt;/h2&gt;

&lt;p&gt;As a human our greatest joy comes from creation, making something out of nothing. To many people buying creations built by others is enough to satisfy that need but for some of us who are desperate enough, unless we build something of our own we feel no joy.&lt;/p&gt;

&lt;p&gt;This is how we as software developers are born.&lt;/p&gt;

&lt;p&gt;Now, for us, as software developers to stay happy, we must stick close to our core motivation which is creation. &lt;/p&gt;

&lt;p&gt;All the noise and pressure not related to creating or building stuff moves us further away from what made us join this creative industry in the first place.&lt;/p&gt;

&lt;p&gt;To keep all the businessey side of things away from dampening the fun part which is building stuff, it must not feel like a burden to the creator aka the software developer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As a software developer, when I had the following I was most calm and looked forward to my work:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Having my day prepared with a clear list of work assigned&lt;/li&gt;
&lt;li&gt;Having ample and reasonable time for each task&lt;/li&gt;
&lt;li&gt;Knowing when my work is considered complete
&lt;/li&gt;
&lt;li&gt;Having my manager in sync instead of pinging me all day in Slack with requests for progress updates. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The greatest pleasure as a software developer is when you are assigned work where you know exactly what the specifications are and what the result should look like. &lt;/p&gt;

&lt;p&gt;Being able to knock something out to its completion allows us to no end. &lt;/p&gt;

&lt;p&gt;Working off a vague idea or not knowing where to begin or end leads to burnout and boredom since to us as creators there we now have additional baggage around the creation process which turns it into a job and less like a hobby.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-nonmanager-manager"&gt;
  &lt;/a&gt;
  The non-manager, manager
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/l0IykI5OLMhjtnB60/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l0IykI5OLMhjtnB60/giphy.gif" alt="Like a boss" width="498" height="226"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's be honest, software development is chaotic much like business is chaotic. &lt;/p&gt;

&lt;p&gt;For a team to be run efficiently some sort of separation must be placed between the software developers and the business side of things to bring it under control.&lt;/p&gt;

&lt;p&gt;This necessary separation is the job of the team lead or engineering manager.&lt;/p&gt;

&lt;p&gt;But even with a manager in place, the challenge is still there. &lt;/p&gt;

&lt;p&gt;The manager must find the right balance of communication and goal setting with biz dev who wants everything yesterday and the development teams who are running a backlog.&lt;/p&gt;

&lt;p&gt;Many times the pressure put on the manager finds its way down to the developers and before you know it your development team is pressured and micro-managed not knowing what to work on first in turn making what we find fun as a hobby the opposite as a job. &lt;/p&gt;

&lt;p&gt;We as developers on the other side are too intimidated or shy to communicate our feelings back up and we just accept the workload and pressure as a given.  And this is a huge problem since work overload and micromanagement are the greatest causes of burnout and indirection much like that Tuesday I described above.&lt;/p&gt;

&lt;p&gt;Finding the perfect manager that can properly lead their team while keeping developer happiness levels high is difficult.&lt;br&gt;
Humans are humans and we succumb to pressure and emotions. Even the greatest leaders sometimes break down and falter.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-key-to-developer-happiness-and-how-to-prevent-coding-from-becoming-just-another-job"&gt;
  &lt;/a&gt;
  The key to developer happiness and how to prevent coding from becoming just another job
&lt;/h2&gt;

&lt;p&gt;The great Lao Tzu put it best &lt;strong&gt;&lt;em&gt;“A leader is best when people barely know he exists. When his work is done, his aim fulfilled, they will say: we did it ourselves.”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, what if I started my Tuesday morning a bit differently that day? As I get to my desk a curated checklist of exactly what I’ll be working on that day is in my inbox. I report to my manager the progress I have been making, and I put aside my timidness and discuss my progress and provide feedback if they assigned too much work to me.&lt;/p&gt;

&lt;p&gt;In doing so I would’ve felt mentally at ease knowing that my manager has been updated with my progress and has been communicated with how I feel about the workload.&lt;/p&gt;

&lt;p&gt;Also since my goals and expectations are set I now have a clear purpose and goal for that day feeling free to indulge in building in a way that makes me happy.&lt;/p&gt;

&lt;p&gt;Now from my manager’s perspective, I have removed their morning overhead and already put them at ease since they now know exactly what I’m working on plus insight on the team progress and efficiency leading to a more relaxed atmosphere and greater developer happiness.&lt;/p&gt;

&lt;p&gt;Finding the courage to do so is a game changer. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;But do we find the courage?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Do we speak up when we disagree on how something should be done or do we just stay quiet to get done with ‘that’ meeting?&lt;/p&gt;

&lt;p&gt;Do we communicate our feelings about the timeline or do we just nod along so as not to be called out as a “non-team player?&lt;/p&gt;

&lt;p&gt;Here’s an exercise; now it might not be for everybody and if you’re great at communicating then kudos to you but for those who are not great at communicating [yet] next time you feel something during a meeting; a thought, an insight, a timeline expectation, speak up! &lt;/p&gt;

&lt;p&gt;It’ll be &lt;strong&gt;&lt;em&gt;tough&lt;/em&gt;&lt;/strong&gt; at first, you’ll feel your body fighting many different forces but carry on, &lt;strong&gt;&lt;em&gt;It’s worth it&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;People hire you for more than just listening. They want your opinion and thoughts, they want that clarity and insight that your background brings that someone else may not have.&lt;/p&gt;

&lt;p&gt;In doing so you will effectively get more comfortable communicating your thoughts and help keep your team in sync while also putting you at ease and giving you the needed clarity to focus on what you love best which is building product.&lt;/p&gt;

&lt;p&gt;A win-win! But only if you have the courage. &lt;/p&gt;

&lt;p&gt;May the courage be with us.&lt;br&gt;
&lt;a href="https://i.giphy.com/media/kaBmqpJtdvFqo/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/kaBmqpJtdvFqo/giphy.gif" alt="May the force be with you" width="500" height="427"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Heshie&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;"&lt;a href="https://zigi.ai"&gt;Zigi&lt;/a&gt; is your own AI-powered personal assistant, managing your entire dev workflow and handling all your mundane, &lt;br&gt;
Non-programming tasks across multiple apps, so you can focus on code creation and innovation".&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>productivity</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>How to start with stripe</title>
      <author>Roopali Singh</author>
      <pubDate>Thu, 04 Nov 2021 00:09:05 +0000</pubDate>
      <link>https://dev.to/roopalisingh/how-to-start-with-stripe-3pip</link>
      <guid>https://dev.to/roopalisingh/how-to-start-with-stripe-3pip</guid>
      <description>&lt;p&gt;Hi there👋,&lt;/p&gt;

&lt;p&gt;In this guide we will be learning how to integrate a payment gateway in our web application using &lt;strong&gt;stripe&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We are working with &lt;code&gt;React&lt;/code&gt; for the frontend and &lt;code&gt;Node&lt;/code&gt; &amp;amp; &lt;code&gt;Express&lt;/code&gt; for the backend. To make api calls we are using &lt;code&gt;axios&lt;/code&gt; library.&lt;/p&gt;

&lt;p&gt;For simplicity we will not be focusing on design.&lt;br&gt;
To start we are using &lt;code&gt;create-react-app&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;1.&lt;/span&gt; After getting our project bootstrapped with &lt;code&gt;create-react-app&lt;/code&gt;, in your React code we need to add two dependencies.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save @stripe/react-stripe-js @stripe/stripe-js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;span&gt;2.&lt;/span&gt; Now in &lt;code&gt;App.js&lt;/code&gt; file, call the &lt;code&gt;loadStripe&lt;/code&gt; function to pass the &lt;strong&gt;stripe test publishable key&lt;/strong&gt; which you can get from the stripe dashboard.&lt;br&gt;
(&lt;em&gt;it is safe to share the stripe publishable key, they aren’t secret&lt;/em&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;loadStripe&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@stripe/stripe-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stripePromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;loadStripe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;STRIPE_PUBLISHABLE_KEY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Make sure to call `loadStripe` outside of a component’s render &lt;/span&gt;
&lt;span class="c1"&gt;// to avoid recreating the `Stripe` object on every render.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;span&gt;3.&lt;/span&gt; Next, we will pass the returned &lt;code&gt;promise&lt;/code&gt; from loadStripe function to &lt;code&gt;Elements&lt;/code&gt; provider which is a wrapper that allows us to access Stripe object in any nested component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Elements&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@stripe/react-stripe-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;loadStripe&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@stripe/stripe-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stripePromise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;loadStripe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;STRIPE_PUBLISHABLE_KEY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Elements&lt;/span&gt; &lt;span class="nx"&gt;stripe&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;stripePromise&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CheckoutPage&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Elements&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;// Render an Elements provider at the root of your React app&lt;/span&gt;
&lt;span class="c1"&gt;// so that it is available everywhere you need it.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;span&gt;4.&lt;/span&gt; In the &lt;code&gt;CheckoutPage&lt;/code&gt; component, we're going to add a &lt;code&gt;CardElement&lt;/code&gt; which is a flexible single-line input that collects all necessary card details.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CardElement&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@stripe/react-stripe-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CheckoutPayment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;paymentHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// We're going to make the function async in the next step&lt;/span&gt;
    &lt;span class="c1"&gt;// handling the payment&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;paymentHandler&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CardElement&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Pay&lt;/span&gt; &lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;CheckoutPage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The CardElement will look something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ZIG42E8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v8v86ach86i3zzhjtc9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ZIG42E8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v8v86ach86i3zzhjtc9.PNG" alt="CardElement" width="609" height="171"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;5.&lt;/span&gt; Now we are going to use these two powerful hooks: &lt;code&gt;useStripe&lt;/code&gt; and &lt;code&gt;useElements&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;useElements&lt;/strong&gt; is used to safely pass the payment information collected by the Payment Element to the Stripe API.&lt;br&gt;
&lt;strong&gt;useStripe&lt;/strong&gt; hook returns a reference to the Stripe instance passed to the Elements provider (&lt;em&gt;we're going to use it to confirm payments&lt;/em&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CardElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useElements&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useStripe&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@stripe/react-stripe-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CheckoutPayment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stripe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStripe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useElements&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;paymentHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;stripe&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Stripe.js has not yet loaded.&lt;/span&gt;
      &lt;span class="c1"&gt;// Make sure to disable form submission until Stripe.js has&lt;/span&gt;
      &lt;span class="c1"&gt;// loaded.&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="c1"&gt;// hadling the payment&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;paymentHandler&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CardElement&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;disabled&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;stripe&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Pay&lt;/span&gt; &lt;span class="nx"&gt;Now&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;CheckoutPage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now to complete payment with stripe, we need a &lt;code&gt;clientSecret&lt;/code&gt; which is unique for every payment.&lt;/p&gt;

&lt;p&gt;For this we have to create a &lt;code&gt;paymentIntent&lt;/code&gt; by providing it with the amount and currency.&lt;/p&gt;

&lt;p&gt;This code will be in the backend so let's move to our Node.js code.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;6.&lt;/span&gt; First, we will install stripe in the backend.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install stripe
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;span&gt;7.&lt;/span&gt; For this step, we will need the &lt;strong&gt;stripe test secret key&lt;/strong&gt; which we can get from the dashboard.&lt;/p&gt;

&lt;p&gt;▶️(&lt;strong&gt;Remember: You must keep your secret API keys confidential. Do not just put it on any version control platform&lt;/strong&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Stripe&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stripe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stripeSecret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Stripe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;STRIPE_SECRET_KEY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;///////////// Getting client secret /////////////&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/payment/create&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paymentIntent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; 
&lt;span class="nx"&gt;stripeSecret&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paymentIntents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;inr&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;201&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;clientSecret&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;paymentIntent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;client_secret&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;😃Whoa!&lt;/strong&gt;&lt;br&gt;
If you have reached up till here then you have covered more than half of the journey. Just a couple more steps to go 🔥&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xSJytslq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6m1lmks6dvr3n6w7krkd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xSJytslq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6m1lmks6dvr3n6w7krkd.png" alt="Half way through" width="600" height="630"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we have written our function to get the &lt;code&gt;clientSecret&lt;/code&gt; at the backend.&lt;/p&gt;

&lt;p&gt;Now back to frontend.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;CheckoutPage&lt;/code&gt; component, we need to make a request to our server to create a new &lt;code&gt;paymentIntent&lt;/code&gt; as soon as the page loads.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;clientSecret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setClientSecret&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;errorMsg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setErrorMsg&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getClientSecret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;`/api/payment/create?total=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;// All API requests expect amounts to be provided&lt;/span&gt;
      &lt;span class="c1"&gt;// in a currency’s smallest unit.&lt;/span&gt;

      &lt;span class="nx"&gt;setClientSecret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientSecret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setErrorMsg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;getClientSecret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;the_amount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;the_amount&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have now received out &lt;code&gt;clientSecret&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now there's one last step to complete the payment handler function and do some error handling.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;CheckoutPage&lt;/code&gt; component, we will check if the payment is completed by calling &lt;code&gt;stripe.confirmPayment()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CheckoutPayment&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;clientSecret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setClientSecret&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;errorMsg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setErrorMsg&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;processing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setProcessing&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSuccess&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="nx"&gt;getClientSecret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;the_amount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;the_amount&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;paymentHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;stripe&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;errorMsg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setProcessing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;stripe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;confirmCardPayment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clientSecret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;payment_method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;card&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;elements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CardElement&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;})&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;paymentIntent&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setErrorMsg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;setProcessing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;setSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;})&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setErrorMsg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;setProcessing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;setSuccess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;paymentHandler&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CardElement&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errorMsg&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;errorMsg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errorMsg&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;disabled&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;stripe&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;processing&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;success&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Pay&lt;/span&gt; &lt;span class="nx"&gt;Now&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have successfully integrated the payment gateway in our webapp using stripe.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: You need to change the &lt;code&gt;test publishable key&lt;/code&gt; and &lt;code&gt;test secret key&lt;/code&gt; with the &lt;code&gt;live publishable and secret key&lt;/code&gt; to use it in the production enviroment.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#heres-a-demo-that-i-have-made-with-some-styling"&gt;
  &lt;/a&gt;
  Here's a demo that I have made with some styling:
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#i-call-it-moon-with-stripes"&gt;
  &lt;/a&gt;
  I call it &lt;a href="https://moonclock.herokuapp.com/"&gt;Moon with Stripes&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m8ieFGO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lqji5o9jx6yt5odbbz9v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m8ieFGO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lqji5o9jx6yt5odbbz9v.png" alt="Finally Done!" width="880" height="525"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>payment</category>
    </item>
    <item>
      <title>What Are DApps: A Complete Guide To Decentralized Applications</title>
      <author>Suhail Kakar</author>
      <pubDate>Wed, 03 Nov 2021 23:55:54 +0000</pubDate>
      <link>https://dev.to/suhailkakar/what-are-dapps-a-complete-guide-to-decentralized-applications-oc2</link>
      <guid>https://dev.to/suhailkakar/what-are-dapps-a-complete-guide-to-decentralized-applications-oc2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-a-dapp"&gt;
  &lt;/a&gt;
  What is a dApp?
&lt;/h2&gt;

&lt;p&gt;A decentralized app (dApp) is a digital application or a program that resides and executes on a blockchain or peer-to-peer network of computers rather than a single computer and is independent of anyone's authority's control.&lt;/p&gt;

&lt;p&gt;DApps is short for &lt;strong&gt;Decentralized applications&lt;/strong&gt; which means it is not controlled by a single organization and they are playing a vital role in the world of blockchain. These decentralized applications operate on a blockchain network in a public, open-source, and decentralized environment that is free of central control and influence.&lt;/p&gt;

&lt;p&gt;Here is a great example of dApps by Cat McGee, which she mentioned in a  &lt;a href="https://twitter.com/hashnode/status/1455453722948034563"&gt;Twitter Space&lt;/a&gt; organized by Hashnode.&lt;/p&gt;

&lt;p&gt;You can create a Twitter-like dApp and deploy it on a blockchain, allowing any user to post tweets. Once they've been uploaded no one, even you (app maker) can &lt;strong&gt;delete&lt;/strong&gt; those tweets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fPWtH2T_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635980779353/sc9fmr_V-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fPWtH2T_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635980779353/sc9fmr_V-.png" alt="Blue and White Mind Map Presentation (1920 x 1000 px).png" width="880" height="458"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some dApps features are &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is open-source which means that its source code is available for common users.&lt;/li&gt;
&lt;li&gt;When miners successfully contribute to the ecosystem, they are rewarded with tokens.&lt;/li&gt;
&lt;li&gt;It is decentralized and adopts blockchain technology. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that you have good knowledge about dApps, let's learn what are their benefits.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-dapps"&gt;
  &lt;/a&gt;
  Benefits of dApps
&lt;/h2&gt;

&lt;p&gt;DApps have many benefits, however, in this article, I have mentioned only a few of them such as &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-downtime"&gt;
  &lt;/a&gt;
  No downtime
&lt;/h3&gt;

&lt;p&gt;There will be no downtime or restrictions as it doesn't rely on a single point of failure like a hosting server instead it runs on a peer-to-peer network of computers. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#transparency"&gt;
  &lt;/a&gt;
  Transparency
&lt;/h3&gt;

&lt;p&gt;Data from decentralized applications are stored on a public ledger, which keeps track of everything in a safe and transparent manner that ensures no one can tamper with it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#opensource"&gt;
  &lt;/a&gt;
  Open-source
&lt;/h3&gt;

&lt;p&gt;The code of open-source dApps is available for review. Because more input can be offered, and the entire ecosystem can be more adaptable, progress faster, and evolve more safely.&lt;/p&gt;

&lt;p&gt;And yes, we all know, everything has both benefits and drawbacks, so here are a few Drawbacks of dApps &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drawbacks-of-dapps"&gt;
  &lt;/a&gt;
  Drawbacks of dApps
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#uxuser-experience"&gt;
  &lt;/a&gt;
  UX/User experience
&lt;/h3&gt;

&lt;p&gt;It may be more difficult to create user-friendly experiences since setting up the tool stack required to communicate with the blockchain in a properly safe manner may be too difficult for the average end-user.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#maintenance"&gt;
  &lt;/a&gt;
  Maintenance
&lt;/h3&gt;

&lt;p&gt;Because every peer in the network must update their node software, running in a complicated environment dispersed amongst peers makes maintenance, debugging, and updates more difficult.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fewer-thirdparty-dapps"&gt;
  &lt;/a&gt;
  Fewer Third-Party DApps
&lt;/h3&gt;

&lt;p&gt;Sometimes we have to rely on third-party APIs to collect certain third-party information under the present centralized app structure. We don't have this advantage with DApps because there isn't yet a substantial third-party DApps ecosystem in place.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Because DApps cannot access APIs through a centralized application, they must engage with other DApps for their API needs, which is also a drawback.&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That is it for this article. I hope you found this article useful, if you need any help please let me know in the comment section. &lt;/p&gt;

&lt;p&gt;Would you like to buy me a coffee, You can do it &lt;a href="https://www.buymeacoffee.com/suhailkakar"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's connect on  &lt;a href="https://twitter.com/suhailkakar"&gt;Twitter&lt;/a&gt;  and  &lt;a href="https://www.linkedin.com/in/suhailkakar/"&gt;LinkedIn&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;👋 Thanks for reading, See you next time&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Jest testing without the noise</title>
      <author>Pedro Figueiredo</author>
      <pubDate>Wed, 03 Nov 2021 23:22:38 +0000</pubDate>
      <link>https://dev.to/pffigueiredo/jest-testing-without-the-noise-2n8g</link>
      <guid>https://dev.to/pffigueiredo/jest-testing-without-the-noise-2n8g</guid>
      <description>&lt;p&gt;&lt;em&gt;This post takes by granted that you already have Jest set up and a test script defined on your &lt;code&gt;package.json&lt;/code&gt; file.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-1-test-file-at-a-time"&gt;
  &lt;/a&gt;
  Running 1 test file at a time
&lt;/h2&gt;

&lt;p&gt;You know that feeling when you you are writing &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt; tests and for you to check their correctness, you need to run all of them, and on top of that, &lt;strong&gt;wait a couple minutes&lt;/strong&gt;? ⌛&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Well I at least did for a while.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But luckily, there is a better way! By running the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;npm test -- FILE_NAME
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will only be running the &lt;strong&gt;test suites inside that file&lt;/strong&gt;! Not only that, but you don't even need to write the full name of the file, at Jest will be running all the matches.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use-the-command"&gt;
  &lt;/a&gt;
  How to use the command
&lt;/h3&gt;

&lt;p&gt;Looking at the folder structure bellow 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/src
  /components   
    /button      
      Button.tsx
      Button.test.tsx
      ButtonCTA.test.tsx
    /heading
      Heading.tsx
      Heading.test.tsx
    /...
package.json
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If would run &lt;code&gt;npm run test -- button&lt;/code&gt; you would actually be running the tests inside both &lt;code&gt;Button.test.tsx&lt;/code&gt; and &lt;code&gt;ButtonCTA.test.tsx&lt;/code&gt;. That is because Jest will run all the tests whose name match the following regex &lt;code&gt;/button/i&lt;/code&gt;, making it look not only for all the file names that include the string &lt;code&gt;button&lt;/code&gt;, but also ignoring the casing.&lt;/p&gt;

&lt;p&gt;So, in this scenario, to only run the tests inside &lt;code&gt;Button.test.tsx&lt;/code&gt; you should actually be typing something more restrictive like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;npm test -- button.test
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gC6tQATK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l9m0hgt6wjr7wvhcxla6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gC6tQATK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l9m0hgt6wjr7wvhcxla6.png" alt="Test passing inside Button.test.tsx" width="667" height="223"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-1-test-case-or-1-test-suite"&gt;
  &lt;/a&gt;
  Running 1 test case or 1 test suite
&lt;/h2&gt;

&lt;p&gt;Now, many times we really &lt;strong&gt;just want to run that one test&lt;/strong&gt; that is being "stubborn" and doesn't want to pass, at all.&lt;/p&gt;

&lt;p&gt;We already know how to strict Jest to only run tests inside one file, but that can still take some time, depending on how many tests we have in that file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#option-1-run-by-test-name"&gt;
  &lt;/a&gt;
  Option 1 - Run by test name
&lt;/h3&gt;

&lt;p&gt;According to &lt;a href="https://jestjs.io/docs/setup-teardown#general-advice"&gt;Jest Docs&lt;/a&gt;, it is possible to only run 1 test by name, with the following comand:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;npm test -- -t '&amp;lt;testName&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;OR &amp;lt;testSuiteName&amp;gt;&lt;span class="s1"&gt;'     
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But by doing so, you will not only have some probabilities of running more than 1 test (because name collapses), as well, as &lt;strong&gt;it will still be kinda unoptimized&lt;/strong&gt;, since Jest must look into all the files, to check if there is any name match, thus, passing or running the tests.&lt;/p&gt;

&lt;p&gt;Now, if we concat both flags of &lt;strong&gt;looking for the file name&lt;/strong&gt; + the one to &lt;strong&gt;look for the test name&lt;/strong&gt;, we could create something nice:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;npm run test -- button.test -t "should render the primary button"   
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command above, will only run the tests inside &lt;code&gt;button.test.tsx&lt;/code&gt; whose name matches "should render the primary button". This way we can run a more optimized way to run the specific test we want!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#option-2-using-raw-only-endraw-"&gt;
  &lt;/a&gt;
  Option 2 - Using &lt;code&gt;.only()&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;When marking a test case/suite with &lt;code&gt;.only&lt;/code&gt;, Jest will only run that one (you can actually mark more than one), skipping  all the others.&lt;/p&gt;

&lt;p&gt;This way, we can combine the command we learned before to run only 1 file (&lt;code&gt;npm test -- button.test&lt;/code&gt;) and do following on top of that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="c1"&gt;// Only this test will be executed inside this file&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;only&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should render the primary button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Primary&lt;/span&gt; &lt;span class="p"&gt;{...(&lt;/span&gt;&lt;span class="nx"&gt;Primary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toHaveTextContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/Genie/i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should render the secondary button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Secondary&lt;/span&gt; &lt;span class="p"&gt;{...(&lt;/span&gt;&lt;span class="nx"&gt;Secondary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toHaveTextContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/Genie/i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That way, every time we run the tests pointing into the &lt;code&gt;button.test.tsx&lt;/code&gt; file, only the test marked with &lt;code&gt;.only&lt;/code&gt; will be executed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#option-3-watch-mode"&gt;
  &lt;/a&gt;
  Option 3 - Watch mode
&lt;/h3&gt;

&lt;p&gt;Watch mode, as the name indicates, sets up a running environment that is watching for changes inside our test files.&lt;/p&gt;

&lt;p&gt;Fortunately, watch mode brings a &lt;strong&gt;wizard menu&lt;/strong&gt;, that allows us to easily filter whatever file or test we want to be watching the changes, making it way faster to execute the test!&lt;/p&gt;

&lt;p&gt;The first step is obviously to start the watch mode with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;npm run test -- --watch
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And once the menu appears, you should start by choosing the file in which the test you want to run stands - &lt;strong&gt;simply press "p"&lt;/strong&gt; and start typing out the name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--doVw3eFb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n89agshj78o0krjh078b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--doVw3eFb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n89agshj78o0krjh078b.png" alt="Jest menu showing all the possible options" width="573" height="135"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now that only 1 file's tests are being run, it's time to select the test we are interested in! And for that, you should just &lt;strong&gt;press "t" in the terminal&lt;/strong&gt; and once again, choose the test by typing his name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YdjGnyv7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92yxvd5zjfumf243zwbj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YdjGnyv7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92yxvd5zjfumf243zwbj.png" alt="Jest menu showing how to choose test names" width="562" height="194"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And magic happens 🎩! Now every time you make changes to that specific test and save the file, only that test will be executed, how cool is that!? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Whenever you are trying to fix that one test, stop being lazy by just running the command you have set up on your &lt;code&gt;package.json&lt;/code&gt; file and &lt;strong&gt;use one of the techniques listed above&lt;/strong&gt;!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>testing</category>
      <category>react</category>
    </item>
    <item>
      <title>Essentials of README</title>
      <author>chaitdwivedi</author>
      <pubDate>Wed, 03 Nov 2021 22:23:35 +0000</pubDate>
      <link>https://dev.to/chaitdwivedi/essentials-of-readme-3i79</link>
      <guid>https://dev.to/chaitdwivedi/essentials-of-readme-3i79</guid>
      <description>&lt;p&gt;&lt;code&gt;README.md&lt;/code&gt; is a minimum qualifying requirement to call a project well documented. It is basically an introduction to your project. &lt;/p&gt;

&lt;p&gt;A &lt;code&gt;README&lt;/code&gt; file typically written in &lt;a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Here-Cheatsheet"&gt;Markdown&lt;/a&gt; and contains: &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clipboard-summary"&gt;
  &lt;/a&gt;
  📋 Summary
&lt;/h2&gt;

&lt;p&gt;A short description of the problem the project solves. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#star2-key-features"&gt;
  &lt;/a&gt;
  🌟 Key Features
&lt;/h2&gt;

&lt;p&gt;A list of features that make your project great at solving the given problem. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#arrowforward-getting-started"&gt;
  &lt;/a&gt;
  ▶️ Getting Started
&lt;/h2&gt;

&lt;p&gt;This section is basically a usage guide. Include installation and usage instructions here. &lt;/p&gt;

&lt;p&gt;This is also a good place to add some code examples as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#computer-contribution-notes"&gt;
  &lt;/a&gt;
  💻 Contribution Notes
&lt;/h2&gt;

&lt;p&gt;Discuss coding style and guidelines. Include steps to run test suite and introduce the contributor to any CI validation (if already setup)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exclamation-support"&gt;
  &lt;/a&gt;
  ❗ Support
&lt;/h2&gt;

&lt;p&gt;List ways in which your end users can seek help. Email, Slack and JIRA are some good ways of allowing your users and developers to file bugs and ask for help. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 Focus on building a community of expert users and developers, so that you don't have to support your project all the time.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#copyright-license"&gt;
  &lt;/a&gt;
  ©️ License
&lt;/h2&gt;

&lt;p&gt;Read about licenses &lt;a href="https://choosealicense.com"&gt;here&lt;/a&gt;. &lt;/p&gt;




&lt;p&gt;I found a collection of &lt;a href="https://github.com/matiassingers/awesome-readme"&gt;awesome-readmes&lt;/a&gt; which you might enjoy as well! &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>documentation</category>
    </item>
    <item>
      <title>Live Streaming As A Service</title>
      <author>Prosper Otemuyiwa</author>
      <pubDate>Wed, 03 Nov 2021 22:17:19 +0000</pubDate>
      <link>https://dev.to/unicodeveloper/live-streaming-as-a-service-h3m</link>
      <guid>https://dev.to/unicodeveloper/live-streaming-as-a-service-h3m</guid>
      <description>&lt;p&gt;Live streaming as a service offers a video-hosting platform for real-time broadcasting at events like concerts, conferences, webinars, sports games, and corporate functions. The various solutions up for grabs feature professional broadcasting capabilities, such as cloud-transcoding tools, white-label video players, air-tight privacy and security, global delivery, and monetization. &lt;/p&gt;

&lt;p&gt;This article delves into these topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Live Streaming Platforms Comparison

&lt;ul&gt;
&lt;li&gt;Cloudinary’s Live streaming&lt;/li&gt;
&lt;li&gt;IBM Cloud Video&lt;/li&gt;
&lt;li&gt;Brightcove&lt;/li&gt;
&lt;li&gt;Panopto&lt;/li&gt;
&lt;li&gt;Kaltura&lt;/li&gt;
&lt;li&gt;DaCast&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;What Features You Should Consider When Choosing a Live
Streaming Platform?

&lt;ul&gt;
&lt;li&gt;Ease of Use&lt;/li&gt;
&lt;li&gt;Optimized for Varying Internet Speeds&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;Scalability&lt;/li&gt;
&lt;li&gt;Should Include Interactivity&lt;/li&gt;
&lt;li&gt;Built from the Latest Technology&lt;/li&gt;
&lt;li&gt;Deployment Options&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#comparison-of-livestreaming-platforms"&gt;
  &lt;/a&gt;
  Comparison of Live-Streaming Platforms
&lt;/h2&gt;

&lt;p&gt;Following are six popular live-streaming platforms.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cloudinary"&gt;
  &lt;/a&gt;
  Cloudinary
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://cloudinary.com/video_api"&gt;Cloudinary’s video API&lt;/a&gt; live-streaming solution supports both Real-Time Messaging Protocol (RTMP) and Web Real-Time Communication (WebRTC), outputting adaptive bitrate streaming.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;WebRTC&lt;/strong&gt; enables live streaming of on-the-fly video effects and transformations through a dedicated JavaScript library for a maximum duration of one hour. Ideal for device compatibility, this protocol is perfect for embedding in web or mobile applications so that viewers can start streaming from any device on a web browser.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;RTMP&lt;/strong&gt;, which can be initialized with an API call to Cloudinary, returns an RTMP input URI for use with dedicated streaming software and hardware. This protocol is ideal for delivering video content to viewers through multiple platforms.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#ibm-cloud-video"&gt;
  &lt;/a&gt;
  IBM Cloud Video
&lt;/h3&gt;

&lt;p&gt;Previously known as Ustream, IBM Cloud Video facilitates video and live streaming. Pricing is on a subscription basis with Silver, Gold, and Platinum options. You pay between $99 to $999 per month according to the hours viewed. &lt;/p&gt;

&lt;p&gt;Usage might exceed the allotted number of viewer hours if an event runs longer than planned or becomes more popular than expected. In that case, additional fees might apply. Large enterprises and institutions that hold townhalls or product launches might incur unexpected, large fees. &lt;/p&gt;

&lt;p&gt;A key advantage of IBM Cloud Video is that it secures sensitive content by authorizing access through single sign-on and vigilantly protecting passwords. However, even though the platform also offers dedicated support and production services, it does not provide hands-on, in-person training. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#brightcove"&gt;
  &lt;/a&gt;
  Brightcove
&lt;/h3&gt;

&lt;p&gt;Brightcove focuses on live streaming, cloud encoding, and hosting of video on demand (VOD). The platform comprises these modular products:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cloud-based video hosting&lt;/li&gt;
&lt;li&gt;One-time ad insertion on the server side&lt;/li&gt;
&lt;li&gt;Tools for monetization&lt;/li&gt;
&lt;li&gt;Liftplay video player&lt;/li&gt;
&lt;li&gt;Live streaming of video&lt;/li&gt;
&lt;li&gt;Zencoder for transcoding of cloud video&lt;/li&gt;
&lt;li&gt;Over-the-top (OTT) flow for internet TV&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, Brightcove is highly known for its detailed analytics and video-marketing tools, which help organizations understand their audience and capture leads.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#panopto"&gt;
  &lt;/a&gt;
  Panopto
&lt;/h3&gt;

&lt;p&gt;Panopto specializes in video solutions for businesses and universities with capabilities for live streaming, recording, managing, searching, quizzing, analyzing, and sharing video content. On top of all that, the platform’s content management system (CMS) centralizes video playlists, playback, and streams. Impressively, Panopto boasts over five million end-users in the e-learning arena.&lt;/p&gt;

&lt;p&gt;Panopto’s primary focus is on online education for the internal audience through a wide range of tools with which you can create an “internal YouTube.” You can also integrate the platform with learning-management systems.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kaltura"&gt;
  &lt;/a&gt;
  Kaltura
&lt;/h3&gt;

&lt;p&gt;A free platform for managing cloud-based, open-source video, including hosting and distribution for live streams as well as VOD, Kaltura is an alternative to the self-hosting model. However, the platform requires an infrastructure of servers for hosting and distribution. &lt;/p&gt;

&lt;p&gt;Kaltura enjoys enthusiastic support by a user community that creates and shares many integrations and add-ons. On the flip side, the many features can overwhelm beginners, making for a steep learning curve.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dacast"&gt;
  &lt;/a&gt;
  DaCast
&lt;/h3&gt;

&lt;p&gt;As a provider of live-streaming and video-management solutions, DaCast’s capabilities are fewer than those from enterprise-grade vendors. A plus is the platform’s customization options through API, which, however, adds complexity for teams tasked with building a branded viewing experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-to-consider"&gt;
  &lt;/a&gt;
  Features to Consider
&lt;/h2&gt;

&lt;p&gt;Of the many features available from live-streaming platforms, below are the key ones to ponder.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ease-of-use"&gt;
  &lt;/a&gt;
  Ease of Use
&lt;/h3&gt;

&lt;p&gt;An adaptable and intuitive user interface is a must. Ideally, even newbies can quickly learn the nuances and get up to speed in order to do their job.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optimization-for-various-internet-speeds"&gt;
  &lt;/a&gt;
  Optimization for Various Internet Speeds
&lt;/h3&gt;

&lt;p&gt;Issues related to internet connectivity and playback inevitably lead to poor user experience. Unfortunately, many live-streaming platforms do not optimize playback. &lt;/p&gt;

&lt;p&gt;Hence, look for solutions with which you can transcode video to come up with various quality options. Your viewers can then pick their option or invoke automatic processes with adaptive bitrate streaming. &lt;/p&gt;

&lt;p&gt;Additionally, to avoid overcrowding the network, a content delivery network (CDN) would be desirable for intelligently routing videos.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h3&gt;

&lt;p&gt;Organizations must be able to secure live streams and restrict access to only authorized individuals, which is critical for videos that contain confidential data. A breach could lead to violation of regulations, damage in reputation, financial loss, and deprivation of competitiveness. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scalability"&gt;
  &lt;/a&gt;
  Scalability
&lt;/h3&gt;

&lt;p&gt;With scalable video content, you can allow access by more people to a live stream and accommodate random surges in viewership. An ideal live-streaming platform would automatically and intelligently balance the content load to scale up servers as viewership rises. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interactivity"&gt;
  &lt;/a&gt;
  Interactivity
&lt;/h3&gt;

&lt;p&gt;Ensure that you can create engaging and captivating video content on the live-streaming platform. Features like Q&amp;amp;A windows, notifications, surveys, and live chats that work well during live streaming are desirable.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#technology"&gt;
  &lt;/a&gt;
  Technology
&lt;/h3&gt;

&lt;p&gt;Find out if the platform leverages the latest streaming technologies to ensure compatibility with all streaming servers and devices. Preferably, the platform adopts the HTTP (HLS) protocol, MPEG-DASH for video streaming, or Microsoft Smooth Streaming, all supported by most devices and infrastructure. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deployment-options"&gt;
  &lt;/a&gt;
  Deployment Options
&lt;/h3&gt;

&lt;p&gt;Specific deployment options are crucial for enterprises that operate under strict security and compliance provisions. Also, determine if you would like to directly manage the cloud services. If so, you need a live-streaming platform for hosting data and the streaming infrastructure in cloud accounts or for streaming on premise in your data center.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;When planning a live broadcast or stream, companies often overlook the redistribution phase, but live-stream videos are useful well beyond initial streaming. Why? Because not everyone watches the first run. For a wider audience, you can upload recordings of the live content with Cloudinary’s media upload API, after which Cloudinary stores them in its Media Library. You can then serve the recordings as VOD.&lt;/p&gt;

&lt;p&gt;What’s more, you can serve on your site and other social networks the recorded and uploaded videos. Leveraging features such as Cloudinary’s content-aware cropping, video transcoding, and transformations helps deliver the content as VOD seamlessly to your audience. &lt;/p&gt;

&lt;p&gt;Why even think about VOD if live streaming is the hot trend, you ask? That’s due to the fact that VOD uniquely contributes to business success in post-event engagement, content reuse, and monetization, propelling you to connect with customers and grow your bottom line. Be sure to incorporate VOD into your marketing strategy. &lt;/p&gt;

&lt;p&gt;You’ll find these Cloudinary articles on VOD informative and helpful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloudinary.com/blog/after_taking_video_live_make_it_available_on_demand"&gt;After Taking Video Live, Make It Available On Demand&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloudinary.com/blog/preparing_your_live_streams_for_video_on_demand"&gt;Preparing Live Streams for Video on Demand&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>cloud</category>
      <category>video</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>C++ from the beginning - variables</title>
      <author>Chris Noring</author>
      <pubDate>Wed, 03 Nov 2021 22:07:26 +0000</pubDate>
      <link>https://dev.to/azure/c-from-the-beginning-variables-22nm</link>
      <guid>https://dev.to/azure/c-from-the-beginning-variables-22nm</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;TLDR; This is the second part in a series about C++. In this part, you learn about variables, what they are, what types exist and how you can use them to track state in your app.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0whats-a-variable-and-what-to-use-it-for"&gt;
  &lt;/a&gt;
   What's a variable and what to use it for
&lt;/h2&gt;

&lt;p&gt;When programming, you write a set of instructions to be executed one after another, from top to bottom. Say you perform a calculation, or you have some other piece of data that you want to save and refer to later, at that point, you need a variable. A variable is a named reference holding a piece of data that remembers the data you assigned to it. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, you have the variable &lt;code&gt;sum&lt;/code&gt; and it remembers the result of a computation, of 3 being added to 5. Where you later to refer to this variable, it's able to resolve into the value, where you to print it for example, like the below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;statement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// prints 8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, you have just that scenario, a computation on the first row, several statements the program executes when run, and finally, you refer to &lt;code&gt;sum&lt;/code&gt; again and it remembers its value.&lt;/p&gt;

&lt;p&gt;Now that you see the idea of having a variable, let's look at some concepts around variables that we need to know about. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#declare-a-variable-it-has-a-type-and-a-name"&gt;
  &lt;/a&gt;
  Declare a variable, it has a type and a name
&lt;/h2&gt;

&lt;p&gt;You've seen a variable being created so far, the variable &lt;code&gt;sum&lt;/code&gt;, but what did happen? Let's look at it again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above you are &lt;em&gt;declaring&lt;/em&gt; a variable, you tell the program a variable exists by a certain name &lt;code&gt;sum&lt;/code&gt; and a type. See the above as a combination of type and name:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The type in this case is &lt;code&gt;int&lt;/code&gt; and stores whole numbers like 11 or 1000 and so on;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initialise-a-variable-type-name-and-value"&gt;
  &lt;/a&gt;
  Initialise a variable, type, name, and value
&lt;/h2&gt;

&lt;p&gt;To initialise a variable is similar to declaring a variable. The difference is that when you initialise something you tell the program a variable exists by a certain name AND that it has a starter value, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;players&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#%C2%A0different-variable-types"&gt;
  &lt;/a&gt;
   Different variable types
&lt;/h2&gt;

&lt;p&gt;So far, you've seen the type &lt;code&gt;int&lt;/code&gt;, storing whole numbers, what other types are there?&lt;/p&gt;

&lt;p&gt;Well, let's list what we refer to as the basic data types, in some programming languages referred to as &lt;em&gt;primitives&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;int&lt;/strong&gt;, stores whole numbers, for example, 6 or 23&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;float and double&lt;/strong&gt;, stores numbers with decimals. 7 and 15 decimals for &lt;code&gt;float&lt;/code&gt; and &lt;code&gt;decimals&lt;/code&gt; respectively, for example, 3.14&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;char&lt;/strong&gt;, stores a single character, like &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt;, here's an example, 'a', note the use of single quote.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;bool&lt;/strong&gt;, stores true or false. Here's an example &lt;code&gt;canSave = false;&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#example-with-int-and-float"&gt;
  &lt;/a&gt;
  Example with int and float
&lt;/h2&gt;

&lt;p&gt;Let's look at an example of how our usage of float and int would differ:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;players&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.14&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above, &lt;code&gt;players&lt;/code&gt; makes sense to be a stored to be a whole number, there's no part of a player. For &lt;code&gt;PI&lt;/code&gt;, which is decimal with many many decimals, a &lt;code&gt;float&lt;/code&gt; is at least needed. Even then, it's an approximation. You most likely need to make it a &lt;code&gt;double&lt;/code&gt; and even then it doesn't hold enough decimals.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#operators-like-"&gt;
  &lt;/a&gt;
  Operators like + - * / %
&lt;/h2&gt;

&lt;p&gt;For number type variables, operators plays a part in helping to perform calculations, to add, subtract, multiply and so on. Here's some operators you are likely to use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;+&lt;/strong&gt;, adds two numbers together, for example &lt;code&gt;1 + 1&lt;/code&gt; is 2.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;-&lt;/strong&gt;, removes right side from left side, for example, &lt;code&gt;1 - 1&lt;/code&gt; is 0.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;/&lt;/strong&gt;, divides left side, right side times, for example &lt;code&gt;4 /2&lt;/code&gt; is 2.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;*&lt;/strong&gt;, multiplication, multiplies the values with each other, for example, &lt;code&gt;3 * 4&lt;/code&gt; is 12.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;%&lt;/strong&gt;, modulo, gives the left over when doing a division, for example, &lt;code&gt;5 % 2&lt;/code&gt; is 1.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0naming"&gt;
  &lt;/a&gt;
   Naming
&lt;/h2&gt;

&lt;p&gt;Naming is important topic. It's also a topic where folks don't usually agree on what to use. There's one golden rule though, be consistent, use the same way of naming throughout.&lt;/p&gt;

&lt;p&gt;To quote the creator of C++ Bjarne&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Name a variable (function, type, whatever) based on what it is or does. Choose meaningful name; that is, choose names that will help people understand your program &lt;a href="https://www.stroustrup.com/bs_faq2.html"&gt;Bjarne on naming&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some has suggestion Pascal casing for variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;account_total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and camel case for functions (more on functions in future part in this series):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;calculateTotal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;In this article, you've learned about some basic variables, what they are, why use them and some basic variable types. You should now be better setup to use them to make your programs perform calculations and remember responses and making them easier to read.&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
