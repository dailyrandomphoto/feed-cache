<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Chrome Extensions 101</title>
      <author>Akshaya Venkatesh</author>
      <pubDate>Sun, 27 Jun 2021 16:47:16 +0000</pubDate>
      <link>https://dev.to/venkyakshaya/chrome-extensions-101-3dif</link>
      <guid>https://dev.to/venkyakshaya/chrome-extensions-101-3dif</guid>
      <description>&lt;p&gt;This blog will discuss how to setup, build and run your own Chrome extension. At the end, you will be able to create a simple &lt;strong&gt;Day Count Down&lt;/strong&gt; extension that will display the number of days left to a particular date. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m0Tyy9pQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8sef14kjohtkycvowxck.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m0Tyy9pQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8sef14kjohtkycvowxck.gif" alt="Gif image showing the working of the extension"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets go!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#chrome-extension-terminologies"&gt;
  &lt;/a&gt;
  Chrome Extension Terminologies
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#manifestjson"&gt;
  &lt;/a&gt;
  manifest.json
&lt;/h4&gt;

&lt;p&gt;JSON file that tells Chrome what the extension does, what permissions it needs and the files it will use.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#background-script"&gt;
  &lt;/a&gt;
  Background script&lt;br&gt;
&lt;/h4&gt;

&lt;p&gt;A script that runs independent of and parallel to the web page the user is on. It is used for state management and always has only one active instance.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#content-script"&gt;
  &lt;/a&gt;
  Content script
&lt;/h4&gt;

&lt;p&gt;A script that runs in the context of the web page that the user is on. It can access, read and/or modify the DOM of the page that the user visits.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;Create a folder for your extension, say Count-Down, and in it a file called &lt;code&gt;manifest.json&lt;/code&gt;. In the file, add the manifest version, name of the extension, a description and the version of the extension to begin with. The file should now look similar to this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"manifest_version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Count Down Days"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Takes a date input and displays the number of days left until the given date"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#files-and-folder-structure"&gt;
  &lt;/a&gt;
  Files and Folder structure
&lt;/h2&gt;

&lt;p&gt;Now we go about creating the rest of the elements.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A file called &lt;em&gt;background.js&lt;/em&gt; in the root folder. This 
 will be our background script.&lt;/li&gt;
&lt;li&gt;A folder called &lt;em&gt;content&lt;/em&gt; in the root folder which will 
 hold: 

&lt;ol&gt;
&lt;li&gt;a HTML file called &lt;em&gt;popup.html&lt;/em&gt;. This file will 
  contain the markup for the extension's dropdown menu  &lt;/li&gt;
&lt;li&gt;a JS file called &lt;em&gt;popup.js&lt;/em&gt;.This is our &lt;em&gt;content 
  script&lt;/em&gt; 
&lt;/li&gt;
&lt;li&gt;a CSS file called popup.css to style the elements in our dropdown
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;A folder for images (extension icon and others - optional)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#link-the-files-to-the-manifestjson"&gt;
  &lt;/a&gt;
  Link the files to the &lt;em&gt;manifest.json&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;We will be referencing the background script and the HTML file in the &lt;em&gt;manifest.json&lt;/em&gt; as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"background"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"service_worker"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"background.js"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"default_popup"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"content/popup.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"default_icon"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"16"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"images/icon16.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;optional&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"24"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"images/icon24.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;optional&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"32"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"images/icon32.png"&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;optional&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The icon is initially set by the &lt;em&gt;default_icon&lt;/em&gt; key in the action entry in the manifest.json file. This key takes a dictionary that contains size to image paths. If the icon is not given Chrome automatically assigns an icon. &lt;/p&gt;

&lt;p&gt;The &lt;em&gt;manifest.json&lt;/em&gt; should now look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"manifest_version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Count Down Days"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Takes a date input and displays the day count left to the given date "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"background"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"service_worker"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"background.js"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"default_popup"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"content/popup.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"default_icon"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"16"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/images/timer.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"128"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/images/timer.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"48"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/images/timer.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"256"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/images/timer.png"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#running-the-extension"&gt;
  &lt;/a&gt;
  Running the Extension
&lt;/h2&gt;

&lt;p&gt;Open the Chrome browser and hit the following URL:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;chrome://extensions&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;In the top right corner you should see a toggle button titled &lt;strong&gt;Developer mode&lt;/strong&gt;. &lt;br&gt;
Check the toggle. &lt;br&gt;
Now you should see a set of options to load, pack and update extension. &lt;br&gt;
Select the &lt;strong&gt;Load unpacked&lt;/strong&gt; option. &lt;br&gt;
From the file system, now select the root folder of the extension. &lt;br&gt;
The extension will have loaded in the browser. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J90i3PHb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3andqsz3kjymygyhxor.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J90i3PHb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3andqsz3kjymygyhxor.png" alt="An image showing the Chrome extension loaded in the browser"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#giving-permissions-to-the-extension"&gt;
  &lt;/a&gt;
  Giving permissions to the Extension
&lt;/h2&gt;

&lt;p&gt;For this extension, we will be using the following permissions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;em&gt;activeTab&lt;/em&gt; - gives access to the currently active Chrome tab. In our case we need this permission as we are adding to the current active tab. &lt;/li&gt;
&lt;li&gt;
&lt;em&gt;scripting&lt;/em&gt; - allows running scripts in the context of the current web page. We use this permission to inject listener events that perform the date operations.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;storage&lt;/em&gt; - allows the storage of objects in Chrome. We will use this permission to store a date string in Chrome storage.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Add the following line in the &lt;em&gt;manifest.json&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"permissions": ["activeTab" ,"storage", "scripting"]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#adding-the-logic"&gt;
  &lt;/a&gt;
  Adding the logic
&lt;/h2&gt;

&lt;p&gt;Open the background.js and add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;08 15 2021&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;chrome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onInstalled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addListener&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;chrome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Default Date set to Aug 15, 2021&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;chrome.runtime&lt;/em&gt; is an API that lets the extension retrieve the background page, listen and respond to events.&lt;br&gt;
What we are essentially doing here is using the API to save a default date String in the Chrome storage. This value can be accessed by our content script later. We have also added a log statement which we will use for testing.&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;popup.html&lt;/em&gt; we add two buttons (one for displaying number of days left and the other to accept a new Date). We refer our styles - &lt;em&gt;popup.css&lt;/em&gt; and content script &lt;em&gt;popup.js&lt;/em&gt; in this file as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"popup.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"buttons"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"showDays"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"img-icon"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"../images/timer.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Sand Clock"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"changeDate"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"img-icon"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"../images/change-date.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Change Date Icon"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"popup.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have used image icons for the buttons. Assets are available in the Github link below. Let's add some basic styles in the &lt;em&gt;popup.css&lt;/em&gt; as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;button {
  height: 30px;
  width: 30px;
  outline: none;
  margin: 10px;
  border: none;
  border-radius: 2px;
}
button img {
  width: 100%;
  height: auto;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These styles cannot be accessed by the current page. Once this is saved, we go back to the browser, in the &lt;em&gt;chrome://extensions&lt;/em&gt; tab we find our extension. Each extension tile will have a refresh icon at the bottom-right corner. &lt;br&gt;
Refresh the extension and hit the &lt;em&gt;service worker&lt;/em&gt; hyperlink to view the logs of our service-worker, i.e., &lt;em&gt;background.js&lt;/em&gt;.  In this console we will now be able to see our Default date log.&lt;/p&gt;

&lt;p&gt;Next step is to view the extension's dropdown. Open out a different tab, in the top-right corner of Chrome the new extension will now be a clickable option. On click of the same, we will be able to see the dropdown menu as follows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EIKXoKrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltzrhjo4ng2n7d11ae84.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EIKXoKrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltzrhjo4ng2n7d11ae84.png" alt="Image showing dropdown with 2 options"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: The Chrome extension CANNOT be opened on &lt;em&gt;chrome://&lt;/em&gt; URL. &lt;/p&gt;

&lt;p&gt;The buttons will not do anything yet so let's add the listeners that will perform the magic. &lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;popup.js&lt;/em&gt; add the following two functions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Content script follows&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showDaysLeft&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// get the date string from Chrome storage&lt;/span&gt;
    &lt;span class="nx"&gt;chrome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;date&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;// create a new div that will be appended to the body&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;daysElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// adding styles to the new div&lt;/span&gt;
        &lt;span class="nx"&gt;daysElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cssText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;position: absolute; color: black; top: 30px; left: 50%;  transform: translateX(-50%); background-color: pink; z-index: 99999; padding: 1rem; border-radius: 10px; box-shadow: 3px 3px 6px #00000060&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//  Date.parse converts Date string to milliseconds&lt;/span&gt;
        &lt;span class="c1"&gt;// To get the number of days left we get the difference in milliseconds and divide by 86400000 (milliseconds in a day)&lt;/span&gt;
        &lt;span class="nx"&gt;noOfDaysLeft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;86400000&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;noOfDaysLeft&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Deadline has already passed.Please set a new one. :D&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


            &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;daysElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;noOfDaysLeft&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; days until go time! B)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// Append the text node to the div&lt;/span&gt;
        &lt;span class="nx"&gt;daysElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// Append the div to the body tag&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;daysElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;daysElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;resetDate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newDate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;daysElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;daysElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cssText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;position: absolute; color: black; top: 30px; left: 50%; transform: translateX(-50%); background-color: pink; z-index: 99999; padding: 1rem; border-radius: 10px; box-shadow: 3px 3px 6px #00000060&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Get the date string input through window.prompt&lt;/span&gt;
    &lt;span class="nx"&gt;newDate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter date in the dd/mm/yyyy format&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;dateArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newDate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;dateString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dateArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;dateArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;dateArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="nx"&gt;newDate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dateString&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// Check if the format is right &lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newDate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;noOfDaysLeft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newDate&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;86400000&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;noOfDaysLeft&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Are you time travelling to the past? I am not ready for you yet :D&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;New date saved! &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;noOfDaysLeft&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; days until go time! B)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="c1"&gt;// save the new date&lt;/span&gt;
            &lt;span class="nx"&gt;chrome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;date&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newDate&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter a valid date - date/month/full-year&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;daysElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;daysElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;daysElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function logic is explained in the comments. Now we cannot directly attach the listeners to the buttons. We make use of the &lt;em&gt;chrome.scripting&lt;/em&gt; API to inject the listeners into the current page as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Initialize buttons&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;showDays&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;showDays&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;changeDate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;changeDate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="c1"&gt;// When the button is clicked, inject showDaysLeft and resetDate into current page&lt;/span&gt;

&lt;span class="nx"&gt;showDays&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;tab&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;chrome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tabs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;active&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;currentWindow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;chrome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scripting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;executeScript&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;

        &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;tabId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;tab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;

        &lt;span class="na"&gt;function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;showDaysLeft&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;changeDate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;tab&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;chrome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tabs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;active&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;currentWindow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;chrome&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scripting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;executeScript&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;

        &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;tabId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;tab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;

        &lt;span class="na"&gt;function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;resetDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: Apart from the injected listeners other functions/variables cannot be directly run. &lt;/p&gt;

&lt;p&gt;And we are done!😎 Now the extension is ready to be tested. Go back to the browser, refresh the extension and test the extension on a fresh tab. The output should be similar to the gif below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m0Tyy9pQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8sef14kjohtkycvowxck.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m0Tyy9pQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8sef14kjohtkycvowxck.gif" alt="Gif image showing the working of the extension"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope this was helpful. The complete project is available on &lt;a href="https://github.com/akshaya-venkatesh8/timer-chrome-ext"&gt;Github&lt;/a&gt; Please reach me on &lt;a href="//twitter.com/venkyakshaya"&gt;Twitter&lt;/a&gt; in case of questions or let me know in the comments below.✌️&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Introduction to Next.JS</title>
      <author>Ponikar</author>
      <pubDate>Sun, 27 Jun 2021 16:14:59 +0000</pubDate>
      <link>https://dev.to/ponikar/introduction-to-next-js-26c0</link>
      <guid>https://dev.to/ponikar/introduction-to-next-js-26c0</guid>
      <description>&lt;p&gt;Hello there, I hope you are doing well. So today we are going to talk about the Next.JS! &lt;strong&gt;Why Developers suddenly started to use Next.JS to make web apps and not Create React App?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Don't worry today we are going to tackle all your doubts about Next.JS!&lt;/p&gt;

&lt;p&gt;For those who are thinking, "Ahh! Again new framework new Syntax!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/GjR6RPcURgiL6/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/GjR6RPcURgiL6/giphy.gif" alt="Next JS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Let me clear Next.JS use React Library under the hood!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#so-why-nextjs-over-cra-create-react-app"&gt;
  &lt;/a&gt;
  So Why Next.JS over CRA (Create React App)
&lt;/h2&gt;

&lt;p&gt;Before we get started with Next.JS! Let's understand what kinda &lt;strong&gt;issues developers are facing while working with Create React App!&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reason-1-seo-first-web-app"&gt;
  &lt;/a&gt;
  Reason 1 SEO First Web App
&lt;/h3&gt;

&lt;p&gt;We all know that SEO (Search Engine Optimization) is one of the core feature of the website and &lt;strong&gt;If you are not aware the fact that the CRA apps is not suitable for SEO friendly website.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h3&gt;

&lt;p&gt;We all know that &lt;strong&gt;React is a JavaScript library which means that every single thing happens at Client Side. So unless user is going not going to open the website, there will be only the empty HTML page with div tag like this.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div id="app"&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Google Search Engine &lt;strong&gt;Bots will dig into your website.&lt;/strong&gt; &lt;strong&gt;They will get nothing but the empty index.html page!&lt;/strong&gt; Although they are claiming &lt;strong&gt;they can run JS on while digging the page but this is not 100% true.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reason-2-bundling-the-app"&gt;
  &lt;/a&gt;
  Reason 2 Bundling The App
&lt;/h3&gt;

&lt;p&gt;Imagine you are working with &lt;strong&gt;massive large scale application.&lt;/strong&gt; hundreds of line of JavaScript code into a single file to will causes performance, to avoid this &lt;strong&gt;you need manually splitting your bundling into different files.&lt;/strong&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reason-3-performance-issue"&gt;
  &lt;/a&gt;
  Reason 3 Performance issue
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;If some users are trying to open your website in low-end devices, there might be cases that the website will take time to load in that devices.&lt;/strong&gt; Because Traditional react app &lt;strong&gt;loads everything at Client-Side and not server side.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nextjs-production-ready-framework"&gt;
  &lt;/a&gt;
  Next.JS Production Ready Framework
&lt;/h2&gt;

&lt;p&gt;Next.JS is a Production Ready framework. Which support Server Side Rendering (SSR) along with Hybrid Rendering.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#page-routing"&gt;
  &lt;/a&gt;
  Page Routing
&lt;/h3&gt;

&lt;p&gt;Next.JS has &lt;strong&gt;inbuilt routing system which allows us to create page without integrating any library&lt;/strong&gt; like &lt;code&gt;react-router-dom.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can also create nested routing! Which is tie breaker.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is not enough, &lt;strong&gt;Next.JS bundle your project pages wise. So if you are having different pages. Next.JS automatically does code splitting for us.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can read more about routing in &lt;a href="https://nextjs.org/docs/routing/introduction"&gt;Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For those people who aren't aware of this term, &lt;strong&gt;Server Side Rendering means you can run your JavaScript files at server side and delivered your HTML content directly to the browser like the Server side languages like PHP!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now you probably going to wonder,&lt;strong&gt;will my React app work as same as it used to?&lt;/strong&gt; Yeah This process call &lt;strong&gt;Hydration.&lt;/strong&gt; &lt;strong&gt;This will make sure that your JavaScript files are loaded successfully in the browser along with the HTML contents. So you can make SEO friendly website easily.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So this was about SSR, but &lt;strong&gt;Next.js allows you to pick how we want to fetch data.&lt;/strong&gt; If you have used Gastby before, You know that you can make Static Website with React. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Next.JS provide Hybrid Rendering! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#data-fetching-in-nextjs"&gt;
  &lt;/a&gt;
  Data Fetching in Next.JS
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;We can fetch data in 3 ways in Next.JS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Instead of going in the theory, &lt;strong&gt;I will show directly How to fetch data in Next.JS.&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#server-side-rendering-ssr"&gt;
  &lt;/a&gt;
  Server Side Rendering (SSR)
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const getServerSideProps = async context =&amp;gt; {
  const cakes = await myFavoriteCakesAPI();

  return {
       props: { cakes }
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;You can export &lt;code&gt;getServerSideProps&lt;/code&gt; method in each page. This method runs on Every request and users will always get fresh data. Below we are returning props cakes. This will pass props as a default Component of Page.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As I said earlier &lt;strong&gt;this method runs on every single request, **So this can be a little **anti performance method.&lt;/strong&gt; But there is situation in which &lt;strong&gt;the data gets updated often like Score Board, Stock Market etc.&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#static-site-generation-ssg"&gt;
  &lt;/a&gt;
  Static Site Generation (SSG)
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const getStaticProps = async context =&amp;gt; {
  const journals = await myLastYearJournals();

  return {
       props: { journals }
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;This method runs only at build time! But in development environment this method will run on every single request.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Since This method runs only build time in Production environment.&lt;/strong&gt; Your web application can &lt;strong&gt;speedily deliver content to the users. You can also deliver the website over CDN and that's the cool thing about Next.JS!&lt;/strong&gt; Everything will be fast! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Since the method runs at only build time, even though the data gets updated, users will have the old cached data.&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#incremental-static-site-generation-issg"&gt;
  &lt;/a&gt;
  Incremental Static Site Generation (ISSG)
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const getStaticProps = async context =&amp;gt; {
  const journals = await myLastYearJournals();

  return {
       props: { journals, revalidate: 60 }
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;This method is my favourite method. this method is same as the above method &lt;code&gt;getStaticProps&lt;/code&gt;. The only difference is that we are now pass new property &lt;code&gt;revalidate&lt;/code&gt;. Which means you request will re-validate after the given amount of second, in this case it is &lt;code&gt;60&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is one the suitable way to fetch data. This will make sure that you website will deliver fast and users will also get updated data.&lt;/p&gt;

&lt;p&gt;If you have understand this &lt;strong&gt;data fetching methodology.&lt;/strong&gt; You are now ready to &lt;strong&gt;make SEO friendly and fast website.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But I have bonus for you! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/oF5oUYTOhvFnO/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/oF5oUYTOhvFnO/giphy.gif" alt="JavaScript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#image-optimization-with-nextjs"&gt;
  &lt;/a&gt;
  Image Optimization with Next.js
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;You can also optimize images in Next.JS!&lt;/strong&gt; We all know that &lt;strong&gt;Image loading can take a while.&lt;/strong&gt; Especially if you are loading high quality images. Which can take long time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next.Js provides Image components which allow us to lazy load images. Optimize images quality according to the Layout. So this way we can also optimize the performance of the website.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#feature"&gt;
  &lt;/a&gt;
  Feature
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Changes Quality of Images&lt;/li&gt;
&lt;li&gt;Placeholder blur image while loading the actual Image&lt;/li&gt;
&lt;li&gt;Prioritize Image Loading and many more.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#integration-of-third-party-script"&gt;
  &lt;/a&gt;
  Integration of Third Party Script
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Script from 'next/script'
&amp;lt;Script
  id="stripe-js"
  src="https://js.stripe.com/v3/"
  strategy="lazyOnload"
  onLoad={() =&amp;gt; {
    this.setState({ stripe: window.Stripe('pk_test_12345') })
  }}
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;In recent of Next.js 11. Now we can add on third party script easily with Script Component.&lt;/strong&gt; Also It let you to decide &lt;strong&gt;when you want to load the website like Before Interactive after Interactive, and lazy loading.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So that was introduction of Next.js! Let me know in the comment &lt;strong&gt;which part of the blog you like most? and also are you planing to use next.js in your next project or not?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to add up something. Feel free to comment!&lt;/p&gt;

&lt;p&gt;Wanna get started with Next.js? Check out the &lt;a href="https://nextjs.org/docs/getting-started"&gt;Documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;br&gt;
Happy Coding! :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/fWgQH01z4rjwrZckyM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/fWgQH01z4rjwrZckyM/giphy.gif" alt="NextJS"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Learn React with this free GitHub book I wrote</title>
      <author>Chris Noring</author>
      <pubDate>Sun, 27 Jun 2021 16:06:34 +0000</pubDate>
      <link>https://dev.to/azure/learn-react-with-this-free-github-book-i-wrote-792</link>
      <guid>https://dev.to/azure/learn-react-with-this-free-github-book-i-wrote-792</guid>
      <description>&lt;p&gt;Hi all. I moved my free React book to GitHub&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/softchris/react-book"&gt;https://github.com/softchris/react-book&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;can also be read here&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://softchris.github.io/react-book/"&gt;https://softchris.github.io/react-book/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I hope you benefit from it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/chris_noring"&gt;Chris, Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It contains a lot of things like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Forms&lt;/li&gt;
&lt;li&gt;Routing&lt;/li&gt;
&lt;li&gt;Lazy loading&lt;/li&gt;
&lt;li&gt;Testing with Jest&lt;/li&gt;
&lt;li&gt;Testing Library (E2E)&lt;/li&gt;
&lt;li&gt;Hooks&lt;/li&gt;
&lt;li&gt;Render props&lt;/li&gt;
&lt;li&gt;Context API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also check ouut these resources from Microsft LEARN&lt;br&gt;
&lt;a href="https://docs.microsoft.com/en-us/learn/paths/react/"&gt;https://docs.microsoft.com/en-us/learn/paths/react/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>showdev</category>
    </item>
    <item>
      <title>5 awesome GitHub repositories for beginners   🧵👇🏻</title>
      <author>Manitej ⚡</author>
      <pubDate>Sun, 27 Jun 2021 15:29:01 +0000</pubDate>
      <link>https://dev.to/manitej/5-awesome-github-repositories-for-beginners-1h0c</link>
      <guid>https://dev.to/manitej/5-awesome-github-repositories-for-beginners-1h0c</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;this article is generated using (give a ⭐) &lt;br&gt;
 &lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Manitej66"&gt;
        Manitej66
      &lt;/a&gt; / &lt;a href="https://github.com/Manitej66/twlog"&gt;
        twlog
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This is a web app that converts Twitter threads into blogs in a single click 🔥
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
twlog&lt;/h1&gt;
&lt;p&gt;This is a webapp which convert twitter threads into dev.to blogs in a single click&lt;/p&gt;
&lt;h2&gt;
Acknowledgements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/FeedHive/twitter-api-client"&gt;twitter api client&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Manitej66/twlog"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
 &lt;br&gt;
 &lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zIS4tOrV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1400519947546025988/3X8t5iQ__normal.jpg" alt="Pratham profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Pratham
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/prathkum"&gt;@prathkum&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I again brought 5 awesome GitHub repositories for beginners &lt;br&gt;&lt;br&gt;🧵👇🏻
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      06:23 AM - 23 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1407585116403257345" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1407585116403257345" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1407585116403257345" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaHtTZgu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E4i_MrKWYAIT7ln.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zIS4tOrV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1400519947546025988/3X8t5iQ__normal.jpg" alt="Pratham profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Pratham
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/prathkum"&gt;@prathkum&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      1. Project-based learning&lt;br&gt;&lt;br&gt;A curated list of project-based tutorials covering JavaScript, Python and many other popular languages&lt;br&gt;&lt;br&gt;🔗 &lt;a href="https://t.co/kIojOPBbIY"&gt;github.com/tuvtran/projec…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      06:23 AM - 23 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1407585117262991362" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1407585117262991362" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1407585117262991362" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Csk9Buxh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E4i_MrDWEAAehqQ.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zIS4tOrV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1400519947546025988/3X8t5iQ__normal.jpg" alt="Pratham profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Pratham
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/prathkum"&gt;@prathkum&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      2. Awesome Linux software&lt;br&gt;&lt;br&gt;A list of awesome applications, software, tools, and other materials for Linux distros&lt;br&gt;&lt;br&gt;🔗 &lt;a href="https://t.co/7XR2azC5jq"&gt;github.com/luong-komorebi…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      06:23 AM - 23 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1407585118445780993" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1407585118445780993" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1407585118445780993" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eyX4Aapz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E4i_MrKXMAA1h3X.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zIS4tOrV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1400519947546025988/3X8t5iQ__normal.jpg" alt="Pratham profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Pratham
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/prathkum"&gt;@prathkum&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      3. 30 Seconds of React&lt;br&gt;&lt;br&gt;Short React code snippets for all your development needs&lt;br&gt;&lt;br&gt;🔗 &lt;a href="https://t.co/PeEBGhLhK7"&gt;github.com/30-seconds/30-…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      06:23 AM - 23 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1407585119708254208" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1407585119708254208" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1407585119708254208" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3OkrqsQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E4i_MrCX0AA3Cmg.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zIS4tOrV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1400519947546025988/3X8t5iQ__normal.jpg" alt="Pratham profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Pratham
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/prathkum"&gt;@prathkum&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      4. 50 Projects&lt;br&gt;&lt;br&gt;50+ mini web projects using HTML, CSS &amp;amp; JS&lt;br&gt;&lt;br&gt;🔗 &lt;a href="https://t.co/88gfyXzMbG"&gt;github.com/bradtraversy/5…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      06:23 AM - 23 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1407585120836587521" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1407585120836587521" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1407585120836587521" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---SQVC76T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E4i_Mq-XMAEGsTA.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zIS4tOrV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1400519947546025988/3X8t5iQ__normal.jpg" alt="Pratham profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Pratham
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/prathkum"&gt;@prathkum&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      5. Awesome VS code&lt;br&gt;&lt;br&gt;A curated list of delightful VS Code packages and resources&lt;br&gt;&lt;br&gt;🔗 &lt;a href="https://t.co/1CsZ40QKfe"&gt;github.com/viatsko/awesom…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      06:23 AM - 23 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1407585122015137795" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1407585122015137795" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1407585122015137795" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;br&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Async Redis key mutation notifications in Rails</title>
      <author>leastbad</author>
      <pubDate>Sun, 27 Jun 2021 14:55:42 +0000</pubDate>
      <link>https://dev.to/leastbad/async-redis-key-mutation-notifications-in-rails-4hng</link>
      <guid>https://dev.to/leastbad/async-redis-key-mutation-notifications-in-rails-4hng</guid>
      <description>&lt;p&gt;I am a huge fan of &lt;a href="https://github.com/rails/kredis"&gt;Kredis&lt;/a&gt;. It allows Rails developers to see Redis as far more than just a fragment cache and "where jobs are".&lt;/p&gt;

&lt;p&gt;Working with Kredis made me want to be able to run &lt;a href="https://cableready.stimulusreflex.com/reference/operations"&gt;arbitrary operations&lt;/a&gt; in my Rails app when specific keys are modified via specific Redis commands. &lt;a href="https://redis.io/topics/pubsub"&gt;Redis has an excellent pub/sub infrastructure&lt;/a&gt;, and all &lt;a href="https://redis.io/topics/notifications"&gt;Redis commands publish messages&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-would-someone-want-this"&gt;
  &lt;/a&gt;
  Why would someone want this?
&lt;/h1&gt;

&lt;p&gt;While it's true that changes to data that occur within a typical Rails app are already well covered by model callbacks, state machines and other standard tooling, an entire world of real-time stream processing, ETL and multi-application use cases open up when you can run &lt;code&gt;redis-cli set leastbad rules&lt;/code&gt; on your terminal and pick it up in your app.&lt;/p&gt;

&lt;p&gt;Problem #1: Listening for messages blocks execution.&lt;br&gt;
Solution #1: Spin up a thread!&lt;/p&gt;

&lt;p&gt;Problem #2: Every dyno/server is going to receive the same messages, causing mayhem as developers respond to those messages with database updates. Side-effect chaos!&lt;br&gt;
Solution #2: A standalone process that can be registered as a &lt;code&gt;worker&lt;/code&gt; in &lt;code&gt;Procfile&lt;/code&gt;... &lt;em&gt;sort of like Sidekiq.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At first, I was just planning on borrowing 95% of Mike Perham's battle-hardened code. Then I realized that the Venn diagram of "people who want a Redis changeset firehose" and "Sidekiq users" is close to 100%... &lt;strong&gt;so I just bolted what I needed onto Sidekiq&lt;/strong&gt;.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#try-it-out"&gt;
  &lt;/a&gt;
  Try it out!
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;What follows is the MVP of my new gem. In fact, it's not a gem, yet: it's an initializer! It has no tests and is hours old. My janky code would make poor Mike &lt;a href="https://youtu.be/W7JyjZI3LUM?t=333"&gt;bleed out&lt;/a&gt;. The goal is to see if folks actually need/want this to exist. &lt;strong&gt;I'm looking for feedback on what the ideal Rails-side API would actually look like&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Your Rails app needs to be up and running with Sidekiq. Just stick this in &lt;code&gt;config/initializers/sidekiq.rb&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Sidekiq&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Subscriber&lt;/span&gt;
    &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Sidekiq&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Util&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;
      &lt;span class="vi"&gt;@done&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
      &lt;span class="vi"&gt;@thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start&lt;/span&gt;
      &lt;span class="vi"&gt;@thread&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="n"&gt;safe_thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"subscriber"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;until&lt;/span&gt; &lt;span class="vi"&gt;@done&lt;/span&gt;
          &lt;span class="no"&gt;Sidekiq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;redis&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
            &lt;span class="c1"&gt;# https://redis.io/topics/notifications#configuration&lt;/span&gt;
            &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"notify-keyspace-events"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"E$lshz"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;# https://redis.io/topics/notifications#events-generated-by-different-commands&lt;/span&gt;
            &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;psubscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"__key*__:*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
              &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;psubscribe&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
                &lt;span class="vi"&gt;@firehose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Firehose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
              &lt;span class="k"&gt;end&lt;/span&gt;
              &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pmessage&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
                &lt;span class="vi"&gt;@firehose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;":"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;last&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sym&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="k"&gt;end&lt;/span&gt;
              &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;punsubscribe&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
                &lt;span class="vi"&gt;@firehose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
              &lt;span class="k"&gt;end&lt;/span&gt;
            &lt;span class="k"&gt;end&lt;/span&gt;
          &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="no"&gt;Sidekiq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Subscriber exiting..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;terminate&lt;/span&gt;
      &lt;span class="vi"&gt;@done&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@thread&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@thread&lt;/span&gt;
        &lt;span class="no"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;kill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@thread&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="vi"&gt;@thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;CoreExtensions&lt;/span&gt;
  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Sidekiq&lt;/span&gt;
    &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Launcher&lt;/span&gt;
      &lt;span class="nb"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:subscriber&lt;/span&gt;

      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="vi"&gt;@subscriber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Sidekiq&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;
        &lt;span class="n"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;quiet&lt;/span&gt;
        &lt;span class="n"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;terminate&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stop&lt;/span&gt;
        &lt;span class="n"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;terminate&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Sidekiq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure_server&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"sidekiq/launcher"&lt;/span&gt;
  &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Sidekiq&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Launcher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;CoreExtensions&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Sidekiq&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Launcher&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm using &lt;a href="https://cableready.stimulusreflex.com"&gt;CableReady&lt;/a&gt; to send console log notifications to the Console Inspector whenever a key is updated with the Redis &lt;code&gt;SET&lt;/code&gt; command. I have a simple &lt;code&gt;AllUsers&lt;/code&gt; ActionCable Channel in play for testing. This lives in &lt;code&gt;app/lib/firehose.rb&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Firehose&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;CableReady&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Broadcaster&lt;/span&gt;

  &lt;span class="nb"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:redis&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;
    &lt;span class="vi"&gt;@redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="c1"&gt;# https://github.com/rails/kredis#examples&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="ss"&gt;:set&lt;/span&gt;    &lt;span class="c1"&gt;# string, integer, json&lt;/span&gt;
      &lt;span class="n"&gt;cable_ready&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"all_users"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;console_log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;message: &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; was just updated to &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;broadcast&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="ss"&gt;:rpush&lt;/span&gt;  &lt;span class="c1"&gt;# list&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="ss"&gt;:lrem&lt;/span&gt;   &lt;span class="c1"&gt;# unique_list&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="ss"&gt;:sadd&lt;/span&gt;   &lt;span class="c1"&gt;# set&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="ss"&gt;:incr&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="ss"&gt;:decr&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="ss"&gt;:incrby&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="ss"&gt;:decrby&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="ss"&gt;:exists&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="ss"&gt;:del&lt;/span&gt;
      &lt;span class="n"&gt;cable_ready&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"all_users"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;console_log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;message: &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; was deleted"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;broadcast&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As Seinfeld would say, &lt;strong&gt;is this anything?&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>rails</category>
      <category>redis</category>
    </item>
    <item>
      <title>You are coding the wrong way in Python if you aren't using these two libraries</title>
      <author>Rohith Gilla</author>
      <pubDate>Sun, 27 Jun 2021 14:48:49 +0000</pubDate>
      <link>https://dev.to/gillarohith/you-are-coding-the-wrong-way-in-python-if-you-aren-t-using-these-two-libraries-42bi</link>
      <guid>https://dev.to/gillarohith/you-are-coding-the-wrong-way-in-python-if-you-aren-t-using-these-two-libraries-42bi</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/4OBq5v6J4pgJuZ2Cnj/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/4OBq5v6J4pgJuZ2Cnj/giphy.gif" alt="https://media.giphy.com/media/4OBq5v6J4pgJuZ2Cnj/giphy.gif"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Hello amazing developers&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Table of Contents&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Motivation&lt;/li&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Typing

&lt;ul&gt;
&lt;li&gt;Variables&lt;/li&gt;
&lt;li&gt;Lists&lt;/li&gt;
&lt;li&gt;Dictionary&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Classes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;li&gt;Resources&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;What makes people love (sometimes hate 😛) TypeScript more than JavaScript?&lt;/p&gt;

&lt;p&gt;It's the typing, the type safety. They know that there will be a safety net beneath them that catches many bugs and shouts at us if we do mistakes. &lt;/p&gt;

&lt;p&gt;It's not just that it's the auto-suggestion that matters too, it would feel amazing right when you get the best auto completes and the methods for the variable.&lt;/p&gt;

&lt;p&gt;Now what if I say we can you could kinda get it in python. It feels great right.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/aWPGuTlDqq2yc/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/aWPGuTlDqq2yc/giphy.gif" alt="https://media.giphy.com/media/aWPGuTlDqq2yc/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now since we know python is an interpreted language and it doesn't have complier for itself so we can't entirely replicate typescript but at least try to use types wherever possible.&lt;/p&gt;

&lt;p&gt;TL;DR on how typescript works, it takes the entire entire script code complies it into a JavaScript file, the complier does all the type checking.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python is a dynamically typed language&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;From python 3.5 we have this amazing library which is build inside python, it's the  &lt;code&gt;typing&lt;/code&gt; library. We can't cover entire library but applying Pareto principle (80-20 rule) I will try to cover a few important parts of the library.&lt;/p&gt;

&lt;p&gt;We use it along with a power type checking library &lt;code&gt;mypy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We will be sliding over the following topics in brief&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic Variables&lt;/li&gt;
&lt;li&gt;Lists&lt;/li&gt;
&lt;li&gt;Dictionary&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Classes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/cAhGmJPBqsXAlDTYHi/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/cAhGmJPBqsXAlDTYHi/giphy.gif" alt="https://media.giphy.com/media/cAhGmJPBqsXAlDTYHi/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's start &lt;/p&gt;

&lt;p&gt;IDE Setup&lt;/p&gt;

&lt;p&gt;Please install the following extensions for VSCode&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=matangover.mypy"&gt;MyPy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=usernamehw.errorlens"&gt;Error Lens&lt;/a&gt; (Optional)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#typing"&gt;
  &lt;/a&gt;
  Typing
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Integer&lt;/li&gt;
&lt;li&gt;Float&lt;/li&gt;
&lt;li&gt;String
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;int_typed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

&lt;span class="n"&gt;float_typed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.2&lt;/span&gt;

&lt;span class="n"&gt;string_typed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hello"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let us see what happens if we try to assign them a different value.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzxNqMF_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4rjz7dvmg9s3vtx23c6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzxNqMF_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4rjz7dvmg9s3vtx23c6.png" alt="Int Error"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lists"&gt;
  &lt;/a&gt;
  Lists
&lt;/h3&gt;

&lt;p&gt;To know more about Lists you have to know about &lt;code&gt;Sequence&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Sequence&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In Python, sequence is the generic term for an ordered set. There are several types of sequences in Python, the following three are the most important.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lists&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lists are the most versatile sequence type. The elements of a list can be any object, and lists are mutable - they can be changed. Elements can be reassigned or removed, and new elements can be inserted.&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;
&lt;span class="n"&gt;int_typed_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oyfo765e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kuzvqcmwhbl6c34sg1og.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oyfo765e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kuzvqcmwhbl6c34sg1og.png" alt="List"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Shouts for type errors&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But but but but in &lt;code&gt;TypeScript&lt;/code&gt; we have &lt;code&gt;any&lt;/code&gt; keyword if we want dynamic array&lt;/p&gt;

&lt;p&gt;Yes the golden &lt;code&gt;Any&lt;/code&gt; even exists here too&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;

&lt;span class="n"&gt;int_typed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

&lt;span class="n"&gt;float_typed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.2&lt;/span&gt;

&lt;span class="n"&gt;string_typed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hello"&lt;/span&gt;

&lt;span class="n"&gt;int_typed_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="n"&gt;int_typed_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;int_typed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;any_typed_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;any_typed_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;int_typed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;any_typed_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string_typed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;any_typed_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float_typed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;any_typed_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;int_typed_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PmHcLNFV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sz4sqqgzhn68en4oq472.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PmHcLNFV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sz4sqqgzhn68en4oq472.png" alt="Power of any"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;No shouting 🤫&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#dictionary"&gt;
  &lt;/a&gt;
  Dictionary
&lt;/h3&gt;

&lt;p&gt;For this section &lt;em&gt;Picture speaks louder than words&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'followers'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1110&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'abc'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B-p0kkWL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzf36nnr10i3ohw0p8zq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B-p0kkWL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzf36nnr10i3ohw0p8zq.png" alt="Overall"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;It reads the keys if we define in code and help us in auto complete&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GskJ_ikg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/18l3x81x3k50nm2b8syd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GskJ_ikg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/18l3x81x3k50nm2b8syd.png" alt="Keys"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Now we know that &lt;code&gt;keys()&lt;/code&gt; returns a list of &lt;code&gt;str&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WR5Bz7pz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcs2gw6m3atd8yu0csaq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WR5Bz7pz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcs2gw6m3atd8yu0csaq.png" alt="Values"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Now we know that &lt;code&gt;values()&lt;/code&gt; returns a list of &lt;code&gt;int&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h3&gt;

&lt;p&gt;My all time favourite definition of function is depicted in the picture below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ccSILnIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5hr8nplxionk7ojmu8t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ccSILnIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5hr8nplxionk7ojmu8t.png" alt="Function"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_avg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="n"&gt;get_avg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rjcNZQ7E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4hhzz1zcdgsv4lj1r1xa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rjcNZQ7E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4hhzz1zcdgsv4lj1r1xa.png" alt="Function shouts"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Function shouts&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#classes"&gt;
  &lt;/a&gt;
  Classes
&lt;/h3&gt;

&lt;p&gt;We may need a solution when we require custom classes to hold and use our data. Then we could similar to this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Vector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_magnitude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xcNYVAsI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v68cydwksox7ya2t8dja.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xcNYVAsI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v68cydwksox7ya2t8dja.png" alt="Vector Class"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You get the beautiful autocomplete again with details 💫&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PykP3MmZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djulqav3533qk13c5021.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PykP3MmZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djulqav3533qk13c5021.png" alt="With great power comes great responsibility"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As said in the picture, with great power comes great responsibility.&lt;br&gt;
Python dynamic types gives us very easy to get started with learning python but at the same time increases the chances to create bugs unintentionally.&lt;/p&gt;

&lt;p&gt;The typing gets even better in Python 3.9 and I hope it gets better and better as we progress.&lt;/p&gt;

&lt;p&gt;Small changes can great a huge impact in the code, so please start using types, MyPy and feel safe.&lt;/p&gt;

&lt;p&gt;I kept it brief but please do let me know if diving deeper helps, feedback is really appreciated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mypy.readthedocs.io/en/stable/index.html"&gt;MyPY&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.python.org/3/library/typing.html"&gt;Typing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;P.S My &lt;a href="https://twitter.com/gillarohith"&gt;Twitter&lt;/a&gt; DMs are always open if you want to discuss collaboration opportunities or request on writing for a topic &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nT16isXH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/40317e3f3b28d57c89edceb1d75832c2/tenor.gif%3Fitemid%3D16119732" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nT16isXH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/40317e3f3b28d57c89edceb1d75832c2/tenor.gif%3Fitemid%3D16119732" alt="https://media1.tenor.com/images/40317e3f3b28d57c89edceb1d75832c2/tenor.gif?itemid=16119732"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks&lt;br&gt;
Rohith Gilla&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>todayilearned</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Is there a right way to learn to code?</title>
      <author>Saji Wang</author>
      <pubDate>Sun, 27 Jun 2021 14:48:16 +0000</pubDate>
      <link>https://dev.to/codesphere/is-there-a-right-way-to-learn-to-code-3fn4</link>
      <guid>https://dev.to/codesphere/is-there-a-right-way-to-learn-to-code-3fn4</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;A huge reason that we are so passionate about the developer community is there isn't a singular path that developers have taken to get where they are now. One might expect that a career as technical as software engineering requires the right CS degree and the right technical experience, but this couldn't be further from the truth.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;According to &lt;a href="https://insights.stackoverflow.com/survey/2020"&gt;Stack Overflow's 2020 Developer Survey&lt;/a&gt;, only about 60% of college-educated developers actually got their degree in Computer Science. However, over 80% of developers still think that some kind of formal education is at least somewhat important in your success as a software engineer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vb9zTMFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e6n46e86uptg6w31zbab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vb9zTMFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e6n46e86uptg6w31zbab.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the same time, the internet is filled to the brim with informal development education, including youtube tutorials, forums, and personal portfolios.&lt;br&gt;
It is therefore worth taking a deeper look at the different ways developers learn, as well as the benefits and drawbacks of each.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#academia"&gt;
  &lt;/a&gt;
  Academia
&lt;/h3&gt;

&lt;p&gt;As stated before, despite all the different resources, the majority of professional developers still hold some kind of computer science degree. The Stack Overflow survey does in fact put to numbers what most developers know to be true: That academic classes can only teach you so much. Only about 10% of developers said that formal education was critical to their job.&lt;/p&gt;

&lt;p&gt;Among many developers, formal classes are generally regarded as a pretty strong way to learn theoretical CS concepts, but not necessarily the best method of learning to apply these concepts. For example, one can ideally expect a developer who comes from academia to have a very strong grasp of topics like algorithms, data structures, and time complexity. In addition, when it comes to constantly evolving subfields, like Artificial Intelligence and Cybersecurity, many CS students have the opportunity to conduct academic research.&lt;/p&gt;

&lt;p&gt;While academic experiences are obviously going to differ from institution to institution, there is generally a lack of real-world application of these concepts. A developer who exclusively learns through academia may therefore not be incredibly strong at building real software.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#online-courses-and-tutorials"&gt;
  &lt;/a&gt;
  Online Courses and Tutorials
&lt;/h3&gt;

&lt;p&gt;Those for whom academia is too costly or time prohibitive often turn to online tutorials and courses for the equivalent theoretical education. Sites like Youtube, Udemy, and Coursera offer thousands of different courses on the same sort of theoretical topics that one would study at a university. Though it may not have the same prestige to many hiring managers, these courses are almost always free or only cost the price of a nice dinner.&lt;/p&gt;

&lt;p&gt;In addition to these theoretical topics, online resources can teach programmers about new and specific languages, technologies, and frameworks that usually aren't covered in a college curriculum. Online courses and tutorials are therefore essential to keeping up to date with the latest trends in software engineering.&lt;/p&gt;

&lt;p&gt;As with Academia, there is a risk with online courses and tutorials of only being able to regurgitate what you learned, and not actually apply it to real projects. One should therefore not expect to be ready to code professionally with a technology after watching a two-hour course on it.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#bootcamps"&gt;
  &lt;/a&gt;
  Bootcamps
&lt;/h3&gt;

&lt;p&gt;A nice midpoint between the credibility of a degree and the accessibility of online resources is Coding Bootcamps. These programs are typically only a couple of months long and are a fraction of the price. In addition, they tend to focus more on teaching marketable tech stacks rather than theoretical concepts.&lt;/p&gt;

&lt;p&gt;Bootcamps are especially great for people looking to make a career switch without the full investment of an additional degree. The major drawback is that while it might help you land your first development job, by giving you a working proficiency in the most popular web framework or database technology, a Bootcamp alone won't necessarily help you keep that job.&lt;/p&gt;

&lt;p&gt;Being able to succeed in a development role often requires fundamentals that aren't hidden beneath the latest technology. For example, knowing how to use ReactJS without a strong foundation in HTML and CSS can only get you so far. While that certainly doesn't diminish the educational quality of a Bootcamp, you should just have realistic expectations of what you are going to get out of it.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#personal-projects"&gt;
  &lt;/a&gt;
  Personal Projects
&lt;/h3&gt;

&lt;p&gt;There are few professions where project-based learning is as accessible as it is for software engineering. One of the best ways to learn how to do something is to just do it. The issue is that if you want to be a doctor or a mechanical engineer, accountability and financial constraints are often going to prevent you from getting real-world experience. In contrast, all you need is a working computer and an internet connection to get real-world experience building software.&lt;/p&gt;

&lt;p&gt;Working on pet projects is an amazing way to work through the actual kinds of problems that you would encounter on a job. While its value may sometimes be harder to convey to a hiring manager than a GPA, that real-world experience is going to be instrumental to the value you can bring to a company. And hey, you never know, your next pet project might become the next billion-dollar company, like Github or Facebook.&lt;/p&gt;

&lt;p&gt;The one thing that people should be hesitant about when relying on personal projects is only programming in a way that gets the job done, and not necessarily in a way that gets the job done well. It's great that you made a cool Web App that works, but if all your code is inefficient, horribly documented, and riddled with security vulnerabilities, it might be worth learning some more fundamentals. This kind of coding style might be fine for your pet project, but it is probably going to make you a nightmare to work with.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#community-participation"&gt;
  &lt;/a&gt;
  Community Participation
&lt;/h3&gt;

&lt;p&gt;A huge way that programmers learn that often gets taken for granted is participation in developer communities. This can come in a number of forms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Asking and Answering questions on Stack Overflow&lt;/li&gt;
&lt;li&gt;Participating in Open Source projects&lt;/li&gt;
&lt;li&gt;Writing and Reading developer blogs on platforms like Medium and Dev.to&lt;/li&gt;
&lt;li&gt;Keeping up to date with the newest technologies and trends on Reddit, Twitter, and Hacker News&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even if you already landed your dream job, participating in the community is an important part of being a developer and an important part of sharpening your coding skills.&lt;/p&gt;

&lt;p&gt;As the Greek historian, Plutarch once said "Education is the kindling of a flame, not the filling of a vessel". Learning is a lifelong process, so staying active in the community through methods like these can make sure that you are always learning.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;So is there a singular right way to learn to code? Probably not, but there is certainly a wrong way. Relying on either exclusively theoretical education (Academia, Tutorials, Bootcamps) or exclusively application(Projects, Community Participation) is going to limit your success as a developer. A strong developer is someone who has both a good grasp of theoretical concepts and has the ability to apply these concepts to real-world software.&lt;/p&gt;

&lt;p&gt;Thanks for reading! What do you think? Is there a right way to learn to code? Is there a wrong way? How'd you learn?&lt;/p&gt;

&lt;p&gt;To learn about how Codesphere is revolutionizing cloud services, you can check out &lt;a href="https://link.codesphere.com/AN"&gt;Codesphere.com&lt;/a&gt;. :)&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
      <category>bootcamp</category>
      <category>learntocode</category>
      <category>discuss</category>
      <category>programming</category>
    </item>
    <item>
      <title>150+ users registered in 24 hours on website created for fun</title>
      <author>Naman vyas</author>
      <pubDate>Sun, 27 Jun 2021 14:43:41 +0000</pubDate>
      <link>https://dev.to/namanvyas/150-users-registered-in-24-hours-on-website-created-for-fun-f1a</link>
      <guid>https://dev.to/namanvyas/150-users-registered-in-24-hours-on-website-created-for-fun-f1a</guid>
      <description>&lt;p&gt;Hello everyone,&lt;/p&gt;

&lt;p&gt;for some days i was working on a simple social media website created using NextJS, TailwindCSS and firebase for learning and fun and yesterday created a Dev post about making that project(website) public to internet.&lt;br&gt;
Dev post Link : &lt;a href="https://dev.to/namanvyas/build-a-social-media-website-with-next-js-tailwindcss-and-firebase-in-8-days-2j65"&gt;Post&lt;/a&gt;&lt;br&gt;
Website Link : &lt;a href="https://noob.study"&gt;noob.study&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was not expecting much attention from that post so after writing i did go to sleep, after waking up i was checking my phone as normal and open that website to check how it is going and find out there was around 10-11 new posts which is amazing after that i rush to my Dev post and Firebase console and find out 69 peoples registered on website and 10 stars in my GitHub repo which was too amazing for me, got very good response.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lt6rKe0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dlszd83cdr9w0r3fc8mn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lt6rKe0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dlszd83cdr9w0r3fc8mn.gif" alt="wowww"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the end of day i got &lt;strong&gt;158 users&lt;/strong&gt; registered and also some bugs to fix&lt;/p&gt;

&lt;p&gt;now main challenge for me is to fix all bugs as fast as possible and optimize Firebase integration because i got around 22,000 read request which is not good for me if website grow like that maybe i will have to close that project because i can't afford to pay for this project right now.&lt;/p&gt;

&lt;p&gt;It is a great experience for me. Love Dev community.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/namanvyas" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9VZ0Zkbv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--6iUx5n2K--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/420414/11894cc1-249a-4c52-a119-9603e07eeca4.jpg" alt="namanvyas"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/namanvyas/build-a-social-media-website-with-next-js-tailwindcss-and-firebase-in-8-days-2j65" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Build a social media website with Next JS, TailwindCss and Firebase in 8 days&lt;/h2&gt;
      &lt;h3&gt;Naman vyas ・ Jun 26 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#nextjs&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tailwindcss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#firebase&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>nextjs</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>How I made a mini filter app with Vanilla JavaScript</title>
      <author>Raquel Santos | RS-coding</author>
      <pubDate>Sun, 27 Jun 2021 14:03:31 +0000</pubDate>
      <link>https://dev.to/raquelsartwork/how-i-made-a-mini-filter-app-with-vanilla-javascript-15kb</link>
      <guid>https://dev.to/raquelsartwork/how-i-made-a-mini-filter-app-with-vanilla-javascript-15kb</guid>
      <description>&lt;p&gt;I have been doing the JavaScript30 from Wes Bos and one of the challenges is to change CSS Variables using JS.&lt;br&gt;
I found the challenge so interesting that I decided to try myself and create a mini-filter image app by using the same concept that he used on the challenge.&lt;br&gt;
Also, I decided to go further and made functionality to display an uploaded image and then change it with the filters available.&lt;/p&gt;

&lt;p&gt;I will show you step by step what I did. You can check the &lt;a href="https://rs-coding.github.io/FilterImageApp/"&gt;Demo&lt;/a&gt; and full code here &lt;a href="https://github.com/RS-coding/FilterImageApp"&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First of all, I sketched what I wanted to look like in the end to help me trace a path.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3P23BQOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s5i53g3lm2s1jaakqrpy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3P23BQOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s5i53g3lm2s1jaakqrpy.jpg" alt="sketch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Having the sketch done I created an HTML file with elements I wanted. As you can see I write a div container with 3 divs inside:   &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;header-container&lt;/strong&gt; - for the title and uploading  icon,&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;img-container&lt;/strong&gt; - for the displayed image,
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;controls&lt;/strong&gt; - for the filters controls.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UHM_PQhW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/apbo72ypk0xgcleqb9b9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UHM_PQhW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/apbo72ypk0xgcleqb9b9.jpg" alt="HTML structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-display-uploaded-image-in-html-using-javascript"&gt;
  &lt;/a&gt;
  How To Display Uploaded Image In Html Using Javascript
&lt;/h2&gt;

&lt;p&gt;Let's focus first on how to display an uploaded image. So let's take a look at the two first containers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XmEhvkBY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g93odyksokv0nd32qy5j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XmEhvkBY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g93odyksokv0nd32qy5j.jpg" alt="HTML structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inside &lt;strong&gt;header-container&lt;/strong&gt; I created a div called &lt;strong&gt;upload-img&lt;/strong&gt; that contains label and input elements. &lt;br&gt;
 The input has some attributes :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;type='file'&lt;/strong&gt; because we want to add a file&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;accept=' image/*'&lt;/strong&gt; that takes as a value all the type of files permitted to upload  (* - global). If we wanted only permit jpg files we would have to write accept='image/jpg'.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;style='display: none;'&lt;/strong&gt; because I wanted to show only the icon on the label instead of the input.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the div &lt;strong&gt;img-container&lt;/strong&gt; I added an img HTML tag without a source attribute but an id named "output" that will retrieve the image source from javaScript.&lt;br&gt;
It's time to do JavaScript code to display the image in HTML element &lt;strong&gt;img&lt;/strong&gt; :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A7hYKjzA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n517ddgs99p18gao4qkn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A7hYKjzA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n517ddgs99p18gao4qkn.jpg" alt="JavaScript code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing I did was to get the element &lt;strong&gt;input&lt;/strong&gt; from the DOM and stored it in a variable named &lt;strong&gt;fileUpload&lt;/strong&gt;.&lt;br&gt;
Further, I added an event listener with event &lt;strong&gt;change&lt;/strong&gt; and a function called &lt;strong&gt;loadFile&lt;/strong&gt;.&lt;br&gt;
Inside the loadFile function, I  get the element &lt;strong&gt;img&lt;/strong&gt; from DOM and store it in a variable called  &lt;strong&gt;img&lt;/strong&gt; ( you could call it an image or something else. I decided to call the same name as the tag). &lt;br&gt;
After that, I created a source URL for that variable &lt;strong&gt;img&lt;/strong&gt; that by using &lt;strong&gt;URL.createObjectURL()&lt;/strong&gt;, a static method that creates a string containing URL representing the specific file inside the parameters that, in this case, is the selected file or files of the input:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;e.target&lt;/strong&gt; is the &lt;strong&gt;input type="file"&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;files[0]&lt;/strong&gt;  represents the file or the files that were selected&lt;/p&gt;

&lt;p&gt;This part is Done!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-change-css-variables-in-javascript"&gt;
  &lt;/a&gt;
  How to change CSS Variables in JavaScript
&lt;/h2&gt;

&lt;p&gt;Inside the third container &lt;strong&gt;controls&lt;/strong&gt; let's just focus on the construction of the &lt;strong&gt;input&lt;/strong&gt; element.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xLsfY4ec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bws0wp04fdgsmyd5oplb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xLsfY4ec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bws0wp04fdgsmyd5oplb.jpg" alt="HTML"&gt;&lt;/a&gt;&lt;br&gt;
As you can see in the image there are a couple of Attributes important that I added. let's talk about each one:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;id&lt;/strong&gt; - the id of the element (example id="sepia")&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;type ="range"&lt;/strong&gt; - it is the type of the input. in this case, I wanted a slider control&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;name&lt;/strong&gt; - it is the name of the specific filter which is the same as the id (example name="sepia")&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;min&lt;/strong&gt;, &lt;strong&gt;max&lt;/strong&gt; &lt;strong&gt;value&lt;/strong&gt; - min and max are the minima and maximum values the input range has and the value is the default value we want to point to at the beginning. To set the values for the min, max and value attributes for each filter control I researched here [filters characteristics]((&lt;a href="https://www.w3schools.com/cssref/css3_pr_filter.asp"&gt;https://www.w3schools.com/cssref/css3_pr_filter.asp&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;data-sizing="%"&lt;/strong&gt; - it is a custom attribute that has as value an % because all filters that I will use in CSS end with percentage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's take a look at CSS file :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pBMUFV6m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t6cwrkv1uc0bugifkr1f.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pBMUFV6m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t6cwrkv1uc0bugifkr1f.jpg" alt="CSS file"&gt;&lt;/a&gt;&lt;br&gt;
Here I created CSS variables in the : root pseudo-class and added those named variables in the img element.&lt;/p&gt;

&lt;p&gt;Now its time to code in JavaScript:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--467WWCyI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4lyruapcgvpgkiitkls.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--467WWCyI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4lyruapcgvpgkiitkls.jpg" alt="JavaScript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First of all, I stored in a variable all the inputs(plural). &lt;br&gt;
Then I wanted to make an event listener for each input(individual) with change and input event.&lt;br&gt;
So I did a forEach loop at the 'inputs' variable to get each input and add the event listener.&lt;/p&gt;

&lt;p&gt;Why did I want to use two events and not just the first one &lt;strong&gt;change&lt;/strong&gt;? &lt;br&gt;
Because the &lt;strong&gt;change&lt;/strong&gt; event only updates the result when the movement ended, and I wanted also to show changes in the image while I move the input range.&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;updateStyle&lt;/strong&gt; function first, I made a variable called suffix that stores the value '%' of data-sizing or if there are none stores an empty string ' '.&lt;br&gt;
After that, I set a new property value for the root element that takes the value of the input.&lt;/p&gt;

&lt;p&gt;That is it!&lt;/p&gt;

</description>
      <category>devjournal</category>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Abstract Syntax Tree (AST)</title>
      <author>Rahul Khinchi</author>
      <pubDate>Sun, 27 Jun 2021 14:03:10 +0000</pubDate>
      <link>https://dev.to/rk7/abstract-syntax-tree-ast-43p0</link>
      <guid>https://dev.to/rk7/abstract-syntax-tree-ast-43p0</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-ast"&gt;
  &lt;/a&gt;
  What is AST?
&lt;/h3&gt;

&lt;p&gt;It is a tree representation of the abstract syntactic structure of source code written in a programming language. Each node of the tree denotes a construct occurring in the source code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#application-in-compilers"&gt;
  &lt;/a&gt;
  Application in compilers
&lt;/h3&gt;

&lt;p&gt;Abstract syntax trees are data structures widely used in compilers to represent the structure of program code. An AST is usually the result of the syntax analysis phase of a compiler. It often serves as an intermediate representation of the program through several stages that the compiler requires, and has a strong impact on the final output of the compiler.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-example-this-is-a-source-code"&gt;
  &lt;/a&gt;
  For Example, This is a Source Code.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class GFG {
    public static void main (String[] args) {
        System.out.println("Hello World!");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ast-of-above-source-code"&gt;
  &lt;/a&gt;
  AST of above source code:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CLASS_DEF -&amp;gt; CLASS_DEF [1:0]
|--MODIFIERS -&amp;gt; MODIFIERS [1:0]
|   `--LITERAL_PUBLIC -&amp;gt; public [1:0]
|--LITERAL_CLASS -&amp;gt; class [1:7]
|--IDENT -&amp;gt; GFG [1:13]
`--OBJBLOCK -&amp;gt; OBJBLOCK [1:17]
    |--LCURLY -&amp;gt; { [1:17]
    |--METHOD_DEF -&amp;gt; METHOD_DEF [2:4]
    |   |--MODIFIERS -&amp;gt; MODIFIERS [2:4]
    |   |   |--LITERAL_PUBLIC -&amp;gt; public [2:4]
    |   |   `--LITERAL_STATIC -&amp;gt; static [2:11]
    |   |--TYPE -&amp;gt; TYPE [2:18]
    |   |   `--LITERAL_VOID -&amp;gt; void [2:18]
    |   |--IDENT -&amp;gt; main [2:23]
    |   |--LPAREN -&amp;gt; ( [2:27]
    |   |--PARAMETERS -&amp;gt; PARAMETERS [2:34]
    |   |   `--PARAMETER_DEF -&amp;gt; PARAMETER_DEF [2:34]
    |   |       |--MODIFIERS -&amp;gt; MODIFIERS [2:34]
    |   |       |--TYPE -&amp;gt; TYPE [2:34]
    |   |       |   `--ARRAY_DECLARATOR -&amp;gt; [ [2:34]
    |   |       |       |--IDENT -&amp;gt; String [2:28]
    |   |       |       `--RBRACK -&amp;gt; ] [2:35]
    |   |       `--IDENT -&amp;gt; args [2:37]
    |   |--RPAREN -&amp;gt; ) [2:41]
    |   `--SLIST -&amp;gt; { [2:43]
    |       |--EXPR -&amp;gt; EXPR [3:26]
    |       |   `--METHOD_CALL -&amp;gt; ( [3:26]
    |       |       |--DOT -&amp;gt; . [3:18]
    |       |       |   |--DOT -&amp;gt; . [3:14]
    |       |       |   |   |--IDENT -&amp;gt; System [3:8]
    |       |       |   |   `--IDENT -&amp;gt; out [3:15]
    |       |       |   `--IDENT -&amp;gt; println [3:19]
    |       |       |--ELIST -&amp;gt; ELIST [3:27]
    |       |       |   `--EXPR -&amp;gt; EXPR [3:27]
    |       |       |       `--STRING_LITERAL -&amp;gt; "Hello World!" [3:27]
    |       |       `--RPAREN -&amp;gt; ) [3:41]
    |       |--SEMI -&amp;gt; ; [3:42]
    |       `--RCURLY -&amp;gt; } [4:4]
    `--RCURLY -&amp;gt; } [5:0]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#how-to-make-an-ast"&gt;
  &lt;/a&gt;
  How to Make an AST:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Run the Source Code in your local Environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Download the Checkstyle Command line: checkstyle-8.43-all.jar from &lt;a href="https://checkstyle.org/cmdline.html"&gt;Here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Audit the Program with the help of Checkstyle in your Terminal: java -jar checkstyle-8.43-all.jar -c /google_checks.xml YourFile.java&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After Audit, Run this command in your terminal to get the AST of your preferred  Code: java -jar checkstyle-8.43-all.jar -t YourFile.java&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Your AST is Ready.&lt;/p&gt;


&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#to-learn-more-about-ast-and-checkstyle-click-here"&gt;
  &lt;/a&gt;
  To learn More about AST and Checkstyle: &lt;a href="https://checkstyle.org/cmdline.html"&gt;Click Here&lt;/a&gt;
&lt;/h2&gt;

</description>
      <category>opensource</category>
      <category>java</category>
      <category>contributorswanted</category>
      <category>testing</category>
    </item>
    <item>
      <title>Branching Out (With Git)</title>
      <author>Jenna Toff</author>
      <pubDate>Sun, 27 Jun 2021 14:02:36 +0000</pubDate>
      <link>https://dev.to/larkceresin/branching-out-with-git-m28</link>
      <guid>https://dev.to/larkceresin/branching-out-with-git-m28</guid>
      <description>&lt;p&gt;When thinking of a branch: the first thing to come to mind is the part of a tree that is growing out from another part of the same tree. As a tree grows, branches are sent out from the trunk or from other branches. They grow leaves and help with supplying nourishment to the tree to become a better tree. When a specific branch dies, it might fall off or be pruned so another branch can grow in its place.&lt;/p&gt;

&lt;p&gt;When it comes to git: branches work similarly. You have your trunk: but it's called Main (or Master if your repository was created before Oct 2020) that is the primary living portion of your code. You can create branches that copy the current Main code to allow you to build on it, make changes, and test things without effecting your live environment. Once you're done and successfully made changes, you can merge them into your Main. Branches can also be used to create other branches, and can be areas to merge other code into as well. After you're done with the branch, it can be deleted.&lt;/p&gt;

&lt;p&gt;To get started with branches: there's a few common commands to learn:&lt;br&gt;
&lt;code&gt;git branch&lt;/code&gt; Will list all branches, with an indicator on which one you're on. (Depending on your system this can be a symbol or different coloring)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git branch &amp;lt;nameOfBranch&amp;gt;&lt;/code&gt; Will create a branch by the name of &lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout &amp;lt;nameOfBranch&amp;gt;&lt;/code&gt; Will change your &lt;em&gt;pointer&lt;/em&gt; to the branch specified at &lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;git checkout -b &amp;lt;nameOfBranch&amp;gt;&lt;/code&gt; will create and switch you over to the new branch in one line!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git merge &amp;lt;nameOfBranch&amp;gt;&lt;/code&gt; will combine content of branch specified in  with the branch you're currently on. In the case of changes in the same areas from when both points were at similar states, you'll be notified of a merge conflict where you'll either be directed to select which changes to keep or have to manually correct the conflicting area.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git branch -d &amp;lt;nameOfBranch&amp;gt;&lt;/code&gt; removes/deletes the specified branch. You do need to be on a different branch than the one you're trying to delete.&lt;/p&gt;

&lt;p&gt;If you want to learn more about git branches be sure to check out additional documentation on branches. This includes different flags you can use, which can give more visibility to how you're displaying information about your branches, as well as extra things you can do!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Running a Java Application as a Service</title>
      <author>Davey</author>
      <pubDate>Sun, 27 Jun 2021 13:50:26 +0000</pubDate>
      <link>https://dev.to/davey/running-a-java-application-as-a-service-1c0o</link>
      <guid>https://dev.to/davey/running-a-java-application-as-a-service-1c0o</guid>
      <description>&lt;p&gt;With the advent of cloud computing, we now have many ways that we can deploy Java applications. For example, we can deploy them to an Iaas (Infrastructure as a service) such as Amazon &lt;a href="https://aws.amazon.com/ec2"&gt;EC2&lt;/a&gt;, or to a Paas (Platform as a service) such as &lt;a href="https://aws.amazon.com/elasticbeanstalk"&gt;Amazon Elastic Beanstalk&lt;/a&gt; or also to a variety of other solutions.&lt;/p&gt;

&lt;p&gt;In this article, I'm going to show how to deploy an application to a service such as EC2 where we have full control over the platform. I'll be deploying onto a Linux EC2 instance that already has Java installed and concentrating on configuring a stable environment for a Java application.&lt;/p&gt;

&lt;p&gt;There are many ways that a Java application can be controlled within Linux. It can be started manually via the &lt;code&gt;java&lt;/code&gt; command, or it can be deployed and ran as an executable (for example, via SpringBoot), or it can be ran as a service.&lt;/p&gt;

&lt;p&gt;In this post, I'm going to show how to run a Java application (or any other application for that matter) as a system service. When running as a system service, we get the following benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We can specify the user the application runs as&lt;/li&gt;
&lt;li&gt;We can easily start and stop the application&lt;/li&gt;
&lt;li&gt;We can configure the application to automatically start up when the system boot&lt;/li&gt;
&lt;li&gt;We can configure the application to start again in the case of failure.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#creating-a%C2%A0service"&gt;
  &lt;/a&gt;
  Creating a Service
&lt;/h2&gt;

&lt;p&gt;To create a service, I'm going to assume that we have a Jar packaged version of the application. This can be created by Maven with the package command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mvn package
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To control our application, we're going to run it as a systemd service. Wikipedia defines systemd as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a software suite that provides an array of system components for Linux operating systems. Its main aim is to unify service configuration and behavior across Linux distributions; systemd's primary component is a "system and service manager" - an init system used to bootstrap user space and manage user processes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To create a service, we need to have the relevant access to the server, so we need to ensure we have &lt;code&gt;sudo&lt;/code&gt; access.&lt;/p&gt;

&lt;p&gt;The first stage in defining the application as a service, is to create a file within the &lt;code&gt;/etc/systemd/system&lt;/code&gt; directory with a name of &lt;code&gt;myapp.service&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/etc/systemd/system/myapp.service
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Within this file, we need to add 3 sections. &lt;code&gt;[Unit]&lt;/code&gt; defines the description of the service, &lt;code&gt;[Service]&lt;/code&gt; defines how the service is executed and &lt;code&gt;[Install]&lt;/code&gt; tells the operating system when to run the application. For example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Unit]
Description=My Application As A Service

[Service]
User=myapp_user 
Group=myapp_group 
Type=simple 
ExecStart= java -jar /home/ubuntu/myapp/myapp.jar -Xmx512m –Xms512m -XX:MaxNewSize=384m -XX:MaxPermSize=128m  
SuccessExitStatus=143

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's take a look at each of these sections in turn.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unit"&gt;
  &lt;/a&gt;
  [Unit]
&lt;/h2&gt;

&lt;p&gt;This section simply contains one entry which is the description of the service. Note, the name of the service is defined by the name of the file within the &lt;code&gt;/etc/systemd/system&lt;/code&gt; directory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#service"&gt;
  &lt;/a&gt;
  [Service]
&lt;/h2&gt;

&lt;p&gt;This section defines details that the operating system requires to be able to start the service. Firstly, the User and Group specify the security details for the application to run. The application is run as this specified user and group and has their permissions.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Type&lt;/code&gt; can be set to &lt;code&gt;simple&lt;/code&gt; for most cases. This defines that the application will run immediately without forking any other processes. For a definition of the other options available here, check out the &lt;a href="http://manpages.ubuntu.com/manpages/cosmic/man5/systemd.service.5.html"&gt;man pages&lt;/a&gt; for systemd.&lt;/p&gt;

&lt;p&gt;Next, &lt;code&gt;ExecStart&lt;/code&gt; specifies the command that is used to run the application. Here, we specify the entire command line (including &lt;code&gt;java&lt;/code&gt; and any parameters) to run the application. This can be very useful as we can specify which version of Java to use here, so an application can be configured to run with any required JVM, and not only with the system's default JVM. Any JVM properties or application variables can be configured here.&lt;/p&gt;

&lt;p&gt;Finally, as we're running a Java application, we need to tell it how to play properly with systemd. When a Java application is killed via a SIGTERM event, the JVM will close down cleanly but will return an exit code of 143. Adding this as a &lt;code&gt;SuccessExitStatus&lt;/code&gt; tells systemd that the application has closed cleanly in this situation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install"&gt;
  &lt;/a&gt;
  [Install]
&lt;/h2&gt;

&lt;p&gt;The last section basically tells systemd that if the application is configured to start at server boot time, then do so as part of the normal boot process. This tells systemd that the application can start at boot time, but not that it necessarily will. Read on for how we do that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#controlling-the%C2%A0service"&gt;
  &lt;/a&gt;
  Controlling the Service
&lt;/h2&gt;

&lt;p&gt;Once the &lt;code&gt;.service&lt;/code&gt; file has been created, we need to tell systemd that we have a new service. This is achieved by executing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl daemon-reload
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once executed, we can start and stop the service via:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl start myapp
sudo systemctl stop myapp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can get the status of the application by executing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl status myapp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, if we want to tell the systemd to start the application at boot time, we can execute the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl enable myapp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#restarting-upon%C2%A0failure"&gt;
  &lt;/a&gt;
  Restarting upon Failure
&lt;/h2&gt;

&lt;p&gt;Now that we've seen how to create and manage a service, the only thing remaining is to tell systemd to restart the service in case of a failure.&lt;/p&gt;

&lt;p&gt;That can be achieved by adding the following entries into the &lt;code&gt;[Service]&lt;/code&gt; section of the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Restart=on-failure
RestartSec=10s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This configuration tells systemd to restart the service 10s after a failure (you can obviously customise this to your required time interval).&lt;/p&gt;

&lt;p&gt;There are other options available here, for example, when the service is to restart and how many attempts to be made. For more information, check out the &lt;a href="http://manpages.ubuntu.com/manpages/cosmic/man5/systemd.service.5.html"&gt;man pages&lt;/a&gt; for systemd.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this post we've seen how to run a Java application as a service using systemd, and how to control it. We've seen how to start the service at boot time and how to restart the service upon failure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@introspectivedsgn?utm_source=medium&amp;amp;utm_medium=referral"&gt;Erik Mclean&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>ec2</category>
      <category>systemd</category>
      <category>services</category>
    </item>
  </channel>
</rss>
