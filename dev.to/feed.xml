<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Azure Nibble - Hosts File Generator using KQL for App Services</title>
      <author>Marcel.L</author>
      <pubDate>Wed, 08 Sep 2021 15:29:44 +0000</pubDate>
      <link>https://dev.to/pwd9000/azure-nibble-hosts-file-generator-using-kql-for-app-services-p5i</link>
      <guid>https://dev.to/pwd9000/azure-nibble-hosts-file-generator-using-kql-for-app-services-p5i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#azure-resource-graph"&gt;
  &lt;/a&gt;
  Azure Resource Graph
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-gb/azure/governance/resource-graph/overview"&gt;Azure Resource Graph&lt;/a&gt; allows us to quickly and efficiently query across Azure subscriptions. Analyse cloud inventory using complex queries launched programmatically or from the Azure portal. The query language used is known as &lt;strong&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/data-explorer/kusto/query"&gt;Kusto Query Lanuage (KQL)&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hosts-file-generator"&gt;
  &lt;/a&gt;
  Hosts File Generator
&lt;/h2&gt;

&lt;p&gt;Recently I was looking into a mechanism to generate a hosts file to add a very large number of Azure App services that have been private endpoint enabled for both the default as well as the scm hosts of each app, so that these apps could be tested without/outside of DNS, by using a hosts file instead. This has led me to write a short KQL query that will do just this. I will share this query with you today.  &lt;/p&gt;

&lt;p&gt;In the Azure portal search for &lt;strong&gt;Resource Graph Explorer&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cm9Jyl_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-Nibble-Resource-Graph-Hosts-File/assets/rge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cm9Jyl_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-Nibble-Resource-Graph-Hosts-File/assets/rge.png" alt="rge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the query editor add the following lines of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Resources
| where type =~ "microsoft.web/sites"
| mvexpand pe = properties.privateEndpointConnections
| extend peip = tostring(pe.properties.ipAddresses[0])
| mvexpand hosts = properties.hostNameSslStates
| project peip, hosts=tostring(hosts.name)
| order by peip asc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can also select the scope at which you want to run the query:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NQ21nYf4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-Nibble-Resource-Graph-Hosts-File/assets/scope.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NQ21nYf4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-Nibble-Resource-Graph-Hosts-File/assets/scope.png" alt="scope"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then select &lt;strong&gt;Run query&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QI1m192i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-Nibble-Resource-Graph-Hosts-File/assets/run.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QI1m192i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-Nibble-Resource-Graph-Hosts-File/assets/run.png" alt="run"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That is it, you can now export the results to a CSV and copy the results over into a hosts txt file. In addition you can also save the query for future re-use to run it again if any private IP addresses of your App services private endpoints change to get an updated hosts file formatted result.  &lt;/p&gt;

&lt;p&gt;You can also select whether you want to save the query as a &lt;strong&gt;private query&lt;/strong&gt; or a &lt;strong&gt;shared query&lt;/strong&gt;. The later allows you to save the query as an object in a resource group that others can also access and run.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--krboALJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-Nibble-Resource-Graph-Hosts-File/assets/save.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--krboALJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/master/posts/Azure-Nibble-Resource-Graph-Hosts-File/assets/save.png" alt="save"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you have enjoyed this post and have learned something new. You can also find the query code sample for this tutorial on my &lt;a href="https://github.com/Pwd9000-ML/blog-devto/tree/master/posts/Azure-Nibble-Resource-Graph-Hosts-File/code"&gt;Github&lt;/a&gt; page. ❤️&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#author"&gt;
  &lt;/a&gt;
  &lt;em&gt;Author&lt;/em&gt;
&lt;/h3&gt;


&lt;div class="ltag__user ltag__user__id__620034"&gt;
  
    .ltag__user__id__620034 .follow-action-button {
      background-color: #0cbb58 !important;
      color: #000000 !important;
      border-color: #0cbb58 !important;
    }
  
    &lt;a href="/pwd9000" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Amb4rEJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--L_SDLOmq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/620034/93be2c72-3a13-478e-8af1-a4bedc1b2331.jpeg" alt="pwd9000 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/pwd9000"&gt;Marcel.L&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/pwd9000"&gt;Cloud Solutions Architect and DevOps enthusiast.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>tutorial</category>
      <category>azure</category>
      <category>productivity</category>
      <category>learning</category>
    </item>
    <item>
      <title>Creating an omnibar with Autocomplete.js</title>
      <author>Bryan Robinson</author>
      <pubDate>Wed, 08 Sep 2021 15:17:55 +0000</pubDate>
      <link>https://dev.to/algolia/creating-an-omnibar-with-autocomplete-3jgh</link>
      <guid>https://dev.to/algolia/creating-an-omnibar-with-autocomplete-3jgh</guid>
      <description>&lt;p&gt;When is a search bar not a search bar? When it's an "omnibar" built with Autocomplete!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ghy7a78JGCQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In her &lt;a href="https://www.learnwithjason.dev/javascript-autocomplete"&gt;episode of Learn with Jason&lt;/a&gt;, &lt;a href="https://twitter.com/frontstuff_io"&gt;Sarah Dayan&lt;/a&gt; mentioned the idea of using Autocomplete to create an experience brimming with shortcuts and power-user affordances.&lt;/p&gt;

&lt;p&gt;In this tutorial, we'll walk through setting up &lt;a href="https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/autocomplete-js/autocomplete/"&gt;Autocomplete&lt;/a&gt; to fire interactions with JavaScript. Specifically, we'll build an omnibar to toggle light and dark mode for our website. An omnibar is a search field that has both search and actions that can be taken. A strong example of this is the Chrome or Firefox search and URL bar.&lt;/p&gt;

&lt;p&gt;In the search field, a user will be able to type in &lt;code&gt;/&lt;/code&gt; commands. These commands will be tied to specific JavaScript methods to trigger. We'll also make the Autocomplete results stateful. When the app is in light mode, the light mode option will show an "enabled" flag. When dark mode is enabled, the dark mode option will show the flag.&lt;/p&gt;

&lt;p&gt;Give it a try yourself!&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/autocomplete-actions-finished-eh7xw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-autocomplete-for-use-with-react"&gt;
  &lt;/a&gt;
  Configuring Autocomplete for use with React
&lt;/h2&gt;

&lt;p&gt;At its core, Autocomplete is a vanilla JavaScript library. Let's make it a bit more reusable by mounting it as a React component for use in any React-based framework or site.&lt;/p&gt;

&lt;p&gt;We'll start with CodeSandbox's basic React sandbox. &lt;a href="https://alg.li/omnibar-starter"&gt;Fork this sandbox&lt;/a&gt; to get the exact starting point with all packages installed for us.&lt;/p&gt;

&lt;p&gt;To create our component, we'll start by adding a new file named &lt;code&gt;Autocomplete.js&lt;/code&gt;. This file will house all the initialization code for the Autocomplete library and export the component for use in our application.&lt;/p&gt;

&lt;p&gt;At the top of the new file, import the necessary elements from React, React-dom, and the Autocomplete libraries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;autocomplete&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@algolia/autocomplete-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once imported, we need to export a new functional React component. We'll start with the basic boilerplate for creating a new mounted component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Autocomplete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;containerRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;containerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="c1"&gt;// Space to initialize autocomplete on the newly created container&lt;/span&gt;


    &lt;span class="c1"&gt;// Destroy the search instance in cleanup  &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
      &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  
    &lt;span class="p"&gt;};&lt;/span&gt;  

  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;containerRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;; &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code will take care of the basic initialization and breakdown of the component on mount and unmount.&lt;/p&gt;

&lt;p&gt;Inside the function, it's time to initialize the Autocomplete instance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Creates an Autcomplete component from the JS library&lt;/span&gt;
&lt;span class="c1"&gt;// https://www.algolia.com/doc/ui-libraries/autocomplete/guides/using-react/&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Autocomplete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;containerRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;containerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Initialize autocomplete on the newly created container&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;autocomplete&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;containerRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Fragment&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="c1"&gt;// Autocomplete render()&lt;/span&gt;
      &lt;span class="c1"&gt;// https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/autocomplete-js/autocomplete/#param-render&lt;/span&gt;
      &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// react-dom render&lt;/span&gt;
        &lt;span class="c1"&gt;// https://reactjs.org/docs/react-dom.html#render&lt;/span&gt;
        &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// Destroy the search instance in cleanup&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;containerRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;autocomplete&lt;/code&gt; method accepts an object of options. We set the &lt;code&gt;container&lt;/code&gt; property to be the element created by this function. By specifying the &lt;code&gt;renderer&lt;/code&gt; function, we can use React's &lt;code&gt;createElement&lt;/code&gt; method and &lt;code&gt;Fragment&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;Then, we need to provide Autocomplete with a &lt;code&gt;render&lt;/code&gt; function. This function will accept an object of components to render (&lt;code&gt;children&lt;/code&gt;), and the element to attach the instance (&lt;code&gt;root&lt;/code&gt;). &lt;/p&gt;

&lt;p&gt;We can then use any method to render these items. In our case, we'll use &lt;code&gt;react-dom&lt;/code&gt;'s &lt;code&gt;render()&lt;/code&gt; method and pass it those same elements. Finally, we want to pass the &lt;code&gt;autocomplete&lt;/code&gt; method any additional props added to our component when we use it. This will allow for on-the-fly customizations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-raw-ltautocomplete-gt-endraw-component"&gt;
  &lt;/a&gt;
  Using the &lt;code&gt;&amp;lt;Autocomplete /&amp;gt;&lt;/code&gt; component
&lt;/h2&gt;

&lt;p&gt;Moving to the &lt;code&gt;App.js&lt;/code&gt; file, we can import our Autocomplete component (along with some default styling).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Styles&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@algolia/autocomplete-theme-classic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  

&lt;span class="c1"&gt;// Import algolia and autocomplete needs&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Autocomplete&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Autocomplete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From here, we're ready to put an Autocomplete field on the page. Inside the &lt;code&gt;App()&lt;/code&gt; function's JSX return value, we can put the &lt;code&gt;&amp;lt;Autocomplete /&amp;gt;&lt;/code&gt; component anywhere that makes sense for the UI. I suggest right after the main text of the page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;  
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-xl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
           &lt;span class="nx"&gt;Run&lt;/span&gt; &lt;span class="nx"&gt;JS&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  
           &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/autocomplete-js/autocomplete/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
             &lt;span class="nx"&gt;Autocomplete&lt;/span&gt;  
           &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&amp;gt; &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt; &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-base&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
           &lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;based&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;amazing&lt;/span&gt; &lt;span class="nx"&gt;idea&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  
           &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://twitter.com/frontstuff_io&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Sarah&lt;/span&gt; &lt;span class="nx"&gt;Dayan&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&amp;gt; in her &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;           &lt;span class="nx"&gt;appearance&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  
           &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://www.learnwithjason.dev/javascript-autocomplete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
             &lt;span class="nx"&gt;Learn&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;Jason&lt;/span&gt;  
           &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/a&amp;gt; &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;           &lt;span class="p"&gt;.&lt;/span&gt;  
         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt; &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
           &lt;span class="nx"&gt;Use&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;Autocomplete&lt;/span&gt; &lt;span class="nx"&gt;box&lt;/span&gt; &lt;span class="nx"&gt;below&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="nx"&gt;dark&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;perform&lt;/span&gt; &lt;span class="nx"&gt;other&lt;/span&gt;  
           &lt;span class="nx"&gt;JS&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;driven&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
         &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt; &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Autocomplete&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* ... the rest of the function ... */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Autocomplete component can accept any prop that the &lt;code&gt;autocomplete-js&lt;/code&gt; library can accept as an option. To start, let's add placeholder text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Autocomplete&lt;/span&gt; &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Try /dark"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A search field should appear in our app with the placeholder text set. This field doesn't do anything yet. Let's add some data to complete.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-an-raw-actions-endraw-source-to-the-autocomplete-component"&gt;
  &lt;/a&gt;
  Adding an &lt;code&gt;actions&lt;/code&gt; source to the Autocomplete component
&lt;/h2&gt;

&lt;p&gt;The Autocomplete library is capable of creating autocomplete functionality against multiple sources. In our case, we'll only have one static source, but any external data – including Algolia indices – can be used to populate this functionality.&lt;/p&gt;

&lt;p&gt;To add a source, we'll use the &lt;code&gt;getSources&lt;/code&gt; prop and provide a function that accepts the &lt;code&gt;query&lt;/code&gt; option. This query is what a user is actively typing into the input. We can use this to check against the items in our data.&lt;/p&gt;

&lt;p&gt;A source is an object in the getSources returned array. The basic elements we need for the source are a &lt;code&gt;sourceId&lt;/code&gt; string, a &lt;code&gt;template&lt;/code&gt; object for rendering, and a &lt;code&gt;getItems()&lt;/code&gt; function that returns the data. For now, we'll just return a static array with a label attribute. This is enough to populate our autocomplete. Let's also add &lt;code&gt;openOnFocus&lt;/code&gt; as a prop to automatically list our items when a user focuses the field.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Autocomplete&lt;/span&gt;  
  &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Try /dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;openOnFocus&lt;/span&gt;   
  &lt;span class="nx"&gt;getSources&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{({&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;  
    &lt;span class="p"&gt;{&lt;/span&gt;  
      &lt;span class="na"&gt;sourceId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;actions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
      &lt;span class="na"&gt;templates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&amp;gt; &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;        &lt;span class="p"&gt;}&lt;/span&gt;  
      &lt;span class="p"&gt;},&lt;/span&gt;  
      &lt;span class="nx"&gt;getItems&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;  
          &lt;span class="p"&gt;{&lt;/span&gt;  
            &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;  
          &lt;span class="p"&gt;},&lt;/span&gt;  
          &lt;span class="p"&gt;{&lt;/span&gt;  
            &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;  
          &lt;span class="p"&gt;}&lt;/span&gt;  
        &lt;span class="p"&gt;]&lt;/span&gt;  
      &lt;span class="p"&gt;}&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;  
  &lt;span class="p"&gt;]}&lt;/span&gt;  
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we have items populating our field, but we're not filtering items as we type. Let's fix that with a couple helper functions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#filtering-and-highlighting-autocomplete-items"&gt;
  &lt;/a&gt;
  Filtering and highlighting Autocomplete items
&lt;/h2&gt;

&lt;p&gt;When using an Algolia index, we can use some helper functions to manage filtering and highlighting, but we're not using an Algolia index. In our use case, we want to keep this fully in the browser. To do this, we need a couple helper functions to properly filter and highlight our options.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#filtering-autocomplete-items-with-javascript-regexp"&gt;
  &lt;/a&gt;
  Filtering Autocomplete items with JavaScript RegExp()
&lt;/h3&gt;

&lt;p&gt;JavaScript offers the ability to filter an array based on a regular expression test. To do that, we need to create a pattern to test against for any combination the user can throw at us. Let's create a helper function based on the query and use that in a JS &lt;code&gt;.filter()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;App.js&lt;/code&gt; outside the export, we'll create the new helper function &lt;code&gt;getQueryPattern()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getQueryPattern&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;flags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;i&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  
    &lt;span class="s2"&gt;`(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;  
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Trim leading and ending whitespace &lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// convert to lower case&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Split on spaces for multiple commands &lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`^&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Map over the resulting array and create Regex_  &lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;|&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;)`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Join those expressions with an OR | &lt;/span&gt;
    &lt;span class="nx"&gt;flags&lt;/span&gt;  
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* ... */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the helper function is created, we'll create the pattern in the &lt;code&gt;getItems()&lt;/code&gt; method before we return the array of items.&lt;/p&gt;

&lt;p&gt;With the pattern saved, we can test our array against it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Autocomplete&lt;/span&gt;
  &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Try /dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;openOnFocus&lt;/span&gt;
  &lt;span class="nx"&gt;getSources&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{({&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;sourceId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;actions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;templates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nx"&gt;getItems&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getQueryPattern&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// tests the label against the pattern&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when we type &lt;code&gt;/dark&lt;/code&gt; into the field, only the &lt;code&gt;/dark&lt;/code&gt; option. We haven't given the user any indication of why that works. Let's add a small highlighting function to showcase the letters typed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#highlighting-the-string-being-typed-in-results"&gt;
  &lt;/a&gt;
  Highlighting the string being typed in results
&lt;/h3&gt;

&lt;p&gt;In order to highlight the typed text, we need to take the query text and the pattern we created in the last step and generate a new string that adds additional markdown around the typed text.&lt;/p&gt;

&lt;p&gt;Right after the &lt;code&gt;getQueryPattern&lt;/code&gt; helper function, let's create a new &lt;code&gt;highlight&lt;/code&gt; helper function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;highlight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// Split the text based on the pattern  &lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Map over the split text and test against the pattern  &lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// If the pattern matches the text, wrap the text in &amp;lt;mark&amp;gt;  &lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/mark&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// return the token back to the array  &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This helper function takes the text to test and the pattern to check it against and returns a string with additional markup.&lt;/p&gt;

&lt;p&gt;We start by splitting the text based on the pattern. This will give us an array with two parts – matched and unmatched. As we map over this new array, we can check the text against the pattern and if it matches, wrap that specific item in a new piece of markup. If it doesn't, return the unmodified text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Autocomplete&lt;/span&gt;
  &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Try /dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;openOnFocus&lt;/span&gt;
  &lt;span class="nx"&gt;getSources&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{({&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;sourceId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;actions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

      &lt;span class="na"&gt;templates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;highlighted&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;

      &lt;span class="nx"&gt;getItems&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getQueryPattern&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// tests the label against the pattern&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;highlighted&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;highlight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}));&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that helper function, we can now map over all the filtered items. We'll take the action item and return back an object with all of its initial properties, but a new &lt;code&gt;highlighted&lt;/code&gt; property that contains our highlighted text. This is built from the action's &lt;code&gt;label&lt;/code&gt; property and the pattern we defined earlier. &lt;/p&gt;

&lt;p&gt;Now instead of using the &lt;code&gt;action.label&lt;/code&gt; in our template, we'll change it to use the new &lt;code&gt;highlight&lt;/code&gt; property. When &lt;code&gt;/dark&lt;/code&gt; is typed into the field, the item will have properly highlighted text.&lt;/p&gt;

&lt;p&gt;The filtering UI is complete, but when we select an item, nothing happens. Let's fix that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#firing-a-javascript-function-in-autocomplete-with-raw-onselect-endraw-"&gt;
  &lt;/a&gt;
  Firing a JavaScript function in Autocomplete with &lt;code&gt;onSelect&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Each source in the &lt;code&gt;getSources&lt;/code&gt; array can have its own &lt;code&gt;onSelect&lt;/code&gt; method. This method defines the functionality for when a user selects an option – via keyboard or click.&lt;/p&gt;

&lt;p&gt;Let's start by making a global select function to log the item's data and then reset the query to a blank string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;getSources&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{({&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;sourceId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;actions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;templates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;highlighted&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;// Run this code when item is selected  &lt;/span&gt;
   &lt;span class="nx"&gt;onSelect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// item is the full item data&lt;/span&gt;
      &lt;span class="c1"&gt;// setQuery is a hook to set the query state&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;setQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For one action, we could define the JavaScript in this method, but to make this reusable for any action in the future, let's define the method on the item's data instead.&lt;/p&gt;

&lt;p&gt;To do this, we'll define a method named &lt;code&gt;onSelect&lt;/code&gt; for each item. This method can handle whatever functionality you need. In this case, we'll create a very simple dark and light mode by adding the class &lt;code&gt;dark&lt;/code&gt; to the body to enable dark mode and remove it to enable light mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;onSelect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Light Mode enabled&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;onSelect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dark Mode enabled&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, back in the main &lt;code&gt;onSelect&lt;/code&gt; method, instead of running &lt;code&gt;console.log(item)&lt;/code&gt;, we can run &lt;code&gt;item.onSelect()&lt;/code&gt;. This will fire the functions we just created.&lt;/p&gt;

&lt;p&gt;We now have functioning actions! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enhancing-the-omnibar-experience"&gt;
  &lt;/a&gt;
  Enhancing the omnibar experience
&lt;/h2&gt;

&lt;p&gt;With working actions, we can focus a bit on crafting a strong user experience for our omnibar. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automatic-highlight-and-select"&gt;
  &lt;/a&gt;
  Automatic highlight and select
&lt;/h3&gt;

&lt;p&gt;First, let's have Autocomplete automatically highlight the first item in the list. This will allow a user to select an action by just hitting enter.&lt;/p&gt;

&lt;p&gt;To add this feature, we need to pass a new prop to the &lt;code&gt;&amp;lt;Autocomplete /&amp;gt;&lt;/code&gt; component. By passing the prop &lt;code&gt;defaultActiveItemId&lt;/code&gt; a value of &lt;code&gt;"0"&lt;/code&gt;, we can have the first item in the list be active. Any active item can be selected by hitting enter. This makes for a solid keyboard experience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-more-robust-ui-with-a-new-component"&gt;
  &lt;/a&gt;
  Creating a more robust UI with a new component
&lt;/h3&gt;

&lt;p&gt;Let's abstract the &lt;code&gt;template&lt;/code&gt; to use a separate component called &lt;code&gt;Action&lt;/code&gt;. We can build this in a separate file or create it in &lt;code&gt;App.js&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;To use the component, we'll pass it a &lt;code&gt;hit&lt;/code&gt; prop that will contain our item data. This component will also use specific class names that match specific items in the classic theme we imported at the beginning of the tutorial.&lt;/p&gt;

&lt;p&gt;Inside the markup, we provide the highlighted text and two new items: &lt;code&gt;hit.icon&lt;/code&gt; and an SVG representation of the return key. This adds some customized iconography for our actions and an indication to users that they can use the enter key to select an item.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Action&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;hit&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Component to display the items  &lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemWrapper&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemContent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemIcon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemContentBody&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemContentTitle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;highlighted&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemActions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
          &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemActionButton aa-DesktopOnly aa-ActiveOnly&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Select&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt; &lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 0 24 24&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;currentColor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M18.984 6.984h2.016v6h-15.188l3.609 3.609-1.406 1.406-6-6 6-6 1.406 1.406-3.609 3.609h13.172v-4.031z&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/svg&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the component is created, we need to change our &lt;code&gt;item&lt;/code&gt; template to use it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;templates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Action&lt;/span&gt; &lt;span class="nx"&gt;hit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll also need to add an icon property to each of our action items. In this example, we have some hand-crafted SVGs, but any icon library will work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt; &lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 0 24 24&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;currentColor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;
          &lt;span class="nx"&gt;strokeLinecap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;round&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;strokeLinejoin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;round&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;strokeWidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/svg&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;onSelect&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;setContext&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt; &lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 0 24 24&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;stroke&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;currentColor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;
          &lt;span class="nx"&gt;strokeLinecap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;round&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;strokeLinejoin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;round&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;strokeWidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/svg&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;onSelect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Light Mode enabled&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is starting to look really nice. It's a bit odd that the site is in light mode, but the light mode option provides no indication of that. Let's add some context for our users.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-an-enabled-state-with-raw-setcontext-endraw-"&gt;
  &lt;/a&gt;
  Creating an enabled state with &lt;code&gt;setContext&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Autocomplete gives us access to state. Let's use that to create an &lt;code&gt;enabled&lt;/code&gt; state and set that state when our actions are fired.&lt;/p&gt;

&lt;p&gt;Let's start by adding a new property to each action named &lt;code&gt;enabled&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//...&lt;/span&gt;
  &lt;span class="nl"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//...&lt;/span&gt;
  &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/light&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This property will check the Autocomplete's state object for a context item labeled &lt;code&gt;dark&lt;/code&gt;. If &lt;code&gt;dark&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, the dark action will have a true &lt;code&gt;enabled&lt;/code&gt; state, if &lt;code&gt;false&lt;/code&gt;, light will be true.&lt;/p&gt;

&lt;p&gt;To have that context, we need to set the context of the app during our &lt;code&gt;onSelect&lt;/code&gt; functions. We can pass the &lt;code&gt;setContext&lt;/code&gt; method into our &lt;code&gt;onSelect&lt;/code&gt; functions and use that to set &lt;code&gt;dark&lt;/code&gt; to true or false.&lt;/p&gt;

&lt;p&gt;We need to pass the &lt;code&gt;setContext&lt;/code&gt; method in the options object for our sources method. Start by changing &lt;code&gt;getSources={({ query })}&lt;/code&gt; to &lt;code&gt;getSources={({ query, setContext })}&lt;/code&gt;. Then we can use &lt;code&gt;setContext&lt;/code&gt; in our &lt;code&gt;onSelect&lt;/code&gt; functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;onSelect&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;setContext&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setContext&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now all that's left is to use the &lt;code&gt;enabled&lt;/code&gt; boolean value in our component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Action&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;hit&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Component to display the items&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemWrapper&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemContent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemIcon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemContentBody&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemContentTitle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;highlighted&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enabled&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemContentTitleNote&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Enabled&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/code&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemActions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
          &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;aa-ItemActionButton aa-DesktopOnly aa-ActiveOnly&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Select&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;svg&lt;/span&gt; &lt;span class="nx"&gt;viewBox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 0 24 24&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;currentColor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M18.984 6.984h2.016v6h-15.188l3.609 3.609-1.406 1.406-6-6 6-6 1.406 1.406-3.609 3.609h13.172v-4.031z&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/svg&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And with that, our omnibar is stateful. This is a relatively simple example of dark mode. To build it out more, you could add and set the context of the omnibar from the overall state of your application or based on information in a user's localStorage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h2&gt;

&lt;p&gt;In this tutorial, we built out Autocomplete to be more than search, but you can also add regular search functionality with a different source object with its own set of templates. You can also extend the actions to match any potential actions your application has. &lt;/p&gt;

&lt;p&gt;Some ideas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Adding to a todo list or saved list&lt;/li&gt;
&lt;li&gt;  Newsletter sign up&lt;/li&gt;
&lt;li&gt;  User profile updates&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We'd love to see what you come up with. Fork &lt;a href="https://alg.li/omnibar-starter"&gt;the starter sandbox&lt;/a&gt; (or &lt;a href="https://codesandbox.io/s/autocomplete-actions-finished-eh7xw"&gt;this finished one&lt;/a&gt;), create something new, and &lt;a href="https://twitter.com/algolia"&gt;share it with us on Twitter&lt;/a&gt; or in the comments below.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>ux</category>
      <category>tutorial</category>
      <category>react</category>
    </item>
    <item>
      <title>I Finished a Coding Bootcamp: What Was It Like?</title>
      <author>Adriana DiPietro</author>
      <pubDate>Wed, 08 Sep 2021 15:16:27 +0000</pubDate>
      <link>https://dev.to/am20dipi/i-finished-a-coding-bootcamp-what-was-it-like-256j</link>
      <guid>https://dev.to/am20dipi/i-finished-a-coding-bootcamp-what-was-it-like-256j</guid>
      <description>&lt;p&gt;Yesterday, on September 7, 2021, I finished a coding bootcamp. I spent 12+ months in Flatiron's part-time Software Engineering extensive course. I am so proud of myself. Adjacent to my pride, I feel a lot of relief -- as if I can breathe again. Adjacent to that, I question if I am ready to dive into the world of tech. This conglomerate of emotions is both feared and appreciated. But more for later... &lt;/p&gt;

&lt;p&gt;In this post I will be discussing my experience + opinion of Flatiron's bootcamp, what I learned, what I wish I learned + my biggest mistakes. So hold on tight, we are about to begin.&lt;/p&gt;

&lt;p&gt;☁️☁️☁️☁️☁️☁️☁️☁️☁️&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#itinerary"&gt;
  &lt;/a&gt;
  ITINERARY
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#flatiron"&gt;WHAT IS FLATIRON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#experience-opinion"&gt;MY EXPERIENCE + OPINION FLATIRON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#learned-curriculum"&gt;WHAT I LEARNED / CURRICULUM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#wish"&gt;WHAT I WISH I LEARNED&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#mistakes"&gt;MY BIGGEST MISTAKES&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-flatiron"&gt;
  &lt;/a&gt;
  WHAT IS FLATIRON &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Flatiron is an educational organization that encompasses 4 main "bootcamps": (1) Software Engineering, (2) Data Science, (3) Cyber Security, and (4) Product Design. According to Flatiron's &lt;a href="https://flatironschool.com/"&gt;website&lt;/a&gt;, "Each of our immersive programs — on-campus and online — has one goal: to &lt;strong&gt;help you launch a new tech career&lt;/strong&gt;. Whether you're learning to become a software developer, data scientist,[...], our Career Services team is there to &lt;strong&gt;help you land that first job&lt;/strong&gt;."&lt;/p&gt;

&lt;p&gt;As claimed above, "to help you land that first job", bootcamps are designed for just that. With a militaristic and fear-inducing connotation, a "bootcamp" is an &lt;strong&gt; extensive, accelerated curriculum whose primary purpose is to teach what it necessary to get a job&lt;/strong&gt; in that desired field. I believe tied for its &lt;em&gt;projected&lt;/em&gt;, primary purpose is learning, but learning for the sake of knowledge kind of takes a back seat in bootcamps. &lt;/p&gt;

&lt;p&gt;We can see this in Flatiron School's overall instructional design: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Full-time course is approximately 20 weeks long. &lt;/li&gt;
&lt;li&gt;Part-time course is about 40-50 weeks long. &lt;/li&gt;
&lt;li&gt;Full-time curriculum asks students to dedicate 60-80+ hours a week. &lt;/li&gt;
&lt;li&gt;Part-time curriculum asks students to dedicate 40-60+ hours a week.&lt;/li&gt;
&lt;li&gt;Full-time nor part-time curriculum requires any computer science background or any higher education background. &lt;/li&gt;
&lt;li&gt;The application process is easy + non-competitive. &lt;/li&gt;
&lt;li&gt;The curriculum pace is basically self-paced (besides project due dates). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, all of this criteria made me interested in Flatiron. They seem to throw out all of the methods of a traditional, old wave educational system. They saw that students self-motivating is what works, hence no due dates or required submissions (besides the module projects). They saw that students nowadays do not need a traditional, 4-year Computer Science education to land a job in tech. Flatiron only need 20-50 weeks! They basically threw out traditionalism; in which they are righteous in doing so. &lt;/p&gt;

&lt;p&gt;Yet, in their attempt, which I personally deem successful, they created a factory farm of tech personnel; you may say a pipeline directly from those in a rush to software engineer. The 20-week curriculum seems promising, but its focus is just what is encompassed in their mission statement: to get a job. &lt;strong&gt;This is not a bad thing. But it is a new thing.&lt;/strong&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-experience-opinion-of-flatiron"&gt;
  &lt;/a&gt;
  MY EXPERIENCE + OPINION OF FLATIRON &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;During my 12+ months at Flatiron School, I participated in both the full-time + part-time Software Engineering curriculums. I began in September of 2020 in the full-time cohort and went on to quickly fail my second project review in November. When a student does not pass a module's project review, on the first or second attempt, they technically fail and are given a few options: &lt;br&gt;
(1) Redo the module. &lt;br&gt;
(2) Drop out.&lt;/p&gt;

&lt;p&gt;Having a predisposed fear of failure, I felt like the end of days were near. I was embarrassed, angry, hopeless... But my fear of failure made me chug along. So I opted to redo the module. A student is given two (2) "fallbacks" -- basically meaning if you fail you can redo a module or if you feel as if the pace you are at does not match your abilities, you can transfer to a different pace (i.e part-time, full-time). I took both of my fallbacks at the same time -- I would say DON'T DO THIS. Honestly, I don't regret it but it was a mistake. It's like when they say "don't show your whole hand" or whatever that saying is. So come early November, I was kicked out of my cohort and transferred to a part-time cohort. However, since part-time moves at a slower pace, I had to wait until January to resume where I left off. Not a big deal but I definitely did not do anything between November to early January. I slacked. Also a huge mistake. DON'T DO THIS EITHER. Continue studying what you already learned or take to third party resources like YouTube, Leetscode, or Codewars to keep your brain going. &lt;/p&gt;

&lt;p&gt;Fast forward, I was doing pretty well in the part-time cohort. I had more time for myself. I was understanding the material. I felt more at ease and could breathe. Also, I was able to work some shifts at a restaurant. So, my experience at Flatiron went up a lot during this time. &lt;/p&gt;

&lt;p&gt;I do want to mention that with each cohort comes different teaching, learning, and communication styles. In the full-time cohort, everyone (including instructor, instructor aid, educational coach) was constantly talking in the slack channel. Mostly because the full-time curriculum expected 60-80+ hours a week; so everyone was always on their computer. There was definitely a larger, more emphasized sense of community in the full-time cohort. I had made "friends" and "acquaintances" in which whom I would work on labs with or study with. Basically, there was rapport + promise of future networking. &lt;/p&gt;

&lt;p&gt;In my part-time cohort, this basically fell to the wayside. There was some, not going to lie. But drastically less sense of community + rapport. I missed this very much and often felt lonely as you do as a student learning completely online and spending 40-60 hours a week in front of a computer alone. There was just less of a need for the intense community + constant discussion in the slack channel for part-time. I would say most, if not all, of my cohort peers worked a part-time job during the part-time curriculum. &lt;/p&gt;

&lt;p&gt;I bet you can imagine, as with all instructors anywhere, each instructor has a different teaching style. Some resort to visual emphasis, some use analogies, some use movies. Within Flatiron, my two instructors taught very differently. One was more colloquial, "think of this as you are going to the store with your friend". While one was very dictionary and strict, "this means this and that's that". While I'm being vague, I just wanted to caution you readers that while Flatiron has set boundaries and goals for their instructors, each instructor takes these boundaries and goals and flies with it. So, try to learn what your instructor's teaching style is and figure out the best way you can learn from it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-learned-flatirons-curriculum"&gt;
  &lt;/a&gt;
  WHAT I LEARNED + FLATIRON'S CURRICULUM &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Here, I am going to simply break down the curriculum into five (5) pieces representing the five (5) modules of both the full-time and part-time curriculums:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ruby + Basic Object Oriented Programming (OOP)&lt;/li&gt;
&lt;li&gt;Sinatra + SQL + ActiveRecord&lt;/li&gt;
&lt;li&gt;Ruby on Rails&lt;/li&gt;
&lt;li&gt;JavaScript, Rails(API)&lt;/li&gt;
&lt;li&gt;React + Redux, JavaScript, Rails(API)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the full-time program, you basically have two (2) weeks to learn the curriculum and two (2) weeks to start and complete the project AND pass the review. &lt;/p&gt;

&lt;p&gt;In the part-time program, you basically have four (4) weeks to learn the curriculum and four (4) weeks to start and complete the project AND pass the review. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-wish-i-learned"&gt;
  &lt;/a&gt;
  WHAT I WISH I LEARNED&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Honestly, I think Ruby on Rails is a great language to start off learning as a beginner or novice programmer. Ruby on Rails really exemplifies the key concepts + basic foundation of Object Oriented Programming(OOP). However, Ruby on Rails is not being used &lt;em&gt;that much&lt;/em&gt; anymore in newer companies/newer applications --- I would not say its dying like some people, but it is a little shaded. Take what I said with a grain of salt. &lt;/p&gt;

&lt;p&gt;With that being said, I wish I learned Python. Python is dominated the greater NYC metro area; in which I reside. Python is great and also reflects the basics of OOP. So, with the knowledge of Ruby on Rails, I can expend it to learn Python on my own terms. &lt;/p&gt;

&lt;p&gt;The five (5) main projects were really cool, yet stressful to work on. I wish they were nest in a few more mini projects into the curriculum. I feel as if that would reduce the stress that comes with the intensity of each module project. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-biggest-mistakes"&gt;
  &lt;/a&gt;
  MY BIGGEST MISTAKES&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;I already mentioned a few of my biggest mistakes, but here I am going to take the time to list out and explain them + some more because I make mistakes often!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Taking both "fallbacks" at once.&lt;/li&gt;
&lt;li&gt;During curriculum hiatus/breaks, not doing any work (even if its not Flatiron work).&lt;/li&gt;
&lt;li&gt;Not using "Ask-A-Question" more.

&lt;ul&gt;
&lt;li&gt;"Ask-A-Question" is an utility given to each Flatiron student. It is an almost 24/7 chat with real alumni and instructors. You basically ask a question about a lab or lecture, and the person helps you out by pair programming on a lab together or going through the lecture and explaining. &lt;/li&gt;
&lt;li&gt;Honestly, I get embarrassed asking for help and I always try to figure it out on my own before asking. I should have just swallow my pride and used this amazing utility. You should too!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Networking during the curriculum.

&lt;ul&gt;
&lt;li&gt;Start networking the minute the course begins. People will remember you that way. &lt;/li&gt;
&lt;li&gt;Network by being outspoken (in a polite + professional way), offering help, asking a lot of questions, sending your cohort peers good resources... etc.&lt;/li&gt;
&lt;li&gt;Connect with people on your blog website or LinkedIn...etc. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write a blog a week.

&lt;ul&gt;
&lt;li&gt;I started doing this toward the end of my course. Each student is required to write one (1) blog per project. So five (5) total.&lt;/li&gt;
&lt;li&gt;Just write more than that. Even if its two (2) per project.&lt;/li&gt;
&lt;li&gt;Get a following on your blog page -- this is networking too. &lt;/li&gt;
&lt;li&gt;Write blogs on what you don't understand -- teach yourself!!!&lt;/li&gt;
&lt;li&gt;Write blogs on what you do understand -- teach others!!!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;p&gt;This is basically it. I just wanted to share some insight to those looking into bootcamps; those who have done bootcamps; those who are new to coding...&lt;/p&gt;

&lt;p&gt;I hope this has found you well + helps you through your journey. &lt;/p&gt;

&lt;p&gt;☁️☁️☁️☁️☁️☁️☁️☁️☁️&lt;br&gt;
Comment below for any questions, suggestions, or to just continue the discussion!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>bootcamp</category>
      <category>react</category>
      <category>flatiron</category>
    </item>
    <item>
      <title>HTTPie for Performance Engineers</title>
      <author>NaveenKumar Namachivayam ⚡</author>
      <pubDate>Wed, 08 Sep 2021 15:13:14 +0000</pubDate>
      <link>https://dev.to/qainsights/httpie-for-performance-engineers-3pp4</link>
      <guid>https://dev.to/qainsights/httpie-for-performance-engineers-3pp4</guid>
      <description>&lt;p&gt;In this blog post we are going to learn HTTPie - a command line utility to debug web services. In our last post, we read about &lt;a href="https://qainsights.com/curl-tips-for-performance-engineers/" rel="noreferrer noopener"&gt;cURL for Performance Engineers&lt;/a&gt;. If you are looking for a cURL alternative, you can check out HTTPie.&lt;/p&gt;

&lt;h2&gt;What is HTTPie?&lt;/h2&gt;

&lt;p&gt;Here is the excerpt from httpie.io:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;HTTPie (pronounced aitch-tee-tee-pie) is a command-line HTTP client. Its goal is to make CLI interaction with web services as human-friendly as possible. HTTPie is designed for testing, debugging, and generally interacting with APIs &amp;amp; HTTP servers.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It supports both http and https; displays it in color by default. &lt;/p&gt;

&lt;h2&gt;How to install HTTPIe?&lt;/h2&gt;

&lt;p&gt;You can HTTPie on Linux, Windows and macOS. The only prerequisite is Python 3.6 or greater.&lt;/p&gt;

&lt;p&gt;Head to https://httpie.io/docs#installation to see the instructions based on your OS.&lt;/p&gt;

&lt;p&gt;In this demonstration, we are going to utilize HTTPie on Windows Subsystem for Linux (WSL).&lt;/p&gt;

&lt;p&gt;Issue any one of the below command to install HTTPie.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt install httpie&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python -m pip install --upgrade pip setuptools
python -m pip install --upgrade httpie&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After successful installation, you can validate by issuing &lt;code&gt;http --version&lt;/code&gt; or &lt;code&gt;https --version&lt;/code&gt; which will display the installed version of httpie.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/09/image-13.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XrAO0nZ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/09/image-13.png" alt="HTTPie for Performance Engineers"&gt;&lt;/a&gt;HTTPie for Performance Engineers&lt;/p&gt;

&lt;p&gt;Throughout this demo, we are going to use &lt;code&gt;https&lt;/code&gt; variant.&lt;/p&gt;

&lt;h2&gt;HTTPie Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Expressive and intuitive syntax&lt;/li&gt;
&lt;li&gt;Formatted and colorized terminal output&lt;/li&gt;
&lt;li&gt;Built-in JSON support&lt;/li&gt;
&lt;li&gt;Forms and file uploads&lt;/li&gt;
&lt;li&gt;HTTPS, proxies, and authentication.&lt;/li&gt;
&lt;li&gt;Arbitrary request data&lt;/li&gt;
&lt;li&gt;Custom headers&lt;/li&gt;
&lt;li&gt;Persistent sessions&lt;/li&gt;
&lt;li&gt;Wget-like downloads&lt;/li&gt;
&lt;li&gt;Linux, macOS and Windows support&lt;/li&gt;
&lt;li&gt;Plugins&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;li&gt;Test coverage&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://youtu.be/EBHqAPp1PIw"&gt;https://youtu.be/EBHqAPp1PIw&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Usage&lt;/h2&gt;

&lt;h3&gt;Hello World&lt;/h3&gt;

&lt;p&gt;Let us start with the simple &lt;code&gt;GET&lt;/code&gt; method using the httpbin.org demo app. As you can see, by default, httpie will display the response and the headers in the colored format.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https httpbin.org/get&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/09/image-14.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hFYvDMhm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/09/image-14.png" alt=""&gt;&lt;/a&gt;HTTPie - Hello World&lt;/p&gt;

&lt;h3&gt;POST&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;https httpbin.org/post name=naveenkumar&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Submit Form&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;https -f httpbin.org/post custname=naveenkumar&amp;amp;custtel=&amp;amp;custemail=&amp;amp;size=small&amp;amp;topping=mushroom&amp;amp;delivery=&amp;amp;comments=&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;View the sent request&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;https -v httpbin.org/post name=naveenkumar&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Download File&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;https https://httpbin.org/image/png &amp;gt; myimage.png&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Upload File&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;https POST https://httpbin.org/post &amp;lt; myimage.png&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Follow Redirect&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;https --follow pie.dev/redirect/4&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Proxy&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;https --proxy=http:http://localhost:3128 --proxy=https:https://localhost:1080 example.net&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Skip HTTPS check&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;https --verify=no https://pie.dev/get&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;SSL Version&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;https --ssl=ssl3 https://example.org&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;View Headers&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;https httpbin.org/get -h&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;View Body&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;https httpbin.org/get -b&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Stream&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;http --stream httpbin.org/stream/3&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have listed only the frequently commands which I use for debugging. Apart from these, HTTPie supports named sessions, wget-like downloads, piping, formatting, resuming downloads, conditional body download, SOCKS, and more.&lt;/p&gt;

&lt;p&gt;Here is the GitHub repo for your reference: https://github.com/httpie/httpie&lt;/p&gt;

&lt;p&gt;HTTPie will be available for the web and desktop soon.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;If you are looking to debug HTTP requests and for cURL alternative, then HTTPie is for you. Easy to learn and get started; comes with powerful features and format options.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>tutorial</category>
      <category>webperf</category>
      <category>webdev</category>
    </item>
    <item>
      <title>CPAN Release of Time::Verbal module</title>
      <author>Kang-min Liu</author>
      <pubDate>Wed, 08 Sep 2021 15:09:37 +0000</pubDate>
      <link>https://dev.to/gugod/cpan-release-of-time-verbal-module-1ecl</link>
      <guid>https://dev.to/gugod/cpan-release-of-time-verbal-module-1ecl</guid>
      <description>&lt;p&gt;&lt;a href="https://metacpan.org/pod/Time::Verbal"&gt;Time::Verbal&lt;/a&gt; 1.1.1 made its way to CPAN.&lt;/p&gt;

&lt;p&gt;This module dose one little things, that is to convert the time differece to a verbal format, rounded to some unit that "makes sense", just as how you would say such thing as a human.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my o = Time::Verbal-&amp;gt;new();
say $o-&amp;gt;distance( time(), time() - 4567 );
#=&amp;gt; about 1 hour
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Besides the default English format, other 67 languages identified by these ISO language codes are supported:&lt;/p&gt;

&lt;p&gt;ar bg bn-IN bs ca cy da de-AT de-CH de dsb el en-AU en-GB en-US eo es-AR es-CL es-CO es-MX es-PE es et eu fa fi fr-CA fr-CH fr fur gl-ES gsw-CH he hi-IN hi hr hsb hu id is it ja ko lo lt lv mk mn nb nl nn pl pt-BR pt-PT rm ro ru sk sl sr-Latn sr sv-SE sw tr uk vi zh-CN zh-TW&lt;/p&gt;

&lt;p&gt;I don't know all these languages (nor their language codes), but &lt;a href="https://metacpan.org/pod/Locale::Wolowitz"&gt;Locale::Wolowiz&lt;/a&gt; does. Or, at least it is the library that does the translation, given a bunch of JSON files that contain the body of translations.&lt;/p&gt;

&lt;p&gt;So here's how you say "about 1 hour" in Vietnamese:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my o = Time::Verbal-&amp;gt;new( "locale" =&amp;gt; "vi" );
say $o-&amp;gt;distance( time(), time() - 4567 );
#=&amp;gt; khoảng 1 giờ
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A default version of translations of all the above-mentioned 68 languages are provided  with &lt;code&gt;Time::Verbal&lt;/code&gt; itself and is ready to use once installed properly -- a usual &lt;code&gt;cpan&lt;/code&gt; or &lt;code&gt;cpanm&lt;/code&gt; or &lt;code&gt;cpm&lt;/code&gt; command would suffice. However, in case some customize version is need because, say, you wish to provide better UX to whom spekas Vulcan variant of Kligon, you need to create a file named after the language code -- which can be arbitrary such as &lt;code&gt;tlh-Vulcan&lt;/code&gt;. You would create &lt;code&gt;tlh-Vulcan.json&lt;/code&gt; and put it under &lt;code&gt;/app/i18n&lt;/code&gt;, or really any directory of your choice, then do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my o = Time::Verbal-&amp;gt;new(
    "locale" =&amp;gt; "tlh-Vulcan",
    "i18n_dir" =&amp;gt; "/app/i18n"
);
say $o-&amp;gt;distance( time(), time() - 4567 );
#=&amp;gt; Chaq wa' rep
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Disclaimer -- I don't know if that's how Volcanized Kligon speaks. Don't take my example as if it is authentic.&lt;/p&gt;

&lt;p&gt;To prepare the translation, take a look of the json files under the default &lt;code&gt;i18n_dir&lt;/code&gt;, which can be printed by running this oneliner:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;perl -MTime::Verbal -E 'say Time::Verbal-&amp;gt;new()-&amp;gt;i18n_dir'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It shouldn't be difficult to grasp the structure of those translation files and produce a new one. It is however, very difficult to start describing the schema of thoes json file as an indolent developer.&lt;/p&gt;

&lt;p&gt;The translations are accquired from &lt;a href="https://github.com/svenfuchs/rails-i18n"&gt;rails-i18n&lt;/a&gt; project -- which is one of the first modules that does things like this.&lt;/p&gt;




&lt;p&gt;Originally posted at &lt;a href="https://gugod.org/2021/09/cpan-release-of-time-verbal/"&gt;https://gugod.org/2021/09/cpan-release-of-time-verbal/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>perl</category>
      <category>cpan</category>
    </item>
    <item>
      <title>Switching accounts in dev.to </title>
      <author>Darsh</author>
      <pubDate>Wed, 08 Sep 2021 15:04:06 +0000</pubDate>
      <link>https://dev.to/programmerno24/switching-accounts-in-dev-to-19o</link>
      <guid>https://dev.to/programmerno24/switching-accounts-in-dev-to-19o</guid>
      <description>&lt;p&gt;Switching account feature is available in G-Mail, Youtube etc &lt;/p&gt;

&lt;p&gt;I want that feature in dev.to&lt;/p&gt;

&lt;p&gt;A quick reply(about when will the work start or it wont start) would be appreciated.&lt;/p&gt;

&lt;p&gt;Thanks for reading my post please press the like and the unicorn button while going.&lt;br&gt;
Thank you&lt;br&gt;
Darsh kulthia&lt;/p&gt;

</description>
      <category>help</category>
      <category>discuss</category>
      <category>accounts</category>
    </item>
    <item>
      <title>Building a client side router in React with event hooks (pt1: events)</title>
      <author>Mike Talbot</author>
      <pubDate>Wed, 08 Sep 2021 14:58:29 +0000</pubDate>
      <link>https://dev.to/miketalbot/building-a-client-side-router-in-react-with-event-hooks-pt1-events-56m7</link>
      <guid>https://dev.to/miketalbot/building-a-client-side-router-in-react-with-event-hooks-pt1-events-56m7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR;
&lt;/h2&gt;

&lt;p&gt;I'm making a pluggable widget component with front end and serverless back end parts.  This article is the first in the series and covers the usage of custom events in React to build a router.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Handling events in React&lt;/li&gt;
&lt;li&gt;Raising custom events&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;I'm embarking on a collaborative project to build a serverless widget for the &lt;a href="https://4c.rocks"&gt;4C&lt;/a&gt; content creator community that I've recently joined.&lt;/p&gt;

&lt;p&gt;The first thing that this project needs is a router on the client side and as I thought I'd use React, the first thing I thought of was React Router.  But then I thought, it's just a client side router and that might make an interesting opportunity to get into the heart of that problem and allow me to understand Routers more.&lt;/p&gt;

&lt;p&gt;There's also a thing about React Router I don't like so much.  I always end up writing a wrapper around it so I can dynamically register routes in a declarative fashion rather than imperatively writing them inside the JSX.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// What I want&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./something-that-declares-routes.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/some/route/:id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SomeComponent&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Rather than&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./something-that-declares-routes.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;declaredRoutes&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./declared-routes.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SomeComponent&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/some/route/:id"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
         &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;declaredRoutes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; 
            &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-router"&gt;
  &lt;/a&gt;
  What is a router?
&lt;/h2&gt;

&lt;p&gt;So ok, what do we want from a router?  We want to be able to specify a pattern of URLs supplied to our app in order to convert them into some function to be called.  The function should also be able to take parameters from a route so:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   /some/:id/route?search&amp;amp;sort
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Calls some registered function or component with the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;search&lt;/code&gt; and &lt;code&gt;sort&lt;/code&gt; parameters from a url like this &lt;code&gt;/some/abc123/route?search=something&amp;amp;sort=name,desc&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/some/:id/route?search&amp;amp;sort&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ShowInfo&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ShowInfo&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="cm"&gt;/* something */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#the-url"&gt;
  &lt;/a&gt;
  The URL
&lt;/h2&gt;

&lt;p&gt;So for routes to work we have to deal with the &lt;code&gt;window.location&lt;/code&gt; object and know when it changes... either because we've navigated ourselves or the user has pressed the &lt;em&gt;Back&lt;/em&gt; or &lt;em&gt;Forward&lt;/em&gt; buttons.&lt;/p&gt;

&lt;p&gt;From the &lt;code&gt;location&lt;/code&gt; we will need to match routes based on the &lt;code&gt;pathname&lt;/code&gt; and extract variables from the &lt;code&gt;pathname&lt;/code&gt; and &lt;code&gt;search&lt;/code&gt; properties to pass to our component.&lt;/p&gt;

&lt;p&gt;The browser gives us an &lt;code&gt;onpopstate&lt;/code&gt; event when the user navigates using the buttons, but there is no event for the navigation to a new URL so we are going to have to deal with that ourselves. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#events"&gt;
  &lt;/a&gt;
  Events
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Let's keep our code simple by faking &lt;code&gt;onpopstate&lt;/code&gt; events when the user navigates around our app using links.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I like events, I use events everywhere in my code to loosely couple components.  We've seen above that we will need to raise and handle events quite frequently so the first step on the journey is to build some tools to aid with that process.  &lt;/p&gt;

&lt;p&gt;In this first part of the article we will create some useful functions to raise and handle events both inside and outside React components.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-plan"&gt;
  &lt;/a&gt;
  The Plan
&lt;/h3&gt;

&lt;p&gt;Because we are working with browser standard events I decided to just press the existing methods on &lt;code&gt;window&lt;/code&gt; into service.  However, I want to be able to pass custom properties to a handler function as additional parameters, rather than creating dozens of custom events, so we will decorate up standard &lt;code&gt;Event&lt;/code&gt; instances with the parameters passed along with the event, we'll do this so we don't accidentally conflict with any standard properties.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#%C2%A0handling-events"&gt;
  &lt;/a&gt;
   Handling events
&lt;/h3&gt;

&lt;p&gt;Our first function is then: one to attach a handler and deal with these extra properties, returning a method to detach the handler later.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;innerHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_parameters&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]))&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;innerHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;innerHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here we create an inner handler that uses a &lt;code&gt;_parameters&lt;/code&gt; property on the event object to pass additional parameters to the handler.&lt;/p&gt;

&lt;p&gt;Turning this into a hook for React is then child's play:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;useLayoutEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#raising-events"&gt;
  &lt;/a&gt;
  Raising events
&lt;/h3&gt;

&lt;p&gt;Writing a function to raise these events with custom parameters is also pretty easy:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;raise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_parameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Note how we return the first parameter - that's an Inversion of Control helper, we might be raising events looking for return values, and this gives us an easy way of doing that.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;get-stuff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I'm here&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="nx"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;get-stuff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Another choice&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;stuff&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;raise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;get-stuff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stuff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;By returning the first parameter we write a lot less boilerplate.&lt;/p&gt;

&lt;p&gt;When we are working with events like &lt;code&gt;onPopState&lt;/code&gt; we also want to decorate the event object with parameters (like the &lt;code&gt;state&lt;/code&gt; for the &lt;code&gt;location&lt;/code&gt;) so we do need another function to deal with this circumstance, that we will use every now and again:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;raiseWithOptions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_parameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This one is very similar, just it decorates the custom event with the options object passed in.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#bonus-redrawing-things-when-events-happen"&gt;
  &lt;/a&gt;
  Bonus: Redrawing things when events happen
&lt;/h2&gt;

&lt;p&gt;We may well want to get our React components to redraw based on events that have changed some global state.  There's an easy way to do that with a &lt;code&gt;useRefresh&lt;/code&gt; hook that can either cause a refresh or register a function that will refresh after a sub function is called.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useRefresh&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;refreshFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;subParams&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;](...&lt;/span&gt;&lt;span class="nx"&gt;subParams&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="nx"&gt;refreshFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="c1"&gt;// eslint-disable-next-line react-hooks/exhaustive-deps&lt;/span&gt;
        &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;refreshFunction&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This creates us a utility function that causes React to redraw the component.  It's handy for lots of things but here we can just use it to do a refresh on an event:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;refresh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRefresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="nx"&gt;useEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;onPopState&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;useRefresh&lt;/code&gt; function takes a list of other functions to call.  This is sometimes useful, especially for debugging&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;refresh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRefresh&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Redrawing X&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And the returned function can be made to wrap a refresh around something:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;refresh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRefresh&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
     &lt;span class="c1"&gt;// do something with global state on window.location.search&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;?x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Set X&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this first part we've seen how to easily raise and handle events in React.  Below is the running widget that uses these techniques.  &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/miketalbot"&gt;
        miketalbot
      &lt;/a&gt; / &lt;a href="https://github.com/miketalbot/cccc-widget"&gt;
        cccc-widget
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/n4dpo?initialpath=/BIr6y6QZhjz1fEJ-h4wJ_/embed&amp;amp;runonclick=0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>A Ridiculously Simple Way For Creating Responsive Web Apps</title>
      <author>Domagoj Vidovic</author>
      <pubDate>Wed, 08 Sep 2021 14:34:15 +0000</pubDate>
      <link>https://dev.to/domagojvidovic/a-ridiculously-simple-way-for-creating-responsive-web-apps-1f43</link>
      <guid>https://dev.to/domagojvidovic/a-ridiculously-simple-way-for-creating-responsive-web-apps-1f43</guid>
      <description>&lt;p&gt;I remember my first encounter with responsive design. Before any investigation, it seemed incredibly complex.&lt;/p&gt;

&lt;p&gt;The same app runs and behaves differently based on so many types of user devices?&lt;/p&gt;

&lt;p&gt;I have to cover all the screen sizes, from ultra-wide monitors, over laptop and tablet devices, all the way to the smartphones?&lt;/p&gt;

&lt;p&gt;Mate, that must be a nightmare.&lt;/p&gt;

&lt;p&gt;But honestly, it isn't. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Responsive design is nothing more than a bunch of &lt;code&gt;if&lt;/code&gt; statements.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's dive deeper into the topic.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#two-types-of%C2%A0design"&gt;
  &lt;/a&gt;
  Two Types of Design
&lt;/h2&gt;

&lt;p&gt;Depending on what you create, you have two choices:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Mobile-First Design&lt;/li&gt;
&lt;li&gt;Desktop-First Design&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Mobile-First Design means that you first design and create software for mobile devices, and then extend it to desktop devices.&lt;/p&gt;

&lt;p&gt;It assures that your core functionality will be available on a mobile device.&lt;/p&gt;

&lt;p&gt;It's easy to add more functionality on the bigger screen, but it's hard to strip away functionality and keeping the core while going to a smaller screen.&lt;/p&gt;




&lt;p&gt;According to this &lt;a href="https://www.perficient.com/insights/research-hub/mobile-vs-desktop-usage"&gt;research&lt;/a&gt;, 68.9% of websites visit came from mobile devices.&lt;/p&gt;

&lt;p&gt;If you're creating a consumer app, Mobile-First Design is likely to be your choice.&lt;/p&gt;

&lt;p&gt;Complex B2B solutions require Desktop-First Design, and sometimes don't even have a fully functioning mobile solution - they're just too complex.&lt;/p&gt;

&lt;p&gt;That's why I'll focus on Mobile-First Design in this article.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-design"&gt;
  &lt;/a&gt;
  The Design
&lt;/h2&gt;

&lt;p&gt;We'll keep this simple. Let's say that you have a number of items you want to display on your feed. It will look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3pXBS3i4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wb86405qvl0ah46jo30.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3pXBS3i4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wb86405qvl0ah46jo30.png" alt="Mobile design"&gt;&lt;/a&gt;&lt;/p&gt;
Mobile design



&lt;p&gt;We have two components here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Parent component, &lt;code&gt;container&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Child components, &lt;code&gt;items&lt;/code&gt; &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If we ignore the CSS code for everything except the layout, it will look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Item 1&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Item 2&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Item 3&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;align-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex-start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="py"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;88px&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Can you see the meta tag, &lt;code&gt;&amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;It's incredibly important and there's no responsive design without it. Without it, your browser won't know the initial zoom and it will look really bad on mobile devices.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#doing-the-magic-to-make-the-desktop%C2%A0work"&gt;
  &lt;/a&gt;
  Doing the Magic to Make the Desktop Work
&lt;/h2&gt;

&lt;p&gt;Just joking, this is no complex magic. As I've said, just a bunch of if statements!&lt;/p&gt;

&lt;p&gt;We're trying to spread the items, keeping 3 of them in each row:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u48lW3FJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6qtz8vetlsnyj2ttfftl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u48lW3FJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6qtz8vetlsnyj2ttfftl.png" alt="Desktop design"&gt;&lt;/a&gt;&lt;/p&gt;
Desktop design



&lt;p&gt;The code looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Item 1&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Item 2&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Item 3&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;align-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex-start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="py"&gt;gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;88px&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;992px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're finally here, introducing &lt;code&gt;@media&lt;/code&gt; queries. &lt;/p&gt;

&lt;p&gt;Let's read this in a simple, already familiar way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (screen width is bigger or equal than 992px) {
    apply styles in the same way as before
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it! Nothing more than this! The styles here will affect only screens wider than &lt;code&gt;992px&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-about%C2%A0tablet"&gt;
  &lt;/a&gt;
  How About Tablet?
&lt;/h2&gt;

&lt;p&gt;You can combine media queries with logical operators. &lt;/p&gt;

&lt;p&gt;Yep, you can do something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;768px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;991px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;styles&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And those styles will affect everything in range from &lt;code&gt;768px&lt;/code&gt; to &lt;code&gt;991px&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Remember, this is nothing more than an if statement.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-cover-all%C2%A0devices"&gt;
  &lt;/a&gt;
  How to Cover All Devices
&lt;/h2&gt;

&lt;p&gt;Media queries are much more than just &lt;code&gt;min-width&lt;/code&gt; and &lt;code&gt;max-width&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can check stuff like &lt;code&gt;orientation&lt;/code&gt;, &lt;code&gt;aspect-ratio&lt;/code&gt;, and much more.&lt;/p&gt;

&lt;p&gt;You can use logical operators like &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;, and all the others.&lt;/p&gt;

&lt;p&gt;But to be honest, what you've read in this article is enough for an amazing and simple start.&lt;/p&gt;

&lt;p&gt;You probably won't need most of the other queries anyway. Maybe in some rare scenarios. By then, your knowledge about queries will be so powerful that complex queries will be a joke!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Check out the bottom of &lt;a href="https://domagojvidovic.medium.com/a-ridiculously-simple-way-for-creating-responsive-web-apps-c640f9814613"&gt;the originally published article on Medium&lt;/a&gt; for the best course around responsive web.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Reducing AWS Lambda cost: tried and tested strategies</title>
      <author>Taavi Rehemägi</author>
      <pubDate>Wed, 08 Sep 2021 14:21:23 +0000</pubDate>
      <link>https://dev.to/dashbird/reducing-aws-lambda-cost-tried-and-tested-strategies-4146</link>
      <guid>https://dev.to/dashbird/reducing-aws-lambda-cost-tried-and-tested-strategies-4146</guid>
      <description>&lt;p&gt;In 2021 it's common practice for businesses to use a pay-as-you-go/use pricing model. It's no different with Amazon. It's also the primary reason why this article is such an important read for all those looking to reduce their AWS Lambda costs.&lt;/p&gt;

&lt;p&gt;In this article, we will go over some actionable strategies to optimize the cost relating to our AWS Lambda usage.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-aws-cost-optimization"&gt;
  &lt;/a&gt;
  What is AWS Cost Optimization?
&lt;/h1&gt;

&lt;p&gt;One of the &lt;a href="https://dashbird.io/blog/business-benefits-of-serverless/"&gt;main reasons&lt;/a&gt; for choosing to move into the cloud is the ability to reduce costs. It's essential to optimize how much you spend, so you only pay for what you need and only when you need it. Optimizing costs will help your organization get the most out of your investment, helping meet demand and capacity while using the most economically useful options that AWS has to offer.&lt;/p&gt;

&lt;p&gt;Cost optimization allows you to decide how much, when, and in which cases you'll pay for the service provided to you. AWS will allow you to easily pick the right size for your service and leverage memory size based on how much you need.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#aws-lambda-cost-optimization"&gt;
  &lt;/a&gt;
  AWS Lambda Cost Optimization
&lt;/h1&gt;

&lt;p&gt;AWS Lambda uses a pay-per-use billing model, where you are billed only for the time your functions are running. The more your function runs, the more you pay. This model forever changes the relationship between application code and infrastructure costs. The hardware is automatically provisioned when needed and billed accordingly. There is no need to overprovision servers to cope with peak load.&lt;/p&gt;

&lt;p&gt;As a result, traditional tools designed to monitor resource usage are of no practical use. Instead, it is necessary to track application-level metrics like response time, memory utilization, and batch size to control infrastructure costs. To put it in a few words, the infrastructure costs and application performance are strongly linked.&lt;/p&gt;

&lt;p&gt;It might look straightforward but, there's a big risk hidden here. Because AWS Lambda is very cheap to get started with, it lures developers to forget about the infrastructure costs during the development phase. At the end of the month, you will end up getting an unpleasant surprise in the form of a significant bill.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-aws-lambda-pricing-works"&gt;
  &lt;/a&gt;
  How AWS Lambda Pricing Works
&lt;/h1&gt;

&lt;p&gt;For each Lambda function, you can set the maximum memory size and maximum function execution time. For the moment, keep in mind that the maximum memory size impacts the processing power (CPU) allocated. The more memory you provision, the more CPU your function gets.&lt;/p&gt;

&lt;p&gt;Lambda functions run only when triggered, and Amazon uses several indicators to calculate the cost of running your Lambda function:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  number of executions&lt;/li&gt;
&lt;li&gt;  duration in milliseconds&lt;/li&gt;
&lt;li&gt;  memory size --- the value set in the function configuration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For each invocation, the duration and memory size are multiplied to produce a unit called GB-sec. Although it might seem simple, the practice has shown that GB-sec is not a very intuitive concept. To help you get an idea of the costs of your function, try this AWS Lambda cost calculator.&lt;/p&gt;

&lt;p&gt;To whet your appetite, Amazon provides a monthly free tier of 400,000 GB-sec, but you will soon learn that your AWS Lambda will cost you lots of money if you don't optimize your costs early in the development process.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For a better overview, you can use tools like Dashbird &lt;a href="https://dashbird.io/aws-lambda-monitoring/"&gt;AWS Lambda function cost tracking tool&lt;/a&gt; that will allow you to monitor the cost of your Lambdas in real-time with detailed insights. That way, you'll always be on top of how much you're spending on this service.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#monitoring-aws-lambda-functions"&gt;
  &lt;/a&gt;
  Monitoring AWS Lambda Functions
&lt;/h1&gt;

&lt;p&gt;To start optimizing your AWS Lambda costs, you have to set up a monitoring system in the first place. Amazon automatically sends logs to &lt;a href="https://dashbird.io/blog/configuring-cloudwatch-alarms-with-aws-lambda/"&gt;CloudWatch&lt;/a&gt;, where you can view the basic metrics. But CloudWatch is not good at providing key details on the execution of your functions. Here Dashbird comes to help by providing time-series metrics for invocation counts, durations, memory usage, and costs. For a more in-depth comparison between CloudWatch and Dashbird serverless monitoring, see &lt;a href="https://dashbird.io/blog/cloudwatch-vs-dashbird/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#constant-monitoring-is-essential"&gt;
  &lt;/a&gt;
  Constant Monitoring is Essential
&lt;/h1&gt;

&lt;p&gt;Software projects are constantly changing, which makes cost optimization a moving target. For that reason, it's important to have proper monitoring and alerting when our financial policies are not met so that we can act upon these incidents and fix them before they become a financial nightmare.&lt;/p&gt;

&lt;p&gt;AWS offers spending alerts and expenditure information, but not on the granular level of a Lambda function, for example.&lt;/p&gt;

&lt;p&gt;With services like &lt;a href="https://dashbird.io/"&gt;Dashbird&lt;/a&gt;, you can set custom policies for one or more functions with very granular details. The example below will send an email and Slack message whenever the selected functions cost more than $10 over the past hour.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h1qqETQp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AuHHudRLMuS29a_7J" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h1qqETQp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AuHHudRLMuS29a_7J" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#strategies-for-optimizing-aws-lambda-costs"&gt;
  &lt;/a&gt;
  Strategies for optimizing AWS Lambda Costs
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#minimize-lambda-usage"&gt;
  &lt;/a&gt;
  Minimize Lambda Usage
&lt;/h1&gt;

&lt;p&gt;Don't use Lambda functions for simple transforms. If you're building an API with AppSync or API Gateway, this is often the case. You implemented authentication Cognito and custom authorizers in your API Gateway and now just want to push data directly to upstream services like DynamoDB or SQS.&lt;/p&gt;

&lt;p&gt;API Gateway supports the Velocity Templating Language, a simple programming language that can transform the JSON objects of API Gateway requests. They can't do everything, but they neither have &lt;a href="https://dashbird.io/knowledge-base/aws-lambda/cold-starts/"&gt;cold-starts&lt;/a&gt; nor incur extra costs as Lambda functions do.&lt;/p&gt;

&lt;p&gt;Keep in mind that optimizing with VTL is not too straightforward, but it can be worth your time if you have frequently called endpoints that don't require the full power of Lambda. Richard Boyd, a developer relations engineer at AWS, &lt;a href="https://richardhboyd.com/post/mastering-api-gateway-in-105-easy-steps_ByIgiAUPV"&gt;wrote a bit on that topic&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#caching-lambda-responses"&gt;
  &lt;/a&gt;
  Caching Lambda Responses
&lt;/h1&gt;

&lt;p&gt;Caching goes hand in hand with minimizing the use of Lambda functions. When you have to use one, try to make sure it's only called when it's really needed.&lt;/p&gt;

&lt;p&gt;For some Lambda functions, like the ones called from &lt;a href="https://dashbird.io/knowledge-base/api-gateway/what-is-aws-api-gateway/"&gt;API Gateway&lt;/a&gt;, AppSync, or Lambda@Edge functions called from CloudFront, you can cache responses. A function that isn't called doesn't cost you any money, so make sure you don't hammer your Lambda function if its responses don't change often.&lt;/p&gt;

&lt;p&gt;Lambda@Edge functions are more expensive than regular Lambda functions. Still, if you only call them once every few minutes and deliver the cached response to thousands of users per second, you can significantly reduce your bill.&lt;/p&gt;

&lt;p&gt;One benefit of caching is cheaper responses because you don't pay for Lambda. Another benefit is that you'll see faster responses because you remove the extra way the request would have to travel if Lambda was involved.&lt;/p&gt;

&lt;p&gt;In the business sense, this could also uplift revenue by providing a better experience for the end-user. Lambda cost optimization means you not only reduce costs, but implementations could end up driving more revenue.&lt;/p&gt;

&lt;p&gt;To enable caching for API Gateway deployed with AWS SAM, you can use the MethodSettings attribute.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wtsgrJ6M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2A_NntxCXBHX35PSqW3Ov_9g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wtsgrJ6M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2A_NntxCXBHX35PSqW3Ov_9g.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use the &lt;code&gt;*&lt;/code&gt; wildcard in &lt;code&gt;HttpMethod&lt;/code&gt; and &lt;code&gt;ResourcePath&lt;/code&gt; to configure caching for multiple routes in your API.&lt;/p&gt;

&lt;p&gt;For copyable code snippets, &lt;a href="https://dashbird.io/blog/aws-lambda-cost-optimization-strategies/"&gt;see the original article published here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#utilize-queues-to-batch-lambda-invocations"&gt;
  &lt;/a&gt;
  Utilize Queues to Batch Lambda Invocations
&lt;/h1&gt;

&lt;p&gt;Batching data is a good idea for Lambda functions that work in the background and aren't directly related to user interactions.&lt;/p&gt;

&lt;p&gt;One of the most overlooked aspects is that AWS Lambda cold-starts happen for each concurrent execution. Therefore, as a first step in optimizing your costs, ensure that the functions are executed with the best frequency to avoid cold starts as much as possible.&lt;/p&gt;

&lt;p&gt;This can be achieved by using one of AWS' many queuing services like SQS or Kinesis. Don't call your function directly, but send the data to a queue to batch it accordingly.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#build-small-lambda-functions"&gt;
  &lt;/a&gt;
  Build Small Lambda Functions
&lt;/h1&gt;

&lt;p&gt;The goal of all your AWS Lambda function is to be small and purpose-built. If a Lambda function only does one thing, you only have to optimize this specific use case. When you end up with multiple use-cases for one function, you can end up making compromises to satisfy all of them.&lt;/p&gt;

&lt;p&gt;Function size is also part of the costs. The Lambda runtime has to get your function's code from S3 or a Docker image registry on every cold start. Downloading one gigabyte takes Lambda much more time than downloading one megabyte. This is the waiting time you pay for.&lt;/p&gt;

&lt;p&gt;Since 2021 Lambda functions are billed in one millisecond increments, you can now save money for every millisecond your function runs faster. So getting your Lambda code down to the absolute basics can increase your savings for functions that run very often.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#optimize-memory-allocation"&gt;
  &lt;/a&gt;
  Optimize Memory Allocation
&lt;/h1&gt;

&lt;p&gt;After you made sure you only call functions when needed and kept them all small and purpose-built, you're enabled to control your AWS cost by following a few straightforward steps.&lt;/p&gt;

&lt;p&gt;First off, we'll mention choosing the right size, which means that with AWS, you can set the memory, and in turn CPU, of your AWS Lambda functions to meet precisely the necessary capacities that you need.&lt;/p&gt;

&lt;p&gt;There's no need to over-provision or make compromises. Adapt your services to address the actual business needs at any given time, without any penalties or hidden fees whatsoever. AWS allows you to choose between services that meet your criteria, and while your demands change, it is quite easy to switch to the service option which will cover your new requirements. AWS also allows you to run multiple service options simultaneously, helping you reduce costs while maintaining optimal performance at all times.&lt;/p&gt;

&lt;p&gt;Another way would be utilizing Step-Functions to find the optimal memory capacity for your functions. &lt;a href="https://github.com/alexcasalboni/aws-lambda-power-tuning"&gt;Here's an open-source module&lt;/a&gt; built by Sr. Tech. Evangelist Alex Casalboni of AWS.&lt;/p&gt;

&lt;p&gt;AWS doesn't allow us to customize CPU for Lambda functions, but the more memory we allocate, the more computing power we get... and the faster our functions will execute our code! This can actually reduce the total execution cost.&lt;/p&gt;

&lt;p&gt;There are a few caveats to this strategy, though. For example: over 2 GB of RAM, Lambda will allocate a second vCPU to the function. In this case, single-threaded programs won't see any speed gains from increasing memory. &lt;a href="https://dev.to/byrro/how-to-optimize-lambda-memory-and-cpu-4dj1"&gt;Take a look at this article&lt;/a&gt; if you'd like to explore more about how Lambda's memory and CPU allocation work under the hood.&lt;/p&gt;

&lt;p&gt;Below is an illustration of the strategy: when we increased memory from about 1.8 GB to 2 GB, it decreased the total billed duration from 600 to 500 milliseconds. Although the memory cost is higher, the lower duration offsets the additional memory cost, rendering an effective 5% cost reduction. And we even have the extra benefit of lower latency.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--USgsSccw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1220/0%2AVsJe3eroFVg-t-_i" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--USgsSccw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1220/0%2AVsJe3eroFVg-t-_i" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We published &lt;a href="https://medium.com/hackernoon/lower-your-aws-lambda-bill-by-increasing-memory-size-yep-e591ae499692"&gt;a sample benchmarker&lt;/a&gt; on &lt;a href="https://github.com/byrro/awslambda-memory-tradeoff"&gt;this Github repository&lt;/a&gt;, which you can plug into any of your Lambda functions to emulate requests and find the memory sweet spot.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#use-variables-as-a-local-cache"&gt;
  &lt;/a&gt;
  Use Variables as a Local Cache
&lt;/h1&gt;

&lt;p&gt;The Lambda internal memory can be used as a cheap and fast caching mechanism. Anything loaded outside the handler function remains in memory for the next invocations.&lt;/p&gt;

&lt;p&gt;We can keep a copy of information retrieved from a database inside a global variable so that the data can be pulled from the Lambda internal memory in future requests.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/leveraging-lambda-cache-for-serverless-cost-efficiency/"&gt;This article&lt;/a&gt; we published, illustrates this with a couple of basic examples and covers a few points to pay attention to when implementing this strategy.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#never-call-lambda-directly-from-lambda"&gt;
  &lt;/a&gt;
  Never Call Lambda Directly from Lambda
&lt;/h1&gt;

&lt;p&gt;Again, this is most important for synchronous Lambda calls, which happen with API Gateway.&lt;/p&gt;

&lt;p&gt;If you call a Lambda function directly from within a Lambda function, you pay for both of them. The first one will wait for the second one to finish, and you'll be paying for the waiting time.&lt;/p&gt;

&lt;p&gt;If you need to call multiple Lambda functions, finish the synchronous API Gateway Lambda function early, and start running the other functions with some extra service.&lt;/p&gt;

&lt;p&gt;AWS has multiple queuing services to offer. SQS, SNS, Kinesis, and &lt;a href="https://dashbird.io/blog/ultimate-guide-aws-step-functions/"&gt;Step Functions&lt;/a&gt; are a few of them. When the heavy task is done, you can notify the clients with WebSockets or email.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#reduce-cloudwatch-costs"&gt;
  &lt;/a&gt;
  Reduce CloudWatch Costs
&lt;/h1&gt;

&lt;p&gt;Lambda will send all logging data to CloudWatch Logs. This service is beneficial, but it isn't free. If you're logging in excessively, the CloudWatch costs can end up eating your Lambda savings.&lt;/p&gt;

&lt;p&gt;Use configurable log levels for your Lambda functions, so you can debug them when needed, but don't log unrequired data all the time. Logging frameworks allow setting log levels dynamically.&lt;/p&gt;

&lt;p&gt;You can enable access logs for AWS API-Gateway and AppSync, which then will be sent to CloudWatch Logs. Make sure you filter out request fields you don't need.&lt;/p&gt;

&lt;p&gt;CloudWatch Logs keeps your Lambda logs forever by default, but you can configure it to send log archives to S3 Glacier and then delete it from CloudWatch to save money.&lt;/p&gt;

&lt;p&gt;And last but not least, you can set up filtered subscriptions that will send your logs to third-party monitoring services like Dashbird.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cost-reduction-with-observability"&gt;
  &lt;/a&gt;
  Cost Reduction with Observability
&lt;/h1&gt;

&lt;p&gt;With a proper &lt;a href="https://dashbird.io/serverless-observability/"&gt;serverless observability system&lt;/a&gt; in place, your company will for sure minimize the risks that inherently come with serverless architectures. You will also have a way to manage the budget predictably, in a way that complies with policies that require commitments on a long-term basis.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I0HwrMri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2Ae2uzDy5uuDPMycDN" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I0HwrMri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2Ae2uzDy5uuDPMycDN" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Dashbird single function view&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This would include monitoring, tracking, analyzing, and alerting your service usage. With a trusted advisor, you can provision your resources by keeping up with the best possible practices to improve system performance and reliability.&lt;/p&gt;

&lt;p&gt;It will also increase security and give you opportunities to save some money. CloudWatch is an option that (in case you decide to turn off non-production functions) will allow you to match increases or reductions in demand. It will collect and track the metrics, monitor log files, and automatically respond to any changes made within your AWS resources.&lt;/p&gt;

&lt;p&gt;But it doesn't give you full insight into your system or instant alerts when things break. For that, you need a tool that will alert you instantly when your system is misbehaving. Dashbird is such a tool that gives you &lt;a href="https://dashbird.io/aws-lambda-monitoring/"&gt;insights into your Lambda functions&lt;/a&gt;, all in one place.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fEvYVuNz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AlMuhryevx9MJR4kX" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fEvYVuNz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AlMuhryevx9MJR4kX" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are other ways to reduce cost and optimize it for your own needs. &lt;a href="https://dashbird.io/"&gt;Dashbird&lt;/a&gt;'s Cost Explorer can help you with analyzing your usage and cost. It is a magnificent tool that allows you to use a set of default reports to identify cost drivers and usage trends. Dashbird's own cost tracking system, which you can see on an account-wide scale or per-function basis, also gives you a real-time presentation of how much your services are costing you.&lt;/p&gt;

&lt;p&gt;There are various choices to make and strategies to reduce costs and optimize them for your own needs. The essential thing you need to realize is discovering which of the given approaches best suits your personal needs. After finding out what you need, it'll be easier to choose a more personalized way to reduce costs.&lt;/p&gt;

&lt;p&gt;Further reading:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/lambda-metrics-monitoring-what-matters/"&gt;AWS Lambda metrics that you should be monitoring&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/optimizing-aws-lambda-for-production/"&gt;4 tips for tuning AWS Lambda for production&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/saving-money-aws-lambda/"&gt;Quick ways to cut cost on your AWS Lambda&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>devops</category>
      <category>cloud</category>
    </item>
    <item>
      <title>September 2021: Azure SQL News Update</title>
      <author>Anna Hoffman</author>
      <pubDate>Wed, 08 Sep 2021 14:15:31 +0000</pubDate>
      <link>https://dev.to/azure/september-2021-azure-sql-news-update-4fim</link>
      <guid>https://dev.to/azure/september-2021-azure-sql-news-update-4fim</guid>
      <description>&lt;p&gt;Today and every Wednesday Data Exposed goes live at 9AM PT on &lt;a href="https://docs.microsoft.com/en-us/learn/tv/"&gt;LearnTV&lt;/a&gt;. Every 4 weeks, we’ll do a News Update. We’ll include product updates, videos, blogs, etc. as well as upcoming events and things to look out for. We’ve included an &lt;a href="https://bit.ly/2WtkHbm"&gt;iCal file&lt;/a&gt;, so you can add a reminder to tune in live to your calendar. If you missed the episode, you can find them all at &lt;a href="https://aka.ms/AzureSQLYT"&gt;https://aka.ms/AzureSQLYT&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can read this blog to get all the updates and references mentioned in the show. Here’s the September  2021 update:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Product updates&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This month did not contain a ton of product-specific updates, however there is one that we highlighted on the show – the Public Preview announcement of the Azure SQL Migration extension in Azure Data Studio! For those of you that follow Data Exposed, &lt;a href="https://youtu.be/Quh8Ge3y3X0"&gt;you may have seen this already, Rajesh Setlem gave us a sneak peek&lt;/a&gt;. As part of this Public Preview announcement, the extension will support migrations for both online (for migrations that require minimal downtime) and offline (for migrations where downtime persists through the duration of the migration) modes. You can use the extension to migrate to either Azure SQL Managed Instance or SQL Server on Azure VMs. Mohamed Kabiruddin came on the show to tell us all about what this means and how it works. For more information, check the documentation (&lt;a href="https://aka.ms/azuresqlmigrationextension"&gt;https://aka.ms/azuresqlmigrationextension&lt;/a&gt;) or the release blog (&lt;a href="https://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Faka.ms%2Fazuresqladsmigration&amp;amp;data=04%7C01%7CAnna.Hoffman%40microsoft.com%7Cca60d1a4c9e5435d047008d969a890db%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C637656995131785772%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&amp;amp;sdata=RkzQxaluxw%2F0ixJMaVbjlB5tpIrxnXcEkTZ6ka3CN7k%3D&amp;amp;reserved=0"&gt;https://aka.ms/azuresqladsmigration&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Not really a product update, but some serious product speed! We had SQL community member Henk van der Valk, founder of &lt;a href="https://www.fulldata.nl/"&gt;FullData&lt;/a&gt;, on the show to talk about ways to maximize performance of SQL Server running on Azure VMs. And when I say maximizing performance … I mean breaking world records, so this was a cool segment. You can see his full blog on the topic &lt;a href="https://www.fulldata.nl/blog/"&gt;here&lt;/a&gt; and you can contact Henk at &lt;a href="//mailto:info@fulldata.nl"&gt;info@fulldata.nl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Last but certainly not least, we had Niko Neugebaur on the show to talk about a blog series on &lt;a href="https://techcommunity.microsoft.com/t5/azure-sql/bg-p/AzureSQLBlog"&gt;Azure SQL Techcommunity&lt;/a&gt; where he breaks down fundamentals to understanding Azure SQL Managed Instance. I’ve really enjoyed getting hands on and following the blog series; last month Niko was featured as my pick of the month! You can find all the blogs at &lt;a href="https://aka.ms/sqlmi-howto"&gt;https://aka.ms/sqlmi-howto&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Videos&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We continued to release new and exciting Azure SQL episodes this month. Here is the list, or you can just see the &lt;a href="https://microsoft.sharepoint.com/teams/SQLServerAdoption/Shared%20Documents/YouTube/Data%20Exposed%20News%20Blogs/aka.ms/dataexposedyt"&gt;playlist&lt;/a&gt; we created with all the episodes!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  [MVP Edition] Taiob Ali: Managing SQL Server Agent jobs with Notebook Jobs in Azure Data Studio&lt;/li&gt;
&lt;li&gt;  Alexandra Ciortea and Steven Marturano: Migrating to SQL: New Conversion Reports in SSMA (Ep. 7)&lt;/li&gt;
&lt;li&gt;  Pam Lahoud: Azure SQL VM: Get the best price-performance for your SQL Server workloads on Azure VM (Ep. 4)&lt;/li&gt;
&lt;li&gt;  David Pless: Azure SQL VM: Use Azure Monitor to Track VM Cache Health (Ep. 3)&lt;/li&gt;
&lt;li&gt;  Pam Lahoud: Azure SQL VM: What is SQL Server IaaS Extension (Ep. 2)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ve also had some great Data Exposed Live sessions. Subscribe to our &lt;a href="https://aka.ms/azuresqlyt"&gt;YouTube channel&lt;/a&gt; to see them all and get notified when we stream. Here are some of the recent live streams.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Deep Dive: Why and How Customers are Using Azure SQL Hyperscale, Denzil Ribeiro and Davide Mauri&lt;/li&gt;
&lt;li&gt;  Azure SQL Security: Network Security (Ep. 4), Rohit Nayak&lt;/li&gt;
&lt;li&gt;  Azure Data Studio Power Hour, Alan Yu, Drew Skwiers-Koballa, Julie Koesmarno, Udeesha Gautam, and Vasu Bhog&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Blogs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As always, our team is busy writing blogs to share with you all. Blogs contain announcements, tips and tricks, deep dives, and more. Here’s the list I have of SQL-related topics you might want to check out.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Azure Blog, data-related

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://azure.microsoft.com/en-us/blog/microsoft-named-a-leader-in-the-forrester-wave-streaming-analytics-q2-2021/"&gt;Microsoft named a Leader in The Forrester Wave™: Streaming Analytics, Q2 2021&lt;/a&gt;, Jean-Sebastien Brunner&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://azure.microsoft.com/en-us/blog/discover-and-assess-aspnet-apps-atscale-with-azure-migrate/"&gt;Discover and assess ASP.NET apps at-scale with Azure Migrate&lt;/a&gt;, Vineet Vikram&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://azure.microsoft.com/en-us/blog/innovate-securely-with-azure/"&gt;Innovate securely with Azure&lt;/a&gt;, Scott Woodgate&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://azure.microsoft.com/en-us/blog/azure-government-top-secret-now-generally-available-for-us-national-security-missions/"&gt;Azure Government Top Secret now generally available for US national security missions&lt;/a&gt;, Tom Keane&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://azure.microsoft.com/en-us/blog/accelerate-application-modernization-with-azure-migrate-app-containerization/"&gt;Accelerate application modernization with Azure Migrate: App Containerization&lt;/a&gt;, Rahul Gupta&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://azure.microsoft.com/en-us/blog/5-reasons-to-attend-the-azure-data-governance-digital-event/"&gt;5 reasons to attend the Azure data governance digital event&lt;/a&gt;, Cindy Na&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;  SQL Server Tech Community

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://techcommunity.microsoft.com/t5/sql-server/released-microsoft-data-sqlclient-4-0-preview-1/ba-p/2685322"&gt;Released: Microsoft.Data.SqlClient 4.0 Preview 1&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://techcommunity.microsoft.com/t5/sql-server/sql-server-3rd-party-backend-for-django-v1-0-released/ba-p/2654239"&gt;SQL Server 3rd Party Backend for Django v1.0 Released&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;  Microsoft SQL Server Blog

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://cloudblogs.microsoft.com/sqlserver/2021/08/30/move-sql-server-licenses-without-software-assurance-to-azure/"&gt;Move SQL Server licenses without Software Assurance to Azure&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://cloudblogs.microsoft.com/sqlserver/2021/08/24/microsoft-at-data-platform-virtual-summit-2021/"&gt;Microsoft at Data Platform Virtual Summit 2021&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;  Azure SQL Tech Community

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://techcommunity.microsoft.com/t5/azure-sql/improved-columnstore-data-loading-using-query-store-hints/ba-p/2704677"&gt;Improved columnstore data loading using Query Store hints&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://techcommunity.microsoft.com/t5/azure-sql/azure-sql-managed-instance-introduction-to-sqlmiops/ba-p/2687265"&gt;Azure SQL Managed Instance – introduction to #SQLMIOPS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://techcommunity.microsoft.com/t5/azure-sql/how-to-determine-the-timestamp-of-the-last-sql-mi-failover/ba-p/2670361"&gt;How-to determine the timestamp of the last SQL MI failover&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://techcommunity.microsoft.com/t5/azure-sql/learn-how-azure-sql-works-with-azure-purview-on-at-the-azure/ba-p/2645462"&gt;Learn how Azure SQL works with Azure Purview on at the Azure Data Governance event on September 28&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://techcommunity.microsoft.com/t5/azure-sql/how-to-find-out-reserved-and-available-disk-space-on-sql-mi/ba-p/2636930"&gt;Reserved &amp;amp; available Disk Space information for Azure SQL MI&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;  Azure SQL Devs’ Corner

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://devblogs.microsoft.com/azure-sql/launch-build-serverless-full-stack-applications-in-azure/"&gt;LAUNCH: Build serverless, full stack applications in Azure&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Azure Database Support (SQL-related posts)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://techcommunity.microsoft.com/t5/azure-database-support-blog/troubleshooting-azure-active-directory-integrated-authentication/ba-p/2670162"&gt;Troubleshooting Azure Active Directory Integrated Authentication in Azure SQL&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://techcommunity.microsoft.com/t5/azure-database-support-blog/restore-database-across-servers-azure-sql-database-and-azure-sql/ba-p/2636181"&gt;Restore database across servers(Azure SQL Database and Azure SQL managed instance)- Azure Automation&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://techcommunity.microsoft.com/t5/azure-database-support-blog/database-parameterization/ba-p/2672647"&gt;Database Parameterization&lt;/a&gt;&lt;span&gt;  &lt;/span&gt;&lt;/p&gt;


&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Upcoming events&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As always, there are a lot of events coming up this month. Here are a few to put on your calendar and register for from the Azure Data team:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;September 13-18:&lt;/strong&gt; &lt;a href="https://dataplatformgeeks.com/dps2021/microsoft-at-dps/"&gt;Data Platform Summit 2021&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;September 13-23:&lt;/strong&gt; &lt;a href="https://azuresummit.live/"&gt;Cloud Summit 2021&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;September 15&lt;/strong&gt;: &lt;a href="https://musiccitytech.com/"&gt;Music City Tech 2021&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;September 15:&lt;/strong&gt; &lt;a href="https://www.redhat.com/en/events/webinar/lower-sql-server-costs-with-operational-efficiencies"&gt;RedHat Webinar&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;September 16:&lt;/strong&gt; &lt;a href="https://www.meetup.com/cloud-data-driven/events/276201694"&gt;Cloud Data Driven User Group&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;September 28:&lt;/strong&gt; &lt;a href="https://azuredatagovernance.eventcore.com/auth/login"&gt;Maximize the Value of Your Data in the Cloud Digital event&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;September 29:&lt;/strong&gt; &lt;a href="https://datadrivencommunity.com/"&gt;Future Data Driven 2021&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;September 29&lt;/strong&gt;: &lt;a href="https://docs.microsoft.com/en-us/events/learntv/azure-serverless-conf-september-2021/"&gt;Azure Serverless Conf&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;In addition to these upcoming events, here’s the schedule for &lt;a href="https://aka.ms/dataexposedlive"&gt;Data Exposed Live&lt;/a&gt;:&lt;br&gt;&lt;br&gt;
&lt;strong&gt;September 8:&lt;/strong&gt; &lt;a href="https://youtu.be/PpyAnS7Rbd8"&gt;Ask the Experts: SQL Server on Azure Virtual Machine&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://bit.ly/2Wi19d7"&gt;Submit&lt;/a&gt; your questions today!&lt;br&gt;&lt;br&gt;
&lt;strong&gt;September 15:&lt;/strong&gt; &lt;a href="https://youtu.be/IImnbYDdugw"&gt;Deep Dive: Modernize your Oracle Workloads to Azure SQL&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;September 22:&lt;/strong&gt; &lt;a href="https://youtu.be/jCc6uBCOOfE"&gt;Deep Dive: Deploy IoT Solutions with Azure SQL Database&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Plus find new, on-demand Data Exposed episodes released every Thursday, 9AM PT at &lt;a href="https://aka.ms/dataexposedyt"&gt;https://aka.ms/dataexposedyt&lt;br&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Featured Microsoft Learn Module&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Learn with us! This month I highlighted the module: &lt;a href="https://docs.microsoft.com/learn/modules/build-full-stack-apps/"&gt;Build full stack applications with Azure Static Web Apps and Azure SQL Database&lt;/a&gt;. In the language of your choice, you’ll deploy an Azure Static Web App, which combines the power of Azure Functions and Azure Web Apps into one service managed by GitHub Actions. This application surfaces real-time bus data and geofences stored in an Azure SQL Database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Anna’s Pick of the Month&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This month I am highlighting Azure Serverless Conf which is happening in all time zones LIVE on September 29-30&lt;sup&gt;th&lt;/sup&gt;. I have had the pleasure and honor to work with other teams to get this created, and I think you all will really love the great cross-service solutions approach to many of the sessions. To register and for more information, head over to the main site: &lt;a href="https://aka.ms/azureserverlessconf"&gt;https://aka.ms/azureserverlessconf&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Until next time…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That’s it for now! Be sure to check back next month for the latest updates, and tune into Data Exposed Live every Wednesday at 9AM PST on &lt;a href="https://docs.microsoft.com/en-us/learn/tv/"&gt;LearnTV&lt;/a&gt;. We also release new episodes on Thursdays at 9AM PST and new #MVPTuesday episodes on the last Tuesday of every month at 9AM PST at &lt;a href="https://aka.ms/dataexposedyt"&gt;aka.ms/DataExposedyt&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Content Creation with Kedasha Kerr </title>
      <author>Mandy Moore</author>
      <pubDate>Wed, 08 Sep 2021 14:12:31 +0000</pubDate>
      <link>https://dev.to/newrelic/content-creation-with-kedasha-kerr-2e5f</link>
      <guid>https://dev.to/newrelic/content-creation-with-kedasha-kerr-2e5f</guid>
      <description>&lt;p&gt;&lt;a href="https://therelicans.com"&gt;Relicans&lt;/a&gt; host, &lt;a href="https://twitter.com/pachicodes"&gt;Pachi Parra&lt;/a&gt; talks to Design Systems Engineer, &lt;a href="https://twitter.com/itsthatladydev"&gt;Kedasha Kerr&lt;/a&gt;, about attending the &lt;a href="https://ghc.anitab.org/"&gt;Grace Hopper Conference&lt;/a&gt; with the intention of getting hired, thinking as a product engineer while also thinking like a &lt;a href="https://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt; engineer, and focusing on content creation on &lt;a href="https://www.instagram.com/itsthatlady.dev"&gt;Instagram&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Should you find a burning need to share your thoughts or rants about the show, please spray them at &lt;a href="mailto:devrel@newrelic.com"&gt;devrel@newrelic.com&lt;/a&gt;. While you're going to all the trouble of shipping us some bytes, please consider taking a moment to let us know what you'd like to hear on the show in the future. Despite the all-caps flaming you will receive in response, please know that we are sincerely interested in your feedback; we aim to appease. Follow us on the Twitters: &lt;a href="https://twitter.com/LaunchiesShow"&gt;@LaunchiesShow&lt;/a&gt;.&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/launchies/content-creation-with-kedasha-kerr"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;Content Creation with Kedasha Kerr&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/launchies"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        Launchies  

      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-content-creation-with-kedasha-kerr" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-content-creation-with-kedasha-kerr" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-content-creation-with-kedasha-kerr" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-content-creation-with-kedasha-kerr" alt="Launchies" src="https://res.cloudinary.com/practicaldev/image/fetch/s--UqIIXJAb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--_l3MirTt--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/497/e68f23f9-3f66-4e53-b0c6-80f0f82caa84.jpg"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-content-creation-with-kedasha-kerr"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/launchies/content-creation-with-kedasha-kerr"&gt;
      &lt;img id="episode-profile-image" alt="Content Creation with Kedasha Kerr" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--k_5JRBqy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--S-_M_-nf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/497/e68f23f9-3f66-4e53-b0c6-80f0f82caa84.jpg"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;Jonan Scheffler: Hello and welcome to &lt;a href="https://twitter.com/LaunchiesShow"&gt;Launchies&lt;/a&gt;, proudly brought to you by New Relic's developer relations team, &lt;a href="https://therelicans.com"&gt;The Relicans&lt;/a&gt;. The Launchies podcast is about supporting new developers and telling their stories and helping you make the next step in what we certainly hope is a very long and healthy career in software. You can find the show notes for this episode along with all of The Relicans podcasts on &lt;a href="//developer.newrelic.com/podcasts"&gt;developer.newrelic.com/podcasts&lt;/a&gt;. We're so glad you're here. Enjoy the show.&lt;/p&gt;

&lt;p&gt;Pachi Parra: Hello and welcome to &lt;a href="https://twitter.com/LaunchiesShow"&gt;Launchies&lt;/a&gt;, a podcast for newbies, developers with non-traditional backgrounds, and career-switchers. I'm &lt;a href="https://twitter.com/pachicodes"&gt;Pachi&lt;/a&gt;, a DevRel engineer in [New Relic(&lt;a href="https://newrelic.com/"&gt;https://newrelic.com/&lt;/a&gt;). And I will be your host for today's show. And you can find me all over the web as &lt;a href="https://www.google.com/search?q=pachicodes&amp;amp;sxsrf=AOaemvLnbZI6WwGeLbWv7QTy1lanuYOpVw%3A1630612513979&amp;amp;source=hp&amp;amp;ei=ISwxYdq_OLfl5NoPt6mo6AI&amp;amp;iflsig=ALs-wAMAAAAAYTE6MR8IUzhHGNNERhlsMBGJ2duDzSb4&amp;amp;oq=pachicodes&amp;amp;gs_lcp=Cgdnd3Mtd2l6EAMyBAgjECc6CwgAEIAEELEDEIMBOgsILhCABBCxAxCDAToICAAQgAQQsQM6DgguEIAEELEDEMcBENEDOgsILhCABBDHARCjAjoOCC4QgAQQsQMQxwEQowI6EQguEIAEELEDEIMBEMcBENEDOgUIABCABDoFCC4QgAQ6CwguEIAEEMcBEK8BOggILhCxAxCDAToICC4QgAQQsQM6DQguEIAEEMcBEK8BEAo6BwgAELEDEAo6BwgAEIAEEAo6BwguEIAEEAo6BAgAEApQsQpY0hVgkhdoAHAAeAGAAYADiAHAE5IBBTItMy41mAEAoAEB&amp;amp;sclient=gws-wiz&amp;amp;ved=0ahUKEwia1KL9iOHyAhW3MlkFHbcUCi0Q4dUDCAo&amp;amp;uact=5"&gt;pachicodes&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;And today, I have here with me &lt;a href="https://twitter.com/itsthatladydev"&gt;Kedasha&lt;/a&gt;, and she is a design systems engineer, and I think that's such a fancy and awesome title. She has a bachelor's degree in social work, and she's a bootcamp grad. Now she finds joy in helping others learn how to code and creating content on &lt;a href="https://www.instagram.com/itsthatlady.dev"&gt;Instagram&lt;/a&gt; and &lt;a href="https://twitter.com/itsthatladydev"&gt;Twitter&lt;/a&gt;. And I'm going to share her links later. Welcome to the podcast. &lt;/p&gt;

&lt;p&gt;Kedasha Kerr: Thank you. Thank you for having me. &lt;/p&gt;

&lt;p&gt;Pachi: How are you doing today? &lt;/p&gt;

&lt;p&gt;Kedasha: I'm good. I just had a super busy Monday, but that's how Mondays go. But yeah, I'm doing pretty well today. &lt;/p&gt;

&lt;p&gt;Pachi: For a Monday. [laughs]&lt;/p&gt;

&lt;p&gt;Kedasha: Yeah. [laughs]&lt;/p&gt;

&lt;p&gt;Pachi: So the first question I always like to ask…I find it so interesting how I talk to many people, and everybody has a different way of how they got into tech, especially for &lt;a href="https://twitter.com/LaunchiesShow"&gt;Launchies&lt;/a&gt;. So, when was the first contact you had with tech, and when did you realize that you could work with it? &lt;/p&gt;

&lt;p&gt;Kedasha: Yeah, sure. So the first time I ever saw or considered anything about tech was in 2018, so not that long ago. So I think it was November or December 2018. I came across a blog post by a personal finance person I follow on Instagram. And she was talking about how she taught herself to code in nine months, and she got hired as a software engineer, and how she tripled her salary, and all these wonderful things. And so, at the time, I was personally learning about money and managing my money, and so that intrigued me. And so I read her blog post, and that led me to &lt;a href="https://www.freecodecamp.org/"&gt;freeCodeCamp&lt;/a&gt;, and &lt;a href="https://www.codecademy.com/"&gt;Codecademy&lt;/a&gt;, and all these amazing free resources. And that's how I was introduced to tech and coding. It was through reading a blog post. [chuckles]&lt;/p&gt;

&lt;p&gt;Pachi: That's so cool. I started learning to code in 2018 too. [chuckles] &lt;/p&gt;

&lt;p&gt;Kedasha: Oh, nice.&lt;/p&gt;

&lt;p&gt;Pachi: But yeah, that's definitely the first time that I've heard somebody that got something from a finance blog.&lt;/p&gt;

&lt;p&gt;Kedasha: Absolutely.&lt;/p&gt;

&lt;p&gt;Pachi: But it's awesome. It shows how you can see things from everywhere. And so you started with &lt;a href="https://www.freecodecamp.org/"&gt;freeCodeCamp&lt;/a&gt;, and &lt;a href="https://www.codecademy.com/"&gt;Codecademy&lt;/a&gt;. Once you got more into that, how did you decide what to learn and where to learn? &lt;/p&gt;

&lt;p&gt;Kedasha: So one of the things I struggled with when I was trying to teach myself...December 2018, I started dabbling in HTML and CSS, and seeing things light up on the screen was so amazing. And in January, I made this self-taught developer plan to study JavaScript, and jQuery, and PHP. But when I got to JavaScript in January, I was like, ooh, [laughs] what is going on? And so I decided to go to a bootcamp. So because I was struggling, that's what led me to try to figure out how can I learn with others and how can I fast-track this career change thing? And so that's how I developed a curriculum. I didn't do it. I allowed the bootcamp to do it for me. &lt;/p&gt;

&lt;p&gt;Pachi: It's hard. It's really hard. And I definitely know what you're saying because I was in HTML and CSS for a while because I really liked that. And when I got to JavaScript, I felt exactly the same. Like, what's going on here? [laughs] It has been two years, and I still struggle with JavaScript. We still have this relationship where it's like, I like you, but you are so complicated.&lt;/p&gt;

&lt;p&gt;Kedasha: Yeah. 100%.&lt;/p&gt;

&lt;p&gt;Pachi: I considered going to a bootcamp a few times. It just didn't fit my life at the moment. And now I'm just, okay, I'm here already. [chuckles] And how did you decide to do a bootcamp? Did you do it online, or did you do it in person?&lt;/p&gt;

&lt;p&gt;Kedasha: I did an online bootcamp. So one of my main criteria for going to the bootcamp was I didn't want to put any money down. I was on my personal finance journey, so I didn't want to take out any additional student loans to change my career. And so, at the time, I found a bootcamp which was one of the only bootcamps offering income sharing agreements. And so that's why or how I decided what bootcamp to go to. It was purely financial. I really didn't care what the stack was because I didn't know too much about it. I was just like, oh, you're going to help me learn all these things upfront, and then when I get a job, I pay you back? Sure. I will come to your bootcamp, no problem. &lt;/p&gt;

&lt;p&gt;Pachi: [laughs] That's awesome. Yeah, it makes getting started easier because I don't have to give you money until I start to work.&lt;/p&gt;

&lt;p&gt;Kedasha: Exactly. It was purely financial. And even now, bootcamps are so expensive, $15,000, $20,000, $25,000, $30,000 for three to four months of learning. And it's just like, how are people supposed to be paying for these? How are we supposed to be paying for these bootcamps? So, yeah, definitely; finances were definitely the main motivator.&lt;/p&gt;

&lt;p&gt;Pachi: Yes. And they're full-time, so you cannot work because you're doing other things. &lt;/p&gt;

&lt;p&gt;Kedasha: Exactly. Exactly.&lt;/p&gt;

&lt;p&gt;Pachi: And after you finished the bootcamp, did you feel ready for a job? &lt;/p&gt;

&lt;p&gt;Kedasha: I wouldn't say I felt ready for a job per se, but I was definitely ready to start earning again. I took the looking for a job into my own hands. So I was hired in my first role at the &lt;a href="https://ghc.anitab.org/"&gt;Grace Hopper Conference&lt;/a&gt;. So I got a scholarship to go to &lt;a href="https://en.wikipedia.org/wiki/Grace_Hopper"&gt;Grace Hopper&lt;/a&gt;. And so I used the bootcamp to prepare me to go there to be ready for employers, and that's how I got hired. &lt;/p&gt;

&lt;p&gt;But yeah, in terms of feeling ready for a job, I don't know. I was just ready to earn. I was just ready to earn money, and I was tired of being in school. I was tired of learning. And so I told myself I was ready and just put myself out there, honestly. &lt;/p&gt;

&lt;p&gt;Pachi: That's really great. And how long was it from you finishing bootcamp to you getting that first job? &lt;/p&gt;

&lt;p&gt;Kedasha: So I got hired before I finished my bootcamp. &lt;/p&gt;

&lt;p&gt;Pachi: Ooh.&lt;/p&gt;

&lt;p&gt;Kedasha: So the bootcamp I went to was nine months long. I was there from; I think, March to October 2019. And so, I got hired in October 2019. I'm actually starting up my bootcamp again today. [chuckles] So I have two months left to finish the computer science portion of the curriculum for me to officially graduate. So I've technically not graduated from my bootcamp because I got hired early. &lt;/p&gt;

&lt;p&gt;Pachi: So did you do any job search before the conference, or you just went to the conference and put yourself out there? And how was the job search part?&lt;/p&gt;

&lt;p&gt;Kedasha: So I didn't really have an intense job search process primarily because I put a lot of focus in 2019 on preparing for the conference. So when I learned that the &lt;a href="https://ghc.anitab.org/"&gt;Grace Hopper Conference&lt;/a&gt; had a huge hiring fair and a lot of employers hire people on the spot a lot of times, and they're looking for junior level talent, I was like, okay, awesome. So I made sure that I was ready and prepared for the conference. So I built a full-stack project, updated my resume, made sure my &lt;a href="https://www.linkedin.com/in/kedashakerr/"&gt;LinkedIn&lt;/a&gt; was great, printed out a bunch of resumes. I think it was like 79 resumes I had in my hand at the conference. And I went to the conference with the intention of getting hired. And so, over the course of three days, I lived in the career hall. I didn't do anything else but talk to employers. &lt;/p&gt;

&lt;p&gt;Pachi: That's awesome. That's a great plan. I got a scholarship at the same time, but mine didn't cover the flight. And I'm in New Jersey so going to California wasn't easy.&lt;/p&gt;

&lt;p&gt;Kedasha: Thankfully, at the time, the conference was in Orlando in 2019. And so, at the time, I lived in Orlando, so yeah, I just drove there. And I also worked at the convention center that they were having the conference at. So it was just perfectly aligned. [laughs]&lt;/p&gt;

&lt;p&gt;Pachi: That is so great. And you did this for three days. You just fully invested in this. How was it? How many people did you talk to? How did you get a proposal? How were you feeling? &lt;/p&gt;

&lt;p&gt;Kedasha: Honestly, I don't remember how many employers I talked to at the conference. There were a lot, and I did do some interviews. But they didn't go well primarily because most of the interviews had code challenges, and code challenges are such a challenge.&lt;/p&gt;

&lt;p&gt;Pachi: Yeah. &lt;/p&gt;

&lt;p&gt;Kedasha: [laughs] There were a lot of those algorithmic-type questions that just blow my mind even to this day.&lt;/p&gt;

&lt;p&gt;Pachi: They're hard.&lt;/p&gt;

&lt;p&gt;Kedasha: Yeah, they are so complicated. And honestly, I don't remember...it was a lot of people that I talked to. I would say at least 20 employers. I visited at least 20 employers over the course of three days just talking about myself, and my resume, and my skills. &lt;/p&gt;

&lt;p&gt;The last employer I went to is my current employer. And one thing I remember is that they were the only company that treated me like a person. So I didn't feel like just another number. Oh, it's just another person to talk to about our jobs like it doesn't matter. No, no, no, no, I was talking to the director of engineering for almost two hours about my skills, my experience, my bootcamp, my project. And she really loved the project I built. So I built a full-stack budgeting app because I was all into personal finance at the time. And so my company is a FinTech company. And so she loved the project and my skills, and she hired me. It was crazy. And I cried when I got the job offer.&lt;/p&gt;

&lt;p&gt;Pachi: That's awesome. Did you get the job offer on the spot?&lt;/p&gt;

&lt;p&gt;Kedasha: Not on the spot, but after we finished talking like 10 to 15 minutes later, I got an email that said, "Hey, we want to hire you."&lt;/p&gt;

&lt;p&gt;Pachi: That's so awesome.&lt;/p&gt;

&lt;p&gt;Kedasha: Yeah, I was in shock. I cried. I sat in my car, and I just cried because I couldn't believe I did it. &lt;/p&gt;

&lt;p&gt;Pachi: You did it. Congratulations. &lt;/p&gt;

&lt;p&gt;Kedasha: Thank you. [chuckles]&lt;/p&gt;

&lt;p&gt;Pachi: So you got a job not even out of bootcamp because you were in the middle of bootcamp. How was the first month on the job? &lt;/p&gt;

&lt;p&gt;Kedasha: Overwhelming. So not only was I new to engineering I was also new to a massive company. And I didn't know that the company I currently work for is a Fortune 500 company, and they have multiple locations. They have thousands of employees across the United States. And so, getting used to my first developer job was one thing but getting used to a huge enterprise was another thing. &lt;/p&gt;

&lt;p&gt;And so I know some of the things I struggled with my first month was speaking up in teams. I worked with a group of only men on the team. I was the only woman on the team, and so I felt so insecure about talking in meetings sometimes. &lt;/p&gt;

&lt;p&gt;And then my company also uses &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt; and &lt;a href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt;. And that was the first time I saw those things. I was just like, what is that? Oh my goodness. [chuckles] And so those are some of the things I remember being so overwhelmed by. And then seeing the codebase, oh my gosh, ooh my gosh. [laughs] And that was definitely something to get used to. It's so massive. &lt;/p&gt;

&lt;p&gt;Pachi: I bet, especially a company this big. And you just got on like, hey, I did this project here, and now I have to do that. I cannot imagine. And how did you get help with that? What helped you in the first months?&lt;/p&gt;

&lt;p&gt;Kedasha: I was assigned a mentor, thankfully on my team. So I had someone, a senior engineer, who I could ask all the questions, and so I asked him all the questions all the time. And I paired with him. I paired with my manager. And I disappeared from the internet in 2020 because I started working in January 2020, so last January. And so because my job was...it just demanded so much of my time. I just disappeared from everywhere. So I was literally just working and sleeping, working and sleeping, and studying. But having that mentor was definitely crucial in my success and getting acclimated to the company. &lt;/p&gt;

&lt;p&gt;Pachi: And you have been doing that for like a year and a half now, a little longer. How do you feel now? &lt;/p&gt;

&lt;p&gt;Kedasha: I still feel confused [laughter] but not as confused. I was actually recently promoted to design systems engineer. &lt;/p&gt;

&lt;p&gt;Pachi: Congrats.&lt;/p&gt;

&lt;p&gt;Kedasha: Thank you. And it's because I had a great mentor. I had a great team that I started with. And I am fully supported at my company. Being a year and a half in, I definitely don't feel like a n00b anymore. But I definitely still feel like a n00b in certain areas [chuckles] for sure.&lt;/p&gt;

&lt;p&gt;Pachi: And can you tell me what a design system engineer does? Because usually I hear about back end and front end, and I hardly hear design and system in the same…together.&lt;/p&gt;

&lt;p&gt;Kedasha: So, as a design systems engineer, I'm still a part of the front-end family of roles. So I work on the company's internal user interface system. So you know how you have &lt;a href="https://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt;? Bootstrap is very popular. So think of me as one of the engineers that's working on building Bootstrap, so it's easier for you to build your apps later on. That's how I've been explaining it to people. &lt;/p&gt;

&lt;p&gt;Pachi: Oh, that's really great.&lt;/p&gt;

&lt;p&gt;Kedasha: So I currently work on the company's...we build components for the engineers across the org to consume, to make their production times faster.&lt;/p&gt;

&lt;p&gt;Pachi: That's really cool.&lt;/p&gt;

&lt;p&gt;Kedasha: Yeah, it's a lot. [laughs]&lt;/p&gt;

&lt;p&gt;Pachi: I bet. [laughs]&lt;/p&gt;

&lt;p&gt;Kedasha: I'm still pretty new to it. It's only been what? Two weeks. So it's like I started over again. &lt;/p&gt;

&lt;p&gt;Pachi: And did your role change a lot from what you were doing before? &lt;/p&gt;

&lt;p&gt;Kedasha: Yes. So before, when I was hired as an associate software engineer, so a junior engineer, I was working on a product team. Product team meaning the team I worked on previously, built features for our clients so our millions of clients. They did that. The team I work on now is not a product team. We build for the engineers. &lt;/p&gt;

&lt;p&gt;So we build components for the engineers to use in the apps that they build for the clients, for the external-facing clients. So it's kind of a different level of thinking because I have to think as a product engineer. But I also have to think like a &lt;a href="https://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt; engineer in terms of how will somebody consume this? How will they use it? What about accessibility? Oh my goodness, so many questions and planning. It's so interesting being on this side of things. &lt;/p&gt;

&lt;p&gt;Pachi: And you can get feedback right inside the company because the people that are using it are there. [chuckles]&lt;/p&gt;

&lt;p&gt;Kedasha: Exactly. The engineers at my company are our main users. But also, our client-facing users are also a part of our users because the engineers are using our components to serve our clients. So it's multi-tiered for sure. &lt;/p&gt;

&lt;p&gt;Pachi: That's so cool; how you started then you got promoted because I think you're doing two different things. Did you want to do this, or did somebody see your potential to do it, to work in this new role? How was that?&lt;/p&gt;

&lt;p&gt;Kedasha: [chuckles] So, honestly, I wasn't even considering a promotion. I was starting...so in April of this year, I was starting to feel like, oh, I feel like I can do more, but I didn't know what more means. And then I saw someone else get promoted in April who started with me last year. And so that started to stir the wires in my brain like, oh, I can get a promotion? I can get promoted now? It's not too early? And that's what started me looking into other roles to see what I would be possibly interested in. And this role caught my eye because not only was it a level two engineer, it also was something where I could have a lot more ownership over the work that I was doing.&lt;/p&gt;

&lt;p&gt;Pachi: That's so cool. You saw you were ready for something new, and you were like, hey, I want to do this.&lt;/p&gt;

&lt;p&gt;Kedasha: Exactly. I was like, if he can get promoted, I can get promoted. Let's go. Let's go get a promotion. [laughs]&lt;/p&gt;

&lt;p&gt;Pachi: And you did. And you mentioned that you were off the internet for the last year. So this year you came back. &lt;/p&gt;

&lt;p&gt;Kedasha: Yes, this year I came back. In January, I started to create content on primarily &lt;a href="https://www.instagram.com/itsthatlady.dev"&gt;Instagram&lt;/a&gt; because I've been off Twitter for over a year now, and I got so overwhelmed when I went back to it. And so I just like, okay, let me just choose a different platform. And so I went to Instagram, and it's been going great. I've met so many amazing people. I've been a part of so many amazing conferences and podcasts. It's just been so great to see the growth of the community and connecting with new and aspiring developers. It's awesome. I love sharing content, again, for sure. &lt;/p&gt;

&lt;p&gt;Pachi: That's pretty cool. And how did it go about with the type of content you're going to create? Do you have a calendar, or do you write about whatever you are feeling?&lt;/p&gt;

&lt;p&gt;Kedasha: Oh, yeah. So I definitely plan my content for the month. So on Sundays, the first Sunday in the month, I will plan for the entire month. So the entire month of August is already planned out for me. &lt;/p&gt;

&lt;p&gt;Pachi: Whoa.&lt;/p&gt;

&lt;p&gt;Kedasha: And then the Sunday of that week, I will film my videos or do my little write-ups or whatever it is that I'm planning to do. I actually pre-record all that content for the week. And then, on the days, I just post it. So I definitely do have a plan because I like staying consistent. And in order for me to be consistent, I have to know what's going to happen ahead of time. So that's how I do it. &lt;/p&gt;

&lt;p&gt;Pachi: Instagram is a lot of work. I tried.&lt;/p&gt;

&lt;p&gt;Kedasha: It is a lot of work. [laughs]&lt;/p&gt;

&lt;p&gt;Pachi: It is because you have to come up with content. You have to do all the graphics. I tried, and I didn’t…so congrats on that. And how did you come up with the content like what you're going to talk about?&lt;/p&gt;

&lt;p&gt;Kedasha: So initially, when I started, I didn't know what to post, so I just did technical content. I was doing HTML series, CSS series, JavaScript series. I have a React series. And so, from those long-form content I posted on &lt;a href="https://www.instagram.com/itsthatlady.dev"&gt;Instagram&lt;/a&gt; via carousels (You can swipe through to read.), a lot more people started following me. And so I started asking my community questions like, "Oh, what do you want to see? What do you think?" And so I get a lot of my ideas now from people that follow me, honestly.&lt;/p&gt;

&lt;p&gt;Pachi: That's really cool. You already know you're going to get engagement because you asked for it.&lt;/p&gt;

&lt;p&gt;Kedasha: For sure. [laughs]&lt;/p&gt;

&lt;p&gt;Pachi: How long have you been on Instagram now?&lt;/p&gt;

&lt;p&gt;Kedasha: Since January. So like six months. Other than work, I think I want to go back online and start talking to people on the internet.&lt;/p&gt;

&lt;p&gt;Pachi: That's good.&lt;/p&gt;

&lt;p&gt;Kedasha: But it's been so wild seeing the growth. So January, I had what? Two hundred people following me on &lt;a href="https://www.instagram.com/itsthatlady.dev"&gt;Instagram&lt;/a&gt;. And now I have over 4,000 people following me on Instagram, which is wild because Instagram is such a different platform to grow on. But it's been so awesome seeing the growth and the engagement from the community and just thinking about ways to serve people more. I just get so excited about it. &lt;/p&gt;

&lt;p&gt;Pachi: That's really great. I love it. And what do you think that you personally get out of creating content as an engineer? &lt;/p&gt;

&lt;p&gt;Kedasha: Wow. That's such a great question. So I started posting on &lt;a href="https://www.instagram.com/itsthatlady.dev"&gt;Instagram&lt;/a&gt; to increase my confidence in talking about technical concepts. That was one of my main goals for sharing content because one thing I've learned from being a social worker is the best way to learn something is to teach something. And so, I wanted to just get better at talking about highly technical content. But now I enjoy it because I just love helping new and aspiring developers just be good at their jobs. &lt;/p&gt;

&lt;p&gt;And I love talking to minorities in tech, especially. So I have a series called See Yourself in Tech. And it's literally me just talking to people from diverse backgrounds in the industry about how they got there, why they got there, all about their life and stuff. And I love it. I love sharing diverse perspectives in technology with my community because it allows them to see like, oh, I can work in tech, and it's just like, yes, come on and increase our percentages because we need your perspective here. &lt;/p&gt;

&lt;p&gt;Pachi: That's great. I really love it. I do a lot of it. I'm Brazilian, so I do a lot of work in the Brazilian community.&lt;/p&gt;

&lt;p&gt;Kedasha: Nice.&lt;/p&gt;

&lt;p&gt;Pachi: Especially women because most of the times when I talk with those girls, they're like, being a programmer was never a thing that even crossed their minds. And they just think men are the programmers. And when they see me, because I do live coding on &lt;a href="https://www.twitch.tv/"&gt;Twitch&lt;/a&gt;, when they see me programming on Twitch, they're like, "Hey, you are a girl, and you are programming. How do you do that?" Like, I don't know. So it's very awesome and rewarding when somebody just DMs me on Twitter and says, "Hey, I saw you doing this, and now I'm doing &lt;a href="https://www.freecodecamp.org/"&gt;freeCodeCamp&lt;/a&gt;. And it's cool." I'm like, "That's awesome. That's great." &lt;/p&gt;

&lt;p&gt;Kedasha: Yeah, it's so awesome. I definitely agree. Those messages I get like, "Oh my goodness, I love your content. It definitely helped me with blah, blah, blah, blah." I'm just like, "Wow, really? That's amazing." Because I don't think I'm doing anything spectacular but just hearing people say, "Wow, this really helped. Wow, thank you so much for letting me know." I'm just like, this is good. This is a good feeling. I like it. &lt;/p&gt;

&lt;p&gt;Pachi: And I feel like being a part of the minority just putting yourself out there, be public so people can see you. I always say if you go to a conference and you go into the room, and there are 40 white men sitting, and you're the only woman, you're probably going to be feeling very uncomfortable. And some people will run away. But if there is one woman in the corner, you feel a little more brave, so you can do that stuff.&lt;/p&gt;

&lt;p&gt;Kedasha: That's so true. &lt;/p&gt;

&lt;p&gt;Pachi: I know that's not for everybody because it takes some courage to be the person that shows their face because you're the only one that's there. But if you do it, it's totally rewarding because you can see that people are following you.&lt;/p&gt;

&lt;p&gt;Kedasha: Absolutely rewarding. It's so important that we remain visible to show other people like us that, yeah, you can be here too, and you can do exactly what I'm doing because people need to hear your voice. So yeah, I definitely agree with you there.  &lt;/p&gt;

&lt;p&gt;Pachi: And everybody has a different voice. I feel like sometimes people are like, "How am I going to talk about this? We have like 1,000 posts about &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; already." But your voice may be just what somebody else needs with your life experience and everything else.&lt;/p&gt;

&lt;p&gt;Kedasha: Exactly.&lt;/p&gt;

&lt;p&gt;Pachi: So, yes, if you’re wondering if you should create content, you can. [laughs] It's a great first step. So that was with Instagram that you realized that you really want to help people in tech.&lt;/p&gt;

&lt;p&gt;Kedasha: Yes. &lt;/p&gt;

&lt;p&gt;Pachi: Do you have any plans for the next months, like speaking in conferences, getting more content out there, or are you just planning to focus on Instagram?&lt;/p&gt;

&lt;p&gt;Kedasha: So, my focus for this year in terms of content creation is &lt;a href="https://www.instagram.com/itsthatlady.dev"&gt;Instagram&lt;/a&gt;. I am planning workshops and stuff to share with my audience. And I do also have a podcast with two other black female engineers; it's called &lt;a href="https://deeper-than-tech.simplecast.com/"&gt;Deeper Than Tech&lt;/a&gt;. And we love it. We just talk about being black in technology and what that's like. But yeah, in terms of content creation, I'm primarily just focused on Instagram this year. Sometimes I do post on Twitter, but Twitter just feels so overwhelming to me these days. I just post and then disappear. [laughs] But yeah, it's mostly Instagram for this year for sure. &lt;/p&gt;

&lt;p&gt;Pachi: Yeah. Twitter is an interesting place. &lt;/p&gt;

&lt;p&gt;Kedasha: Yes.&lt;/p&gt;

&lt;p&gt;Pachi: I got really good at just skimming through things. But yeah, it can be interesting.&lt;/p&gt;

&lt;p&gt;Kedasha: Yeah, that's definitely the word, interesting place. [chuckles]&lt;/p&gt;

&lt;p&gt;Pachi: But it's a good place to be in general. You meet some interesting people. Most of my podcast guests I got from Twitter.&lt;/p&gt;

&lt;p&gt;Kedasha: Nice.&lt;/p&gt;

&lt;p&gt;Pachi: So we talked about your first month on your job. But what are the kind of challenges you had to overcome in your first year, even from getting started to be where you are now? &lt;/p&gt;

&lt;p&gt;Kedasha: One of the feedback I got from my manager last year was, "Speak up more in meetings, share your thoughts and your ideas, share your opinions. We want to hear your voice." And that's still the hardest thing for me to do because I have this feeling of impending doom that if I share my opinion, nobody's going to like it because it's stupid and it's dumb. And that's just imposter syndrome, and that's just me not believing in myself. And so honestly, even sharing content on &lt;a href="https://www.instagram.com/itsthatlady.dev"&gt;Instagram&lt;/a&gt; has dramatically improved my confidence in speaking up and talking more. So that's definitely something I still struggle with. And I'm still trying to overcome and also not getting overwhelmed by all there is to learn because there's so much to learn.&lt;/p&gt;

&lt;p&gt;Pachi: There is so much learn. &lt;/p&gt;

&lt;p&gt;Kedasha: [laughs]&lt;/p&gt;

&lt;p&gt;Pachi: There’s so much to learn. Every time, I'm like, okay, what am I going to learn this month? And I'm like, oh, there's a new thing. I'll add that too, like, yes. And my list has ten things. And I have 10 hours to do that, and it's like, that's not happening. So, in the end, I don’t learn anything. [laughs]&lt;/p&gt;

&lt;p&gt;Kedasha: So much to learn. It's like earlier this year, I felt like I finally got a hold of JavaScript, not a hold, but I finally figured out what's going on. And then there's all this rage about &lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt;. And I'm just like, TypeScript? I just got sort of kind of used to JavaScript. [laughs] Now there's TypeScript. But that's definitely something else I'm just trying to just get used to. The constant learning is awesome, but it's also daunting.&lt;/p&gt;

&lt;p&gt;Pachi: It is. It really is.&lt;/p&gt;

&lt;p&gt;Kedasha: For sure.&lt;/p&gt;

&lt;p&gt;Pachi: You cannot stop learning. Even if you just stay with JavaScript forever, every year, there's some JavaScript stuff, so you can't stop studying.&lt;/p&gt;

&lt;p&gt;Kedasha: 100%. But yeah, those are the two main things I would say: speaking up more in meetings, and just sharing my thoughts and ideas, and not being afraid to learn, and also not being afraid of code challenges. I'm still so scared of them, but it's my goal to get better at it. [laughs]&lt;/p&gt;

&lt;p&gt;Pachi: I believe in you. I'm still terrified of them. Last year, I was looking for a job, so I did this one thing...I really wanted that job. And when they sent me the code challenge, I just sat down and cried. And the entire week, I couldn't even understand the problem. &lt;/p&gt;

&lt;p&gt;Kedasha: Oh my goodness. &lt;/p&gt;

&lt;p&gt;Pachi: By Friday, I was like, you know what? I give up, and that's fine. I can't do this right now. I'm just stressing myself, and I don't need this.&lt;/p&gt;

&lt;p&gt;Kedasha: I agree.&lt;/p&gt;

&lt;p&gt;Pachi: And it was fine. That's when I realized that okay, it's fine to give up sometimes.&lt;/p&gt;

&lt;p&gt;Kedasha: I agree because they're very hard. They're very, very hard. &lt;/p&gt;

&lt;p&gt;Pachi: They are. And until you understand what should be done and how it should be done, you will second guess yourself 1,000 times. So people should drop that from the interview. [laughs]&lt;/p&gt;

&lt;p&gt;Kedasha: I agree. For my new role, I had to do a code challenge, but it wasn't any arcane like, oh if a blue ball and a red ball come together, what kind of babies do they have? I don't know. How do balls have babies? [laughs] But what I had to do was I had to build a component meeting certain criteria and doing certain things, and I'm just like, oh, I can do this. &lt;/p&gt;

&lt;p&gt;Pachi: That makes sense.&lt;/p&gt;

&lt;p&gt;Kedasha: And so that's what I did for the code challenge. And then I had to present it and do all that stuff. And that's fine because that's the job every single day. And so I just feel like code challenges that have nothing to do with the job just need to be done with because they don't make no sense. They don't make any sense. &lt;/p&gt;

&lt;p&gt;Pachi: Yeah. Like, I did one interview last year for a front-end job, and the challenge was to make a website, a one-page website. I was like, wow that makes so much sense. Why don't more people do that?&lt;/p&gt;

&lt;p&gt;Kedasha: Makes so much sense.&lt;/p&gt;

&lt;p&gt;Pachi: I'm going to be making websites in the job, and the code challenge is to make a website. &lt;/p&gt;

&lt;p&gt;Kedasha: There you go.&lt;/p&gt;

&lt;p&gt;Pachi: Yes, that makes so much sense. People should do that. I feel like these code challenges most of the time; they just add another gate in front of us. And you just look at that, and you're like, I'm not doing it. But I'm happy that you're good now. It's very inspiring the way you got there and how you keep going. And I'm totally going to follow you on &lt;a href="https://www.instagram.com/itsthatlady.dev"&gt;Instagram&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And my last question for you...it's not even a question. You have been here doing this for a year and a half and learning for a little more. What are your best tips for people that are starting or that want to start in tech? What do you say to these people when they ask you, "Hey, I don't know where to start. What should I do? Can I do it?"&lt;/p&gt;

&lt;p&gt;Kedasha: Honestly, the first thing I say is, "What do you want to do in tech?" because tech is not just coding. [chuckles] Tech is more than coding. Tech is more than programming. Tech is more than software engineering. There are so many roles that don't even require coding where you can still earn a great living and be fulfilled in your career. So that's honestly the first thing I always ask, and if they do want to do coding, I just say, "Pick one language, and learn it, and build projects with it." One language. It doesn't matter which one, just choose one and just go from there.&lt;/p&gt;

&lt;p&gt;Pachi: And everybody goes like, "What's the best language?"&lt;/p&gt;

&lt;p&gt;Kedasha: It doesn't exist. It doesn't exist. They all have their issues. [laughs]&lt;/p&gt;

&lt;p&gt;Pachi: Yes, just choose something. I used to go to LinkedIn or Indeed and just see what's going on. And then I got overwhelmed and gave up on that. [laughter] I eventually stuck with JavaScript because what I like about front end is you do the things, and you can see them happening. It's like, okay, I like this. I know when I'm making progress, and I know when I'm not. So I really like that.&lt;/p&gt;

&lt;p&gt;Kedasha: [laughs] For sure. &lt;/p&gt;

&lt;p&gt;Pachi: So this is what I have for you today. Thank you so much for being my guest.&lt;/p&gt;

&lt;p&gt;Kedasha: Thank you for having me. &lt;/p&gt;

&lt;p&gt;Pachi: It was super fun. And before you go, do you want to share with people where they can find you on the internet? &lt;/p&gt;

&lt;p&gt;Kedasha: Oh yeah. So you can find me on Instagram &lt;a href="https://www.instagram.com/itsthatlady.dev"&gt;@itsthatlady.dev&lt;/a&gt; also Twitter &lt;a href="https://twitter.com/itsthatladydev"&gt;@itsthatladydev&lt;/a&gt;. And yeah, I share content for new and aspiring developers.&lt;/p&gt;

&lt;p&gt;Pachi: That's awesome. Do you want to share the podcast that you have?&lt;/p&gt;

&lt;p&gt;Kedasha: Oh yeah. Our podcast is called &lt;a href="https://deeper-than-tech.simplecast.com/"&gt;Deeper Than Tech&lt;/a&gt;, and we're on Apple Podcasts and also Spotify. &lt;/p&gt;

&lt;p&gt;Pachi: Awesome. I'm going to share that out. Thank you again. It was great having you. It was very helpful. I learned a lot of things. I love doing podcasts because I always learn so much.&lt;/p&gt;

&lt;p&gt;Kedasha: Right?&lt;/p&gt;

&lt;p&gt;Pachi: Every episode is a private class that I share with everybody that's listening.&lt;/p&gt;

&lt;p&gt;Kedasha: I swear podcasting is so awesome. Content creation is awesome. &lt;/p&gt;

&lt;p&gt;Pachi: I love it. Okay. So thanks again. And thank you, everybody, for listening. This was &lt;a href="https://twitter.com/LaunchiesShow"&gt;Launchies&lt;/a&gt; for you. And if you have anybody that would like to be a guest on the show, feel free to DM me on Twitter. I'm &lt;a href="https://twitter.com/pachicodes"&gt;@pachicodes&lt;/a&gt; there. Thanks again and see you soon. Bye.&lt;/p&gt;

&lt;p&gt;Jonan: Thank you so much for joining us. We really appreciate it. You can find the show notes for this episode along with all of the rest of The Relicans podcasts on &lt;a href="https://therelicans.com"&gt;therelicans.com&lt;/a&gt;. In fact, most anything The Relicans get up to online will be on that site. We'll see you next week. Take care.&lt;/p&gt;

</description>
      <category>podcast</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>career</category>
    </item>
    <item>
      <title>Free Responsive Admin Dashboard using React and Styled Components</title>
      <author>Kishan Sheth</author>
      <pubDate>Wed, 08 Sep 2021 14:11:12 +0000</pubDate>
      <link>https://dev.to/koolkishan/free-responsive-admin-dashboard-using-react-and-styled-components-2397</link>
      <guid>https://dev.to/koolkishan/free-responsive-admin-dashboard-using-react-and-styled-components-2397</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/B_RNoAScPMI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>react</category>
      <category>css</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
