<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>That’s a Wrap - HarperDB 2020</title>
      <author>Stephen Goldberg</author>
      <pubDate>Tue, 22 Dec 2020 17:42:16 +0000</pubDate>
      <link>https://dev.to/harperdb/that-s-a-wrap-harperdb-2020-1ji7</link>
      <guid>https://dev.to/harperdb/that-s-a-wrap-harperdb-2020-1ji7</guid>
      <description>&lt;p&gt;Though this year has been quite different for everyone, the team at HarperDB has made great strides from both a product and organization standpoint. Before 2021 arrives, we wanted to take a moment to summarize what we’ve accomplished this year, how we overcame challenges, and what we look forward to next year. HarperDB has an energetic and dynamic team, always looking to stay ahead of the curve. Our product is breaking records on data read and write speeds, simplifying the data pipeline, and changing the way people think about data management as a whole. We launched HarperDB Cloud (our managed and hosted offering) in April, released many product feature updates, and worked with top tier companies to provide innovative solutions on a large scale… it’s all pretty exciting, to say the least. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--azQazFng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s5xo0aant296li4am1vg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--azQazFng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s5xo0aant296li4am1vg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course, there have been challenges; we had to make cuts, reduce costs, and made a lot of difficult decisions. We’ve been working remotely since March, and our team has never been more productive, specifically our development team. The entire HarperDB staff has stayed healthy and stuck together during these times, and we are coming out stronger on the other end. We have a lot to be grateful for, and I think it’s safe to say that HarperDB is currently in the best position we’ve ever been. &lt;/p&gt;




&lt;p&gt;We asked each of our team members to share a few sentences about how this year has been, what they worked on, and what they’ll be focusing on next year: &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kyle-bernhardy-cofounder-amp-cto" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/kylebernhardy"&gt;Kyle Bernhardy&lt;/a&gt;, Co-Founder &amp;amp; CTO
&lt;/h3&gt;

&lt;p&gt;Both personally &amp;amp; professionally this year we had to navigate experiences we have never faced before.  Building a cloud platform from the ground up; replacing our storage engine with a net new technology; facing the uncertainty of a pandemic; bringing our team remote in the middle of a major development cycle; maintaining company culture, connection &amp;amp; collaboration; delivering solutions &amp;amp; support to our customers &amp;amp; community; continuing to innovate.  These are just some of the challenges from 2020. Facing these challenges created the opportunities of a vastly more accessible, performant product with a sizzling front end &lt;a href="https://studio.harperdb.io/sign-up"&gt;Studio&lt;/a&gt;, a resilient team that has come together and leaned into individual strengths to bolster each other with creativity, intelligence &amp;amp; support; a growing community of developers &amp;amp; customers who believe in our vision.  There have been cycles of fear &amp;amp; anxiety but also cycles of focus, growth &amp;amp; restoration that have got us through this year with more challenges &amp;amp; opportunities to tackle together. The highlight of my year &amp;amp; what I am most proud to come through 2020 is the HarperDB team. It is our individual members together who create solutions that delight customers and make our mission &amp;amp; vision possible.&lt;/p&gt;

&lt;p&gt;My focus for 2020 was on building a solid foundation for the HarperDB product &amp;amp; engineering team. Personally, I built a new data storage engine from the ground up &lt;a href="https://harperdb.io/blog/lmdb-deep-dive-interview/"&gt;with LMDB&lt;/a&gt; as the underlying data store.  This gave us upwards 700x performance improvements over our previous state &amp;amp; boosted us in outperforming a number of competitive products on the market as well as set us up for future benefits to be implemented in upcoming releases.  I have been researching how our inter-node communication layer &amp;amp; distribution can be enhanced &amp;amp; have been deeply involved in PoC development for future projects.  On the team front to guide the engineering team through development &amp;amp; release cycles and refine our processes to be better suited to remote collaboration.&lt;/p&gt;

&lt;p&gt;My focus will continue to be focused on advanced R&amp;amp;D and fostering the engineering team.  Early next year I will be finishing &amp;amp; releasing across the board data engine enhancements which will provide better indexing, read &amp;amp; write performance.  Following that I will build out backup/import functionality and assist in customer project success.  I am most looking forward to seeing us execute our vision on the business side and getting HarperDB in the hands of more devs &amp;amp; use cases.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#zach-fowler-cofounder-amp-cpo" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/zaxharperdb"&gt;Zach Fowler&lt;/a&gt;, Co-Founder &amp;amp; CPO
&lt;/h3&gt;

&lt;p&gt;To be perfectly honest this year at HarperDB has been the best so far, save not having the team a few steps away. I have come to appreciate me as not a worker bee but as a contributor to a larger community. Highlights have been working and supporting clients, the amazing things they are building with HarperDB. Watching the community build tools for HarperDB and being an endless source of ideas and features. &lt;/p&gt;

&lt;p&gt;2020 was busy and the team carried out many extraordinary endeavors. HarperDB Cloud as a Service was a gigantic undertaking, and we implemented it in short order with great success!&lt;/p&gt;

&lt;p&gt;I did a lot of work in the &lt;a href="https://harperdb.io/blog/harperdb-containerization-journey/"&gt;containerization of HarperDB&lt;/a&gt; and the ecosystems that support containers, specifically Kubernetes. This is an ongoing challenge but is very rewarding learning and adapting HarperDB for these use cases. This work has prepared HarperDB for opportunities in amazing partnerships that we should see come to fruition in the coming months.&lt;/p&gt;

&lt;p&gt;In the new year I am excited to continue to watch the community expand. I will be continuing to focus on improving and increasing HarperDB deployment channels; expanding the Kubernetes offering, adding alternative cloud providers, Azure, GCP, Packet.  It is going to be a good year, very proud to have come this far.  Cheers! And Happy New Year.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fred-yoon-cofounder-amp-coo" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/fredyoon"&gt;Fred Yoon&lt;/a&gt;, Co-Founder &amp;amp; COO
&lt;/h3&gt;

&lt;p&gt;It has undoubtedly been a challenging year for everyone due to the uncertainties of Covid.  Overall for me, I had a smooth transition working from home.  However, I didn't realize how hard it could be with the entire family at the house at all times. I'm proud of the entire HarperDB team as everyone has seemingly adapted well to the new challenges of working exclusively from home while maintaining their productivity.  It has allowed us to end the year on a high note by successfully closing a Series Seed financing round and positioning the company for success in 2021.  &lt;/p&gt;

&lt;p&gt;This year, some of my main goals and accomplishments were to help the organization navigate through Covid-19 operationally and financially, nurture and finalize strategic partnerships with Lumen and Section.io, and complete our Series Seed financing. &lt;/p&gt;

&lt;p&gt;2021 will be more of Covid and hopefully the transition to the end of the pandemic and more great opportunities for HarperDB.  Next year, my goals will be centered around successful partnerships and helping close out the significant sales opportunities developed this year.  I look forward to a very prosperous New Year for our company.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mark-hardy-vp-solution-delivery" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.linkedin.com/in/markdhardy/"&gt;Mark Hardy&lt;/a&gt;, VP Solution Delivery
&lt;/h3&gt;

&lt;p&gt;Overall I feel fortunate to have my family together and safe - I missed the face to face conversations with friends and colleagues and customers but overall the team at HarperDB made some amazing strides with the HDB Cloud product and improving performance and capabilities for our clients.  It is unfortunate that my college kids were not able to have the on campus experience that they had expected. They have great attitudes and have been very positive during the crisis.  So I am grateful for their perseverance.  Highlights of the year includes many camping trips during the summer months with friends and family.  With the support of our partner Casne, we developed a &lt;a href="https://www.youtube.com/watch?v=Wya5_6qXvYc"&gt;capability for industrial IOT&lt;/a&gt; which allows for the collection and management of extremely high frequency datasets for use in analytics and plant management.   We also made great strides in introducing HarperDB within the DoD community.  Both of these efforts will provide the market with a unique capability to support a variety of use cases in 2021. I am very excited to market the high resolution data collection solution to industrial clients and to assist in helping our DoD clients enhance their cyber capabilities.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jaxon-repp-vp-product" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/deliciousmonster"&gt;Jaxon Repp&lt;/a&gt;, VP Product
&lt;/h3&gt;

&lt;p&gt;This year has been pretty, pretty, pretty good. I worked on the Studio, HarperDB Cloud, &lt;a href="https://studio.harperdb.io/resources/marketplace/active"&gt;Developer Marketplace&lt;/a&gt;, &lt;a href="https://studio.harperdb.io/resources/dbmigrator"&gt;DB Migrator&lt;/a&gt;, and Clustering. Next year, I intend to reduce the amount of coding I do, if/when we get to the point of hiring other people. &lt;/p&gt;

&lt;p&gt;Coding is a skill set I possess, but as we head into the new year most projects will be incremental improvements to our already-awesome suite of products. It will no longer going to be greenfield development, which is where the art is (for me, at least).&lt;/p&gt;

&lt;p&gt;I want to spend more time with customers and developers on a comprehensive roadmap that puts us in the same league as Oracle and SQL Server. I want to be able to partner with universities to make us the database that the next generation of developers cut their teeth on. I want to never have to hedge when answering a customer question because we are always faster, more flexible, more performant, and more cost-effective than any other solution they might be considering.I want ubiquitous data to save the world, and I want HarperDB to be the way that data gets it done.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jacob-cohen-director-of-product-management" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/jacob_b_cohen"&gt;Jacob Cohen&lt;/a&gt;, Director of Product Management
&lt;/h3&gt;

&lt;p&gt;This year has certainly been weird, but I think I've made the best of it. I've gotten used to working from home and have grown to enjoy the flexibility of it, however, I do miss seeing everyone. I've taken the opportunity to learn new skills.&lt;/p&gt;

&lt;p&gt;In the middle of this year, I was promoted to Director of Product Management. My previous role was Solutions Architect, which I am still involved in with the sales team, but it helped me better understand the needs of our customers/users so that I can better guide the direction of the product. One of the more fun things I created this year was our &lt;a href="https://youtube.com/playlist?list=PLlgTMTKsypS5GIn4Yi3NxC4inX_tA5O9I"&gt;video tutorial series&lt;/a&gt;. Additionally, I am in the process of revamping our &lt;a href="https://harperdb.io/developers/documentation/overview/"&gt;documentation&lt;/a&gt;, which became available with the release of HarperDB 2.3.0.&lt;/p&gt;

&lt;p&gt;I will continue working with the engineering and sales teams to ensure that HarperDB is delivering the proper features and functionality to deliver cutting edge data solutions. HarperDB has some exciting features on our roadmap and I'm looking forward to seeing them come to fruition.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aron-johnson-automation-engineer" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/aronjohnson"&gt;Aron Johnson&lt;/a&gt;, Automation Engineer
&lt;/h3&gt;

&lt;p&gt;Given the social/economic/pandemic challenges of 2020, I've been very fortunate this year all things considered. The main thing I have worked on and accomplished is helping to build, maintain, and improve HarperDB Cloud. Next year, I’ll continue to improve HarperDB Cloud. Continue to support our developers so they can make HarperDB even better. I am most excited about seeing HarperDB being used by more people, and used in new and interesting ways. Growing the team. Getting vaccinated, and seeing my friends and family more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#david-cockerill-software-engineer" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/davidcockerill"&gt;David Cockerill&lt;/a&gt;, Software Engineer
&lt;/h3&gt;

&lt;p&gt;This year has not been that bad for me. While I miss the camaraderie of working in the office I prefer working from home. I enjoy the flexibility that it provides and the location independence. Due to social distancing restrictions I have spent more time exercising outside. My running has progressed significantly and I ran my first half marathon. One of my biggest highlights of the year was adopting a dog, it has been quite the adjustment but a worthy one. This year for me was all about the HarperDB Studio, specifically the back end. I spent most my time building out the &lt;a href="https://harperdb.io/blog/how-we-build-and-deploy-our-serverless-studio/"&gt;serverless architecture&lt;/a&gt; that supports the Studio. I have really enjoyed learning more about cloud computing and am excited to continue that exploration. Next year I will be working on automating some of our internal processes and will continue supporting HarperDB Cloud offerings.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sam-johnson-software-engineer" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/samj"&gt;Sam Johnson&lt;/a&gt;, Software Engineer
&lt;/h3&gt;

&lt;p&gt;As one of the few HarperDB'ers who, pre-pandemic, strongly preferred to not work from home, this year has been a challenge and major adjustment.  That said, I have been really lucky that the transition allowed me to spend significantly more time with my baby girl (who just turned ONE!) while still managing to keep some semblance of productivity.  Highlight of the year has absolutely been getting to see Olivia transition from awesome, happy newborn to awesome, happy kiddo. This year I worked on hardening our core product.  Mainly overhauling and adding new features to our SQL engine, implementing a new, more robust approach for permissions, and adding other features like bulk load operations from S3 and &lt;a href="https://harperdb.io/blog/harperdbs-new-upsert-feature/"&gt;NoSQL Upsert&lt;/a&gt;. This coming year I will be primarily working on improving HarperDB's SQL operations, focusing on performance improvements and new features and functionality - currently working on building a much faster server layer for HDB that should be ready for release in early 2021.  Outside of work, I am excited to be able to do a bit more traveling and catch up on all the beers I've had to skip with my friends and family in 2020.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jason-bathrick-business-development" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.linkedin.com/in/jason-bathrick-99a36721/"&gt;Jason Bathrick&lt;/a&gt;, Business Development
&lt;/h3&gt;

&lt;p&gt;My dogs aren't barking but HarperDB is! &lt;/p&gt;

&lt;p&gt;2020 brought some serious change on the sales side over at HarperDB. During Q1, it was my goal to introduce HarperDB to as many companies in Denver as I possibly could and that meant face to face meetings, lunches, and networking events. It was exciting and fun to meet with businesses and share new data management concepts and help them solve challenges with HarperDB. With Covid, the entire business development market was flipped. Instead of running and gunning, I've been glued to my chair since March. My dad bod is a testament to the lack of movement but as a sales guy, you gotta roll with the punches. &lt;/p&gt;

&lt;p&gt;One of the achievements I am most proud of is helping forge a partnership with the US Army. HarperDB is being deployed to collect sensor data in the field and distribute/aggregate the data in real-time for situational awareness purposes. When I entered the data management industry, I never expected to work on innovative projects that help keep our soldiers safe. I really think it's awesome and am proud HarperDB is a staple in the project. &lt;/p&gt;

&lt;p&gt;Secondly, we have been working with a major Telecommunications Company on innovative ways to leverage HarperDB to bring value to their end customers. Through trial and error, and bringing a lot of very smart and talented individuals together to strategize, we have come up with business applications that are game changers, The future is very bright for HarperDB!&lt;/p&gt;

&lt;p&gt;For 2021, I would like to get HarperDB more involved in Digital Manufacturing and Design projects. HarperDB's ability for data filtering, real-time alerting, and our ability to move operational data into enterprise systems can really enhance operations and reduce spend. I would also like to find more cutting edge technology projects in the government sector and work on partnering with a major aerospace and defense company.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#kaylan-stock-director-marketing" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/kaystock"&gt;Kaylan Stock&lt;/a&gt;, Director Marketing
&lt;/h3&gt;

&lt;p&gt;Thankful for my health, my family’s health, my boyfriend Matt, and our pet clan (Alby, Ike, &amp;amp; Harold). This year hasn’t been easy, but it’s been a year of growth, self reflection, and learning to appreciate what I have. My favorite part was finally achieving my goal of buying a home and just in time to have an office space now that HDB is a fully remote company. 🙂 This year at Harper, I worked with my new partner in crime Margo on the marketing launch of HarperDB Cloud. I have spent a ton of time blogging, helping coordinate events, running social media, and coordinating the marketing around HDB Cloud! I also helped run a complete website makeover in the beginning of year. 2021 will be HarperDB’s year! We will be focusing on content, brand &amp;amp; product awareness along with driving user adoption through developer evangelism! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#margo-mccabe-sr-director-devrel-amp-partnerships" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://dev.to/margo_hdb"&gt;Margo McCabe&lt;/a&gt;, Sr Director DevRel &amp;amp; Partnerships
&lt;/h3&gt;

&lt;p&gt;What a year! While I miss the same things we all do (seeing people, traveling, leaving my house), I really do feel fortunate all things considered. My family and friends have stayed healthy, and we even jumped on the puppy bandwagon with our new rescue pup named Jagger. My focus has been around expanding the HarperDB user base, procuring dev resources, gauging &lt;a href="https://harperdb.featureupvote.com/"&gt;feedback&lt;/a&gt;, connecting our users and product team, and raising product awareness, as well as partnerships on a larger scale. It’s incredibly rewarding being able to see firsthand how HarperDB has helped developers and tech leaders of all skill levels across numerous applications. In 2021 I’ll stay on the same track, continuing to increase community engagement with our informative &lt;a href="https://www.youtube.com/playlist?list=PLlgTMTKsypS7FCGm3jAzq6VppF8-AtzPh"&gt;livestream events&lt;/a&gt;, developer examples, and &lt;a href="https://harperdb.io/company/podcast/"&gt;new tech podcast series&lt;/a&gt; (we’re looking for guest speakers!). &lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CD8de44t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/f1ghvuxauyzxjbxdb23b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CD8de44t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/f1ghvuxauyzxjbxdb23b.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It may seem like it, but I didn’t force any of them to write that. We have a great team, and it really has been a strategic and productive year for HarperDB and we are eager to show you what’s yet to come. It goes without saying that we wouldn’t be where we are today if it weren’t for our incredible partners, customers, and HarperDB users, as well as the innovative minds and resources of the developer community as a whole. &lt;/p&gt;

&lt;p&gt;Happy holidays, stay safe, and well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/stephengoldberg"&gt;Stephen Goldberg, CEO &amp;amp; Co-Founder&lt;/a&gt; &lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>culture</category>
      <category>startup</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The Cost of a Websites: From Landing Page to the Complex Platform</title>
      <author>Maksym Babych</author>
      <pubDate>Tue, 22 Dec 2020 15:18:22 +0000</pubDate>
      <link>https://dev.to/maksymbabych/the-cost-of-a-websites-from-landing-page-to-the-complex-platform-4idf</link>
      <guid>https://dev.to/maksymbabych/the-cost-of-a-websites-from-landing-page-to-the-complex-platform-4idf</guid>
      <description>&lt;p&gt;When you ask how much does it cost to make a business website to a developer, the answer can be. &lt;/p&gt;

&lt;p&gt;How much are you looking to spend?&lt;/p&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;p&gt;What kind of platform do you want to make?&lt;/p&gt;

&lt;p&gt;There is no denying the fact that you need a website if you have a business. &lt;/p&gt;

&lt;p&gt;If you are planning to start a business, you need to have at least a landing page before launching. &lt;/p&gt;

&lt;p&gt;So, the answer to your question is how much does it cost to make a website have a range. &lt;/p&gt;

&lt;p&gt;You can expect to incur $1000 to as much as $300,000 as website development costs. &lt;/p&gt;

&lt;p&gt;$1000 being the cost to build a simple and static website. &lt;/p&gt;

&lt;p&gt;On the higher end, $300,000 might sound like a ridiculous figure. &lt;/p&gt;

&lt;p&gt;But that is the price that Airbnb spends to build their platform. &lt;/p&gt;

&lt;p&gt;Within this range, there are levels of website design and development.&lt;/p&gt;

&lt;p&gt;For a typical site with minimal functionalities, expect to put down $20,000 to $25,000 as website creation costs. &lt;/p&gt;

&lt;p&gt;Social media and eCommerce platforms require more investment. &lt;/p&gt;

&lt;p&gt;And in this case, you can expect to spend somewhere between $60,000 to $100,000. &lt;/p&gt;

&lt;p&gt;Lastly, the cost of building a website with highly advanced and includes savvy technological elements is more than $120,000. &lt;/p&gt;

&lt;p&gt;So, as you can see, the final answer to how much does it cost to make a business website is not standardized. &lt;/p&gt;

&lt;p&gt;Instead, there are multiple aspects involved in the calculation of this cost. &lt;/p&gt;

&lt;p&gt;Web Design&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Typical Site - $10,000 to $12,000&lt;/li&gt;
&lt;li&gt;Social Media or eCommerce - $15,000 to $20,000&lt;/li&gt;
&lt;li&gt;Advanced Platform - $25,000 to $35,000&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Development Services&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Typical Site - $10,000 to $12,000&lt;/li&gt;
&lt;li&gt;Social Media or eCommerce - $20,000 to $30,000 &lt;/li&gt;
&lt;li&gt;Advanced - $50,000 to $60,000&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Website Marketing&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Typical Site - $2000 to $4000 (per month)&lt;/li&gt;
&lt;li&gt;Social Media or eCommerce - $4,000 to $8,000&lt;/li&gt;
&lt;li&gt;Advanced - $10,000 to $15,000&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Website Maintenance (per month)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Typical Site - $500 to $700&lt;/li&gt;
&lt;li&gt;Social Media or eCommerce - $1500 to $2500&lt;/li&gt;
&lt;li&gt;Advanced - $3000 to $5000&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that you have a general idea about how much does it cost to make a website, let’s get into the details. &lt;/p&gt;

&lt;p&gt;Indeed, we won’t leave you guessing about how this cost adds up. &lt;/p&gt;

&lt;p&gt;Moreover, it is essential to understand every single aspect associated with website creation. &lt;/p&gt;

&lt;p&gt;However, this itinerary of costs takes inspiration from our experience in delivering multiple projects. &lt;/p&gt;

&lt;p&gt;Because every business is unique and has an exclusive value proposition, the website creation cost for the same can also vary. &lt;/p&gt;

&lt;p&gt;But, with this guide, we aim to give you a general idea about the cost of building a website from tip to toe. &lt;/p&gt;

&lt;p&gt;What follows is a detailed account of &lt;a href="https://spdload.com/blog/how-much-does-it-cost-to-make-a-website-from-scratch/"&gt;how much does it cost to make a business website&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>business</category>
      <category>websites</category>
      <category>startup</category>
    </item>
    <item>
      <title>Create a really nice Discord-like emoji switcher with these 3 simple steps</title>
      <author>Michael Grigoryan</author>
      <pubDate>Tue, 22 Dec 2020 15:06:06 +0000</pubDate>
      <link>https://dev.to/michaelgrigoryan25/create-a-really-nice-discord-like-emoji-switcher-with-these-3-simple-steps-426e</link>
      <guid>https://dev.to/michaelgrigoryan25/create-a-really-nice-discord-like-emoji-switcher-with-these-3-simple-steps-426e</guid>
      <description>&lt;p&gt;So, I use Discord every day. It is a nice piece of software that let's you connect and do more with people very.. no VEEEERY easily. So I'm talking to my friend and then I suddenly got the idea to create an emoji switcher like in Discord!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#step-1-finding-an-emoji-api" class="anchor"&gt;
  &lt;/a&gt;
  Step 1 — Finding an emoji API 📶
&lt;/h1&gt;

&lt;p&gt;I started off by searching for an emoji API and by luck found &lt;a href="https://emoji-api.com/"&gt;this&lt;/a&gt; one.&lt;br&gt;
So I made a key and started testing right away!&lt;br&gt;
When I fetched data from it I got an array with lots and lots of emojis in them. &lt;br&gt;
The object looked like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;character:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"😀"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;codePoint:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1F600"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;group:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"smileys-emotion"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;slug:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"grinning-face"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;subGroup:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"face-smiling"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;unicodeName:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"grinning face"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-2-creating-a-bolierplate-html" class="anchor"&gt;
  &lt;/a&gt;
  Step 2 — Creating a bolierplate HTML 📄
&lt;/h1&gt;

&lt;p&gt;So, this is really straightforward. You just create a basic HTML and hook it up with CSS and JS.&lt;br&gt;
I went with these parameters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"picker"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"script.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-3-styling" class="anchor"&gt;
  &lt;/a&gt;
  Step 3 — Styling ✨
&lt;/h1&gt;

&lt;p&gt;I just added a hover effect on the &lt;code&gt;.picker&lt;/code&gt; defined some initial parameters for the &lt;code&gt;body&lt;/code&gt; tag and that's it! Easy!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.picker&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;user-select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grayscale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;250ms&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.picker&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grayscale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#step-3-the-logic" class="anchor"&gt;
  &lt;/a&gt;
  Step 3 — The Logic 🤖
&lt;/h1&gt;

&lt;p&gt;JavaScript will do all the logic in this project. Here's how it's done:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;accessKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// YOUR EMOJI-API ACCESS KEY GOES HERE&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;picker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.picker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getEmotes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Fetching the data from the api&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://emoji-api.com/emojis?access_key=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;accessKey&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// Getting the response&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// Returning the response&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Fetching emotes with the function we defined earlier&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getEmotes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="c1"&gt;// Getting a random emote from the array&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;emotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

  &lt;span class="c1"&gt;// Setting the text of the p tag to a random emoji&lt;/span&gt;
  &lt;span class="nx"&gt;picker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Setting an event listener. When the mouse hovers we are basically doing the same thing but without fetching the data again&lt;/span&gt;
  &lt;span class="nx"&gt;picker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmouseover&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;_random&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;emotes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="nx"&gt;picker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;character&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That's it! You have successfully built a Discord-like emoji switcher from scratch with vanilla JS, HTML and CSS! Great Job!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What is AJAX ?</title>
      <author>Edwin Henriquez</author>
      <pubDate>Tue, 22 Dec 2020 14:58:19 +0000</pubDate>
      <link>https://dev.to/edwincoder/what-is-ajax-1c8i</link>
      <guid>https://dev.to/edwincoder/what-is-ajax-1c8i</guid>
      <description>&lt;p&gt;Imagine scrolling down on twitter when suddenly the whole page refreshes on you! Imagine this happening every ten seconds just so twitter can show you new tweets. You were probably reading comments or a post that you were very interested in, but now lost your spot because the whole page just refreshed on you. If this happened, you will probably think the website is broken and never want to use it again. To prevent this bad experience, Twitter and Instagram use AJAX. AJAX stands for Asynchronous Javascript and XML. It uses an asynchronous processing model to render dynamic components of a page without having to refresh the entire page. The features that update itself without having to refresh the browser like amount of followers, new tweets, and new post are all results of using AJAX. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#working-ajax" class="anchor"&gt;
  &lt;/a&gt;
  Working AJAX
&lt;/h1&gt;

&lt;p&gt;Since you don’t have to load the whole page the data will load faster! This improves the users experience and also allows users to do other things on the page until that section of the page comes back with new data. AJAX gets the browser to request data from the server. Then the server sends back data that is in  HTML , XML or JSON format. You can read more about &lt;a href="https://www.quirksmode.org/blog/archives/2005/12/the_ajax_respon.html"&gt;AJAX response data formats&lt;/a&gt; here . Once the browser has successfully received the data it needs, it will fire an event that renders the new data to the page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DHCnOZ8e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/muk7go8ql72pz74i8vm3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DHCnOZ8e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/muk7go8ql72pz74i8vm3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This AJAX call is enclosed in a jQuery on click event.&lt;br&gt;
There are some settings you must set before making the AJAX call. The first to take a look at is the &lt;strong&gt;url&lt;/strong&gt; property. You must have the correct endpoint to get back data from your server. In this, i'm using a joke api to render random jokes to my plain Jane page. The &lt;strong&gt;type&lt;/strong&gt; property will take a HTTP verb GET or POST to retrieve data depending on what you need back. GET will retrieve data already saved to the database and POST will update the database with new information retrieved. &lt;strong&gt;Timeout&lt;/strong&gt; will do what it says, timeout after five seconds if the server doesn't respond. &lt;strong&gt;BeforeSend&lt;/strong&gt; method will display loading if it takes a while to load or an error occurs. Finally if the request come back correctly the &lt;strong&gt;success&lt;/strong&gt; function will run which appends my jokes to the web page. If there is a problem with the request, the &lt;strong&gt;error&lt;/strong&gt; function will fire off!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iqedDOE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/do51v7cqcdrfx0vmqtla.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iqedDOE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/do51v7cqcdrfx0vmqtla.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Now when you click the joke button it will request new jokes from the server. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;My example was plain but I wanted to show at the simplest level how AJAX is used. This can be a powerful technique due to its asynchronous processing model. You can improve the users experience by having components on the page render without refreshing the page entirely. It also makes your data load faster. Also, using Ajax with Jquery can also make things easier when requesting and appending data back onto the page. Thank you for reading ! Happy coding!&lt;/p&gt;

</description>
      <category>beginners</category>
    </item>
    <item>
      <title>Murders in the ocean - What I learned (Part 2)</title>
      <author>Denislav Gavrilov 👨‍🚀🤖🤷‍♂️</author>
      <pubDate>Tue, 22 Dec 2020 14:47:48 +0000</pubDate>
      <link>https://dev.to/denislav__/murders-in-the-ocean-what-i-learned-part-2-2nmm</link>
      <guid>https://dev.to/denislav__/murders-in-the-ocean-what-i-learned-part-2-2nmm</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Okay now. I want to start with that I have never played in a hackathon before. Boy, oh, boy did I learn a bunch of new stuff. I always admired people who write their hundreds of lines of code without looking at tutorials/Stack Overflow and look at me now - 650+ lines and counting! Okay, enough with the bragging... Actually, I want to confess. Maybe my code is one huge mess and that's why it has so many lines 😩. Anyway, it seems to be working somehow, and that's what matters, right?!&lt;/p&gt;

&lt;p&gt;Okay, let's get to the point. This is my second post on my DO+DEV hackathon submission and for those of you who don't know what I'm building, I am building a game. A murder mystery game. The rules of the game and how to play instructions are in my first post so go check it out. You can also check the rules on the home page of my app.&lt;/p&gt;

&lt;p&gt;So, in this second part, I want to share with all of you what I learned along the way and try to motivate you to join the hackathon if you aren't already building stuff. If not for this hackathon, I highly recommend giving another one a go!&lt;/p&gt;

&lt;p&gt;The structure of this post will be the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Current status&lt;/li&gt;
&lt;li&gt;What I learned&lt;/li&gt;
&lt;li&gt;What were my challenges&lt;/li&gt;
&lt;li&gt;What is left for my game&lt;/li&gt;
&lt;li&gt;Next steps&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Without further due, let's get right into it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#current-status" class="anchor"&gt;
  &lt;/a&gt;
  Current status
&lt;/h1&gt;

&lt;p&gt;I will post some photos and explain the status of my game.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#starting-screen" class="anchor"&gt;
  &lt;/a&gt;
  Starting Screen
&lt;/h3&gt;

&lt;p&gt;There are now 3 buttons - to the GitHub repo, instructions on how to play, and a link to my personal website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K1Gg-GCH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8m77pjskhlgvwjy7skbr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K1Gg-GCH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8m77pjskhlgvwjy7skbr.png" alt="Start Screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-login" class="anchor"&gt;
  &lt;/a&gt;
  First login
&lt;/h3&gt;

&lt;p&gt;Now all the players who are logged in are being shown before the game is started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h_beT0VC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rjdqzdl0nt820glm9y8o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h_beT0VC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/rjdqzdl0nt820glm9y8o.png" alt="login-shows-names"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#eject-player" class="anchor"&gt;
  &lt;/a&gt;
  Eject Player
&lt;/h3&gt;

&lt;p&gt;Now if a player tries to log in but there is already a player with that name, the 2nd player who tries to join is being disconnected.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lTqnT_q9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g1oqg3tasdgi5kfxwylq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lTqnT_q9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g1oqg3tasdgi5kfxwylq.png" alt="player-ejected-if-existing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dead-player" class="anchor"&gt;
  &lt;/a&gt;
  Dead player
&lt;/h3&gt;

&lt;p&gt;If a player is dead, it's card shows skull and bones at the end of the round (before the discussion round).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FiBUxYuh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/czfjegsnpjwnysbbbrxk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FiBUxYuh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/czfjegsnpjwnysbbbrxk.png" alt="if-dead-player"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quorum-and-jailed-player" class="anchor"&gt;
  &lt;/a&gt;
  Quorum and jailed player
&lt;/h3&gt;

&lt;p&gt;There is a quorum that has to be achieved in order for the voted player to be jailed. In the second photo, the Killer is being ejected and a message that the players won the game, appears. After that, they are being returned to the join screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--spWm0_gy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d9xc68vm2twgk3u43i91.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--spWm0_gy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d9xc68vm2twgk3u43i91.png" alt="quorum"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RwF6Fach--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ucmccsmvq4nggktp8mch.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RwF6Fach--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ucmccsmvq4nggktp8mch.png" alt="killer-ejected-victorious"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-i-learned" class="anchor"&gt;
  &lt;/a&gt;
  What I learned
&lt;/h1&gt;

&lt;p&gt;Oh man, where should I start... I learned so much about javascript (and programming in general) considering my previous skill level, I could write 5 posts about 5 different things and still have material to write about. The first and most important lesson I learned, is what to do if I'm stuck. I just get off my computer, I go do something different and I come back later (10-15 minutes). Something really interesting related to this one is when I went to sleep, I always came back in my best shape. Not sure how sleeping helps me in such an enormous way, but hey, it works!&lt;/p&gt;

&lt;p&gt;The second thing I learned is that there is no better way of learning stuff than to build projects. I mean, I already knew that, but I explored the power of this method.&lt;/p&gt;

&lt;p&gt;The third thing I learned is if I am lazy, I should just start coding and in 10 minutes I will be deep into my code, not thinking about anything else.&lt;/p&gt;

&lt;p&gt;The rest of what I learned, is technical stuff which I will be covering in my future posts. I will list some of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Event listeners are actually working as intended... don't try overwriting them&lt;/li&gt;
&lt;li&gt;The JS .filter is one of the best things when it comes to arrays&lt;/li&gt;
&lt;li&gt;Looping through arrays is not actually that hard&lt;/li&gt;
&lt;li&gt;The JS .map is one powerful tool&lt;/li&gt;
&lt;li&gt;I can now use classes and constructors&lt;/li&gt;
&lt;li&gt;I can now construct a JSON.parse string&lt;/li&gt;
&lt;li&gt;A bunch of generic HTML-related stuff through JS&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-were-my-challenges" class="anchor"&gt;
  &lt;/a&gt;
  What were my challenges
&lt;/h1&gt;

&lt;p&gt;Well, I am having a lot of challenges throughout my way, but that's the fun in building projects, isn't it? The challenge that mostly demotivated me, was at the beginning of my project I did not know how to use classes, constructors, how to call them, and properly get data from them. When I overcame this bottleneck I raised the speed of my programming by a lot. I then had small challenges with socket.io calls but they were nothing like the class one.&lt;/p&gt;

&lt;p&gt;I also had a minor challenge with the naming of my variables, functions, IDs, classes.&lt;/p&gt;

&lt;p&gt;I usually have problems with motivation but since I am on leave from work for 12 days, I am not having such now. I am actually more motivated to code than ever. Makes you wonder...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-left-for-my-game" class="anchor"&gt;
  &lt;/a&gt;
  What is left for my game
&lt;/h1&gt;

&lt;p&gt;The stuff I need to do are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Work with my friend to design the rest of the illustrations&lt;/li&gt;
&lt;li&gt;Make a touch or two on the overall design&lt;/li&gt;
&lt;li&gt;Implement lose game functionality if the killer manages to kill all the players&lt;/li&gt;
&lt;li&gt;Chose a domain&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#next-steps" class="anchor"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h1&gt;

&lt;p&gt;Well, here we are. This is the end of this second part of my 3-part series on how I attended my first hackathon. I learned a lot of stuff and I will certainly be joining more hackathons when I have the time. I am once again highly recommending to everyone who is still not playing in this one, to give it a go. In the end, the project will go in your portfolio anyway so what are you waiting for?!&lt;/p&gt;

&lt;p&gt;For my third post in this series, I will try and explain how my app works, what some pieces of code do so maybe you can fork it and make it better. However, this will be quite hard as there are too many lines of code to explain each and every one of them. Anyway, I will document my code with a lot of comments for you, users, to make it easier to read.&lt;/p&gt;

&lt;p&gt;Alrighty, thanks for reading, and have a great one!&lt;/p&gt;

</description>
      <category>dohackathon</category>
      <category>codenewbie</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>IIFEs JS</title>
      <author>Dimitris Chitas</author>
      <pubDate>Tue, 22 Dec 2020 14:39:28 +0000</pubDate>
      <link>https://dev.to/feco2019/iifie-js-16om</link>
      <guid>https://dev.to/feco2019/iifie-js-16om</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hello there guys!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Today we will speak about IIFEs and why sometimes could be handy for your projects.&lt;/p&gt;

&lt;p&gt;IIFEs in javascript stands for immediately invoked function expressions,in simple terms just a function that runs directly after of its statement.&lt;/p&gt;

&lt;p&gt;Commonly we declare a function on the stack flow and when we need it we call it lets see a quick example.&lt;/p&gt;

&lt;p&gt;Let's imagine that we have a function that we would like to show to us a console message,simple enough?&lt;/p&gt;

&lt;p&gt;It could be something like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function showMessage() {
console('Hello DevCommunity)
};


&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Right?&lt;br&gt;
Right,now if we need to use this function we just say&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;showMessage();
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;with ease we solved our problem.&lt;br&gt;
But what happening if we want to initiate that function instantly.&lt;/p&gt;

&lt;p&gt;In this condition it is where IIFEs be useful, lets see this kind of syntax for the exact example above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(function () {
console.log('Hello')
}) ();
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see,we wrap our function declaration inside parentheses and after the addition of functionality (console.log) , we close them and the curly braces as well, we add one more pair of parentheses out of the function scope that does our job, to invoke this function immediately.&lt;/p&gt;

&lt;p&gt;Of course we can set parameters,so we can say&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(function (text) {
console.log('Hello'  + text)
}) ('Community');

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I hope you got an idea for a better usage of IIFEs.&lt;/p&gt;

&lt;p&gt;Have a nice workday guys, in case for further explanation do not hesitate to contact me or find me in github or linkedin.&lt;br&gt;
GitHub : &lt;a href="https://github.com/feco2019"&gt;https://github.com/feco2019&lt;/a&gt;&lt;br&gt;
Linkedin : &lt;a href="https://www.linkedin.com/in/dimitris-chitas-930285191/"&gt;https://www.linkedin.com/in/dimitris-chitas-930285191/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>iifie</category>
      <category>javascript</category>
      <category>functional</category>
      <category>workflow</category>
    </item>
    <item>
      <title>Acing CSS Grid Model in 2021 with 5 Exercises || CSS 2021 
🔥</title>
      <author>Khondokor Alam</author>
      <pubDate>Tue, 22 Dec 2020 14:03:27 +0000</pubDate>
      <link>https://dev.to/joyshaheb/acing-css-grid-model-in-2021-with-5-exercises-css-2021-51ci</link>
      <guid>https://dev.to/joyshaheb/acing-css-grid-model-in-2021-with-5-exercises-css-2021-51ci</guid>
      <description>&lt;p&gt;Here's a practical guide to learn the CSS Grid System/Model with &lt;strong&gt;High Efficiency&lt;/strong&gt; in 2021 by Building 5 Responsive Layouts across all screen sizes. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#check-the-figma-design-here" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.figma.com/file/OQLU5rBvgCpkR443VmoMGz/CSS-Grid-Model-Dev.to?node-id=0%3A1"&gt;Check The Figma Design Here&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Originally Inspired from &lt;a href="https://dev.to/nghiemthu/master-css-grid-with-5-layouts-in-17-minutes-3phf"&gt;Thu Nghiem&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents-" class="anchor"&gt;
  &lt;/a&gt;
  Table of Contents --
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#level-1"&gt;Level-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#level-2"&gt;Level-2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#level-3"&gt;Level-3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#level-4"&gt;Level-4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#level-5"&gt;Level-5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#level-6"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#youtube" class="anchor"&gt;
  &lt;/a&gt;
  Youtube
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#if-this-is-difficult-for-you-then-see-step-by-step-tutorial-on-youtube" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://youtu.be/OtpDP8k-2iM"&gt;If this is difficult for you then see Step by step Tutorial on Youtube 🔥&lt;/a&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/OtpDP8k-2iM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setup" class="anchor"&gt;
  &lt;/a&gt;
  Setup 🔥
&lt;/h1&gt;

&lt;p&gt;Open &lt;a href="//codepen.io"&gt;Codepen&lt;/a&gt; / any code editor and place these 👇&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scss" class="anchor"&gt;
  &lt;/a&gt;
  SCSS
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Defining Break-Points&lt;/span&gt;

&lt;span class="nv"&gt;$bp&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;mobile&lt;/span&gt;  &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;480px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;tablet&lt;/span&gt;  &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;768px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;desktop&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1440px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Defining our Conditional Media query Mixins.&lt;/span&gt;
&lt;span class="c1"&gt;//To save Time &amp;amp; Coffee.&lt;/span&gt;

&lt;span class="k"&gt;@mixin&lt;/span&gt; &lt;span class="nf"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$screen&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;@each&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$bp&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;//  defining max-width&lt;/span&gt;

    &lt;span class="k"&gt;@if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$screen&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="k"&gt;@content&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Again .......&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Changing The Default Settings..&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//Defining settings of all .box- classes with&lt;/span&gt;
&lt;span class="c1"&gt;//Border color &amp;amp; placing text at Center.&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;class&lt;/span&gt; &lt;span class="o"&gt;^=&lt;/span&gt;&lt;span class="s2"&gt;"box-"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;place-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//Set any color you wish for testing purposes.&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#were-all-set-boys" class="anchor"&gt;
  &lt;/a&gt;
  We're All Set Boys 😆👌
&lt;/h3&gt;

&lt;h1&gt;
  &lt;a href="#level1" class="anchor"&gt;
  &lt;/a&gt;
  Level-1 &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;A beginner Friendly Level XD&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VRHSzy53--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7uakossj8mqxenek5fx4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VRHSzy53--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7uakossj8mqxenek5fx4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html" class="anchor"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Header&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Main&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Footer&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#scss" class="anchor"&gt;
  &lt;/a&gt;
  SCSS
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// The Main Sauce. It means, define --&lt;/span&gt;
&lt;span class="c1"&gt;// [.box-1 auto] [.box-2 1fr unit] &amp;amp; [.box-3 auto]&lt;/span&gt;

  &lt;span class="na"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="m"&gt;1fr&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//Defining gap between rows.&lt;/span&gt;
  &lt;span class="na"&gt;grid-gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#level2" class="anchor"&gt;
  &lt;/a&gt;
  level-2 &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DlWdiWcK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ipy4mkgt21gtpcwlxlvy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DlWdiWcK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ipy4mkgt21gtpcwlxlvy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html" class="anchor"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Left&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Right&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#scss" class="anchor"&gt;
  &lt;/a&gt;
  SCSS
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#for-large-screen" class="anchor"&gt;
  &lt;/a&gt;
  For Large Screen
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Dividing the Width of screen&lt;/span&gt;
&lt;span class="c1"&gt;// in 12 equal fractions.&lt;/span&gt;

  &lt;span class="na"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1fr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="na"&gt;grid-gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There's confusion in picking number of columns to cover with grid-columns. No need to panic. Just add 1. For this case, we want .box-1 to cover 4 columns. so, we write 1/5. Like this 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.box-1&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="c1"&gt;// Cover 4 columns. &lt;/span&gt;
&lt;span class="c1"&gt;//So, start = 1 || end = 4+1 = 5;&lt;/span&gt;
&lt;span class="c1"&gt;// grid-column : start/end; 👈 Short-Hand&lt;/span&gt;

  &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.box-2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="c1"&gt;// Cover remaining columns. &lt;/span&gt;
&lt;span class="c1"&gt;//This value 👇 is taken from .box-1 ☝️&lt;/span&gt;
&lt;span class="c1"&gt;//So, start = 5 || end = 12+1 = 13;&lt;/span&gt;
&lt;span class="c1"&gt;// grid-column : start/end; 👈 Short-Hand&lt;/span&gt;

  &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#for-mobile-screen" class="anchor"&gt;
  &lt;/a&gt;
  For Mobile Screen
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// The Media query mixin we defined at start.&lt;/span&gt;
&lt;span class="c1"&gt;//Took (mobile) 👇 from $bp;&lt;/span&gt;
&lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mobile&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="c1"&gt;// Defining that, make the column 1 piece/100%;&lt;/span&gt;
    &lt;span class="na"&gt;grid-template-columns&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//or, write 1fr&lt;/span&gt;

&lt;span class="c1"&gt;//Defining that, make 2 rows, 1fr (fraction) each,&lt;/span&gt;
    &lt;span class="na"&gt;grid-template-rows&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1fr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// To remove the previously defined values &lt;/span&gt;
  &lt;span class="nc"&gt;.box-1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nc"&gt;.box-2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//inherit defines the original value.&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#lets-change-the-game-with-gridtemplate-areas" class="anchor"&gt;
  &lt;/a&gt;
  Let's Change the Game with Grid-template areas 😎
&lt;/h1&gt;

&lt;p&gt;Life's Quite Easier With Grid-Template-Areas tbh. It allows us to see visually what we're doing. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#level3" class="anchor"&gt;
  &lt;/a&gt;
  Level-3 &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_fhn5jbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y1wpthpx3z2p8c327z3f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_fhn5jbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/y1wpthpx3z2p8c327z3f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html" class="anchor"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;A&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;B&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;C&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#scss" class="anchor"&gt;
  &lt;/a&gt;
  SCSS
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#for-larger-screen" class="anchor"&gt;
  &lt;/a&gt;
  For Larger Screen
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Creating a 12 column X 3 row grid;&lt;/span&gt;

  &lt;span class="na"&gt;grid-template-areas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;Defining&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt; &lt;span class="n"&gt;takes&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt; &lt;span class="n"&gt;takes&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2rows&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt; &lt;span class="n"&gt;takes&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2rows&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;There&lt;/span&gt;&lt;span class="s1"&gt;'s a high chance to get lost here,&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s1"&gt;//so, divide the areas in 3 columns with blank spaces=&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s1"&gt;    "a a a a    a a a a    a a a a"&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s1"&gt;    "b b b b    b b b b    c c c c"&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s1"&gt;    "b b b b    b b b b    c c c c";&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s1"&gt;  grid-gap: 10px;&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s1"&gt;}&lt;/span&gt;&lt;span class="err"&gt;

&lt;/span&gt;&lt;span class="s1"&gt;.box-1{&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s1"&gt;  grid-area: a;&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s1"&gt;}&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s1"&gt;.box-2{&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s1"&gt;  grid-area: b;&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s1"&gt;}&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s1"&gt;.box-3{&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s1"&gt;  grid-area: c;&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="s1"&gt;}&lt;/span&gt;&lt;span class="err"&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#for-mobile-screen" class="anchor"&gt;
  &lt;/a&gt;
  For Mobile Screen
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mobile&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;grid-template-areas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="s2"&gt;"a a a a    a a a a    a a a a"&lt;/span&gt;
    &lt;span class="s2"&gt;"a a a a    a a a a    a a a a"&lt;/span&gt;

    &lt;span class="s2"&gt;"b b b b    b b b b    b b b b"&lt;/span&gt;
    &lt;span class="s2"&gt;"b b b b    b b b b    b b b b"&lt;/span&gt;
    &lt;span class="s2"&gt;"b b b b    b b b b    b b b b"&lt;/span&gt;
    &lt;span class="s2"&gt;"b b b b    b b b b    b b b b"&lt;/span&gt;

    &lt;span class="s2"&gt;"c c c c    c c c c    c c c c"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#level4" class="anchor"&gt;
  &lt;/a&gt;
  Level-4 &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pu8W7wWQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xsbgskef01vaqtg75hep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pu8W7wWQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xsbgskef01vaqtg75hep.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html" class="anchor"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;A&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;B&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;C&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;D&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;E&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#scss" class="anchor"&gt;
  &lt;/a&gt;
  SCSS
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#for-larger-screens" class="anchor"&gt;
  &lt;/a&gt;
  For Larger Screens
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;grid-template-areas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="s2"&gt;"a a a a    a a a a    a a a a"&lt;/span&gt;

    &lt;span class="s2"&gt;"b b b b    b b b b    e e e e"&lt;/span&gt;
    &lt;span class="s2"&gt;"b b b b    b b b b    e e e e"&lt;/span&gt;

    &lt;span class="s2"&gt;"c c c c    d d d d    e e e e"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="na"&gt;grid-gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.box-1&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box-2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box-3&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box-4&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box-5&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#for-mobile-screens-" class="anchor"&gt;
  &lt;/a&gt;
  For Mobile Screens :
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mobile&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;grid-template-areas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 

    &lt;span class="s2"&gt;"a a a a    a a a a    a a a a"&lt;/span&gt;

    &lt;span class="s2"&gt;"b b b b    b b b b    b b b b"&lt;/span&gt;
    &lt;span class="s2"&gt;"b b b b    b b b b    b b b b"&lt;/span&gt;

    &lt;span class="s2"&gt;"c c c c    c c d d    d d d d"&lt;/span&gt;
    &lt;span class="s2"&gt;"e e e e    e e e e    e e e e"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#are-you-winning-son-lets-turn-up-the-heat" class="anchor"&gt;
  &lt;/a&gt;
  Are You winning Son? Let's Turn Up the heat 🥵
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#level5" class="anchor"&gt;
  &lt;/a&gt;
  Level-5 &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r0GeNTqy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lio9zp1fuvq4kj35cn5x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r0GeNTqy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lio9zp1fuvq4kj35cn5x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html" class="anchor"&gt;
  &lt;/a&gt;
  HTML
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;A&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;B&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;C&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;D&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;E&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box-6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;F&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#scss" class="anchor"&gt;
  &lt;/a&gt;
  SCSS
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#for-desktop" class="anchor"&gt;
  &lt;/a&gt;
  For Desktop
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;grid-gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;grid-template-areas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="s2"&gt;"a a a a   a a a a   a a a a"&lt;/span&gt;
    &lt;span class="s2"&gt;"c c b b   b b b b   b b e e"&lt;/span&gt;
    &lt;span class="s2"&gt;"c c d d   d d d d   d d e e"&lt;/span&gt;
    &lt;span class="s2"&gt;"c c d d   d d d d   d d e e"&lt;/span&gt;
    &lt;span class="s2"&gt;"c c d d   d d d d   d d e e"&lt;/span&gt;
    &lt;span class="s2"&gt;"f f f f   f f f f   f f f f"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.box-1&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box-2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box-3&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box-4&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box-5&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box-6&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#for-tablet" class="anchor"&gt;
  &lt;/a&gt;
  For Tablet
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;
&lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tablet&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;grid-template-areas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="s2"&gt;"a a a a   a a a a   a a a a"&lt;/span&gt;
    &lt;span class="s2"&gt;"b b b b   b b b b   b b b b "&lt;/span&gt;
    &lt;span class="s2"&gt;"c c d d   d d d d   d d d d"&lt;/span&gt;
    &lt;span class="s2"&gt;"c c d d   d d d d   d d d d"&lt;/span&gt;
    &lt;span class="s2"&gt;"c c d d   d d d d   d d d d"&lt;/span&gt;
    &lt;span class="s2"&gt;"e e f f   f f f f   f f f f"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#for-mobile-screen" class="anchor"&gt;
  &lt;/a&gt;
  For Mobile Screen
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;
&lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mobile&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;grid-template-areas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="s2"&gt;"a a a a   a a a a   a a a a"&lt;/span&gt;
    &lt;span class="s2"&gt;"b b b b   b b b b   b b b b "&lt;/span&gt;
    &lt;span class="s2"&gt;"c c c c   c c c c   c c c c"&lt;/span&gt;
    &lt;span class="s2"&gt;"d d d d   d d d d   d d d d"&lt;/span&gt;
    &lt;span class="s2"&gt;"d d d d   d d d d   d d d d"&lt;/span&gt;
    &lt;span class="s2"&gt;"d d d d   d d d d   d d d d"&lt;/span&gt;
    &lt;span class="s2"&gt;"e e e e   e e e e   e e e e"&lt;/span&gt;
    &lt;span class="s2"&gt;"f f f f   f f f f   f f f f"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Here's your medal 🎖️ for successfully completing CSS Grid Model/System. ❤️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#suggestions-amp-criticisms-are-highly-appreciated-%EF%B8%8F" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Suggestions &amp;amp; Criticisms are Highly Appreciated ❤️️&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Youtube&lt;a href="//youtube.com/channel/UCHG7IJuST_BXJkne-0u0Xtw"&gt; / Joy Shaheb&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Twitter&lt;a href="https://twitter.com/JoyShaheb"&gt; / JoyShaheb&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Instagram&lt;a href="https://www.instagram.com/joyshaheb/"&gt; / JoyShaheb&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>My Advice to New Programmers After Coding for the Last 3 Years</title>
      <author>Fahad Imran</author>
      <pubDate>Tue, 22 Dec 2020 11:23:14 +0000</pubDate>
      <link>https://dev.to/dailydotdev/my-advice-to-new-programmers-after-coding-for-the-last-3-years-39pf</link>
      <guid>https://dev.to/dailydotdev/my-advice-to-new-programmers-after-coding-for-the-last-3-years-39pf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#my-programming-background-or-lack-thereof" class="anchor"&gt;
  &lt;/a&gt;
  💻 My Programming Background (Or lack thereof)
&lt;/h2&gt;

&lt;p&gt;My journey as a programmer started when I chose to pursue &lt;strong&gt;Software Engineering&lt;/strong&gt; as a major after completing my High School Education. Since then, I have been programming for the better part of the last &lt;strong&gt;3 years&lt;/strong&gt; in various programming languages from Python, Java, C++, and recently JavaScript.&lt;/p&gt;

&lt;p&gt;It is important to mention that I had literally &lt;strong&gt;never&lt;/strong&gt; written a single line of code before starting my bachelor's. In fact, I don't remember taking a computer course throughout my middle and high school years. Suffice it to say. I was not like those students in my class, who had been coding as a hobby for a long time, or those who had already published entire Apps to the Play Store.&lt;/p&gt;

&lt;p&gt;Thus, in all aspects, I was a complete &lt;strong&gt;Newbie&lt;/strong&gt;. Therefore, I also had some &lt;strong&gt;misconceptions&lt;/strong&gt; about programming and coding in general. It took me the better part of the last 2 and a half years to understand my negligence and realize how mistaken I was. Thus, I am writing this blog post to help others who are new to programming like I was by &lt;strong&gt;debunking&lt;/strong&gt; some common misconceptions about programming.&lt;/p&gt;

&lt;p&gt;Enough talking, let's get into it, shall we?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#focus-on-the-fundamentals" class="anchor"&gt;
  &lt;/a&gt;
  🎯 Focus on the Fundamentals
&lt;/h2&gt;

&lt;p&gt;As a new programmer, your number one priority should be to &lt;strong&gt;master the fundamentals&lt;/strong&gt;. By this, I mean you should grasp concepts like variables, data types, data structures, conditionals, loops, algorithms, etc. &lt;/p&gt;

&lt;p&gt;The reason being, once you have sound knowledge of the fundamentals, you can learn any programming language in a matter of days. At the core, all programming languages generally have the same concepts. Good knowledge of the fundamentals will help you regardless of the programming language you choose to pick up.&lt;/p&gt;

&lt;p&gt;With my own example, I can say that once you know the &lt;strong&gt;basics&lt;/strong&gt;, picking up a new language will be &lt;strong&gt;a piece of cake&lt;/strong&gt;. So, if you take away one thing from this post, it should concentrate on sharpening up your fundamental programming concepts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#please-make-lots-of-mistakes" class="anchor"&gt;
  &lt;/a&gt;
  🙏 Please Make Lots of Mistakes
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Fear of making mistakes&lt;/strong&gt; is another big reason people fail at programming. I, too, was in the same boat. I had the notion that a good programmer knows the exact syntax of the language and wrote the perfect code that runs the first time around. This notion &lt;strong&gt;hindered&lt;/strong&gt; my ability to learn new things because I was so afraid of making mistakes that I never even tried.&lt;/p&gt;

&lt;p&gt;This concept of mine was blasted to smithereens in a concise span of time. Writing clean and elegant code that runs on the first try and produces the correct output is nothing short of a &lt;strong&gt;fantasy&lt;/strong&gt;. Even the most experienced developers cannot write fully functioning and error-free code on the first attempt. The sooner you realize this, the faster you will learn from your mistakes.&lt;/p&gt;

&lt;p&gt;You must understand that most of your time coding will be spent on &lt;strong&gt;debugging and looking up errors on the internet.&lt;/strong&gt; To succeed as a developer, you are not expected to memorize the entire syntax of a language in your head. I hardly believe anyone can do that. &lt;/p&gt;

&lt;p&gt;Instead, you focused on effectively &lt;strong&gt;debugging your applications&lt;/strong&gt;. Errors are an essential part of programming. The sooner you feel comfortable seeing red output on the screen screaming at you, the quicker you will master programming. Some of the best programmers I know or follow still spend a considerable amount of time-solving simple errors and looking up syntax that they cannot remember.&lt;/p&gt;

&lt;p&gt;You should also realize that the first time you write a piece of code, it will never be perfect. Instead, a good practice is to write code that works and then refine and &lt;strong&gt;refactor&lt;/strong&gt; that code to make it more readable and concise.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-rely-on-college-to-teach-you-everything" class="anchor"&gt;
  &lt;/a&gt;
  👨‍🎓 Don't Rely on College to teach you everything
&lt;/h2&gt;

&lt;p&gt;By far, the worst notion you could have as a new programmer is expecting the university or college to teach you everything.&lt;br&gt;
Universities follow a fixed curriculum, and while certain courses have greatly benefited me, like Database Systems, Computer Networks, Data structures, and Algorithms, etc. Many courses were not relevant to what is required in the field. &lt;/p&gt;

&lt;p&gt;For example, most universities don't teach you about web development in detail or about tools like git and GitHub, widely used throughout the industry.&lt;/p&gt;

&lt;p&gt;Thus, the cold truth is that you have to &lt;strong&gt;develop a habit of learning on your own&lt;/strong&gt;. In my case, the entire knowledge I have about &lt;strong&gt;web development&lt;/strong&gt; is through my &lt;strong&gt;own efforts&lt;/strong&gt; and learning. While it may be true in other Engineering fields, the programming landscape changes so quickly that educational institutions can't keep pace. Learning to code is a continuous process, and you must keep practicing and expanding your skillset if you want to stay relevant in today's competitive market.&lt;/p&gt;

&lt;p&gt;And the best thing is the &lt;strong&gt;abundance of online resources&lt;/strong&gt; available to help you in this regard. If you want to learn a language or framework, there are probably many tutorials and articles you can consult. So, it's a matter of dedication and hard work you are willing to put in, and you can master a skill in no time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-fall-into-tutorial-hell" class="anchor"&gt;
  &lt;/a&gt;
  😵 Don’t Fall into Tutorial Hell
&lt;/h2&gt;

&lt;p&gt;Another problem that new programmers face is that they tend to fall into &lt;strong&gt;Tutorial Hell&lt;/strong&gt;. Most of us resort to coding tutorials on YouTube and Udemy courses to learn any new language, framework, or skill. But these courses have a critical flaw that many of us don't realize.&lt;/p&gt;

&lt;p&gt;As you follow along with your instructor, you might feel very confident and even feel like you're getting everything. But as soon as you finish a course and try to develop something on your own, you'll feel &lt;strong&gt;completely blank&lt;/strong&gt; and have no idea where even to start. This has happened to me many times, and it's a very sinking feeling.&lt;/p&gt;

&lt;p&gt;The problem with these tutorials and courses is that they teach you how to build a specific application. They don't teach you how to develop the mindset to &lt;strong&gt;solve a particular problem&lt;/strong&gt;. Additionally, you also don't understand why the instructor uses a particular framework or why he/she is writing a piece of code in that way and not the other way round. &lt;/p&gt;

&lt;p&gt;Thus, it just becomes a case of copying code that the instructor is writing and not understanding its reasoning. So, while you may finish the course and build the application yet, you will be &lt;strong&gt;unable&lt;/strong&gt; to code something from scratch on your own.&lt;/p&gt;

&lt;p&gt;Instead, the best way to benefit from these courses is to &lt;strong&gt;modify the code&lt;/strong&gt; after you have finished the project. Try to break the code and change things around. Experiment with a different approach to implementing a specific feature. At the very least, try to add some &lt;strong&gt;functionality&lt;/strong&gt; on top of the course project. By adopting this approach, you will learn &lt;strong&gt;why things work the way they do&lt;/strong&gt; and understand the &lt;strong&gt;purpose&lt;/strong&gt; behind the code instead of merely copying it as your own.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-try-to-master-everything" class="anchor"&gt;
  &lt;/a&gt;
  🏹 Don't try to Master Everything
&lt;/h2&gt;

&lt;p&gt;Finally, the last bit of advice I will give to upcoming programmers is that &lt;strong&gt;you don't have to learn each and everything under the sun&lt;/strong&gt;. When you first start to code, you quickly realize that there are WAY too many fields that you can choose from, and it can be quite overwhelming to decide what you want to do.&lt;/p&gt;

&lt;p&gt;Let me give you a taste of what I am talking about. Let's say you are interested in &lt;strong&gt;Web Development&lt;/strong&gt;. You can choose to become a front-end web developer and work with things like HTML, CSS, JavaScript, Sass, and frameworks like React, Angular, Vue, or libraries like Bootstrap, Tailwind CSS, etc.&lt;/p&gt;

&lt;p&gt;Or you can choose to be a back-end developer and work with languages like Python, PHP, JavaScript or frameworks like Django, Flask, Express, etc., and databases like MySQL, PostgreSQL or MongoDB, etc. &lt;/p&gt;

&lt;p&gt;Or you can choose both and become a full-stack developer and handle both the front and back-end of a web app. Do you see where I am getting at? And this is just one field. &lt;/p&gt;

&lt;p&gt;Maybe you fancy &lt;strong&gt;Mobile Development&lt;/strong&gt; or perhaps &lt;strong&gt;Game Development&lt;/strong&gt;. You might be into &lt;strong&gt;Machine Learning&lt;/strong&gt; or &lt;strong&gt;Artificial Intelligence&lt;/strong&gt; and work with data analysis and training complex neural networks. Or you might want to indulge in the field of &lt;strong&gt;cybersecurity&lt;/strong&gt; and work on ethical hacking and so on.&lt;/p&gt;

&lt;p&gt;Suffice it to say, and whatever you want to do, there is a field for it. My advice is to &lt;strong&gt;choose what you want to specialize in&lt;/strong&gt; and go all out in it. There is a high demand for talented individuals who are great developers in a specific field instead of knowing a bit about everything. So, experiment to find what you like and then focus on mastering skills needed in that field, and you'll be doing better than most.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  💭 Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;Thus, these were some of the things I learned since I started to code. I am in &lt;strong&gt;no way an expert&lt;/strong&gt; yet. This is the essence of what I have personally experienced in my 3 years of programming. I am thrilled to choose this field as my profession, and I want to give back to the community as much as possible. &lt;/p&gt;

&lt;p&gt;For all the new programmers starting, &lt;strong&gt;focus on fundamentals&lt;/strong&gt;, &lt;strong&gt;continue learning in your time&lt;/strong&gt; and &lt;strong&gt;don't forget to have fun!&lt;/strong&gt; 😊&lt;/p&gt;




&lt;p&gt;&lt;em&gt;&lt;a href="https://api.daily.dev/get?r=devto"&gt;daily.dev&lt;/a&gt; delivers the best programming news every new tab. We will rank hundreds of qualified sources for you so that you can hack the future.&lt;/em&gt;&lt;br&gt;
&lt;a href="https://api.daily.dev/get?r=devto"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GnRWXIbg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b996k4sm4efhietrzups.png" alt="Daily Poster"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Responsive Website using CSS Grid</title>
      <author>Olena Drugalya</author>
      <pubDate>Tue, 22 Dec 2020 10:50:19 +0000</pubDate>
      <link>https://dev.to/olenadrugalya/responsive-website-using-css-grid-4i8c</link>
      <guid>https://dev.to/olenadrugalya/responsive-website-using-css-grid-4i8c</guid>
      <description>&lt;p&gt;This blog post describes one of the websites I have built using a powerful tool for building responsive websites - &lt;a href="https://www.w3schools.com/css/css_grid.asp"&gt;CSS Grid layout&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I have watched &lt;a href="https://www.youtube.com/watch?v=T-slCsOrLcc&amp;amp;list=PLu8EoSxDXHP5CIFvt9-ze3IngcdAc2xKG&amp;amp;ab_channel=WesBos"&gt;WesBos tutorial&lt;/a&gt; while I was learning Grid and practiced it afterwards (which is a good way of study for me).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#page-content-and-layout" class="anchor"&gt;
  &lt;/a&gt;
  Page Content and Layout
&lt;/h2&gt;

&lt;p&gt;The page content is pretty simple here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;code&gt;div&lt;/code&gt; with a class &lt;code&gt;wrapper&lt;/code&gt; - main wrapping layout element
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt; Inside the &lt;strong&gt;wrapper&lt;/strong&gt; there is &lt;code&gt;div&lt;/code&gt; with a class &lt;code&gt;top&lt;/code&gt; -  this element is responsible for the content on the top of page:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"top"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt; Inside the &lt;strong&gt;top&lt;/strong&gt;  there are &lt;code&gt;header&lt;/code&gt;, 2 call-to-actions &lt;code&gt;div&lt;/code&gt; areas to the right of the main image:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hero"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"call-to-action call-to-actiont-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"call-to-action call-to-actiont-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;After &lt;strong&gt;top&lt;/strong&gt; there is &lt;code&gt;nav&lt;/code&gt; element for the menu:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;nav&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"menu"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt; Inside the &lt;strong&gt;menu&lt;/strong&gt; navigation there are &lt;code&gt;button&lt;/code&gt; and &lt;code&gt;ul&lt;/code&gt; elements. We create &lt;code&gt;button&lt;/code&gt; here to be able to toggle it and expand/ collapse the menu. &lt;strong&gt;Menu-list&lt;/strong&gt; element contains links of different dishes in the menu:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;aria-expanded=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="na"&gt;aria-controls=&lt;/span&gt;&lt;span class="s"&gt;"menu-list"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"menu-list"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt; Inside the &lt;strong&gt;wrapper&lt;/strong&gt; after &lt;strong&gt;menu&lt;/strong&gt; class there are 3 sections:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"features"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"about"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"gallery"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt; There are 4 &lt;code&gt;div&lt;/code&gt; elements inside &lt;strong&gt;features&lt;/strong&gt; section, they describe Tacos, Beer, Wine and Music:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"feature"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;About&lt;/strong&gt; section contains info about Featured Taco and &lt;strong&gt;gallery&lt;/strong&gt; section contains images.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Every HTML block of code was styled using CSS Grid layout.  The most frequently used CSS properties in this project were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;display: grid&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-gap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;grid-template-areas&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid-template-columns&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;.features {
    display: grid;
    grid-gap: 20px;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Website is fully responsive, we use here &lt;code&gt;@media&lt;/code&gt; queries to re-arrange the page layout according to &lt;code&gt;width&lt;/code&gt;.  See pictures below for desktop, tablet and mobile versions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#desktop-version" class="anchor"&gt;
  &lt;/a&gt;
  Desktop Version
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0AeKMEV5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g2qt99w8ggu8p3yq58b0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0AeKMEV5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g2qt99w8ggu8p3yq58b0.png" alt="page_1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jw_g7GDA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vb37ukik4hw97q1ak1a7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jw_g7GDA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vb37ukik4hw97q1ak1a7.png" alt="page_2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ArucyIF1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/odnogou09whkgqqzr8ud.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ArucyIF1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/odnogou09whkgqqzr8ud.png" alt="page_3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tablet-version" class="anchor"&gt;
  &lt;/a&gt;
  Tablet Version
&lt;/h2&gt;

&lt;p&gt;On tablet version &lt;strong&gt;Menu&lt;/strong&gt; collapses and only &lt;strong&gt;Menu&lt;/strong&gt; button is shown. Also the layout of the page is being changed:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F2InpyhD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1txe7136lnwykx7qn9dt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F2InpyhD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1txe7136lnwykx7qn9dt.png" alt="pic_1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This image demonstrates &lt;strong&gt;Menu&lt;/strong&gt; section  when a user toggles Menu button:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JNCjSXMz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mm1rcn1kh46aci5sbgmh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JNCjSXMz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mm1rcn1kh46aci5sbgmh.png" alt="page_tablet_openMenu.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_T9MOF9a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sfmjrqsyqf11q2r7s0bx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_T9MOF9a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sfmjrqsyqf11q2r7s0bx.png" alt="page_tablet_1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JA7eLlF5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8vnwotqlncxb17i3kurm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JA7eLlF5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8vnwotqlncxb17i3kurm.png" alt="page_tablet_2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mobile-version" class="anchor"&gt;
  &lt;/a&gt;
  Mobile Version
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H-2xScDE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608633051006/HoeaYc7IF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H-2xScDE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608633051006/HoeaYc7IF.png" alt="page_mobile.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F-OjtuCY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608633057363/Nw0jUxo8k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F-OjtuCY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608633057363/Nw0jUxo8k.png" alt="page_mobile_1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zZesdpk0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608633066123/zZa3ZOTpE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zZesdpk0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608633066123/zZa3ZOTpE.png" alt="page_mobile_2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BnUHft-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608633076446/mT3cpTaff.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BnUHft-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608633076446/mT3cpTaff.png" alt="page_mobile_3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to connect on &lt;a href="https://www.linkedin.com/in/olenadrugalya/"&gt;LinkedIn&lt;/a&gt; or &lt;a href="https://twitter.com/OlenaDrugalya"&gt;Twitter&lt;/a&gt; :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ko-fi.com/J3J42JOOA"&gt;&lt;img height="12" width="30%" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KS7c42cU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.ko-fi.com/cdn/kofi1.png%3Fv%3D2" alt="Buy Me a Coffee at ko-fi.com"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Synchronous State With React Hooks</title>
      <author>Adam Nathaniel Davis</author>
      <pubDate>Tue, 22 Dec 2020 10:48:05 +0000</pubDate>
      <link>https://dev.to/bytebodger/synchronous-state-with-react-hooks-1k4f</link>
      <guid>https://dev.to/bytebodger/synchronous-state-with-react-hooks-1k4f</guid>
      <description>&lt;p&gt;Since I've converted my dev to React Hooks (rather than class-based components), I keep running head-first into the asynchronous nature of &lt;code&gt;state&lt;/code&gt; updates.  I don't honestly understand why this rarely seemed like a problem in my class-based components.  But with functions/Hooks, I keep hitting this "roadblock".  And unlike other articles I've written, this isn't my cocky declaration that I have solved &lt;strong&gt;&lt;em&gt;ALL THE THINGS!!!&lt;/em&gt;&lt;/strong&gt;  Rather, I'd be thrilled if someone can show me an improvement on my proposed solution.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IVhJO2VF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6b55iq39bjvoqoth6vu3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IVhJO2VF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6b55iq39bjvoqoth6vu3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-problem" class="anchor"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;We have a complex form.  There are field-level validations.  And form-level validations.  And some of those validations vary based on the values entered into other fields.   &lt;/p&gt;

&lt;p&gt;Because the user's path through the form is not always linear, the logic in the component is broken up, as much as possible, into small manageable functions.  So for example, when you update the &lt;code&gt;Member ID&lt;/code&gt; field, it calls &lt;code&gt;updateMemberId()&lt;/code&gt;.  Then it calls &lt;code&gt;validateMemberId()&lt;/code&gt;, to see if we should show any error messages to the user.  Then it calls &lt;code&gt;validateForm()&lt;/code&gt;, to see if we should be checking all of the other fields on the form.&lt;/p&gt;

&lt;p&gt;So the code ends up looking something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;memberId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setMemberId&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;validateEntireForm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValidateEntireForm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateMemberId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userValue&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setMemberId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;validateMemberId&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;validateEntireForm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;validateForm&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validateForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;validateEntireForm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;setValidateEntireForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;validateMemberId&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// validate the rest of the fields in the form  &lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validateMemberId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// validate based on the CURRENT value of 'memberId'&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;validOrNot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;UX&lt;/span&gt; &lt;span class="nx"&gt;Here&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I won't ask you to mentally "load" this pseudo-code.  So I'll just tell you the problem that I run into:  Tabbing out of the &lt;code&gt;memberId&lt;/code&gt; field triggers &lt;code&gt;updateMemberId()&lt;/code&gt;, which in turn updates the &lt;em&gt;state&lt;/em&gt; value of &lt;code&gt;memberId&lt;/code&gt;, which then leads to calling &lt;code&gt;validateMemberId()&lt;/code&gt;.  Inside &lt;code&gt;validateMemberId()&lt;/code&gt;, we'll be referencing the &lt;em&gt;state&lt;/em&gt; value for &lt;code&gt;memberId&lt;/code&gt; - the value that was set microseconds previously inside &lt;code&gt;updateMemberId()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Of course, even though the value of the &lt;code&gt;memberId&lt;/code&gt; state variable was updated during &lt;code&gt;updateMemberId()&lt;/code&gt;, what happens when &lt;code&gt;validateMemberId()&lt;/code&gt; tries to reference that same variable?  That's right, it doesn't see the &lt;em&gt;latest&lt;/em&gt; value of &lt;code&gt;memberId&lt;/code&gt;.  In fact, it sees whatever was saved into &lt;code&gt;memberId&lt;/code&gt; during the &lt;em&gt;previous&lt;/em&gt; update.  So &lt;code&gt;validateMemberId()&lt;/code&gt; is always one update &lt;em&gt;behind&lt;/em&gt;.  &lt;/p&gt;

&lt;p&gt;Of course, this problem is only exacerbated if we've flipped the &lt;code&gt;validateEntireForm&lt;/code&gt; flag.  Because once &lt;code&gt;validateForm()&lt;/code&gt; gets called, it will also lead to referencing the value of &lt;code&gt;memberId&lt;/code&gt; - which will still be stuck on the &lt;em&gt;previous&lt;/em&gt; value.&lt;/p&gt;

&lt;p&gt;The "problem" is pretty simple - and one that has been inherent in React since it was created.  State updates are &lt;em&gt;asynchronous&lt;/em&gt;.  This was true in class-based components.  It's true with functions/Hooks.  But for whatever reason, I've only recently been running into ever-more headaches from this basic fact.  &lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;setMemberId()&lt;/code&gt; is asynchronous, subsequent references to &lt;code&gt;memberId&lt;/code&gt; don't reflect the most up-to-date value that was just entered by the user.  They reference the &lt;em&gt;previous&lt;/em&gt; value.  And that obviously throws off the validation.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tj5ELhxq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/opfvv9mdpx94fvs17krl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tj5ELhxq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/opfvv9mdpx94fvs17krl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#standard-poor-solutions" class="anchor"&gt;
  &lt;/a&gt;
  Standard (Poor) Solutions
&lt;/h2&gt;

&lt;p&gt;There are several "standard" ways to address this problem.  In some situations, they might be appropriate.  But in most scenarios, I really don't care for them at all.  They include:&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Consolidate all these functions into &lt;em&gt;one&lt;/em&gt; routine.&lt;/strong&gt;  If it's all one function, then we can set one temp variable for the new field value, then use that same temp variable to update the field's state variable, and to check for field-level validity, and to check for global form validity.  But if the "solution" is to stop creating small, targeted, single-use functions, well then... I don't really want to pursue that "solution" at all.&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Explicitly pass the values into each function.&lt;/strong&gt;  For example, &lt;code&gt;updateMemberId()&lt;/code&gt; could grab the newly-entered value and pass it &lt;em&gt;into&lt;/em&gt; &lt;code&gt;validateMemberId()&lt;/code&gt;.  But I don't like that.  Why???  Well, because in this example, the state variable is the &lt;em&gt;system of record&lt;/em&gt;.  In other words, I don't want &lt;code&gt;validateMemberId()&lt;/code&gt; to only validate whatever value was blindly passed into it.  I want that function to validate &lt;em&gt;the current state value&lt;/em&gt;.  And if that's to occur, the function should always be looking back into &lt;em&gt;state&lt;/em&gt; to grab the latest value.  I've also found that, when building complex user interactions, there can sometimes be many different scenarios where a validation needs to be checked.  And during those scenarios, there's not always a convenient variable to pass into the validation function.  During those scenarios, it makes far more sense for the validation function to just grab the state value on its own.&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use reducers.&lt;/strong&gt; I dunno.  Maybe it's because I hate Redux, but I &lt;em&gt;really&lt;/em&gt; dislike feeling compelled to convert most of my calls to &lt;code&gt;useState()&lt;/code&gt; into &lt;code&gt;useReducer()&lt;/code&gt;.  Once you go down the &lt;code&gt;useReducer()&lt;/code&gt; path, more and more &lt;em&gt;and more&lt;/em&gt; of your logic ends up getting sucked out of your components and into all of these helper functions.  And once it's sitting in all those helper functions, most devs feel compelled to start sorting them off into their own separate card catalog of directories.  Before you know it, your previously-simple component has become an 8-file octopus of confusion.&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use &lt;code&gt;useRef()&lt;/code&gt;??&lt;/strong&gt;  I've seen several references to this on the interwebs.  Honestly, any time I start following this rabbit hole, I end up burning precious hours and getting no closer to a solution.  If &lt;code&gt;useRef()&lt;/code&gt; is the answer to this problem, I'd &lt;em&gt;love&lt;/em&gt; to see it.  But so far... it seems lacking.&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use &lt;code&gt;useEffect()&lt;/code&gt;&lt;/strong&gt;  Stop.  No, seriously.  Just... &lt;em&gt;stahp&lt;/em&gt;.  I've seen several threads on the interwebs suggesting that the "solution" to this quandary is to leverage &lt;code&gt;useEffect()&lt;/code&gt;.  The idea is that, for example, when we want to update &lt;code&gt;memberId&lt;/code&gt;, we also create a call to &lt;code&gt;useEffect()&lt;/code&gt; that handles all of the side effects that happen once we update &lt;code&gt;memberId&lt;/code&gt;.  But that often threatens to turn the logic of our components on its ear.  It's not uncommon for me to have a component where changing &lt;em&gt;one&lt;/em&gt; state value forces me to check on the values of &lt;em&gt;several other&lt;/em&gt; state values.  And once you start chunking all of that crap into the dependency array... well, you might as well just start building a whole new tree of Higher Order Components.&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use the &lt;em&gt;verbose&lt;/em&gt; version of the state variable's &lt;em&gt;set&lt;/em&gt; function.&lt;/strong&gt;  This was the avenue I pursued for a while.  But it can get, well... &lt;em&gt;ugly&lt;/em&gt;.  Consider this:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateMemberId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;userValue&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;latestMemberId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;setMemberId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userValue&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;latestMemberId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;userValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;validateMemberId&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;validateEntireForm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;validateForm&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;This... doesn't really solve much.  On one hand, once we're past the &lt;code&gt;setMemberId()&lt;/code&gt; logic, we have the latest-greatest value saved in &lt;code&gt;latestMemberId&lt;/code&gt;.  But we &lt;em&gt;already&lt;/em&gt; had that value saved in &lt;code&gt;userValue&lt;/code&gt; and we'll still need to pass it into all of the downstream functions.  Furthermore, we've started to litter up our logic with &lt;code&gt;async/await&lt;/code&gt; - which is a problem when we have logic that shouldn't &lt;em&gt;really&lt;/em&gt; be asynchronous.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iOBXUmcv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8n6evb95gsglhjrqwuxk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iOBXUmcv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8n6evb95gsglhjrqwuxk.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-problem-simplified" class="anchor"&gt;
  &lt;/a&gt;
  The Problem - Simplified
&lt;/h2&gt;

&lt;p&gt;The "problem" I'm trying to highlight can be distilled down to this basic issue:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;someFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;someValue&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setSomeStateVariable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someConditionBasedOnSomeStateVariable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...won't trigger based on the new value of 'someStateVariable'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;callAFollowOnMethod&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callAFollowOnMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someStateVariable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;//...won't recognize the latest value of 'someStateVariable'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If we want to distill this into an even &lt;em&gt;simpler&lt;/em&gt; example, there are just some times when we really want to do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stateVariable&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;setStateVariable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stateVariable&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="nx"&gt;setStateVariable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stateVariable&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In other words, &lt;em&gt;sometimes&lt;/em&gt;, you really need to update a state variable and know that, very soon thereafter, you can retrieve the &lt;em&gt;latest&lt;/em&gt;, most &lt;em&gt;up-to-date&lt;/em&gt; value, without worrying about asynchronous effects.&lt;/p&gt;

&lt;p&gt;To be absolutely clear, I fully understand that &lt;em&gt;some&lt;/em&gt; things will always be, and &lt;em&gt;should&lt;/em&gt; always be, asynchronous.  For example, if you have three state variables that hold the responses that come back from three consecutive API calls, then &lt;em&gt;of course&lt;/em&gt; those values will be set asynchronously.  &lt;/p&gt;

&lt;p&gt;But when you have three state variables that are consecutively set with three simple scalar values - well... it can be kinda frustrating when those values aren't available to be read &lt;em&gt;immediately&lt;/em&gt;.  In other words, if you can do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then it can be somewhat frustrating when you realize that you can't do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFoo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;setFoo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So... how do we address this???&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lN2Yj5OG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e5f7co2xq6nk83t51sw2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lN2Yj5OG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e5f7co2xq6nk83t51sw2.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#eureka" class="anchor"&gt;
  &lt;/a&gt;
  Eureka(?)
&lt;/h2&gt;

&lt;p&gt;Here's what I've been working with lately.  It's dead-simple.  No clever solution here.  But it satisfies two of my main concerns:&lt;br&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;I want to always have a way to retrieve the &lt;em&gt;absolute latest&lt;/em&gt; state value.&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I'd really like to have the new state value &lt;em&gt;returned to me&lt;/em&gt; after state updates.  This may not seem like that big-of-a-deal - but sometimes, I really wish that the built-in &lt;code&gt;set()&lt;/code&gt; functions  would simply return the new value to me.  (Of course, they &lt;em&gt;can't&lt;/em&gt; simply return the new value, because they're asynchronous.  So all they could return would be a promise.)&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To address these two issues, I created this (super crazy simple) Hook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useTrait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;trait&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateTrait&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;trait&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;updateTrait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;[NOTE: I'm not really sold on the name "trait".  I only used it because I felt it was too confusing to call it some version of "state".  And I didn't want to call the Hook &lt;code&gt;useSynchronousState&lt;/code&gt; because this isn't really synchronous.  It just gives the illusion of synchronicity by employing a second tracking variable.]&lt;/p&gt;

&lt;p&gt;This would get used like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SomeComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTrait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;counter =&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;newValue =&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;counter =&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="na"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Increment&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;UX&lt;/span&gt; &lt;span class="nx"&gt;Here&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is a reasonable impersonation of synchronicity.  By using two variables to track a single state value, we can reflect the change immediately by returning the value of &lt;code&gt;current&lt;/code&gt;.  And we retain the ability to trigger re-renders because we're still using a traditional state variable inside the Hook.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FeyfkdDO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/99s35c3zmpzo55jac14c.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FeyfkdDO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/99s35c3zmpzo55jac14c.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#downsides" class="anchor"&gt;
  &lt;/a&gt;
  Downsides
&lt;/h2&gt;

&lt;p&gt;I don't pretend that this little custom Hook addresses all of the issues inherent in setting a state variable - and then immediately trying to retrieve the &lt;em&gt;latest&lt;/em&gt; value of that state variable.  Here are a few of the objections I anticipate:&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;useTrait()&lt;/code&gt; doesn't work if the value being saved is returned in a &lt;em&gt;truly&lt;/em&gt; asynchronous manner.  For example, if the variable is supposed to hold something that is returned from an API, then you won't be able to simply &lt;code&gt;set()&lt;/code&gt; the value and then, on the very next line, &lt;code&gt;get()&lt;/code&gt; the proper value.  This is only meant for variables that you wouldn't normally think of as being "asynchronous" - like when you're doing something dead-simple, such as saving a number or a string.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It will always be at least &lt;em&gt;somewhat&lt;/em&gt; inefficient.  For every "trait" that's saved, there are essentially &lt;em&gt;two&lt;/em&gt; values being tracked.  In the vast majority of code, trying to fix this "issue" would be a micro-optimization.  But there are certainly &lt;em&gt;some&lt;/em&gt; bulky values that should not be chunked into memory twice, merely for the convenience of being able to immediately retrieve the result of &lt;code&gt;set()&lt;/code&gt; operations.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It's potentially non-idiomatic.  As mentioned above, I'm fully aware that the Children of Redux would almost certainly address this issue with &lt;code&gt;useReducer()&lt;/code&gt;.  I'm not going to try to argue them off that cliff.  Similarly, the Children of Hooks would probably try to address this with &lt;code&gt;useEffect()&lt;/code&gt;.  Personally, I &lt;em&gt;hate&lt;/em&gt; that approach, but I'm not trying to fight that Holy War here.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I feel like I'm overlooking some simpler solution.  I've done the requisite googling on this.  I've read through a pile of StackOverflow threads.  I haven't &lt;em&gt;grokked&lt;/em&gt; any better approach yet.  But this is one of those kinda problems where you just keep thinking that, "I gotta be overlooking some easier way..." &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>hooks</category>
      <category>react</category>
      <category>javascript</category>
      <category>functional</category>
    </item>
    <item>
      <title>Introduction to Web Scraping with Nodejs </title>
      <author>Abdulfatai Suleiman</author>
      <pubDate>Tue, 22 Dec 2020 09:49:22 +0000</pubDate>
      <link>https://dev.to/iamnotstatic/introduction-to-web-scrapping-with-nodejs-208g</link>
      <guid>https://dev.to/iamnotstatic/introduction-to-web-scrapping-with-nodejs-208g</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-web-scraping" class="anchor"&gt;
  &lt;/a&gt;
  What is Web scraping?
&lt;/h3&gt;

&lt;p&gt;Web scraping is the process of extracting content and data from a website. Unlike screen scraping, which only copies pixels displayed onscreen, web scraping extracts underlying HTML code and with it, data stored in a database. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Not all site are allowed to be scraped, you should make enquiries about a site before scraping.&lt;br&gt;
Before scraping a site make an enquiry if you are allowed to scrap the site, you can check the site privacy policy and terms and condition.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#fetching-the-webpage" class="anchor"&gt;
  &lt;/a&gt;
  Fetching the webpage
&lt;/h3&gt;

&lt;p&gt;The site we will be scraping is &lt;a href="https://stackoverflow.com/jobs/"&gt;Stackoverflow Jobs&lt;/a&gt; it is a section where job vacancies are listed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-started" class="anchor"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#step-1-setting-up-the-working-directory" class="anchor"&gt;
  &lt;/a&gt;
  Step 1: Setting up the working directory
&lt;/h4&gt;

&lt;p&gt;Now that we have Node.js and npm installed, we can start with the project. Open up your preferred terminal and run these commands: &lt;/p&gt;

&lt;p&gt;if you don't have Nodejs and npm installed you can check there official docs on how to do that &lt;a href="https://nodejs.org"&gt;NodeJs Docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Create a directory&lt;br&gt;
Move into the directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir web-scraper 
cd web-scraper
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we have a directory for our web-scraper, but we need a package.json, this tells npm information about our project. To do this, (in the same terminal window) we need to run this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm init&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This command will tell npm to initialize a pre-made package.json in our project directory. Just hit enter at all of the prompts, we can worry about those later.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#step-2-install-necessary-packages" class="anchor"&gt;
  &lt;/a&gt;
  Step 2: Install necessary packages
&lt;/h4&gt;

&lt;p&gt;For this project, we will only need two(2) npm package &lt;a href="https://www.npmjs.com/package/axios"&gt;axios&lt;/a&gt; and &lt;a href="https://www.npmjs.com/package/cheerio"&gt;cheerio&lt;/a&gt;. An npm package is essentially a piece of code (“package”) in the npm registry that we can download with a simple command, &lt;code&gt;npm install&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install axios
npm install cheerio
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-3-write-some-code" class="anchor"&gt;
  &lt;/a&gt;
  Step 3: Write some code!
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cheerio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cheerio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://stackoverflow.com/jobs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;//loading response data into a Cheerio instance&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cheerio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;siteName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.-logo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;// This would return the site Name&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;siteName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Essentially, what this above code does is: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To include the modules used in the project with the require function, which is built-in within Node.js.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To make a GET HTTP request to the target web page with Axios..&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice that when a request is sent to the web page, it returns a response. This Axios response object is made up of various components, including data that refers to the payload returned from the server.&lt;/p&gt;

&lt;p&gt;So, when a GET request is made, we output the data from the response, which is in HTML format.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We loaded the response data into a Cheerio instance. This way, we can create a Cheerio object to help us in parsing through the HTML from the target web page and finding the DOM elements for the data we want—just like when using jQuery.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To uphold the infamous jQuery convention, we’ll name the Cheerio object, $.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We used the Cheerio’s selectors syntax to search the elements containing the data we want which is the site name:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, run the app.js file with this command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;node app.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should see something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;static@Abdulfatais-MacBook web-scraper $ node app.js

Stack Overflow
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now let's proceed with writing script to get job vacancies.&lt;/p&gt;

&lt;p&gt;The Below. code looks for a parent class for every job listing and loop through it and then get it properties eg: title, link and date.&lt;br&gt;
You can still select more like the location and amount just target the element name.&lt;/p&gt;

&lt;p&gt;After that, it stores the values in an object then console log the data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cheerio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cheerio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://stackoverflow.com/jobs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;//loading response data into a Cheerio instance&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cheerio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.fl1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.fs-body3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/s&lt;/span&gt;&lt;span class="se"&gt;\s&lt;/span&gt;&lt;span class="sr"&gt;+/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.s-link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;href&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.fc-orange-400&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`https://stackoverflow.com/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;date&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If everything goes well you should get this response on your console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;static@Abdulfatais-MacBook web-scraper $ node app.js

{
  title: '\nFull-Stack Software Engineer            ',
  link: 'https://stackoverflow.com//jobs/471179/full-stack-software-engineer-unhedged',
  date: '5d ago'
}
{
  title: '\nSoftware Engineering            ',
  link: 'https://stackoverflow.com//jobs/473617/software-engineering-jpmorgan-chase-bank-na',
  date: '5h ago'
}
{
  title: '\nSenior Software Engineer (Backend) (m/w/d)            ',
  link: 'https://stackoverflow.com//jobs/471126/senior-software-engineer-backend-m-w-d-gp-9000-gmbh',
  date: '7d ago'
}
{
  title: '\nSenior Backend Engineer Who LoveTypescript            ',
  link: 'https://stackoverflow.com//jobs/470542/senior-backend-engineer-who-loves-typescript-well-health-inc',
  date: '6d ago'
}
{
  title: '\nJava Developer - Software Engineering            ',
  link: 'https://stackoverflow.com//jobs/473621/java-developer-software-engineering-jpmorgan-chase-bank-na',
  date: '5h ago'
}
{
  title: '\nSenior Software Engineer            ',
  link: 'https://stackoverflow.com//jobs/473494/senior-software-engineer-nori',
  date: '7h ago'
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Hopefully, this article was able to take you through the steps of scraping your first website. &lt;/p&gt;

&lt;p&gt;In my other articles to come, if I have the opportunity, I would write about topics on Node.js. Kindly drop your requests in the comment section as well as like.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can also check out my previous article on Creating a &lt;a href="https://iamnotstatic.hashnode.dev/build-your-first-telegram-bot-with-nodejs-cki0wu6ne01mb0ss1cgo0bpq4"&gt;Telegram Bot with Nodejs&lt;/a&gt;.    &lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to use Chart.js in React</title>
      <author>Harshil Parmar</author>
      <pubDate>Tue, 22 Dec 2020 08:42:26 +0000</pubDate>
      <link>https://dev.to/harshilparmar/how-to-use-chart-js-in-react-17jp</link>
      <guid>https://dev.to/harshilparmar/how-to-use-chart-js-in-react-17jp</guid>
      <description>&lt;p&gt;The purpose of this tutorial is to show how to use ChartJS in React. In this tutorial, a small activity logging system is created from scratch.  Based on the activity logged and hours spent, the user will be able to see the relevant chart formed on the screen. At the end of this tutorial, learners will get the basic understanding of ChartJS with React.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo" class="anchor"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://harshilparmar.github.io/React-Chart-Tutorial/"&gt;https://harshilparmar.github.io/React-Chart-Tutorial/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table of contents:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;How will it work?&lt;/li&gt;
&lt;li&gt;Prerequisites&lt;/li&gt;
&lt;li&gt;Development &lt;/li&gt;
&lt;li&gt;Summary&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-will-it-work-" class="anchor"&gt;
  &lt;/a&gt;
  How will it work ?
&lt;/h2&gt;

&lt;p&gt;The app will work according to given steps,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Enter activity &amp;amp; hours spent&lt;/li&gt;
&lt;li&gt;Press Submit or Add another activity&lt;/li&gt;
&lt;li&gt;Charts will be shown(based on the activity &amp;amp; hours logged)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Flow of the web application is shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jGWY9aBy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p70166jz1ymy4nukcmqd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jGWY9aBy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p70166jz1ymy4nukcmqd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  Prerequisites:
&lt;/h2&gt;

&lt;p&gt;To develop the Activity Logging System, we need to use few things. &lt;br&gt;
Those are, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install Node&lt;/li&gt;
&lt;li&gt;Install VSCode&lt;/li&gt;
&lt;li&gt;Install React&lt;/li&gt;
&lt;li&gt;Install Chart&lt;/li&gt;
&lt;li&gt;Install Bootstrap (optional)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s walk through each of them,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Download Node:&lt;br&gt;
&lt;a href="https://nodejs.org/en/download/"&gt;To download node&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install VSCode:&lt;br&gt;
You can visit &lt;a href="https://code.visualstudio.com/download"&gt;here&lt;/a&gt; to download VSCode according to your OS.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install react:&lt;br&gt;
To install react on your machine, please run&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx create-react-app my-app&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
,&lt;/p&gt;

&lt;p&gt;You can visit &lt;a href="https://reactjs.org/docs/create-a-new-react-app.html"&gt;here&lt;/a&gt; for official documentation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install Chart-js:&lt;br&gt;
&lt;br&gt;
&lt;code&gt;npm install react-chartjs-2 chart.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;You can visit &lt;a href="https://www.npmjs.com/package/react-chartjs-2"&gt;here&lt;/a&gt;.&lt;/p&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Install Bootstrap:&lt;br&gt;
&lt;br&gt;
&lt;code&gt;npm i bootstrap&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;You can visit &lt;a href="https://www.npmjs.com/package/bootstrap"&gt;here&lt;/a&gt;.&lt;/p&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#development" class="anchor"&gt;
  &lt;/a&gt;
  Development:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#folder-structure" class="anchor"&gt;
  &lt;/a&gt;
  Folder Structure
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TqvU3G03--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wzo1rpgy3s1a2i0hdtqd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TqvU3G03--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wzo1rpgy3s1a2i0hdtqd.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#styling-in-react" class="anchor"&gt;
  &lt;/a&gt;
  Styling  in React
&lt;/h3&gt;

&lt;p&gt;There are various technics to style react application.We have used CSS Modules style.&lt;br&gt;
There is a separate style file for each component  &lt;code&gt;component-name.module.css&lt;/code&gt;.&lt;br&gt;
We can easily use that by importing them in js/jsx file and access that by &lt;code&gt;className={styles.form}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For more details,you can visit below links: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@dmitrynozhenko/9-ways-to-implement-css-in-react-js-ccea4d543aa3"&gt;https://medium.com/@dmitrynozhenko/9-ways-to-implement-css-in-react-js-ccea4d543aa3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://create-react-app.dev/docs/adding-a-css-modules-stylesheet/"&gt;https://create-react-app.dev/docs/adding-a-css-modules-stylesheet/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#form-component-formjsx" class="anchor"&gt;
  &lt;/a&gt;
  Form component (Form.jsx)
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#form-in-react" class="anchor"&gt;
  &lt;/a&gt;
  Form in React
&lt;/h4&gt;

&lt;p&gt;To make form in react, we have to make states which store local values and change it according to user-inputs.&lt;br&gt;
For Function component we can use useState hook to make state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const initialState = {
  dailyData: [
    {
      activity: "",
      timeSpent: 0,
    },
  ],
  chartLabels: [],
  chartData: [],
  chartColot: [],
};
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;By following  above code snippets, we can initialize state.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const [state, setstate] = useState(initialState);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here initial state will become initial value for our form field.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{state.dailyData.map((data, index) =&amp;gt; (
          &amp;lt;Fragment key={index}&amp;gt;
            &amp;lt;div className="row"&amp;gt;
              &amp;lt;div className="col"&amp;gt;
                &amp;lt;input
                  type="text"
                  name="activity"
                  value={data.activity}
                  className="form-control"
                  onChange={(e) =&amp;gt; onChange(e, index)}
                  placeholder="Activity"
                /&amp;gt;
              &amp;lt;/div&amp;gt;
              &amp;lt;div className="col"&amp;gt;
                &amp;lt;input
                  type="number"
                  name="timeSpent"
                  value={data.timeSpent}
                  className="form-control"
                  onChange={(e) =&amp;gt; onChange(e, index)}
                  placeholder="Time Spent"
                /&amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;br /&amp;gt;
          &amp;lt;/Fragment&amp;gt;
        ))}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There are two fields in our form:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Activity&lt;/li&gt;
&lt;li&gt;Time spent during that activity (in hour)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each field has value property which is linked to state for showing current value of state in a form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const onChange = (e, index) =&amp;gt; {
    let { name, value } = e.target;

    let updatedState = [...state.dailyData];

    updatedState[index][name] = value;

    setstate((previousState) =&amp;gt; {
      return {
        ...previousState,
        dailyData: [...updatedState],
      };
    });
  };
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Onchange event of form will be handle by onChange handler.It will take event object and index of current changed activity.&lt;br&gt;
For that we can use setState method. &lt;br&gt;
For setting state we have to extract name and value from event object.&lt;br&gt;
Here updatedState is temporary variable for mutating state.&lt;/p&gt;

&lt;p&gt;For more details,you can visit: &lt;a href="https://reactjs.org/docs/forms.html"&gt;https://reactjs.org/docs/forms.html&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#add-dynamic-form-field" class="anchor"&gt;
  &lt;/a&gt;
  Add Dynamic form field
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;       &amp;lt;button
          type="button"
          style={{ marginRight: "25px" }}
          name="addNew"
          onClick={addExtraField}
          className="btn btn-outline-success"
         &amp;gt;
          Add Activity
       &amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;To add an extra activity field we have to click a button which will add a new field to current form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const addExtraField = (e) =&amp;gt; {
    let extraActivity = [
      ...state.dailyData,
      {
        activity: "",
        timeSpent: 0,
      },
    ];

    setstate((previousState) =&amp;gt; {
      return {
        ...previousState,
        dailyData: [...extraActivity],
      };
    });
  };
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;On every onClick event, addExtraField method will be called and set state after pushing new property to dailyData array.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pass-data-to-chart" class="anchor"&gt;
  &lt;/a&gt;
  Pass data to Chart
&lt;/h4&gt;

&lt;p&gt;To pass current data to chart, we have to convert data in a specific format (array).&lt;br&gt;
For that we use submit button to convert current state data to specific format. On every submit button click onSubmit method will be called.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const onSubmit = (e) =&amp;gt; {
    e.preventDefault();
    let chartLabels = state.dailyData
      .map((data) =&amp;gt; {
        return data.activity;
      })
      .filter((e) =&amp;gt; e);
    let chartData = state.dailyData
      .map((data) =&amp;gt; {
        return parseInt(data.timeSpent);
      })
      .filter((e) =&amp;gt; e);

    setstate((previousState) =&amp;gt; {
      return {
        ...previousState,
        chartData: chartData,
        chartLabels: chartLabels,
      };
    });
  };
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, we have to convert state object to array using map method of array.&lt;br&gt;
And after that we have to set that data to current state.&lt;/p&gt;

&lt;p&gt;For passing data to chart component we have to check data availability for that we have to use conditional rendering.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{state.chartData.length &amp;amp;&amp;amp; state.chartLabels.length ? (
        &amp;lt;Chart {...state} /&amp;gt;
      ) : null}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Chart will only be rendered if there is a proper data to be passed to the chart.&lt;/p&gt;

&lt;p&gt;For more details,you can visit: &lt;a href="https://reactjs.org/docs/conditional-rendering.html"&gt;https://reactjs.org/docs/conditional-rendering.html&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chart-component-chartjsx" class="anchor"&gt;
  &lt;/a&gt;
  Chart Component (Chart.jsx)
&lt;/h3&gt;

&lt;p&gt;To make charts, we have to use react react-chartjs-2 which is wrapper for Chart.js.&lt;br&gt;
For this tutorial we will make three types of charts Line,Pie,Bar.&lt;br&gt;
For more details,you can visit below links: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/react-chartjs-2"&gt;https://www.npmjs.com/package/react-chartjs-2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jerairrest.github.io/react-chartjs-2/#/"&gt;http://jerairrest.github.io/react-chartjs-2/#/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In every chart we have to pass prop object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Line
          data={{
            labels: props.chartLabels,
            datasets: [
              {
                data: props.chartData,
                label: "Activity",
                borderColor: "#3333ff",
                fill: true,
                backgroundColor: "#CAA6DB",
              },
            ],
          }}
        /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here labels are those activities which we have been passed from Form component.&lt;br&gt;
Datasets have various properties in which data property take data which we have to plot on chart.&lt;br&gt;
For more details,you can visit below links: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jerairrest/react-chartjs-2#properties"&gt;https://github.com/jerairrest/react-chartjs-2#properties&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.newline.co/@dmitryrogozhny/quick-introduction-to-displaying-charts-in-react-with-chartjs-and-react-chartjs-2--a85b4e2e"&gt;https://www.newline.co/@dmitryrogozhny/quick-introduction-to-displaying-charts-in-react-with-chartjs-and-react-chartjs-2--a85b4e2e&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To convert This chart to Bar chart we simply have to import Bar chat from react-chartjs-2 library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Bar
        data={{
          labels: props.chartLabels,
          datasets: [
            {
              data: props.chartData,
              label: "Activity",
              borderColor: "#3333ff",
              fill: true,
              backgroundColor: colorPicker.map(() =&amp;gt; colorPicker[Math.round(Math.random() * 2)])
              ,
            },

          ],
        }}
      /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And same for pie chart&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Pie
        data={{
          labels: props.chartLabels,
          datasets: [
            {
              data: props.chartData,
              label: "Activity",
              borderColor: "#3333ff",
              fill: true,
              backgroundColor: colorPicker.map(() =&amp;gt; colorPicker[Math.round(Math.random() * 2)])
              ,
            },
          ],
        }}
      /&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For other examples of chart you can refer &lt;br&gt;
&lt;a href="http://jerairrest.github.io/react-chartjs-2/#/"&gt;http://jerairrest.github.io/react-chartjs-2/#/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here &lt;code&gt;colorPicker&lt;/code&gt; is an array which we are using to generate random colors for charts &lt;code&gt;colorPicker.map(() =&amp;gt; colorPicker[Math.round(Math.random() * 2)])&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary:
&lt;/h2&gt;

&lt;p&gt;In this tutorial, you learnt how to show data in the form of charts using react.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#points-covered" class="anchor"&gt;
  &lt;/a&gt;
  Points covered:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add new input fields to react app dynamically.&lt;/li&gt;
&lt;li&gt;You can customise the look and feel of charts.&lt;/li&gt;
&lt;li&gt;Real time data representation in form of charts.&lt;/li&gt;
&lt;li&gt;Give random colors to the charts.&lt;/li&gt;
&lt;li&gt;Styling of input fields and buttons using Bootstrap.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#future-scopes" class="anchor"&gt;
  &lt;/a&gt;
  Future scopes:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You can create charts for large data sets using react.&lt;/li&gt;
&lt;li&gt;You can create a Task Management System for an organization/school/universities.&lt;/li&gt;
&lt;li&gt;Customise charts to represent data in a more visually appealing way.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#motivation-behind-the-tutorial" class="anchor"&gt;
  &lt;/a&gt;
  Motivation behind the tutorial
&lt;/h3&gt;

&lt;p&gt;I and my friend (Kathan Trivedi) had taken part in the Facebook Community challenge 2020 &lt;a href="https://developercircles2020.devpost.com/"&gt;https://developercircles2020.devpost.com/&lt;/a&gt; .In which we had to make a basic tutorial about any facebook technology.&lt;/p&gt;

&lt;p&gt;Hope It helps.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>challenge</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
