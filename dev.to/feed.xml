<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>LeetCode Sep' 21 Challenge Series | Day 1 | Largest Time for Given Digits</title>
      <author>geetcloud</author>
      <pubDate>Thu, 02 Sep 2021 17:29:10 +0000</pubDate>
      <link>https://dev.to/geetcloud/leetcode-sep-21-challenge-series-day-1-largest-time-for-given-digits-1glp</link>
      <guid>https://dev.to/geetcloud/leetcode-sep-21-challenge-series-day-1-largest-time-for-given-digits-1glp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#largest-time-for-given-digits"&gt;
  &lt;/a&gt;
  Largest Time for Given Digits
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h3&gt;

&lt;p&gt;Given an array &lt;code&gt;arr&lt;/code&gt;  of 4 digits, find the latest 24-hour time that can be made using each digit  &lt;strong&gt;exactly once&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;24-hour times are formatted as  &lt;code&gt;"HH:MM"&lt;/code&gt;, where  &lt;code&gt;HH&lt;/code&gt; is between &lt;code&gt;00&lt;/code&gt; and &lt;code&gt;23&lt;/code&gt;, and &lt;code&gt;MM&lt;/code&gt; is between &lt;code&gt;00&lt;/code&gt; and &lt;code&gt;59&lt;/code&gt;. The earliest 24-hour time is  &lt;code&gt;00:00&lt;/code&gt;, and the latest is  &lt;code&gt;23:59&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Return  &lt;em&gt;the latest 24-hour time in &lt;code&gt;"HH:MM"&lt;/code&gt;  format&lt;/em&gt;. If no valid time can be made, return an empty string.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: arr = [1,2,3,4]
Output: "23:41"
Explanation: The valid 24-hour times are "12:34", "12:43", "13:24", "13:42", "14:23", "14:32", "21:34", "21:43", "23:14", and "23:41". Of these times, "23:41" is the latest.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: arr = [5,5,5,5]
Output: ""
Explanation: There are no valid 24-hour times as "55:55" is not valid.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: arr = [0,0,0,0]
Output: "00:00"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Example 4:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Input: arr = [0,0,1,0]
Output: "10:00"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; `arr.length == 4`
 `0 &amp;lt;= arr[i] &amp;lt;= 9`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#lets-start"&gt;
  &lt;/a&gt;
  Let's start
&lt;/h3&gt;

&lt;p&gt;Our main goal is to solve the problem and at the same time achieve the best linear time complexity with minimal space complexity. If you are a beginner to problem solving or trying data structure problems, I suggest you start with a brute force approach and then try to optimize your solution to the best time/space complexity.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#analysis"&gt;
  &lt;/a&gt;
  Analysis
&lt;/h3&gt;

&lt;p&gt;Let's start analysing the problem statement. Given the array of 4 digits, we need to find out the latest 24-hour time that can be made using each digit "only once".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PTEpuy_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/eYFXkFqaTrAAAAAi/thinking-think.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PTEpuy_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/eYFXkFqaTrAAAAAi/thinking-think.gif" alt="thinking"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Before jumping into a solution or pseudocode, read the problem statement a couple of times and make sure to understand it well.   &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Based on the problem statement, we understand that we need to compute all the possible combinations of the four digits to find the answer. This will give us a hint immediately that this problem falls under "Dynamic Programming".  It's a very interesting topic to learn all the different approaches to tackle these kind of similar "Permutation &amp;amp; Combination" problems.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G1tmwCsr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630558872941/fzgc3z44d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G1tmwCsr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630558872941/fzgc3z44d.png" alt="White Simple Music Icon Etsy Banner (3).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Try to identify the  keywords like "each digit" can be used "only once".  This is our first clue.  We exactly have four digits to make our "hh:mm" latest hour (final answer).&lt;/li&gt;
&lt;li&gt;Second clue we can think of is to check each digit or hold the digit occurrences of all hh:mm combinations to compare with the array to get our final answer.&lt;/li&gt;
&lt;li&gt;Since we want the latest hour, max hour and minute in a day (24 hour time format) we need to start from the max (23 hr and 59 minute respectively) and iterate backwards to get the latest hour.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So with all these hints and analysis, let's start writing our algorithm or pseudocode.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#algorithm-pseudocode"&gt;
  &lt;/a&gt;
  Algorithm | Pseudocode
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Start iterating from the max hour:minute max time (23:59) and hold all of the 4 digits combinations for each iteration&lt;/li&gt;
&lt;li&gt;Initialise a latest_hour boolean flag at the start to "true".&lt;/li&gt;
&lt;li&gt;If the 4 digits of the single iteration not matching with the 4 elements of the input array, we have not reached the latest_hour. So set the latest_hour flag to false.&lt;/li&gt;
&lt;li&gt;Iterate and continue till we find the latest hour. i.e until the 4 digits combinations match with the 4 elements of the array.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's start writing the solution.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Loop through every hour and digit combination. If we find the exact&lt;br&gt;
four array elements. That's it. That is our answer. &lt;br&gt;
&lt;strong&gt;The Latest 24-hour Time!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#solution-in-java"&gt;
  &lt;/a&gt;
  Solution (in Java)
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;    &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;largestTimeFromDigits&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="o"&gt;--)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;minute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;minute&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="o"&gt;--)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;latest_hour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                    &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

                    &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]++;&lt;/span&gt;
                    &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]++;&lt;/span&gt;
                    &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;minute&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;minute&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]++;&lt;/span&gt;
                    &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;minute&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;minute&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;minute&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]++;&lt;/span&gt;                

                   &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(--&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                            &lt;span class="n"&gt;latest_hour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                        &lt;span class="o"&gt;}&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt;

                    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;latest_hour&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; 
                      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%02d:%02d"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#complexity"&gt;
  &lt;/a&gt;
  Complexity
&lt;/h3&gt;

&lt;p&gt;Time Complexity =&amp;gt; O(23 x 59 x 4)  ==&amp;gt; O(1)&lt;br&gt;
Space Complexity =&amp;gt;  O(1)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;This problem is a very good example of Dynamic Programing. Do check out for more examples in this category for further learning. Dynamic Programming has two methods, Top-down and Bottom-up approach. Be on the lookout for a future article where I explain the two and their differences!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;p&gt;The LeetCode Problem in this article:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://leetcode.com/explore/challenge/card/september-leetcoding-challenge/554/week-1-september-1st-september-7th/3445/"&gt;https://leetcode.com/explore/challenge/card/september-leetcoding-challenge/554/week-1-september-1st-september-7th/3445/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LeetCode September 2021 Challenge&lt;/p&gt;

&lt;p&gt;&lt;a href="https://leetcode.com/explore/challenge/card/september-leetcoding-challenge/"&gt;https://leetcode.com/explore/challenge/card/september-leetcoding-challenge/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading-this-post"&gt;
  &lt;/a&gt;
  Thanks for reading this post!
&lt;/h3&gt;

&lt;p&gt;I hope this article is informative and helpful in some way. If it is, please like and share! Follow me on &lt;a href="https://twitter.com/geetcloud"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.linkedin.com/in/sangeetha-karthik/"&gt;LinkedIn&lt;/a&gt; for related content.&lt;/p&gt;

&lt;p&gt;Happy learning! &lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>leetcode</category>
      <category>beginners</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>JSPS: A VS Code extension for more powerful codebase searches</title>
      <author>Isaac Lyman</author>
      <pubDate>Thu, 02 Sep 2021 16:49:37 +0000</pubDate>
      <link>https://dev.to/isaacdlyman/jsps-a-vs-code-extension-for-more-powerful-codebase-searches-25md</link>
      <guid>https://dev.to/isaacdlyman/jsps-a-vs-code-extension-for-more-powerful-codebase-searches-25md</guid>
      <description>&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=IsaacLyman.js-powered-search"&gt;JS Powered Search&lt;/a&gt; is a VS Code extension that lets you search your codebase using the full power of JavaScript. It's powerful, flexible, stateful, and fast. Today I'm going to briefly walk through what it does and how it works. But first:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-another-search-tool"&gt;
  &lt;/a&gt;
  Why another search tool?
&lt;/h2&gt;

&lt;p&gt;In my mind there are three levels of complexity when it comes to codebase searches.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level 1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;"I need to find every instance of the word ScrollingModalComponent."&lt;/p&gt;

&lt;p&gt;Okay, no problem. Click the Search icon and do a text search. VS Code lets you toggle case sensitivity and whole-word searching, which is a pretty great starting point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level 2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;"I need to find every instance of ScrollingModal, RollingModal, ScrollingModalComponent, and RollingModalComponent, case insensitive. I don't want to find ChildScrollingModal."&lt;/p&gt;

&lt;p&gt;Sounds like you need a Regular Expression. Something like &lt;code&gt;\b(sc)?rollingmodal(component)?\b&lt;/code&gt; should do the trick. Click the RegEx toggle in VS Code's search pane, pop in the RegEx, and you're all set. RegExes are pretty useful and will usually do what you need, but their logical abilities are very limited. And if you don't write them very often, it can be time-consuming to figure out the right syntax. (Pro tip: use &lt;a href="https://regexr.com/"&gt;RegExr&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level 3&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;"I need to find every TypeScript file that's at least 100 lines long, exports a ScrollingModalComponent, uses a &lt;code&gt;.filter&lt;/code&gt; method two or more times, and does &lt;em&gt;not&lt;/em&gt; contain the term RollingModal."&lt;/p&gt;

&lt;p&gt;Granted, perhaps you could figure out a RegEx for this. And if you're an avid RegEx golfer, maybe you even want to. But for most of us this sounds like a headache. Especially if Level 2 was already a headache.&lt;/p&gt;

&lt;p&gt;Be honest: you're going to end up doing a plain-text search for "ScrollingModalComponent" and checking each file by hand. If the search only comes back with ten or so results, no big deal. But if there are tens or hundreds of results? That's going to take up the rest of your day for sure.&lt;/p&gt;

&lt;p&gt;You may wonder, "why can't I just write some custom &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"&gt;&lt;code&gt;Array.filter&lt;/code&gt;&lt;/a&gt; logic and run all my files through it?"&lt;/p&gt;

&lt;p&gt;Now you can.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-jsps-do"&gt;
  &lt;/a&gt;
  What does JSPS do?
&lt;/h2&gt;

&lt;p&gt;JSPS has two main operations: Scaffold and Search.&lt;/p&gt;

&lt;p&gt;Scaffold produces a template file that you can alter to define the search functionality you need. It looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;SearchOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;includeFilePatterns&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt; &lt;span class="c1"&gt;// globs to include, e.g. ['**/*.ts']. Searches all files by default.&lt;/span&gt;
  &lt;span class="nl"&gt;excludeFilePatterns&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt; &lt;span class="c1"&gt;// globs to exclude.&lt;/span&gt;
  &lt;span class="nl"&gt;includeNodeModules&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// (default: false) true if node_modules should be searched. Strongly discouraged.&lt;/span&gt;
  &lt;span class="nl"&gt;maxFileSizeInKB&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// (default: 1000) any files larger than this will be skipped.&lt;/span&gt;
  &lt;span class="nl"&gt;onlyTestLinesInMatchingFiles&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// (default: false) true if searchByLine should only be used on files that pass searchByFile&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getSettings&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;SearchOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// includeFilePatterns: [],&lt;/span&gt;
    &lt;span class="c1"&gt;// excludeFilePatterns: [],&lt;/span&gt;
    &lt;span class="c1"&gt;// includeNodeModules: false,&lt;/span&gt;
    &lt;span class="c1"&gt;// maxFileSizeInKB: 1000,&lt;/span&gt;
    &lt;span class="c1"&gt;// onlyTestLinesInMatchingFiles: false&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;LineSearchMetadata&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;LineSearchOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// A function that accepts a line of text and determines whether it matches your search.&lt;/span&gt;
  &lt;span class="c1"&gt;// If you only want to search by file, set this method to undefined.&lt;/span&gt;
  &lt;span class="nl"&gt;doesLineMatchSearch&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LineSearchMetadata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;searchByLine&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;LineSearchOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;doesLineMatchSearch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;exactly what I'm looking for&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;FileSearchMetadata&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt; &lt;span class="c1"&gt;// The file text as an array of lines&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;FileSearchOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// A function that accepts a file (as a text string) and determines whether the file matches your search.&lt;/span&gt;
  &lt;span class="c1"&gt;// If you only want to search by line, set this method to undefined.&lt;/span&gt;
  &lt;span class="nl"&gt;doesFileMatchSearch&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;fileContents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FileSearchMetadata&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;searchByFile&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;FileSearchOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;doesFileMatchSearch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;another thing I'm looking for&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Three functions are exported. One returns your desired search settings, one returns a function for matching by line, and one returns a function for matching by file.&lt;/p&gt;

&lt;p&gt;So if you want to find every instance of "ScrollingModalComponent" in your codebase, that's a three-step process:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Delete the &lt;code&gt;doesFileMatchSearch&lt;/code&gt; function. We won't need it here.&lt;/li&gt;
&lt;li&gt;Update &lt;code&gt;doesLineMatchSearch&lt;/code&gt; to the following:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;doesLineMatchSearch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ScrollingModalComponent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3 . Run the JSPS Search command.&lt;/p&gt;

&lt;p&gt;All the search settings have sensible defaults, so you most likely won't need to change them for simple searches. And in seconds, you'll have a full list of search results. You can click any of them to jump to the file and line in question.&lt;/p&gt;

&lt;p&gt;Let's revisit that level 3 search.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I need to find every TypeScript file that's at least 100 lines long, exports a ScrollingModalComponent, uses a &lt;code&gt;.filter&lt;/code&gt; method two or more times, and does &lt;em&gt;not&lt;/em&gt; contain the term RollingModal.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;JSPS can do that without breaking a sweat. Here's what the search definition would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;SearchOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;includeFilePatterns&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt; &lt;span class="c1"&gt;// globs to include, e.g. ['**/*.ts']. Searches all files by default.&lt;/span&gt;
  &lt;span class="nl"&gt;excludeFilePatterns&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt; &lt;span class="c1"&gt;// globs to exclude.&lt;/span&gt;
  &lt;span class="nl"&gt;includeNodeModules&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// (default: false) true if node_modules should be searched. Strongly discouraged.&lt;/span&gt;
  &lt;span class="nl"&gt;maxFileSizeInKB&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// (default: 1000) any files larger than this will be skipped.&lt;/span&gt;
  &lt;span class="nl"&gt;onlyTestLinesInMatchingFiles&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// (default: false) true if searchByLine should only be used on files that pass searchByFile&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getSettings&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;SearchOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;includeFilePatterns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;**/*.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;// excludeFilePatterns: [],&lt;/span&gt;
    &lt;span class="c1"&gt;// includeNodeModules: false,&lt;/span&gt;
    &lt;span class="c1"&gt;// maxFileSizeInKB: 1000,&lt;/span&gt;
    &lt;span class="na"&gt;onlyTestLinesInMatchingFiles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;LineSearchMetadata&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;LineSearchOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// A function that accepts a line of text and determines whether it matches your search.&lt;/span&gt;
  &lt;span class="c1"&gt;// If you only want to search by file, set this method to undefined.&lt;/span&gt;
  &lt;span class="nl"&gt;doesLineMatchSearch&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LineSearchMetadata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;searchByLine&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;LineSearchOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;doesLineMatchSearch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;export&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ScrollingModalComponent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;FileSearchMetadata&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;filePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt; &lt;span class="c1"&gt;// The file text as an array of lines&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;FileSearchOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// A function that accepts a file (as a text string) and determines whether the file matches your search.&lt;/span&gt;
  &lt;span class="c1"&gt;// If you only want to search by line, set this method to undefined.&lt;/span&gt;
  &lt;span class="nl"&gt;doesFileMatchSearch&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;fileContents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FileSearchMetadata&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;searchByFile&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;FileSearchOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;doesFileMatchSearch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.filter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;RollingModal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's what happens when you run this as a JSPS Search:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P9M8ZN33--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9quchjok9ve0g2dyut8z.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P9M8ZN33--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9quchjok9ve0g2dyut8z.gif" alt="Running a JSPS Search"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once again, you have the results you need and all you had to do was write a bit of string logic; no RegEx required (although if case sensitivity was an issue, you might need some RegEx for word boundaries or something).&lt;/p&gt;

&lt;p&gt;The final low-key superpower of JSPS is that search definition files are totally saveable and reusable. You can commit a few to your repo as a "table of contents" for new developers; you can collaborate on one with VS Code Live Share; you can send a JSPS file to your team to show them the impact of a large refactor; you can keep advanced searches on your hard drive in case you need them later. It's totally up to you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h2&gt;

&lt;p&gt;VS Code has a very developer-friendly &lt;a href="https://code.visualstudio.com/api/references/vscode-api"&gt;extension API&lt;/a&gt; with above-average documentation (I have some complaints about its Googleability, but that's a topic for another day). Creating a file based on a template is pretty ho-hum stuff with the &lt;code&gt;vscode.window&lt;/code&gt; and TextDocument APIs, so the scaffolding part didn't take long to set up.&lt;/p&gt;

&lt;p&gt;The Search command was more difficult. JSPS has to grab the full text of the current editor window, transpile it to JavaScript, then compile it into a dynamic JavaScript module. On-the-fly transpilation is a basic feature of the &lt;code&gt;typescript&lt;/code&gt; package, but compiling a string to a JavaScript module isn't a basic feature of anything. For that I'm using undocumented features of the &lt;code&gt;Module&lt;/code&gt; package (which is built into Node) via the &lt;code&gt;require-from-string&lt;/code&gt; NPM package. It's not a best practice, but it works--with the caveat that I'm pretty sure &lt;code&gt;import&lt;/code&gt; won't work in search definition files. That's on the &lt;a href="https://github.com/isaaclyman/js-powered-search#wishlist"&gt;roadmap&lt;/a&gt; to look at later.&lt;/p&gt;

&lt;p&gt;From that point, all JSPS has to do is validate your search definition, find files in the workspace that match the provided &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; globs (which is easy, thanks again to the VS Code API), and test each one with the functions you wrote.&lt;/p&gt;

&lt;p&gt;Of course, a search utility like this has a lot of UI and error reporting needs. Luckily, the VS Code API has a ton of UI features to choose from.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h2&gt;

&lt;p&gt;There are some &lt;a href="https://github.com/isaaclyman/js-powered-search#known-issues"&gt;known issues&lt;/a&gt; with JSPS, but from my testing over the last few days it works pretty well. I'm going to be refining it and fixing edge cases for a while (you're welcome to join in at the &lt;a href="https://github.com/isaaclyman/js-powered-search"&gt;official GitHub repo&lt;/a&gt;) before I take it out of preview and publish version 1.0.&lt;/p&gt;

&lt;p&gt;In the meantime, I'd love to have your feedback. Do you see an opportunity to improve performance or UX? Does it break on a particular OS or with particular types of files? What features would you like to see added?&lt;/p&gt;

&lt;p&gt;Long-term, I think a find-and-replace feature that capitalizes on the power of JSPS Search would make a lot of sense, so that's something I want to build soon.&lt;/p&gt;

&lt;p&gt;I hope JSPS is useful when your codebase searches need a power boost. Enjoy!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>programming</category>
      <category>productivity</category>
      <category>vscode</category>
    </item>
    <item>
      <title>Laravel Boilerplate for SaaS Application </title>
      <author>Harish Patel</author>
      <pubDate>Thu, 02 Sep 2021 16:31:43 +0000</pubDate>
      <link>https://dev.to/hrsptl_143/laravel-boilerplate-for-saas-application-la3</link>
      <guid>https://dev.to/hrsptl_143/laravel-boilerplate-for-saas-application-la3</guid>
      <description>&lt;p&gt;I have search for open source SaaS Application boilerplate for developer and found two interesting Open source project which will save your lots of time.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://craterapp.com/"&gt;https://craterapp.com/&lt;/a&gt;
Complete Invoicing Solution
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5H5CPybT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cyo7q29z8mayzx6byu1n.png" alt="image"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Crater is an open-source web &amp;amp; mobile app that helps you track expenses, payments &amp;amp; create professional invoices &amp;amp; estimates.&lt;/p&gt;

&lt;p&gt;Web Application is made using Laravel &amp;amp; VueJS while the Mobile Apps are built using React Native.&lt;/p&gt;

&lt;p&gt;Crater Provides Mobile application as well. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://devdojo.com/wave"&gt;https://devdojo.com/wave&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YOVSZ_is--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6tiwy49jugi2nls08xe.png" alt="image"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Wave is the ultimate Software as a Service Starter Kit packed with awesome features like authentication, subscriptions, invoices, announcements, user profiles, and so much more!&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>saas</category>
      <category>vue</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Simple Accordion Menu using HTML, CSS &amp; Javascript</title>
      <author>Shantanu Jana</author>
      <pubDate>Thu, 02 Sep 2021 16:08:33 +0000</pubDate>
      <link>https://dev.to/shantanu_jana/simple-accordion-menu-using-html-css-javascript-ooo</link>
      <guid>https://dev.to/shantanu_jana/simple-accordion-menu-using-html-css-javascript-ooo</guid>
      <description>&lt;p&gt;In this article, I am going to show you how to create an Accordion Menu menu using HTML, CSS, and JavaScript code. Earlier I showed the design of many more types of &lt;a href="https://www.foolishdeveloper.com/2021/08/animated-accordion-menu.html"&gt;Animated CSS accordion menus&lt;/a&gt;. Now it's time to recreate it with JavaScript.&lt;/p&gt;

&lt;p&gt;The responsive accordion menu has an original heading. When you click on that heading, all the information related to that heading can be seen below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.foolishdeveloper.com/2021/08/animated-accordion-menu.html"&gt;Accordion Menu&lt;/a&gt; is a modern content structure where a large amount of information can be neatly arranged in one place. This type of structure is used on different types of websites. This type of design is mainly used in the FAQ section or question-answer section. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-create-a-box-on-the-webpage"&gt;
  &lt;/a&gt;
  Step 1: Create a box on the webpage
&lt;/h3&gt;

&lt;p&gt;I designed that page using the HTML and CSS code below and created a box on the web page. I have created a box on the web page here and I have added all the headings and information on it. I have used the width of the box 500px and the background color is white.&lt;/p&gt;

&lt;p&gt;I have used box-shadow to make it look brighter. I used &lt;code&gt;border-radius: 5px&lt;/code&gt; to make the four of these boxes somewhat round.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"accordionWrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#16bbce&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.accordionWrapper&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;10%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1.5em&lt;/span&gt; &lt;span class="m"&gt;85px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;);}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w6hq5ugI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4ezze8qers06l3k3l7q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w6hq5ugI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4ezze8qers06l3k3l7q.jpg" alt="Create a box on the webpage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-add-all-the-information-in-the-accordion-menu"&gt;
  &lt;/a&gt;
  Step 2: Add all the information in the Accordion Menu
&lt;/h3&gt;

&lt;p&gt;Now I have added all kinds of headings and information using the following HTML codes. Below I have added three headings and their information in three steps. &lt;/p&gt;

&lt;p&gt;In place of this information, you can use images or something else. I have added 3 information sections here, you can increase or decrease the amount if you want.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"accordionItem open"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"accordionItemHeading"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Accordions Menu HTML CSS &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;+&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"accordionItemContent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This simple accordion degrades gracefully in browsers that don't support JavaScript or CSS.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"accordionItem close"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"accordionItemHeading"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Accordion Menu Javascript  &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;+&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"accordionItemContent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;A JavaScript accordion is made up of a number of expandable/collapsible items. Only one item is ever shown at a time.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"accordionItem close"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"accordionItemHeading"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Accordion Menu Jquery &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;+&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"accordionItemContent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Click an accordion item's heading to expand it. To collapse the item, click it again, or click another item heading.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nujtTHCc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7kbjxjo1k5gdu21yjm9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nujtTHCc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7kbjxjo1k5gdu21yjm9.jpg" alt="Add all the information in the Accordion Menu"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-design-the-information-added-above"&gt;
  &lt;/a&gt;
  Step 3: Design the information added above
&lt;/h3&gt;

&lt;p&gt;I have now designed the information that I added using the HTML code above. First I designed the headings. I have used the heading &lt;code&gt;font-size: 22px&lt;/code&gt; and &lt;code&gt;background: #2980b9&lt;/code&gt;. I used a plus sign (+) with each heading.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.accordionItem&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;'Open-sans'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.accordionItemHeading&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;22px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#2980b9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.accordionItemHeading&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xZLMbUZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxudkmui4kv8d6t75zen.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xZLMbUZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxudkmui4kv8d6t75zen.jpg" alt="Design the information added above"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-design-this-menu-while-it-is-closed"&gt;
  &lt;/a&gt;
  Step 4: Design this menu while it is closed
&lt;/h3&gt;

&lt;p&gt;Now I have decided what this CSS accordion menu will look like when it is open and closed. First I designed the close condition using the following codes. &lt;/p&gt;

&lt;p&gt;Here I have used &lt;code&gt;height: 0px&lt;/code&gt; of the content, which means that its content cannot be seen while it is close.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.close&lt;/span&gt; &lt;span class="nc"&gt;.accordionItemContent&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;ease-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dgnq_BBo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbx9zt7ly1s7zxs0p5vt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dgnq_BBo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbx9zt7ly1s7zxs0p5vt.jpg" alt="Design this menu while it is closed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-design-this-menu-while-it-is-open"&gt;
  &lt;/a&gt;
  Step 5: Design this menu while it is open
&lt;/h3&gt;

&lt;p&gt;Now I have designed the open state using the following CSS codes. This code determines how the content will appear when you click on these headings. &lt;/p&gt;

&lt;p&gt;No specific height of content is given here. This height will depend on the amount of content. Here background color I used white and used a light border around the content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.open&lt;/span&gt; &lt;span class="nc"&gt;.accordionItemContent&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f0f1f1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#ddd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="m"&gt;0.4s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.open&lt;/span&gt; &lt;span class="nc"&gt;.accordionItemHeading&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-top-left-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-top-right-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-bottom-right-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-bottom-left-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#073e63&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#cdd7d8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DsapupJv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76t1va8vrgc18sv5fct5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DsapupJv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76t1va8vrgc18sv5fct5.jpg" alt="Design this menu while it is open"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-6-activate-the-simple-accordion-menu-using-javascript"&gt;
  &lt;/a&gt;
  Step 6: Activate the Simple Accordion Menu Using JavaScript
&lt;/h3&gt;

&lt;p&gt;Now I have activated this menu bar using JavaScript below. This means that when you click on a text, its related information will be seen. I used JavaScript code to activate this work.&lt;/p&gt;

&lt;p&gt;First I set the constants of acordionItem and accordionItemHeading one by one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;accItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByClassName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;accordionItem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;accHD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByClassName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;accordionItemHeading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I have activated this Animated Accordion Menu menu bar using the JavaScript code below. Hope you know the basic javascript if you don't know then you can watch the &lt;a href="https://www.youtube.com/watch?v=EEfQMiMvSUI"&gt;video tutorial&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;accHD&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;accHD&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toggleItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;toggleItem&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;itemClass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;accItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;accItem&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;accordionItem close&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;itemClass&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;accordionItem close&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;accordionItem open&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fQpHTtLI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnmm7rf7kpjd77gvr8e2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fQpHTtLI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnmm7rf7kpjd77gvr8e2.jpg" alt="Activate the Simple Accordion Menu Using JavaScript "&gt;&lt;/a&gt;&lt;br&gt;
Hopefully from the above tutorial, you have learned how to create Accordion Menu using HTML, CSS, and JavaScript.&lt;br&gt;
 I have already made this kind of design through Bootstrap and JQuery. You can see them if you want.&lt;/p&gt;

&lt;p&gt;You can visit my blog for more tutorials like this.&lt;br&gt;
&lt;a href="https://www.foolishdeveloper.com/"&gt;https://www.foolishdeveloper.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>7 Majestic Days of Code Search</title>
      <author>Prosper Otemuyiwa</author>
      <pubDate>Thu, 02 Sep 2021 16:07:50 +0000</pubDate>
      <link>https://dev.to/unicodeveloper/7-days-of-code-search-4eao</link>
      <guid>https://dev.to/unicodeveloper/7-days-of-code-search-4eao</guid>
      <description>&lt;p&gt;Early last week, I started a Twitter thread storm with the hashtag &lt;a href="https://twitter.com/hashtag/7DaysOfSearch"&gt;#7DaysOfSearch&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;For seven days, I showed the beaming developer community how to search for code via the premier code search engine, &lt;a href="https://sourcegraph.com"&gt;sourcegraph.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It was a fantastic experience. I became aware of developers' hunger for better code search tools, so I decided to put all my tweets about &lt;a href="https://twitter.com/hashtag/7DaysOfSearch"&gt;#7DaysOfSearch&lt;/a&gt; in one place. A one-page reference for the &lt;a href="https://twitter.com/hashtag/7DaysOfSearch"&gt;#7DaysofSearch&lt;/a&gt; tweetstorm. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-sourcegraph"&gt;
  &lt;/a&gt;
  What is Sourcegraph?
&lt;/h2&gt;

&lt;p&gt;Sourcegraph is a software tool that enables developers and anyone to search, explore and better understand code faster, with contextual code intelligence to improve developer productivity and automate large-scale code change management.&lt;/p&gt;

&lt;p&gt;On &lt;a href="https://sourcegraph.com"&gt;sourcegraph.com&lt;/a&gt;, you can search for code from open source repositories. &lt;/p&gt;

&lt;p&gt;With an account on &lt;a href="https://sourcegraph.com"&gt;sourcegraph.com&lt;/a&gt;, &lt;a href="https://learn.sourcegraph.com/how-to-add-private-code-repositories-to-sourcegraph"&gt;you can add private&lt;/a&gt; and &lt;a href="https://learn.sourcegraph.com/how-to-add-open-source-software-projects-to-sourcegraph-cloud"&gt;public open-source repositories&lt;/a&gt; and &lt;a href="https://learn.sourcegraph.com/how-to-search-code-with-sourcegraph-a-cheat-sheet"&gt;search for code within those repositories&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7daysofsearch-recap"&gt;
  &lt;/a&gt;
  #7DaysOfSearch Recap
&lt;/h2&gt;

&lt;p&gt;Here's a full rundown:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#day-1-how-to-add-open-source-repositories-to-sourcegraph"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Day 1: How to add open source repositories to Sourcegraph&lt;/strong&gt;
&lt;/h4&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R4rHKxwR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/E9iveGYWUCoxr7b.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--VoDxfUYu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1432223913027702786/Xm7OpV2T_normal.jpg" alt="Bar Raiser profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Bar Raiser
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/unicodeveloper"&gt;@unicodeveloper&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      With OSS projects indexed by &lt;a href="https://twitter.com/sourcegraph"&gt;@sourcegraph&lt;/a&gt;, you'll be able to use code libraries and dependencies more effectively. &lt;br&gt;&lt;br&gt;It's also a faster way to summon code examples while building 😁. &lt;br&gt;&lt;br&gt;Here’s how to add open-source software projects to Sourcegraph Cloud.  &lt;a href="https://twitter.com/hashtag/thread"&gt;#thread&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/7daysofsearch"&gt;#7daysofsearch&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      08:42 AM - 24 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1430088108435984394" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1430088108435984394" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1430088108435984394" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h4&gt;
  &lt;a href="#day-2-how-to-find-error-messages-with-sourcegraph"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Day 2: How to find error messages with Sourcegraph&lt;/strong&gt;
&lt;/h4&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JR4kiMv8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/E9p3qQXXsAISZvU.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--VoDxfUYu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1432223913027702786/Xm7OpV2T_normal.jpg" alt="Bar Raiser profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Bar Raiser
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/unicodeveloper"&gt;@unicodeveloper&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Have you ever been faced with an error message while building software and spent a really long time trying to figure out where it was coming from? 🤔&lt;br&gt;&lt;br&gt;What if you could paste the error message in a code search engine that'll show you where to look? &lt;a href="https://twitter.com/hashtag/7DaysOfSearch"&gt;#7DaysOfSearch&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:46 PM - 25 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1430587410144972805" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1430587410144972805" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1430587410144972805" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h4&gt;
  &lt;a href="#day-3-how-to-add-private-code-repositories-to-sourcegraph"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Day 3: How to add private code repositories to Sourcegraph&lt;/strong&gt;
&lt;/h4&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qobTGp6P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/E9vKtzqWUAIOPx6.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--VoDxfUYu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1432223913027702786/Xm7OpV2T_normal.jpg" alt="Bar Raiser profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Bar Raiser
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/unicodeveloper"&gt;@unicodeveloper&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Searching code across your personal &amp;amp; organization private repositories is a very common activity. We all do it, but do we enjoy it?&lt;br&gt;&lt;br&gt;The larger the codebase, the harder it is to search for code seamlessly.&lt;br&gt;&lt;br&gt;I'll show how you can do that easily with &lt;a href="https://twitter.com/sourcegraph"&gt;@sourcegraph&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/7DaysOfSearch"&gt;#7DaysOfSearch&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      18:27 PM - 26 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1430960205467111433" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1430960205467111433" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1430960205467111433" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h4&gt;
  &lt;a href="#day-4-how-to-search-code-with-sourcegraph-using-literal-patterns"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Day 4: How to search code with Sourcegraph using literal patterns&lt;/strong&gt;
&lt;/h4&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oieMfluP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/E9zgKbqWUAIV_-I.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--VoDxfUYu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1432223913027702786/Xm7OpV2T_normal.jpg" alt="Bar Raiser profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Bar Raiser
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/unicodeveloper"&gt;@unicodeveloper&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Sourcegraph supports three kinds of search patterns: literal, regular expression, &amp;amp; structural. &lt;br&gt;&lt;br&gt;By default, all search queries on &lt;a href="https://twitter.com/sourcegraph"&gt;@sourcegraph&lt;/a&gt;  are treated as literal patterns.&lt;br&gt;&lt;br&gt;If you know the exact string that you’re looking for in a codebase such as... &lt;a href="https://twitter.com/hashtag/7DaysOfSearch"&gt;#7DaysOfSearch&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:40 PM - 27 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1431265267510820866" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1431265267510820866" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1431265267510820866" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h4&gt;
  &lt;a href="#day-5-how-to-search-code-with-sourcegraph-using-regular-expression"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Day 5: How to search code with Sourcegraph using regular expression&lt;/strong&gt;
&lt;/h4&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XUIO6JD---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/E95nB-0WUAY1jPm.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--VoDxfUYu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1432223913027702786/Xm7OpV2T_normal.jpg" alt="Bar Raiser profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Bar Raiser
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/unicodeveloper"&gt;@unicodeveloper&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      When it comes to search, regex is not a stranger. It's well known for its pattern-matching features.&lt;br&gt;&lt;br&gt;With &lt;a href="https://twitter.com/sourcegraph"&gt;@sourcegraph&lt;/a&gt;, you can search for code using regular expressions. Yup, you can do that! 😎 &lt;a href="https://twitter.com/hashtag/7DaysOfSearch"&gt;#7DaysOfSearch&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:07 PM - 28 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1431695027332341760" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1431695027332341760" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1431695027332341760" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h4&gt;
  &lt;a href="#day-6-how-to-search-code-with-sourcegraph-using-structural-search-patterns"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Day 6: How to search code with Sourcegraph using structural search patterns&lt;/strong&gt;
&lt;/h4&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---VSd_Mjh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/E-BTTrAXoAYvb3d.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--VoDxfUYu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1432223913027702786/Xm7OpV2T_normal.jpg" alt="Bar Raiser profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Bar Raiser
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/unicodeveloper"&gt;@unicodeveloper&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      In previous episodes of &lt;a href="https://twitter.com/hashtag/7DaysOfSearch"&gt;#7DaysOfSearch&lt;/a&gt;, I covered literal and regular expression searches on &lt;a href="https://twitter.com/sourcegraph"&gt;@sourcegraph&lt;/a&gt;.&lt;br&gt;&lt;br&gt;I'll show you how to perform a structural code search on &lt;a href="https://t.co/BJ186lLffG"&gt;sourcegraph.com&lt;/a&gt;.  It's breathtaking and amazing! 🔥🚀 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      06:59 AM - 30 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1432236512465362945" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1432236512465362945" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1432236512465362945" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h4&gt;
  &lt;a href="#day-7-code-search-tips-and-tricks-with-sourcegraph"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Day 7: Code search tips and tricks with Sourcegraph&lt;/strong&gt;
&lt;/h4&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S8PSXNCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/E-H1wkUXMA0J5a5.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--VoDxfUYu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1432223913027702786/Xm7OpV2T_normal.jpg" alt="Bar Raiser profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Bar Raiser
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/unicodeveloper"&gt;@unicodeveloper&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      To round up &lt;a href="https://twitter.com/hashtag/7DaysOfSearch"&gt;#7DaysOfSearch&lt;/a&gt;, I'll cover some of the search tricks you can use to search code on &lt;a href="https://twitter.com/sourcegraph"&gt;@sourcegraph&lt;/a&gt;. Let's go! 🔥🚀&lt;br&gt;&lt;br&gt;1. Search code within an organization’s repository.&lt;br&gt;&lt;br&gt;Let's search for how Carbon::now &amp;amp; Auth::guard is used in all of &lt;a href="https://twitter.com/laravelphp"&gt;@laravelphp&lt;/a&gt;'s repositories. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:28 PM - 31 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1432696887270858755" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1432696887270858755" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1432696887270858755" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#quick-code-search-challenge"&gt;
  &lt;/a&gt;
  Quick Code Search Challenge
&lt;/h2&gt;

&lt;p&gt;Sourcegraph has already indexed more than 1 million reports and is committed to indexing by the end of this year every project on GitHub or GitLab with one or more stars (~5.5 million repositories). So, armed with this information, I'll present a quick challenge!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Challenge:&lt;/strong&gt; You need to get the top 5 GitHub OSS code repositories that use the &lt;strong&gt;navigator.sendBeacon&lt;/strong&gt; Web API. How would you go about it?&lt;/p&gt;

&lt;p&gt;Feel free to post your answer in the comment section or tweet at me (&lt;a href="https://twitter.com/unicodeveloper"&gt;@unicodeveloper&lt;/a&gt; with the hashtag &lt;a href="https://twitter.com/hashtag/7DaysOfSearch"&gt;#7DaysOfSearch&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/sourcegraphcodesearchchallenge"&gt;#SourcegraphCodeSearchChallenge&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;There's a lot to learn about code search. I just scratched the surface of what's possible with &lt;a href="//https:learn.sourcegraph.com"&gt;code search using Sourcegraph&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;As a developer, designer and educational researcher, Sourcegraph provides enough flexibility and power to find code and resources to build your projects quickly!&lt;/p&gt;

&lt;p&gt;Now, I have a few questions for you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What tools do you currently use for code search?&lt;/li&gt;
&lt;li&gt;What would you like to learn about code search?&lt;/li&gt;
&lt;li&gt;If you already use Sourcegraph, what would you like to see or know?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Furthermore, if you found any of the tips from the seven days useful, feel free to like &amp;amp; RT on Twitter. Would you mind dropping your best tip in the comment section?&lt;/p&gt;

</description>
      <category>codesearch</category>
      <category>search</category>
      <category>code</category>
    </item>
    <item>
      <title>⚡ Must read Tech news/tools of the day - Digest #6</title>
      <author>Account03</author>
      <pubDate>Thu, 02 Sep 2021 15:55:51 +0000</pubDate>
      <link>https://dev.to/account03/must-read-tech-news-tools-of-the-day-digest-6-31pm</link>
      <guid>https://dev.to/account03/must-read-tech-news-tools-of-the-day-digest-6-31pm</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DJyfm8Xt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kVzXltq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJyfm8Xt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kVzXltq.png" alt="articleImg"&gt;&lt;/a&gt;&lt;br&gt;
Each day we handpick the best web content across different websites eg: Hackernews, Github, Reddit... to help you stay updated with the hottest trends!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#level-up-your-skills-with-these-github-repositories"&gt;
  &lt;/a&gt;
  Level up your 🚀 skills with these Github repositories:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bHVT2yX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.prodapt.com/wp-content/uploads/github.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bHVT2yX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.prodapt.com/wp-content/uploads/github.png" alt="Github"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jdscripts"&gt;
  &lt;/a&gt;
  📙 &lt;a href="https://github.com/ClassmateLin/jd_scripts"&gt;jd_scripts&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;👤 ClassmateLin | ⭐ +471 stars&lt;br&gt;
Scripts&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nucleitemplates"&gt;
  &lt;/a&gt;
  📙 &lt;a href="https://github.com/projectdiscovery/nuclei-templates"&gt;nuclei-templates&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;👤 projectdiscovery | ⭐ +2,064 stars&lt;br&gt;
Community curated list of templates for the nuclei engine to find security vulnerabilities.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#publicapis"&gt;
  &lt;/a&gt;
  📙 &lt;a href="https://github.com/public-apis/public-apis"&gt;public-apis&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;👤 public-apis | ⭐ +154,288 stars&lt;br&gt;
A collective list of free APIs&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#hottest-devto-posts-"&gt;
  &lt;/a&gt;
  🎉 🔥 Hottest Devto posts :
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#i-joined-postman-focusing-on-open-source"&gt;
  &lt;/a&gt;
  📝 &lt;a href="https://dev.to/alejandra_quetzalli/i-m-joining-postman-focusing-on-open-source-2986"&gt;I joined Postman, focusing on Open Source 👩🏼‍🚀&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;👤 Alejandra Quetzalli 🐾 | 👍 +30 reactions&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GZCCZcbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--_gdctejW--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kwcenbcqsi32ti6658uf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GZCCZcbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--_gdctejW--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kwcenbcqsi32ti6658uf.png" alt=""&gt;&lt;/a&gt;Well… the unexpected happened!    I joined Postman to focus on Open Source technologies.   (I've been...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-i-need-math-to-be-a-good-developer"&gt;
  &lt;/a&gt;
  📝 &lt;a href="https://dev.to/codesphere/do-i-need-math-to-be-a-good-developer-ila"&gt;Do I need math to be a good developer?&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;👤 Saji Wang | 👍 +31 reactions&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ojZqPtN4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--eKi2pqOc--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9u2zha8x0lfl19e9fw78.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ojZqPtN4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--eKi2pqOc--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9u2zha8x0lfl19e9fw78.png" alt=""&gt;&lt;/a&gt;Written by Dan Parry at Codesphere  There seems to be a common perception that math and coding are...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-shiba-inu-loading-and-error-svgs-to-my-react-site"&gt;
  &lt;/a&gt;
  📝 &lt;a href="https://dev.to/abbeyperini/adding-shiba-inu-loading-and-error-svgs-to-my-react-site-lnj"&gt;Adding Shiba Inu Loading and Error SVGs to My React Site&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;👤 Abbey Perini | 👍 +21 reactions&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NBHYmwnS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--yCpsCRzy--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1pxygzt4l1teaspmhck.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NBHYmwnS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--yCpsCRzy--/c_imagga_scale%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1pxygzt4l1teaspmhck.png" alt=""&gt;&lt;/a&gt;When I updated the blog section of my portfolio site, I realized I had a great opportunity to draw...&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#keep-an-eye-on-these-cool-products-too"&gt;
  &lt;/a&gt;
  👀 Keep an eye on these cool products too:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#ecommerce-checklist"&gt;
  &lt;/a&gt;
  🔧 &lt;a href="https://www.producthunt.com/posts/e-commerce-checklist-2?utm_campaign=producthunt-api&amp;amp;utm_medium=api-v2&amp;amp;utm_source=Application%3A+Hackertab+%28ID%3A+42881%29"&gt;E-Commerce Checklist&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;🔺 +232 | 💬 +92 &lt;br&gt;
200+ tools to launch &amp;amp; grow your online store in Notion&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DbnA3Bny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ph-files.imgix.net/0519781b-c93f-4f2a-8c94-2354b99fe354.png%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DbnA3Bny--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ph-files.imgix.net/0519781b-c93f-4f2a-8c94-2354b99fe354.png%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" alt="E-Commerce Checklist"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#earnify"&gt;
  &lt;/a&gt;
  🔧 &lt;a href="https://www.producthunt.com/posts/earnify?utm_campaign=producthunt-api&amp;amp;utm_medium=api-v2&amp;amp;utm_source=Application%3A+Hackertab+%28ID%3A+42881%29"&gt;Earnify&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;🔺 +190 | 💬 +17 &lt;br&gt;
Keep sales teams happy &amp;amp; accountable with engaging contests&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Die2w3DU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ph-files.imgix.net/26057db2-661c-47f4-8609-a05bf85ed184.png%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Die2w3DU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ph-files.imgix.net/26057db2-661c-47f4-8609-a05bf85ed184.png%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" alt="Earnify"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documents-x-by-readdle"&gt;
  &lt;/a&gt;
  🔧 &lt;a href="https://www.producthunt.com/posts/documents-x-by-readdle?utm_campaign=producthunt-api&amp;amp;utm_medium=api-v2&amp;amp;utm_source=Application%3A+Hackertab+%28ID%3A+42881%29"&gt;Documents X by Readdle&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;🔺 +32 | 💬 +2 &lt;br&gt;
The super app for file action&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--THrwmXQi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://ph-files.imgix.net/7a73f496-c1c9-497a-8b6b-4766bc9018cb.gif%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--THrwmXQi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://ph-files.imgix.net/7a73f496-c1c9-497a-8b6b-4766bc9018cb.gif%3Fauto%3Dformat%26fit%3Dcrop%26w%3D100%26h%3D100" alt="Documents X by Readdle"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;🙌 Wrap Up!&lt;br&gt;
That was all for this week.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-hackertab-on-twitter-for-more-tips-hackertabdev"&gt;
  &lt;/a&gt;
  Follow Hackertab on Twitter for more tips: @hackertabdev
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L6HrjVwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/sYGs3ep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L6HrjVwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/sYGs3ep.png" alt="Hackertab"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://hackertab.dev"&gt;Hackertab&lt;/a&gt; turns your New Tab page into a geeky one that keeps you as a developer updated with the best tools, news, jobs and events.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>hackertab</category>
    </item>
    <item>
      <title>Flutter TV App - Video Player example</title>
      <author>rrtutors</author>
      <pubDate>Thu, 02 Sep 2021 15:52:14 +0000</pubDate>
      <link>https://dev.to/rrtutors/flutter-tv-app-video-player-example-322m</link>
      <guid>https://dev.to/rrtutors/flutter-tv-app-video-player-example-322m</guid>
      <description>&lt;p&gt;how to play videos inside tv app. To play videos in Flutter TV app we are using the video_player plugin. In this example we will cover&lt;/p&gt;


&lt;li&gt;Parse json data&lt;/li&gt;
&lt;br&gt;
  &lt;li&gt;Display List inside Listview&lt;/li&gt;
&lt;br&gt;
  &lt;li&gt;Play Video with TV Video Player&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/SNGb9MnYrlM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;For this example we used video_player: ^2.1.14 plugin&lt;/p&gt;

&lt;p&gt;Download Source code of &lt;a href="https://www.rrtutors.com/tutorials/Flutter-TV-App-Video-Player-example"&gt;Flutter TV Video Player Example&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

</description>
    </item>
    <item>
      <title>Shopify + Next.js + Tailwind CSS: Modern eCommerce</title>
      <author>iskurbanov</author>
      <pubDate>Thu, 02 Sep 2021 15:34:11 +0000</pubDate>
      <link>https://dev.to/iskurbanov/shopify-next-js-tailwind-css-modern-ecommerce-4475</link>
      <guid>https://dev.to/iskurbanov/shopify-next-js-tailwind-css-modern-ecommerce-4475</guid>
      <description>&lt;p&gt;&lt;em&gt;Article brought to you by &lt;a href="https://www.buildnextshop.com"&gt;buildnextshop.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the last couple years, we have all gotten extremely comfortable with online shopping. This has pushed e-commerce brands to invest heavily in their online shopping experience. Shopify merchants have seen record growth in 2020 and 2021, driving the demand for Shopify developers. Many Shopify merchants are moving away from themes and starting to venture into headless e-commerce solutions. &lt;/p&gt;

&lt;p&gt;In this article I will be showing you the basics of setting up a headless e-commerce store using Shopify GraphQL Storefront API with Next.js as the frontend framework and tailwind CSS for styling. &lt;/p&gt;

&lt;p&gt;Next.js allows us to create blazing fast stores using static site generation, which is a perfect fit for e-commerce. &lt;/p&gt;

&lt;p&gt;Let's get started:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-setup-nextjs-project-with-tailwind-css"&gt;
  &lt;/a&gt;
  1. Setup Next.js Project with Tailwind CSS
&lt;/h3&gt;

&lt;p&gt;There are many ways to set up a Next.js project but for our project this one is the fastest.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-next-app -e with-tailwindcss build-next-shop
cd build-next-shop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-set-up-shopify-partners-account-and-create-a-new-store"&gt;
  &lt;/a&gt;
  2. Set up Shopify Partners account and create a new store
&lt;/h3&gt;

&lt;p&gt;Navigate to &lt;a href="https://www.shopify.com/partners"&gt;Shopify Partners&lt;/a&gt; and create your Shopify Partners account (if you don't have one already).&lt;/p&gt;

&lt;p&gt;Then, navigate to the Stores tab on the left-hand side and create a new store. &lt;/p&gt;

&lt;p&gt;Among other benefits, a Partners account will allow you to easily manage stores and have unlimited time to work on them before transferring to a client. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-connect-shopify-store-to-nextjs-app"&gt;
  &lt;/a&gt;
  3. Connect Shopify store to Next.js app
&lt;/h3&gt;

&lt;p&gt;Navigate to the Apps tab in your store and hit the "Manage private apps" link at the bottom:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9s4x1usF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygaeq08a34dcvo2oa5yu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9s4x1usF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygaeq08a34dcvo2oa5yu.png" alt="Shopify manage private apps"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Accept the terms and conditions, name your private app "Next.js Connection" and enter your email address. Then scroll down and check &lt;strong&gt;"Allow this app to access your storefront data using using the Storefront API"&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QOiXIYKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5dlos7xyb03genog0ima.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QOiXIYKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5dlos7xyb03genog0ima.png" alt="Storefront API Shopify"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create .env.local file in the root folder of your Next.js app and add these variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SHOPIFY_STOREFRONT_ACCESSTOKEN='storefront api access token'
SHOPIFY_STORE_DOMAIN='yourstore.myshopify.com'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(not all files/folders shown)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;build-next-shop
 ┣ node_modules
 ┣ pages
 ┣ public
 ┣ .env.local *
 ┗ package.json
....
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-install-shopify-graphiql-app"&gt;
  &lt;/a&gt;
  4. Install Shopify GraphiQL App
&lt;/h3&gt;

&lt;p&gt;Navigate to &lt;a href="https://shopify-graphiql-app.shopifycloud.com/"&gt;Shopify GraphiQL App&lt;/a&gt;, scroll to the bottom, hit "Select all" scopes for Storefront API access, and install the Shopify GraphiQL app that will help you to test your queries before you use them in your app.&lt;/p&gt;

&lt;p&gt;Now open the GraphiQL app, choose the Storefront API schema and paste this into the query field:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  products(first:5) {
    edges {
      node {
        id
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5yeS2myE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eerkv9md5lry74yvumup.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5yeS2myE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eerkv9md5lry74yvumup.png" alt="Shopify GraphiQL app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congrats! You made your first Storefront API query!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-fetching-products-in-nextjs-storefront"&gt;
  &lt;/a&gt;
  5. Fetching Products in Next.js Storefront
&lt;/h3&gt;

&lt;p&gt;Inside your Next.js app, create a lib folder in the root directory and create a shopify.js file inside of it. &lt;/p&gt;

&lt;p&gt;(not all files/folders shown)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;build-next-shop
 ┣ lib
 ┃ ┗ shopify.js *
 ┣ node_modules
 ┣ pages
 ┣ public
 ┣ .env.local
 ┗ package.json
....
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fill out shopify.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const domain = process.env.SHOPIFY_STORE_DOMAIN
const storefrontAccessToken = process.env.SHOPIFY_STOREFRONT_ACCESSTOKEN

async function ShopifyData(query) {
  const URL = `https://${domain}/api/2021-07/graphql.json`

  const options = {
    endpoint: URL,
    method: "POST",
    headers: {
      "X-Shopify-Storefront-Access-Token": storefrontAccessToken,
      "Accept": "application/json",
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ query })
  }

  try {
    const data = await fetch(URL, options).then(response =&amp;gt; {
      return response.json()
    })

    return data
  } catch (error) {
    throw new Error("Products not fetched")
  }
}

export async function getAllProducts() {
  const query = `
  {
  products(first: 25) {
    edges {
      node {
        id
        title
        handle
        priceRange {
          minVariantPrice {
            amount
          }
        }
        images(first: 5) {
          edges {
            node {
              originalSrc
              altText
            }
          }
        }
      }
    }
  }
}
`

  const response = await ShopifyData(query)

  const allProducts = response.data.products.edges ? response.data.products.edges : []

  return allProducts
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we are doing here: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Creating a function called ShopifyData that will accept a query. &lt;/li&gt;
&lt;li&gt;ShopifyData it will make a POST request to the Shopify Storefront GraphQL API using the set headers and return the json response. &lt;/li&gt;
&lt;li&gt;ShopifyData function will return the data to the getAllProducts function which will set it equal to the allProducts variable. &lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#6-displaying-products-on-homepage"&gt;
  &lt;/a&gt;
  6. Displaying Products on homepage
&lt;/h3&gt;

&lt;p&gt;Inside your index.js file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { getAllProducts } from "../lib/shopify"

export default function Home({ products }) {

  return (
    &amp;lt;div className="bg-white"&amp;gt;
      &amp;lt;div className="max-w-2xl mx-auto py-16 px-4 sm:py-24 sm:px-6 lg:max-w-7xl lg:px-8"&amp;gt;
        &amp;lt;h2 className="text-2xl font-extrabold text-gray-900 mb-6"&amp;gt;
          Products
        &amp;lt;/h2&amp;gt;
        &amp;lt;div className="grid grid-cols-1 gap-y-10 gap-x-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 xl:gap-x-8"&amp;gt;
         {
            products.map(product =&amp;gt; (
              &amp;lt;ProductCard key={product.node.id} product={product} /&amp;gt;
            ))
          }
       &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  )
}

export async function getStaticProps() {
  const products = await getAllProducts()

  return {
    props: { products }, // will be passed to the page component as props
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a ProductCard.js component in a new folder called components:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;build-next-shop
 ┣ components
 ┃ ┗ ProductCard.js *
 ┣ lib
 ┣ node_modules
 ┣ pages
 ┣ public
 ┣ .env.local
 ┗ package.json
....
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then inside of ProductCard.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Link from 'next/link'
import Image from 'next/image'
import { formatter } from '../utils/helpers'

const ProductCard = ({ product }) =&amp;gt; {
  const { handle, title } = product.node

  const { altText, originalSrc } = product.node.images.edges[0].node

  const price = product.node.priceRange.minVariantPrice.amount

  return (
    &amp;lt;Link
      href={`/products/${handle}`}
    &amp;gt;
      &amp;lt;a className="group"&amp;gt;
        &amp;lt;div className="w-full bg-gray-200 rounded-3xl overflow-hidden"&amp;gt;
          &amp;lt;div className="relative group-hover:opacity-75 h-72"&amp;gt;
            &amp;lt;Image 
              src={originalSrc}
              alt={altText}
              layout="fill"
              objectFit="cover"
            /&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;h3 className="mt-4 text-lg font-medium text-gray-900"&amp;gt;{title}&amp;lt;/h3&amp;gt;
        &amp;lt;p className="mt-1 text-sm text-gray-700"&amp;gt;{formatter.format(price)}&amp;lt;/p&amp;gt;
      &amp;lt;/a&amp;gt;
    &amp;lt;/Link&amp;gt;
  )
}

export default ProductCard
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What's happening here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We are using the &lt;a href="https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation"&gt;getStaticProps&lt;/a&gt; function provided to us by Next.js to prefetch all the products from the getAllProducts function from our shopify.js file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Passing the products as a prop to our homepage function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creating a ProductCard.js to display a single product card. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mapping over the products and displaying the ProductCard.js for each one. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#congratulations-you-just-created-your-basic-shopify-nextjs-storefront"&gt;
  &lt;/a&gt;
  Congratulations! You just created your basic Shopify Next.js Storefront.
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps:
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Dynamic product pages using the &lt;a href="https://nextjs.org/docs/basic-features/data-fetching#getstaticpaths-static-generation"&gt;getStaticPaths&lt;/a&gt; Next.js function. &lt;/li&gt;
&lt;li&gt;Create add to cart functionality using React Context for cart state management.&lt;/li&gt;
&lt;li&gt;Deploy to Vercel. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Checkout the example website and full tutorial at &lt;a href="https://www.buildnextshop.com"&gt;BuildNextShop.com&lt;/a&gt; where we create a fully production ready Shopify Headless store using Next.js!&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>graphql</category>
      <category>shopify</category>
      <category>headless</category>
    </item>
    <item>
      <title>Hard Career Decisions: The Time I Left A Good Job For a Great Reason</title>
      <author>Bradston Henry</author>
      <pubDate>Thu, 02 Sep 2021 15:31:04 +0000</pubDate>
      <link>https://dev.to/bradstondev/hard-career-decisions-the-time-i-left-a-good-job-for-a-great-reason-o04</link>
      <guid>https://dev.to/bradstondev/hard-career-decisions-the-time-i-left-a-good-job-for-a-great-reason-o04</guid>
      <description>&lt;p&gt;Growing up, I always heard adults talking about having to make difficult decisions that they didn't want to make. May it be financial decisions, relationship decisions, or career decisions. As a kid, that didn't make much sense. If adults had ANY power, it was to do whatever they want. It was easy to think that way as a kid. Adults tell you what to do, and they can do whatever they want to do, so life must be easier.&lt;/p&gt;

&lt;p&gt;If only that was true? If only I could have my cake and eat it too?!?&lt;/p&gt;

&lt;p&gt;Well, a few years ago, I had to make a very difficult adult decision that I &lt;strong&gt;didn't want to&lt;/strong&gt;. As you may know from one of my &lt;a href="https://dev.to/bradstondev/how-game-dev-and-betting-on-myself-altered-my-career-path-forever-17bn"&gt;previous posts&lt;/a&gt;, I got my first tech job at IBM and I was doing pretty well. Not only was a progressing from a promotion stand point, but I was enjoying working at IBM and was actually getting a chance to work in Game Development (that's right, Game Development!). But even though, things were going well, some changes within and outside of my control happened, and I realized that I might have to make a decision that I didn't want to; A Decision to leave the Big Blue.&lt;/p&gt;

&lt;p&gt;So let me give you a brief backstory on why this was such a difficult decision and why I made this decision even though I did not want to.&lt;/p&gt;

&lt;p&gt;NOTE: For the sake of time, I'm going to condense quite a few things that happened. I don't imagine you guys want all the details so, I'll keep it concise. BUT if you do feel you'd like more detail, maybe I can write another blog post or maybe make a video detailing it a bit more. 🤷🏿‍♂️&lt;/p&gt;

&lt;p&gt;This tale all started in June of 2015. Prior to this moment, I had made a pretty large transition in my career (going from a "Degreed" Mechanical Engineer to an aspiring Game developer). As I was working on this transition, I had gotten a lot of good advice, and I decided that I would take a move that would put me in a career path that would be "Career Adjacent" to being in the Game Development industry.&lt;/p&gt;

&lt;p&gt;What I mean by "Career Adjacent" is that I would take a job that was not in the Game Development industry BUT a job that would allow me to work on a lot of the skills I would need to be successful &lt;em&gt;in&lt;/em&gt; the Game Development Industry. So for me that meant that I wanted to take an entry level programming/coding job that would build my technical and overall development skills.&lt;/p&gt;

&lt;p&gt;In June 2015, I was blessed with an entry level Mobile developer position at IBM and I honestly couldn't have been happier. One of the REALLY cool parts of taking the role was that I was going to get a great opportunity to be trained and to learn. In a literal sense, I had the opportunity to take classes (in-person and virtual) and gain certifications before I even started my first true development project. I &lt;strong&gt;cannot&lt;/strong&gt; explain how much of an impact that made on my skill development. And by the time I started working on my first project, I felt incredibly equipped to perform successfully and to be a meaningful member of my project team.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eqCYTNQ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/svd5v15je1e6wwradrq4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eqCYTNQ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/svd5v15je1e6wwradrq4.jpg" alt="20180502_162638"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Just a snapshot of one of the 'Design Thinking Workshops' we would hold at the Baton Rouge Center. These were HUGE opportunities to learn new things and connect with people&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Over the next two to three years, I grew so much! I learned new technologies, took on new challenges and maybe most impact-fully, I had mentors. Not just development/coding mentors but career mentors; Men and women who I could easily ask any question or share any concern, that would selflessly take time out of their schedule to give me guidance and direction. Honestly, there is almost &lt;strong&gt;no way&lt;/strong&gt; I would be where I am now without the mentors I have had throughout the years.&lt;/p&gt;

&lt;p&gt;And as a person who has worked many different type of jobs, mentorship is not the common in the workplace. If I would applaud IBM for one thing, it would be the culture that they create for allowing and encouraging mentorship. To many of the people who helped me, it was almost a no-brainer for them to pour into me, and IBM as corporation lauded their efforts and made it easy for them to do so.&lt;/p&gt;

&lt;p&gt;Along with mentorship and career/skill development, I had stumbled upon one of the greatest gifts while taking the "career adjacent" opportunity; &lt;strong&gt;Game Development&lt;/strong&gt;!! Yes, while working at IBM as a Mobile Developer, I was able to for more than a year, work full-time on game development projects. There is soooo much I could say on this period of time and how much joy it brought me, but for now I will leave it at that. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6CzSyEZY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s3kq9sbc6fvu0jl12znj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6CzSyEZY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s3kq9sbc6fvu0jl12znj.jpg" alt="Augmented-Reality-Prototype-small"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;One of the many prototypes I made during my game dev project. This was an Augmented Reality based project. This tech was eventually used in full length AR experience&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Side Note: Now that I am writing this blog, I feel like maybe I should share the tale of how this happened and all the interesting people I was able to work alongside and the projects and technologies I was able to work with. 🤔&lt;/p&gt;

&lt;p&gt;Though I was really enjoying working in Game Dev full-time and was doing a ton, I was realizing some hard truths about my career aspirations and the things I may need to do to accomplish my ultimate career goals.&lt;/p&gt;

&lt;p&gt;The most significant hard truth was me coming to the realization on how &lt;strong&gt;growth&lt;/strong&gt; in our lives really works. I will actually use a great quote from the former CEO of IBM, Ginny Rommety, because I think she expresses it beautifully:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"I learned to always take on things I'd never done before. Growth and comfort do not coexist"&lt;/em&gt; - Ginny Rommety&lt;/p&gt;

&lt;p&gt;Now the interesting thing was that, early into my career at IBM, I recall someone sharing this quote with me but at the time, it didn't really click. But as I was doing what I love, Game Development, at a company that has truly treated me so well, I realized I was comfortable. Not only was I comfortable, &lt;strong&gt;I wasn't challenging myself and I wasn't &lt;em&gt;allowing&lt;/em&gt; myself to be truly challenged.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;I think this realization really hit me when having a regular check-up with my manager at the time, Dean. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Side Note: Dean was one of the BEST managers I have EVER had. He's an absolute Boss in the best way&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bQgJR-c9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4phveo2cya6jk13450zg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bQgJR-c9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4phveo2cya6jk13450zg.png" alt="Jersey-Bet-Dean-Bradston"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Dean, one of my former managers, wearing a jerseys of his "favorite team" after they beat his Saints. The picture on the right is me doing a favor for him as the Falcons have NEVER lost to the Saints!😅&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Dean was just asking me general questions about how my current project was going and seeing how I was feeling. Dean knew I really enjoyed working on the project because I was doing game development, but I think Dean also knew that I wasn't &lt;em&gt;growing&lt;/em&gt;. As we spoke Dean said something that really changed my perspective and took me back a bit. He said something along the lines of, "Sounds like you're really enjoying the project. Do you feel like your gaining new skills that will help you in your future?".&lt;/p&gt;

&lt;p&gt;Now... If you recall what I said earlier, game development was my main goal in even taking a programming job so &lt;em&gt;naturally&lt;/em&gt; the answer had to be "Yes". But as I took an honest moment to consider his question, something dawned on me; something I'm sure Dean already knew. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That even though I was doing what I WANTED, I wasn't gaining the skills and experience that I NEEDED!!&lt;/strong&gt; 🤯&lt;/p&gt;

&lt;p&gt;Like one of those flashback from a movie where the person remembers all small things another character said that revealed the secret they were always looking for, the question shook something loose. It made it clear to me that though I was doing game development and enjoying the moment, that when the moment passed, I might not have the skills I needed to excel in the future.&lt;/p&gt;

&lt;p&gt;So what do I mean by that? &lt;/p&gt;

&lt;p&gt;Essentially, what I was doing was too comfortable. I develop these games, I could take on these "creative projects" but I wasn't really advancing my skills. As many of you probably already know, the technology industry, which game development is a part of, evolves quickly. And the skills that I was using at the time, were not evolving with the industry around me. &lt;/p&gt;

&lt;p&gt;The best way to put it, is that if for some reason, if I were to have lost my job at the moment, I probably would have found it very difficult to find another job with the skills I possessed. &lt;/p&gt;

&lt;p&gt;So with that realization now uncovered, Dean and I discussed a plan of me moving away from this particular project (though I enjoyed what I was doing), to allow me to gain skills that I needed to progress in my career &lt;strong&gt;long term&lt;/strong&gt;. To take on a role that made me &lt;strong&gt;uncomfortable&lt;/strong&gt; so that I really could &lt;em&gt;grow&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;At this point, things were looking up. I had direction, I had come to some great realizations, and I had the support system to push me to the goals I had. &lt;/p&gt;

&lt;p&gt;But two things occurred that would eventually make me make the difficult decision to leave IBM and pursue other opportunities.&lt;/p&gt;

&lt;p&gt;NOTE: So... as a lot of things go in my life, there is a long story behind these events. At this juncture, I won't get into the details for the sake of time, but essentially these are the two events happened that brought me to this "career precipice".&lt;/p&gt;

&lt;p&gt;The first was that the project(s) that I had comfortably been working on for quite a long time was coming to an end and simultaneously disallowed me from joining a project that might have been a good fit for me career progression. There are a lot of nuances to what happened but it put me in an odd place. &lt;/p&gt;

&lt;p&gt;Essentially, there was another project that I was planning to join (non-game development) but because of some miscommunications, I was unable to leave my game development project to join it. &lt;em&gt;But&lt;/em&gt; because the game development project was ending in the near future, I was not going to have a new project to move to after it was done. So because of the timing of all of these events, I was in a weird space without a project to work on.&lt;/p&gt;

&lt;p&gt;The second was that around the same time, it just so happened projects with the particular skills I wanted to grow (mobile skills) were becoming few and far between. And that meant there was a chance that I might end up joining a project where I'd be gaining new skills and growing but not necessarily in the direction I was aiming for.&lt;/p&gt;

&lt;p&gt;With the combinations of those two things, my next decisions were going to be tough.&lt;/p&gt;

&lt;p&gt;So after my game development project ended, me and Dean discussed what was next and we found a project that seemed like a good fit for me and would give me the experience that I was looking for. Unfortunately, it ended up that the project wouldn't need me in the capacity I was hoping for and that I would be transitioning into a completely different, non-development role; a role as a business analyst.&lt;/p&gt;

&lt;p&gt;At the time, I was thinking to myself: &lt;/p&gt;

&lt;p&gt;"Now there is nothing wrong with being a Business Analyst. No, it's not what I've been doing and not what I'm really going for in the long run BUT there is a chance I'll get back into development work in the future. And you never know, I might be good at being a Business Analyst. Matter of fact, given the circumstances, This role will be pretty comfortable..."&lt;/p&gt;

&lt;p&gt;And that word popped up again; Comfortable.&lt;/p&gt;

&lt;p&gt;Was I just doing the same thing again? Pursuing comfort over growth? Was I taking the easy route in order to keep things the way that they were?&lt;/p&gt;

&lt;p&gt;I knew the answer to that question and I bet as you read this now, you know what the answer was too.&lt;/p&gt;

&lt;p&gt;So in a bold step, knowing the circumstances and that I would be on this "comfortable" project if I stayed with IBM, I began to look for another job outside of IBM. &lt;/p&gt;

&lt;p&gt;Not long after looking, I found an opportunity with a start-up and took the position.&lt;/p&gt;

&lt;p&gt;I specifically remember having a conversation with Dean about why I was leaving and if there any way I would consider staying and I remember having to say there wasn't any. I remember saying it had nothing to do with IBM, or the people, but that it was about me pursuing what was &lt;strong&gt;best for me&lt;/strong&gt; career-wise. It was such a &lt;strong&gt;tough&lt;/strong&gt; decision because of all of the friendships I had made, the bonds I had formed, and skills I had learned. IBM had really been the place where I had "grown-up" as a professional. And now I had to go.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qD1S4jfg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6fwzk68inhxgovqp3qab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qD1S4jfg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6fwzk68inhxgovqp3qab.png" alt="Friends-Made-Along-The-Way-IBM"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Some pictures from those years at IBM. So many great memories and awesome friends made along the way&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It was a hard decision, but I know, without a shadow of a doubt, it was the right decision. &lt;/p&gt;

&lt;p&gt;Though it was a farewell to all that I had come to know, it was the beginning of a new chapter in my career journey. But you know what? Life had a funny way of working things out and as of this writing, I am back at IBM. I guess things came back full circle. 😁&lt;/p&gt;

&lt;p&gt;Thanks for reading my story!&lt;/p&gt;

&lt;p&gt;All the best on your future endeavors,&lt;/p&gt;

&lt;p&gt;Bradston Henry&lt;/p&gt;

&lt;p&gt;==== FOLLOW ME ON SOCIAL MEDIA ====&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://twitter.com/BradstonDev"&gt;Bradston Dev&lt;/a&gt;&lt;br&gt;
Dev.to: &lt;a class="mentioned-user" href="https://dev.to/bradstondev"&gt;@bradstondev&lt;/a&gt;
 &lt;br&gt;
Youtube: &lt;a href="https://www.youtube.com/channel/UC6Ky8s71RP65akLb_XV1_OA"&gt;Bradston YT&lt;/a&gt;&lt;br&gt;
LinkedIn: &lt;a href="https://www.linkedin.com/in/bradston-henry/"&gt;Bradston Henry&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;==== Credits ====&lt;/p&gt;

&lt;p&gt;Cover Photo: Stock Image provided by Frameangel, from Pond5&lt;/p&gt;

</description>
      <category>career</category>
      <category>inspiration</category>
    </item>
    <item>
      <title>Signing Software The Easy Way with Sigstore and Cosign</title>
      <author>Martin Heinz</author>
      <pubDate>Thu, 02 Sep 2021 15:10:28 +0000</pubDate>
      <link>https://dev.to/martinheinz/signing-software-the-easy-way-with-sigstore-and-cosign-kde</link>
      <guid>https://dev.to/martinheinz/signing-software-the-easy-way-with-sigstore-and-cosign-kde</guid>
      <description>&lt;p&gt;Signing software artifacts has many obvious benefits such as code integrity or developer (author) authentication. Yet it's oftentimes neglected, creating a software ripe for supply chain attacks. One of the reasons why people can't be bothered to sign their code is that existing tools - such as PGP - aren't very user friendly and require extensive security and/or cryptography knowledge.&lt;/p&gt;

&lt;p&gt;Signing software can be easy though thanks to &lt;em&gt;sigstore&lt;/em&gt; and its &lt;code&gt;cosign&lt;/code&gt; CLI! In this article we will learn how &lt;code&gt;cosign&lt;/code&gt; works and integrates with other sigstore components (&lt;code&gt;fulcio&lt;/code&gt; and &lt;code&gt;rekor&lt;/code&gt;). More importantly, we will learn how to use it to sign container image the easy way, both with and without keys, as well how we can use it to verify produced signatures and integrity of the signed software.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: This is a "hands-on" followup to my previous article &lt;a href="https://dev.to/martinheinz/sigstore-a-solution-to-software-supply-chain-security-163o"&gt;Sigstore: A Solution to Software Supply Chain Security&lt;/a&gt;, which explains what's sigstore and how its components work.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up"&gt;
  &lt;/a&gt;
  Setting Up
&lt;/h2&gt;

&lt;p&gt;Before we sign anything, we first need all the CLI tools for each of sigstore's components - that is &lt;code&gt;cosign&lt;/code&gt;, &lt;code&gt;fulcio&lt;/code&gt; and &lt;code&gt;rekor&lt;/code&gt;. The first of them - &lt;code&gt;cosign&lt;/code&gt; - which we need to actually sign anything, can be installed as binary or as Docker image. For the for first option, download the appropriate binary from &lt;a href="https://github.com/sigstore/cosign/releases/tag/v1.0.0"&gt;release page&lt;/a&gt; and put it somewhere in your &lt;code&gt;$PATH&lt;/code&gt;. Additionally, considering that we're dealing with security tooling, it's recommended to verify authenticity and integrity of the binary. You can do that using the commands shown on release page.&lt;/p&gt;

&lt;p&gt;If you prefer to use Docker image, then you can use the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;skopeo inspect docker://gcr.io/projectsigstore/cosign:v1.0.0
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"Name"&lt;/span&gt;: &lt;span class="s2"&gt;"gcr.io/projectsigstore/cosign"&lt;/span&gt;,
    &lt;span class="s2"&gt;"Digest"&lt;/span&gt;: &lt;span class="s2"&gt;"sha256:5e88d8f6162c04da4fa7d63b032bac34d8c906b48e88057263d67b059ace7de4"&lt;/span&gt;,
...
&lt;span class="o"&gt;}&lt;/span&gt;
docker pull gcr.io/projectsigstore/cosign:v1.0.0
docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; gcr.io/projectsigstore/cosign:v1.0.0
USAGE
  cosign &lt;span class="o"&gt;[&lt;/span&gt;flags] &amp;lt;subcommand&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the second component - &lt;code&gt;fulcio&lt;/code&gt; - we won't need to install anything because we will be using the public instance of &lt;code&gt;fulcio&lt;/code&gt;. The public-good service is available at &lt;a href="https://fulcio.sigstore.dev/api/v1"&gt;https://fulcio.sigstore.dev/api/v1&lt;/a&gt; and API documentation can be found &lt;a href="https://sigstore.dev/swagger/?urls.primaryName=Fulcio"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lastly, there's &lt;code&gt;rekor&lt;/code&gt; and its CLI called &lt;code&gt;rekor-cli&lt;/code&gt;. Same as with &lt;code&gt;fulcio&lt;/code&gt;, we don't need to install &lt;code&gt;rekor&lt;/code&gt; as it's available at &lt;a href="https://rekor.sigstore.dev"&gt;https://rekor.sigstore.dev&lt;/a&gt; along with the Swagger definition &lt;a href="https://sigstore.dev/swagger/?urls.primaryName=Rekor"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We will however want to install the CLI so that we interact with the &lt;code&gt;rekor&lt;/code&gt; server. The binaries are available in GitHub &lt;a href="https://github.com/sigstore/rekor/releases"&gt;release page&lt;/a&gt;. If you're on linux you can use the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;wget &lt;span class="nt"&gt;-O&lt;/span&gt; rekor-cli https://github.com/sigstore/rekor/releases/download/v0.3.0/rekor-cli-linux-amd64
&lt;span class="nb"&gt;chmod&lt;/span&gt; +x rekor-cli
&lt;span class="c"&gt;# Move it into $PATH directory...&lt;/span&gt;
./rekor-cli

Rekor &lt;span class="nb"&gt;command &lt;/span&gt;line interface tool

Usage:
  rekor &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And again, as mentioned with &lt;code&gt;cosign&lt;/code&gt;, you should be careful with what binaries you're using. Therefore you might want to verify &lt;code&gt;rekor-cli&lt;/code&gt; binary using the process outlined &lt;a href="https://github.com/sigstore/rekor/blob/main/release-verify.md"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-hard-way"&gt;
  &lt;/a&gt;
  The Hard Way
&lt;/h2&gt;

&lt;p&gt;With all the tools ready, we can start signing artifacts. To get better understanding about what goes on under covers, we will first try doing it the &lt;em&gt;"hard way"&lt;/em&gt;, that is - without all the fancy tools.&lt;/p&gt;

&lt;p&gt;First we will need an artifact. For this demo we will use &lt;em&gt;"hello world"&lt;/em&gt; Docker image created using following &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; alpine:3.14&lt;/span&gt;
&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["echo", "Hello sigstore"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We however cannot sign the image itself, instead we will sign its digest:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Generate artifact&lt;/span&gt;
docker build &lt;span class="nt"&gt;-t&lt;/span&gt; dockerhub-username/sigstore-hello &lt;span class="nb"&gt;.&lt;/span&gt;

&lt;span class="c"&gt;# Generate artifact digest for signing&lt;/span&gt;
cosign generate martinheinz/sigstore-hello &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; artifact
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we need an ephemeral keypair to sign the digest with. We can use &lt;code&gt;cosign&lt;/code&gt; commands for this, but considering that this is the &lt;em&gt;"hard way"&lt;/em&gt;, let's use &lt;code&gt;openssl&lt;/code&gt; directly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;openssl ecparam &lt;span class="nt"&gt;-genkey&lt;/span&gt; &lt;span class="nt"&gt;-name&lt;/span&gt; prime256v1 &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; ec_private.pem &lt;span class="c"&gt;# Create keypair, same as `cosign generate-key-pair`&lt;/span&gt;
openssl ec &lt;span class="nt"&gt;-in&lt;/span&gt; ec_private.pem &lt;span class="nt"&gt;-pubout&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; ec_public.pem  &lt;span class="c"&gt;# Extract public key, same as `cosign public-key`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we're ready to sign it and while we're at it we can also verify the signature:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Sign artifact digest, same as `cosign sign`&lt;/span&gt;
openssl dgst &lt;span class="nt"&gt;-sha256&lt;/span&gt; &lt;span class="nt"&gt;-sign&lt;/span&gt; ec_private.pem artifact &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; artifact.sig

&lt;span class="c"&gt;# Verify using public key&lt;/span&gt;
openssl dgst &lt;span class="nt"&gt;-sha256&lt;/span&gt; &lt;span class="nt"&gt;-verify&lt;/span&gt; ec_public.pem &lt;span class="nt"&gt;-signature&lt;/span&gt; artifact.sig artifact
Verified OK
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we signed the artifact with our private key, we want to have a proof that we were the ones who really did it. For this we need code signing certificate from &lt;code&gt;fulcio&lt;/code&gt;. To get it, we have to authenticate with OIDC provider to get an ID token, which serves as proof of our identity for &lt;code&gt;fulcio&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After that, we sign our email address which we used to authenticate using the previously used private key. We do this to prove that we have possession of the private key at the time of signing.&lt;/p&gt;

&lt;p&gt;Finally, we ask &lt;code&gt;fulcio&lt;/code&gt; for code signing certificate, by giving it ID token as form of authorization, the signed email address and our public key:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# ... Get token from OIDC provider&lt;/span&gt;
&lt;span class="c"&gt;# ... Store ID token in `id_token` file&lt;/span&gt;

&lt;span class="c"&gt;# Sign email address (to prove possession of private key)&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"martin7.heinz@gmail.com"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; email
openssl dgst &lt;span class="nt"&gt;-sha256&lt;/span&gt; &lt;span class="nt"&gt;-sign&lt;/span&gt; ec_private.pem email &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; email.sig

&lt;span class="c"&gt;# Submit token, public key and signed email to fulcio&lt;/span&gt;
curl &lt;span class="nt"&gt;-X&lt;/span&gt; POST &lt;span class="s2"&gt;"https://fulcio.sigstore.dev/api/v1/signingCert"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"Authorization: Bearer &lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;id_token&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"accept: application/pem-certificate-chain"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"Content-Type: application/json"&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"publicKey"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"content"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;base64 &lt;/span&gt;ec_public.pem&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;,
    &lt;span class="s2"&gt;"algorithm"&lt;/span&gt;: &lt;span class="s2"&gt;"ecdsa"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="s2"&gt;"signedEmailAddress"&lt;/span&gt;: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;base64 &lt;/span&gt;email.sig&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One problem with this &lt;em&gt;"hard way"&lt;/em&gt; approach is that it's not really feasible to simulate the authentication and retrieval of ID token. Therefore, in the above snippet this step is omitted and we skip directly to submitting everything to &lt;code&gt;fulcio&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Alternatively, you could also skip the interaction with &lt;code&gt;fulcio&lt;/code&gt; entirely and use your public key instead. This approach is shown in &lt;a href="https://github.com/sigstore/rekor/blob/main/types.md#pkixx509"&gt;https://github.com/sigstore/rekor/blob/main/types.md#pkixx509&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next we can proceed with uploading the record to the transparency log (&lt;code&gt;rekor&lt;/code&gt;). Here we show both the option with our public key and signing certificate from &lt;code&gt;fulcio&lt;/code&gt;. When using the certificate from &lt;code&gt;fulcio&lt;/code&gt;, we can also delete the keypair as we no longer need it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Delete keypair (if using signing certificate from fulcio)&lt;/span&gt;
&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; ec_private.pem ec_public.pem

rekor-cli upload &lt;span class="nt"&gt;--artifact&lt;/span&gt; artifact &lt;span class="nt"&gt;--signature&lt;/span&gt; artifact.sig &lt;span class="nt"&gt;--public-key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ec_public.pem &lt;span class="nt"&gt;--pki-format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;x509  &lt;span class="c"&gt;# With our public key&lt;/span&gt;
...
rekor-cli upload &lt;span class="nt"&gt;--artifact&lt;/span&gt; artifact &lt;span class="nt"&gt;--signatire&lt;/span&gt; artifact.sig &lt;span class="nt"&gt;--public-key&lt;/span&gt; sigingCertChain.pem &lt;span class="nt"&gt;--pki-format&lt;/span&gt; x509  &lt;span class="c"&gt;# With cert from fulcio&lt;/span&gt;
Created entry at index 33612, available at: https://rekor.sigstore.dev/api/v1/log/entries/2f77b399fd8a162f44c75c596fb0e5917ed2f314348e135874fae9e14eff69e3

&lt;span class="c"&gt;# Inspect entry&lt;/span&gt;
curl https://rekor.sigstore.dev/api/v1/log/entries/2f77b399fd8a162f44c75c596fb0e5917ed2f314348e135874fae9e14eff69e3 | jq &lt;span class="nb"&gt;.&lt;/span&gt;
...
rekor-cli get &lt;span class="nt"&gt;--uuid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2f77b399fd8a162f44c75c596fb0e5917ed2f314348e135874fae9e14eff69e3
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In addition to the upload we can also check presence of the record in transparency log. Above snippet uses both &lt;code&gt;rekor-cli&lt;/code&gt; and &lt;code&gt;curl&lt;/code&gt; to directly access the public API.&lt;/p&gt;

&lt;p&gt;All that's left to do is upload the signature to the registry to be stored alongside container image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Upload to Docker Hub&lt;/span&gt;
cosign upload blob &lt;span class="nt"&gt;-f&lt;/span&gt; artifact.sig index.docker.io/martinheinz/sigstore-hello:new-signature.sig
Uploading file from &lt;span class="o"&gt;[&lt;/span&gt;artifact.sig] to &lt;span class="o"&gt;[&lt;/span&gt;index.docker.io/martinheinz/sigstore-hello:new-signature.sig] with media &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;application/octet-stream]
File &lt;span class="o"&gt;[&lt;/span&gt;artifact.sig] is available directly at &lt;span class="o"&gt;[&lt;/span&gt;index.docker.io/v2/martinheinz/sigstore-hello/blobs/sha256:5491a7ff9960236b4f0bc7311fc8dba8e1b9fadfef7f704ec54eddaac1977ecb]
Uploaded image to:
index.docker.io/martinheinz/sigstore-hello@sha256:4c2f015295318a35b6096d6a971e42e5b5afb237dfc4fdf44364502a2e7064a1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it. We have signed our image and added record of it to transparency log. This approach would work, but no one probably wants to do this on a daily basis, so let's see how the proper tools can make this easy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-easy-way"&gt;
  &lt;/a&gt;
  The Easy Way
&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;"hard way"&lt;/em&gt; wasn't really hard, but it gets much easier if we use the tools provided:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;cosign generate-key-pair

Enter password &lt;span class="k"&gt;for &lt;/span&gt;private key: 
Enter again: 
Private key written to cosign.key
Public key written to cosign.pub

&lt;span class="c"&gt;# We already uploaded signature in previous step so upload is set to false here&lt;/span&gt;
cosign sign &lt;span class="nt"&gt;-key&lt;/span&gt; cosign.key &lt;span class="nt"&gt;--upload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false &lt;/span&gt;martinheinz/sigstore-hello &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; file.sig
Enter password &lt;span class="k"&gt;for &lt;/span&gt;private key:
...

&lt;span class="c"&gt;# You can later upload the signature&lt;/span&gt;
cosign attach signature &lt;span class="nt"&gt;-signature&lt;/span&gt; file.sig martinheinz/sigstore-hello
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All we need to do is generate a keypair and then sign the artifact. Upon signing, &lt;code&gt;cosign&lt;/code&gt; automatically uploads the signature to the registry where the image is located. In the above example we chose not to upload the signature and just save it to a file, because we did sign it in the previous section already. If we later decided to upload it anyway, then we can do it with &lt;code&gt;cosign attach&lt;/code&gt; as shown above.&lt;/p&gt;

&lt;p&gt;It's also worth pointing out, that as of right now (&lt;code&gt;cosign&lt;/code&gt; version &lt;code&gt;1.0&lt;/code&gt;), the above snippet will not upload the data to &lt;code&gt;rekor&lt;/code&gt; transparency log, for that to work, we would need to set &lt;code&gt;COSIGN_EXPERIMENTAL=1&lt;/code&gt;, so for example &lt;code&gt;COSIGN_EXPERIMENTAL=1 cosign sign -key cosign.key ...&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are also other ways to use &lt;code&gt;cosign&lt;/code&gt; to sign artifacts depending on your use case and workflow. These are described in detail in &lt;a href="https://github.com/sigstore/cosign/blob/main/USAGE.md"&gt;usage page&lt;/a&gt; in GitHub.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keyless"&gt;
  &lt;/a&gt;
  "Keyless"
&lt;/h2&gt;

&lt;p&gt;Even easier than the easy way is using the &lt;em&gt;"keyless"&lt;/em&gt; method where only ephemeral keys are used, meaning you don't need to generate and maintain your own keys:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;COSIGN_EXPERIMENTAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 cosign sign &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-oidc-issuer&lt;/span&gt; &lt;span class="s2"&gt;"https://oauth2.sigstore.dev/auth"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-fulcio-url&lt;/span&gt; &lt;span class="s2"&gt;"https://fulcio.sigstore.dev"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-rekor-url&lt;/span&gt; &lt;span class="s2"&gt;"https://rekor.sigstore.dev"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    docker.io/martinheinz/sigstore-hello:latest

Generating ephemeral keys...
Retrieving signed certificate...
Your browser will now be opened to:
https://oauth2.sigstore.dev/auth/auth?access_type&lt;span class="o"&gt;=&lt;/span&gt;online&amp;amp;client_id&lt;span class="o"&gt;=&lt;/span&gt;sigstore&amp;amp;code_challenge&lt;span class="o"&gt;=&lt;/span&gt;...
tlog entry created with index:  33692
Pushing signature to: index.docker.io/martinheinz/sigstore-hello:sha256-af5909c54fe66d03dda41e93ca5db3f277bfc827b9758d8cfa9a5d8d60d85491.sig
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All we need to do is run &lt;code&gt;cosign sign&lt;/code&gt; with &lt;code&gt;COSIGN_EXPERIMENTAL&lt;/code&gt; set to &lt;code&gt;1&lt;/code&gt; while at the same time omitting the &lt;code&gt;-key&lt;/code&gt; argument. In the above example we also specified endpoints of OIDC provider, &lt;code&gt;fulcio&lt;/code&gt; server and &lt;code&gt;rekor&lt;/code&gt; server - these are the default values of the public-good services provided by sigstore, so they can be omitted, but are shown here for clarity and to highlight which services are being accessed/used. You could also replace those with your own instances - that would make sense if you wanted to run everything behind a firewall.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K3Gmwc5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9u5svacm9pivtrddje6r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K3Gmwc5V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9u5svacm9pivtrddje6r.png" alt="Docker Hub image and signature"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#verify-everything"&gt;
  &lt;/a&gt;
  Verify Everything
&lt;/h2&gt;

&lt;p&gt;Now that we signed the artifact in all the ways possible we should also try verifying it, otherwise what would be the point of signing it in the first place, right?&lt;/p&gt;

&lt;p&gt;First let's take the outputs of signing the image digest the &lt;em&gt;"hard way"&lt;/em&gt;. For that we can use &lt;code&gt;rekor-cli&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rekor-cli verify &lt;span class="nt"&gt;--artifact&lt;/span&gt; artifact &lt;span class="nt"&gt;--signature&lt;/span&gt; artifact.sig &lt;span class="nt"&gt;--public-key&lt;/span&gt; ec_public.pem &lt;span class="nt"&gt;--pki-format&lt;/span&gt; x509
rekor-cli verify &lt;span class="nt"&gt;--artifact&lt;/span&gt; artifact &lt;span class="nt"&gt;--signature&lt;/span&gt; artifact.sig &lt;span class="nt"&gt;--public-key&lt;/span&gt; sigingCertChain.pem &lt;span class="nt"&gt;--pki-format&lt;/span&gt; x509
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have 2 cases - if we signed the artifact with our public key, then we use that when verifying. On the other hand if we used the signing cert provided by &lt;code&gt;fulcio&lt;/code&gt; we would use that in place of the public key.&lt;/p&gt;

&lt;p&gt;Next up is the verification using &lt;code&gt;cosign&lt;/code&gt; which is suitable for the basic signing with keys. All we need to do is run &lt;code&gt;cosign verify&lt;/code&gt; providing the key and image URL:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;cosign verify &lt;span class="nt"&gt;-key&lt;/span&gt; cosign.pub docker.io/martinheinz/sigstore-hello:latest | jq &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, for the keyless method - we can do essentially the same as above, but we need to add the experimental flag and we can skip the key argument:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;COSIGN_EXPERIMENTAL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 cosign verify docker.io/martinheinz/sigstore-hello:latest

Verification &lt;span class="k"&gt;for &lt;/span&gt;docker.io/martinheinz/sigstore-hello:latest &lt;span class="nt"&gt;--&lt;/span&gt;
The following checks were performed on each of these signatures:
  - The cosign claims were validated
  - Existence of the claims &lt;span class="k"&gt;in &lt;/span&gt;the transparency log was verified offline
  - Any certificates were verified against the Fulcio roots.
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;In this article I tried to outline and explain the basic use cases and approaches for signing container images using sigstore and more specifically &lt;code&gt;cosign&lt;/code&gt;. There are however, many more options and features of &lt;code&gt;cosign&lt;/code&gt; which might be useful to you, such as working with other types of artifacts, using hardware tokens or signing &lt;code&gt;git&lt;/code&gt; commits, so I encourage you to mess with the tool and see what else you can use it for. A lot of these options are described in very well written usage documentation &lt;a href="https://github.com/sigstore/cosign/blob/main/USAGE.md"&gt;here&lt;/a&gt;, so make sure to check that out too.&lt;/p&gt;

&lt;p&gt;Also, if you want to dig even deeper, you can checkout &lt;a href="https://github.com/lukehinds/sigstore-the-hard-way"&gt;"sigstore the hard way"&lt;/a&gt;, which is a guide to setting everything up, for scratch - including &lt;code&gt;fulcio&lt;/code&gt; CA and &lt;code&gt;rekor&lt;/code&gt; transparency log server. &lt;/p&gt;

</description>
      <category>security</category>
      <category>cloud</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>KAOSS! Fun with Web Audio</title>
      <author>Mads Stoumann</author>
      <pubDate>Thu, 02 Sep 2021 15:06:47 +0000</pubDate>
      <link>https://dev.to/madsstoumann/kaoss-fun-with-web-audio-3gb9</link>
      <guid>https://dev.to/madsstoumann/kaoss-fun-with-web-audio-3gb9</guid>
      <description>&lt;p&gt;I used to carry my “Korg Kaossilator” around with me. For those of you who don't know what that is – it's a small, portable synthesizer, with a large, touch-based XY-controller:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FeOLGlOE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n79fwjbcr354szqdh4hk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FeOLGlOE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n79fwjbcr354szqdh4hk.jpg" alt="kaossilator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This week, I've been working on a generic XY-controller – for both pointer-devices and keyboards:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rJtKermS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l1duj4gtc3eyobgbgq13.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rJtKermS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l1duj4gtc3eyobgbgq13.png" alt="xypad"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It was meant to be for a “Color Picker”, but I ended up making &lt;strong&gt;this&lt;/strong&gt; instead:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/stoumann/embed/BaZzyWO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I'm working on a larger article about XY-controllers, where I &lt;strong&gt;will&lt;/strong&gt; showcase the “Color Picker” – but for now, please have fun with the simplified, JavaScript-version of “Kaossilator”!&lt;/p&gt;

&lt;p&gt;The XY-controller is still &lt;em&gt;work-in-progress&lt;/em&gt;, so I haven't added scroll-position-fixes to the script yet. Please &lt;a href="https://codepen.io/stoumann/full/BaZzyWO"&gt;open it in fullscreen-mode on Codepen&lt;/a&gt;, to avoid scrolling within the iframe.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#keyboarduser"&gt;
  &lt;/a&gt;
  Keyboard-user?
&lt;/h2&gt;

&lt;p&gt;The XY-Controller can also be operated with a keyboard.&lt;/p&gt;

&lt;p&gt;When the point-ring has focus, press &lt;code&gt;Space&lt;/code&gt; to toggle the sound on or off, and use the &lt;code&gt;Arrow&lt;/code&gt;-keys to move around. &lt;/p&gt;

&lt;p&gt;Press and hold &lt;code&gt;Shift&lt;/code&gt; while using the &lt;code&gt;Arrow&lt;/code&gt;-keys, to move the point-ring with a larger increment.&lt;/p&gt;




&lt;p&gt;Pick the Sine-wave (first) and “allpass”, if you want to play the theme from “Doctor Who” 😁&lt;/p&gt;

&lt;p&gt;Happy jamming!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Create a Netflix clone from Scratch: JavaScript PHP + MySQL Day 38</title>
      <author>Christopher Glikpo</author>
      <pubDate>Thu, 02 Sep 2021 15:05:13 +0000</pubDate>
      <link>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-38-382e</link>
      <guid>https://dev.to/cglikpo/create-a-netflix-clone-from-scratch-javascript-php-mysql-day-38-382e</guid>
      <description>&lt;p&gt;Netflix provides streaming movies and TV shows to over 75 million subscribers across&lt;br&gt;
the globe. Customers can watch as many shows/ movies as they want as long as they are&lt;br&gt;
connected to the internet for a monthly subscription fee of about ten dollars. Netflix produces&lt;br&gt;
original content and also pays for the rights to stream feature films and shows.&lt;/p&gt;

&lt;p&gt;In this video,we will be creating the entity Page&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/qdSJvGF7pag"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you like my work, please consider&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/cglikpo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c23TxQOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jm11knj7d8zwcvo150q2.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;br&gt;
so that I can bring more projects, more articles for you&lt;/p&gt;

&lt;p&gt;If you want to learn more about Web Development, feel free to &lt;a href="https://www.youtube.com/c/ChristopherGlikpo"&gt;follow me on Youtube!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
