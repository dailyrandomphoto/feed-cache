<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to create beautiful particles effect in Vue.js (2.x and 3.x)</title>
      <author>Matteo Bruni</author>
      <pubDate>Thu, 29 Apr 2021 14:17:44 +0000</pubDate>
      <link>https://dev.to/matteobruni/how-to-create-beautiful-particles-effect-in-vue-js-2-x-and-3-x-27d8</link>
      <guid>https://dev.to/matteobruni/how-to-create-beautiful-particles-effect-in-vue-js-2-x-and-3-x-27d8</guid>
      <description>&lt;h1&gt;
  &lt;a href="#i-want-those-particle-effects-too"&gt;
  &lt;/a&gt;
  I want those particle effects too!!
&lt;/h1&gt;

&lt;p&gt;Did you see some fancy particles and you want something like that in your Vue.js project?&lt;/p&gt;

&lt;p&gt;Let's see how to add them using &lt;a href="https://github.com/matteobruni/tsparticles"&gt;tsParticles&lt;/a&gt; Vue.js 2.x or 3.x components.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ready-to-use-templates"&gt;
  &lt;/a&gt;
  Ready to use templates
&lt;/h2&gt;

&lt;p&gt;Are you too lazy to read the post and want some working samples?&lt;/p&gt;

&lt;p&gt;Here you are:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vue-js-2x-raw-particlesvue-endraw-"&gt;
  &lt;/a&gt;
  Vue JS 2.x (&lt;code&gt;particles.vue&lt;/code&gt;)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles/tree/master/demo/vue"&gt;Vue 2.x tsParticles demo project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codesandbox.io/s/particlesvue-20-kwsl6"&gt;Vue 2.x tsParticles CodeSandbox sample&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tsparticles/vue-auth-template"&gt;Vue 2.x tsParticles Authentication template&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#vue-js-3x-raw-particlesvue3-endraw-"&gt;
  &lt;/a&gt;
  Vue JS 3.x (&lt;code&gt;particles.vue3&lt;/code&gt;)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles/tree/master/demo/vue3"&gt;Vue 3.x tsParticles demo project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codesandbox.io/s/particlesvue3-68246"&gt;Vue 3.x tsParticles CodeSandbox sample&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tsparticles/vue3-auth-template"&gt;Vue 3.x tsParticles Authentication template&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#community-projects"&gt;
  &lt;/a&gt;
  Community projects
&lt;/h4&gt;

&lt;p&gt;If you have some cool projects to share or some beautiful samples for newbies feel free to open a PR in the &lt;a href="https://github.com/tsparticles/templates"&gt;tsParticles templates repository&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Let's start with the popular Vue.js 2.x version. The &lt;code&gt;particles.vue&lt;/code&gt; npm package.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vuejs-2x"&gt;
  &lt;/a&gt;
  Vue.js 2.x
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add particles.vue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Particles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;particles.vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// this adds the particles plugin to Vue.js&lt;/span&gt;
&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Particles&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#demo-config"&gt;
  &lt;/a&gt;
  Demo config
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- use this tag to add a particle container with an external configuration --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;Particles&lt;/span&gt;
                &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"tsparticles"&lt;/span&gt;
                &lt;span class="na"&gt;:particlesInit=&lt;/span&gt;&lt;span class="s"&gt;"particlesInit"&lt;/span&gt;
                &lt;span class="na"&gt;:particlesLoaded=&lt;/span&gt;&lt;span class="s"&gt;"particlesLoaded"&lt;/span&gt;
                &lt;span class="na"&gt;url=&lt;/span&gt;&lt;span class="s"&gt;"http://foo.bar/particles.json"&lt;/span&gt;
        &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="c"&gt;&amp;lt;!-- or --&amp;gt;&lt;/span&gt;

        &lt;span class="c"&gt;&amp;lt;!-- use this tag to add a particle container with an inline configuration --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;Particles&lt;/span&gt;
                &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"tsparticles"&lt;/span&gt;
                &lt;span class="na"&gt;:particlesInit=&lt;/span&gt;&lt;span class="s"&gt;"particlesInit"&lt;/span&gt;
                &lt;span class="na"&gt;:particlesLoaded=&lt;/span&gt;&lt;span class="s"&gt;"particlesLoaded"&lt;/span&gt;
                &lt;span class="na"&gt;:options=&lt;/span&gt;&lt;span class="s"&gt;"{
                    background: {
                        color: {
                            value: '#0d47a1'
                        }
                    },
                    fpsLimit: 60,
                    interactivity: {
                        detectsOn: 'canvas',
                        events: {
                            onClick: {
                                enable: true,
                                mode: 'push'
                            },
                            onHover: {
                                enable: true,
                                mode: 'repulse'
                            },
                            resize: true
                        },
                        modes: {
                            bubble: {
                                distance: 400,
                                duration: 2,
                                opacity: 0.8,
                                size: 40
                            },
                            push: {
                                quantity: 4
                            },
                            repulse: {
                                distance: 200,
                                duration: 0.4
                            }
                        }
                    },
                    particles: {
                        color: {
                            value: '#ffffff'
                        },
                        links: {
                            color: '#ffffff',
                            distance: 150,
                            enable: true,
                            opacity: 0.5,
                            width: 1
                        },
                        collisions: {
                            enable: true
                        },
                        move: {
                            direction: 'none',
                            enable: true,
                            outMode: 'bounce',
                            random: false,
                            speed: 6,
                            straight: false
                        },
                        number: {
                            density: {
                                enable: true,
                                value_area: 800
                            },
                            value: 80
                        },
                        opacity: {
                            value: 0.5
                        },
                        shape: {
                            type: 'circle'
                        },
                        size: {
                            random: true,
                            value: 5
                        }
                    },
                    detectRetina: true
                }"&lt;/span&gt;
        &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#typescript-errors"&gt;
  &lt;/a&gt;
  TypeScript errors
&lt;/h4&gt;

&lt;p&gt;If you are using TypeScript and you have some errors while importing/using Particles plugin try adding the following import before the previous code:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;declare&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;particles.vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;p&gt;Let's continue with the new Vue.js 3.x version. The &lt;code&gt;particles.vue3&lt;/code&gt; npm package.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#vuejs-3x"&gt;
  &lt;/a&gt;
  Vue.js 3.x
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add particles.vue3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Particles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;particles.vue3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// this will add the particles plugin to your Vue.js app&lt;/span&gt;
&lt;span class="nx"&gt;createApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Particles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#demo-config"&gt;
  &lt;/a&gt;
  Demo config
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- use this tag to add a particle container with an external configuration --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;Particles&lt;/span&gt;
                &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"tsparticles"&lt;/span&gt;
                &lt;span class="na"&gt;:particlesInit=&lt;/span&gt;&lt;span class="s"&gt;"particlesInit"&lt;/span&gt;
                &lt;span class="na"&gt;:particlesLoaded=&lt;/span&gt;&lt;span class="s"&gt;"particlesLoaded"&lt;/span&gt;
                &lt;span class="na"&gt;url=&lt;/span&gt;&lt;span class="s"&gt;"http://foo.bar/particles.json"&lt;/span&gt;
        &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="c"&gt;&amp;lt;!-- or --&amp;gt;&lt;/span&gt;

        &lt;span class="c"&gt;&amp;lt;!-- use this tag to add a particle container with an inline configuration --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;Particles&lt;/span&gt;
                &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"tsparticles"&lt;/span&gt;
                &lt;span class="na"&gt;:particlesInit=&lt;/span&gt;&lt;span class="s"&gt;"particlesInit"&lt;/span&gt;
                &lt;span class="na"&gt;:particlesLoaded=&lt;/span&gt;&lt;span class="s"&gt;"particlesLoaded"&lt;/span&gt;
                &lt;span class="na"&gt;:options=&lt;/span&gt;&lt;span class="s"&gt;"{
                    background: {
                        color: {
                            value: '#0d47a1'
                        }
                    },
                    fpsLimit: 60,
                    interactivity: {
                        detectsOn: 'canvas',
                        events: {
                            onClick: {
                                enable: true,
                                mode: 'push'
                            },
                            onHover: {
                                enable: true,
                                mode: 'repulse'
                            },
                            resize: true
                        },
                        modes: {
                            bubble: {
                                distance: 400,
                                duration: 2,
                                opacity: 0.8,
                                size: 40
                            },
                            push: {
                                quantity: 4
                            },
                            repulse: {
                                distance: 200,
                                duration: 0.4
                            }
                        }
                    },
                    particles: {
                        color: {
                            value: '#ffffff'
                        },
                        links: {
                            color: '#ffffff',
                            distance: 150,
                            enable: true,
                            opacity: 0.5,
                            width: 1
                        },
                        collisions: {
                            enable: true
                        },
                        move: {
                            direction: 'none',
                            enable: true,
                            outMode: 'bounce',
                            random: false,
                            speed: 6,
                            straight: false
                        },
                        number: {
                            density: {
                                enable: true,
                                value_area: 800
                            },
                            value: 80
                        },
                        opacity: {
                            value: 0.5
                        },
                        shape: {
                            type: 'circle'
                        },
                        size: {
                            random: true,
                            value: 5
                        }
                    },
                    detectRetina: true
                }"&lt;/span&gt;
        &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#typescript-errors"&gt;
  &lt;/a&gt;
  TypeScript errors
&lt;/h4&gt;

&lt;p&gt;If you are using TypeScript and you have some errors while importing/using Particles plugin try adding the following import before the previous code:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;declare&lt;/span&gt; &lt;span class="nx"&gt;module&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;particles.vue3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#demos"&gt;
  &lt;/a&gt;
  Demos
&lt;/h3&gt;

&lt;p&gt;The demo website is &lt;a href="https://particles.js.org"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://particles.js.org"&gt;https://particles.js.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There's also a CodePen collection actively maintained and updated &lt;a href="https://codepen.io/collection/DPOage"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/collection/DPOage"&gt;https://codepen.io/collection/DPOage&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#related-posts"&gt;
  &lt;/a&gt;
  Related posts
&lt;/h2&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/matteobruni" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JQFfhxbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--48F7T3mb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/349511/bb633a3a-649f-4897-9773-86a525c8fdc3.png" alt="matteobruni image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/matteobruni/how-to-create-beautiful-confetti-animations-with-tsparticles-193" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to create beautiful confetti animations with tsParticles&lt;/h2&gt;
      &lt;h3&gt;Matteo Bruni ・ Mar 20 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/matteobruni" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JQFfhxbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--48F7T3mb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/349511/bb633a3a-649f-4897-9773-86a525c8fdc3.png" alt="matteobruni image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/matteobruni/particles-vue3-released-particles-animations-for-vue-js-3-x-51ia" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Particles.vue3 released! Particles animations for Vue.js 3.x&lt;/h2&gt;
      &lt;h3&gt;Matteo Bruni ・ Sep 21 '20 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#vue&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#news&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/matteobruni" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JQFfhxbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--48F7T3mb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/349511/bb633a3a-649f-4897-9773-86a525c8fdc3.png" alt="matteobruni image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/matteobruni/how-to-create-particles-animations-in-vue-js-1ebi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to create particles animations in Vue.js&lt;/h2&gt;
      &lt;h3&gt;Matteo Bruni ・ Aug  6 '20 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#vue&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/matteobruni" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JQFfhxbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--48F7T3mb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/349511/bb633a3a-649f-4897-9773-86a525c8fdc3.png" alt="matteobruni image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/matteobruni/how-to-use-tsparticles-52k" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to use tsParticles&lt;/h2&gt;
      &lt;h3&gt;Matteo Bruni ・ Jul 25 '20 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/matteobruni" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JQFfhxbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--48F7T3mb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/349511/bb633a3a-649f-4897-9773-86a525c8fdc3.png" alt="matteobruni image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/matteobruni/tsparticles-tutorial-2mbb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;tsParticles tutorial&lt;/h2&gt;
      &lt;h3&gt;Matteo Bruni ・ Jun 10 '20 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#typescript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/matteobruni" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JQFfhxbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--48F7T3mb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/349511/bb633a3a-649f-4897-9773-86a525c8fdc3.png" alt="matteobruni image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/matteobruni/5-reasons-to-use-tsparticles-and-not-particles-js-1gbe" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;5 reasons to use tsParticles and not Particles.js&lt;/h2&gt;
      &lt;h3&gt;Matteo Bruni ・ Mar 13 '20 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#typescript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/matteobruni" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JQFfhxbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--48F7T3mb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/349511/bb633a3a-649f-4897-9773-86a525c8fdc3.png" alt="matteobruni image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/matteobruni/migrating-from-particles-js-to-tsparticles-2a6m" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Migrating from Particles.js to tsParticles&lt;/h2&gt;
      &lt;h3&gt;Matteo Bruni ・ Mar 15 '20 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#typescript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;






&lt;p&gt;If you like the project and you want to support that please leave a star on GitHub&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/matteobruni"&gt;
        matteobruni
      &lt;/a&gt; / &lt;a href="https://github.com/matteobruni/tsparticles"&gt;
        tsparticles
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      tsParticles - Easily create highly customizable particles animations and use them as animated backgrounds for your website. Ready to use components available for React, Vue.js (2.x and 3.x), Angular, Svelte, jQuery, Preact, Inferno.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://particles.js.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/58f22f0a546d5d7f34b4668dc842ac91b3a4cf9a5de72346559b7d15b13e587e/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f62616e6e6572322e706e67" alt="banner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
tsParticles - TypeScript Particles&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;A lightweight TypeScript library for creating particles. Dependency free (&lt;a href="https://raw.githubusercontent.com/matteobruni/tsparticles/main/#dependencies"&gt;*&lt;/a&gt;) and browser ready!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/VincentGarreau/particles.js"&gt;Particles.js&lt;/a&gt; converted in TypeScript, dependency free (&lt;a href="https://raw.githubusercontent.com/matteobruni/tsparticles/main/#dependencies"&gt;*&lt;/a&gt;), improved with new cool 😎 features and various bugs fixed and &lt;strong&gt;it's actively maintained&lt;/strong&gt;!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.jsdelivr.com/package/npm/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8c64088d02effc095dd7386325d216ce6d6bd46513a88ed2274e0ec4e6d876cf/68747470733a2f2f646174612e6a7364656c6976722e636f6d2f76312f7061636b6167652f6e706d2f74737061727469636c65732f62616467653f7374796c653d726f756e646564" alt="jsDelivr"&gt;&lt;/a&gt; &lt;a href="https://cdnjs.com/libraries/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e9e5a7a72f7cbc65eedd0e4d7431e4d4762c472ad4a66b6648a8e74c2b6be331/68747470733a2f2f696d672e736869656c64732e696f2f63646e6a732f762f74737061727469636c6573" alt="Cdnjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e18baafcedd7efbbd13d6e2b1cf738c07ea898383c946e6e7b16400f813d70cb/68747470733a2f2f62616467652e667572792e696f2f6a732f74737061727469636c65732e737667" alt="npmjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bc16ec38506bbab6f6b729850ad28fd94a5643f1633b4356647033c3aa3fe102/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f74737061727469636c6573" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://lerna.js.org/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3bc63f921dd60bac6d91aa900ef570c928b2aa4c2124ed23647e8fe9d2232853/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d61696e7461696e6564253230776974682d6c65726e612d6363303066662e737667" alt="lerna"&gt;&lt;/a&gt; &lt;a href="https://www.codefactor.io/repository/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ce969771f1502f57861fe8ce7c787c209c50ef17c2e19f35cb1de0c960eba94a/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f6d617474656f6272756e692f74737061727469636c65732f6261646765" alt="CodeFactor"&gt;&lt;/a&gt; &lt;a href="https://www.codacy.com/manual/ar3s/tsparticles?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=matteobruni/tsparticles&amp;amp;utm_campaign=Badge_Grade" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f96d4d0dccc9c7491f3ed07af70a808b0fd4d2e4d863a1f7bb9e51e10ae526e/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6239383361616633343631613463343862316532656563636531666631643734" alt="Codacy Badge"&gt;&lt;/a&gt; &lt;a href="https://gitpod.io/#https://github.com/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/daadb4894128d1e19b72d80236f5959f1f2b47f9fe081373f3246131f0189f6c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f476974706f642d72656164792d2d746f2d2d636f64652d626c75653f6c6f676f3d676974706f64" alt="Gitpod Ready-to-Code"&gt;&lt;/a&gt; &lt;a href="https://repl.it/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/64adf1bd83058aa64f848245f74bef77cd7cc2a3f36343ac44d6d0c39cc41bc3/68747470733a2f2f7265706c2e69742f62616467652f6769746875622f6d617474656f6272756e692f74737061727469636c6573" alt="Run on Repl.it"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Do you want to use it on your website?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;This library is available on the two most popular CDNs and it's easy and ready to use, if you were using particles.js it's even easier&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You'll find the instructions &lt;a href="https://github.com/matteobruni/tsparticles/blob/main/README.md#library-installation"&gt;below&lt;/a&gt;, with all the links you need, and &lt;em&gt;don't be scared by &lt;strong&gt;TypeScript&lt;/strong&gt;, it's just the source language&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The output files are just JavaScript&lt;/strong&gt;. 🤩&lt;/p&gt;
&lt;p&gt;CDNs and &lt;code&gt;npm&lt;/code&gt; have all the sources you need in &lt;strong&gt;Javascript&lt;/strong&gt;, a bundle browser ready (tsparticles.min.js) and all files splitted for &lt;code&gt;import&lt;/code&gt; syntax.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you are still interested&lt;/strong&gt; some lines below there are some instructions for migrating from…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/matteobruni/tsparticles"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


</description>
      <category>vue</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What Is a Framework In Web Development?</title>
      <author>SolveIt</author>
      <pubDate>Thu, 29 Apr 2021 14:14:51 +0000</pubDate>
      <link>https://dev.to/solveit/what-is-a-framework-in-web-development-3cc3</link>
      <guid>https://dev.to/solveit/what-is-a-framework-in-web-development-3cc3</guid>
      <description>&lt;p&gt;Web frameworks designed to write web applications. Frameworks consist of many different libraries that facilitate the development of a software product or website. Web application development frameworks are collections of different tools. Frameworks vary in their capabilities and functions, depending on the tasks set. They define the structure, set the rules, and provide the necessary set of development tools.&lt;/p&gt;

&lt;p&gt;Development is definitely not an easy process. It includes many different tasks — planning, coding and testing. Frameworks make developers' work easier by allowing them to control the entire software development process from a single platform.&lt;/p&gt;

&lt;p&gt;The programming interface (API) and the architecture of the future apps,  built with it, depends on the framework definition. Developers know the libraries and understand the basic development patterns.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backend-frameworks"&gt;
  &lt;/a&gt;
  Backend frameworks
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wQnkusiN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z01w4eep7woo4gnekqkk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wQnkusiN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z01w4eep7woo4gnekqkk.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Backend frameworks are running on the server side. They are responsible for developing well-structured, secure and dynamic backend applications. The tools provided by such frameworks make the whole development process greatly simplify, helping you to focus on requested ideas and features.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Express&lt;/strong&gt; - used by well-known companies such as Accenture, IBM and Uber. Express is a minimalistic, rapid and flexible framework. It provides all the capabilities you need while actively leveraging all the benefits and power of Node.js. Supports REST API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Django&lt;/strong&gt; - a popular framework used by IT leaders Google, YouTube, Instagram for web development on Python. With many available useful functions: routing, working with a database, the admin part of the site and more. The framework implements many important security principles on its own.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frontend-frameworks"&gt;
  &lt;/a&gt;
  Frontend frameworks
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XwhFxu8f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5sxuc6k9v5v0tnkysesj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XwhFxu8f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5sxuc6k9v5v0tnkysesj.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Frontend frameworks work in the browser and can be used to realize user interfaces or improve them in different ways, build site logic and create single-page applications.&lt;/p&gt;

&lt;p&gt;With these frameworks developers can integrate innovative solutions and improve the user interfaces, websites and applications will look good in any browser and system, making them accessible for every user. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Angular&lt;/strong&gt; -  specialized in single-page application (SPA), highly rated by Microsoft and Paypal. Used for TypeScript development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Vue&lt;/strong&gt; - flexible tool with a progressive structure that can be easily integrated into existing projects. Component architecture and rich ecosystem allows to develop complex apps with minimal costs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ember&lt;/strong&gt; - framework for maximizing developers productivity. It applies the best programming practices and many useful functions and components. Used by Google, Microsoft, Heroku and Netflix.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fullstack-frameworks"&gt;
  &lt;/a&gt;
  Full-stack frameworks
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bRheBfYk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z9b2hkc4z9dugdmcirqp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bRheBfYk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z9b2hkc4z9dugdmcirqp.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These frameworks provide tools for both server-side and client-side to problem solving. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Meteor&lt;/strong&gt; is a good example. Server side and client side, both can be created using the same programming language - JavaScript. This makes it possible to create and use one codebase for running an application, which contains both front- and back-end logic. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flask&lt;/strong&gt;, written on Python, is another example of a full-stack framework.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frameworks-and-microframeworks"&gt;
  &lt;/a&gt;
  Frameworks and microframeworks
&lt;/h2&gt;

&lt;p&gt;What is framework in web development? Web development frameworks can vary in sizes. There are tools that can be solutions for everything. Lighter weight options specialize in solving specific problems. Such frameworks are called microframeworks. Their functionality is extended with other applications. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#focus-on-these-frameworks-in-2021"&gt;
  &lt;/a&gt;
  Focus on these frameworks in 2021
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W-S1vp5t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9cgi6qd7h092how5h644.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W-S1vp5t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9cgi6qd7h092how5h644.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-bootstrap"&gt;
  &lt;/a&gt;
  1. Bootstrap
&lt;/h4&gt;

&lt;p&gt;This framework can solve almost any actual problems with a large number of free and paid templates.&lt;br&gt;
Bootstrap can be tuned in with SASS. The user can establish own projects using npm.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-foundation"&gt;
  &lt;/a&gt;
  2. Foundation
&lt;/h4&gt;

&lt;p&gt;Doesn't have a separate style. The huge variety of tools can set up for yourself.&lt;br&gt;
Included navigation bars, multiple container types, and a developer-friendly grid. Foundation also offers access to ready-made HTML templates.&lt;br&gt;
Motion UI can be used for animations with inbuilt effects.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-bulma"&gt;
  &lt;/a&gt;
  3. Bulma
&lt;/h4&gt;

&lt;p&gt;Users can only get good looking web pages with default settings.&lt;br&gt;
The flexbox module makes it easy to create responsive layouts.&lt;br&gt;
Setting up the default project parameters is done in minutes.&lt;br&gt;
Doesn't contain JavaScript functionality, but integrates easily with other frameworks.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-uikit"&gt;
  &lt;/a&gt;
  4. UIKit
&lt;/h4&gt;

&lt;p&gt;Has a variety of components for allowing to perform complex frontend layouts, and also provides access to advanced elements (navigation bars, sidebars, and parallax structures).&lt;br&gt;
Ability to set and widen with LESS or SASS preprocessors.&lt;br&gt;
Provides a web customizer to allow create own designs and copy SASS or LESS variables into projects.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-milligram"&gt;
  &lt;/a&gt;
  5. Milligram
&lt;/h4&gt;

&lt;p&gt;Readily to configure and apply heavy features to refine productivity.&lt;br&gt;
Has no default style, it's possible to create what users want.&lt;br&gt;
Simple interface, fast to understand all features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mobile-development-frameworks"&gt;
  &lt;/a&gt;
  Mobile Development Frameworks
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r9eGo2XO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8nuoi25zprz4ckn40j8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r9eGo2XO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8nuoi25zprz4ckn40j8.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-ionic"&gt;
  &lt;/a&gt;
  1. Ionic
&lt;/h4&gt;

&lt;p&gt;Ionic is an open-source mobile UI toolkit for developing high-quality, cross-platform applications for Android, iOS, and the Web from one codebase.&lt;/p&gt;

&lt;p&gt;Ionic is a development platform for the whole application lifecycle that allows teams to create better and faster applications. Some of the popular applications developed using Ionic are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MarketWatch&lt;/li&gt;
&lt;li&gt;McDonald's &lt;/li&gt;
&lt;li&gt;Pacifica&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#2-xamarin"&gt;
  &lt;/a&gt;
  2. Xamarin
&lt;/h4&gt;

&lt;p&gt;Xamarin is open-source application development platform for creating Android, iOS applications with .NET, and C#. &lt;/p&gt;

&lt;p&gt;Some of the popular applications developed using Xamarin are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Alaska airlines &lt;/li&gt;
&lt;li&gt;CA Mobile&lt;/li&gt;
&lt;li&gt;Novarum DX&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#3-flutter"&gt;
  &lt;/a&gt;
  3. Flutter
&lt;/h4&gt;

&lt;p&gt;Flutter is Google’s UI toolkit for building beautiful, natively compiled applications for mobile, web, and desktop from a single codebase. It has an expressive and flexible UI and gives a native performance on iOS and Android platforms.&lt;/p&gt;

&lt;p&gt;Some of the popular applications developed using Flutter are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Alibaba&lt;/li&gt;
&lt;li&gt;Cryptography&lt;/li&gt;
&lt;li&gt;Google Ads&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;What is a web development framework? It is a good decision for developers. Frameworks will simplify development processes. Developers should always stay in touch with new technologies and frameworks for successful work. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#advantages-of-using-a-software-frameworks"&gt;
  &lt;/a&gt;
  Advantages of using a software frameworks:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Helps in setting programming practices and fitting use of development patterns&lt;/li&gt;
&lt;li&gt;Code have more secure&lt;/li&gt;
&lt;li&gt;Ability to avoid duplicate and redundant code&lt;/li&gt;
&lt;li&gt;Helps develop code without bugs&lt;/li&gt;
&lt;li&gt;Makes it easier to work on difficult technologies&lt;/li&gt;
&lt;li&gt;Possibility to contribute to open-source frameworks&lt;/li&gt;
&lt;li&gt;Frameworks are pre-tested and save time for developing applications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Originally published at &lt;a href="https://solveit.dev"&gt;https://solveit.dev&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>framework</category>
      <category>development</category>
      <category>webdev</category>
    </item>
    <item>
      <title>DISCUSS: Climate change and webdevelopment</title>
      <author>Naseki</author>
      <pubDate>Thu, 29 Apr 2021 14:05:55 +0000</pubDate>
      <link>https://dev.to/naseki/discuss-how-much-does-climate-change-impact-your-decisions-as-a-dev-3d93</link>
      <guid>https://dev.to/naseki/discuss-how-much-does-climate-change-impact-your-decisions-as-a-dev-3d93</guid>
      <description>&lt;p&gt;I know, I know! Earth Day has already passed and I should've asked this last week. I only realised after I'd posted last week's discussion post that this topic would have been very relevant to that day. Still, this is worth talking about!&lt;/p&gt;

&lt;p&gt;I'll be mainly focusing on webdev, but this could apply to any programming field.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-our-decisions-could-impact-the-environment"&gt;
  &lt;/a&gt;
  How our decisions could impact the environment
&lt;/h1&gt;

&lt;p&gt;It shouldn't come as a surprise that the internet accounts for almost 4% of global emissions. Here's a &lt;a href="https://www.climatecare.org/resources/news/infographic-carbon-footprint-internet/"&gt;handy infographic&lt;/a&gt; if you'd to know a more!&lt;/p&gt;

&lt;p&gt;It's the reason why big companies are starting to opt for green energy. Think of Google running 100% on renewable energy for several years now. It even has a &lt;a href="https://sustainability.google"&gt;site dedicated to sustainability&lt;/a&gt;! By using Google's services, you're essentially running your stuff on green energy.&lt;/p&gt;

&lt;p&gt;Then, we've got the other side of the hill, like the NFT craze that's still lingering. One of the major arguments against NFT was its environmental impact due to the computing power required for each transaction. Even the &lt;a href="https://www.theatlantic.com/ideas/archive/2021/04/nfts-werent-supposed-end-like/618488"&gt;creator of NFT&lt;/a&gt; talks about it. But right now, the technical solutions to reduce all that computing power are out there.&lt;/p&gt;

&lt;p&gt;That's how we can make a difference. 🌱&lt;/p&gt;

&lt;p&gt;Now, I don't want to go in-depth about this topic. This isn't an article to inform you all of it. Giving some examples might give some clarity on where I'm going with this. I mainly want to hear from others what they think they could do about it!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#%E2%9C%8D-comment-below-answering-the-following-questions"&gt;
  &lt;/a&gt;
  ✍ Comment below answering the following questions
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Do you think your &lt;strong&gt;development process&lt;/strong&gt; can benefit or harm nature, even if in a small way? If so, how?&lt;/li&gt;
&lt;li&gt;Is environmental impact part of your decision-making process when choosing between &lt;strong&gt;products for development&lt;/strong&gt;? (e.g. hosting)&lt;/li&gt;
&lt;li&gt;After reading this short post, do you feel climate change should &lt;strong&gt;cross your mind more often&lt;/strong&gt; in your problem-solving process?&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ciETrbsg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sa0hfs0886uf0g7c0b7e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ciETrbsg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sa0hfs0886uf0g7c0b7e.png" alt="Naseki logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/Naseki_"&gt;Twitter&lt;/a&gt; | &lt;a href="https://naseki.com"&gt;Website&lt;/a&gt; | &lt;a href="https://buttondown.email/Naseki/"&gt;Newsletter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>watercooler</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Your Guide to Best Task Trackers for Developers</title>
      <author>Anastasia 🏄🏻‍♀️</author>
      <pubDate>Thu, 29 Apr 2021 14:03:22 +0000</pubDate>
      <link>https://dev.to/actitime/your-guide-to-best-task-trackers-for-developers-4b36</link>
      <guid>https://dev.to/actitime/your-guide-to-best-task-trackers-for-developers-4b36</guid>
      <description>&lt;p&gt;If you’re struggling to stay on top of tasks, you’re not the only one. According to a &lt;a href="https://www.gallup.com/workplace/231668/dismal-employee-engagement-sign-global-mismanagement.aspx"&gt;Gallup State of the Global Workplace report&lt;/a&gt;, 85% of employees aren’t engaged or completely disengaged from their work. If you’re a developer that’s working at home, it can be even harder to focus when you’re dealing with so many more distractions.&lt;/p&gt;

&lt;p&gt;Luckily, there are many tools and techniques at your disposal to help focus on your priorities, and one notable tool is task tracking software. Task tracking may seem like an extra step in your workday, but this kind of software is more helpful than you may realize.&lt;/p&gt;

&lt;p&gt;With this in mind, read on to learn about some of the best task tracker software out there for developers!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#actitime"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.actitime.com/"&gt;actiTIME&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ByKEkJioprU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;actiTIME is an easy time and task tracking software that can also help you analyze your performance based on the data it collects.&lt;/p&gt;

&lt;p&gt;The best part about actiTIME is that it’s easy to get started in only a few clicks. The software adapts to your workflow. You can easily configure it to hide the features that you don’t need and don’t want to see. It offers an agile Kanban board so that you can see what you need to do on any given day at a glance. You’ll also be able to reorder and reorganize your tasks as your priorities change.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quire"&gt;
  &lt;/a&gt;
  &lt;a href="https://quire.io/"&gt;Quire&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Qn8k0YsutsI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Quire is a visually simple, collaborative task tracker software for teams that need to break down large projects into easy-to-manage bites.&lt;/p&gt;

&lt;p&gt;It helps you manage your thought process for larger projects in descending lists that make sense. Teams can then arrange tasks, steps, and projects into Kanban boards. One of the most helpful additions is the use of graphs and charts so that you can see your team’s progress easily.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jira"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.atlassian.com/software/jira"&gt;Jira&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xrCJv0fTyR8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Jira is created for agile software teams who struggle with quick and numerous releases.&lt;/p&gt;

&lt;p&gt;Not only can teams plan their workflow and springs, but they can also accurately track their progress with real-time visual data. Its integration with Bitbucket also speeds up development workflow by updating issues and transitioning work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backlog"&gt;
  &lt;/a&gt;
  &lt;a href="https://youtu.be/9UKU51tjw-k"&gt;Backlog&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/9UKU51tjw-k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Backlog is a task management software that emphasizes a clear view of everything that’s due in one place.&lt;/p&gt;

&lt;p&gt;Entire teams can stay on top of deadlines through deadline reminders with start and stop dates. Large tasks can also be broken down in easier to manage subtasks that are delegated to team members easily. Teams are also notified about issues, pull requests, and more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#meistertask"&gt;
  &lt;/a&gt;
  &lt;a href="https://youtu.be/-Op3dL4n4ck"&gt;MeisterTask&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-Op3dL4n4ck"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This web-based task tracker emphasizes its ease of use for teams.&lt;/p&gt;

&lt;p&gt;Its intuitive design doesn’t need lengthy tutorials or support articles in order for teams to start using it to its full capability. This is balanced with its customizable workflows and flexibility when it comes to integrating with other apps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rationalplan"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.rationalplan.com/"&gt;RationalPlan&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/XtDhBkdBEsY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;RationalPlan is a powerful solution for project management that utilizes PMBOK guidelines.&lt;/p&gt;

&lt;p&gt;It’s tailored for teams that work in construction, engineering, services, consulting, and business or software development. This means that along with task management that includes milestones and duration-driven activities, users can enjoy cost tracking as well as portfolio management. It also includes detailed reports to deliver to stakeholders.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#things"&gt;
  &lt;/a&gt;
  &lt;a href="https://culturedcode.com/things/"&gt;Things&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2R6o5t0VK_A"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Things is a well-known task manager that can be used by teams as well as for personal goal tracking.&lt;/p&gt;

&lt;p&gt;The all-new design includes an easy-to-navigate menu on the side that shows each individual section according to date or topic. Unlike simple to-do apps, it gives you the ability to add headers as well as see a calendar view of your tasks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#taskque"&gt;
  &lt;/a&gt;
  &lt;a href="https://taskque.com/"&gt;TaskQue&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/0D3TKNnH5Cc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The TaskQue software was created to boost productivity through its intuitive tools.&lt;/p&gt;

&lt;p&gt;It can automatically assign tasks to team members based on their current workflow so that no one is ever overburdened. It also includes a discussion module to ease communication. With productivity as its main focus, team members have the ability to create personal to-do lists that are separate from their assigned work tasks. It also includes charts and graphs that give a quick and insightful overview of workflow progress.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wimi"&gt;
  &lt;/a&gt;
  &lt;a href="https://youtu.be/hTv53hx14dU"&gt;WiMi&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/hTv53hx14dU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;WiMi is crafted for large teams that need a hub to organize communication and projects.&lt;/p&gt;

&lt;p&gt;Workspaces help centralize data as well as goals and deadlines so that everyone is on the same page. Meanwhile, Channels act as your team’s main communication hub that also includes the ability to direct message. Users also have the ability to video call each other with screen sharing integrated. Lastly, Tasks give teams the ability to structure large projects into easy-to-manage deadlines with shared to-do lists.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keep-your-workflow-under-control"&gt;
  &lt;/a&gt;
  Keep Your Workflow Under Control
&lt;/h2&gt;

&lt;p&gt;As you can see, task tracking software is an easy way to center your workday around. By taking the time to learn the software, you’ll be able to take control of your day by seeing the tasks you should be prioritizing. Delegating tasks as well as seeing the progress on a large project is easy through intuitively designed dashboards.&lt;/p&gt;

&lt;p&gt;Some project management software even comes with the ability to automate tasks and message team members so that everyone is on the same page.&lt;/p&gt;

&lt;p&gt;Ready to take control of your work and keep on top of all of your developer tasks? Try out our &lt;a href="https://www.actitime.com/free-online-trial"&gt;fully-functional, 30-day trial&lt;/a&gt; today!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.actitime.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SurHVTlO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619702589851/tlEoizZRK.jpeg" alt="banner.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>The Data Science Roadmap</title>
      <author>Dave Amiana</author>
      <pubDate>Thu, 29 Apr 2021 13:37:50 +0000</pubDate>
      <link>https://dev.to/iamdeb25/the-data-science-roadmap-1km</link>
      <guid>https://dev.to/iamdeb25/the-data-science-roadmap-1km</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-data-science"&gt;
  &lt;/a&gt;
  What is Data Science?
&lt;/h2&gt;

&lt;p&gt;Data science seems to be a convoluted term that rose in popularity mostly tied with the advancements of machine learning frameworks. Some argue that &lt;em&gt;data science&lt;/em&gt; is a term for an &lt;strong&gt;overpaid statistician&lt;/strong&gt;, others imagine them to be a role one adapts from &lt;em&gt;software engineering&lt;/em&gt;, while some see them as &lt;em&gt;businessmen with technical skills&lt;/em&gt;. I've seen heated forums debating the ethos of this term. I found Field Cady's definition of data science to be in the right spot where this tension can be settled. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Data science means doing analytics work that, for one reason or another, requires a substantial amount of software engineering skills.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At the heart of this practice lies a set of skills that makes one a data scientist. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-data-scientists"&gt;
  &lt;/a&gt;
  What are Data Scientists?
&lt;/h2&gt;

&lt;p&gt;There are three hats the guise of a data scientist revolves into. &lt;/p&gt;

&lt;p&gt;Whereas a statistician is trained to do all the analytical methods, a data scientist extends their knowledge of applying statistical techniques for building the necessary tools in modeling a computational system. Data scientists make sure they covered the edge cases where no known tools are yet found to be useful. They apply their proficiency in computer programming where a traditional statistician might not have. A data scientist does not need statistical tools to get their work done.&lt;/p&gt;

&lt;p&gt;In the guise of an Engineer. A data scientist has to be technically savvy. They have to know how to transform their data into something meaningful without relying too much on ready-made software. Covering the edge-cases means that exploring uncharted territories spawned with irregularities. A data scientist must cope up with irregularities. And one way to adapt is to develop the software skills in &lt;em&gt;handcrafting&lt;/em&gt; their tools to cover the edge cases. Note that turning your data into something that is finally useful for your model is one of the &lt;a href="https://www.elderresearch.com/blog/what-is-data-wrangling-and-why-does-it-take-so-long/"&gt;most crucial and tedious processes&lt;/a&gt; of data science (and machine learning).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is also a good point to motivate anyone to hone software skills. Not only that you grow beyond the ready-made services provided in the software, but you also gain the freedom to go wherever you want to go. Unchained.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Business people are oriented to the value of a product. Their sense is to follow whichever is essential to their business problem. Field Cady (2017), noted that what separates a good data science professional from a mediocre one is not up to their maths or engineering skills, it is about formulating the right question. The questions that we aim to solve roughly estimate the value of our product. In addition, business people are also good at with communicating other people. Likewise, a data scientist must tell us their most interesting insights in the form of a story, that does not limit discussion in a room of people who knows data science.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;No amount of technical competence or statistical rigor can make up for having solved a useless problem.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#the-data-explorers-roadmap"&gt;
  &lt;/a&gt;
  The Data Explorer's Roadmap
&lt;/h2&gt;

&lt;p&gt;Now that we clarified the terms, let's lay out our map in navigating our workflow as data explorers of the wild. I got this from François Chollet's introduction to Deep Learning and Field Cady's handbook for data scientists.  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Define the problem&lt;/strong&gt;. List down the questions you want to ask. This will be your guide for understanding the kinds of data you require. This is usually done in groups. This step is critical as it sets your objective, and you need to be very clear about it. Having this discussion on your team keeps everyone on the same page working on the same set of objectives.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Gather relevant data sets&lt;/strong&gt;. Check if there are blanks on your dataset. What does joining two datasets mean? Do they agree on one thing? This is also critical for it affects the quality of your output: you feed data in, and you get information out. If you feed your model with a bunch of garbage (having pathological patterns, too many outliers, etc.). In a notable paper from Microsoft researchers &lt;a href="https://dl.acm.org/doi/10.3115/1073012.1073017"&gt;Michele Banko and Eric Bill (2001)&lt;/a&gt;, and from the computer scientist &lt;a href="https://bityl.co/6bZq"&gt;Norvig &lt;em&gt;et al.&lt;/em&gt; (2009)&lt;/a&gt;: &lt;strong&gt;data matters more to algorithms&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hack and Analyze&lt;/strong&gt;. This is where it gets so bright and beautiful! What you do is you play with a bunch of knobs and twist them together randomly to see how one affects the other -- that is the famous neural network architecture: the foundations of Deep Learning AI. On the other end, is a set of more rigorous algorithms from Statistics and Computer Science known as Clustering, Classification, our good old Regression, and dimensionality reduction: this comprises the &lt;a href="https://bityl.co/6bdU"&gt;shallow ML architecture&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Communicate your results&lt;/strong&gt;. At the end of it all: we should tailor our results in a coherent story. Make it compelling! That includes our intentions, and the results of our analysis put together in a format that anyone can understand. We don't talk to the people in the room we work with anymore. We talk for the people. Make it visual. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Cady, F. (2017). The Data Science Handbook. John Wiley &amp;amp; Sons.&lt;/li&gt;
&lt;li&gt;Chollet, F. (2018). Deep Learning with Python (Vol. 361). New York: Manning.&lt;/li&gt;
&lt;li&gt;Géron, A. (2019). Hands-on machine learning with Scikit-Learn, Keras, and TensorFlow: Concepts, tools, and techniques to build intelligent systems. O'Reilly Media.&lt;/li&gt;
&lt;li&gt;Banko, M., &amp;amp; Brill, E. (2001, July). Scaling to very very large corpora for natural language disambiguation. In Proceedings of the 39th annual meeting of the Association for Computational Linguistics (pp. 26-33).&lt;/li&gt;
&lt;li&gt;Halevy, A., Norvig, P., &amp;amp; Pereira, F. (2009). The unreasonable effectiveness of data. IEEE Intelligent Systems, 24(2), 8-12.&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;A note from the author:&lt;/p&gt;

&lt;p&gt;I do not consider myself a data scientist. I only have fun times with Machine Learning Engineering as a part of my software projects. The ideas I gathered here are not entirely from my own. For the interested reader, I referenced above what I would recommend for your to get started. &lt;em&gt;Cheers!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>datascience</category>
      <category>computerscience</category>
      <category>beginners</category>
    </item>
    <item>
      <title>CI/CD with TeamCity | DevOps Tool of the Month (4)</title>
      <author>Techworld with Nana</author>
      <pubDate>Thu, 29 Apr 2021 13:32:47 +0000</pubDate>
      <link>https://dev.to/techworld_with_nana/ci-cd-with-teamcity-devops-tool-of-the-month-4-16pm</link>
      <guid>https://dev.to/techworld_with_nana/ci-cd-with-teamcity-devops-tool-of-the-month-4-16pm</guid>
      <description>&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLy7NrYWoggjztwSskGu59O38gL5v0LjUT"&gt;DevOps tool of the month&lt;/a&gt; is a series, where each month I introduce one new useful DevOps tool in 2021 🙌🏼&lt;/p&gt;

&lt;p&gt;For April I chose: &lt;a href="https://www.jetbrains.com/teamcity/"&gt;&lt;strong&gt;TeamCity&lt;/strong&gt;&lt;/a&gt; 🎉 - the general-purpose CI/CD solution by JetBrains. It's a powerful platform for DevOps-centric teams&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-youtube-zqi4fdfs60-"&gt;
  &lt;/a&gt;
  &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/zqi4fDF-S60"&gt;
&lt;/iframe&gt;

&lt;/h2&gt;

&lt;h1&gt;
  &lt;a href="#strengths-of-teamcity-%EF%B8%8F"&gt;
  &lt;/a&gt;
  Strengths of TeamCity ⭐️
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#%EF%B8%8F-simple-configuration"&gt;
  &lt;/a&gt;
  ⚡️ Simple Configuration
&lt;/h3&gt;

&lt;p&gt;One of the main advantages of TeamCity is its &lt;strong&gt;simple configuration&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Compared to Jenkins e.g., you don't need to install and configure plugins for each and every common task like,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;triggering the build automatically&lt;/li&gt;
&lt;li&gt;using build tools like Maven, npm or Gradle&lt;/li&gt;
&lt;li&gt;connecting to a Docker registry&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These &lt;strong&gt;out-of-the-box integrations with many popular tools&lt;/strong&gt; (version control, issue tracker, package repository, ...) make it really easy to use, as you don't need any third-party plugins/addons for the common tasks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%EF%B8%8F-configuration-as-code"&gt;
  &lt;/a&gt;
  ⚡️ Configuration as Code
&lt;/h3&gt;

&lt;p&gt;Configuring the build in a nice UI is great, however nowadays, we want to configure builds, tests, and deployment as code that is trackable and stored in a version control system.&lt;/p&gt;

&lt;p&gt;In TeamCity you can write your configuration code using a real programming language, which is Kotlin (developed by JetBrains itself 🤓).&lt;/p&gt;

&lt;p&gt;So you have the &lt;strong&gt;power of a full-featured programming language&lt;/strong&gt; and can use its libraries and tool set as well as make use of autocompletion and refactoring in your IDE etc. This can help you keep your CI/CD configuration clean and maintainable. 👍&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PJtigzed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ez92s4394vclag95tiy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PJtigzed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ez92s4394vclag95tiy.png" alt="Configuration as Code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%EF%B8%8F-build-chains"&gt;
  &lt;/a&gt;
  ⚡️ Build Chains
&lt;/h3&gt;

&lt;p&gt;In TeamCity you can create build chains 🔗 from your builds by defining dependencies between them. That means you can &lt;strong&gt;configure which builds depend on which ones in a chain&lt;/strong&gt;. So whenever you run a build, TeamCity will check for all of its dependent builds and run them first in a correct order. You can also easily pass the artifacts or other outputs from one build to another. &lt;/p&gt;

&lt;p&gt;In addition to running builds in sequence, you can also run them in parallel. An example use case for this would be, if you want to run the same tests on different platforms or environments, like on different operating systems or different cloud platforms etc, before building and deploying the application. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--70PVi5dR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ow2ik3r1blvd25bklqzo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--70PVi5dR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ow2ik3r1blvd25bklqzo.png" alt="Build Dependencies"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%EF%B8%8F-personal-builds"&gt;
  &lt;/a&gt;
  ⚡️ Personal Builds
&lt;/h3&gt;

&lt;p&gt;One more great feature I want to mention is that you can run what's called "Personal" builds &lt;strong&gt;directly from your code editor&lt;/strong&gt;. Personal builds are like developer's own builds which ONLY they can access. 😎&lt;/p&gt;

&lt;p&gt;So this is a very convenient way to trigger builds on a remote TeamCity server from your local development environment. This can be really useful if you want to test your changes before committing your code. Personal builds are available for all major IDEs.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#how-teamcity-works-teamcity-architecture"&gt;
  &lt;/a&gt;
  How TeamCity works - TeamCity Architecture 💡
&lt;/h1&gt;

&lt;p&gt;Now let's see how TeamCity works. It has a very clean architecture.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#teamcity-server"&gt;
  &lt;/a&gt;
  TeamCity Server
&lt;/h3&gt;

&lt;p&gt;You have a central management component, called TeamCity server, where you can configure your builds and see your build information, all in a nice UI. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-agent"&gt;
  &lt;/a&gt;
  Build Agent
&lt;/h3&gt;

&lt;p&gt;Once you configure the builds they need to run somewhere, right? For that TeamCity has Build Agents. And you can add and connect any number of build agents to your server. These agents can be installed anywhere, on an EC2 server, on your own on-premise servers, it could be a Docker container etc. And each agent can have different tools installed on them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automatic-detection"&gt;
  &lt;/a&gt;
  Automatic Detection
&lt;/h3&gt;

&lt;p&gt;And for each build TeamCity will &lt;strong&gt;automatically detect what build agent can execute that build&lt;/strong&gt; based on the steps configured in that build. &lt;/p&gt;

&lt;p&gt;For example, if your build is using npm command to run JS tests, you will need a build agent with npm installed on it to run the build. If your build creates Docker image from your application and pushes it to Docker registry, obviously Docker will be needed to run these steps. So TeamCity will automatically detect a build agent with Docker installed on it and execute the build on that build agent. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xd1EtNHW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d56dg2b0prmls9c4t5ld.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xd1EtNHW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d56dg2b0prmls9c4t5ld.png" alt="TeamCity Auto-Detection"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#get-started-with-teamcity-setup-ci-pipeline-from-scratch"&gt;
  &lt;/a&gt;
  Get started with TeamCity - Setup CI Pipeline from Scratch 👩🏻‍💻
&lt;/h1&gt;

&lt;p&gt;Depending on which option you choose:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;self-managed&lt;/strong&gt; or&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;fully-managed TeamCity Cloud&lt;/strong&gt;
the steps will be different.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the video I show you the self-managed alternative, meaning installing and configuring the TeamCity server and connecting the Build Agents ourselves. Note that when using TeamCity Cloud you don't have to do this setup, so you can get started much faster.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#steps-to-setup-our-ci-pipeline-from-scratch"&gt;
  &lt;/a&gt;
  Steps to setup our CI Pipeline from scratch:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. Install TeamCity Server&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;2. Configure CI Pipeline&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4mhij8FF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/balhtf9i47qydjylf7dp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4mhij8FF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/balhtf9i47qydjylf7dp.png" alt="CI Pipeline"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;3. Connect Build Agents&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;4. Run the Build&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So, first we will install TeamCity server and then configure a continuous integration pipeline for a simple Java Gradle project that builds a Docker image and pushes it to a private DockerHub registry. After which we will connect Build Agents to it to run our build. 🔥&lt;/p&gt;

&lt;p&gt;Check out my video for the step by step demo:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/zqi4fDF-S60"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Let me know what you think about it! 🤓 🧐&lt;/p&gt;

&lt;p&gt;More awesome tools coming up next on this series, so stay tuned for it! 🎬 😊&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 😍 for more content:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/groups/techworldwithnana"&gt;Private FB group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Njuchi_"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCdngmbVKX1Tgre699-XLlUA?sub_confirmation=1"&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.instagram.com/techworld_with_nana/"&gt;Instagram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//linkedin.com/in/nana-janashia"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>devops</category>
      <category>cicd</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>ES6 Cheatsheet 🔥 - All You Need 🚀</title>
      <author>Garvit Motwani</author>
      <pubDate>Thu, 29 Apr 2021 13:30:55 +0000</pubDate>
      <link>https://dev.to/worldindev/es6-cheatsheet-all-you-need-1iaf</link>
      <guid>https://dev.to/worldindev/es6-cheatsheet-all-you-need-1iaf</guid>
      <description>&lt;p&gt;Hey Devs, This is an all you need ES6 cheatsheet for beginners and seasoned developers!&lt;/p&gt;

&lt;p&gt;So let's get started!!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#giveaway"&gt;
  &lt;/a&gt;
  🎉 Giveaway
&lt;/h2&gt;

&lt;p&gt;We are giving away any course you need on Udemy. Any price any course.&lt;br&gt;
To enter you have to do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;👍 React to this post&lt;/li&gt;
&lt;li&gt;✉️ Subscribe to our &lt;a href="https://worldindev.ck.page"&gt;newsletter&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;



&lt;p&gt;--&amp;gt; Grab the downloadable PDF version &lt;a href="https://worldindev.ck.page"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#block-scoping"&gt;
  &lt;/a&gt;
  Block scoping
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#let"&gt;
  &lt;/a&gt;
  Let
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;// only inside this `if`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#const"&gt;
  &lt;/a&gt;
  Const
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;let&lt;/code&gt; is the new &lt;code&gt;var&lt;/code&gt;. Constants work just like &lt;code&gt;let&lt;/code&gt;, but can't be reassigned.&lt;br&gt;
Check: &lt;a href="https://babeljs.io/learn-es2015/#let--const"&gt;Let and const&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#backtick-strings"&gt;
  &lt;/a&gt;
  Backtick strings
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#interpolation"&gt;
  &lt;/a&gt;
  Interpolation
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#multiline-strings"&gt;
  &lt;/a&gt;
  Multiline strings
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
hello
world
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Templates and multiline strings.&lt;br&gt;
Check: &lt;a href="https://babeljs.io/learn-es2015/#template-strings"&gt;Template strings&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#binary-and-octal-literals"&gt;
  &lt;/a&gt;
  Binary and octal literals
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mb"&gt;0b1010010&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;oct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mo"&gt;0o755&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Check: &lt;a href="https://babeljs.io/learn-es2015/#binary-and-octal-literals"&gt;Binary and octal literals&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#new-methods"&gt;
  &lt;/a&gt;
  New methods
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#new-string-methods"&gt;
  &lt;/a&gt;
  New string methods
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ll&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;he&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;padStart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "   hello"&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;padEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// "hello   " &lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;padEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// hello!!!&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;u1E9B&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;u0323&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;NFC&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Check: &lt;a href="https://babeljs.io/learn-es2015/#math--number--string--object-apis"&gt;New methods&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#classes"&gt;
  &lt;/a&gt;
  Classes
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Shape&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#constructor"&gt;
  &lt;/a&gt;
  Constructor
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;constructor&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#methods"&gt;
  &lt;/a&gt;
  Methods
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;getArea&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#calling-superclass-methods"&gt;
  &lt;/a&gt;
  Calling superclass methods
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;expand&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#static-methods"&gt;
  &lt;/a&gt;
  Static methods
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;createFromDiameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;diameter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Circle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;diameter&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Syntactic sugar for prototypes.&lt;br&gt;
Check: &lt;a href="https://babeljs.io/learn-es2015/#classes"&gt;Classes&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#exponent-operator"&gt;
  &lt;/a&gt;
  Exponent operator
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;byte&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="c1"&gt;// Same as: Math.pow(2, 8)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#promises"&gt;
  &lt;/a&gt;
  Promises
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#making-promises"&gt;
  &lt;/a&gt;
  Making promises
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;For asynchronous programming.&lt;br&gt;
Check: &lt;a href="https://babeljs.io/learn-es2015/#promises"&gt;Promises&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#using-promises"&gt;
  &lt;/a&gt;
  Using promises
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;···&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;···&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#using-promises-with-finally"&gt;
  &lt;/a&gt;
  Using promises with finally
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;···&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;···&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// logic independent of success/error })&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The handler is called when the promise is fulfilled or rejected.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#promise-functions"&gt;
  &lt;/a&gt;
  Promise functions
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;···&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;race&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;···&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;···&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;···&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#asyncawait"&gt;
  &lt;/a&gt;
  Async-await
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tweets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getTweets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tweets&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;async&lt;/code&gt; functions are another way of using functions.&lt;/p&gt;

&lt;p&gt;Check: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"&gt;async function&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#destructuring"&gt;
  &lt;/a&gt;
  Destructuring
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#destructuring-assignment"&gt;
  &lt;/a&gt;
  Destructuring assignment
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#arrays"&gt;
  &lt;/a&gt;
  Arrays
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nikola&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tesla&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#objects"&gt;
  &lt;/a&gt;
  Objects
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The Silkworm&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;R. Galbraith&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Supports for matching arrays and objects.&lt;br&gt;
Check: &lt;a href="https://babeljs.io/learn-es2015/#destructuring"&gt;Destructuring&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#default-values"&gt;
  &lt;/a&gt;
  Default values
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scores&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;math&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;sci&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scores&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Result:&lt;/span&gt;
&lt;span class="c1"&gt;// math === 22, sci === 33, arts === 50&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Default values can be assigned while destructuring arrays or objects.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#function-arguments"&gt;
  &lt;/a&gt;
  Function arguments
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;greeting&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Larry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ahoy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Destructuring of objects and arrays can also be done in function arguments.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#default-values"&gt;
  &lt;/a&gt;
  Default values
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rauno&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hi &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Hi Rauno!&lt;/span&gt;
&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Larry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="c1"&gt;// Hi Larry!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#reassigning-keys"&gt;
  &lt;/a&gt;
  Reassigning keys
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;printCoordinates&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`x: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, y: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;printCoordinates&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This example assigns &lt;code&gt;x&lt;/code&gt; to the value of the &lt;code&gt;left&lt;/code&gt; key.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#loops"&gt;
  &lt;/a&gt;
  Loops
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;artist&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;···&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The assignment expressions work in loops, too.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#object-destructuring"&gt;
  &lt;/a&gt;
  Object destructuring
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;detail&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;song&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Extract some keys individually and remaining keys in the object using rest (...) operator&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#spread"&gt;
  &lt;/a&gt;
  Spread
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#object-spread"&gt;
  &lt;/a&gt;
  Object spread
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#with-object-spread"&gt;
  &lt;/a&gt;
  with Object spread
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#without-object-spread"&gt;
  &lt;/a&gt;
  without Object spread
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="nx"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The Object spread operator lets you build new objects from other objects.&lt;/p&gt;

&lt;p&gt;Check: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator"&gt;Object spread&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#array-spread"&gt;
  &lt;/a&gt;
  Array spread
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#with-array-spread"&gt;
  &lt;/a&gt;
  with Array spread
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;admins&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;editors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rstacruz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#without-array-spread"&gt;
  &lt;/a&gt;
  without Array spread
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;admins&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rstacruz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The spread operator lets you build new arrays in the same way.&lt;/p&gt;

&lt;p&gt;Check: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator"&gt;Spread operator&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#function-arguments"&gt;
  &lt;/a&gt;
  Function arguments
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#default-arguments"&gt;
  &lt;/a&gt;
  Default arguments
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jerry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#rest-arguments"&gt;
  &lt;/a&gt;
  Rest arguments
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// y is an Array&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#spread"&gt;
  &lt;/a&gt;
  Spread
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(...[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;// same as fn(1, 2, 3)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Default, rest, spread.&lt;br&gt;
Check: &lt;a href="https://babeljs.io/learn-es2015/#default--rest--spread"&gt;Function arguments&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#fat-arrows"&gt;
  &lt;/a&gt;
  Fat arrows
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#fat-arrows"&gt;
  &lt;/a&gt;
  Fat arrows
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;···&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#with-arguments"&gt;
  &lt;/a&gt;
  With arguments
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text.txt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#implicit-return"&gt;
  &lt;/a&gt;
  Implicit return
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// No curly braces = implicit return&lt;/span&gt;
&lt;span class="c1"&gt;// Same as: numbers.map(function (n) { return n * 2 })&lt;/span&gt;
&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;}))&lt;/span&gt;
&lt;span class="c1"&gt;// Implicitly returning objects requires parentheses around the object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Like functions but with &lt;code&gt;this&lt;/code&gt; preserved.&lt;br&gt;
Check: &lt;a href="https://babeljs.io/learn-es2015/#arrows-and-lexical-this"&gt;Fat arrows&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#objects"&gt;
  &lt;/a&gt;
  Objects
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#shorthand-syntax"&gt;
  &lt;/a&gt;
  Shorthand syntax
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bye&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Same as: module.exports = { hello: hello, bye: bye }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Check: &lt;a href="https://babeljs.io/learn-es2015/#enhanced-object-literals"&gt;Object literal enhancements&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#methods"&gt;
  &lt;/a&gt;
  Methods
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;running&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Same as: App = { start: function () {···} }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Check: &lt;a href="https://babeljs.io/learn-es2015/#enhanced-object-literals"&gt;Object literal enhancements&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#getters-and-setters"&gt;
  &lt;/a&gt;
  Getters and setters
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;closed&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;closed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;closed&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;closed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Check: &lt;a href="https://babeljs.io/learn-es2015/#enhanced-object-literals"&gt;Object literal enhancements&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#computed-property-names"&gt;
  &lt;/a&gt;
  Computed property names
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;handlers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`on&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Same as: handlers = { 'onclick': true }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Check: &lt;a href="https://babeljs.io/learn-es2015/#enhanced-object-literals"&gt;Object literal enhancements&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#extract-values"&gt;
  &lt;/a&gt;
  Extract values
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fatherJS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;57&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Brendan Eich&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fatherJS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// [57, "Brendan Eich"]&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fatherJS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// [["age", 57], ["name", "Brendan Eich"]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#modules"&gt;
  &lt;/a&gt;
  Modules
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#imports"&gt;
  &lt;/a&gt;
  Imports
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;helpers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// aka: require('···')&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// aka: const Express = require('···').default || require('···')&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;indent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;helpers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// aka: const indent = require('···').indent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Helpers&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;helpers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// aka: const Helpers = require('···')&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;indentSpaces&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;indent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;helpers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// aka: const indent = require('···').indentSpaces&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;import&lt;/code&gt; is the new &lt;code&gt;require()&lt;/code&gt;.&lt;br&gt;
Check: &lt;a href="https://babeljs.io/learn-es2015/#modules"&gt;Module imports&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#exports"&gt;
  &lt;/a&gt;
  Exports
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;···&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// aka: module.exports.default = ···&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;mymethod&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;···&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// aka: module.exports.mymethod = ···&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.14159&lt;/span&gt;
&lt;span class="c1"&gt;// aka: module.exports.pi = ···&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;export&lt;/code&gt; is the new &lt;code&gt;module.exports&lt;/code&gt;.&lt;br&gt;
Check: &lt;a href="https://babeljs.io/learn-es2015/#modules"&gt;Module exports&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#generators"&gt;
  &lt;/a&gt;
  Generators
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#generators"&gt;
  &lt;/a&gt;
  Generators
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;idMaker&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;gen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;idMaker&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;  &lt;span class="c1"&gt;// → 0&lt;/span&gt;
&lt;span class="nx"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;  &lt;span class="c1"&gt;// → 1&lt;/span&gt;
&lt;span class="nx"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;  &lt;span class="c1"&gt;// → 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;It's complicated.&lt;br&gt;
Check: &lt;a href="https://babeljs.io/learn-es2015/#generators"&gt;Generators&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#forof-iteration"&gt;
  &lt;/a&gt;
  For..of iteration
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;···&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;For iterating through generators and arrays.&lt;br&gt;
Check: &lt;a href="https://babeljs.io/learn-es2015/#iterators--forof"&gt;For..of iteration&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/"&gt;MDN Web Docs&lt;/a&gt;&lt;br&gt;
&lt;a href="//https:/devhints.io/"&gt;DevHints&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.w3schools.com/"&gt;w3schools&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-giveaway-%EF%B8%8F"&gt;
  &lt;/a&gt;
  ⚡️ Giveaway ⚡️
&lt;/h2&gt;

&lt;p&gt;We are giving away any course you need on Udemy. Any price any course.&lt;br&gt;
Steps to enter the giveaway&lt;br&gt;
--&amp;gt; React to this post&lt;br&gt;
--&amp;gt; Subscribe to our &lt;a href="https://worldindev.ck.page/"&gt;Newsletter&lt;/a&gt; &amp;lt;-- Very important&lt;br&gt;
--&amp;gt; Follow me on &lt;a href="https://twitter.com/garvitmotwani"&gt;Twitter&lt;/a&gt; &amp;lt;-- x2 Chances of winning&lt;/p&gt;

&lt;p&gt;The winner will be announced on May 1, Via Twitter&lt;/p&gt;



&lt;p&gt;Thank you very much for reading this article.&lt;/p&gt;

&lt;p&gt;Comment any tricks &amp;amp; tips you know!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PLEASE LIKE, SHARE, AND COMMENT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://dev.to/garvitmotwani"&gt;Dev&lt;/a&gt; and &lt;a href="https://twitter.com/GarvitMotwani"&gt;Twitter&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Read also:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/garvitmotwani" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1xnkyVuI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--0F4scheH--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/370225/60416eff-f1ff-4a29-a5c9-2a13df7845c8.jpeg" alt="garvitmotwani image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/garvitmotwani/5-array-methods-you-should-know-22ff" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;5 Array Methods You Should Know 🚀&lt;/h2&gt;
      &lt;h3&gt;Garvit Motwani ・ Apr 27 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/devlorenzo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pCohWvfe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8B-BJEvg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571015/e3d4ff5f-e11d-4538-bb83-9d3ce3e9dfb9.gif" alt="devlorenzo image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/worldindev/400-javascript-interview-questions-with-answers-2fcj" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;400+ JavaScript Interview Questions 🎓  With Answers 🌠&lt;/h2&gt;
      &lt;h3&gt;DevLorenzo ・ Apr 27 ・ 181 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/daniel1404" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YKr9I-E---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hBgYP-SM--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/547275/e6dab600-34b7-49e0-a884-eb975de66405.png" alt="daniel1404 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/worldindev/6-python-tips-tricks-that-no-one-teaches-4j73" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;6 Python Tips &amp;amp; Tricks that no One Teaches 🚀🐍&lt;/h2&gt;
      &lt;h3&gt;Daniel Diaz ・ Apr 26 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#python&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Subscribe to our &lt;a href="https://chipper-motivator-3112.ck.page/05710ea3d3"&gt;newsletter&lt;/a&gt; to receive our weekly recap directly on your email!&lt;/p&gt;

&lt;p&gt;Join us on &lt;a href="https://discord.gg/aWS2YKk6"&gt;Discord&lt;/a&gt; to participate in hackathons with us / participate in our giveaways!&lt;/p&gt;

&lt;p&gt;Thanks for reading!!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>cheatsheet</category>
    </item>
    <item>
      <title>What Advice Would You Give to Your Younger Self? </title>
      <author>Anastasia 🏄🏻‍♀️</author>
      <pubDate>Thu, 29 Apr 2021 12:42:46 +0000</pubDate>
      <link>https://dev.to/coffeestasia/what-advice-would-you-give-to-your-younger-self-2obp</link>
      <guid>https://dev.to/coffeestasia/what-advice-would-you-give-to-your-younger-self-2obp</guid>
      <description>&lt;p&gt;Imagine that you traveled back in time and met your younger self, taking the first steps towards a dev career. What advice would you give to your younger self? &lt;/p&gt;

</description>
      <category>career</category>
      <category>productivity</category>
      <category>100daysofcode</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Using MongoDB with Pandas, NumPy, and Arrow</title>
      <author>rachelle palmer</author>
      <pubDate>Thu, 29 Apr 2021 12:41:23 +0000</pubDate>
      <link>https://dev.to/techbelle/using-mongodb-with-pandas-numpy-and-arrow-3h5o</link>
      <guid>https://dev.to/techbelle/using-mongodb-with-pandas-numpy-and-arrow-3h5o</guid>
      <description>&lt;p&gt;&lt;strong&gt;TLDR&lt;/strong&gt;: Today the Python devteam at MongoDB is thrilled (stoked!) to announce the beta release of PyMongoArrow, a PyPi package supporting CPython 3.6+. This release adds several new APIs that will be of interest to developers who use NumPy, Pandas or Apache Arrow-based frameworks to analyze data stored in MongoDB. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Review, contribute, or fork the &lt;a href="https://github.com/mongodb-labs/mongo-arrow"&gt;code&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Read the &lt;a href="https://mongo-arrow.readthedocs.io/en/latest/index.html"&gt;docs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;--&lt;/p&gt;

&lt;p&gt;As the name suggests, PyMongoArrow leverages Apache Arrow to offer fast and easy conversion of MongoDB query result sets to multiple numerical data formats popular among Python developers including NumPy ndarrays and Pandas DataFrames. &lt;/p&gt;

&lt;p&gt;As reference points for our implementation, we also took a look at &lt;a href="https://pandas-gbq.readthedocs.io/en/latest/api.html#pandas_gbq.read_gbq"&gt;BigQuery’s Pandas integration&lt;/a&gt;, pandas methods to handle JSON/semi-structured data, the &lt;a href="https://docs.snowflake.com/en/user-guide/python-connector-api.html"&gt;Snowflake Python connector&lt;/a&gt;, and &lt;a href="https://docs.dask.org/en/latest/dataframe.html"&gt;Dask.DataFrame&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it Works
&lt;/h1&gt;

&lt;p&gt;PyMongoArrow relies upon a user-specified data schema to marshall query result sets into tabular form. Users can define the schema by instantiating &lt;code&gt;pymongoarrow.api.Schema&lt;/code&gt; using a mapping of field names to type-specifiers, e.g.:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from pymongoarrow.api import Schema
schema = Schema({'_id': int, 'amount': float, 'last_updated': datetime})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are multiple permissible type-identifiers for each supported BSON type. For a full-list of supported types and associated type-identifiers, see &lt;a href="https://mongo-arrow.readthedocs.io/en/latest/supported_types.html"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#give-it-a-try"&gt;
  &lt;/a&gt;
  Give it a Try
&lt;/h1&gt;

&lt;p&gt;You can install PyMongoArrow on your local machine using Pip: &lt;code&gt;$ python -m pip install pymongoarrow&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;or utilize it with &lt;a href="https://www.mongodb.com/cloud"&gt;mongodb atlas&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python -m pip install pymongoarrow
$ python -m pip install pymongo[srv]&amp;gt;=3.11,&amp;lt;4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(to use PyMongoArrow with MongoDB Atlas’ mongodb+srv:// URIs users must install PyMongo with the srv extra in addition to installing PyMongoArrow).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#quick-examples-of-how-it-works"&gt;
  &lt;/a&gt;
  Quick Examples of How it Works
&lt;/h1&gt;

&lt;p&gt;to run a find operation to load all records with a non-zero amount as a:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pandas.DataFrame&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;df = client.db.data.find_pandas_all({'amount': {'$gt': 0}}, schema=schema)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;numpy.ndarray&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;ndarrays = client.db.data.find_numpy_all({'amount': {'$gt': 0}}, schema=schema)&lt;/code&gt;&lt;br&gt;
in this case, the return value is a dictionary where the keys are filed names and values are the corresponding arrays.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pyarrow.Table&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;arrow_table = client.db.data.find_arrow_all({'amount': {'$gt': 0}}, schema=schema)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Developers who create an Arrow table directly can then utilize some of Arrow’s other capabilities, for example, serializing data and sending it to workers (as in a Dask workflow), or use pyArrow’s APIs to write a queried dataset to Parquet format, csv, or many other PyPi packages that operate on Arrow formatted data. For example, to write the table referenced by the variable arrow_table to a Parquet file example.parquet, you'd run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import pyarrow.parquet as pq
pq.write_table(arrow_table, 'example.parquet')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Other items of Note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Originally, we intended to build a new API that worked exclusively with Pandas, however Pandas did not provide a stable C-API that we could use. Meanwhile, we sort of fell in love with &lt;a href="https://arrow.apache.org/"&gt;Apache Arrow&lt;/a&gt;. The Apache Arrow project has a set of standards to address long standing inefficiencies in the processing and transport of large datasets in high-performance applications. Conversion of arrow tables to varies formats was simple and fast. Since Arrow is a language independent standard, our Arrow integration will make it easier for developers to move data from Mongodb into a wide variety of OLAP systems. &lt;/li&gt;
&lt;li&gt;Currently we are only distributing pre-built binaries for x86_64 architectures, but we are planning to add more soon. Please feel free to express your preference on github!&lt;/li&gt;
&lt;li&gt;This library is in the early stages of development, and so it's possible the API may change in the future - we definitely want to continue expanding it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Photo credit: &lt;a href="https://unsplash.com/@ltmonster?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;shiyang xu&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/panda?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>datascience</category>
      <category>pandas</category>
      <category>numpy</category>
    </item>
    <item>
      <title>3 Single-Tasking Tips to Improve Your Focus</title>
      <author>Kristi Anderson</author>
      <pubDate>Thu, 29 Apr 2021 12:41:03 +0000</pubDate>
      <link>https://dev.to/kristimke/3-single-tasking-tips-to-improve-your-focus-22k5</link>
      <guid>https://dev.to/kristimke/3-single-tasking-tips-to-improve-your-focus-22k5</guid>
      <description>&lt;p&gt;You sit down at your desk to compile a report and within a few minutes you have checked your email, scheduled a doctor's appointment, and have Netflix going in the background. Our environments and priorities are constantly pulling us in different directions. With so much to juggle, it feels as if the only way we can get everything done is to multitask.&lt;/p&gt;

&lt;p&gt;Right?&lt;/p&gt;

&lt;p&gt;Well, not exactly. While we may think that multitasking is a skill we can master, science says otherwise. The message is becoming more prevalent: &lt;a href="https://buffer.com/resources/single-tasking/"&gt;your brain performs best&lt;/a&gt; when it focuses on only one thing at a time. This practice is known as "&lt;a href="https://www.forbes.com/sites/nextavenue/2013/05/08/why-single-tasking-makes-you-smarter/?sh=6a3291175063"&gt;single-tasking&lt;/a&gt;", and it's a great way to work more efficiently.&lt;/p&gt;

&lt;p&gt;In this article, we'll share &lt;a href="https://reclaim.ai/blog/single-tasking?utm_source=devto&amp;amp;utm_medium=blog-published&amp;amp;utm_campaign=single-tasking"&gt;three powerful single-tasking methods&lt;/a&gt; to break away from your multitasking mentality and regain your focus.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#multitasking-comes-at-a-cost"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Multitasking comes at a cost&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;As many of us have shifted to working remotely in an era where the average home has &lt;a href="https://www.statista.com/statistics/1107206/average-number-of-connected-devices-us-house/"&gt;more than 10 connected devices&lt;/a&gt;, it's becoming increasingly difficult to stay focused on a single task while the digital world competes for our attention. We think that we can easily shift gears or multitask -- without realizing that this negatively impacts our ability to get things done.&lt;/p&gt;

&lt;p&gt;According to one report,&lt;a href="https://link.springer.com/article/10.3758/PBR.17.4.479"&gt; only 2.5% of people&lt;/a&gt; can multitask effectively. Everyone else faces some performance deficit when trying to multitask, where they're constantly switching from one thing to another. The result is that tasks actually take *longer *and are more prone to errors.&lt;/p&gt;

&lt;p&gt;Researchers call this performance deficit a "&lt;a href="https://www.apa.org/research/action/multitask"&gt;switch cost&lt;/a&gt;," and the results are typically unavoidable. Think of the brain as a computer with a certain amount of processing power. When we switch tasks, the brain requires extra processing power to bring forward the information needed for the new task. And, like a computer, the more you ask it to&lt;a href="https://www.psychologicalscience.org/observer/cognitive-crossroads-jonathan-d-cohen-tackles-the-mysteries-of-multitasking"&gt; process at one time&lt;/a&gt;, the worse its performance.&lt;/p&gt;

&lt;p&gt;Studies have&lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7075496/"&gt; further shown&lt;/a&gt; that multitasking in everyday life can affect sustained attention and long-term memory. We need to recognize that multitasking isn't only bad for the task at hand but also has lasting impacts on how well the brain can do its job.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-the-change-to-singletasking"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Make the change to single-tasking&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Single-tasking is, as you probably guessed, focusing only on one task at a time. If multitasking causes us to perform poorly, then, by contrast, we can improve our work's quality and efficiency by single-tasking.&lt;/p&gt;

&lt;p&gt;Even as we come to accept that multitasking is harmful to our brains, "un-learning" this behavior can be a challenge. Making the shift to single-tasking takes some effort and practice, but you can incorporate some simple things into your day to reframe your thinking toward single-tasking.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-set-due-dates-and-block-time-for-longer-tasks"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Set due dates and block time for longer tasks&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Setting due dates for your tasks is as simple as taking your to-do list, prioritizing it, and clearly identifying when you will get the work done. Rather than having an endless to-do list that isn't reflected in your schedule, this practice forces you to commit to completing work by a certain date -- and has the added benefit of creating awareness around your week's capacity.&lt;/p&gt;

&lt;p&gt;For example, your to-do list may include longer, more intensive and strategic tasks like "writing a strategy doc" or "submitting Q4 financials". It may also include a ton of little tasks, like "respond to an email from Fred" or "review PRs in Github". In this example, you'd want to block time for your most important and time-consuming tasks -- the ones that will often take a lot of your energy and cognitive capacity -- so that your week doesn't end up being a scattered mess of activities.&lt;/p&gt;

&lt;p&gt;In order to avoid another frenzied day of multitasking, start by assigning a due date to the tasks that you know are going to take awhile. Anything longer than an hour would fall into this category. Then, &lt;a href="http://reclaim.ai/features/tasks"&gt;block time for those tasks&lt;/a&gt; on your calendar based on when they need to be completed. Don't confuse the due date with the date the task needs to be scheduled! If you need six hours to write an important document by Friday, it doesn't do you much good to have the time blocked on Friday afternoon.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qr1SYUjb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.website-files.com/5ed945986aedf80ff9c4bfd8/608995cdeada3a254a8c2a73_eRruLdtBF0J8ooXO_CXggFvj7CcGlAB8TUT9Ojnd_kLj1oG2nZbZAM0IixgGLs3pLCnpjw1fDwswsbDu4xqAmxuVI4ugJ779glvBqX2T3i8d25nNFBdUPLXiJUdnxHbmr61c0Gna.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qr1SYUjb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.website-files.com/5ed945986aedf80ff9c4bfd8/608995cdeada3a254a8c2a73_eRruLdtBF0J8ooXO_CXggFvj7CcGlAB8TUT9Ojnd_kLj1oG2nZbZAM0IixgGLs3pLCnpjw1fDwswsbDu4xqAmxuVI4ugJ779glvBqX2T3i8d25nNFBdUPLXiJUdnxHbmr61c0Gna.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
‍&lt;/p&gt;

&lt;p&gt;It's important to give yourself enough cushion to move tasks around as necessary as well as to take breaks and check off some of those smaller tasks we mentioned above. Something more important may come up that forces you to reprioritize your task's due date. Or, a task may take longer than you initially thought, which may mean you won't be able to get through all of your tasks due that day. Allow yourself the flexibility to&lt;a href="https://reclaim.ai/features/tasks"&gt; move things as needed&lt;/a&gt; on your calendar.&lt;/p&gt;

&lt;p&gt;Lastly, because longer tasks tend to be more cognitively demanding, it's important to set time aside for them during the periods of your day where you're most productive and "locked in". So if you're not a morning person, don't block time for writing that lengthy strategy document at 6am. Instead, use that time for the things that aren't going to demand as much of your energy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-set-aside-dedicated-time-for-the-small-stuff"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Set aside dedicated time for the small stuff&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Blocking time for specific tasks that you know are going to take awhile is a great way to stay focused on one big thing at a time. But what about all the other little things that you need to get done each day? How do you incorporate those into your week without losing focus on what matters?&lt;/p&gt;

&lt;p&gt;The answer is so simple, it might shock you: &lt;a href="http://reclaim.ai/features/habits"&gt;create a routine&lt;/a&gt; that you can stick to every day where you batch all of your "microtasks" into one time block. Instead of earmarking time for every little thing -- or distracting yourself from your core work as new pebbles come in -- you just set aside a single block of recurring time for it.&lt;/p&gt;

&lt;p&gt;This approach has two big advantages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; It lets you stay focused on your lengthier, more strategic tasks because you know you've got dedicated time set aside to work on the small stuff.&lt;/li&gt;
&lt;li&gt; It lets you organize your small tasks into themes. For example, you could have a routine for "Emails + Slack" where you check your email and chat notifications, another routine called "Customer support" where you spend time responding to customer requests, and so on.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dR8u9kh6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.website-files.com/5ed945986aedf80ff9c4bfd8/608995cd13ab4b57ad0adc12_ANiR4BmVGUe0m2pXC5F9g5MC0XHNNjo5Ns5EtbpuoiEMD-xpje75WrV2QjSqlWWSaysFimRgAt-iu8NEHT6ojlFF_cju-quGvbK4z_hMOX6O0WvgglUoF9CezWnRug8i8RB9UEGY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dR8u9kh6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.website-files.com/5ed945986aedf80ff9c4bfd8/608995cd13ab4b57ad0adc12_ANiR4BmVGUe0m2pXC5F9g5MC0XHNNjo5Ns5EtbpuoiEMD-xpje75WrV2QjSqlWWSaysFimRgAt-iu8NEHT6ojlFF_cju-quGvbK4z_hMOX6O0WvgglUoF9CezWnRug8i8RB9UEGY.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‍&lt;/p&gt;

&lt;p&gt;The key here is to optimize your routines for smaller tasks around when you're &lt;em&gt;least&lt;/em&gt; productive and energized. It's a bit unintuitive, but essentially what you're doing is confining your low-cognition tasks to the period of the day where you feel least motivated, and reserving your energy for the more important and demanding to-dos. Not only does this allow you to focus your productivity around your most important tasks, but it also ensures that you get to feel a sense of accomplishment during your less energetic moments.&lt;/p&gt;

&lt;p&gt;Just as you need to keep your time blocks for important tasks flexible, you also need to do the same thing for your "microtask" routines. You should have a rough sense of when you want to have the routines happen each day, but with your schedule constantly changing it can be difficult to stick to exact times. Creating &lt;a href="http://reclaim.ai/features/habits"&gt;flexible routines on your calendar&lt;/a&gt; for your smaller task work enables you to get the time you need for the little things without having to feel boxed in by your schedule.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-stick-to-your-plan-if-possible"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. Stick to your plan (if possible)&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.prnewswire.com/news-releases/over-commitment-epidemic-3-out-of-5-people-say-they-cant-possibly-get-everything-done-on-their-to-do-list-300782549.html"&gt;A study found&lt;/a&gt; that 3 out of 5 people have more tasks on their to-do lists than they can possibly accomplish. Between wanting to be helpful or a tendency to jump in and fix problems, "yes" can often be the first response out of our mouths.&lt;/p&gt;

&lt;p&gt;It's understandable that we want to say Yes to everything that comes our way. We want to feel useful in our jobs, and it's our natural tendency to help others where we can. It's also sometimes simply not an option to say No. A meeting with your CEO, a Slack message from a valued team member who tells you they're thinking about leaving the company, or an email about a project that is going off the rails -- all of these kinds of things rightfully steal our focus.&lt;/p&gt;

&lt;p&gt;But those Yeses can add up quickly, and more often than not results in you straying from your core plan. A few meetings here and there start to eat away at your strategic single-task time, or rob you of the routines that you need in order to keep your head afloat. Suddenly you're doing the important work in the evenings and on weekends, or catching up on your email instead of spending time with your loved ones.&lt;/p&gt;

&lt;p&gt;It's imperative to find the balance between being flexible and being (politely) defensive of your time. Without that balance, everything quickly rises to the top of your priority list -- and if everything is a top priority, nothing is a top priority.&lt;/p&gt;

&lt;p&gt;Here are some questions to ask yourself any time you're finding yourself attracted to saying Yes to a distraction or shift in your ideal plan for the week:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Is this more important than the &lt;em&gt;most&lt;/em&gt; important thing I was planning to do today?&lt;/li&gt;
&lt;li&gt;  Am I the &lt;em&gt;only person&lt;/em&gt; who can help with this?&lt;/li&gt;
&lt;li&gt;  Is the cost of declining this distraction &lt;em&gt;higher or lower&lt;/em&gt; than the cost of accepting it?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, remember that declining things doesn't make you a bad person. In fact, &lt;a href="https://reclaim.ai/blog/how-to-fix-your-calendar"&gt;if you do it right&lt;/a&gt;, declining things can actually have a positive effect on you and your organization: it lets you focus on the stuff that really matters, &lt;em&gt;and&lt;/em&gt; it illustrates to other people that it's OK to defend the time you need to get the important things done.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#retrain-your-brain-and-regain-your-focus"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Retrain your brain and regain your focus&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Maybe you're still skeptical about single-tasking after reading this article. Maybe you even checked your email several times in-between reading it!&lt;/p&gt;

&lt;p&gt;Let's try this for a week: go through your to-do list, find the 3-5 most important things that you want to get done, and &lt;a href="http://reclaim.ai/features/tasks"&gt;block time for them&lt;/a&gt;. Then create a couple &lt;a href="http://reclaim.ai/features/habits"&gt;flexible routines&lt;/a&gt; to fit in the smaller stuff. At the end of the week, see how you feel.&lt;/p&gt;

&lt;p&gt;We think you'll find that your workweeks are happier, more productive, and more evenly energized the less you engage in multitasking. By starting with these single-tasking tips to&lt;a href="https://reclaim.ai/"&gt; manage your calendar&lt;/a&gt;, you can build up your ability to single-task over time.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>ai</category>
      <category>culture</category>
      <category>leadership</category>
    </item>
    <item>
      <title>The equivalent of componentWillMount using React hooks</title>
      <author>Martin Stark</author>
      <pubDate>Thu, 29 Apr 2021 12:29:48 +0000</pubDate>
      <link>https://dev.to/video/the-equivalent-of-componentwillmount-using-react-hooks-11em</link>
      <guid>https://dev.to/video/the-equivalent-of-componentwillmount-using-react-hooks-11em</guid>
      <description>&lt;h2&gt;
  &lt;a href="#given-that"&gt;
  &lt;/a&gt;
  Given that
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;the goal is to execute some code once, before the ui is updated&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;componentWillMount&lt;/code&gt; is deprecated (&lt;a href="https://reactjs.org/docs/react-component.html#unsafe_componentwillmount"&gt;1&lt;/a&gt;, &lt;a href="https://stackoverflow.com/questions/49206280/componentwillmount-is-deprecated-and-will-be-removed-in-the-next-major-version-0/49213753#49213753"&gt;2&lt;/a&gt;, &lt;a href="https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html"&gt;3&lt;/a&gt;), and that the suggested replacement is executing code in the &lt;code&gt;constructor&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;code executed before the return statement of a functional component is implicitly run before rendering it&lt;/li&gt;
&lt;li&gt;the rough equivalent of mounting a class component is the initial call of a functional component&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-solution-would-be"&gt;
  &lt;/a&gt;
  The solution would be
&lt;/h2&gt;

&lt;p&gt;Calling a function in the body of the functional component once. This can potentially be achieved with &lt;code&gt;useState&lt;/code&gt;, &lt;code&gt;useMemo&lt;/code&gt;, or &lt;code&gt;useEffect&lt;/code&gt;, depending on the timing required for the use case.&lt;/p&gt;

&lt;p&gt;Since the code needs to run before the initial render is committed to the screen, this disqualifies &lt;code&gt;useEffect&lt;/code&gt;, as “The function passed to useEffect will run after the render is committed to the screen.” &lt;a href="https://reactjs.org/docs/hooks-reference.html#useeffect"&gt;4&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since we want to guarantee that the code will only run once, this disqualifies &lt;code&gt;useMemo&lt;/code&gt;, as "In the future, React may choose to “forget” some previously memoized values and recalculate them on next render" &lt;a href="https://reactjs.org/docs/hooks-reference.html#usememo"&gt;5&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;useState&lt;/code&gt; supports &lt;a href="https://reactjs.org/docs/hooks-reference.html#lazy-initial-state"&gt;lazy initial state&lt;/a&gt; calculations that are guaranteed to only run once during the initial render, which seems like a good candidate for the job.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-with-usestate"&gt;
  &lt;/a&gt;
  Example with useState:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const runOnceBeforeRender = () =&amp;gt; {};

const Component = () =&amp;gt; {
  useState(runOnceBeforeRender);

  return (&amp;lt;&amp;gt;&amp;lt;/&amp;gt;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#as-a-custom-hook"&gt;
  &lt;/a&gt;
  As a custom hook:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const runOnceBeforeRender = () =&amp;gt; {};

const useOnInitialRender = (fn) =&amp;gt; {
  useState(fn);
}

const Component = () =&amp;gt; {
  useOnInitialRender(fn);

  return (&amp;lt;&amp;gt;&amp;lt;/&amp;gt;);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;runOnceBeforeRender&lt;/code&gt; function can optionally return a state that will be available immediately upon the first render of the function, triggering no re-renders.&lt;/p&gt;

&lt;p&gt;See &lt;a href="https://www.npmjs.com/package/@martinstark/use-once"&gt;use-once&lt;/a&gt; on npm.&lt;/p&gt;

</description>
      <category>react</category>
      <category>hooks</category>
      <category>componentwillmount</category>
      <category>functional</category>
    </item>
    <item>
      <title>Migrating to Serverless and making it work post-transition</title>
      <author>Taavi Rehemägi</author>
      <pubDate>Thu, 29 Apr 2021 12:27:09 +0000</pubDate>
      <link>https://dev.to/dashbird/migrating-to-serverless-and-making-it-work-post-transition-1ail</link>
      <guid>https://dev.to/dashbird/migrating-to-serverless-and-making-it-work-post-transition-1ail</guid>
      <description>&lt;p&gt;&lt;em&gt;In this article, we'll be taking you through the steps and what to bear in mind in each stage of migrating to serverless -- from preparation to migration and post-transition.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-could-spectrum"&gt;
  &lt;/a&gt;
  The Could Spectrum
&lt;/h2&gt;

&lt;p&gt;To understand more easily the wider context of &lt;strong&gt;migrating legacy systems into a serverless form&lt;/strong&gt;, we should first understand the &lt;strong&gt;cloud spectrum&lt;/strong&gt;.This spectrum ranges from &lt;strong&gt;on-premises workloads&lt;/strong&gt; to &lt;strong&gt;virtual machines, containers,&lt;/strong&gt; and &lt;strong&gt;cloud functions&lt;/strong&gt;. Serverless typically falls within the cloud functions area, as &lt;a href="https://dashbird.io/blog/what-is-faas-function-as-a-service/"&gt;function as a service (FaaS)&lt;/a&gt;, but now it's an umbrella term growing to include &lt;strong&gt;back-end as a service&lt;/strong&gt; (BaaS), such as fully managed databases.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The first thing when looking at &lt;strong&gt;legacy transitions&lt;/strong&gt; is &lt;strong&gt;understanding where you are on the cloud spectrum&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Despite being four or five years old, we are starting to get into a cycle where &lt;strong&gt;even serverless apps are becoming legacy systems &lt;/strong&gt;as well. Anybody that writes &lt;strong&gt;Node.js&lt;/strong&gt; knows that if you make no updates for two years, &lt;strong&gt;you're going to have dependencies breaking all over the place&lt;/strong&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-serverless-experience"&gt;
  &lt;/a&gt;
  Your serverless experience
&lt;/h2&gt;

&lt;p&gt;The next question to ask is: &lt;strong&gt;does your team already have serverless experience?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are two different routes here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;strong&gt;Yes&lt;/strong&gt; -- We already have serverless experience, we already have cloud experience. In this case, you &lt;strong&gt;need to identify the key team members&lt;/strong&gt; who can help &lt;strong&gt;drive and evangelize the serverless migration&lt;/strong&gt;, including training, pattern development, and so on. The engineering hours involved in the transition can all be streamlined by having the patterns, the documentation and the training.&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;No&lt;/strong&gt; -- If you don't have that serverless or cloud experience internally, you would benefit from &lt;strong&gt;finding a consulting partner that specializes in serverless migrations&lt;/strong&gt; (such as &lt;a href="https://www.serverlessguru.com/"&gt;Serverless Guru&lt;/a&gt; or &lt;a href="https://www.theodo.co.uk/"&gt;Theodo&lt;/a&gt;) or serverless adoption to help retrain and retool existing employees and help them grow.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#the-serverless-acceleration-team"&gt;
  &lt;/a&gt;
  The serverless acceleration team
&lt;/h2&gt;

&lt;p&gt;Following this, you would &lt;strong&gt;need to develop the serverless acceleration team&lt;/strong&gt;. This would be a working group that will help accelerate the rest of your organization, which will focus on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  building &lt;strong&gt;reusable infrastructure as code&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  practices around &lt;strong&gt;building serverless apps&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;processes around development workflow&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#drawing-service-boundaries"&gt;
  &lt;/a&gt;
  Drawing service boundaries
&lt;/h2&gt;

&lt;p&gt;Next, you need to &lt;strong&gt;identify a &lt;a href="https://dashbird.io/blog/5-popular-use-cases-for-going-serverless/"&gt;common service or use case&lt;/a&gt;&lt;/strong&gt;. For that, you can ask the following question: &lt;strong&gt;what service represents 80% to 90% of how other services are built in the legacy system?&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Let's take a &lt;strong&gt;monolithic API&lt;/strong&gt; as an example. If we have 100 endpoints and 10 of them are related to account and 10 of them are related to users and 10 of them are related to feeds, we can draw three service boundaries there. We could find that the APIs that are being done 100 times, one of them looks the same as the rest of the 100. With these service boundaries, we can &lt;strong&gt;start chunking this migration up into pieces&lt;/strong&gt;. That makes it easier to migrate!&lt;/p&gt;

&lt;p&gt;If we develop a pattern for one service boundary and it's composed of 10 endpoints and there's nine more of those services that all have 10 endpoints each, we know that if we can develop one, we can reuse it across the rest of them. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#documenting-the-migration-process"&gt;
  &lt;/a&gt;
  Documenting the migration process
&lt;/h2&gt;

&lt;p&gt;To &lt;strong&gt;ensure that the migration is not done in isolation&lt;/strong&gt; by the group of people responsible for the transition, we need to &lt;strong&gt;document the entire service migration process&lt;/strong&gt; and the &lt;strong&gt;nuances of how the teams build services&lt;/strong&gt;. Using that knowledge, you can*&lt;em&gt; improve&lt;/em&gt;&lt;em&gt; training material, and then use the service migration to &lt;/em&gt;&lt;em&gt;describe the benefits&lt;/em&gt;* for further leadership buy-in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#training-and-retooling"&gt;
  &lt;/a&gt;
  Training and retooling
&lt;/h2&gt;

&lt;p&gt;Once 80% to 90% of the services get migrated, we need to look at &lt;strong&gt;training and retooling&lt;/strong&gt;. The rest of the developers on the team will need to go through training to be &lt;strong&gt;effective&lt;/strong&gt; in this new environment. The training can start simply with &lt;strong&gt;tool training&lt;/strong&gt;, which would entail &lt;strong&gt;infrastructure as code frameworks&lt;/strong&gt; or &lt;strong&gt;other serverless tools&lt;/strong&gt;, &lt;a href="https://dashbird.io/"&gt;Dashbird&lt;/a&gt; being one of them or &lt;a href="https://dashbird.io/blog/debug-test-ci-cd-pipeline/"&gt;CI/CD pipelines&lt;/a&gt;. Beyond tooling, we're going to &lt;strong&gt;familiarize developers with common commands&lt;/strong&gt;, demonstrate service &lt;strong&gt;development workflow&lt;/strong&gt;, &lt;strong&gt;testing&lt;/strong&gt; and &lt;strong&gt;&lt;a href="https://dashbird.io/serverless-observability/"&gt;monitoring&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/serverless-observability/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5iOvCkUw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mk0dashbirdioprthk8x.kinstacdn.com/wp-content/uploads/2020/09/general-1024x190.png" alt="Serverless monitoring"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;pattern training&lt;/strong&gt;, we will need to do a &lt;strong&gt;line-by-line review&lt;/strong&gt;. Having migrated that common service, developers can learn high-level, 'hello world' type of applications. For example, building an AppSync API, a GraphQL API, or a REST API with AWS with serverless. &lt;/p&gt;

&lt;p&gt;But that doesn't go deep enough. When we're &lt;strong&gt;migrating a legacy system to serverless&lt;/strong&gt; we must go as deep as possible to actually &lt;strong&gt;make the application work&lt;/strong&gt;. As it's not a completely greenfield application, we have to map things over. This line-by-line review would present &lt;strong&gt;how the pattern is built&lt;/strong&gt; with the &lt;strong&gt;infrastructure-as-code&lt;/strong&gt; plus &lt;strong&gt;other components&lt;/strong&gt;, and explaining why things were built in a specific way. &lt;/p&gt;

&lt;p&gt;At this point, it's important to establish a &lt;strong&gt;standard for the team to follow&lt;/strong&gt; in terms of naming conventions, organizational projects, mono, and multiple repositories so that the developers would be able to &lt;strong&gt;replicate the pattern themselves&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#templates"&gt;
  &lt;/a&gt;
  Templates
&lt;/h2&gt;

&lt;p&gt;Creating a new VPC environment from the ground up, and then maybe even the automation, would take 40 to 50 hours the first time you do it. But afterward, if you want to modify it and you want to spin up new VPCs, it only takes &lt;strong&gt;as long as the CI/CD takes to run&lt;/strong&gt;. This would end up &lt;strong&gt;saving that entire 49 hours a time&lt;/strong&gt; because you have those templates in place.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Templating is a very important piece of serverless.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.serverlessguru.com/"&gt;Serverless Guru&lt;/a&gt; have created some VPC templates that would save the initial 50 hours of work required to set up the environments yourself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-selfsufficient-teams"&gt;
  &lt;/a&gt;
  Creating self-sufficient teams
&lt;/h2&gt;

&lt;p&gt;This migration approach we laid out is &lt;strong&gt;fairly slow&lt;/strong&gt;. Why did we propose this slower approach, focusing on assessments, documentation, training, all these things? So that once these are established, &lt;strong&gt;we can then move quickly&lt;/strong&gt;. The development teams will be able to &lt;strong&gt;pick up services in parallel to migrate them&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Although the developers got the &lt;strong&gt;basic pattern training&lt;/strong&gt;, we can start getting into details, such as 'How do I connect this queue to this Lambda to this DynamoDB stream and make sure that it's efficient, performant, and know all the different layers of that?'. That part is not going to be able to be covered with the basic training. So, we do our best to create a general training to map out 80%, 90% of the service, but that other 10% can be quite a large list. During this process, the development team will hit barriers and roadblocks. The serverless acceleration team will have to provide &lt;strong&gt;ongoing support&lt;/strong&gt; and also &lt;strong&gt;identify areas for improvement&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;For edge case pattern development and training, as the developers are working, migrating things, they identify opportunities such as , 'When we use this SQS FIFO queue, it's not processing fast enough because it only processes it one at a time based on how we set it.' The developers can decide to &lt;strong&gt;create a pattern&lt;/strong&gt; around how to use SQS FIFO properly so that later on they &lt;strong&gt;don't have additional production issues&lt;/strong&gt; happen that are causing delays. &lt;/p&gt;

&lt;p&gt;These patterns can be shared with the entire development team, ensuring &lt;strong&gt;optimal knowledge reuse&lt;/strong&gt; and even an &lt;strong&gt;internal serverless best practices playbook&lt;/strong&gt;. With that best practices playbook, the developers can start writing that stuff down, documenting it, and it can now be used for &lt;strong&gt;onboarding new developers&lt;/strong&gt; and also as an &lt;strong&gt;auditing tool&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Upon successfully &lt;strong&gt;completing the migration from legacy to serverless&lt;/strong&gt;, we have a working service. However, we don't consider the project done until &lt;strong&gt;all the developers know what they're doing&lt;/strong&gt;. Even a consulting company, such as Serverless Guru, the transition process should always be about bringing the entire team along. Ultimately, we want the developers at the company to &lt;strong&gt;independently build new services&lt;/strong&gt; &lt;strong&gt;without having to rely on the consulting company at all&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#culture-shifts"&gt;
  &lt;/a&gt;
  Culture shifts
&lt;/h2&gt;

&lt;p&gt;To fully &lt;strong&gt;internalize serverless&lt;/strong&gt;, the team should &lt;strong&gt;adopt knowledge sharing&lt;/strong&gt; and &lt;strong&gt;finding new ways to further optimize&lt;/strong&gt;. When looking at how this affects your &lt;strong&gt;company culture&lt;/strong&gt;, it's not just about the serverless migration. It's about &lt;strong&gt;creating a culture&lt;/strong&gt; where people that are working at the company are talking to each other, feeling confident in sharing ideas, talking to leadership, getting feedback, helping improve the process from the internal point of view.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#continuous-improvement"&gt;
  &lt;/a&gt;
  Continuous Improvement
&lt;/h2&gt;

&lt;p&gt;What comes next? Well, we don't stop. &lt;strong&gt;There's no finish line&lt;/strong&gt;. You may have to tell that there's a finish line to leadership to get them to buy in, there's a start, there's a middle, there's an end. But ultimately, we're trying to &lt;strong&gt;create a cyclical system that is going to feed into itself&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Developers will feed information, the team will consistently &lt;strong&gt;keep skilling up&lt;/strong&gt; as they're going, and we're going to get &lt;strong&gt;faster&lt;/strong&gt;, we're going to &lt;strong&gt;build better products for customers&lt;/strong&gt;, and we're going to just &lt;strong&gt;keep iterating&lt;/strong&gt; on that ad infinitum. It's never going to stop.&lt;/p&gt;

&lt;p&gt;Constantly, &lt;strong&gt;every day new companies are popping up&lt;/strong&gt;. They're working on new tools for CI/CD or for different aspects of the development workflow, like local testing or emulating AWS services. And we're going to be able to find those improvements with the serverless acceleration team and then be able to create a pattern for it, test it out, isolate, experiment with it. Once we do have something, we've got a &lt;strong&gt;concrete example of something that works&lt;/strong&gt;, we're then going to &lt;strong&gt;present that back out to the team&lt;/strong&gt;, we're going to do training on it, record videos about it, and make sure that the team starts moving towards that direction.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importance-of-specialized-tooling"&gt;
  &lt;/a&gt;
  Importance of specialized tooling
&lt;/h2&gt;

&lt;p&gt;Rather than reinventing the wheel every time, &lt;strong&gt;specialized tools can help streamline your processes&lt;/strong&gt;. One example would be for &lt;strong&gt;centralizing and making the monitoring data available&lt;/strong&gt;. This means giving engineers the ability to &lt;strong&gt;interrogate monitoring data at scale really easily&lt;/strong&gt; and &lt;strong&gt;reducing the time &lt;/strong&gt;it takes to understand different aspects of the system, understanding the &lt;strong&gt;health of your system&lt;/strong&gt;, and overall just getting a feel of &lt;strong&gt;what's actually going on&lt;/strong&gt;. Another example would be for &lt;strong&gt;reducing the time to discovery&lt;/strong&gt;. This is also what can be abstracted and &lt;strong&gt;automated&lt;/strong&gt; away. &lt;strong&gt;Maintaining posture and enforcing best practices&lt;/strong&gt; also should be an automatic and abstracted process, rather than a manual one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n4H9Sy2B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mk0dashbirdioprthk8x.kinstacdn.com/wp-content/uploads/2021/04/Screenshot-2021-04-01-at-13.03.24-2-1024x613.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n4H9Sy2B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mk0dashbirdioprthk8x.kinstacdn.com/wp-content/uploads/2021/04/Screenshot-2021-04-01-at-13.03.24-2-1024x613.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dashbird's centralized AWS metrics dashboard&lt;/p&gt;

&lt;p&gt;Tooling can help you &lt;strong&gt;enable learning&lt;/strong&gt; and &lt;strong&gt;understanding your system&lt;/strong&gt; and t*&lt;em&gt;he way it changes over time&lt;/em&gt;&lt;em&gt;, to help you make &lt;/em&gt;&lt;em&gt;informed decisions&lt;/em&gt;*. The approach we have at Dashbird is based on three core pillars that make up our platform and enable our customers to be successful:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; We provide a &lt;a href="https://dashbird.io/serverless-observability/"&gt;&lt;strong&gt;single pane of glass&lt;/strong&gt; and a &lt;strong&gt;central store&lt;/strong&gt;&lt;/a&gt; for all of your monitoring data. So there's always &lt;strong&gt;one place&lt;/strong&gt; you can go and look at anything about your system. You can build complex queries, you can look at dashboards of microservices -- all the way from an account level, a microservice level, into a single transaction level.&lt;/li&gt;
&lt;li&gt; We &lt;strong&gt;automate and abstract all of the &lt;/strong&gt;&lt;a href="https://dashbird.io/failure-detection"&gt;&lt;strong&gt;failure, threat&lt;/strong&gt; and &lt;strong&gt;risk detection&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; across the stack&lt;/strong&gt;. So that means analyzing logs, metrics, and then figuring out what you should be paying attention to. &lt;/li&gt;
&lt;li&gt; We look at everything through the &lt;strong&gt;&lt;a href="https://dashbird.io/serverless-well-architected-reports"&gt;Well-Architected lens&lt;/a&gt;&lt;/strong&gt;. So we have an overview and all of the things we continuously check against the five pillars of the AWS Well-Architected Framework (cost optimization, performance, operational excellence, security, and reliability) and then make a report of what is the current state of your application infrastructure.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://sls.dashbird.io/aws-well-architected-framework-serverless"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rd-ccfN5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mk0dashbirdioprthk8x.kinstacdn.com/wp-content/uploads/2021/04/Ebook-well-architected-1024x190.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-stage-should-we-consider-operational-excellence"&gt;
  &lt;/a&gt;
  What stage should we consider operational excellence?
&lt;/h2&gt;

&lt;p&gt;In our experience, it's &lt;strong&gt;the sooner the better&lt;/strong&gt;. The challenge is that if you've built everything already, it takes a lot more to straighten the ship. And &lt;strong&gt;the quicker you get feedback&lt;/strong&gt; on your issues and the quicker you are able to &lt;strong&gt;learn what the best practices are&lt;/strong&gt; and how you should be building and where are inefficiencies, the sooner you can actually start implementing those changes.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;This article is written based on &lt;a href="https://www.youtube.com/watch?v=E2pqFmQ17jM"&gt;Dashbird's webinar&lt;/a&gt; with &lt;a href="https://twitter.com/ryanjonesirl"&gt;Ryan Jones&lt;/a&gt;, CEO at Serverless Guru.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ryan is the founder and CEO/CTO of Serverless Guru, cohost of the Talking Serverless podcast and Serverless Economics podcast, and author of the online course "Serverless Zero to Paid Professional." He started his serverless journey at Nike in the innovation engineering department in late 2018, and from there he's fully adopted the serverless lifestyle.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Further reading:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/5-popular-use-cases-for-going-serverless/"&gt;5 Popular Use Cases for Going Servelress&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/saving-money-switching-serverless/"&gt;How Much Money Can You Save by Going Serverless?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/serverless-and-startups/"&gt;Serverless Benefits for Startups&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/serverless-for-enterprises-large-scale-projects/"&gt;Serverless Benefits for Enterprises&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/challenges-of-going-serverless-2020/"&gt;Biggest Challenges of Going Serverless&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>devops</category>
      <category>cloud</category>
    </item>
  </channel>
</rss>
