<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Django Web Framework (Python)</title>
      <author>Ivana</author>
      <pubDate>Sun, 11 Apr 2021 02:24:50 +0000</pubDate>
      <link>https://dev.to/ivanadokic/django-web-framework-python-ebn</link>
      <guid>https://dev.to/ivanadokic/django-web-framework-python-ebn</guid>
      <description>&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/3.2/"&gt;Django&lt;/a&gt; is an extremely popular and fully featured server-side web framework, written in Python. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-django"&gt;
  &lt;/a&gt;
  Install Django
&lt;/h2&gt;

&lt;p&gt;Before you can use Django, you’ll need to install it. More about what Python version should be used with Django version can be found&lt;a href="https://docs.djangoproject.com/en/3.2/faq/install/#faq-python-version-support"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#get-the-latest-development-version"&gt;
  &lt;/a&gt;
  Get the latest development version
&lt;/h4&gt;

&lt;p&gt;The latest and greatest Django version is the one that’s in its Git repository, we started with:&lt;br&gt;
&lt;code&gt;git clone https://github.com/django/django.git&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#install-python"&gt;
  &lt;/a&gt;
  Install Python
&lt;/h4&gt;

&lt;p&gt;Download the latest version for Mac OS X &lt;a href="https://www.python.org/downloads/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-does-django-code-look-like"&gt;
  &lt;/a&gt;
  What does Django code look like?
&lt;/h2&gt;

&lt;p&gt;A web application waits for HTTP requests from the web browser (or other clients) and when a request is received the application works out what is needed based on the URL and possibly information in POST/GET data. Depending on what is required it may then read or write information from a database or perform other tasks required to satisfy the request. The application will then return a response to the web browser, often dynamically creating an HTML page for the browser to display by inserting the retrieved data into placeholders in an HTML template.&lt;br&gt;
Django web applications typically group the code that handles each of these steps into separate files:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lE9DNC58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5aj63lefpumjr7zggqk0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lE9DNC58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5aj63lefpumjr7zggqk0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;URLs&lt;/strong&gt;: While it is possible to process requests from every single URL via a single function, it is much more maintainable to write a separate view function to handle each resource. A URL mapper is used to redirect HTTP requests to the appropriate view based on the request URL. The URL mapper can also match particular patterns of strings or digits that appear in a URL and pass these to a view function as data.&lt;br&gt;
&lt;strong&gt;View&lt;/strong&gt;: A view is a request handler function, which receives HTTP requests and returns HTTP responses. Views access the data needed to satisfy requests via models and delegate the formatting of the response to templates.&lt;br&gt;
&lt;strong&gt;Models&lt;/strong&gt;: Models are Python objects that define the structure of an application's data and provide mechanisms to manage (add, modify, delete) and query records in the database. &lt;br&gt;
&lt;strong&gt;Templates&lt;/strong&gt;: A template is a text file defining the structure or layout of a file (such as an HTML page), with placeholders used to represent actual content. A view can dynamically create an HTML page using an HTML template, populating it with data from a model. A template can be used to define the structure of any type of file; it doesn't have to be HTML!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#sending-the-request-to-the-right-view-urlspy"&gt;
  &lt;/a&gt;
  Sending the request to the right view (urls.py)
&lt;/h2&gt;

&lt;p&gt;A URL mapper is stored in a file named urls.py. The mapper (urlpatterns) defines a list of mappings between routes (specific URL patterns) and corresponding view functions. If an HTTP Request is received that has a URL matching a specified pattern, then the associated view function will be called and passed the request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;urlpatterns = [
    path('admin/', admin.site.urls),
    path('book/&amp;lt;int:id&amp;gt;/', views.book_detail, name='book_detail'),
    path('catalog/', include('catalog.urls')),
    re_path(r'^([0-9]+)/$', views.best),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;urlpatterns&lt;/code&gt; object is a list of &lt;code&gt;path()&lt;/code&gt; and/or &lt;code&gt;re_path()&lt;/code&gt; functions (Python lists are defined using square brackets, where items are separated by commas and may have an optional trailing comma.&lt;/p&gt;

&lt;p&gt;The first argument to both methods is a route (pattern) that will be matched. The &lt;code&gt;path()&lt;/code&gt; method uses angle brackets to define parts of a URL that will be captured and passed through to the view function as named arguments. The &lt;code&gt;re_path()&lt;/code&gt; function uses a flexible pattern matching approach known as a regular expression. We'll talk about these in a later article!&lt;/p&gt;

&lt;p&gt;The second argument is another function that will be called when the pattern is matched. The notation &lt;code&gt;views.book_detail&lt;/code&gt;indicates that the function is called &lt;code&gt;book_detail()&lt;/code&gt; and can be found in a module called views.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#handling-the-request-viewspy"&gt;
  &lt;/a&gt;
  Handling the request (views.py)
&lt;/h2&gt;

&lt;p&gt;Views are the heart of the web application, receiving HTTP requests from web clients and returning HTTP responses. &lt;/p&gt;

&lt;p&gt;We will show a view function &lt;code&gt;index()&lt;/code&gt;, which could have been called by our URL mapper in the previous section. Like all view functions it receives an &lt;code&gt;HttpRequest&lt;/code&gt; object as a parameter &lt;code&gt;(request)&lt;/code&gt; and returns an &lt;code&gt;HttpResponse&lt;/code&gt; object. In this case, we don't do anything with the request, and our response returns a hard-coded string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# filename: views.py (Django view functions)

from django.http import HttpResponse

def index(request):
    # Get an HttpRequest - the request parameter
    # perform operations using information from the request.
    # Return HttpResponse
    return HttpResponse('Hello from Django!')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Views are usually stored in a file called views.py.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#main-features"&gt;
  &lt;/a&gt;
  Main features
&lt;/h2&gt;

&lt;p&gt;We will list the main features that you'll use in almost every web application: URL mapping, views, models, and templates. Just a few of the other things provided by Django include:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Forms&lt;/strong&gt;: HTML Forms are used to collect user data for processing on the server and Django simplifies form creation, validation, and processing.&lt;br&gt;
&lt;strong&gt;User authentication and permissions&lt;/strong&gt;: Django includes robust user authentication and permission system that has been built with security in mind. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Caching&lt;/strong&gt;: Creating content dynamically is much more computationally intensive (and slow) than serving static content. Django provides flexible caching so that you can store all or part of a rendered page so that it doesn't get re-rendered except when necessary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Administration site&lt;/strong&gt;: The Django administration site is included by default when you create an app using the basic skeleton. It's providing an admin page for site administrators to create, edit, and view any data models on your site.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Serializing data&lt;/strong&gt;: Django makes it easy to serialize and serve your data as XML or JSON. This can be useful when creating a web service (a website that purely serves data to be consumed by other applications or sites, and doesn't display anything itself), or when creating a website in which the client-side code handles all the rendering of data.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-a-project"&gt;
  &lt;/a&gt;
  Creating a project
&lt;/h2&gt;

&lt;p&gt;To create a project run the following command in your terminal:&lt;br&gt;
&lt;code&gt;django-admin startproject mysite&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will create a &lt;code&gt;mysite&lt;/code&gt; directory in your current directory.  After the project is created go to its directory via &lt;code&gt;cd&lt;/code&gt; command:&lt;br&gt;
&lt;code&gt;cd mysite&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let’s look at what &lt;code&gt;startproject&lt;/code&gt; created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mysite/
    manage.py
    mysite/
        __init__.py
        settings.py
        urls.py
        asgi.py
        wsgi.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Those files are:&lt;/p&gt;

&lt;p&gt;The outer &lt;strong&gt;mysite/&lt;/strong&gt; root directory is a container for your project. Its name doesn’t matter to Django and you can rename it to anything you like.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;manage.py&lt;/strong&gt;: A command-line utility that lets you interact with this Django project in various ways. You can read all the details about manage.py in django-admin and manage.py.&lt;/p&gt;

&lt;p&gt;The inner &lt;strong&gt;mysite/ directory&lt;/strong&gt; is the actual Python package for your project. Its name is the Python package name you’ll need to use to import anything inside it (e.g. mysite.urls).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mysite/&lt;strong&gt;init&lt;/strong&gt;.py&lt;/strong&gt;: An empty file that tells Python that this directory should be considered a Python package. If you’re a Python beginner, read more about packages in the official Python docs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mysite/settings.py&lt;/strong&gt;: Settings/configuration for this Django project. Django settings will tell you all about how settings work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mysite/urls.py&lt;/strong&gt;: The URL declarations for this Django project; a “table of contents” of your Django-powered site. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mysite/asgi.py&lt;/strong&gt;: An entry-point for ASGI-compatible web servers to serve your project. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mysite/wsgi.py&lt;/strong&gt;: An entry-point for WSGI-compatible web servers to serve your project. &lt;/p&gt;

&lt;p&gt;To start a server run the following command:&lt;br&gt;
&lt;code&gt;python manage.py runserver&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After visiting &lt;a href="http://127.0.0.1:8000/"&gt;http://127.0.0.1:8000/&lt;/a&gt; you can see your server is really running:)&lt;/p&gt;

&lt;p&gt;To connect with me please check my &lt;a href="https://github.com/ivanadokic"&gt;Github&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/ivana-dokic/"&gt;LinkedIn&lt;/a&gt; or &lt;a href="https://twitter.com/LloydPile"&gt;Twitter&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>django</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Orientação a objetos de outra forma: Métodos estáticos e de classes</title>
      <author>Eduardo Klosowski</author>
      <pubDate>Sun, 11 Apr 2021 02:18:19 +0000</pubDate>
      <link>https://dev.to/acaverna/orientacao-a-objetos-de-outra-forma-metodos-estaticos-e-de-classes-jba</link>
      <guid>https://dev.to/acaverna/orientacao-a-objetos-de-outra-forma-metodos-estaticos-e-de-classes-jba</guid>
      <description>&lt;p&gt;Na &lt;a href="https://dev.to/acaverna/orientacao-a-objetos-de-outra-forma-classes-e-objetos-3mfd"&gt;postagem anterior&lt;/a&gt; foi apresentado o &lt;code&gt;self&lt;/code&gt;, nessa postagem será discutido mais a respeito desse argumento, considerando opções para ele e suas aplicações.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#m%C3%A9todos-est%C3%A1ticos"&gt;
  &lt;/a&gt;
  Métodos estáticos
&lt;/h2&gt;

&lt;p&gt;Nem todas as funções de uma classe precisam receber uma referência de um objeto para lê-lo ou alterá-lo, muitas vezes uma função pode fazer o seu papel apenas com os dados passados como argumento, por exemplo, receber um nome e validar se ele possui pelo menos três caracteres sem espaço. Dessa forma, essa função poderia ser colocada fora do escopo da classe, porém para facilitar sua chamada, e possíveis alterações (que será discutido em outra postagem), é possível colocar essa função dentro da classe e informar que ela não receberá o argumento &lt;code&gt;self&lt;/code&gt; com o decorador &lt;code&gt;@staticmethod&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;  &lt;span class="c1"&gt;# Demais funções
&lt;/span&gt;
    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;valida_nome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s"&gt;' '&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Dessa forma, essa função pode ser chamada diretamente de um objeto pessoa, ou até mesmo diretamente da classe, sem precisar criar um objeto primeiro:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Chamando diretamente da classe
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;valida_nome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'João'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# Chamando através de um objeto do tipo Pessoa
&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'João'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'da Silva'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;valida_nome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E essa função também pode ser utilizada dendro de outras funções, como validar o nome na criação de uma pessoa, de forma que caso o nome informado seja válido, será criado um objeto do tipo Pessoa, e caso o nome seja inválido, será lançado uma exceção:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sobrenome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idade&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;valida_nome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Nome inválido'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sobrenome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sobrenome&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;idade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;idade&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;  &lt;span class="c1"&gt;# Demais funções
&lt;/span&gt;
    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;valida_nome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s"&gt;' '&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;


&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'João'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'da Silva'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Cria objeto
&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'da Silva'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Lança ValueError: Nome inválido
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#m%C3%A9todos-da-classe"&gt;
  &lt;/a&gt;
  Métodos da classe
&lt;/h2&gt;

&lt;p&gt;Entretanto algumas funções podem precisar de um meio termo, necessitar acessar o contexto da classe, porém sem necessitar de um objeto. Isso é feito através do decorador &lt;code&gt;@classmethod&lt;/code&gt;, onde a função decorada com ele, em vez de receber um objeto como primeiro argumento, recebe a própria classe.&lt;/p&gt;

&lt;p&gt;Para demonstrar essa funcionalidade será implementado um &lt;em&gt;id&lt;/em&gt; auto incremental para os objetos da classe &lt;code&gt;Pessoa&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;total_de_pessoas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nb"&gt;classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;novo_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_de_pessoas&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_de_pessoas&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sobrenome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idade&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;novo_id&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nome&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sobrenome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sobrenome&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;idade&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;idade&lt;/span&gt;

&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'João'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'da Silva'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Imprime 1
&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Maria'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'dos Santos'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Imprime 2
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Pessoa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_de_pessoas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Imprime 2
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_de_pessoas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Imprime 2
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_de_pessoas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Imprime 2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nesse código é criado uma variável &lt;code&gt;total_de_pessoas&lt;/code&gt; dentro do escopo da classe &lt;code&gt;Pessoas&lt;/code&gt;, e que é compartilhado tanto pela classe, como pelos objetos dessa classe, diferente de declará-la com &lt;code&gt;self.&lt;/code&gt; dentro do &lt;code&gt;__init__&lt;/code&gt;, onde esse valor pertenceria apenas ao objeto, e não é compartilhado com os demais objetos. Declarar variáveis dentro do contexto da classe é similar ao se declarar variáveis com &lt;code&gt;static&lt;/code&gt; em outras linguagens, assim como o &lt;code&gt;@classmethod&lt;/code&gt; é semelhante a declaração de funções com &lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As funções declaradas com &lt;code&gt;@classmethod&lt;/code&gt; também podem ser chamadas sem a necessidade de se criar um objeto, como &lt;code&gt;Pessoa.novo_id()&lt;/code&gt;, embora que para essa função específica isso não faça muito sentido, ou receber outros argumentos, tudo depende do que essa função fará.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#considera%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Considerações
&lt;/h2&gt;

&lt;p&gt;Embora possa parecer confuso identificar a diferença de uma função de um objeto (função sem decorador), função de uma classe (com decorador &lt;code&gt;@classmethod&lt;/code&gt;) e função sem acesso a nenhum outro contexto (com decorador &lt;code&gt;@staticmethod&lt;/code&gt;), essa diferença fica mais clara ao se analisar o primeiro argumento recebido por cada tipo de função. Podendo ser a referência a um objeto (&lt;code&gt;self&lt;/code&gt;) e assim necessitando que um objeto seja criado anteriormente, ser uma classe (&lt;code&gt;cls&lt;/code&gt;) e não necessitando receber um objeto, ou simplesmente não recebendo nenhum argumento especial, apenas os demais argumentos necessários para a função. Sendo diferenciados pelo uso dos decoradores.&lt;/p&gt;

&lt;p&gt;Na orientação a objetos implementada pelo Python, algumas coisas podem ficar confusas quando se mistura com nomenclaturas de outras linguagens que possuem implementações diferentes. A linguagem Java, por exemplo, utiliza a palavra-chave &lt;code&gt;static&lt;/code&gt; para definir os atributos e métodos de classe, enquanto no Python um método estático é aquele que não acessa nem um objeto, nem uma classe, devendo ser utilizado o escopo da classe e o decorador &lt;code&gt;@classmethod&lt;/code&gt; para se criar atributos e métodos da classe.&lt;/p&gt;

</description>
      <category>oop</category>
      <category>python</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>[PT-BR] Resolvendo o Bandit (níveis 5-10)</title>
      <author>Leticia Pegoraro Garcez</author>
      <pubDate>Sun, 11 Apr 2021 02:14:01 +0000</pubDate>
      <link>https://dev.to/lelepg/pt-br-resolvendo-o-bandit-niveis-5-10-29na</link>
      <guid>https://dev.to/lelepg/pt-br-resolvendo-o-bandit-niveis-5-10-29na</guid>
      <description>&lt;p&gt;Olá serumaninhos!&lt;br&gt;
Sei que já faz um tempo desde a útlima vez que eu escrevi sobre o assunto, mas com a faculdade fica difícil encontrar tempo entre listas de exerícios para me dedicar ao dev.to, porém faço o melhor que eu posso.&lt;/p&gt;

&lt;p&gt;Este é o segundo artigo da série "Resolvendo o Bandit" que eu estou produzindo, e hoje vamos avançar mais cinco níveis desse desafio de &lt;em&gt;Capture the Flag&lt;/em&gt; do &lt;a href="https://overthewire.org/wargames/"&gt;OverTheWire&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Se você caiu neste artigo de para-quedas, não deixe de conferir o artigo anterior, onde solucionei (e contei minha jornada de solução) dos cinco primeiros níveis desse jogo &lt;a href="https://dev.to/lelepg/pt-br-resolvendo-o-bandit-niveis-0-5-4ipp"&gt;clicando aqui&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;É importante lembrar que estes artigos tem um foco na minha jornada para solucionar o problema, não na solução em si, o que é bem diferente do que você encontra na internet por ai. Então, se você está pronto pra ir nessa aventura comigo, vamos nessa!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#onde-parei"&gt;
  &lt;/a&gt;
  Onde parei:
&lt;/h2&gt;

&lt;p&gt;No último artigo, eu consegui a senha e o login para o nível 6 do desafio.&lt;br&gt;
Comando de login: ssh &lt;a href="mailto:bandit5@bandit.labs.overthewire.org"&gt;bandit5@bandit.labs.overthewire.org&lt;/a&gt; -p 2220&lt;br&gt;
Senha: koReBOKuIDDepwhWk7jZC0RTdopnAYKh&lt;/p&gt;

&lt;p&gt;Com essas informações, já podemos &lt;a href="https://overthewire.org/wargames/bandit/bandit6.html"&gt;acessar o link&lt;/a&gt; das instruções e prosseguir o desafio.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#n%C3%ADvel-5-gt-n%C3%ADvel-6"&gt;
  &lt;/a&gt;
  Nível 5 -&amp;gt; Nível 6
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;A senha para o próximo nível está em algum lugar na pasta inhere e tem todas as seguintes propriedades: pode ser lida por humanos, tem tamanho de 1033 bytes e não é executável.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Alguns comandos são disponibilizados na página do desafio, como dicas. O comando que já me parece útil, é o comando &lt;code&gt;find&lt;/code&gt;, já que pelo enunciado precisamos procurar por um arquivo de acordo com suas propriedades, mas só para garantir, eu usei o comando &lt;code&gt;whatis find&lt;/code&gt; para ter certeza de que é este o comando que eu preciso.&lt;/p&gt;

&lt;p&gt;Para saber mais sobre esse comando, eu utilizaria o comando &lt;code&gt;find --help&lt;/code&gt; no terminal no Linux, ou &lt;code&gt;man find&lt;/code&gt;, mas vou tentar fazer algo diferente, e usar uma sugestão do &lt;a href="https://dev.to/eduardoklosowski"&gt;Eduardo Klosowski&lt;/a&gt; (inclusive, se você não conhece o conteúdo que ele produz, recomendo fortemente que conheça, porque ele tem domínio de tudo que fala e está sempre falando de conteúdo relevanete, além é claro de me dar dicas ótimas!) e usar o site &lt;a href="https://explainshell.com/"&gt;https://explainshell.com/&lt;/a&gt; para ter uma alternativa diferente ao terminal. Basta digitar o comando e o site fará uma busca, exibindo os comandos relacionados à sua busca. Então é só selecionar o comando, e tentar entender o que precisamos fazer para passar de nível.&lt;/p&gt;

&lt;p&gt;Lendo &lt;a href="https://explainshell.com/explain/1/find"&gt;o resultado da busca para &lt;code&gt;find&lt;/code&gt;&lt;/a&gt;, vemos que este comando possui uma série de parâmetros para procurar por arquivos por diferentes tipos de coisas. Então precisamos de alguma maneira para filtrar a legibilidade, tamanho, e executabilidade dos arquivos na pasta.&lt;/p&gt;

&lt;p&gt;As diretivas que eu encontrei que podem resolver o problema foram &lt;code&gt;-readable&lt;/code&gt;, &lt;code&gt;-size&lt;/code&gt; e &lt;code&gt;-executable&lt;/code&gt;. Para o parâmetro &lt;code&gt;executable&lt;/code&gt;, eu preciso descobrir uma maneira de inverter seu resultado, algo que eu penso que pode ser feito usando &lt;code&gt;!&lt;/code&gt; ou &lt;code&gt;not&lt;/code&gt;, e como não encontrei essa informação no site, utilizo o &lt;code&gt;find --help&lt;/code&gt; para ver se encontro alguma coisa. De fato, podemos obsersar alguns operadores para os parâmetros, entre eles, o &lt;code&gt;-not&lt;/code&gt; que deve ser usado antes de outro parâmetros. Agora só preciso combinar todos os parâmetros, e teremos uma solução para o problema.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;find -readable -not -executable -size 1033&lt;/code&gt;, infelizmente não funcionou (como se algo funcionasse na primeira tentativa hehe), mas quando eu tirei o parâmetro referente ao tamanho, consegui um resultado para a busca, o que significa que meu problema está neste último parâmetro da busca. E como era de se esperar, eu acabei esquecendo de especificar o tamanho, ou seja, indicar que 1033 se refere a bytes. Então é só aplicar &lt;code&gt;find -readable -not -executable -size 1033c&lt;/code&gt; e temos como resultado um único arquivo. Agora é só usar o comando cat nesse arquivo, e temos a senha para o próximo nível. Lembrando que para fechar a conexão com o servidor atual, você precisa digitar &lt;code&gt;exit&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#checkpoint"&gt;
  &lt;/a&gt;
  Checkpoint
&lt;/h4&gt;

&lt;p&gt;Comando de login: ssh &lt;a href="mailto:bandit6@bandit.labs.overthewire.org"&gt;bandit6@bandit.labs.overthewire.org&lt;/a&gt; -p 2220&lt;br&gt;
Senha: DXjZPULLxYr17uwoI01bNLQbtFemEgo7&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#n%C3%ADvel-6-gt-n%C3%ADvel-7"&gt;
  &lt;/a&gt;
  Nível 6 -&amp;gt; Nível 7
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;A senha para o próximo nível está em algum lugar no servidor e tem todas as seguintes propriedades: pertence ao usuário bandit7, pertence ao grupo bandit6 e tem 33 bytes de tamanho.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Lendo este enunciado, me parece que temos que usar o comando &lt;code&gt;find&lt;/code&gt; outra vez. Para ter certeza disso, volto à nossa &lt;a href="https://explainshell.com/explain/1/find"&gt;busca no explainshell.com&lt;/a&gt; para ver se existe algum comando que filtre a quem determinado arquivo pertence.&lt;/p&gt;

&lt;p&gt;Logo encontro os parâmetros &lt;code&gt;-group&lt;/code&gt;, que retorna arquivos pertences a determinado grupo, e &lt;code&gt;-user&lt;/code&gt;, que retorna arquivos pertences a um determinado usuário. Como já conhecemos o &lt;code&gt;-size&lt;/code&gt; para encontrar um arquivo por tamanho, já temos tudo na mão para resolver esse desafio.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;find -user bandit7 -group bandit6 -size 33c&lt;/code&gt; parece que vai resolver o desafio, porém não consegui nenhum tipo de retorno com este comando. Este é um momento decisivo. Você pode aceitar que algo não funciona e é isso, ou pode tentar entender porque ele não funciona e assim encontrar uma solução. Lógicamente, eu escolhi ler um pouco mais da documentação do comando para entender porque não estava funcionando.&lt;/p&gt;

&lt;p&gt;O comando &lt;code&gt;file&lt;/code&gt; procura arquivos no diretório atual, e nos diretórios que estão dentro deste diretório, porém precisamos realizar nossa busca no servidor inteiro, não em uma pasta específica, por isso não consegui nenhum resultado na pasta home do usuário. &lt;/p&gt;

&lt;p&gt;Para isso, precisamos especificar uma pasta diferente para fazer a procura, no caso, o diretório &lt;code&gt;/&lt;/code&gt; do servidor, já que todo o conteúdo do servidor está dentro deste diretório. Para especificar um novo diretório, o colocamos logo após o comando &lt;code&gt;file&lt;/code&gt;, então rodando &lt;code&gt;find / -user bandit7 -group bandit6 -size 33c&lt;/code&gt;, temos alguns resultados, vários deles indicando &lt;em&gt;"Permission denied"&lt;/em&gt;, ou permissão negada. &lt;/p&gt;

&lt;p&gt;Bom, é quase intuitivo que temos que encontrar um arquivo que tenhamos permissão de acessar, então aqui você tem duas opções: olhar cada um dos resultados atrás de algum que tenha permissão, ou procurar na documentação do &lt;code&gt;find&lt;/code&gt; algo que automatize isso. Eu, novamente, escolhi a segunda opção, mas não encontrei nada relevante. Também dei uma olhada no comando &lt;code&gt;grep&lt;/code&gt; (utilizado para encontrar padrões), e também não encontrei nada de útil.&lt;/p&gt;

&lt;p&gt;Por fim, recorri ao google. É muito importante que você saiba pesquisar para obter melhor um melhor resultado. No meu caso, eu fiz a busca em inglês porque geralmente consigo resultados mais interessantes mais rápido. &lt;em&gt;"linux find skip permission denied"&lt;/em&gt; me pareceu uma boa busca, já que eu quero realmente pular os arquivos que não consigo acessar. E olhando os resultados da pesquisa, consegui encontrar o comando &lt;code&gt;2&amp;gt;/dev/null&lt;/code&gt; &lt;a href="https://www.cyberciti.biz/faq/bash-find-exclude-all-permission-denied-messages/"&gt;clique aqui para acessar o link do artigo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Antes de usar o comando, copiei e colei ele novamente no google (google é essencial se você trabalha com tecnologia, só quero deixar isso registrado aqui), para tentar descobrir do que se tratava, e encontrei a resposta que eu precisava &lt;a href="https://askubuntu.com/questions/350208/what-does-2-dev-null-mean"&gt;neste link&lt;/a&gt;. Basicamente, o número 2 se refere a mensagens de erro, ou seja, falhas no acesso, entre outras coisas. O símbolo &amp;gt; é o simbolo de redirecionamento, então estamos redirecionando todos os erros para &lt;code&gt;/dev/null&lt;/code&gt;, que é um diretório de "lixo". Parece fazer sentido com o que eu preciso, então vamos tentar executar o comando &lt;code&gt;find / -user bandit7 -group bandit6 -size 33c 2&amp;gt;/dev/null&lt;/code&gt;, e temos um único arquivo novamente, onde temos a senha do próximo nível. Só usar &lt;code&gt;cat&lt;/code&gt; e pegar!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#checkpoint"&gt;
  &lt;/a&gt;
  Checkpoint
&lt;/h4&gt;

&lt;p&gt;Comando de login: ssh &lt;a href="mailto:bandit7@bandit.labs.overthewire.org"&gt;bandit7@bandit.labs.overthewire.org&lt;/a&gt; -p 2220&lt;br&gt;
Senha: HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#n%C3%ADvel-7-gt-n%C3%ADvel-8"&gt;
  &lt;/a&gt;
  Nível 7 -&amp;gt; Nível 8
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;A senha para o próximo nível está no arquivo data.txt, do lado da palavra "millionth"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Este exercício parece mais simples que o anterior, a primeira vista, mas só vamor ter certeza, resolvendo. Eu comecei usando o comando &lt;code&gt;cat&lt;/code&gt; no arquivo &lt;code&gt;data.txt&lt;/code&gt; para entender melhor a estrutura dele, e como eu deveria estruturar a minha busca. Basicamente, o arquivo possui várias linhas, cada uma contendo uma palavra chave, e uma senha. O que temos que fazer então é achar um comando que retorne o texto da linha onde determinada palavra foi encontrada. &lt;/p&gt;

&lt;p&gt;Vendo os comandos oferecidos pela ajuda no nível, o comando &lt;code&gt;strings&lt;/code&gt; me parece útil, porém após uma rápida busca no &lt;a href="https://explainshell.com/"&gt;explainshell.com&lt;/a&gt;, acho que não é este o comando que precisamos. Reanalizando o problema, uma solução muito simples me veio a cabeça. Eu quero encontrar uma sequência de caracteres em um arquivo, e o comando &lt;code&gt;grep&lt;/code&gt; é perfeito para isso, já que ele busca por determinados padrões de caracteres em um input. Tudo que eu preciso fazer é redirecionar a saída do comando &lt;code&gt;cat&lt;/code&gt; para o comando grep, e BAM! Temos a senha para o próximo nível. E por sorte, &lt;code&gt;cat data.txt | grep millionth&lt;/code&gt; retorna exatamente a linha de código que eu preciso com a senha &lt;em&gt;cvX2JJa4CFALtqS87jk27qwqGhBM9plV&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Algo que acho importante mencionar aqui, é que o comando &lt;code&gt;grep&lt;/code&gt; foi o primeiro da lista de sugestões do &lt;a href="https://overthewire.org/wargames/bandit/bandit8.html"&gt;OverTheWire&lt;/a&gt;, mas só passou pela minha cabeça utilizá-lo depois que eu já tinha pesquisado e feito algumas tentativas com outros comandos. Talvez eu devesse ter prestado mais atenção às dicas, hehe.   &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#checkpoint"&gt;
  &lt;/a&gt;
  Checkpoint
&lt;/h4&gt;

&lt;p&gt;Comando de login: ssh &lt;a href="mailto:bandit8@bandit.labs.overthewire.org"&gt;bandit8@bandit.labs.overthewire.org&lt;/a&gt; -p 2220&lt;br&gt;
Senha: cvX2JJa4CFALtqS87jk27qwqGhBM9plV&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#n%C3%ADvel-8-gt-n%C3%ADvel-9"&gt;
  &lt;/a&gt;
  Nível 8 -&amp;gt; Nível 9
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;A senha para o próximo nível está guardada no arquivo data.txt e é a única linha de código que ocorre apenas uma vez.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Como no exercício anterior, precisamos realizar uma filtragem em um arquivo de texto, mas uma filtragem que identifique um a linha única. Nos comandos oferecidos na ajuda, &lt;code&gt;uniq&lt;/code&gt; me parece útil, e observando o resultado e &lt;code&gt;whatis uniq&lt;/code&gt;, vejo que ele omite linhas repetidas, então parece que tudo que precisamos fazer é filtrar o arquivo com este comando. Porém não tive muito sucesso com a utilização dele. Isso significa que precisamos ir mais a fundo nas funcionalidades do comando para entender como ele funciona. &lt;/p&gt;

&lt;p&gt;Uma opção de contagem está disponível no comando, e utilizando ela em conjunto com o comando grep, ainda recebemos várias ocorrências de linhas que ocorrem apenas uma vez, e observando a saída, encontrei o problema. Como não existem duas linhas iguais em seguida, o comando &lt;code&gt;uniq&lt;/code&gt; não filtra essas ocorrências separadas, então precisamos de alguma maneira de ordenar as linhas do arquivo de texto. O comando que me parece útil é o comando &lt;code&gt;sort&lt;/code&gt; que ordena linhas de texto. Agora é entender como este comando funciona e de que maneira ele pode ser utilizado.&lt;/p&gt;

&lt;p&gt;O comando &lt;code&gt;sort&lt;/code&gt; ordena as linhas de texto em ordem alfabética, então tudo o que precisamos fazer é ler o arquivo, ordená-lo e remover as linhas duplicadas. Minha primeira ideia foi criar um novo arquivo com a lista ordenada, mas não tenho permissão de fazer esse tipo de alteração, então minha segunda ideia foi redirecionar a saída do comando &lt;code&gt;sort&lt;/code&gt; para o comando &lt;code&gt;uniq&lt;/code&gt;, e isso também não deu muito certo, mas lendo a documentação do comando &lt;code&gt;uniq&lt;/code&gt;, é possível ver que o parâmetro &lt;code&gt;-u&lt;/code&gt; imprime apenas linhas não repetidas, e de fato &lt;code&gt;sort data.txt | uniq -u&lt;/code&gt; retorna apenas uma linha de texto, que é a senha do próximo nível. Note que não é necessário especificar o input para o comando &lt;code&gt;uniq&lt;/code&gt;, já que a entrada deste comando é a saída do comando &lt;code&gt;sort&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#checkpoint"&gt;
  &lt;/a&gt;
  Checkpoint
&lt;/h4&gt;

&lt;p&gt;Comando de login: ssh &lt;a href="mailto:bandi9@bandit.labs.overthewire.org"&gt;bandi9@bandit.labs.overthewire.org&lt;/a&gt; -p 2220&lt;br&gt;
UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#n%C3%ADvel-9-gt-n%C3%ADvel-10"&gt;
  &lt;/a&gt;
  Nível 9 -&amp;gt; Nível 10
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;A senha para o próximo nível está no arquivo data.txt em uma das poucas strings que podem ser lidas por um humano, precedida de vários '='&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Assim como nos desafios anteriores, aqui precisamos fazer uma filtragem no texto de um arquivo. Basta definir como. Minha primeira ideia para resolver este problema, foi utilizar o comando &lt;code&gt;cat&lt;/code&gt; e filtrar essa saída com o comando &lt;code&gt;grep&lt;/code&gt;, mas como você já deve estar acostumado se leu tudo o que eu escrevi até aqui, isso não deu certo, e não é nenhuma surpresa.&lt;/p&gt;

&lt;p&gt;Já que não deu certo, comecei a procurar na documentação do comando &lt;code&gt;cat&lt;/code&gt; algum motivo para me explicar porque isso não deu certo, mas não consegui chegar em nada muito claro. Minha segunda opção (pelas dicas do nível), é o comando &lt;code&gt;strings&lt;/code&gt; que parece fazer quase a mesma coisa que o &lt;code&gt;cat&lt;/code&gt;, mas ao invés de imprimir na tela, este comando apenas gera uma saída com todas as strings lidas do arquivo, o que o torna um bom candidato para um segundo teste. &lt;/p&gt;

&lt;p&gt;Lembrando que eu preciso filtrar o documento por um padrão, (o que já torna o uso do &lt;code&gt;grep&lt;/code&gt; quase que institivo). Surpreendentemente, (não, eu não esperava que isso fosse funcionar, porque geralmente preciso de muitos erros e a maioria deles não é documentado aqui), &lt;code&gt;strings data.txt |grep '=='&lt;/code&gt; retorna um pequeno texto e a senha para o próximo nível. Note que eu usei '==' como filtro do grep, e se você ler a descrição do problema verá que o exercício enuncia que a senha está &lt;em&gt;precedida de vários '='&lt;/em&gt;, portanto me pareceu mais lógico utilizar dois iguais pois estaria retirando algumas linhas que eu já sabia que não se adequavam à condição (aquelas que contém apenas um '='). &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#checkpoint"&gt;
  &lt;/a&gt;
  Checkpoint
&lt;/h4&gt;

&lt;p&gt;Comando de login: ssh &lt;a href="mailto:bandit10@bandit.labs.overthewire.org"&gt;bandit10@bandit.labs.overthewire.org&lt;/a&gt; -p 2220&lt;br&gt;
Senha: truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#n%C3%ADvel-10-gt-n%C3%ADvel-11"&gt;
  &lt;/a&gt;
  Nível 10 -&amp;gt; Nível 11
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;A senha para o próximo nível está no arquivo data.txt que contém dados criptografados em base64&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Já que um dos comandos das dicas se chama literalmente &lt;code&gt;base64&lt;/code&gt;, acho que a solução desse problema não vai ser muito difícil. Utilizando o comando &lt;code&gt;whatis&lt;/code&gt; vemos que &lt;code&gt;base64&lt;/code&gt; é um comando para criptografar e discriptografar dados. Parece ser o que precisamos, e rodando &lt;code&gt;base64 --help&lt;/code&gt;, o parâmetro &lt;code&gt;-d&lt;/code&gt; fornece uma descriptografia de um arquivo. E de uma maneira muito mais simples do que parece, só precisamos utilizar o comando &lt;code&gt;base64 -d data.txt&lt;/code&gt; para obter a senha do próximo nível.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#checkpoint"&gt;
  &lt;/a&gt;
  Checkpoint
&lt;/h4&gt;

&lt;p&gt;Comando de login: ssh &lt;a href="mailto:bandit11@bandit.labs.overthewire.org"&gt;bandit11@bandit.labs.overthewire.org&lt;/a&gt; -p 2220&lt;br&gt;
Senha: IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#considera%C3%A7%C3%B5es-finais"&gt;
  &lt;/a&gt;
  Considerações finais
&lt;/h2&gt;

&lt;p&gt;Confesso que demorei muito mais do que eu gostaria para escrever este arquivo, porém, antes tarde do que nunca, está publicado.&lt;/p&gt;

&lt;p&gt;Resolver estes desafios está sendo bem divertido, porém eu gostaria muito de ter mais tempo para me dedicar aos desafios. Se você acha que eu "enrolo" muito explicando meus erros, saiba que só os mais significativos realmente entram para o artigo, e que esse processo é bem complicado. &lt;/p&gt;

&lt;p&gt;De qualquer jeito, espero que este artigo tenha sido útil de alguma forma, e até a próxima!&lt;/p&gt;

</description>
      <category>braziliandevs</category>
      <category>linux</category>
      <category>security</category>
    </item>
    <item>
      <title>Tip: use the WordPress code editor to pass attributes to your Gutenberg block variations</title>
      <author>Ashley Kolodziej</author>
      <pubDate>Sun, 11 Apr 2021 02:00:02 +0000</pubDate>
      <link>https://dev.to/ashleykolodziej/tip-use-the-wordpress-code-editor-to-pass-attributes-to-your-gutenberg-block-variations-4jcb</link>
      <guid>https://dev.to/ashleykolodziej/tip-use-the-wordpress-code-editor-to-pass-attributes-to-your-gutenberg-block-variations-4jcb</guid>
      <description>&lt;p&gt;I’ve been learning Gutenberg block development lately, and one of the things I was struggling with was trying to figure out what parameters I could pass on to blocks defined in block variations. I was looking all over the place for documentation on the parameters each block takes, such as font size and color. Little did I know I had all the documentation I needed right in front of me, in the form of the WordPress code editor.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wait-whats-a-variation"&gt;
  &lt;/a&gt;
  Wait, what’s a variation?
&lt;/h2&gt;

&lt;p&gt;A block variation is an easy way of leveraging WordPress core blocks (and even custom blocks you build) to create your own sets of blocks without writing any React code. You’ll need to write a bit of JavaScript, but it’s a lot like writing an array or object. If you can do that, you can write a block variation.&lt;/p&gt;

&lt;p&gt;I like using block variations to create recommended sets of content and help guide my users in content entry. You can nest blocks in block variations, and do things like pre-set the background or font size on them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-the-editor-to-speed-up-block-variation-development"&gt;
  &lt;/a&gt;
  Use the editor to speed up block variation development
&lt;/h2&gt;

&lt;p&gt;My new workflow with block variations is to build the variation just the way I like it in the visual editor, and then switch over to the code editor to grab the attributes I need from there. This lets me set hard-to-remember parameters the right way, like gradients, without having to guess and check, like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6_szirpM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8hg7bjq1pk76zj8q5ae.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6_szirpM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8hg7bjq1pk76zj8q5ae.jpeg" alt="The attributes in the code editor are between curly braces, and can be used in block variations."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you identify the block you want to model your variation off of in the code editor, just grab those attributes and bring them back into your block variations code. &lt;a href="https://github.com/ashleykolodziej/professorkexplains-block-variations/blob/solution-code/src/variations/index.js#L61"&gt;Here’s what that looks like in my final code.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uXg78IZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6s03fvk2bs6j9ma3hzt.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uXg78IZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6s03fvk2bs6j9ma3hzt.jpeg" alt="Code example demonstrating attributes being passed to a block variation using the attributes parameter."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This works for both your variations and your &lt;code&gt;innerBlocks&lt;/code&gt;. &lt;a href="https://github.com/ashleykolodziej/professorkexplains-block-variations/blob/solution-code/src/variations/index.js#L28"&gt;Here’s an example in my final code of how I used this in a nested block.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7nX8CpK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5pl3yxmaj8qh82eopv9.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7nX8CpK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5pl3yxmaj8qh82eopv9.jpeg" alt="Code example demonstrating attributes being passed to inner blocks in a block variation."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Block variations are a low key way to get into Gutenberg block development and get familiar with the ecosystem without getting into React or the more complicated bits. Check it out if you’re new to Gutenberg and looking for a place to start.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#full-tutorial"&gt;
  &lt;/a&gt;
  Full tutorial
&lt;/h2&gt;

&lt;p&gt;If you’re new to JavaScript or Gutenberg, I recorded my full process of building block variations using this method in a beginner-friendly way here.  I also put together sample code below in Github you can use to get started with a new block variation.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/m6IH-G286DU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ashleykolodziej"&gt;
        ashleykolodziej
      &lt;/a&gt; / &lt;a href="https://github.com/ashleykolodziej/professorkexplains-block-variations"&gt;
        professorkexplains-block-variations
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Block Variations tutorial&lt;/h1&gt;
&lt;p&gt;These are companion files to my &lt;a href="https://youtu.be/m6IH-G286DU" rel="nofollow"&gt;Build Your First Block Variation tutorial on YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To use these files, download them, and then unzip them to the directory of your choice. In my tutorial, this directory is called &lt;code&gt;variations-example&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can view the final code from the tutorial on the &lt;a href="https://github.com/ashleykolodziej/professorkexplains-block-variations/tree/solution-code"&gt;solution-code branch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can also see exactly what changed codewise from the beginning of the tutorial to the end of the tutorial by &lt;a href="https://github.com/ashleykolodziej/professorkexplains-block-variations/pull/1"&gt;taking a look at this pull request&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ashleykolodziej/professorkexplains-block-variations"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


</description>
      <category>wordpress</category>
      <category>javascript</category>
      <category>gutenberg</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to have a meaningful weekend as a programmer?</title>
      <author>poudyal_rabin</author>
      <pubDate>Sun, 11 Apr 2021 01:56:02 +0000</pubDate>
      <link>https://dev.to/poudyal_rabin/how-to-spend-a-meaningful-weekend-as-a-programmer-353j</link>
      <guid>https://dev.to/poudyal_rabin/how-to-spend-a-meaningful-weekend-as-a-programmer-353j</guid>
      <description>&lt;p&gt;Human life is a precious incarnation. Being born has a probability of about one in &lt;a href="https://www.huffpost.com/entry/probability-being-born_b_877853"&gt;400 trillion&lt;/a&gt;. So trust me you are special and you should try to get the most out of your life. Living with the scarcity of sunlight, dry eyes, back pain, imposter syndrome, anxiety, and depression is not what you want as a side effect of being a programmer. I want to share some of my tips to have a beautiful weekend.&lt;/p&gt;

&lt;p&gt;Most probably you are reading this post because you also want to make your weekends meaningful and memorable. Of course, having a meaningful and productive weekend is a subjective thing for different people of different age groups. For some, it might be getting a travel experience or reading a book or watching a movie or working on a side hustle, or just doing nothing. But for some, it might be having family time as well.&lt;/p&gt;

&lt;p&gt;No matter in what stage of life you are now, you should try to have a wonderful weekend. Just like everything in life, it doesn't happen without taking any action. To take an action, you need to take a break for some time from your career and retrospect your life as a whole and brainstorm what you want out of your life.&lt;/p&gt;

&lt;p&gt;The hack is to allocate one weekend for yourself. Think about what you want to do in your life. Think about if life is going in the direction you wanted or not. Think about what matters most to you at the current stage of your life. Is it a relationship? Is it traveling? Is it acquiring knowledge? Is it working on your hobby project? Is it cooking?&lt;/p&gt;

&lt;p&gt;Once you have that idea in mind, the next step is to make an actionable plan that could be carried out in 1, 2, 3, and 5 days. Of course! They are Fibonacci numbers. I am picking those because they are also used for task estimations. After picking the task and weights, use google calendar or something similar to mark dates. Execute your weekends and leaves for those plans. And that's all. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-is-the-advantage-of-doing-this"&gt;
  &lt;/a&gt;
  So what is the advantage of doing this?
&lt;/h2&gt;

&lt;p&gt;Since the weekends are short and come after a long tiring week, sometimes we don't have any energy left to plan our weekends. Another advantage is that if we plan ahead, it would be easier to make group plans.&lt;/p&gt;

&lt;p&gt;Depending on the current situation of the pandemic in the place you are living, please follow the safety precautions too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#here-are-a-few-things-you-can-try-if-you-have-nothing-to-do-this-weekend"&gt;
  &lt;/a&gt;
  Here are a few things you can try if you have nothing to do this weekend:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;0. Explore a park you have never been to before
1. Pull a harmless prank on one of your friends
2. Start a collection
3. Go for a run
4. Take your dog on a walk
5. Write a note of appreciation to someone
6. Learn woodworking
7. Do something you used to do as a kid
8. Create and follow a savings plan
9. Learn how to use a french press
10. Organize a bookshelf
11. Improve your touch typing
12. Volunteer at your local food bank
13. Learn how to use a french press
14. Learn how to make an Alexa skill
15. Try a food you don't like
16. Organize a bookshelf
17. Study a foreign language
18. Surprise your significant other with something considerate
19. Go for a walk
20. Learn Kotlin
21. Learn how to play a new sport
22. Go to a concert with some friends
23. Create a compost pile
24. Wash your car
25. Learn GraphQL
26. Volunteer and help out at a senior center
27. Go on a fishing trip with some friends
28. Draw and color a Mandala
29. Clean out your refrigerator
30. Go for a run
31. Find a DIY to do
32. Volunteer at your local food pantry
33. Start a garden
34. Look at your finances and find one way to save money
35. Hold a yard sale
36. Go see a Broadway production
37. Meditate for five minutes
38. Make a to-do list for your week
39. Start a band
40. Start a daily journal
41. Go swimming with a friend
42. Take your dog on a walk
43. Learn Javascript
44. Write a song
45. Give your pet ten minutes of focused attention
46. Have a jam session with your friends
47. Learn calligraphy
48. Memorize a favorite quote or poem
49. Organize a cluttered drawer
50. Learn a new recipe
51. Go for a walk
52. Volunteer at your local food pantry
53. Match your storage containers with their lids
54. Think of a new business idea
55. Plan a trip to another country
56. Read a formal research paper on an interesting subject
57. Create a compost pile
58. Start a book you've never gotten around to reading
59. Start a garden
60. Bake pastries for you and your neighbor
61. Go stargazing
62. Have a jam session with your friends
63. Start a book you've never gotten around to reading
64. Think of a new business idea
65. Learn how to make a website
66. Take a nap
67. Organize a bookshelf
68. Watch a Khan Academy lecture on a subject of your choosing
69. Look at your finances and find one way to save money
70. Pick up litter around your favorite park
71. Take a bubble bath
72. Text a friend you haven't talked to in a long time
73. Cook something together with someone
74. Plant a tree
75. Learn to greet someone in a new language
76. Clean out your car
77. Visit a nearby museum
78. Hold a video game tournament with some friends
79. Do something nice for someone you care about
80. Take your dog on a walk
81. Learn how to use a french press
82. Volunteer and help out at a senior center
83. Pull a harmless prank on one of your friends
84. Create a cookbook with your favorite recipes
85. Make tie-dye shirts
86. Explore the nightlife of your city
87. Learn calligraphy
88. Learn to greet someone in a new language
89. Take a nap
90. Make a simple musical instrument
91. Make a scrapbook with pictures of your favorite memories
92. Make a bucket list
93. Draw something interesting
94. Write a list of things you are grateful for
95. Surprise your significant other with something considerate
96. Bake something you've never tried before
97. Pot some plants and put them around your house
98. Do something you used to do as a kid
99. Make a budget
100. Go to a concert with local artists with some friends
101. Write a short story
102. Take a bubble bath
103. Catch up with a friend over a lunch date
104. Cook something together with someone
105. Mow your neighbor's lawn
106. Go on a fishing trip with some friends
107. Listen to a new music genre
108. Write a thank you letter to an influential person in your life
109. Learn about the Golden Ratio
110. Back up important computer files
111. Play a video game
112. Start a daily journal
113. Learn how to write in shorthand
114. Learn how to use an Arduino
115. Start a blog for something you're passionate about
116. Go for a walk
117. Create a personal website
118. Visit a nearby museum
119. Learn Kotlin
120. Go for a run
121. Find a DIY to do
122. Create a personal website
123. Surprise your significant other with something considerate
124. Plant a tree
125. Go see a movie in theaters with a few friends
126. Learn Express.js
127. Plan a trip to another country
128. Prepare a 72-hour kit
129. Play a game of tennis with a friend
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me know how you make your weekends meaningful. Have a wonderful weekend!! 🍻&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>career</category>
    </item>
    <item>
      <title>Are Default Params in JavaScript bad? (Snack pack #4)</title>
      <author>Blake Campbell</author>
      <pubDate>Sun, 11 Apr 2021 01:52:58 +0000</pubDate>
      <link>https://dev.to/blaketweeted/are-default-params-in-javascript-bad-snack-pack-4-g9</link>
      <guid>https://dev.to/blaketweeted/are-default-params-in-javascript-bad-snack-pack-4-g9</guid>
      <description>&lt;h1&gt;
  &lt;a href="#not-if-its-still-passed"&gt;
  &lt;/a&gt;
  Not if it's still passed
&lt;/h1&gt;

&lt;p&gt;Take this example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NjeZ1Rp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ljcsshc6kr9q2fy1164o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NjeZ1Rp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ljcsshc6kr9q2fy1164o.png" alt="carbon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wrote this function well over two years ago. It just pops up a notification if the user makes a CRUD call. (Create, Read, Update Delete). The function only takes two defined parameters a message and a notification. &lt;/p&gt;

&lt;p&gt;The notification parameter is a boolean.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;notification = true // notify user by a pop-up
notification = false // inline-notification by form button, or in a defined space
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Looking back at this function, it could be much better. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instead of a notification boolean, it can be notification style as a string. &lt;/li&gt;
&lt;li&gt;Call with the second parameter everywhere&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#back-to-the-question-default-params-in-js-bad"&gt;
  &lt;/a&gt;
  Back to the question: &lt;strong&gt;Default Params in JS bad?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;I think so if I'm not explicitly calling with all the params of a function. &lt;strong&gt;It's okay to have a fallback, but don't depend on it!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It's leaves technical debt. &lt;/li&gt;
&lt;li&gt;How is another developer supposed to know what parameters are passed if they only see a partial picture? &lt;/li&gt;
&lt;li&gt;My boolean parameter is bad in this case.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#how-i-refactored-this-function"&gt;
  &lt;/a&gt;
  How I refactored this function:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SZYSqqnK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhir0fjvc94eo9na9av9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SZYSqqnK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhir0fjvc94eo9na9av9.png" alt="carbon (2)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My snack pack reads are intended for a quick read without any fluff or BS.&lt;/p&gt;

&lt;p&gt;Feedback is always welcome.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codequality</category>
      <category>refactorit</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Frontend Security</title>
      <author>Piyush Sinha</author>
      <pubDate>Sun, 11 Apr 2021 01:13:09 +0000</pubDate>
      <link>https://dev.to/sinhapiyush/frontend-security-45he</link>
      <guid>https://dev.to/sinhapiyush/frontend-security-45he</guid>
      <description>&lt;p&gt;Modern web development comes with a variety of challenges that developers have to consider, such as performance, accessibility, responsive design, and security. Unfortunately, security is a topic that is often overlooked by frontend developers. We need to understand that hackers out there are more equipped than ever and they'll look for every possible vulnerability. &lt;/p&gt;

&lt;p&gt;In this article, we’ll cover some tips to ensure our web application is secure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#auditing-package-dependencies-for-security-vulnerabilities"&gt;
  &lt;/a&gt;
  Auditing package dependencies for security vulnerabilities
&lt;/h3&gt;

&lt;p&gt;Most of our app's code comes from &lt;code&gt;npm&lt;/code&gt;. Hence, most of our vulnerabilities come from &lt;code&gt;npm&lt;/code&gt;. It's a third-party code and one shouldn't blindly trust it. In v6, npm introduced a new command that lets you assess your package dependencies for security vulnerabilities - &lt;code&gt;npm audit&lt;/code&gt;. It checks the current version of the installed packages in your project against known vulnerabilities reported on the public npm registry. If it discovers a security issue, it reports it and labels them in terms of the level of severity - &lt;code&gt;low&lt;/code&gt;, &lt;code&gt;moderate&lt;/code&gt;, &lt;code&gt;high&lt;/code&gt; and &lt;code&gt;critical&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LeC-qAwp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618089099051/n3Nud8IDT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LeC-qAwp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618089099051/n3Nud8IDT.png" alt="Screenshot 2021-04-11 at 2.38.42 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After reviewing the generated vulnerability report, we can see the packages - &lt;code&gt;immer&lt;/code&gt; and &lt;code&gt;react-dev-utils&lt;/code&gt; have high severity vulnerabilities and the fix is also available.&lt;/p&gt;

&lt;p&gt;Run the &lt;code&gt;npm audit fix&lt;/code&gt; command to automatically install compatible updates to vulnerable dependencies:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7R5k2n9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618089952047/DviGfMMBJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7R5k2n9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618089952047/DviGfMMBJ.png" alt="Screenshot 2021-04-11 at 2.55.32 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All the reported vulnerabilities have been fixed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-subresource-integritysri-for-thirdparty-scripts"&gt;
  &lt;/a&gt;
  Use Subresource Integrity(SRI) for third-party scripts
&lt;/h3&gt;

&lt;p&gt;We should always try to minimize the use of third-party scripts in our application. The reason being if the third-party service is compromised, it will serve us the manipulated scripts. But there may be a scenario where a third-party script is needed to implement some feature. Fortunately, we have a solution to protect our application.&lt;/p&gt;

&lt;p&gt;For all third-party scripts used in the application, make sure to include the &lt;code&gt;integrity&lt;/code&gt; attribute. It's a file hashing value of the script-source file. It allows a browser to check the script to ensure that resources hosted on third-party servers have not been manipulated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://code.jquery.com/jquery-3.3.1.slim.min.js"&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use an online &lt;code&gt;Subresource Integrity(SRI)&lt;/code&gt; hash generator to generate &lt;code&gt;integrity&lt;/code&gt; hashes: &lt;a href="https://www.srihash.org"&gt;SRI Hash Generator&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#content-security-policycsp"&gt;
  &lt;/a&gt;
  Content Security Policy(CSP)
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Content Security Policy (CSP)&lt;/code&gt; is an added layer of security that helps to detect and mitigate certain types of attacks, including &lt;a href="https://owasp.org/www-community/attacks/xss/"&gt;Cross-Site Scripting (XSS)&lt;/a&gt;. XSS attacks exploit the browser's trust in the content received from the server. Malicious scripts are executed by the victim's browser because the browser trusts the source of the content, even when it's not coming from where it seems to be coming from.&lt;/p&gt;

&lt;p&gt;Instead of blindly trusting everything that a server delivers, CSP allows you to create an &lt;strong&gt;allowlist&lt;/strong&gt; of sources of trusted content and instructs the browser to only execute or render resources from those sources. Even if an attacker can find a hole through which to inject script, the script won't match the &lt;strong&gt;allowlist&lt;/strong&gt;, and therefore won't be executed.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#writing-a-policy"&gt;
  &lt;/a&gt;
  Writing a policy
&lt;/h4&gt;

&lt;p&gt;A policy is described using a series of policy directives, each of which describes the policy for a certain resource type. &lt;/p&gt;

&lt;p&gt;Some policy directives:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;script-src&lt;/code&gt; is used to whitelist script sources. To allow scripts from the current origin only, use &lt;code&gt;script-src 'self'&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;style-src&lt;/code&gt; is used to whitelist CSS stylesheet sources. To allow stylesheets from the current origin only, use &lt;code&gt;style-src 'self'&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;img-src&lt;/code&gt; lets you restrict image sources.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;font-src&lt;/code&gt; specifies permitted sources for loading fonts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;media-src&lt;/code&gt; restricts origins for loading sound and video resources.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;frame-ancestors&lt;/code&gt; restricts URLs that can embed the current resource in &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; and similar elements.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since we trust &lt;code&gt;apis.google.com&lt;/code&gt; to deliver valid code, and we trust ourselves to do the same, let's define a policy that only allows the script to execute when it comes from one of those two sources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We can use the &lt;code&gt;Content-Security-Policy&lt;/code&gt; HTTP header to specify our policy:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Content-Security-Policy: script-src 'self' https://apis.google.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Alternatively, the &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag can be used to specify our policy:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"Content-Security-Policy"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"script-src 'self' https://apis.google.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this policy defined, the browser simply throws an error instead of loading script from any other source. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xURTxTRi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618099994945/GaJXn-ppg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xURTxTRi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618099994945/GaJXn-ppg.png" alt="Screenshot 2021-04-11 at 5.42.39 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;As the web is growing, modern web applications are changing rapidly. The frontend code, now, shares almost equal responsibility as the backend code, if not more. We need to build applications keeping the security aspect in mind. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developers.google.com/web/fundamentals/security/csp"&gt;https://developers.google.com/web/fundamentals/security/csp&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity"&gt;https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>security</category>
    </item>
    <item>
      <title>How I set up my Mac</title>
      <author>Alessandro</author>
      <pubDate>Sat, 10 Apr 2021 23:56:14 +0000</pubDate>
      <link>https://dev.to/dieman/how-i-set-up-my-mac-9m4</link>
      <guid>https://dev.to/dieman/how-i-set-up-my-mac-9m4</guid>
      <description>&lt;p&gt;&lt;strong&gt;Keep in mind:&lt;/strong&gt; some of these steps will be of course optional, such as the iTerm2 installation and configuration. I personally highly suggest the following everything to improve your productivity! If you are at an advanced level already, you can skip all of this.&lt;/p&gt;

&lt;p&gt;Let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mac-shortcuts"&gt;
  &lt;/a&gt;
  Mac Shortcuts
&lt;/h2&gt;

&lt;p&gt;If you are not very experienced with a Macbook, follow this chapter to discover useful tips!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#spotlight-search"&gt;
  &lt;/a&gt;
  Spotlight Search
&lt;/h3&gt;

&lt;p&gt;This will be your best friend. Are you looking for a specific software or folder... or whatever? Press &lt;code&gt;Command-Space&lt;/code&gt; and start writing what you need. You can even use it as a calculator. Try it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#application-switcher"&gt;
  &lt;/a&gt;
  Application Switcher
&lt;/h3&gt;

&lt;p&gt;Press &lt;code&gt;Command-Tab&lt;/code&gt; to open the switcher. If you keep Command key pressed you can use Tab repetitively to navigate through the icons and choose the one you wish to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#terminal"&gt;
  &lt;/a&gt;
  Terminal
&lt;/h2&gt;

&lt;p&gt;If you never used Linux or Mac before, you probably need to learn how to use a terminal efficiently. Below a list of the most used commands.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Home Directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cd ..&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Move to parent directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cd &amp;lt;folder&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Move to the specified folder&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pwd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show your current directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ls&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Display files and subdir in the actual directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ls -la&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Same as before but detailed with hidden files as well&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mkdir &amp;lt;name folder&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Create a new directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rm -R &amp;lt;folder&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Delete folder with its entire content&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rm &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Delete a file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;touch &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Create a file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;chmod -x &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Make a file executable.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;./&amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Run an executable file. Example: &lt;code&gt;./install.sh&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;top&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Display info about running processes (similar to Task Manager), you can exit it with CTRL+C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;kill &amp;lt;PID&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Kill a process using its PID (using the top command, it will be the first column)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cat &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Output the content of a specified file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;nano &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Open and edit a file with the in-built Linux editor&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;These are - in my opinion - the basic that you need to navigate easily through the Terminal. There are many other more commands and flags, and if you need a more detailed list, you can always google it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-install"&gt;
  &lt;/a&gt;
  What to Install
&lt;/h2&gt;

&lt;p&gt;What do you need to install on your new shiny Mac? Below I will cover what I think any Mac should have, and some are real MUST.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#homebrew"&gt;
  &lt;/a&gt;
  Homebrew
&lt;/h3&gt;

&lt;p&gt;Homebrew is a package manager. You can use it to install most of the stuff you need, very fast and from the Terminal.&lt;/p&gt;

&lt;p&gt;Open your Terminal and copy-paste this command to install Homebrew:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;/bin/bash &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;curl &lt;span class="nt"&gt;-fsSL&lt;/span&gt; https://raw.githubusercontent.com/Homebrew/install/master/install.sh&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now install new software with the &lt;code&gt;brew install &amp;lt;name&amp;gt;&lt;/code&gt; or &lt;code&gt;brew cask install &amp;lt;name&amp;gt;&lt;/code&gt; if what you want to install is a graphical GUI application such as our next in the list: Visual Studio Code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visual-studio-code"&gt;
  &lt;/a&gt;
  Visual Studio Code
&lt;/h3&gt;

&lt;p&gt;If you still do not have a favourite code editor, I suggest you give VSCode a try.&lt;/p&gt;

&lt;p&gt;You can install VSCode with Homebrew:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew cask &lt;span class="nb"&gt;install &lt;/span&gt;visual-studio-code
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the installation, to be able to use &lt;code&gt;code&lt;/code&gt; command from the terminal, we need to first to install the 'code' command in PATH. How? Open VSCode with Spotlight (&lt;code&gt;Command-Space&lt;/code&gt;) and press F1 (if you have Touch Bar, press fn and it will appear on it) and type &lt;code&gt;path&lt;/code&gt;, select the first sentence and press enter. Now go in the terminal and try to open your current folder with the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;code &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, have fun customising your new code editor!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-better-terminal"&gt;
  &lt;/a&gt;
  A better terminal
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GucBJ6g---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oww14k8k0lmkz320iw5y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GucBJ6g---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oww14k8k0lmkz320iw5y.png" alt="iTerm2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's time to install and customise iTerm2 and finally get rid of the default Terminal. This process will not only make your Terminal look good, but also improve your productivity with syntax highlight, auto-suggestion and tab auto-complete.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#install-iterm2"&gt;
  &lt;/a&gt;
  Install iTerm2
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew cask &lt;span class="nb"&gt;install &lt;/span&gt;iterm2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#install-oh-my-zsh"&gt;
  &lt;/a&gt;
  Install Oh My Zsh
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;curl &lt;span class="nt"&gt;-fsSL&lt;/span&gt; https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#install-powerlevel10k"&gt;
  &lt;/a&gt;
  Install Powerlevel10k
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/romkatv/powerlevel10k.git &lt;span class="nv"&gt;$ZSH_CUSTOM&lt;/span&gt;/themes/powerlevel10k
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;code ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Visual Studio Code will open then set &lt;code&gt;ZSH_THEME="powerlevel10k/powerlevel10k"&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#install-autosuggestion"&gt;
  &lt;/a&gt;
  Install Auto-Suggestion
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/zsh-users/zsh-autosuggestions &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ZSH_CUSTOM&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="p"&gt;~/.oh-my-zsh/custom&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/plugins/zsh-autosuggestions
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;code ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now type the following code &lt;code&gt;plugins=(zsh-autosuggestions)&lt;/code&gt; on a new line.&lt;/p&gt;

&lt;p&gt;Close the terminals (Command-Q) and restart it again (&lt;code&gt;Command-Space iTerm2&lt;/code&gt;) and follow the instructions as per your preference.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#syntax-highlighting"&gt;
  &lt;/a&gt;
  Syntax highlighting
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;zsh-syntax-highlighting
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now add &lt;code&gt;source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&lt;/code&gt; at the end of &lt;code&gt;~./zshrc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Restart the terminal to apply the changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h2&gt;

&lt;p&gt;I will write something else in the near future!&lt;/p&gt;

&lt;p&gt;Meanwhile feel free to join us in our &lt;a href="https://discord.gg/ohmyzsh"&gt;ohmyzsh discord&lt;/a&gt; if you need any help!&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tips</category>
    </item>
    <item>
      <title>Ruby blocks made easy, part II, curry and procs as arguments</title>
      <author>Leandro Proença</author>
      <pubDate>Sat, 10 Apr 2021 23:21:53 +0000</pubDate>
      <link>https://dev.to/leandronsp/ruby-blocks-made-easy-part-ii-curry-and-procs-as-arguments-3c25</link>
      <guid>https://dev.to/leandronsp/ruby-blocks-made-easy-part-ii-curry-and-procs-as-arguments-3c25</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/leandronsp/ruby-blocks-made-easy-part-i-methods-and-procs-ji2"&gt;In the previous post&lt;/a&gt;, we learned that methods can be transformed into procs to be evaluated &lt;em&gt;later&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;One thing worth to mention is that, the method itself can be used like a proc: every &lt;code&gt;Method&lt;/code&gt; structure has a method called &lt;code&gt;call&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 2021-04-10 17:22:05&lt;/span&gt;

&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:now&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 2021-04-10 17:22:06&lt;/span&gt;
&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:now&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 2021-04-10 17:22:07&lt;/span&gt;

&lt;span class="c1"&gt;# checking the classes&lt;/span&gt;
&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:now&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; Method&lt;/span&gt;
&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:now&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; Proc (lambda)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Given that, the &lt;code&gt;method&lt;/code&gt; structure is good enough to be used in &lt;em&gt;later evaluations&lt;/em&gt;. In theory, it is NOT a Proc. But in practice, it &lt;strong&gt;behaves&lt;/strong&gt; like proc lambdas and &lt;em&gt;will&lt;/em&gt; evaluate the expression later.&lt;/p&gt;

&lt;p&gt;We can also evaluate methods later with arguments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#proc-with-arguments-curry"&gt;
  &lt;/a&gt;
  Proc with arguments (curry)
&lt;/h3&gt;

&lt;p&gt;Sometimes it's useful to define a proc with some &lt;em&gt;static arguments&lt;/em&gt;, which can be evaluated later along with the dynamic arguments. These arguments can be "curried" to the proc using the method &lt;code&gt;.curry&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# creates a proc with no curried arguments&lt;/span&gt;
&lt;span class="c1"&gt;#   and calls using two dynamic arguments&lt;/span&gt;
&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 8&lt;/span&gt;

&lt;span class="c1"&gt;# creates a proc with the first argument curried&lt;/span&gt;
&lt;span class="c1"&gt;#   and calls using one remaining dynamic argument&lt;/span&gt;
&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 8&lt;/span&gt;
&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 15&lt;/span&gt;

&lt;span class="c1"&gt;# checking the class&lt;/span&gt;
&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; Proc&lt;/span&gt;
&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; It's also a Proc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This feature is powerful because it allows us to write more expressive code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;multiply_by_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;multiply_by_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;multiply_by_2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 8&lt;/span&gt;
&lt;span class="n"&gt;multiply_by_3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 18&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#passing-a-lambda-method-as-argument-to-another-method"&gt;
  &lt;/a&gt;
  Passing a lambda method as argument to another method
&lt;/h3&gt;

&lt;p&gt;Lambda methods can be passed as arguments to methods like any other valid expression. &lt;/p&gt;

&lt;p&gt;Let's suppose we want a method which takes a list of numbers and applies some &lt;strong&gt;calculation&lt;/strong&gt; method to each number, returning a new calculated list:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;map_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calculation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;new_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;
    &lt;span class="c1"&gt;# `calculation` is a proc, but we don't care about&lt;/span&gt;
    &lt;span class="c1"&gt;#    its logic: we simply evaluate whatever the&lt;/span&gt;
    &lt;span class="c1"&gt;#    calculation is to the number&lt;/span&gt;
    &lt;span class="n"&gt;new_list&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;calculation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;new_list&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we want to use the method &lt;code&gt;map_numbers&lt;/code&gt; to take a list of numbers and return a new list with &lt;em&gt;each number multiplied by 2&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# declaring the list&lt;/span&gt;
&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# declaring the "calculation" proc, using the "2" curried&lt;/span&gt;
&lt;span class="c1"&gt;#    as we've seen in the previous example&lt;/span&gt;
&lt;span class="n"&gt;multiply_by_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;map_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiply_by_2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; [2, 4, 6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can do even better, &lt;em&gt;in a single line&lt;/em&gt;, applying other calculations as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# multiplying by 2&lt;/span&gt;
&lt;span class="n"&gt;map_numbers&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# multiplying by 4&lt;/span&gt;
&lt;span class="n"&gt;map_numbers&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# multiplying by 42&lt;/span&gt;
&lt;span class="n"&gt;map_numbers&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:multiply&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We could go beyond, supposing we'd have more calculation methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;map_numbers&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:sum_by&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;map_numbers&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:square_of&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;curry&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We learned that procs can be passed as arguments to another methods and, optionally, can use curried arguments, making our code appear more &lt;em&gt;declarative&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/leandronsp/ruby-blocks-made-easy-part-iii-grand-finale-blocks-and-syntactic-sugar-4d48"&gt;In the next and last post of this series&lt;/a&gt;, we will unblock more fundamentals and introduce &lt;em&gt;blocks&lt;/em&gt;.&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>programming</category>
      <category>softwaredevelopment</category>
    </item>
    <item>
      <title>Ruby blocks made easy, part I, methods and procs</title>
      <author>Leandro Proença</author>
      <pubDate>Sat, 10 Apr 2021 23:17:45 +0000</pubDate>
      <link>https://dev.to/leandronsp/ruby-blocks-made-easy-part-i-methods-and-procs-ji2</link>
      <guid>https://dev.to/leandronsp/ruby-blocks-made-easy-part-i-methods-and-procs-ji2</guid>
      <description>&lt;p&gt;Blocks in Ruby are powerful structures that are part of our daily basis as Ruby developers. We see them being used across a variety of standard classes as well as in almost every popular gem. &lt;/p&gt;

&lt;p&gt;A few examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# print each number within an array&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# usage in some ActiveRecord models &lt;/span&gt;
&lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="ss"&gt;:published&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;published: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# usage in Devise configuration&lt;/span&gt;
&lt;span class="no"&gt;Devise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setup&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="c1"&gt;# config.encryptor = :sha512&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# usage in Rails views&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sx"&gt;%= form_for @user do |form| %&amp;gt;
  // do something with the `form` object
&amp;lt;% end %&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The examples could go beyond.&lt;/p&gt;

&lt;p&gt;Blocks enable &lt;em&gt;flexibility and extensibility&lt;/em&gt;. It's practically impossible for any Ruby application to exist without blocks. &lt;/p&gt;

&lt;p&gt;There are &lt;a href="https://www.rubyguides.com/2016/02/ruby-procs-and-lambdas/"&gt;lots of blogposts explaining the differences between blocks, procs and lambdas&lt;/a&gt;, but in this guide which is a series of articles, I'll explain the fundamentals and try to present, in baby-steps, some common problems and how Ruby blocks can help to solve them. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-ruby-evaluates-expressions"&gt;
  &lt;/a&gt;
  How Ruby evaluates expressions
&lt;/h2&gt;

&lt;p&gt;Everything in Ruby is an expression, so an expression results in a value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ruby evaluates the expression, which results in a value `2`&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="c1"&gt;# ruby evaluates the expression, which results in a value `2`, and stores the result in the variable `number`&lt;/span&gt;
&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Same as calling any method in an Object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ruby evaluates the method `.now` in the class `Time`,&lt;/span&gt;
&lt;span class="c1"&gt;#  resulting in a value which is the current time,&lt;/span&gt;
&lt;span class="c1"&gt;#  and stores the result in the variable `current_time` &lt;/span&gt;
&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#everything-in-ruby-is-an-object"&gt;
  &lt;/a&gt;
  Everything in Ruby is an object
&lt;/h4&gt;

&lt;p&gt;For those who are already know that &lt;a href="https://dev.to/craigbrad/everything-is-an-object-5184"&gt;everything in Ruby is an object&lt;/a&gt;, the following expression is familiar:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;1&lt;/code&gt; is an instance object of the class &lt;code&gt;Integer&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;The class &lt;code&gt;Integer&lt;/code&gt; defines a special method, called &lt;code&gt;+&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;This method takes an argument, which should be an instance of the class &lt;code&gt;Integer&lt;/code&gt;, in this case, &lt;code&gt;2&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;The method results in a value, which is &lt;code&gt;3&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that, once:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;everything is object&lt;/li&gt;
&lt;li&gt;objects have methods&lt;/li&gt;
&lt;li&gt;and everything is an expression which results in a value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, expressions are all about &lt;em&gt;calling methods&lt;/em&gt;. Hence, we can come to the conclusion that &lt;strong&gt;expressions are evaluated immediately&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch_current_time&lt;/span&gt;
  &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch_current_time&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, Ruby will evaluate the expression &lt;code&gt;fetch_current_time&lt;/code&gt;, which is a &lt;em&gt;method&lt;/em&gt;, then resulting in the value &lt;strong&gt;immediately&lt;/strong&gt;, storing the result in the variable &lt;code&gt;current_time&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:22:06&lt;/span&gt;
&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:22:06&lt;/span&gt;
&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:22:06&lt;/span&gt;
&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:22:06&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No matter how many times we call the variable: anytime the variable &lt;code&gt;current_time&lt;/code&gt; is called, it will produce the &lt;em&gt;same&lt;/em&gt; value that was already evaluated previously. Expressions are evaluated &lt;strong&gt;only immediately&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#evaluating-expressions-later"&gt;
  &lt;/a&gt;
  Evaluating expressions later
&lt;/h2&gt;

&lt;p&gt;What if we wanted to evaluate an expression, &lt;em&gt;not immediately&lt;/em&gt;, but &lt;strong&gt;later&lt;/strong&gt;? Sometimes, we have the need to pass through some variable that contains an expression to be evaluated in &lt;em&gt;another context&lt;/em&gt;, not in the current one. &lt;/p&gt;

&lt;p&gt;Let's see the implementation for the &lt;code&gt;fetch_current_time&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch_current_time&lt;/span&gt;
  &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's suppose we want to store this method in some variable, but we want to send this variable to another component, class, whatever context, but &lt;em&gt;later&lt;/em&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#potential-solution"&gt;
  &lt;/a&gt;
  Potential solution
&lt;/h3&gt;

&lt;h5&gt;
  &lt;a href="#this-is-not-ruby-code-just-a-pseudo-code-for-didatic-purposes"&gt;
  &lt;/a&gt;
  This is not Ruby code, just a PSEUDO CODE for didatic purposes
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;later&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fetch_current_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we &lt;strong&gt;could&lt;/strong&gt; have the ability to call &lt;code&gt;current_time&lt;/code&gt;, producing a different result (time) everytime it is called:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;evaluate&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:22:15&lt;/span&gt;
&lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;evaluate&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:22:16&lt;/span&gt;
&lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;evaluate&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:22:17&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that, everytime time the variable is called, the expression within &lt;strong&gt;is evaluated again&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ruby-solution"&gt;
  &lt;/a&gt;
  Ruby solution
&lt;/h3&gt;

&lt;p&gt;The Ruby standard API provides a method called &lt;code&gt;method&lt;/code&gt; which takes an argument which is the method &lt;em&gt;name&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:fetch_current_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#&amp;lt;Method: main.fetch_current_time() (irb):91&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Yes, this is weird at first but it is part of the metaprogramming Ruby API. Metaprogramming in Ruby is really powerful. We should learn and use its capabilities &lt;strong&gt;consciously&lt;/strong&gt; and with moderation.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;meth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:fetch_current_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;meth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; Method&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, this is the representation of a &lt;em&gt;method&lt;/em&gt;. &lt;br&gt;
It is literally the instance of the class &lt;code&gt;Method&lt;/code&gt; (remember everything in Ruby is object? Methods included!). &lt;br&gt;
And as such, it has a method that &lt;strong&gt;transforms the method into an structure that can be evaluated later&lt;/strong&gt;. This method is called &lt;code&gt;.to_proc&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:fetch_current_time&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_proc&lt;/span&gt;

&lt;span class="c1"&gt;#&amp;lt;Proc:0x00007fca441d4ed8 (lambda)&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;it returns an instance of the class &lt;code&gt;Proc&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;the class &lt;code&gt;Proc&lt;/code&gt; is used to include expressions that will be evaluated later&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;lambda&lt;/code&gt; indicates that this proc is a &lt;em&gt;lambda&lt;/em&gt; type. Then, we can say that &lt;em&gt;method procs are lambdas&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we know that, how to use the proc to solve the problem of evaluating the &lt;code&gt;current_time&lt;/code&gt; variable many times later?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;current_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:fetch_current_time&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to_proc&lt;/span&gt;

&lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:42:00&lt;/span&gt;
&lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:42:01&lt;/span&gt;
&lt;span class="n"&gt;current_time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="c1"&gt;# produces 2021-04-10 17:42:02&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this post we learned that Ruby methods can be transformed into Procs to be evaluated later. &lt;/p&gt;

&lt;p&gt;In the upcoming series, we will keep learning the fundamentals of &lt;em&gt;Ruby blocks&lt;/em&gt; and see &lt;a href="https://dev.to/leandronsp/ruby-blocks-made-easy-part-ii-curry-and-procs-as-arguments-3c25"&gt;how to use procs as arguments to methods&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>programming</category>
      <category>softwaredevelopment</category>
    </item>
    <item>
      <title>Tools to improve as a Programmer</title>
      <author>Elijah Trillionz</author>
      <pubDate>Sat, 10 Apr 2021 22:54:09 +0000</pubDate>
      <link>https://dev.to/elijahtrillionz/tools-to-improve-as-a-programmer-a7i</link>
      <guid>https://dev.to/elijahtrillionz/tools-to-improve-as-a-programmer-a7i</guid>
      <description>&lt;p&gt;Hello Devs! I have put together some activities to improve daily as a programmer. Be you a &lt;strong&gt;web developer&lt;/strong&gt;, &lt;strong&gt;Front-End&lt;/strong&gt;, &lt;strong&gt;Back-End&lt;/strong&gt;, &lt;strong&gt;Full-Stack&lt;/strong&gt;; whatever you are into, as long as you are coding then this is for you.&lt;/p&gt;

&lt;p&gt;It's all in one &lt;a href="https://discord.gg/K5YNx85pta"&gt;&lt;strong&gt;Discord server&lt;/strong&gt;&lt;/a&gt;. This server has channels for all programmers.&lt;/p&gt;

&lt;p&gt;The primary aim of this server is to make programmers develop and improve on a daily basis.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;p&gt;• &lt;strong&gt;Coding Tasks&lt;/strong&gt;: Get access to tasks from our API as often as you want. You can also add tasks if you want.&lt;/p&gt;

&lt;p&gt;Tasks are into different categories, &lt;em&gt;beginners&lt;/em&gt;, &lt;em&gt;intermediates&lt;/em&gt;, and &lt;em&gt;experts&lt;/em&gt;.&lt;br&gt;
I have made a bot to supply you any category you need.&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Project challenging&lt;/strong&gt;: Challenge yourself or others in building projects that will improve your confidence and skills. Good thing is you can be challenged as well. I recently challenged myself to build a &lt;strong&gt;NoSQL database Clone with JavaScript Classes&lt;/strong&gt; which I have done.&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;100DaysOfCode&lt;/strong&gt;: The 100DaysOfCode is one of the best ways to stick to coding daily and realize your daily achievements.&lt;/p&gt;

&lt;p&gt;With this challenge you dedicate at least an hour of coding daily.&lt;br&gt;
I built a bot to track your progress on this challenge.&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;100DaysOfLearning&lt;/strong&gt;: Are you learning a new technology? Taking a new course? And you can't seem to be focused. Well this challenge is for you.&lt;/p&gt;

&lt;p&gt;This challenge will task you to commit at least an hour to learning on a daily basis.&lt;br&gt;
There is also a bot that tracks your progress on this challenge.&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Numerous Project Ideas&lt;/strong&gt;: You a beginner? And want to put your learning into practice with some real projects? Then this is for you.&lt;/p&gt;

&lt;p&gt;Be it mini projects like &lt;em&gt;calculator&lt;/em&gt;, &lt;em&gt;calendar&lt;/em&gt; or big projects like a &lt;em&gt;Music app&lt;/em&gt;, we've got you covered.&lt;br&gt;
I am building a bot for this function.&lt;br&gt;
When I am done with the bot, you will be able to add project ideas as well.&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Infinite Resources&lt;/strong&gt;: New technologies in town! New courses! Great Books! New Tools! In this server you get to hear it and you get to share it.&lt;/p&gt;

&lt;p&gt;• &lt;strong&gt;Projects&lt;/strong&gt;: You can share your projects for testing and feedback. For collaborations, suggestions etc.&lt;/p&gt;

&lt;p&gt;There are numerous other features and more others to come. Joining this server is completely free, no boost, no pro feature.&lt;/p&gt;

&lt;p&gt;If you want to join. &lt;a href="https://discord.gg/K5YNx85pta"&gt;Click here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>4 Books that are not about computers that made me a good Software Developer</title>
      <author>Jordi Enric</author>
      <pubDate>Sat, 10 Apr 2021 22:29:05 +0000</pubDate>
      <link>https://dev.to/jordienr/4-books-that-are-not-about-computers-that-made-me-a-good-software-developer-2hac</link>
      <guid>https://dev.to/jordienr/4-books-that-are-not-about-computers-that-made-me-a-good-software-developer-2hac</guid>
      <description>&lt;p&gt;I enjoy reading and learning about Software Development but if I spend half my day working as a Software Dev and the other half reading about Software Development I end up burning out and not doing any reading for a while.&lt;/p&gt;

&lt;p&gt;What I do is read about other things. Sometimes it happens that whatever I'm reading about helps me with aspects of my career. These are the books that helped me the most so far.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-a-mind-for-numbers-by-barbara-oakley"&gt;
  &lt;/a&gt;
  1. A mind for numbers by Barbara Oakley
&lt;/h2&gt;

&lt;p&gt;If you ever think that you're not "good with numbers" or letters or whatever, read this. It will teach you how you learn.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-so-good-they-cant-ignore-you-by-cal-newport"&gt;
  &lt;/a&gt;
  2. So good they can't ignore you by Cal Newport
&lt;/h2&gt;

&lt;p&gt;Taught me the value of becoming an expert in something and all the ways it pays off. Motivated me to focus on Frontend Development.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-the-war-of-art-by-steven-pressfield"&gt;
  &lt;/a&gt;
  3. The War of Art by Steven Pressfield
&lt;/h2&gt;

&lt;p&gt;I should read this one once a year. It taught me that the hard part is sitting down to do a job, not doing it itself. If you have procrastination problems I recommend this one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-show-your-work-by-austin-kleon"&gt;
  &lt;/a&gt;
  4. Show your work by Austin Kleon
&lt;/h2&gt;

&lt;p&gt;I learned to keep track of the work I was doing and showing it to the world no matter how imperfect it was. Thanks to doing that I got my job as a SD.&lt;/p&gt;

&lt;p&gt;If you know any other books not related directly to software development that helped you please share them :)&lt;/p&gt;

&lt;p&gt;If you liked the article you can &lt;a href="https://twitter.com/intent/user?screen_name=jordienr"&gt;follow me on twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
