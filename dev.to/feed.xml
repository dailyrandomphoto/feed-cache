<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>My 5 Favourite VS Code Themes</title>
      <author>Aya Bouchiha</author>
      <pubDate>Sat, 18 Sep 2021 19:30:53 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/my-5-favourite-vs-code-themes-26h8</link>
      <guid>https://dev.to/ayabouchiha/my-5-favourite-vs-code-themes-26h8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-best-theme"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=kohlbachjan.the-best-theme"&gt;The Best Theme&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9O6iBWP---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g430l7mwmbetmc18ne53.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9O6iBWP---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g430l7mwmbetmc18ne53.PNG" alt="thebesttheme"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dracula"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=dracula-theme.theme-dracula"&gt;Dracula&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1hT4VVtR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojdhqr9ezprn9sbl92y5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1hT4VVtR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ojdhqr9ezprn9sbl92y5.PNG" alt="dracula"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-theme"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=GitHub.github-vscode-theme"&gt;Github Theme&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I5yii4_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nn15c9zaxwqs48wn5cu1.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I5yii4_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nn15c9zaxwqs48wn5cu1.PNG" alt="githubDark"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#night-owl"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=sdras.night-owl"&gt;Night OWL&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AHOHT1zw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m47mtpzqb8br9dwaohc5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AHOHT1zw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m47mtpzqb8br9dwaohc5.PNG" alt="nightOwl"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shades-of-purple"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=ahmadawais.shades-of-purple"&gt;Shades Of Purple&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cpo968X6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ac7xa82xg70a9as78tyw.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cpo968X6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ac7xa82xg70a9as78tyw.PNG" alt="Shades Of Purple"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="//developer.aya.b@gmail.com"&gt;Aya Bouchiha&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#suggested-posts"&gt;
  &lt;/a&gt;
  Suggested Posts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/5-cool-css-properties-part-1-nkg/"&gt;part 1: (5 cool CSS cool properties)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/part-2-5-cool-css-properties-bdl"&gt;part 2: (5 cool CSS cool properties)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/57-essential-html-tags-to-know-as-a-beginnert-1f3f"&gt;57 Essential HTML Tags To Know As A Beginner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/5-html-tags-that-almost-nobody-knows-5p5"&gt;part-1: 5 HTML Tags That Almost Nobody Knows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/part-2-5-html-tags-that-almost-nobody-knows-nj8"&gt;Part-2: 5 HTML Tags That Almost Nobody Knows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a nice day!&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Simple Web Crawler Service</title>
      <author>Temitope Omotunde</author>
      <pubDate>Sat, 18 Sep 2021 18:39:33 +0000</pubDate>
      <link>https://dev.to/topeomot/simple-web-crawler-service-4anp</link>
      <guid>https://dev.to/topeomot/simple-web-crawler-service-4anp</guid>
      <description>&lt;p&gt;&lt;em&gt;This was built based on the Backend Project Idea 1 given in the article &lt;a href="https://hackernoon.com/15-project-ideas-for-front-end-back-end-and-full-stack-web-developers-j06k35pi"&gt;https://hackernoon.com/15-project-ideas-for-front-end-back-end-and-full-stack-web-developers-j06k35pi&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Find project repository at &lt;a href="https://github.com/topeomot2/simple-web-crawler-service"&gt;https://github.com/topeomot2/simple-web-crawler-service&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Simple web crawler service that takes a page URL and returns the HTML markup of that page.&lt;/li&gt;
&lt;li&gt;Only handles absolute urls.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET /?url={page absolute url}
Host: localhost:3000

Response
status: 200 OK
content-type: json
body: {
    data: "html Content"
}


GET /?url={wrong string}
Host: localhost:3000

Response
status: 400
text: 'send absolute url with protocol included'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt;
    &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#libraries-used"&gt;
  &lt;/a&gt;
  Libraries used
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#express"&gt;
  &lt;/a&gt;
  &lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Personally, my go to web framework for Node.js apis. &lt;/p&gt;

&lt;p&gt;Express actually lives up to the definition on its site. It is Fast, unopinionated, minimalist Framework for Node.js. The unopinionated and minimalist can be a blessing  or a curse, depending on what your preferences are.&lt;br&gt;
 It means you need to make decisions on what tools you want to use. Express makes no assumptions for you.&lt;br&gt;&lt;br&gt;
 But no worries, with the &lt;a href="https://expressjs.com/en/starter/generator.html"&gt;express-generator&lt;/a&gt;, spinning up a basic api is simple.&lt;/p&gt;

&lt;p&gt;The code below creates a project with express and some folder and setup opinions. The --no-view means we are  not using any view template engines.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;generator&lt;/span&gt;
    &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;view&lt;/span&gt; &lt;span class="nx"&gt;simple&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;web&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;crawler&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;service&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Find out more at &lt;a href="https://expressjs.com/en/starter/generator.html"&gt;https://expressjs.com/en/starter/generator.html&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#validator"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.npmjs.com/package/validator"&gt;Validator&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A library of string validators and sanitizers. Chose this because of the simple isURL function it has which helps us check if the url query  parameter is an absolute url with the protocol set.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Never use external inputs to your api without validation and sanitization&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; 
        &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;validator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;require_host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;require_protocol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;send absolute url with protocol included&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#axios"&gt;
  &lt;/a&gt;
  &lt;a href="https://axios-http.com/"&gt;Axios&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A very simple promise based HTTP Client. If you know how to use Promises, using  Axios will be a breeze. This does all the work of retrieving  the content of a page by making a GET request to the url.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#jest"&gt;
  &lt;/a&gt;
  &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Jest is a JavaScript Testing Framework. It works for any form of JavaScript code or anything that compiles to JavaScript i.e TypeScript. It is simple and I would recommend it anytime. It is the only testing framework I use in JavaScript.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;install as a devDependency
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;jest&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;add the  following line in the scripts section of package.json.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jest --coverage --watchAll&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;--coverage : you want jest to create a coverage report&lt;br&gt;
--watchAll means you want continuous checking of code change and rerunning  tests. (This is good for TDD, but can be removed if not desired)&lt;/p&gt;

&lt;p&gt;The test can be found in the tests/app.test.js file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#supertest"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.npmjs.com/package/supertest"&gt;Supertest&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The most important tests you can write for apis (and software in general) are integration tests. For apis, "route tests" are the integration tests. Supertest&lt;/p&gt;

&lt;p&gt;Route tests are tests that actually call endpoints in the apis and tests for the happy path and sad paths. Supertest is the package for write route test. Supertest is built on &lt;a href="https://github.com/visionmedia/superagent"&gt;superagent&lt;/a&gt;, which is  an HTTP request library. So your Express app is actually called like if a user was making a request&lt;/p&gt;

&lt;p&gt;Happy path is when you call the api correctly with all the expected parameters, you should the correct  successful response. Below is a test that checks the response for the happy path. &lt;/p&gt;

&lt;p&gt;The sad path is when you call the api incorrectly and you expect api to respond with the agreed response. &lt;/p&gt;

&lt;p&gt;But something very important to note, calling apis this way means that all dependencies will be called. Dependencies include things like Databases, 3rd party apis etc. There are 2 ways practically to handle dependencies&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Mocking: This is the process of substituting the response from 3rd dependencies so that they are not  actually  called during the test. This is the approach used here. Instead of using the crawler.js module to call the url, I used Jest to Mock the module and return a response. This makes the test faster and more predictable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Containerization: this is good for database dependent apis, instead of mocking the database, you can just spin up a container for that database, seed it (fill it with test data) and then run your test against  it. This can also be used for other infrastructural dependencies that the pai depends on.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note: You can also use Mocking for the situation described in the Containerization section. I would advise that database are encapsulated in a service/model and then you can then mock the service/model&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is the first of many project ideas, I want to get done. Most of them will be picked from project ideas, I find online. Please reach out with any advise, improvements or corrections you feel that is needed.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>api</category>
      <category>testing</category>
    </item>
    <item>
      <title>Implement dark mode in React 🌞🌕</title>
      <author>Suryaraj Bhaduri</author>
      <pubDate>Sat, 18 Sep 2021 17:59:04 +0000</pubDate>
      <link>https://dev.to/suryaraj1/implement-dark-mode-in-react-4fi8</link>
      <guid>https://dev.to/suryaraj1/implement-dark-mode-in-react-4fi8</guid>
      <description>&lt;p&gt;Who doesn't want a dark theme on their website! Not only does it help us focus better, but also keeps our eyes safer 🤓.&lt;/p&gt;

&lt;p&gt;The blog might add value if you belong to either of these situations -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Maybe you have been in a place wherein you want to implement a dark theme for your website but are struggling around the same 😵. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You are starting out with React, so this might just be another fun exercise for you to try 🎉.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Basic knowledge of React and terminologies (state, props, etc.)&lt;/li&gt;
&lt;li&gt;Basic knowledge of CSS&lt;/li&gt;
&lt;li&gt;Will to learn 🚀&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#spin-up-a-new-react-project"&gt;
  &lt;/a&gt;
  Spin up a new React Project ✨
&lt;/h2&gt;

&lt;p&gt;You could use your local development environment or maybe use a sandbox. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note📝 - If using local setup prefer cleaning up the factory code before moving further.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also, I will be using class based components for this one - &lt;em&gt;not using React Hooks&lt;/em&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-simple-page"&gt;
  &lt;/a&gt;
  Create a simple page
&lt;/h2&gt;

&lt;p&gt;In our &lt;code&gt;App()&lt;/code&gt;, just return a &lt;code&gt;div&lt;/code&gt; for the time being. (Can use a &lt;code&gt;button&lt;/code&gt; as well)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7wjMtaJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/01QinBSQ0fNs.png%3Fo%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7wjMtaJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/01QinBSQ0fNs.png%3Fo%3D1" alt="Init setup"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-state-to-our-app"&gt;
  &lt;/a&gt;
  Add state to our app
&lt;/h2&gt;

&lt;p&gt;We cannot do much with a &lt;em&gt;dumb component&lt;/em&gt; when it comes to embedding logic inside of it. So we need to add &lt;code&gt;state&lt;/code&gt; to the React component.&lt;/p&gt;

&lt;p&gt;Add a state called &lt;code&gt;isDarkThemeEnabled&lt;/code&gt; to the &lt;code&gt;App&lt;/code&gt; component and set it to &lt;code&gt;false&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4aW8OF9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/ag3pVgfVXhTE.png%3Fo%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4aW8OF9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/ag3pVgfVXhTE.png%3Fo%3D1" alt="Adding state"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-the-theme-switcher-logic"&gt;
  &lt;/a&gt;
  Creating the theme switcher logic 💡
&lt;/h2&gt;

&lt;p&gt;This is the crux of the entire problem. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How to build the theme switcher / toggler ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This might become simple, if you try to draw an analogy to a light bulb. A light bulb has two states &lt;code&gt;on&lt;/code&gt; and &lt;code&gt;off&lt;/code&gt;. &lt;br&gt;
At any given point of time it is in one of the either states.&lt;/p&gt;

&lt;p&gt;Now, imagine the theme switcher to be a bulb and try to map the idea.&lt;/p&gt;

&lt;p&gt;You got it! 🎉 If the theme switcher is imagined to be a light bulb, &lt;code&gt;light mode&lt;/code&gt; becomes &lt;code&gt;on&lt;/code&gt; and &lt;code&gt;dark mode&lt;/code&gt; becomes &lt;code&gt;off&lt;/code&gt; or vice-versa.&lt;/p&gt;

&lt;p&gt;Now, how to toggle the state ? Pretty simple, just flip the current state whenever a certain event fires.&lt;br&gt;
In simpler terms - on clicking a button change the state value from &lt;code&gt;true&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; or vice versa.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#implementing-the-theme-switcher-logic"&gt;
  &lt;/a&gt;
  Implementing the theme switcher logic
&lt;/h2&gt;

&lt;p&gt;Now, as we have designed the approach it's good time to start coding up the idea. &lt;br&gt;
FYI for changing state in React we use the &lt;code&gt;setState&lt;/code&gt; function. You can read about the &lt;code&gt;setState&lt;/code&gt; API from &lt;a href="https://reactjs.org/docs/react-component.html#setstate"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's create a &lt;code&gt;clickHandler&lt;/code&gt; and embed the state-toggler logic inside of it. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iquoRLMm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/D1Tgr6rNzzYs.png%3Fo%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iquoRLMm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/D1Tgr6rNzzYs.png%3Fo%3D1" alt="Click handler"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pass this &lt;code&gt;clickHandler&lt;/code&gt; to the &lt;code&gt;onClick&lt;/code&gt; prop of the div, to trigger the function whenever user clicks on the div.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RGmLkbfx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/JRBqnvVocHHr.png%3Fo%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RGmLkbfx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/JRBqnvVocHHr.png%3Fo%3D1" alt="clickHandler passed to prop"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#adding-svg-to-our-app"&gt;
  &lt;/a&gt;
  Adding SVG to our app
&lt;/h2&gt;

&lt;p&gt;I want to let the user know which mode he can currently switch to. Can be accomplished with text, but what better than using SVG icons to enhance the UI !🎉&lt;/p&gt;

&lt;p&gt;I will be using &lt;a href="https://heroicons.com/"&gt;heroicons&lt;/a&gt; for high quality SVG icons.&lt;/p&gt;

&lt;p&gt;Create two files in your &lt;code&gt;/src&lt;/code&gt; directory, for two SVG icons for the two states. I will be using a Moon and a Sun SVG in this case.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EzhOrfNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/5dvXgTl8N2Sb.png%3Fo%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EzhOrfNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/5dvXgTl8N2Sb.png%3Fo%3D1" alt="folder structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To use any SVG in our React app, we can directly use them in our code or import the SVG as a React Component. I prefer the latter as it helps to keep the code cleaner.&lt;/p&gt;

&lt;p&gt;This is how we import an SVG icon as a React component -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ReactComponent&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Moon&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./moon.svg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to toggle the SVG icons as well to suit our purpose. For this we will use &lt;code&gt;conditional rendering&lt;/code&gt;. &lt;br&gt;
This is a gem 💎. You can read about this &lt;a href="https://reactjs.org/docs/conditional-rendering.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The idea is, whenever &lt;code&gt;isDarkThemeEnabled&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; we need the &lt;code&gt;sun&lt;/code&gt; SVG to show up else the &lt;code&gt;moon&lt;/code&gt; SVG should show up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rU4uDxgq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/EHAchyNyzNeh.png%3Fo%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rU4uDxgq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/EHAchyNyzNeh.png%3Fo%3D1" alt="conditional render"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is how the app looks right now. You're almost there.🏁&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gcedvgiS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/YBGzbUgmiLwfZ8btYR/giphy.gif%3Fcid%3D790b76119a759f7e2e69f43d496b14312912450918b94cdf%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gcedvgiS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/YBGzbUgmiLwfZ8btYR/giphy.gif%3Fcid%3D790b76119a759f7e2e69f43d496b14312912450918b94cdf%26rid%3Dgiphy.gif%26ct%3Dg" alt="demo GIF"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-style-up-our-app"&gt;
  &lt;/a&gt;
  Let's style up our app
&lt;/h2&gt;

&lt;p&gt;When &lt;code&gt;dark mode&lt;/code&gt; is enabled we would want to paint our app background dark. So, for this we would prefer applying &lt;code&gt;classNames conditionally&lt;/code&gt;.&lt;br&gt;
You can read on this from &lt;a href="https://www.pluralsight.com/guides/applying-classes-conditionally-react"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We would be using &lt;code&gt;JSX expression&lt;/code&gt; and &lt;code&gt;Template Literals&lt;/code&gt; for this. When &lt;code&gt;isDarkThemeEnabled&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, which means &lt;code&gt;dark mode&lt;/code&gt; is enabled, we would append a &lt;code&gt;className&lt;/code&gt; to the &lt;code&gt;App&lt;/code&gt; className.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`App &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;isDarkThemeEnabled&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark-mode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now lets add some style for the &lt;code&gt;.App.dark-mode&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VY9bmj4N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/AYcZa5vYeBd1.png%3Fo%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VY9bmj4N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/AYcZa5vYeBd1.png%3Fo%3D1" alt="CSS for App"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's also style up the SVG icons 💅. Add a className of &lt;code&gt;moon&lt;/code&gt; and &lt;code&gt;sun&lt;/code&gt; to &lt;code&gt;&amp;lt;Moon /&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Sun /&amp;gt;&lt;/code&gt; components respectively.&lt;/p&gt;

&lt;p&gt;This is how the App code looks right now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ReactComponent&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Moon&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./moon.svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ReactComponent&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Sun&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./sun.svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;isDarkThemeEnabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isDarkThemeEnabled&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;isDarkThemeEnabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isDarkThemeEnabled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isDarkThemeEnabled&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`App &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;isDarkThemeEnabled&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark-mode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;toggler-btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isDarkThemeEnabled&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Sun&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sun&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Moon&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;moon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add desired styles in the &lt;code&gt;styles.css&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TaDiF8Vn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/EG3sEjQT2J30.png%3Fo%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TaDiF8Vn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gcdn.pbrd.co/images/EG3sEjQT2J30.png%3Fo%3D1" alt="styles"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;✨ Add a transition time to the wrapper class to make the color switch smoother. I added &lt;code&gt;transition: 0.3s ease&lt;/code&gt; to &lt;code&gt;.App&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is how the App looks finally!&lt;br&gt;
&lt;strong&gt;Note&lt;/strong&gt; - I have added some additional styles and animations.&lt;/p&gt;

&lt;p&gt;For a larger websites use &lt;code&gt;css variables&lt;/code&gt; to make painting UI components on theme toggle easier.&lt;/p&gt;

&lt;p&gt;Feel free to play around with the sandbox.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/competent-snowflake-d8ox5"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Congratulations!!&lt;/strong&gt; 🎉🎉 You made it till the end. If you're still here chances are you probably liked the blog. &lt;/p&gt;

&lt;p&gt;You can also make improvisations to this simple project and share them. This would help in getting the fundamentals stronger 🏋 🚀.&lt;/p&gt;

&lt;p&gt;Do let me know how you liked the blog and where I need to improve. Would be eagerly waiting for feedback!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>react</category>
      <category>css</category>
    </item>
    <item>
      <title>Event Bubbling - JavaScript Concepts Simplified</title>
      <author>Thisura Thenuka</author>
      <pubDate>Sat, 18 Sep 2021 17:30:10 +0000</pubDate>
      <link>https://dev.to/thisurathenuka/event-bubbling-javascript-concepts-simplified-8bi</link>
      <guid>https://dev.to/thisurathenuka/event-bubbling-javascript-concepts-simplified-8bi</guid>
      <description>&lt;p&gt;Hello guys, welcome to another article in the JavaScript Concepts Simplified article series. Today, we'll be looking into Event Bubbling in JavaScript.&lt;/p&gt;

&lt;p&gt;I'm just going to go through some of the basic things you need to know before going into the main event.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background-knowledge"&gt;
  &lt;/a&gt;
  Background Knowledge
&lt;/h2&gt;

&lt;p&gt;An &lt;strong&gt;event&lt;/strong&gt; is an action or an occurrence that happens in your system. The simplest example would be the user clicking on a button.&lt;/p&gt;

&lt;p&gt;For each event that is fired, we can write an &lt;strong&gt;event handler&lt;/strong&gt; (A JavaScript function to handle the event) to do what we want to do. For example, we can write an event handler function to print something on the screen once the user clicks on the button.&lt;/p&gt;

&lt;p&gt;We also have &lt;strong&gt;event listeners&lt;/strong&gt; in JavaScript. Event listeners listen to the events happening. So, if we want to print something on the screen once the user clicks on the button, we need to first create an event listener to listen for the click event of the button.&lt;/p&gt;

&lt;p&gt;When we are loading HTML pages in browsers, the browser creates a tree-like structure for each page called the &lt;strong&gt;DOM&lt;/strong&gt;. For example, if you have a button inside your &lt;em&gt;body&lt;/em&gt; tag, the path to the button element would be &lt;strong&gt;html&lt;/strong&gt; -&amp;gt; &lt;strong&gt;body&lt;/strong&gt; -&amp;gt; &lt;strong&gt;button&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#three-phases-of-event-handling"&gt;
  &lt;/a&gt;
  Three Phases of Event Handling
&lt;/h2&gt;

&lt;p&gt;When it comes to handling events, modern browsers have three phases.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Capturing Phase&lt;/li&gt;
&lt;li&gt;Target Phase&lt;/li&gt;
&lt;li&gt;Bubbling Phase&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#the-capturing-phase"&gt;
  &lt;/a&gt;
  The Capturing Phase
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The browser checks to see if the element's outer-most ancestor has an onclick event handler registered on it for the capturing phase, and runs it if so.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events"&gt;Source - MDN Docs&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-target-phase"&gt;
  &lt;/a&gt;
  The Target Phase
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The browser checks to see if the target property has an event handler for the click event registered on it, and runs it if so.&lt;/p&gt;

&lt;p&gt;Then, if &lt;strong&gt;bubbles&lt;/strong&gt; is true, it propagates the event to the direct parent of the selected element, then the next one, and so on. Otherwise, if &lt;strong&gt;bubbles&lt;/strong&gt; is false, it doesn’t propagate the event to any ancestors of the target.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events"&gt;Source - MDN Docs&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-bubbling-phase"&gt;
  &lt;/a&gt;
  The Bubbling Phase
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;The browser checks to see if the direct parent of the element selected has an onclick event handler registered on it for the bubbling phase, and runs it if so.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events"&gt;Source - MDN Docs&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wait-what"&gt;
  &lt;/a&gt;
  Wait, What?
&lt;/h2&gt;

&lt;p&gt;It is hard to grasp the issue by reading the above lines. Let me simplify. Here is the issue we are facing. &lt;/p&gt;

&lt;p&gt;Think you have created a UI with two &lt;strong&gt;div&lt;/strong&gt; blocks (Block A and Block B). Block B is placed inside Block A. And you have created event handlers for the click event of both &lt;strong&gt;div&lt;/strong&gt; tags.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WXMr1Nyl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631984146622/O4Tj89WAq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WXMr1Nyl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631984146622/O4Tj89WAq.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now when you click on &lt;strong&gt;Block B&lt;/strong&gt;, before calling B's event handler, the browser calls A's event handler function. Obviously, this is not what we expected. When we click on B, only the event handler of B should be called.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-we-fix-this"&gt;
  &lt;/a&gt;
  How do we fix this?
&lt;/h2&gt;

&lt;p&gt;Luckily, we do have a solution for this. In the &lt;strong&gt;event&lt;/strong&gt; object, we have a function called &lt;strong&gt;stopPropogation&lt;/strong&gt;. You can call this function at the start of the event handler function of B. You will see that only the event handler function of B is getting executed this time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-is-event-bubbling-useful"&gt;
  &lt;/a&gt;
  When is Event Bubbling Useful?
&lt;/h2&gt;

&lt;p&gt;There could be some use cases where this can be useful. For example, when you have a list of items and you want to do something for all of the items, you will usually have to add event listeners for all the items.&lt;/p&gt;

&lt;p&gt;But since you now know the concept of event bubbling, you can just write and assign the event handler for the parent node and see the magic happen.&lt;/p&gt;

&lt;p&gt;This concept is called &lt;strong&gt;event delegation&lt;/strong&gt;. You can read more on that in  &lt;a href="https://davidwalsh.name/event-delegate"&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you for reading the article. Hope you learned something valuable today. And most importantly, stay safe guys 😷&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The Best SvelteKit YouTube Tutorials – UPDATED</title>
      <author>kvetoslavnovak</author>
      <pubDate>Sat, 18 Sep 2021 17:29:45 +0000</pubDate>
      <link>https://dev.to/kvetoslavnovak/the-best-sveltekit-youtube-tutorials-updated-4fba</link>
      <guid>https://dev.to/kvetoslavnovak/the-best-sveltekit-youtube-tutorials-updated-4fba</guid>
      <description>&lt;p&gt;Here is my list of the best SvelteKit YouTube video tutorials (updated on 9/18/21):&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thisstephie"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=uC6y59y4V4w&amp;amp;ab_channel=this.stephie"&gt;this.stephie &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/uC6y59y4V4w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#noah-glaser"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=OTxIcU_2Qos&amp;amp;ab_channel=NoahGlaser"&gt;Noah Glaser&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/OTxIcU_2Qos"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLT9tklUafCrKillL-YGj1IundEpNEDqvC"&gt;Full Playlist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tushar-shukla"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=bkqvVkP3sK8&amp;amp;ab_channel=TusharShukla"&gt;Tushar Shukla&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/bkqvVkP3sK8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLgZ38BcfViGn2pL2J8Hd78gPblBnzX0IK"&gt;Full Playlist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#james-q-quick"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=UU7MgYIbtAk&amp;amp;t=2676s"&gt;James Q Quick&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UU7MgYIbtAk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#brayden-girard"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=P6gEnVlJPOc&amp;amp;list=PLPkJj9BR9B925L3K05PfIkDeU4sEIhj0n"&gt;Brayden Girard&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/P6gEnVlJPOc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLPkJj9BR9B925L3K05PfIkDeU4sEIhj0n"&gt;Full Playlist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#svelte-mastery"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=j4AV2Liojk0&amp;amp;t=6s&amp;amp;ab_channel=SvelteMasterySvelteMastery"&gt;Svelte Mastery &lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/j4AV2Liojk0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#webjeda"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=Gtg4yG8Bhcs&amp;amp;list=PLm_Qt4aKpfKjf77S8UD79Ockhwp_699Ms&amp;amp;index=1&amp;amp;t=137s&amp;amp;ab_channel=WebJedaWebJeda"&gt;WebJeda&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Gtg4yG8Bhcs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLm_Qt4aKpfKjf77S8UD79Ockhwp_699Ms"&gt;Full Playlist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#david-parker"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=qmwJTI-vH6w&amp;amp;list=PLPqKsyEGhUnaq0FiYab4JlcQNedSlDylq&amp;amp;index=1&amp;amp;t=148s&amp;amp;ab_channel=DavidParkerDavidParker"&gt;David Parker&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/qmwJTI-vH6w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLPqKsyEGhUnaq0FiYab4JlcQNedSlDylq"&gt;Full Playlist&lt;/a&gt;&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Why is bubble sort called 'Bubble Sort'?</title>
      <author>CallMe_Shinzo</author>
      <pubDate>Sat, 18 Sep 2021 17:03:44 +0000</pubDate>
      <link>https://dev.to/callme_shinzo/why-is-bubble-sort-called-bubble-sort-3mg5</link>
      <guid>https://dev.to/callme_shinzo/why-is-bubble-sort-called-bubble-sort-3mg5</guid>
      <description>&lt;p&gt;I have read many contents on bubble sort, but found one same reason for this name. The reason they said is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Because its easy to swap soap bubble/watter bubble, and that is what we do in bubble sort, we swap those elements which satisfy our condition.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Today I got to know a good, a real-like reason while reading a blog. The reason is :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Air bubbles that are more buoyant than surrounding water rise to the top. Similarly, list elements with greater value than their surrounding elements “bubble” to the end of the list.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thanks for reading...&lt;/p&gt;

</description>
      <category>bubblesort</category>
      <category>sort</category>
      <category>algorithms</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Laravel Dispatch Queue Job with Delay and Get Job ID</title>
      <author>Mitul Lakhani</author>
      <pubDate>Sat, 18 Sep 2021 17:01:10 +0000</pubDate>
      <link>https://dev.to/mitulmlakhani/laravel-delay-dispatch-queue-job-and-get-job-id-36ke</link>
      <guid>https://dev.to/mitulmlakhani/laravel-delay-dispatch-queue-job-and-get-job-id-36ke</guid>
      <description>&lt;p&gt;With Laravel when we dispatch Queue Job asynchronously, the job is added to the queue then we have no control over it anymore. So I find a way to take control of the job, to either remove or process jobs from the queue.&lt;/p&gt;

&lt;p&gt;Let's Start!&lt;/p&gt;

&lt;p&gt;Create a new helper for dispatch queue job and get Job ID&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (!function_exists("custom_dispatch")) {
    function custom_dispatch($job): int {
        return app(\Illuminate\Contracts\Bus\Dispatcher::class)-&amp;gt;dispatch($job);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Now let's use "custom_dispatch" helper.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a new controller to dispatch the job and handle the job.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan make:controller JobHandlerController
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now let's use our helper and implement the controller.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php
namespace  App\Http\Controllers;

use Illuminate\Support\Facades\DB;

class JobHandlerController extends  Controller
{
    public function dispatchJob(): int
    {
        // Create your job instance with delay, so we can back here within delay and take control in our hands.
        $job = new App\Jobs\YourAwesomeJob($params)-&amp;gt;delay(now()-&amp;gt;addSeconds(60);

        // Dispath your job with our custom_dispatch helper. This will return job id from jobs table
        $jobId = custom_dispatch($job);

        return $jobId;
    }

    public function processJob(int $jobId, string $action): bool
    {
        // Here deleting job from the jobs table
        if($action === "delete") {
            DB::table('jobs')-&amp;gt;whereIn('id', $args['jobIds'])-&amp;gt;delete();
        }

        // Here update available_at field with the current timestamp, So now the queue worker will process the job immediately. 
        DB::table('jobs')-&amp;gt;where('id', $jobIds)-&amp;gt;update(['available_at' =&amp;gt; time()]);

        return true;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Note: This thing is useful when the queue driver is not "sync".&lt;/p&gt;

&lt;p&gt;That's it!&lt;/p&gt;

&lt;p&gt;Hope you find it useful.&lt;/p&gt;

</description>
      <category>laravel</category>
    </item>
    <item>
      <title>How to Get Most Out of an Online Course</title>
      <author>Bhagya Mudgal</author>
      <pubDate>Sat, 18 Sep 2021 16:47:59 +0000</pubDate>
      <link>https://dev.to/bhagyamudgal/how-to-get-most-out-of-an-online-course-mm0</link>
      <guid>https://dev.to/bhagyamudgal/how-to-get-most-out-of-an-online-course-mm0</guid>
      <description>&lt;p&gt;Today if anyone wants to learn a new skill, they prefer online courses over books because they tend to learn more in less duration by consuming video content instead of going through textbooks.&lt;br&gt;
There are many courses available on the internet free as well as paid, some people prefer free over paid and vice versa, it is completely a personal choice. The end goal for taking a course is to learn something new. We put our time into it so it is important for us to know how we can get the most out of an online course. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-follow-up-with-the-instructor"&gt;
  &lt;/a&gt;
  1. Follow up with the instructor
&lt;/h3&gt;

&lt;p&gt;Let's say you are doing a course that needs implementation like a coding course, so usually, what people do they watch the course like a movie or web series and they think that they are getting all things that the instructor is explaining but after they finish the course and try to implement those things they realize that they have forgotten some concepts and in the worst case they don't remember anything. Now they blame the course that it is not good so they try a new course or go through the same course again. To overcome this issue you should always implement side by side whatever the instructor is explaining. By doing this you will understand and remember concepts better.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-focus-on-concepts-and-adapt-to-changes"&gt;
  &lt;/a&gt;
  2. Focus on concepts and adapt to changes
&lt;/h3&gt;

&lt;p&gt;Sometimes courses are not updated with the time but it does not mean that those courses are now useless. The content in that course may be better than of some new course. Let's say you want to learn react.js and now you are searching for a course to start learning and your friend is offering you a course of react.js that he purchased last year and it is not updated since then instead of saying to him that it is outdated and I will buy an updated one what you can do is to go through that course and if the instructor had used any particular package in that course that is now deprecated you can get its replacement by searching it on google. Concepts don't change over time so try to focus on concepts and adapt to changes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-always-make-your-own-notes-for-the-course"&gt;
  &lt;/a&gt;
  3. Always make your own notes for the course
&lt;/h3&gt;

&lt;p&gt;Nowadays, it is very convenient to take notes while watching courses due to the online tools like the notion, google docs, etc. So try to make your own notes using one of these tools or you can follow the old way of using pen and paper to take notes. By doing this you will be able to summarise let's say 20 hrs of content into 4-5 pages so that if in future you forgot something you can always go through the notes instead of watching the course, it will definitely save you time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-complete-the-course"&gt;
  &lt;/a&gt;
  4. Complete the course
&lt;/h3&gt;

&lt;p&gt;The most important thing is to complete the course. People tend to start the course and leave it incomplete. This happens due to a lack of consistency, when we start something we should be consistent in it and do it regularly until it gets completed. When we do something regularly it's difficult for us to miss one day because our brain tells us that we are going out of track. Make a plan to study at least 1 hour per day and keep going until the course gets completed.&lt;/p&gt;




&lt;p&gt;Thanks for reading! I hope it will help you.&lt;/p&gt;

&lt;p&gt;Feel free to connect with me on &lt;a href="https://bit.ly/3AgR0MT"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href="https://bit.ly/2YZxZRq"&gt;Instagram&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To know more about me and my projects visit my &lt;a href="https://bit.ly/3zOlSUS"&gt;Portfolio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you find this post useful and informative, you can support me and &lt;a href="https://bit.ly/3nyg52d"&gt;Buy Me A Coffee&lt;/a&gt;. Your support encourages me to write more informational and useful content in the future.&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to write fewer tests but find more bugs</title>
      <author>João Forja 💭</author>
      <pubDate>Sat, 18 Sep 2021 16:13:44 +0000</pubDate>
      <link>https://dev.to/jooforja/how-to-write-fewer-tests-but-find-more-bugs-1736</link>
      <guid>https://dev.to/jooforja/how-to-write-fewer-tests-but-find-more-bugs-1736</guid>
      <description>&lt;p&gt;&lt;q&gt;How in general should I know what to test?&lt;/q&gt;&lt;/p&gt;

&lt;p&gt;Whenever we're deciding how to test a component, the main challenge is choosing which tests to write. That's because even a simple function like &lt;code&gt;add(a: number, b: number)&lt;/code&gt; has a potentially infinite number of input values it can receive. And since we have limited time and budget we can't do them all. Thus we need to be able to choose a small number of inputs, out of all the possible inputs, that will reveal as many bugs as possible.&lt;/p&gt;

&lt;p&gt;To solve this issue, I've been using an approach that combines Input Space Partitioning and Whitebox testing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#input-space-partitioning"&gt;
  &lt;/a&gt;
  Input space partitioning
&lt;/h2&gt;

&lt;p&gt;To put it simply, the idea behind Input Space Partitioning is that by analyzing the desired outputs of a piece of code, we can group its inputs such that if the code works for an input of a group, it will also work for any input of that same group. Therefore, we only need to write one test for each group.&lt;/p&gt;

&lt;p&gt;Note that inputs include everything that affects the behavior of a component (e.g. props, user action, API response values, etc...), and outputs everything it produces (e.g. rendered elements, API requests, values persisted to storage, etc...).&lt;/p&gt;

&lt;p&gt;Take as an example a &lt;a href="https://wiki.c2.com/?FizzBuzzTest"&gt;FizzBuzz&lt;/a&gt; inspired React component. The component should allow users to type numbers. When given a number that's a multiple of 3 the component should show &lt;code&gt;Fizz&lt;/code&gt;, a number multiple of 5 should show &lt;code&gt;Buzz&lt;/code&gt;, a number multiple of 3 and 5 should show &lt;code&gt;FizzBuzz&lt;/code&gt;, and a number that's multiple of neither 3 or 5 shows the given number.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Number&lt;/th&gt;
&lt;th&gt;Renders&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Multiple of 3 and not 5&lt;/td&gt;
&lt;td&gt;"Fizz"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multiple of 5 and not 3&lt;/td&gt;
&lt;td&gt;"Buzz"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multiple of 3 and 5&lt;/td&gt;
&lt;td&gt;"FizzBuzz"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multiple of neither 3 or 5&lt;/td&gt;
&lt;td&gt;Given number&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Following the logic of Input Space Partitioning, the FizzBuzz input domain can be split into four different categories which are represented by the left column of the table above. This means that we only need to write four tests, one for each of the input categories.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whitebox-testing"&gt;
  &lt;/a&gt;
  WhiteBox testing
&lt;/h2&gt;

&lt;p&gt;You might be wondering how can we be sure, just by looking at the description of the behavior of the FizzBuzz component, that we've chosen the minimal amount of tests that will reveal as many bugs as possible. The answer is we can't. And that's why we also rely on Whitebox testing.&lt;/p&gt;

&lt;p&gt;Whitebox testing, in this context, means we'll use the knowledge of how a component is implemented to decide which tests to write. By looking at the implementation, we can have a better idea of what bugs we might have and thus allow us to choose tests more cost-effectively.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-1-implementation-matches-the-input-space-partitioning-analysis"&gt;
  &lt;/a&gt;
  Example 1 - Implementation matches the Input Space Partitioning analysis
&lt;/h3&gt;

&lt;p&gt;If the FizzBuzz code is written as follows, then for each input category, we only need to write one test assertion.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FizzBuzz&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fizzBuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FizzBuzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"fizzBuzz"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Enter a FizzBuzz number:&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"fizzBuzz"&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"fizzBuzz"&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fizzBuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The corresponding tests for this implementation would be as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="s2"&gt;`
  number  | result        | description
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;15&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FizzBuzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Multiples of 3 and 5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;  | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;     | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Multiples of 3 but not 5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;10&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;     | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Multiples of 5 but not 3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;7&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;  | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;7&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;        | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Multiples of neither 3 or 5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$description - $number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FizzBuzz&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;userEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter a FizzBuzz number:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBeVisible&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We don't need to write more than one assertion per input domain because with just one assertion we cover all the input domains we determined in the Input Space Analysis, and we cover all the relevant code branches.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-2-implementation-has-more-branches-than-input-partitions"&gt;
  &lt;/a&gt;
  Example 2 - Implementation has more branches than Input Partitions
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FizzBuzz&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fizzBuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FizzBuzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="c1"&gt;// rest as it was...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we're given an implementation like the one above, then one test assertion per input domain won't be enough, since the first two branches of the &lt;code&gt;fizzBuzz&lt;/code&gt; function won't be covered. So we'll need to adjust the test assertions so we cover everything in the &lt;code&gt;Multiples of neither 3 or 5&lt;/code&gt; partition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="s2"&gt;`
  number  | result        | description
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;15&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FizzBuzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Multiples of 3 and 5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;  | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;     | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Multiples of 3 but not 5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;10&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;     | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Multiples of 5 but not 3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;7&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;  | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;7&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;        | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Multiples of neither 3 or 5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;  | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;        | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Multiples of neither 3 or 5 - special case 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;  | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;        | &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Multiples of neither 3 or 5 - special case 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;
`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$description - $number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FizzBuzz&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;userEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter a FizzBuzz number:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBeVisible&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One might argue that those first two assertions are simple enough that they're obviously correct and thus not worth testing. That's a fair observation and one of the advantages of this way of testing is exactly that we can take the implementation into account to write fewer tests. I'd still argue that it's a good principle to have every bit of code run at least once during tests, but I wouldn't reject a PR due to this.&lt;/p&gt;

&lt;p&gt;In case you're wondering, changing &lt;code&gt;fizzBuzz&lt;/code&gt; so we only need one assertion per test is an option. So if you're ever in a situation like this, take the opportunity and try to simplify the code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-3-implementation-uses-a-productiongrade-library"&gt;
  &lt;/a&gt;
  Example 3 - Implementation uses a production-grade library
&lt;/h3&gt;

&lt;p&gt;Imagine this implementation that uses a library underneath that's been battle-tested. Which tests should we write for it?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FizzBuzz&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fizzBuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;battleTestedFizzBuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="c1"&gt;// rest as it was...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'd argue we only need one. Since the underlying library gives us confidence that the FizzBuzz logic works as expected, and the React-specific code is straightforward, just one test to see that the code runs should be enough.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Runs as expected&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FizzBuzz&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;userEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter a FizzBuzz number:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;15&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FizzBuzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBeVisible&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#example-4-really-complex-implementation"&gt;
  &lt;/a&gt;
  Example 4 - Really complex implementation
&lt;/h3&gt;

&lt;p&gt;To finish these examples, take a look at the project &lt;a href="https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition"&gt;FizzBuzzEnterpriseEdition&lt;/a&gt;. Imagine that somehow the React component communicated with a running instance of that project to know what it should show the user based on its input. What tests would you write for it?&lt;/p&gt;

&lt;p&gt;My answer is that I don't know. Aside from picking one test assertion per partition determined in the Input Space Analysis, I have no idea what other inputs to pick. &lt;strong&gt;The code is so complex that it hides the bugs it might have.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All of these examples give us an interesting insight. &lt;strong&gt;The harder the code is to understand, the more test we'll have to write to be confident it works&lt;/strong&gt;. Therefore, having a clear logic for what we're implementing is essential to enable effective testing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#put-it-into-action"&gt;
  &lt;/a&gt;
  Put it into action
&lt;/h2&gt;

&lt;p&gt;If you were not familiar with any of the ideas in this article, this can be a lot to process. So here's a summary of how you can put these ideas into practice next time you have to test a component.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start by explicitly defining the behavior of the component.&lt;/li&gt;
&lt;li&gt;Make sure that for every possible input you know what the output should be.&lt;/li&gt;
&lt;li&gt;Partition the inputs based on the characteristics of the produced outputs.&lt;/li&gt;
&lt;li&gt;Look at the implementation of the component.&lt;/li&gt;
&lt;li&gt;Verify if one test per input partition is enough or too much.&lt;/li&gt;
&lt;li&gt;Write the tests.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#would-you-like-to-see-a-more-complex-example"&gt;
  &lt;/a&gt;
  Would you like to see a more complex example?
&lt;/h2&gt;

&lt;p&gt;I wrote a follow-up article to this one where I go over a more complex component and test it using the methodology described in this article. It is available for subscribers of my newsletter. So if you'd like to see it, be sure to &lt;a href="https://joaoforja.com/blog/this-is-what-you-can-do-to-know-what-to-test-on-your-react-components/#newsletter-subscribe"&gt;subscribe here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>testing</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Image Processing in Python </title>
      <author>Enes Karataş</author>
      <pubDate>Sat, 18 Sep 2021 16:10:23 +0000</pubDate>
      <link>https://dev.to/bl4ckst0n3/image-processing-in-python-4clg</link>
      <guid>https://dev.to/bl4ckst0n3/image-processing-in-python-4clg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#start-tutorial"&gt;
  &lt;/a&gt;
  Start Tutorial
&lt;/h2&gt;

&lt;p&gt;📌&lt;br&gt;
In this post I am going to share some information about what image processing is. So, let's begin with the main methodology of image processing.&lt;br&gt;
Firstly, we are going to start with the definition of image processing. &lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;❗❗ Note that this tutorial will be published as a serie hence I recommend you to read the rest of all. &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#what-is-image-processing-"&gt;
  &lt;/a&gt;
  What is image processing ?
&lt;/h2&gt;

&lt;p&gt;✏&lt;br&gt;
&lt;strong&gt;Image processing&lt;/strong&gt; is the manipulation of images in digital environments💻 over some programming languages through some algorithms. We can analyze the images and also transform some properties like colour and dimensions. Apart of that we can categorize the image like RGB and Grayscale image. Also look &lt;a href="https://en.wikipedia.org/wiki/RGB_color_model"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alright it is time to look at how can we handle that process. At this point we are going to use python. Python is one of the best programming languages to image processing so that we will use some modules of python language.&lt;/p&gt;

&lt;p&gt;The list of modules that we will use is;&lt;br&gt;
📋&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pillow(PIL)&lt;/li&gt;
&lt;li&gt;OpenCV&lt;/li&gt;
&lt;li&gt;NumPy&lt;/li&gt;
&lt;li&gt;Sckit-Image&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that some of those modules will be used less than the others.&lt;br&gt;
Let's start the first of list above. &lt;br&gt; &lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#pilpillow"&gt;
  &lt;/a&gt;
  📍PIL(Pillow)
&lt;/h3&gt;

&lt;p&gt;➡ Pillow is one of the most popular module to basic image processing in Python. This module is used for processing the images in its different properties and also is used so commonly by data scientists. The module provides support various image formats and also includes some popular formats like JPEG, PNG. &lt;br&gt;
&lt;br&gt;&lt;br&gt;
Alright! We have done so far and let's go to usage of the modules.&lt;/p&gt;

&lt;p&gt;To use Pillow we need to install before so, we can do installation via pip:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   pip install Pillow
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   python -m pip install Pillow
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have linux system then you can also use those instructions to installation as following;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   pip3 install Pillow
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   python3 -m pip3 install Pillow
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ready to use now ! Let's go to instances of PIL.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#usage-and-instances-for-pil"&gt;
  &lt;/a&gt;
  📍Usage and Instances for PIL
&lt;/h3&gt;

&lt;p&gt;➡ Now we have Pillow module that imported to python main. It is time to write instances. In python file we firstly import several modules from PIL that we will use. The first it is going to be Image as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;   &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PIL&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Image function is imported from PIL so, we are going to use Image function by its open() module firstly. For this tutorial I have prepared linux tux image as you see below and you also are able to find source [here]. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fD2qDCpI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4hagchgp5z1b2o6rgkug.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fD2qDCpI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4hagchgp5z1b2o6rgkug.jpg" alt="tux.jpg"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;   &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tux.jpg"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Image is loaded now let's look at some properties of image. One of those properties is image &lt;strong&gt;band&lt;/strong&gt;. Every image has one or more bands. To demonstrate bands of the image we use getbands() function as following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;   &lt;span class="n"&gt;image_bands&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getbands&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_bands&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You probably will get output like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   ('R', 'G', 'B')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another property is &lt;strong&gt;mode&lt;/strong&gt;. Image has mode which defines the type and depth of a pixel in the image. To obtain the mode of image we are going to do as following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;   &lt;span class="n"&gt;image_mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt;
   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then the output will be that string "RGB" for this image. There are some modes that Pillow provides below: &lt;/p&gt;

&lt;p&gt;📋&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1&lt;/li&gt;
&lt;li&gt;L &lt;/li&gt;
&lt;li&gt;P&lt;/li&gt;
&lt;li&gt;RGB &lt;/li&gt;
&lt;li&gt;RGBA&lt;/li&gt;
&lt;li&gt;CMYK &lt;/li&gt;
&lt;li&gt;YCbCr&lt;/li&gt;
&lt;li&gt;HSV&lt;/li&gt;
&lt;li&gt;I&lt;/li&gt;
&lt;li&gt;F &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The another property is size, it can change the size of image as you see below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;   &lt;span class="n"&gt;image_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;
   &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We got this output for image that we have used.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   Output:
   (1000, 1000)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can change the size ! We do that using &lt;strong&gt;resize&lt;/strong&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;   &lt;span class="n"&gt;resized_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="n"&gt;resized_image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"new_image.jpg"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You probably are going to see a new image called like "new_image.jpg" in the same directory with your python code file.&lt;/p&gt;

&lt;p&gt;So far so good !&lt;/p&gt;

&lt;p&gt;Alright it's time to use of functions that can make more complex process on the images. We are going to use some of them in second section of this serie.&lt;/p&gt;

&lt;p&gt;The following series allows you to access the other sections.&lt;/p&gt;

</description>
      <category>python</category>
      <category>machinelearning</category>
      <category>programming</category>
    </item>
    <item>
      <title>Zombie processes in Unix</title>
      <author>Julien</author>
      <pubDate>Sat, 18 Sep 2021 15:55:09 +0000</pubDate>
      <link>https://dev.to/julienp/zombie-processes-in-unix-4i18</link>
      <guid>https://dev.to/julienp/zombie-processes-in-unix-4i18</guid>
      <description>&lt;h2&gt;
  &lt;a href="#parentchild-relationship-of-processes"&gt;
  &lt;/a&gt;
  Parent-child Relationship of Processes
&lt;/h2&gt;

&lt;p&gt;To create a new process in a Unix operating system you &lt;a href="https://man7.org/linux/man-pages/man2/fork.2.html"&gt;fork(2)&lt;/a&gt; or &lt;a href="https://man7.org/linux/man-pages/man2/clone.2.html"&gt;clone(2)&lt;/a&gt; the current process, which becomes the parent of the new child process. This parent-child relationship between processes can be traced all the way up to the root, which is the process with id 1, typically &lt;code&gt;/sbin/init&lt;/code&gt;, although on macOS this is &lt;code&gt;/bin/launchctl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can see this in the output of &lt;code&gt;ps -ax -o pid,ppid,cmd&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ps -ax -o pid,ppid,cmd
PID    PPID CMD
  1       0 /sbin/init
...
297       1 sshd: /usr/sbin/sshd -D [listener] 0 of 10-100 startups
...
615     297 sshd: julien [priv]
641     615 sshd: julien@pts/0
642     641 -bash
793     642 ps -ax -o pid,ppid,cmd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can trace the &lt;code&gt;ps&lt;/code&gt; command with process id 793 to its parent &lt;code&gt;bash&lt;/code&gt; 642, to &lt;code&gt;sshd&lt;/code&gt; 641 and so on until &lt;code&gt;init&lt;/code&gt; 1.&lt;/p&gt;

&lt;p&gt;When a process exits its resources are cleaned up by the kernel, but the process table entry is kept until the process's parent reads the termination status via the &lt;a href="https://man7.org/linux/man-pages/man2/wait.2.html"&gt;wait(2)&lt;/a&gt; system call. &lt;strong&gt;Such a process that has exited but is still present in the process table is called a zombie process&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;From the &lt;a href="https://man7.org/linux/man-pages/man3/exit.3.html"&gt;exit(3)&lt;/a&gt; man page:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[...] the child becomes a "zombie" process: most of the process resources are recycled, but a slot containing minimal information about the child process (termination status, resource usage statistics) is retained in process table. This allows the parent to subsequently use waitpid(2) (or similar) to learn the termination status of the child; at that point the zombie process slot is released.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-zombie"&gt;
  &lt;/a&gt;
  Creating a Zombie
&lt;/h2&gt;

&lt;p&gt;If we look at the running processes while the following C program runs we can see this in action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;sys/wait.h&amp;gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;pid_t&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wait_pid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"fork error"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/* Child: wait 3 seconds and then exit */&lt;/span&gt;
        &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/* Parent: wait 5 seconds before calling wait. After 3 seconds the child will become a zombie */&lt;/span&gt;
        &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;wait_pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"wait error"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="cm"&gt;/* the child is now removed from the process table */&lt;/span&gt;
        &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At first we can see the parent (5084) and child (5085) processes running, or rather sleeping as indicating by the &lt;code&gt;S&lt;/code&gt; in the &lt;code&gt;ps&lt;/code&gt; output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./zombie &amp;amp;
[1] 5084
$ ps -ax -o pid,ppid,state,cmd
   5084     642 S ./zombie
   5085    5084 S ./zombie
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the child processes exits it is still present in the process table, but now in the &lt;code&gt;Z&lt;/code&gt; state. This is also reflected its name &lt;code&gt;[zombie] &amp;lt;defunct&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ps -ax -o pid,ppid,state,cmd
   5084     642 S ./zombie
   5085    5084 Z [zombie] &amp;lt;defunct&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, after the parent processes calls wait, the child process is removed from the process table:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ps -ax -o pid,ppid,state,cmd
   5084     642 S ./zombie
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#reparenting"&gt;
  &lt;/a&gt;
  Reparenting
&lt;/h2&gt;

&lt;p&gt;If we remove the &lt;code&gt;wait&lt;/code&gt; call from the parent process and exit from the parent process before the child exits, pid 1 aka &lt;code&gt;init&lt;/code&gt; will become the new parent. &lt;code&gt;init&lt;/code&gt; always calls &lt;code&gt;wait&lt;/code&gt; when one of its children terminates. This prevents accumulating zombie processes.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>programming</category>
      <category>posix</category>
      <category>systems</category>
    </item>
    <item>
      <title>What's new in PreviewDevice 0.8.0</title>
      <author>Anton Paliakou</author>
      <pubDate>Sat, 18 Sep 2021 15:32:12 +0000</pubDate>
      <link>https://dev.to/toni777772/what-s-new-in-previewdevice-0-8-0-5dc0</link>
      <guid>https://dev.to/toni777772/what-s-new-in-previewdevice-0-8-0-5dc0</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/Toni77777/PreviewDevice"&gt;PreviewDevice&lt;/a&gt; is a library with type-safe syntax sugar for preview device on SwiftUI. &lt;br&gt;
If you don't know what is the library, I recomment read this &lt;a href="https://tonidevblog.com/posts/meet-previewdevice/"&gt;article&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#whats-new-in-080-gogogo"&gt;
  &lt;/a&gt;
  What's new in 0.8.0? Go-go-go
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#added-support-new-apple-devices"&gt;
  &lt;/a&gt;
  Added support new Apple devices:
&lt;/h3&gt;

&lt;p&gt;iPhones: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iPhone 13 mini (&lt;code&gt;Device.iphone13Mini&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;iPhone 13 (&lt;code&gt;Device.iphone13&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;iPhone 13 Pro (&lt;code&gt;Device.iphone13Pro&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;iPhone 13 Pro Max (&lt;code&gt;Device.iphone13ProMax&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apple Watch:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apple Watch Series 7 - 41mm (&lt;code&gt;Device.watchSeries7_41mm&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Apple Watch Series 7 - 45mm (&lt;code&gt;Device.watchSeries7_45mm&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;iPads:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iPad 9th generation (&lt;code&gt;Device.ipad_9Gen&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;iPad mini 6th generation (&lt;code&gt;Device.ipadMini6&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#preview-on-device-with-orientation-and-color-schemes"&gt;
  &lt;/a&gt;
  Preview on device with orientation and color schemes.
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Available iOS 15+ OSX 12+,  macCatalyst 15+, tvOS 15+, watchOS 8.0+&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView_Previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PreviewProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;device&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iphone13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="nv"&gt;orientation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portrait&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="nv"&gt;colorSchemes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do you like the library? Click the star on &lt;a href="https://github.com/Toni77777/PreviewDevice"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading! See you soon. 👋&lt;/p&gt;

</description>
      <category>ios</category>
      <category>swift</category>
      <category>swiftui</category>
      <category>preview</category>
    </item>
  </channel>
</rss>
