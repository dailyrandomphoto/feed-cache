<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Benefits Of Using Pipe Over Function In Angular</title>
      <author>Jameer Khan</author>
      <pubDate>Sun, 31 Oct 2021 09:24:13 +0000</pubDate>
      <link>https://dev.to/stackblogger/benefits-of-using-pipe-over-function-in-angular-2mgj</link>
      <guid>https://dev.to/stackblogger/benefits-of-using-pipe-over-function-in-angular-2mgj</guid>
      <description>&lt;p&gt;The article is originally published at my blog here: &lt;a href="https://stackblogger.com/benefits-of-pipe-over-function-in-angular/"&gt;Benefits Of Using Pipe Over Function In Angular&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you use functions / methods to implement various conditions and DOM manipulations in Angular ? If yes, trust me it will worsen your website performance. In this tutorial I will explain how pipes increase your angular website performance and what are the various benefits of using Pipe over Functions based on a case study.&lt;/p&gt;

&lt;p&gt;Before diving straight into tutorial, let’s start with some basic questions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#angular-pipe"&gt;
  &lt;/a&gt;
  Angular Pipe
&lt;/h2&gt;

&lt;p&gt;The first question comes in mind- What is Pipe? A simple definition of pipe- it is a decorative function in Angular used to manipulate DOM. It takes an untransformed value as input and returns a transformed value as output.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#types-of-pipe"&gt;
  &lt;/a&gt;
  Types of Pipe
&lt;/h3&gt;

&lt;p&gt;Various built-in pipes are provided by Angular- &lt;em&gt;AsyncPipe, CurrencyPipe, DatePipe, JsonPipe and many more. Complete list &lt;a href="https://angular.io/api?type=pipe"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-pipe-in-code"&gt;
  &lt;/a&gt;
  How to use pipe in code?
&lt;/h2&gt;

&lt;p&gt;This could be a common question for beginners- how can I use a pipe? Check the code below.&lt;/p&gt;

&lt;p&gt;The example code below demonstrates the use of &lt;code&gt;date pipe&lt;/code&gt;. See how the output is manipulated on the DOM.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app.component.ts&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;app.component.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;Date Pipe Example: &lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;{{ date | date: 'shortDate'}}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result with &lt;code&gt;Date Pipe&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uXEOQ-uP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stackblogger.com/wp-content/uploads/2021/10/angular-date-pipe-output-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uXEOQ-uP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stackblogger.com/wp-content/uploads/2021/10/angular-date-pipe-output-min.png" alt="Output Date after using Date Pipe" width="572" height="80"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Result without &lt;code&gt;Date Pipe&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QPDH0W6P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stackblogger.com/wp-content/uploads/2021/10/angular-date-output-without-date-pipe-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QPDH0W6P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stackblogger.com/wp-content/uploads/2021/10/angular-date-output-without-date-pipe-min.png" alt="Output Date without using Date Pipe" width="673" height="80"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pure-and-impure-pipe"&gt;
  &lt;/a&gt;
  Pure and Impure Pipe
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Pure pipe&lt;/strong&gt; is a type of function which runs only when a change has been done in the input value. They are called as pure because they do not run every time a state is changed or a change detection happened. They are only called when a value is changed. This improves the performance (see below case study).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Pipe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PipeTransform&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Pipe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;customUpper&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CustomUpperPipe&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;PipeTransform&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Custom pipe is called&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Impure pipe&lt;/strong&gt; is a type of function which runs for every Angular lifecycle events as well as whenever state or input value changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Pipe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;customUpper&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;pure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;  &lt;span class="c1"&gt;// &amp;lt;--- this will convert a pure pipe to impure one&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;It is not advisable to use a method to manipulate your DOM. Use pipes instead of methods if you have a big application and want to improve performance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-using-pipe-over-function"&gt;
  &lt;/a&gt;
  Benefits of using Pipe over Function
&lt;/h2&gt;

&lt;p&gt;Let’s take an example of doing same thing once with method and once with pipe.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uppercase-using-pipe"&gt;
  &lt;/a&gt;
  Uppercase using pipe
&lt;/h2&gt;

&lt;p&gt;In this case study we will take an example of converting string to uppercase using a pure pipe. And we will see the output.&lt;/p&gt;

&lt;p&gt;Create a server side data table with &lt;a href="https://fakestoreapi.com/products"&gt;fake JSON api&lt;/a&gt; to demonstrate it better.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-create-a-data-table-with-fake-api-response"&gt;
  &lt;/a&gt;
  1. Create a data table with fake api response
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;app.component.ts&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;HttpClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/common/http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://fakestoreapi.com/products&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;templateUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.component.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;styleUrls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.component.scss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AppService&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;appService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AppService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;app.component.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Title&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Category&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Description&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;tr&lt;/span&gt; &lt;span class="na"&gt;*ngFor=&lt;/span&gt;&lt;span class="s"&gt;"let item of data"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{item.title}}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{item.category}}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{item.description}}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-create-a-custom-pipe-raw-customupper-endraw-"&gt;
  &lt;/a&gt;
  2. Create a custom pipe &lt;code&gt;custom-upper&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng g p custom-upper
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0gk5SGgI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stackblogger.com/wp-content/uploads/2021/10/create-custom-pipe-in-angular-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0gk5SGgI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://stackblogger.com/wp-content/uploads/2021/10/create-custom-pipe-in-angular-min.png" alt="Custom Pipe output" width="635" height="191"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Put the code to convert string to uppercase in the created pipe.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Pipe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PipeTransform&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Pipe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;customUpper&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CustomUpperPipe&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;PipeTransform&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Custom pipe is called&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// console.log will let us know how many times it's called&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-consume-the-custom-pipe-in-template"&gt;
  &lt;/a&gt;
  3. Consume the custom pipe in template
&lt;/h3&gt;

&lt;p&gt;Call the &lt;code&gt;customUpper&lt;/code&gt; in the template code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{item.category | customUpper}}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-check-the-output"&gt;
  &lt;/a&gt;
  4. Check the output
&lt;/h3&gt;

&lt;p&gt;Run the app and open Browser Console to check the output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NROR_BEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://stackblogger.com/wp-content/uploads/2021/10/uppercase-with-angular-pure-pipe.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NROR_BEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://stackblogger.com/wp-content/uploads/2021/10/uppercase-with-angular-pure-pipe.gif" alt="Uppercase using angular pipe" width="880" height="386"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice in the screen above that the console is printed 20 times. Its because the api gives 20 results and it ran once for each row which is fine. &lt;/p&gt;

&lt;p&gt;Now check the same example without using a pure pipe.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uppercase-using-method"&gt;
  &lt;/a&gt;
  Uppercase using method
&lt;/h2&gt;

&lt;p&gt;In the above case study we already seen the output of converting string to uppercase using a pipe. In this case study we will take the sample example ie. convert string to uppercase but using a method at component. And we will see the output.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-convert-to-uppercase-using-a-method"&gt;
  &lt;/a&gt;
  1. Convert to uppercase using a method
&lt;/h3&gt;

&lt;p&gt;Create a method &lt;code&gt;convertToUpperCase&lt;/code&gt; in component to convert text to upper case. Put a &lt;code&gt;console.log&lt;/code&gt; in the function to know how many times it is called from UI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;convertToUpperCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Uppercase fn is called&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// put a console to know how many times the function is called&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-consume-the-custom-uppercase-method-in-template"&gt;
  &lt;/a&gt;
  2. Consume the custom uppercase method in template
&lt;/h3&gt;

&lt;p&gt;Call the method from template.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;{{convertToUpperCase(item.category)}}&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check the output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1LYgVKbc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://stackblogger.com/wp-content/uploads/2021/10/uppercase-in-angular-using-a-method.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1LYgVKbc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://stackblogger.com/wp-content/uploads/2021/10/uppercase-in-angular-using-a-method.gif" alt="Uppercase in Angular using a method at component" width="880" height="386"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice the output in console. You will see it’s called 4 times more than what was called in pipe. This will make a huge difference if you are building a large Angular application that has complex layouts and binding.&lt;/p&gt;

&lt;p&gt;The article is originally published at my blog here: &lt;a href="https://stackblogger.com/benefits-of-pipe-over-function-in-angular/"&gt;Benefits Of Using Pipe Over Function In Angular&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article we learnt about the benefits of using Pipe over Function in Angular. They make a huge difference in the performance.&lt;/p&gt;

&lt;p&gt;Check this article to optimize your Angular application: &lt;a href="https://stackblogger.com/5-best-ways-to-optimize-angular-for-scaling/"&gt;5 Best Ways To Optimize Angular For Scaling&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Must Read Articles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackblogger.com/5-best-google-charts-for-angular/"&gt;5 Best Google Charts to Use in Angular (2021)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackblogger.com/angular-material-data-table-tutorial/"&gt;Angular Material 12 Table, Sorting, Searching &amp;amp; Pagination&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackblogger.com/rxjs-forkjoin-definition-and-real-world-uses/"&gt;RxJS forkJoin: Definition and Real World Uses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackblogger.com/5-great-seo-ideas-to-improve-angular-website-ranking/"&gt;5 Great SEO Ideas To Improve Angular Website Ranking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackblogger.com/real-world-examples-of-some-common-observable-operators/"&gt;Real World Examples of 5 Common Observable Operators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
      <category>angularpipe</category>
      <category>stackblogger</category>
    </item>
    <item>
      <title>It's 🎃🦇 HTMLoween 🦇🎃 - HTML, JS and CSS to make your blood boil! 😱</title>
      <author>InHuOfficial</author>
      <pubDate>Sun, 31 Oct 2021 09:15:16 +0000</pubDate>
      <link>https://dev.to/inhuofficial/its-htmloween-scary-html-js-and-css-2ncj</link>
      <guid>https://dev.to/inhuofficial/its-htmloween-scary-html-js-and-css-2ncj</guid>
      <description>&lt;p&gt;Muuwwwaaahhhhhhahaha it's Spooky time. So here is a fun post full of Goolish code (that will make you scream!) and some pumpkins I carved with friends, just because I wanted to share them with you and didn't want to write a separate post for them! &lt;/p&gt;

&lt;p&gt;I hope you have a spooky fun day and this horrible code doesn't haunt you for too long!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#html-horrors"&gt;HTML Horrors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#javacrypt"&gt;JavaCrypt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#csscooby-doo"&gt;CSScooby doo&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;&lt;a href="#some-pumpkin-carvings-to-cheer-you-up"&gt;Some pumpkin carvings to cheer you up!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#html-horrors"&gt;
  &lt;/a&gt;
  HTML Horrors
&lt;/h2&gt;

&lt;p&gt;I wish I could say you will only come across these once a year at Halloween but these horrors lurk all year around!&lt;/p&gt;

&lt;p&gt;Not suitable for people under the age of 18, rated R (for Rubbish!)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apparently-there-are-more-than-7-levels-of-hell"&gt;
  &lt;/a&gt;
  Apparently there are more than 7 levels of hell
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"../../../../../../../../../../../../../../../../../../../../../../../../assets/logo.bmp"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#a-devilish-divider"&gt;
  &lt;/a&gt;
  A devilish divider
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;center&amp;gt;&lt;/span&gt;-------------------------------------------&lt;span class="nt"&gt;&amp;lt;/center&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#a-classic-scare"&gt;
  &lt;/a&gt;
  A *Class*ic Scare!
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hover:bg-light-blue-200
  hover:text-light-blue-800 
  group 
  flex 
  items-center 
  rounded-md 
  bg-light-blue-100 
  text-light-blue-600 
  text-sm 
  font-medium 
  px-4 
  py-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Hi
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Sorry, I had to have my normal dig!&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tonight-we-dine-in-hell-at-the-table-of-tears"&gt;
  &lt;/a&gt;
  Tonight, we dine in hell (at the table of tears)!
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;tr&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"row-wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;tr&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"body_row"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"body_left"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
             &lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"nav"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="nt"&gt;&amp;lt;tr&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"home.html"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"nav()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;    
               &lt;span class="nt"&gt;&amp;lt;tr&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"about.html"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"nav()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;  
               &lt;span class="nt"&gt;&amp;lt;tr&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"contact.html"&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"nav()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Contact&lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;  
             &lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"body_main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"body_aside"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#javacrypt"&gt;
  &lt;/a&gt;
  JavaCrypt
&lt;/h2&gt;

&lt;p&gt;Oh you thought the HTML was bad, wait until you see these JavaScript atrocities! &lt;/p&gt;

&lt;p&gt;People with a weak heart should turn away now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#there-is-no-god"&gt;
  &lt;/a&gt;
  There is no GOD
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allowed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;6&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;7&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;9&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;e&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;f&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;h&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;i&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;j&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;k&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;l&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;m&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;n&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;q&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;r&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;s&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;t&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;u&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;v&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;w&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;y&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;z&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isValidInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;allowed&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#and-the-truth-shall-set-you-free"&gt;
  &lt;/a&gt;
  And the truth, shall set you free!
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;helpers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="nx"&gt;helpers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;returnTrue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#can-i-help-or-are-you-just-browsing"&gt;
  &lt;/a&gt;
  Can I help or are you just browsing?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Browser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isIPad&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;iPad&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isDDGIgnore&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ignore&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/seamonkey/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SeaMonkey&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/iceape/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Iceape&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/palemoon/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PaleMoon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFirefox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Firefox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAndroid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Android&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/xbox/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;xBox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/midori/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Midori&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/opr/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Opera&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/maxthon/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Maxthon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isYandex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Yandex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/vivaldi/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Vivaldi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isChrome&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Chrome&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/fennec/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fennec&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/epiphany/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Epiphany&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/uzbl/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Uzbl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isEdge&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Edge&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;                                                                             
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                                                                                 
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isIE&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;platform&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Win64&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;Modernizr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;touch&lt;/span&gt; 
      &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientWidth&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                                                                                       
    &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;IEMetro&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isIE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;IE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isOpera&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Opera&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isIPhone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;iPhone&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/arora/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Arora&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isSafari&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Safari&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isKonqueror&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Konqueror&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isBlackberry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Blackberry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/phantomjs/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PhantomJS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isIDevice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;iOS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}}}}}}}}}}}}}}}}}}}}}}}}}}}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#csscooby-doo"&gt;
  &lt;/a&gt;
  CSScooby Doo!
&lt;/h2&gt;

&lt;p&gt;If people understood that the "C" in CSS meant "Cascading", we probably wouldn't have to deal with so much crappy CSS.&lt;/p&gt;

&lt;p&gt;But I am not here to fix the world today, instead let's just marvel at some pretty horrible CSS ideas!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#an-evil-editor"&gt;
  &lt;/a&gt;
  An Evil Editor!
&lt;/h3&gt;

&lt;p&gt;OK so this one...might actually be useful? It feels so very wrong though! A live CSS editor with 0 JS? Only on halloween!&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/Lj748u3c//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jitter-bug"&gt;
  &lt;/a&gt;
  Jitter Bug!
&lt;/h3&gt;

&lt;p&gt;Add this to any page and prepare for a world of pain!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;99%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#some-pumpkin-carvings-to-cheer-you-up"&gt;
  &lt;/a&gt;
  Some pumpkin carvings to cheer you up!
&lt;/h2&gt;

&lt;p&gt;As I have probably just scarred you for life, here are some pumpkins my friends and I carved last night, hopefully they take away some of the pain! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wy_ORpw2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/undcrbzlm9nv2s4vwv96.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wy_ORpw2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/undcrbzlm9nv2s4vwv96.jpeg" alt="carved pumpkins of: stitch from lilo and stitch, scary old lady, one eyed willy from Goonies" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ct-pbs6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gbx0h38tqnqrzo9qg867.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ct-pbs6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gbx0h38tqnqrzo9qg867.jpeg" alt="carved pumpkin of One Eyed Willy from the Goonies" width="880" height="1173"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0MuiY7fv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ynu5ceu8k0hkxa0o94j8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0MuiY7fv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ynu5ceu8k0hkxa0o94j8.jpeg" alt="carved pumpkin of Rocket (the racoon) from Guardians of the Galaxy" width="880" height="1173"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IzlEUj7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ma275pnkm3v8rwr6tc2s.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IzlEUj7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ma275pnkm3v8rwr6tc2s.jpeg" alt="carved pumpkin of Venom (as in Spiderman character)" width="880" height="1173"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;


&lt;center&gt;&lt;h2&gt;Happy Halloween!&lt;/h2&gt;&lt;/center&gt;
&lt;br&gt;
&lt;center&gt;Share your Halloween pics in the comments!&lt;/center&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;




</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Hawk Open Source Project</title>
      <author>Paulo Medeiros</author>
      <pubDate>Sun, 31 Oct 2021 08:55:30 +0000</pubDate>
      <link>https://dev.to/medpaf/hawk-open-source-project-4igc</link>
      <guid>https://dev.to/medpaf/hawk-open-source-project-4igc</guid>
      <description>&lt;p&gt;Hawk is a network and pentest utility that I developed so that I could perform different kinds of task using the same suite, instead of jumping from one tool to another.&lt;br&gt;
Currently, this script can perform a good variety of tasks such as: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ifconfig, &lt;/li&gt;
&lt;li&gt;ping, &lt;/li&gt;
&lt;li&gt;traceroute, &lt;/li&gt;
&lt;li&gt;port scans (including SYN, TCP, UDP, ACK, comprehensive scan), 
host discovery (scan for up devices on a local network), &lt;/li&gt;
&lt;li&gt;MAC address detection (get MAC address of a host IP on a local network), &lt;/li&gt;
&lt;li&gt;banner grabbing, &lt;/li&gt;
&lt;li&gt;DNS checks (with geolocation information), &lt;/li&gt;
&lt;li&gt;WHOIS, &lt;/li&gt;
&lt;li&gt;subdomain enumeration, &lt;/li&gt;
&lt;li&gt;vulnerability reconnaissance, - &lt;/li&gt;
&lt;li&gt;packet sniffing, &lt;/li&gt;
&lt;li&gt;MAC spoofing, &lt;/li&gt;
&lt;li&gt;IP spoofing, &lt;/li&gt;
&lt;li&gt;SYN flooding, &lt;/li&gt;
&lt;li&gt;deauth attack, &lt;/li&gt;
&lt;li&gt;brute-force attack (beta).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other features are still being implemented. Future implementations may include WAF detection, DNS enumeration, traffic analysis, XSS vulnerability scanner, ARP cache poisoning, DNS cache poisoning, MAC flooding, ping of death, network disassociation attack (not deauth attack), OSINT, exploits, some automated tasks and others.&lt;br&gt;
If you want to become a contributor, make a pull request or issue.&lt;br&gt;
Waiting for your feedback. Kudos&lt;br&gt;
Link to the repository: &lt;br&gt;
&lt;a href="https://github.com/medpaf/hawk"&gt;https://github.com/medpaf/hawk&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>python</category>
      <category>opensource</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Contributors needed (Pentest/networking project)</title>
      <author>Paulo Medeiros</author>
      <pubDate>Sun, 31 Oct 2021 08:53:21 +0000</pubDate>
      <link>https://dev.to/medpaf/contributors-needed-pentestnetworking-project-33f1</link>
      <guid>https://dev.to/medpaf/contributors-needed-pentestnetworking-project-33f1</guid>
      <description>&lt;p&gt;Hawk is a network and pentest utility that I developed so that I could perform different kinds of task using the same suite, instead of jumping from one tool to another.&lt;br&gt;
Currently, this script can perform a good variety of tasks such as: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ifconfig, &lt;/li&gt;
&lt;li&gt;ping, &lt;/li&gt;
&lt;li&gt;traceroute, &lt;/li&gt;
&lt;li&gt;port scans (including SYN, TCP, UDP, ACK, comprehensive scan), 
host discovery (scan for up devices on a local network), &lt;/li&gt;
&lt;li&gt;MAC address detection (get MAC address of a host IP on a local network), &lt;/li&gt;
&lt;li&gt;banner grabbing, &lt;/li&gt;
&lt;li&gt;DNS checks (with geolocation information), &lt;/li&gt;
&lt;li&gt;WHOIS, &lt;/li&gt;
&lt;li&gt;subdomain enumeration, &lt;/li&gt;
&lt;li&gt;vulnerability reconnaissance, - &lt;/li&gt;
&lt;li&gt;packet sniffing, &lt;/li&gt;
&lt;li&gt;MAC spoofing, &lt;/li&gt;
&lt;li&gt;IP spoofing, &lt;/li&gt;
&lt;li&gt;SYN flooding, &lt;/li&gt;
&lt;li&gt;deauth attack, &lt;/li&gt;
&lt;li&gt;brute-force attack (beta).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other features are still being implemented. Future implementations may include WAF detection, DNS enumeration, traffic analysis, XSS vulnerability scanner, ARP cache poisoning, DNS cache poisoning, MAC flooding, ping of death, network disassociation attack (not deauth attack), OSINT, exploits, some automated tasks and others.&lt;br&gt;
If you want to become a contributor, make a pull request or issue.&lt;br&gt;
Waiting for your feedback. Kudos&lt;br&gt;
Link to the repository: &lt;br&gt;
&lt;a href="https://github.com/medpaf/hawk"&gt;https://github.com/medpaf/hawk&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>python</category>
      <category>cybersecurity</category>
      <category>showdev</category>
    </item>
    <item>
      <title>The Secrets behind highly effective programmers</title>
      <author>Abdullah Alhariri</author>
      <pubDate>Sun, 31 Oct 2021 08:45:53 +0000</pubDate>
      <link>https://dev.to/abdullah_alhariri/secrets-about-highly-effective-programmers-46ld</link>
      <guid>https://dev.to/abdullah_alhariri/secrets-about-highly-effective-programmers-46ld</guid>
      <description>&lt;p&gt;Being a programmer requires much more than the simple act of sitting at a computer looking for solutions through Stack Overflow. To be a programmer, you need a set of skills that allows you to reach these solutions in an abstract way and use the specific knowledge of programming languages to make them come true. We are problem solvers. But is this really all it takes to be a good programmer? Not necessarily.&lt;/p&gt;

&lt;p&gt;Take care of your own system&lt;br&gt;
Everything you see every day is part of a system, from the leaf of a tree to the ant that eats it. All these individual systems inhabit and interact with each other directly or indirectly. Your body is a system that works towards the goal of keeping you alive, but if your system starts to fail, everything else does too.&lt;/p&gt;

&lt;p&gt;As a programmer, I know that we spend most of our work time sitting in front of a desk with at least one screen pointed at us. Additionally, I also know that when we are working we focus so much on our task or on meeting a set goal that we forget to give our mind and body a break. Why do I mention this? Because our average screen time is 7 hours a day and this is not the problem. The problem is what this entails: it is 7 hours of sitting in the same position, 7 hours of concentrating, 7 hours that represent approximately 30% of the entire day.&lt;/p&gt;

&lt;p&gt;In order to solve this problem, you can follow the next suggestions:&lt;/p&gt;

&lt;p&gt;For every hour of work:&lt;br&gt;
Take 5 minutes of rest, and if you can’t take those 5 minutes, save them for the next work hour and take the accumulated time (in this case, 10 minutes). Never accumulate more than 10 minutes of rest; you will be procrastinating by the end of the day and you will not see the advantages of taking a break if you save 7 hours of work to rest for 35 minutes at the end of the day.&lt;br&gt;
When you take your 5 or 10 minutes of rest:&lt;br&gt;
If it is easy for you, make sure to go out and get some sun. If that’s not possible, stay where you are and find a calm place.&lt;br&gt;
Breathe. This sounds obvious but it is very important. Take a 1-minute deep breathing session. It’s not hard.&lt;br&gt;
Clear your mind. Do another thing unrelated to what you are currently working on. Watch a video, listen to a song, play a short video game match, whatever. But don’t think of work during your rest time.&lt;br&gt;
Do some exercise or stretching. You can find a lot of those on the internet and make a daily routine.&lt;br&gt;
Make sure to drink water or any other liquid to stay healthy and hydrated.&lt;br&gt;
The point here is that you have to take care of your well-being. If you have a healthy body and mind, you will be able to carry out your tasks without feeling tired or overwhelmed by day-to-day problems and be a more effective programmer.&lt;/p&gt;

&lt;p&gt;Be more receptive and less defensive&lt;br&gt;
As programmers, we tend to be a bit jealous of our code and how we develop it. So it can be harsh when some of our colleagues tell us that our code is wrong or that it can be optimized in a different way than what we have. As a result, we begin to adopt a defensive attitude rather than a receptive one.&lt;/p&gt;

&lt;p&gt;In my previous job, I was a kind of technical leader in the area I was driving, so everything I knew, in theory, was fine and there was no one to tell me otherwise. I was always proud of my code because I was pretty sure it was perfect or near perfect. All this changed when I joined FullStackLabs. The first thing they gave me was a document that said that team members review code before being merged. At first, I was intimidated by this fact, but I considered myself a good coder so I did not give it much importance. What a mistake.&lt;/p&gt;

&lt;p&gt;When I began submitting my code for review, several times it would come back with simple errors: a comma here, an arrow function there. At first, I just took care of implementing the changes without asking anything and I felt attacked until one day I decided to ask what was the difference between my code and what they asked me to correct. The result was a small talk on optimization and standardization that allowed me to understand what I was doing wrong. I felt ashamed but at the same time very happy because I had learned something new. I was starting to play in a new league.&lt;/p&gt;

&lt;p&gt;So my second tip to be a more effective programmer is, take a receptive attitude instead of a defensive one. If you give yourself the task of seeing the world in the eyes of different people, you can grow with the help of their knowledge, never take for granted that you know everything, defend your ideas and solutions but also listen to the solutions of others. In programming, for the same problem, there are infinite solutions.&lt;/p&gt;

&lt;p&gt;Know when to ask for help&lt;br&gt;
When we are working on a specific problem that does not allow us to move forward, we tend to think about it a lot while we find a solution without realizing it makes us less effective programmers.&lt;/p&gt;

&lt;p&gt;Instead of being focused on a small problem for a long time (more than 1 hour), it is best to ask your coworkers for help. This will increase your knowledge in a more effective way and additionally increase your communication skills. Now, our co-workers won’t always be available to us, or perhaps we are the only ones working on a certain technology. In cases like these, it is best to stop working on the problem and divert your attention to another feature that has the same priority and resume the task later. Our brain will continue to work in the background and we can return to the problem from a different perspective.&lt;/p&gt;

&lt;p&gt;Don't show off&lt;br&gt;
Throughout my career, I have come across different types of code, some very impressive and difficult to understand due to their complexity, some simple and very easy to understand. But also many that are simple to begin with and for some reason became complex with no need other than to satisfy a programmer's ego.&lt;/p&gt;

&lt;p&gt;I think this is one of the elements that make a programmer very ineffective and additionally harms others around him. For some reason, every time I come across this type of excessively complex code, it is related to an individual who feels he has something to prove by his status or seniority when all he is doing is writing code that could be very simple and for some reason is turned into spaghetti that only he understands and can explain.&lt;/p&gt;

&lt;p&gt;My advice here is: keep the code simple and consistent. If the character described above leaves the company and a new developer enters to add/maintain the code, it will be much more difficult than if the code had been kept simple from the beginning. As my algorithms and discrete mathematics teacher once said, "Elegance is in simplicity because everyone can understand what you want to communicate".&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>October 2021 Updates for Developers | Video SDK</title>
      <author>Sagar Kava</author>
      <pubDate>Sun, 31 Oct 2021 08:36:02 +0000</pubDate>
      <link>https://dev.to/videosdk/october-2021-updates-for-developers-video-sdk-4mo2</link>
      <guid>https://dev.to/videosdk/october-2021-updates-for-developers-video-sdk-4mo2</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ahKHtNz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://blog.videosdk.live/content/images/2021/10/October-updates-1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ahKHtNz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://blog.videosdk.live/content/images/2021/10/October-updates-1.jpg" alt="October 2021 Updates for Developers 🚀" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;NEW! This is the October 2021 release announcement. Here is a list of all new enhancements and product updates on &lt;a href="https://videosdk.live/"&gt;videosdk.live&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#user-dashboard"&gt;
  &lt;/a&gt;
  User dashboard
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://app.videosdk.live/live-streams/all-live-streams"&gt;List all live streams&lt;/a&gt;&lt;/strong&gt; and get live stream details for standard live streaming.&lt;/li&gt;
&lt;li&gt;Now &lt;strong&gt;filter usage&lt;/strong&gt; in the dashboard by date range.&lt;/li&gt;
&lt;li&gt;And other minor bug fixes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#rtc-javascript-prebuilt-v0115"&gt;
  &lt;/a&gt;
  RTC Javascript prebuilt v0.1.15
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Pin participants are&lt;/strong&gt; now available with 3 different layout options.&lt;/li&gt;
&lt;li&gt;Layout ( &lt;strong&gt;&lt;a href="https://docs.videosdk.live/docs/guide/prebuilt-video-and-audio-calling/features/pin-participants#1-grid-layout"&gt;GRID&lt;/a&gt; | &lt;a href="https://docs.videosdk.live/docs/guide/prebuilt-video-and-audio-calling/features/pin-participants#2-sidebar-layout"&gt;SIDEBAR&lt;/a&gt; | &lt;a href="https://docs.videosdk.live/docs/guide/prebuilt-video-and-audio-calling/features/pin-participants#3-spotlight-layout"&gt;SPOTLIGHT&lt;/a&gt;&lt;/strong&gt; )&lt;/li&gt;
&lt;li&gt;Disabled uppercase of branding title.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#javascript-sdk-v0016"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Javascript SDK v0.0.16&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pin participants are now available with 3 different &lt;a href="https://docs.videosdk.live/docs/guide/video-and-audio-calling-api-sdk/features/pin-participants"&gt;layout options.&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#react-sdk-v019"&gt;
  &lt;/a&gt;
  React SDK v0.1.9
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pin participants are now available with 3 different &lt;a href="https://docs.videosdk.live/docs/guide/video-and-audio-calling-api-sdk/features/pin-participants"&gt;layout options&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#documentation-amp-support"&gt;
  &lt;/a&gt;
  Documentation &amp;amp; Support
&lt;/h3&gt;

&lt;p&gt;We have prepared an extensive guide in the docs for all SDK and API integrations.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://docs.videosdk.live/docs/guide/prebuilt-video-and-audio-calling/getting-started"&gt;Prebuilt Video &amp;amp; Audio Calling SDK&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://docs.videosdk.live/docs/guide/video-and-audio-calling-api-sdk/getting-started"&gt;Custom Video &amp;amp; Audio Calling SDK&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://docs.videosdk.live/docs/guide/standard-live-streaming-api-sdk/getting-started"&gt;Standard Live Stream API&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://docs.videosdk.live/docs/guide/video-on-demand/getting-started"&gt;Video on Demand API&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#code-samples"&gt;
  &lt;/a&gt;
  Code Samples
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Code sample released for &lt;a href="https://github.com/videosdk-live/videosdk-rtc-javascript-sdk-example"&gt;&lt;strong&gt;Javascript SDK&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Pin participant and other new features now available in Prebuilt code samples: &lt;strong&gt;&lt;a href="https://github.com/videosdk-live/videosdk-rtc-js-prebuilt-embedded-example"&gt;Javascript&lt;/a&gt;, &lt;a href="https://github.com/videosdk-live/videosdk-rtc-angular-prebuilt-example"&gt;Angular&lt;/a&gt;, &lt;a href="https://github.com/videosdk-live/videosdk-rtc-react-prebuilt-example"&gt;React&lt;/a&gt;, &lt;a href="https://github.com/videosdk-live/videosdk-rtc-vue-prebuilt-example"&gt;Vue&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#rest-apis"&gt;
  &lt;/a&gt;
  Rest APIs
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.videosdk.live/docs/realtime-communication/rest-api-reference/get-meeting-details"&gt;&lt;strong&gt;Meeting details API&lt;/strong&gt;&lt;/a&gt;: For meeting id and other details&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.videosdk.live/docs/realtime-communication/rest-api-reference/list-meeting-sessions"&gt;&lt;strong&gt;Meeting sessions API&lt;/strong&gt;&lt;/a&gt;: For participants log and session duration&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.videosdk.live/docs/realtime-communication/rest-api-reference/list-recordings"&gt;&lt;strong&gt;Meeting recordings API&lt;/strong&gt;&lt;/a&gt;: For meeting and session recordings&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#website-amp-support"&gt;
  &lt;/a&gt;
  Website &amp;amp; Support
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Join our &lt;a href="https://discord.gg/f2WsNDN9S5"&gt;&lt;strong&gt;Discord&lt;/strong&gt;&lt;/a&gt; Community&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;You can always &lt;a href="https://videosdk.live/contact"&gt;&lt;strong&gt;connect with us&lt;/strong&gt;&lt;/a&gt; in case of any query or help. We are happy to assist you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>UI? Piece a Cake</title>
      <author>Anton Korzunov</author>
      <pubDate>Sun, 31 Oct 2021 08:17:41 +0000</pubDate>
      <link>https://dev.to/thekashey/ui-piece-a-cake-1anb</link>
      <guid>https://dev.to/thekashey/ui-piece-a-cake-1anb</guid>
      <description>&lt;p&gt;One of the first &lt;code&gt;false assumptions&lt;/code&gt; one could face during a long journey of becoming a developer, is that said journey is just about development, about you just writing some code. &lt;br&gt;
Like - start a new project by writing code, and finish it in the same way. &lt;br&gt;
Only later one will be told about testing, or the need to solve real customer problems, and other "business as usual" stuff, not sure which one came first. &lt;br&gt;
It's fine to start your journey in this way, everything need a beginning, but this is not how it should continue.&lt;/p&gt;

&lt;p&gt;This is not how it could succeed.&lt;/p&gt;

&lt;p&gt;Our job is not about writing code, it's about writing the right code, writing it "Once and only Once",  testing it, solving problems and finishing assigned tasks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;It's not about creating &amp;gt;new&amp;lt; things, 
but more usual about changing the &amp;gt;old&amp;lt; ones.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Software engineering is programming over time. Engineering is about considering the long-term effects of your code. Both direct and indirect. &lt;a href="https://swizec.com/blog/what-i-learned-from-software-engineering-at-google/"&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Read it this way - while moving forward think hard about what you are leaving behind what you need to make the next step.&lt;br&gt;
💡 Applicable to your live as well.&lt;/p&gt;

&lt;p&gt;While the vast majority of information you can find out there is focused on how to "make" thing, let's talk about the future maintenance, about reducing different burdens - from the classical &lt;code&gt;technical debt&lt;/code&gt; to &lt;code&gt;cognitive load&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's talk about the multidimensional "Cake" approach, also known as &lt;a href="https://en.wikipedia.org/wiki/Multitier_architecture"&gt;Multitier architecture&lt;/a&gt;, also known as Onion Architecture, and how it is applicable to UI based applications.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#where-is-the-problem"&gt;
  &lt;/a&gt;
  Where is the Problem?
&lt;/h1&gt;

&lt;p&gt;The problem is not only "where", the problem is also "when".&lt;/p&gt;

&lt;p&gt;Let's imagine that you are working in a very agile project, of course you are, and you just bootstrapped a new application which already have experienced two pivots and going to have another one.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The essence of Agile is about being reactive to the changes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is absolutely ok to start a random redesign, it's absolutely ok to abandon almost complete feature and start redoing it in a little different way, it's ok to adopt for the new requirements and the only thing a developer should be focused at this point - be able to &lt;strong&gt;preserve as much as possible&lt;/strong&gt;, about how NOT to start every time from the scratch. That's happens to all of us, but is not any efficient.&lt;/p&gt;

&lt;p&gt;While the majority might understand the solution for a "Happy Live" as &lt;a href="https://blog.codinghorror.com/falling-into-the-pit-of-success/"&gt;Pit of Success&lt;/a&gt;, where &lt;em&gt;a well-designed system makes it easy to do the right things and annoying (but not impossible) to do the wrong things&lt;/em&gt;, it's still about &lt;em&gt;making&lt;/em&gt; things(note "do the right thing"), not &lt;em&gt;changing&lt;/em&gt; something existing, even something created yesterday (we "agile", right 🙄?).&lt;br&gt;
I reckon the Solution for the &lt;em&gt;change&lt;/em&gt; might have roots in the &lt;a href="https://en.wikipedia.org/wiki/Chaos_engineering"&gt;Chaos Engineering&lt;/a&gt;, where you have to accept that something will go wrong, a build a system resilient to it. While the essence of this philosophy is something you should always have in mind, there is another way to address the same problem.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Chaos? This what happen during(before or instead of) the family Christmas dinner, meetup and especially during Gala Concert. In all cases the path to success is to have some protocols, procedures and preparation. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#path-to-success-is-a-proper-foundation"&gt;
  &lt;/a&gt;
  Path to Success is a proper foundation.
&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Standing_on_the_shoulders_of_giants"&gt;Standing on the shoulders of Giants&lt;/a&gt; - a general concept that &lt;em&gt;prior&lt;/em&gt; knowledge, and not only knowledge, could and should be used today 👇&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Using the understanding gained by major thinkers who have gone before in order to make intellectual progress&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;every time you use &lt;code&gt;webpack&lt;/code&gt;, or any other bundler, and not create your own one - &lt;em&gt;you stand on the shoulders&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;every time you use &lt;code&gt;React&lt;/code&gt;, or any other UI abstraction - &lt;em&gt;you stand on the shoulders&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;every time you use any library, not writing code from the scratch - &lt;em&gt;you stand on the shoulders&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The majority of developers would use some preexisting (third party) solution to solve their problem, would stand on the shoulders of other developers and "The Platform", but the same majority of developers are also missing the ability to &lt;strong&gt;stand on their own shoulders&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👉 every time you need to &lt;em&gt;change&lt;/em&gt; something, there should be a giant you can rely on. You have to &lt;em&gt;giant&lt;/em&gt; yourself.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;A digital platform is a foundation of self-service APIs, tools, services, knowledge and support which are arranged as a compelling internal product. Autonomous delivery teams can make use of the platform to deliver product features at a higher pace, with reduced co-ordination. &lt;a href="https://martinfowler.com/articles/talk-about-platforms.html"&gt;What is a 'Platform' anyway?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C1y2-0e---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vuqgqfju9rk38pt0t7pg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C1y2-0e---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vuqgqfju9rk38pt0t7pg.jpeg" alt="Shoulders" width="620" height="348"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#ive-seen-it"&gt;
  &lt;/a&gt;
  I've seen it
&lt;/h2&gt;

&lt;p&gt;We will jump into some concrete examples shortly, but let's first create some concepts to act as a foundation, let's create our first small Giant, the one should know very well.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🤖 Terminator 1 -&amp;gt; 🦾 Terminator 2 -&amp;gt; 🦿Terminator 3. They all are backing plot of each other. Without the very first you cannot have the second.&lt;/li&gt;
&lt;li&gt;📖Book (Hobbit) -&amp;gt; 💍Film (Hobbit, well 3 films). While there are many differences between the book and the film, they share the same foundation&lt;/li&gt;
&lt;li&gt;🤯Total Recall(1990) -&amp;gt; 🤯Total Recall(2012). Those films have nothing in common, except 😉 the same foundation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Every remake, every sequel or prequel, every film based on a book or a book based on film are the examples of &lt;code&gt;Standing on the shoulders of Giants&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k8QBYxdp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dowea2h3a0qili5vtoda.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k8QBYxdp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dowea2h3a0qili5vtoda.jpeg" alt="3 spider mans" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Which other Giants can exists?&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#layers"&gt;
  &lt;/a&gt;
  Layers
&lt;/h1&gt;

&lt;p&gt;Before you run away lets pick some example you definitely will understand. Probably it will be more correct to say - a lot of people by a some strange reason expect you to understand it, and once upon a time during every second interview for a JavaScript position you might be asked about this thing, and it always was not very clear for me, like it's 100% not related... until today. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Layers of &lt;a href="https://dev.toOSI%20model"&gt;OSI Model&lt;/a&gt;, also known as a internet layer cake&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Crgm64L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hms0xtgh8r4lt7tdu9o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Crgm64L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hms0xtgh8r4lt7tdu9o.png" alt="OSI model" width="798" height="384"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hey! I said do not run away! Look how one layer of OSI &lt;em&gt;stands on the shoulders&lt;/em&gt; of another.&lt;br&gt;
There is no difference for you how &lt;em&gt;the device you are reading this information from&lt;/em&gt; is connected to the internet - Ethernet, Wifi, 2G, 4G or 5G - it just works. The top-most(7th) layer is unbound from any network hardware.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Implementation details are abstracted into many layers and some of those layers are even interchangeable(WiFi!==Ethernet!==Cellular).&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;I hope you would like to experience the same smooth journey during UI development. Strangely, but often developers are trying to &lt;em&gt;shorten&lt;/em&gt; processes, &lt;em&gt;collapse&lt;/em&gt; layers and especially not &lt;em&gt;separate concerns&lt;/em&gt; and trying to get something valuable from it. Again and again, with no Giants supporting them.&lt;/p&gt;



&lt;p&gt;Well, might be using OSI as a example was a little too much, but &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;would you consider &lt;code&gt;React&lt;/code&gt; as a &lt;code&gt;layer&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;would you consider &lt;code&gt;webpack&lt;/code&gt; as a &lt;code&gt;layer&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;would you consider &lt;code&gt;MaterialUI&lt;/code&gt; as a next &lt;code&gt;layer&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;and &lt;code&gt;NextJS&lt;/code&gt; as one more extra &lt;code&gt;layer&lt;/code&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the User there is no different if an Application has been build with &lt;code&gt;Nuxt&lt;/code&gt;, &lt;code&gt;Next&lt;/code&gt; or bare &lt;code&gt;webpack&lt;/code&gt;. For &lt;code&gt;webpack&lt;/code&gt; there is also no difference if it is used by application directly or hidden inside Next. &lt;/p&gt;

&lt;p&gt;Can you see all those giants, on the shoulder of which your application is standing?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you ever wonder why your &lt;code&gt;node_modules&lt;/code&gt; are so huge, better to say GIGANTIC -&amp;gt; that's it! 😅&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JUypb_Z---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dy3dfxverraxmcmaqrq5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JUypb_Z---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dy3dfxverraxmcmaqrq5.png" alt="node_modules" width="880" height="633"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Another good example is &lt;code&gt;Redux&lt;/code&gt;, as "Redux" by itself means nothing. It can be very different and you'll never know which recipe was used to bake it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Redux&lt;/code&gt;+&lt;code&gt;Thunk&lt;/code&gt;, or &lt;code&gt;Redux&lt;/code&gt;+&lt;code&gt;Saga&lt;/code&gt; provide a little more &lt;em&gt;context&lt;/em&gt; for an expected &lt;em&gt;taste&lt;/em&gt; of a given solution, however only &lt;a href="https://redux-toolkit.js.org/"&gt;RTK&lt;/a&gt; looks as a properly &lt;em&gt;layered cake&lt;/em&gt;. Mmmm tasty!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-whole-and-the-parts"&gt;
  &lt;/a&gt;
  The Whole and the Parts
&lt;/h2&gt;

&lt;p&gt;Speaking of Redux, there is a very common "mistake" in the understanding of the difference between "Redux" and "Context API". To be more concrete - the difference between &lt;code&gt;useReducer&lt;/code&gt; + &lt;code&gt;React.Context API&lt;/code&gt; and &lt;code&gt;Redux&lt;/code&gt; as the latter is technically the same as "Reducer + Context".&lt;br&gt;
Right after React Context presentation many people, really many people, were wondering - 🤔 do they really need Redux or what.&lt;/p&gt;

&lt;p&gt;Well, probably they didn't, but the more proper way to explain what is wrong with such common and simple misconception is to refer to &lt;a href="https://rbcs-us.com/documents/Segue.pdf"&gt;Weinberg’s Law of Decomposition&lt;/a&gt;, which states &lt;em&gt;"the whole is greater than the sum of its parts"&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Very easy to prove, just combine baking 🤯 soda and vinegar 💥.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By the fact Redux not only reducers, but also patterns, DevTools, and different middlewares for different use cases. &lt;br&gt;
While Redux &lt;strong&gt;is&lt;/strong&gt; ContextAPI + Reducer, it is BIGGER than &lt;em&gt;a sum of its parts&lt;/em&gt;.&lt;br&gt;
👉 the real work a engineer is to see such &lt;em&gt;big wholes&lt;/em&gt; looking at the pieces. Some things are visible only from the distance&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a8uCgIf9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnx0yf7pq1t9txhnj1wu.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a8uCgIf9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnx0yf7pq1t9txhnj1wu.jpeg" alt="Cat geo-glyph" width="300" height="168"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An interesting moment about said law is that is simultaneously states the opposite:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Weinberg’s Law of Decomposition is subtler. It says that if you&lt;br&gt;
measure a system according to some gauge of functionality or&lt;br&gt;
complexity, and then decompose it, and measure up what you&lt;br&gt;
end up with, that &lt;strong&gt;the sum of the parts is greater than the whole&lt;/strong&gt;.&lt;br&gt;
Huh? This seems to contradict the Law of Composition.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The best way to read this to accept that you are never going to &lt;em&gt;consume&lt;/em&gt; something in full, as a while, only the required pieces. And it will be always some stuff left &lt;em&gt;unused&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Very easy to prove, just combine Cola and Whiskey 🤢
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#foundation-the-essence-and-the-variables"&gt;
  &lt;/a&gt;
  Foundation: the Essence and the Variables
&lt;/h1&gt;

&lt;p&gt;The very first step towards our goal is the ability to... left something behind. Separate flies and cutlets, extract placeholders from templates, split a single whole into &lt;code&gt;the Essence and the Variables&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The best and the most common example for this are &lt;code&gt;DSL&lt;/code&gt;s - Domain Specific Languages, including any &lt;strong&gt;Template&lt;/strong&gt; languages, including &lt;strong&gt;React&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;😉 is there any difference between &lt;code&gt;&amp;lt;div&amp;gt;{{userName}}&amp;lt;/div&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;User name={userName}&amp;gt;&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A very important moment is that the &lt;code&gt;Ess/Var&lt;/code&gt; Separation can be performed by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;moving the &lt;code&gt;Essence&lt;/code&gt; to the Layer below (sinking functionality)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Variables&lt;/code&gt; would be "kept"(emerge) automatically, as you will need to find a way to configure the underlaying functionality.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To better understand, lets create a few examples:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#button-group"&gt;
  &lt;/a&gt;
  Button Group
&lt;/h2&gt;

&lt;p&gt;At many sites you might see &lt;code&gt;Buttons&lt;/code&gt; positioned next to each other. Technically speaking they are &lt;strong&gt;nothing more&lt;/strong&gt; that two &lt;code&gt;Buttons&lt;/code&gt; placed in one parent and separated by some &lt;code&gt;Gap&lt;/code&gt;. However, does it mean that this is what you should do?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ActionButtons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;grid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;gridGap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;16px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Do&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Something&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How many different way you know to create said gap, and how many different &lt;code&gt;gaps&lt;/code&gt; you can use - 2px, 4px, 20px?&lt;br&gt;
Probably said &lt;code&gt;gap&lt;/code&gt; should be proportional to &lt;code&gt;Button&lt;/code&gt; size to create a "coupling" between two buttons and let you use larger gap to create a "distinction".&lt;/p&gt;

&lt;p&gt;This is why it's very important to create an abstraction - &lt;code&gt;ButtonGroup&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ButtonGroup&lt;/span&gt; &lt;span class="cm"&gt;/* don't think how*/&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Do&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Something&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ButtonGroup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or even give underlaying logic more control over look-n-feel,  and create an opportunity to &lt;em&gt;collapse&lt;/em&gt; a few Buttons in one group into one &lt;code&gt;Dropdown&lt;/code&gt; on mobile devices.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ifMobile&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Dropdown&lt;/span&gt; &lt;span class="na"&gt;caption&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Edit"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Edit&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Delete&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Dropdown&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ButtonGroup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Edit&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Delete&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ButtonGroup&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c1"&gt;// ⬇️⬇️⬇️⬇️&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ResponsiveButtonGroup&lt;/span&gt;
    &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Edit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Delete&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Move one &lt;em&gt;giant shoulder&lt;/em&gt; up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q07jGrZC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ddvh30tkvfvsco67su5f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q07jGrZC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ddvh30tkvfvsco67su5f.png" alt="Button groups" width="880" height="555"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table"&gt;
  &lt;/a&gt;
  Table
&lt;/h2&gt;

&lt;p&gt;Table is another example where second-abstractions can help you a lot.&lt;br&gt;
Let's imagine you need display a table. You basically have two options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;render table by yourself&lt;/li&gt;
&lt;li&gt;use some other library to do it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the first case you might need to spend more time than needed to handle edge cases, implement virtualisation, sorting, you name it.&lt;br&gt;
In the second case you might found any particular library to not matching your expectations in some &lt;em&gt;details&lt;/em&gt; with no ability to change pre-backed solution.&lt;/p&gt;

&lt;p&gt;Often in such case developers are picking the first case as the only possible, while that always need the second - some "solution" they can just use. It just has to be "as they want". &lt;br&gt;
In the &lt;code&gt;Component Approach&lt;/code&gt; such solution is known as a &lt;code&gt;Component&lt;/code&gt; 🤷‍♂️, no more, no less.&lt;/p&gt;

&lt;p&gt;So, yes, go with option one, pick your way to render HTML, not a big deal, pick the way you do(if you do) virtualisation, pick the way to handle "table data" - there are many &lt;em&gt;headless&lt;/em&gt; tables on NPM, and assemble in a way you need.&lt;br&gt;
If one day later you will have another use case with slightly different requirements - create another &lt;code&gt;Component&lt;/code&gt;, assembled in another way.&lt;br&gt;
But it is important to have this &lt;em&gt;intermediate&lt;/em&gt; abstraction layer, which states "this is how tables are made here", as exactly this point may change in time (redesign) and you want to avoid &lt;a href="https://en.wikipedia.org/wiki/Shotgun_surgery"&gt;Shotgun surgery&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/Domino_effect"&gt;Domino Effect&lt;/a&gt;. You want a single change to a single component at UIKit/Design system side, not any client code.&lt;/p&gt;

&lt;p&gt;You want to stand on &lt;em&gt;Giant Shoulders&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modal"&gt;
  &lt;/a&gt;
  Modal
&lt;/h2&gt;

&lt;p&gt;Modal is a combination of both cases above.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Modal&lt;/code&gt; itself should just provide you a &lt;code&gt;ModalDialog&lt;/code&gt; functionality.&lt;/li&gt;
&lt;li&gt;But the Application might need:

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ConfirmModal&lt;/code&gt;, having a &lt;code&gt;Cancel button&lt;/code&gt; and the &lt;code&gt;Action button&lt;/code&gt;, next to each other in &lt;a href="https://medium.com/theorem/button-ambiguity-alignment-order-a42736e25334"&gt;some particular order&lt;/a&gt; (depending on the operation system), with (probably) &lt;code&gt;Cancel&lt;/code&gt; autofocused.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;InformationModal&lt;/code&gt;, having only one &lt;code&gt;Got it button&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;OperationModal&lt;/code&gt; to indicate some process and having no buttons.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Plus &lt;code&gt;FileModal&lt;/code&gt;, which is not a "Design Primitive", but a separate experience with own rules and principles.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aoOPoJ2z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqg0boro4p55kceyeskd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aoOPoJ2z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wqg0boro4p55kceyeskd.png" alt="different modals" width="880" height="284"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;HTML Dialog Element&lt;/code&gt; -&amp;gt; &lt;code&gt;JS Modal Dialog&lt;/code&gt; -&amp;gt; &lt;code&gt;Use Case Dialog&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;🤷‍♂️ We are ok to use &lt;code&gt;window.alert&lt;/code&gt; and &lt;code&gt;window.confirm&lt;/code&gt;, but almost no "UI-library" provide a second-abstraction over their modals to reflect the same functionality.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Modal is a lower-level construct that is leveraged by the following components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dialog&lt;/li&gt;
&lt;li&gt;Drawer&lt;/li&gt;
&lt;li&gt;Menu&lt;/li&gt;
&lt;li&gt;Popover&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(source &lt;a href="https://mui.com/api/modal-unstyled/"&gt;Material UI&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#middlelevel-architecture"&gt;
  &lt;/a&gt;
  Middle-level architecture
&lt;/h1&gt;

&lt;p&gt;So, UI is a piece a cake?&lt;br&gt;
👉 Yes, it is if you think about it as about Cake. Layer on top of another Layer.&lt;/p&gt;

&lt;p&gt;Are you already using Onion Architecture, where layers are separated?&lt;br&gt;
👉 Of course. Look inside your &lt;code&gt;node_modules&lt;/code&gt;, think how many other packages, libraries and layers are hidden behind the ones you know about.&lt;/p&gt;

&lt;p&gt;There are &lt;a href="https://en.wikipedia.org/wiki/High_Level_Architecture"&gt;High Level Architecture&lt;/a&gt;(read pictures) and &lt;a href="https://en.wikipedia.org/wiki/Low-level_programming_language"&gt;Low Level Architecture&lt;/a&gt;(building primitives), what is this one about?&lt;br&gt;
👉 And this is one is about something exactly in between - Middle-level Architecture, combining "some given blocks" to create Application according to HLA. &lt;br&gt;
The one usually forgotten, and the one you always has to define for yourself by yourself.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#actionable-advices"&gt;
  &lt;/a&gt;
  Actionable advices
&lt;/h1&gt;

&lt;p&gt;Take a single component and try to find another structure inside it. Find a &lt;code&gt;Modal&lt;/code&gt; behind a &lt;code&gt;Dialog&lt;/code&gt;, find a &lt;code&gt;FocusLock&lt;/code&gt; behind that &lt;code&gt;Modal&lt;/code&gt;, go to the very end on the left (atoms) and then go back to the very right(combinations).&lt;/p&gt;

&lt;p&gt;Think in Atoms -&amp;gt; Molecules -&amp;gt; Organisms, not from &lt;a href="https://atomicdesign.bradfrost.com/chapter-2"&gt;Atomic Design&lt;/a&gt; point of view, but as a unidirectional &lt;em&gt;complexity flow&lt;/em&gt;. &lt;br&gt;
Remember the &lt;code&gt;Table&lt;/code&gt; – you should be able having a &lt;code&gt;Complex Component A&lt;/code&gt; break it into to pieces and assemble into &lt;code&gt;Complex Component B&lt;/code&gt;. Then go back to those pieces and break them down.&lt;br&gt;
👉 That is converting a single whole to the Essence and the Variables. &lt;/p&gt;

&lt;p&gt;The point here - layers &lt;strong&gt;should not interfere&lt;/strong&gt;, and should not be used in skip levels(Organism should never use Atom) that will enable their reusability and provide maintainability free from &lt;code&gt;Shotgun Surgery&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Create a fancy cake, starting from &lt;code&gt;More Generic&lt;/code&gt; layers and go to &lt;code&gt;Less Generic&lt;/code&gt; ones. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MBm5QPJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hhu9pzn17x8qd12dfsju.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MBm5QPJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hhu9pzn17x8qd12dfsju.jpeg" alt="portal cake" width="640" height="397"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All a cherry on top.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>cleancode</category>
    </item>
    <item>
      <title>Why is java code easier to hack than python code ?</title>
      <author>Rushan S J</author>
      <pubDate>Sun, 31 Oct 2021 08:10:13 +0000</pubDate>
      <link>https://dev.to/rushannotofficial/why-is-java-code-easier-to-hack-than-python-code--5big</link>
      <guid>https://dev.to/rushannotofficial/why-is-java-code-easier-to-hack-than-python-code--5big</guid>
      <description>&lt;p&gt;So, why IS java code more vulnerable than python? I'm now talking just about hacking but also cracking. Softwares which are both offline and online and are associated with premium accounts usually store the state somewhere (atleast while making a account). &lt;/p&gt;

&lt;p&gt;This is where the part begins. In java,&lt;br&gt;
to store the state in a variable in a class, you would need to write  &lt;code&gt;@Expose&lt;br&gt;
     private boolean premium;&lt;/code&gt;&lt;br&gt;
which already tells the person looking at the code that the variable is a boolean so just changing that to true would be enough. Whereas, in python, you would just do &lt;code&gt;self.premium = None # None because we dont know the state yet'&lt;/code&gt;. The person would actually have to go through the entire code to find out what type the variable actually is. &lt;/p&gt;

&lt;p&gt;In Simple words, Statically typed languages &amp;gt; Dynamically typed languages in cracking.&lt;/p&gt;

&lt;p&gt;Also, java code is usually compiled to a jar which can be decompiled easily with comments and other things in the code but, when you compile python to cython or exe, the comments are removed and even if you do get the source code, it wouldn't be very pleasant to look at. &lt;/p&gt;

&lt;p&gt;I'm not saying that python is better than java. I'm just telling all the programmers in the world premiuming (I made this word up) their software. Instead of storing states locally, store it on the server or something.&lt;/p&gt;

&lt;p&gt;Hope you learnt something from this post. &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Telegram parsing (part 1: Setup and first launch)</title>
      <author>Vadim Kolobanov</author>
      <pubDate>Sun, 31 Oct 2021 08:05:14 +0000</pubDate>
      <link>https://dev.to/vadimkolobanov/telegram-parsing-part-1-setup-and-first-launch-1j2m</link>
      <guid>https://dev.to/vadimkolobanov/telegram-parsing-part-1-setup-and-first-launch-1j2m</guid>
      <description>&lt;p&gt;Hello everyone! Parsing sites is so fun. You can use this data for your resource or do it to order. And what if you download, for example, all the messages from a telegram chat or a list of its participants, and then use this data for analytics, or even better, to form your database of users who are interested in this or that topic.&lt;/p&gt;

&lt;p&gt;In this series of articles, we will look at how to write our own separate Telegram client that will collect data from the chats we are interested in, and also see how to save this information to our database.&lt;br&gt;
To create a separate client, the asynchronous library "Telethon" is well suited. The library itself can be used both to create telegram bots and to create separate applications working with the Telegram API. The main advantage is clear documentation in which you can find answers to all questions.&lt;/p&gt;

&lt;p&gt;We will start creating our project by registering a developer account here&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xRqziOg7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20og7qk6fjgbuuaoph7v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xRqziOg7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20og7qk6fjgbuuaoph7v.png" alt="Telegram Developers Registration" width="880" height="374"&gt;&lt;/a&gt;&lt;br&gt;
We enter the numeric-letter code that came to Telegram and get to the registration page of the new application. Fill out the form, the first two fields are enough:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1BxoGgWv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gcqaywzzqmr56h875skv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1BxoGgWv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gcqaywzzqmr56h875skv.png" alt="Create Application" width="880" height="666"&gt;&lt;/a&gt;&lt;br&gt;
If everything is entered correctly, you will see the following information.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j8rwZ9tI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sff3pulzlsyf0fnwvvah.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j8rwZ9tI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sff3pulzlsyf0fnwvvah.png" alt="App Configuration" width="880" height="360"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;I'll make a reservation right away, there will be a little more data, but the App api_id and App api_hash parameters are important to us.&lt;/em&gt;  &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#congratulations-you-have-registered-your-app"&gt;
  &lt;/a&gt;
  Congratulations! You have registered your app.
&lt;/h3&gt;

&lt;p&gt;It's not worth closing the page yet. We will take from there the values of App app_id, App api_hash, Short_name for our application.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#go-to-pycharm"&gt;
  &lt;/a&gt;
  Go to PyCharm
&lt;/h3&gt;

&lt;p&gt;It would be a good tone not to store our hash and app_id in the code, so let's do it nicely. Use the configparser library to create a settings file. Create a file with the .ini extension in the root of the project (example config.ini) and let's put our data from the developer account that we have registered there.&lt;br&gt;
For example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Uq-Mk6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijs57ylkdojgubzhq3d3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Uq-Mk6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijs57ylkdojgubzhq3d3.png" alt="Configuration" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I know about venv and environment variables. You can use a method that is convenient for you.&lt;/p&gt;

&lt;p&gt;Next, the most interesting thing awaits us. Let's install the Telethon library itself in our project with the &lt;strong&gt;"pip install telethon"&lt;/strong&gt; command and import the TelegramClient class from our installed library into the project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;configparser&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;telethon&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TelegramClient&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's configure the transfer of our data to the connection from the settings file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;configparser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConfigParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"config.ini"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;api_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Telegram'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'api_id'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;api_hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Telegram'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'api_hash'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Telegram'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TelegramClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;api_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;api_hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please note that in the "config.ini" file, we specified [Telegram] as the first line. With these tags, we will simply not get confused about the settings variables and separate them in one file.&lt;/p&gt;

&lt;p&gt;Let's create our main function and request information about us from the telegram server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;about_me&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_entity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'me'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;about_me&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Telethon is asynchronous, which means we will use functions and methods with the addition of the keywords async and await&lt;/p&gt;

&lt;p&gt;In order for our client not to close after launch, we will add such an entry at the end of our file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Our app is almost ready for the first launch&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At the first launch in the PyCharm console, you will be asked to enter your phone number or bot token&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1THeUtjf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xyt5rkggv21myad5p96k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1THeUtjf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xyt5rkggv21myad5p96k.png" alt="Phone request" width="880" height="208"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is necessary to create a session file, it will be stored in the root of the project with the extension .session (it's not worth deleting them, we'll talk about them later)&lt;/p&gt;

&lt;p&gt;Enter your phone number in international format without "+"&lt;/p&gt;

&lt;p&gt;You have received the telegram account code again, only now it consists of 5 digits. Enter them.&lt;/p&gt;

&lt;p&gt;Congratulations you have launched your Telegram client.&lt;/p&gt;

&lt;p&gt;So what did our main function return to us?&lt;/p&gt;

&lt;p&gt;Our "about_me" variable now contains a User object with the telethon library data type.&lt;/p&gt;

&lt;p&gt;Inside the object you can see data about your account.&lt;br&gt;
In order to see some information, let's make this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;about_me&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_entity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'me'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Name:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;about_me&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Nickname:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;about_me&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;about_me&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Number'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;about_me&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope you liked the result? =)&lt;/p&gt;

&lt;p&gt;The Telegram server has just told you a little more about you than you see in your account.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Data leakage from Telegram is a Telegram problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All information that we will receive is publicly available. And we can see the same information through the official app. But I still urge you not to use the acquired knowledge for bad purposes. All the information presented is provided for the purpose of education and popularization of the programming language, its libraries and capabilities.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#if-you-dear-reader-show-your-activity-to-my-work-then-in-the-following-articles-we-will-look-at-a-way-to-get-all-messages-from-the-telegram-chat-as-well-as-all-participants-of-the-chat-or-group-we-will-study-ways-to-get-the-users-phone-number-even-if-it-is-hidden-and-learn-how-to-find-information-about-people-in-telegram-by-their-phone-number"&gt;
  &lt;/a&gt;
  &lt;em&gt;If you, dear reader, show your activity to my work, then in the following articles we will look at a way to get all messages from the telegram chat, as well as all participants of the chat or group, we will study ways to get the user's phone number even if it is hidden and learn how to find information about people in Telegram by their phone number.&lt;/em&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Unfortunately English is not my native language, but I am working on it. I will be waiting for your suggestions, feedback and comments.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;By tradition, the full code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;configparser&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;telethon&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TelegramClient&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;configparser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConfigParser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"config.ini"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;api_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Telegram'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'api_id'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;api_hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Telegram'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'api_hash'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Telegram'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TelegramClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;api_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;api_hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;about_me&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_entity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'me'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Name:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;about_me&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Nickname:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;about_me&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;about_me&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Phone'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;about_me&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#i-wish-you-success"&gt;
  &lt;/a&gt;
  I wish you success!
&lt;/h1&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
      <category>telegram</category>
    </item>
    <item>
      <title>The "DeRxJSViewModel Pattern": The E=mc^2 of State Management [Part 2]</title>
      <author>Zack DeRose</author>
      <pubDate>Sun, 31 Oct 2021 07:58:17 +0000</pubDate>
      <link>https://dev.to/zackderose/the-derxjsviewmodel-pattern-the-emc2-of-state-management-part-2-2i73</link>
      <guid>https://dev.to/zackderose/the-derxjsviewmodel-pattern-the-emc2-of-state-management-part-2-2i73</guid>
      <description>&lt;p&gt;👋 hi all - this article is a continuation of a &lt;a href="https://dev.to/zackderose/the-derxjsviewmodel-pattern-the-e-mc-2-of-state-management-part-1-3dka"&gt;previous article&lt;/a&gt; that explains the goals of the DeRxJS pattern:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;entirely de-couple state management code from presentational code (to the point where your state management code could be re-used across frameworks)&lt;/li&gt;
&lt;li&gt;maximize the benefits of RxJS, while minimizing the negatives&lt;/li&gt;
&lt;li&gt;next-level testing [and potential to hand over all our state-management code to AI at some point]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In that article, we did most of the heavy lifting - developing our state-management code and fully testing out every edge case with "timeline testing" (allowing us to assert not only "what" state looks like, but "when" it should look that way as well).&lt;/p&gt;

&lt;p&gt;In this article, we'll bring that state management code and show how we can use this across 3 front-end "frameworks": React, Angular, and Vanilla JS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react"&gt;
  &lt;/a&gt;
  React
&lt;/h2&gt;

&lt;p&gt;One of the goals of DeRxJS [as the name suggests] is to remove actual RxJS code from our code bases. We discussed in the previous example how &lt;a href="https://www.npmjs.com/package/@derxjs/reducer"&gt;@derxjs/reducer&lt;/a&gt; can help us write our state management, leveraging RxJS, but without actually writing any RxJS code ourselves.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sA-WOU30--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ZackDeRose/derxjs/raw/main/derxjs-react-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sA-WOU30--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ZackDeRose/derxjs/raw/main/derxjs-react-logo.png" alt="@derxjs/react logo" width="813" height="921"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article, I'm excited to introduce &lt;a href="https://www.npmjs.com/package/@derxjs/react"&gt;@derxjs/react&lt;/a&gt; - that will allow us to leverage that same approach to our react presentation code.&lt;/p&gt;

&lt;p&gt;In all honesty, I've prioritized React as the first presentation-based package for derxjs in part because of React's popularity. But beyond that there are 2 huge reasons that I've targeted React first:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;RxJS and React don't really play well together [yet!]&lt;/li&gt;
&lt;li&gt;One of my favorite things about React is how it is not domain-specific, for nearly everything but state-management! (Interestingly, I think this is almost entirely inverted from Angular, which I'd argue is domain-specific for everything BUT state-management) Marrying React and RxJS I think can close that gap, so that the state-management code you write is as domain-agnostic as the rest of your react code.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In general, I'm quite long on React. My motivations are almost entirely selfish - I think if this package works the way I want it to, this will be my ideal environment for frontend development.&lt;/p&gt;

&lt;p&gt;Without further ado, here's the general api for our @derxjs/react code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TicTacToe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;DeRxJSComponent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;
    &lt;span class="nx"&gt;TicTacToeViewModelInputs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;TicTacToeViewModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;TicTacToeProps&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;viewModel&lt;/span&gt;&lt;span class="na"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ticTacToeViewModel$&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TicTacToeView&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;createInitialViewModel&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="na"&gt;triggerMap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;spaceClick&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;userSpaceClickEvents$&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;resetClick&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;userResetClickEvents$&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;ai&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;randomAi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;viewModel$&lt;/code&gt; is imported from our work from the previous article&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;component&lt;/code&gt; is a presentational component (we'll see that next!)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;initialValue&lt;/code&gt; is the starting value for our state (the &lt;code&gt;createInitialViewModel()&lt;/code&gt; function comes from the previous article as well)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;triggerMap&lt;/code&gt; is a [type-safe!] object that maps the name of "trigger" functions for our presentational components to Observable inputs of our &lt;code&gt;viewModel$&lt;/code&gt;. "Trigger" functions are how we'll communicate the message passing our presentation component will need to perform, and hand this off to to the @derxjs/react package to turn those into Observables (so we don't have to write any of that RxJS code ourselves).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;inputs&lt;/code&gt; is our way to provide any non-reactive (or non-Observable) inputs to our &lt;code&gt;viewModel$&lt;/code&gt; function. Note we're passing our &lt;code&gt;randomAi&lt;/code&gt; function here - essentially parameterizing functionality of our &lt;code&gt;viewModel$&lt;/code&gt; this way. (Would be fun in future work to create an "unbeatable" ai as well!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This API is designed to allow you to write all presentational code as "presentational" components, delegating any smarts to your @derxjs/view-model, and using the provided trigger functions for message passing.&lt;/p&gt;

&lt;p&gt;Here's how that code ends up looking:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;TicTacToeProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;spaceClick&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;spaceCoordinates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SpaceCoordinates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;resetClick&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;SpaceProps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SpaceContent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;spaceCoordinates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SpaceCoordinates&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;clickHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;spaceCoordinates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SpaceCoordinates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Space&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clickHandler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;spaceCoordinates&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;SpaceProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;clickHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;spaceCoordinates&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TicTacToeView&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;triggers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TicTacToeViewModel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;triggers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TicTacToeProps&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;turn&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;border&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;board&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Space&lt;/span&gt;
                &lt;span class="nx"&gt;contents&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
                &lt;span class="nx"&gt;spaceCoordinates&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;column&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
                &lt;span class="nx"&gt;clickHandler&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;triggers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spaceClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="p"&gt;))}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;reset&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;triggers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resetClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Reset&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note how &lt;code&gt;onClick&lt;/code&gt;s are set to those "trigger functions" we defined.&lt;/p&gt;

&lt;p&gt;Here's that code in action:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/react-ts-6wxgfx?embed=1&amp;amp;&amp;amp;" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#angular"&gt;
  &lt;/a&gt;
  Angular
&lt;/h2&gt;

&lt;p&gt;Next up: Angular! As mentioned, I'm of the opinion that Angular is generally very domain-agnostic when it comes to state management. In particular, it's very RxJS friendly.&lt;/p&gt;

&lt;p&gt;As such, I don't know if a @derxjs/angular package is really necessary. Eventually we could end up creating a package of utilities for hiding more of the RxJS code that we'd write, but I have no plans for that at the moment.&lt;/p&gt;

&lt;p&gt;Here's a look at the Typescript component code we'll write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;userResetClickObserver&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observer&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;userResetClickEvents$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userResetClickObserver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;userSpaceClickObserver&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observer&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SpaceCoordinates&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;userSpaceClickEvents$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SpaceCoordinates&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userSpaceClickObserver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;vm$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ticTacToeViewModel$&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;ai&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;randomAi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;userSpaceClickEvents&lt;/span&gt;&lt;span class="na"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userSpaceClickEvents$&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;userResetClickEvents&lt;/span&gt;&lt;span class="na"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userResetClickEvents$&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nl"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BoardIndex&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="nx"&gt;handleSpaceClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coordinates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SpaceCoordinates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userSpaceClickObserver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coordinates&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;handleResetClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userResetClickObserver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note how we're creating our observables by creating an 'observer' property on the class at "construction time", and then in our click handler methods, we call &lt;code&gt;next()&lt;/code&gt; on those observers. (This essentially the same "message passing" as our React code, but the @derxjs/react package hid most of the actual code here)&lt;/p&gt;

&lt;p&gt;Similar to our react example, we'll see the same idea of a 'presentational' component in our template - with the one exception of passing our &lt;code&gt;viewModel$&lt;/code&gt; to the Angular async pipe at the top level of our template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Tic Tac Toe&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ng-container&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"vm$ | async as vm"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;{{ vm.turn }}&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"border"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"board"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;ng-container&lt;/span&gt; &lt;span class="na"&gt;*ngFor=&lt;/span&gt;&lt;span class="s"&gt;"let row of rows"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;*ngFor=&lt;/span&gt;&lt;span class="s"&gt;"let column of rows"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;(click)=&lt;/span&gt;&lt;span class="s"&gt;"handleSpaceClick({ row, column })"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            {{ vm.board[row][column] | uppercase }}
          &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/ng-container&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"reset"&lt;/span&gt; &lt;span class="na"&gt;(click)=&lt;/span&gt;&lt;span class="s"&gt;"handleResetClick()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Reset&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ng-container&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nice and simple :). Here's the stackblitz for our Angular code:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/angular-ivy-qe6zzv?embed=1&amp;amp;&amp;amp;" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vanilla-js"&gt;
  &lt;/a&gt;
  Vanilla JS
&lt;/h2&gt;

&lt;p&gt;In this example, we'll use the &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents"&gt;dom-manipulation API&lt;/a&gt; to do the lifting that React and Angular were doing in their examples. Here's the simplified version of what we're doing:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a "template" for our component, attaching id's to the buttons we'll need to listen to for clicks/update their text. This example is a bit fortunate as all the elements on the DOM are static (they don't need to be added or removed, so we can just leave the &lt;code&gt;Element&lt;/code&gt; objects on the DOM as-is, and change their text content. This would be significantly more difficult if this were not the case).&lt;/li&gt;
&lt;li&gt;use &lt;a href="https://rxjs.dev/api/index/function/fromEvent"&gt;&lt;code&gt;fromEvent&lt;/code&gt;&lt;/a&gt; from RxJS to get observables of the 'click' events on the buttons.&lt;/li&gt;
&lt;li&gt;Once we have our observables, pass them to that same &lt;code&gt;viewModel$&lt;/code&gt; function we used in React and Angular to create our View Model observable.&lt;/li&gt;
&lt;li&gt;Subscribe to that observable, and update the 'board' by changing the text content of the buttons to match the &lt;code&gt;board&lt;/code&gt; property on the view model object.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's how that looks in the stackblitz:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/typescript-bavrh2?embed=1&amp;amp;&amp;amp;" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;And that's a wrap!! Hope that this article helped spark some cool ideas. Be sure to reach out on &lt;a href="https://twitter.com/zackderose"&gt;twitter&lt;/a&gt; or check out &lt;a href="https://github.com/ZackDeRose/derxjs"&gt;the DeRxJS repo&lt;/a&gt; if you ever want to jam about state-management or good code architecture!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-the-author"&gt;
  &lt;/a&gt;
  About the author
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uSdgrUbk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idzdgnshhxtbabgvvrmw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uSdgrUbk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idzdgnshhxtbabgvvrmw.jpg" alt="Zack DeRose" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Zack DeRose [or DeRxJS if you like] is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/community/experts/directory/profile/profile-zack-derose?hl=en"&gt;a GDE in Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;a recent nx conf/NgConf/RxJS Live/The Angular Show/ZDS speaker&lt;/li&gt;
&lt;li&gt;Creator of the &lt;a href="https://github.com/ZackDeRose/derxjs"&gt;@derxjs OSS packages&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Senior Engineer and Engineering Manager at &lt;a href="https://nrwl.io/"&gt;Nrwl&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Checkout out my &lt;a href="https://zackderose.dev/videos"&gt;personal website&lt;/a&gt; for more of my dev content! And go bug &lt;a href="https://twitter.com/jeffbcross"&gt;Jeff Cross&lt;/a&gt;/&lt;a href="https://twitter.com/joerjohnson"&gt;Joe Johnson&lt;/a&gt; if you want to hire me to come help out your codebase or come help level up your team on Nx/NgRx/DeRxJS/RxJS/State Management! (I especially love building awesome stuff - and building up teams with bright developers that are eager to learn!)&lt;/p&gt;

</description>
      <category>rxjs</category>
      <category>react</category>
      <category>angular</category>
      <category>javascript</category>
    </item>
    <item>
      <title>When you type a URL in the browser!</title>
      <author>namitmalasi</author>
      <pubDate>Sun, 31 Oct 2021 07:57:26 +0000</pubDate>
      <link>https://dev.to/namitmalasi/when-you-type-a-url-in-the-browser-1cli</link>
      <guid>https://dev.to/namitmalasi/when-you-type-a-url-in-the-browser-1cli</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Have you ever wondered what exactly happens when you type an URL in the browser and press enter? In this blog, we will see what happens in the background, step by step when we type any URL.&lt;br&gt;
If you want to have a better understanding of this article,then i would recommend you to have an overview of &lt;a href="https://dev.to/namitmalasi/url-and-dns-explained-4aef"&gt;URL and DNS&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-you-enter-url-in-the-browser"&gt;
  &lt;/a&gt;
  1. You enter URL in the browser
&lt;/h3&gt;

&lt;p&gt;It basically means that you want to reach the server where the site is hosted. for example, if you are searching for facebook.com then, you are searching for the server where facebook .com is hosted.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-the-browser-looks-for-the-ip-address-in-the-dnsdomain-name-server"&gt;
  &lt;/a&gt;
  2. The browser looks for the IP Address in the DNS(Domain name server)
&lt;/h3&gt;

&lt;p&gt;a) The browser maintains a cache of the DNS records for some fixed amount of time. So, it is the first place to run a DNS query.&lt;/p&gt;

&lt;p&gt;b) If the browser doesn't contain the cache then it requests to the Operating System as the OS also maintains a cache of the DNS records.&lt;/p&gt;

&lt;p&gt;c) If your computer doesn't have the cache, then it searches the routers as routers also have the cache of the DNS records.&lt;/p&gt;

&lt;p&gt;d) If all above steps fail, the browser would move on to the ISP. Your ISP maintains it's own DNS server which includes a cache of DNS records which the browser would check.&lt;/p&gt;

&lt;p&gt;If the requested URL is not in the cache, ISP’s DNS server initiates a DNS query to find the IP address of the server that hosts facebook.com.&lt;br&gt;
The purpose of a DNS query is to search multiple DNS servers on the internet until it finds the correct IP address for the website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-the-browser-initiates-a-tcp-connection-with-the-server"&gt;
  &lt;/a&gt;
  3. The Browser initiates a TCP connection with the server.
&lt;/h3&gt;

&lt;p&gt;When the browser receives the IP address, it will build a connection between the browser and the server using the internet protocol. The most common protocol used is TCP protocol. The connection is established using a &lt;a href="https://www.guru99.com/tcp-3-way-handshake.html"&gt;three-way handshake&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-the-browser-sends-an-http-request-to-the-server"&gt;
  &lt;/a&gt;
  4. The browser sends an HTTP request to the server.
&lt;/h3&gt;

&lt;p&gt;Once the TCP connection is established, it is time to start transferring data! The browser will send a GET request asking for facebook.com web page.&lt;/p&gt;

&lt;p&gt;Sample Get Request:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--msrVKp6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp1.licdn.com/dms/image/C5112AQGhbJSc5YTomg/article-inline_image-shrink_1500_2232/0/1559318572982%3Fe%3D1641427200%26v%3Dbeta%26t%3Db0enUMgQMYHkuGUQD9iSppidf6-qb5Qo8bBw-cP1yFI" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--msrVKp6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp1.licdn.com/dms/image/C5112AQGhbJSc5YTomg/article-inline_image-shrink_1500_2232/0/1559318572982%3Fe%3D1641427200%26v%3Dbeta%26t%3Db0enUMgQMYHkuGUQD9iSppidf6-qb5Qo8bBw-cP1yFI" alt="Sample Get Request" width="880" height="218"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-the-server-handles-the-request-and-sends-back-a-response"&gt;
  &lt;/a&gt;
  5. The server handles the request and sends back a response.
&lt;/h3&gt;

&lt;p&gt;The server handles the HTTP request and sends a response. The server response contains the web page you requested as well as the status code, compression type (Content-Encoding), how to cache the page (Cache-Control), any cookies to set, privacy information, etc.&lt;/p&gt;

&lt;p&gt;Example HTTP server response:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3v0AA5CU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp1.licdn.com/dms/image/C5112AQGQs0X5LR4eoA/article-inline_image-shrink_1500_2232-alternative/0/1559318638805%3Fe%3D1641427200%26v%3Dbeta%26t%3Dn4GTWBBE_YQMp_MZHsNRejx2n-zEeCZtbC2K3ptyAcQ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3v0AA5CU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media-exp1.licdn.com/dms/image/C5112AQGQs0X5LR4eoA/article-inline_image-shrink_1500_2232-alternative/0/1559318638805%3Fe%3D1641427200%26v%3Dbeta%26t%3Dn4GTWBBE_YQMp_MZHsNRejx2n-zEeCZtbC2K3ptyAcQ" alt="Example HTTP server response:" width="880" height="285"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-the-browser-displays-the-html-content"&gt;
  &lt;/a&gt;
  6. The browser displays the HTML content.
&lt;/h3&gt;

&lt;p&gt;The browser displays the HTML content in phases. First, it will render the bare bone HTML skeleton. Then it will check the HTML tags and sends out GET requests for additional elements on the web page, such as images, CSS stylesheets, JavaScript files etc.&lt;br&gt;
At the end, you’ll see facebook.com appearing on your browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I really hope that you enjoyed reading this article and learned something from it. If you have any doubt or you think i missed something let me know in the comments.&lt;br&gt;
You can connect with me on:&lt;/p&gt;

&lt;p&gt;Twitter:&lt;a href="https://twitter.com/namitmalasi"&gt;Namit Malasi&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>browser</category>
      <category>url</category>
    </item>
    <item>
      <title>A Free News API For Next Project</title>
      <author>SnowBit</author>
      <pubDate>Sun, 31 Oct 2021 07:54:19 +0000</pubDate>
      <link>https://dev.to/snowbit/a-free-news-api-for-next-project-326c</link>
      <guid>https://dev.to/snowbit/a-free-news-api-for-next-project-326c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tiny-a-news-api"&gt;
  &lt;/a&gt;
  Tiny - A News API
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It is a News Fetching totally &lt;em&gt;free&lt;/em&gt; API (Application programming interface) for your next projects.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check out more at &lt;a href="https://github.com/snowbit-coderboi/tiny-news-api#readme"&gt;docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Easy to use&lt;/li&gt;
&lt;li&gt;Totally Free&lt;/li&gt;
&lt;li&gt;Requires no API key / token&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What user needs more...?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sample-image"&gt;
  &lt;/a&gt;
  Sample Image
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zy2C_C_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlshq0i0rrqz9bfvoonu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zy2C_C_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlshq0i0rrqz9bfvoonu.png" alt="NEWS API in JSON Format" width="880" height="269"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-reference"&gt;
  &lt;/a&gt;
  API Reference
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#endpoint"&gt;
  &lt;/a&gt;
  Endpoint
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    https://tiny-news-api.herokuapp.com/api/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#get-all-news"&gt;
  &lt;/a&gt;
  Get all news
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight http"&gt;&lt;code&gt;&lt;span class="err"&gt;  GET /api/news
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#get-sports-news"&gt;
  &lt;/a&gt;
  Get Sports News
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight http"&gt;&lt;code&gt;&lt;span class="err"&gt;  GET /api/sports
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#get-climateenvironment-related-news"&gt;
  &lt;/a&gt;
  Get Climate/Environment related news
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight http"&gt;&lt;code&gt;&lt;span class="err"&gt;    GET /api/climate
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#roadmap"&gt;
  &lt;/a&gt;
  Roadmap
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Additional endpoints for different news types&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For more try creating a issue and suggest new ideas or report a bug or error - &lt;a href="https://github.com/snowbit-coderboi/tiny-news-api/issues"&gt;Create Issue&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#authors"&gt;
  &lt;/a&gt;
  Authors
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.github.com/snowbit-coderboi"&gt;SnowBit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please consider sharing feedback in the comments&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
