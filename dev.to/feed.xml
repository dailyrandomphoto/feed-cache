<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>25 Ways I Stay Motivated &amp; Productive</title>
      <author>Gedalya Krycer</author>
      <pubDate>Mon, 08 Feb 2021 14:02:18 +0000</pubDate>
      <link>https://dev.to/gedalyakrycer/25-ways-i-stay-motivated-productive-2fbm</link>
      <guid>https://dev.to/gedalyakrycer/25-ways-i-stay-motivated-productive-2fbm</guid>
      <description>&lt;h4&gt;
  &lt;a href="#tldr" class="anchor"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h4&gt;

&lt;p&gt;This is a collection of habits and perspectives that I use to stay motivated and productive. &lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#intro"&gt;ℹ️ First An Introduction&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#habitstips" class="anchor"&gt;
  &lt;/a&gt;
  Habits/Tips
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;👔 &lt;a href="#dressed"&gt;Working Remote? Get Dressed.&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🌅 &lt;a href="#workEarly"&gt;Work Early&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;💺 &lt;a href="#workspace"&gt;Create A Separate Workspace&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🤔 &lt;a href="#defineWhy"&gt;Definine The "Why" Behind The "Why"&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🧐 &lt;a href="#paintWhy"&gt;Paint The "Why"&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🎯 &lt;a href="#goals"&gt;Set The Goal —&amp;gt; Lock It In&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;↗️ &lt;a href="#trio"&gt;Level-Up Trio&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🚏 &lt;a href="#trelloRoad"&gt;Trello Roadmap&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;✔️ &lt;a href="#truth"&gt;Source Of Truth List&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📅 &lt;a href="#schedule"&gt;Schedule Tasks&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;👋 &lt;a href="#acount"&gt;Form Weekly Accountability Group(s)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🎓 &lt;a href="#mentor"&gt;Find a Mentor(s)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🟢 &lt;a href="#start"&gt;No Matter What, Start&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;💬 &lt;a href="#demo"&gt;Attend Demo Days&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;😴 &lt;a href="#sleep"&gt;Go To Sleep!&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;💪 &lt;a href="#clean"&gt;Eat Clean &amp;amp; Workout&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🙏 &lt;a href="#grace"&gt;Have Grace&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📜 &lt;a href="#studyGuide"&gt;Bad Interviews Are A Study Guide&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🖥️ &lt;a href="#topicDesktops"&gt;Use Topic Specific Desktops&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📖 &lt;a href="#sumeriseTutorials"&gt;Summerise Tutorials&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;☁️ &lt;a href="#cloudNotes"&gt;Always Have Cloud Based Notes Ready&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🍽️ &lt;a href="#dishes"&gt;Do The Dishes&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🍿 &lt;a href="#movies"&gt;Watch Movies&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;😍 &lt;a href="#encouragment"&gt;Screenshot Encouragment&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;✍️ &lt;a href="#write"&gt;Write&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#first-an-introduction" class="anchor"&gt;
  &lt;/a&gt;
  First An Introduction ℹ️
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#productivity-and-motivation" class="anchor"&gt;
  &lt;/a&gt;
  Productivity and Motivation.
&lt;/h4&gt;

&lt;p&gt;These are two things that I both strive for and struggle with constantly. In this post, I have put together 25 helpful habits/tips that I have found success with over the years. &lt;/p&gt;

&lt;p&gt;Some of these tips might be new to you and others you probably heard 1,000 times. However, I find it is often the common sense stuff that I quickly forget to do and makes a big impact.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#let-me-be-transparent" class="anchor"&gt;
  &lt;/a&gt;
  Let Me Be Transparent.
&lt;/h4&gt;

&lt;p&gt;While I am a very dedicated and hard-working person, I am by no means a "productivity machine and supreme motivation guru". I admit to having many moments of wanting to quit when things get boring and often feel intimidated by new challenges. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#not-all-motivation-is-equal" class="anchor"&gt;
  &lt;/a&gt;
  Not All Motivation Is Equal.
&lt;/h4&gt;

&lt;p&gt;To be honest, a lot of the tips/habits on this list were initially shaped by feeling out of my depth and impostor syndrome. &lt;/p&gt;

&lt;p&gt;I developed them because I was insecure at school amongst "real artists" and later on "real developers". Or felt woefully underqualified while working remotely for a fast-paced design agency 2,500 miles away.&lt;/p&gt;

&lt;p&gt;In those times my motivation to do well was out of fear of failure instead of excitement to get better. I got really good results, but I beat myself up along the way.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#this-marks-a-change" class="anchor"&gt;
  &lt;/a&gt;
  This Marks A Change.
&lt;/h4&gt;

&lt;p&gt;Last year I decided to make a lot of changes and pursue what I really found fulfilling. (A career in development.) &lt;/p&gt;

&lt;p&gt;Instead of trying to just keep my head above water, I have been motivated by curiosity and excited to master a new craft.&lt;/p&gt;

&lt;p&gt;There is joy behind this sort of motivation and productivity, It is so much healthier and often yields better results. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#so-lets-get-into-it" class="anchor"&gt;
  &lt;/a&gt;
  So let's get into it.
&lt;/h4&gt;

&lt;p&gt;Below are 25 habits that have helped and continue to help me stay on top of my education, work, and mental health. I hope some are helpful to you and I would love to hear how you stay motivated or productive as well. &lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-working-remote-get-dressed" class="anchor"&gt;
  &lt;/a&gt;
  1. Working Remote? Get Dressed. 👔
&lt;/h2&gt;

&lt;p&gt;I am a huge believer that intentionality sets a mental tone. &lt;/p&gt;

&lt;p&gt;My first full-time job out of college was for a design agency in New York, while I was based in Las Vegas. &lt;/p&gt;

&lt;p&gt;Sure my Zoom background was of my 1 bedroom apartment, but the people I was working with and talking to were in a design studio or conference rooms.&lt;/p&gt;

&lt;p&gt;Getting up 1.5-2 hours before work, taking a shower, and getting fully dressed set a tone. It was all for the purpose of being presentable at work and doing a good job there. The mental shift helped me drown out any distractions, because "I had gotten ready and was at work".  &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-work-early" class="anchor"&gt;
  &lt;/a&gt;
  2. Work Early 🌅
&lt;/h2&gt;

&lt;p&gt;A lot of people I have read about or seen on YouTube say that going to bed and waking up earlier leads to productivity. Part of this reason is that if you go to bed at 8:30 pm - 9 pm you will skip the time your just watching movies or gaming. So you are using your awake time to be more productive. &lt;/p&gt;

&lt;p&gt;For me personally, during college, I found I got my best work done at night because everyone was asleep. However, at the job mentioned above, they were 3 hours ahead of me. So I had to work from 6 am – 3 pm.&lt;/p&gt;

&lt;p&gt;It was a challenge at first, but I have now come to really enjoy it. Like at 12 pm, the world is really quiet at 4 am. I love the feeling of working out, showering, and eating before 6 am. The rest of the day feels endless and like I can accomplish anything. &lt;/p&gt;

&lt;p&gt;If you want to try it, schedule something for 30min before you normally get up. Having something tangible to do at wake up time, can help motivate you to get up earlier. Every few days move the time back until you have hit your optimal wake-up time.&lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-create-a-separate-workspace" class="anchor"&gt;
  &lt;/a&gt;
  3. Create A Separate Workspace 💺
&lt;/h2&gt;

&lt;p&gt;Working from home can make it a real challenge to disconnect. I would often work for 3+ hours more, just because I was already at my computer when an issue popped up. &lt;/p&gt;

&lt;p&gt;In my first apartment, my "Workspace" was in the living room, which was also partly the kitchen. The only time I didn't physically see the computer was in my bedroom or bathroom. It can mentally takes a toll, because I was always seeing "work".&lt;/p&gt;

&lt;p&gt;A big thing my wife and I looked for when moving was for an extra bedroom to be an office space. The ability to literally close the door on work at the end of the day has been a game-changer. I didn't fully realize its impact until making that change too.  &lt;/p&gt;

&lt;p&gt;It is very easy to get burnt out by not having a physical separation between work and personal life. &lt;/p&gt;

&lt;p&gt;In the same vein, I typically do my personal projects in a different room than my freelance work. Again, I am a big fan of intentionality. By creating in a different space to work on personal growth and creative projects, I feel ready to get to it the second I walk to that spot. &lt;/p&gt;

&lt;p&gt;(Don't laugh, but for a long time, my "homework/creative/blogging space" was the carpeted area in our bedroom closet. It was quiet, cozy and a safe place to explore new code.)&lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-definine-the-why-behind-the-why" class="anchor"&gt;
  &lt;/a&gt;
  4. Definine The "Why" Behind The "Why" 🤔
&lt;/h2&gt;

&lt;p&gt;In late 2019, early 2020 I made the goal to go back to school and change careers to development. It was a great goal. It was also a huge financial, time, and mental undertaking. &lt;/p&gt;

&lt;p&gt;As with anything that requires some level of sacrifice and discomfort I found it helpful to identify the "Why" behind it.&lt;/p&gt;

&lt;p&gt;But not just the first "Why", but rather the "Root Cause" behind it as well.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example:
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Why do I want to go into web development?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I want to build websites from the ground up.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why do I want to build websites from the ground up?&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;As a designer who also accounts manages, I often feel ignorant in client meetings when technical/code questions come up. Learning how to code will help me feel capable.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Root Cause Why:&lt;/strong&gt; &lt;em&gt;I want to become a developer to feel empowered and capable as a web creator.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-paint-the-why" class="anchor"&gt;
  &lt;/a&gt;
  5. Paint The "Why" 🧐
&lt;/h2&gt;

&lt;p&gt;Having a powerful and emotionally resonant "why", is a huge motivator in the beginning. Over time, however, this can feel too broad, compared to the sacrifices being made. "Is this all really worth it?" kept creeping in when things got difficult.&lt;/p&gt;

&lt;p&gt;This is why painting a clear and expansive picture of the benefits of the "why" is important. &lt;/p&gt;

&lt;p&gt;One of my other "Why's" for changing careers was for more earning power. Root Cause "Why": To buy a house in a specific timeline and be able to own it outright in a specific timeline. &lt;/p&gt;

&lt;p&gt;Every few months my wife and I painted in that picture a bit more... &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What sort of house and where? &lt;/li&gt;
&lt;li&gt;What experiences would we have in the rooms?&lt;/li&gt;
&lt;li&gt;Who might be our realtor? &lt;/li&gt;
&lt;li&gt;If it has a garage maybe we could pick up new hobbies like cycling.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Continually filling in the details helps me keep motivated to learn one more thing or get up a bit earlier when I am tired.  &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-set-the-goal-gt-lock-it-in" class="anchor"&gt;
  &lt;/a&gt;
  6. Set The Goal —&amp;gt; Lock It In 🎯
&lt;/h2&gt;

&lt;p&gt;Once I figured out what I want to do and why it was important to do, the question becomes how to go about accomplishing it. &lt;/p&gt;

&lt;p&gt;In the example of changing careers, there were several things that needed to happen first. In other words, I needed to set some goals. &lt;/p&gt;

&lt;p&gt;Now it easy to set a goal within the moment, but I often find it hard to follow through when life gets in the way. I actually tried to get into development back in 2017 but lacked the follow-through to make a meaningful change.&lt;/p&gt;

&lt;p&gt;So I have since learned to adopt a "Lock It In" mentality. The Bootcamp was not cheap, but we decided to pay for it upfront in cash, from our savings. This way there was a monetary loss if I quit. &lt;/p&gt;

&lt;p&gt;I also told as many people as I could (including the admissions office) about why I am choosing this goal and where I could see myself potentially failing in it. Calling out the reasons why I might quit ahead of time, helped prevent them from becoming options in the future.&lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-levelup-trio" class="anchor"&gt;
  &lt;/a&gt;
  7. Level-Up Trio ↗️
&lt;/h2&gt;

&lt;p&gt;I am a multi-approach type of learner. Through trial and error, I found that developing in 3 core areas helps me retain information and grow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Courses&lt;/strong&gt;&lt;br&gt;
This is where I got the technical knowledge and also discover new ways of thinking. I love video instruction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Projects&lt;/strong&gt;&lt;br&gt;
Building things allow me to apply the technical knowledge and feel empowered by seeing it work. (Huge motivation boost.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Writing&lt;/strong&gt;&lt;br&gt;
This is so important to further engrain the concepts from the courses and discoveries in the projects.&lt;/p&gt;

&lt;p&gt;I try to at all times have one in each category active. A highly productive day to me is doing a course in the morning, spending a few hours coding, and splitting up the time by writing. (Like I am doing right now. 😉)&lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-trello-roadmap" class="anchor"&gt;
  &lt;/a&gt;
  8. Trello Roadmap 🚏
&lt;/h2&gt;

&lt;p&gt;With many goals, big and small, I find it really helpful to create a roadmap in &lt;a href="https://trello.com/"&gt;Trello&lt;/a&gt;. I like to follow a Kataban workflow, where tasks start from a "todo", move to "doing" and then archive in a "done" list. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jhBZ_S-V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/39mf5141c8pkzt53sm36.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jhBZ_S-V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/39mf5141c8pkzt53sm36.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the above set-up, there are three "ToDo" lists. One for each of my "Level-Up Trio" areas that we talked about above. It allows me to quickly capture ideas and flesh them out later.&lt;/p&gt;

&lt;p&gt;Under "doing" I do try to have one of each topic area in progress as previously mentioned, but this is a flexible rule. For example, I am currently taking two courses in React to prepare for an upcoming job. So I'm ok with not doing a project during this time.&lt;/p&gt;

&lt;p&gt;After "doing" there is a "Blog Batching" list, which holds articles I have written already and are ready for scheduling. That way if there is a really busy week, I have a post already lined up for that Monday. &lt;/p&gt;

&lt;p&gt;Lastly, everything I completed is stored under "Done", with the date it was finished on. &lt;/p&gt;

&lt;p&gt;This set-up lets me track my overall progress and keep a balanced approach to my coding journey. &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-source-of-truth-list" class="anchor"&gt;
  &lt;/a&gt;
  9. Source Of Truth List ✔️
&lt;/h2&gt;

&lt;p&gt;On the topic of Trello, I also suggest using it to be a "Single Source Of Truth" solution.&lt;/p&gt;

&lt;p&gt;I learned the need for this during my last role as a Digital Design Director. It required managing the workload for a global team in different timezones, multiple client accounts, and my own project load. &lt;/p&gt;

&lt;p&gt;This meant a lot of communications over email, Slack, text message, other Trello boards, Basecamp, Zoom calls... &lt;/p&gt;

&lt;p&gt;It was a mess. I felt overwhelmed by the sheer amount of notification coming across the screen. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt; &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Decide if the incoming notification was urgent. &lt;/li&gt;
&lt;li&gt;If it was, then it became the new priority. &lt;/li&gt;
&lt;li&gt;If it wasn't then I'd capture it as a &lt;em&gt;simple&lt;/em&gt; card on Trello, indicating the nature of the alert and where it was sent from.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If an email came in I would create a card that says "Check XYZ email". &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a Slack channel started revving up, a card called "Respond to Slack channel Accounting before 3 pm" went on the list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a team member had a non-urgent project question, I posted a card called "Schedule project review with XYZ". &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This way I only had to check one place for my next steps and didn't have to worry if I had left something urgent waiting. &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-schedule-tasks" class="anchor"&gt;
  &lt;/a&gt;
  10. Schedule Tasks 📅
&lt;/h2&gt;

&lt;p&gt;I found it very beneficial to schedule tasks in my calendar or &lt;a href="https://todoist.com/"&gt;ToDoist app&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;This was especially important when I transitioned from full-time work to freelancing. Without structure and deadlines, I began to lose motivation to get things done. &lt;/p&gt;

&lt;p&gt;When I see there is a 1-hour block available for a course and then 3 hours following that of client work, I am more inclined to make the most out of that hour. &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-form-weekly-accountability-groups" class="anchor"&gt;
  &lt;/a&gt;
  11. Form Weekly Accountability Group(s) 👋
&lt;/h2&gt;

&lt;p&gt;Developers and Designers can both fall into isolation easily. (All we often need is some good music and a fast internet connection to be good for the next 10 hours.)&lt;/p&gt;

&lt;p&gt;This is especially true during pandemic times, where many people are now remote. For me, isolation can breed self-doubt and/or make me lose perspective on why it is important to keep pushing towards the goal. &lt;/p&gt;

&lt;p&gt;Developing strong accountability groups of people with the same or similar goals can really help with this. Texting often and meeting over Zoom regularly has been a powerful way to stay on track. &lt;/p&gt;

&lt;p&gt;I currently have two different accountability Zoom meetings a week, both of which help motivate me in different areas.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The first one is with my coding buddies from Bootcamp. We check-in on our current dev projects and courses. If a technical roadblock appears we help each other solve it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The second is with a buddy who is developing his own business. While our industries are different, we encourage each other on the broader subjects. Things like: freelance, job searching, goal setting, and content creating. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-find-a-mentors" class="anchor"&gt;
  &lt;/a&gt;
  12. Find a Mentor(s) 🎓
&lt;/h2&gt;

&lt;p&gt;Accountability groups are often made up of peers that are at a similar place as you. A mentor however is usually a few or many steps ahead. While they can provide encouragement, they are pivotal in providing direction and are a mile-marker to strive for.&lt;/p&gt;

&lt;p&gt;I am lucky enough to have several mentors in both development and life that help me stay, or sometimes adjust the course. &lt;/p&gt;

&lt;p&gt;My development mentors have been guides in suggesting what technologies I should learn next and stack to use in projects. When a bug comes up that I've spent hours on, they may help point me in the right direction to solve it. &lt;/p&gt;

&lt;p&gt;My life mentors have helped me form the "Why" behind the big goals and suggest important questions I need to ask when I am making key decisions.  &lt;/p&gt;

&lt;p&gt;As you can see above, a good mentor doesn't give me the answer outright. They help me solve it on my own. &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#13-no-matter-what-start" class="anchor"&gt;
  &lt;/a&gt;
  13. No Matter What, Start 🟢
&lt;/h2&gt;

&lt;p&gt;I hate to admit it, but my first response when facing a project is often "I can't do this". I'm scared of the unknown failures I might fall too. I'm overwhelmed by both the details available and the details I need to still discover to be successful...&lt;/p&gt;

&lt;p&gt;So what do I often feel like doing? Procrastinate.  &lt;/p&gt;

&lt;p&gt;Here is the thing. Whether I am scared, overwhelmed, or anxious — the thing I need to accomplish won't just go away. The longer I wait, the only thing progressing is my fear. That is it. &lt;/p&gt;

&lt;p&gt;So I have since learned to start anyways. I don't need to know all the details. I just need to pick one thing in the project and start. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In the past that has looked like...&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Opening YouTube and searching for any tutorial.&lt;/li&gt;
&lt;li&gt;Reading the creative brief one page at a time. &lt;/li&gt;
&lt;li&gt;Reaching out to a team member to start a brainstorm.&lt;/li&gt;
&lt;li&gt;Reaching out to technical support for help. &lt;/li&gt;
&lt;li&gt;Opening up VS Code, Figma, Photoshop to pseudo-code/-design the very basics. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usually, once I do one small thing to start, the second step presents itself and then the third. &lt;/p&gt;

&lt;p&gt;The last thing is that of all the scary, overwhelming and stressful projects that I have avoided — I have never once failed in them. &lt;/p&gt;

&lt;p&gt;Looking back the only thing holding the project back was my fear, not a lack of intelligence or experience. Each project has always ended in success, once I took that hard, yet vital first small step. &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#14-attend-demo-days" class="anchor"&gt;
  &lt;/a&gt;
  14. Attend Demo Days 💬
&lt;/h2&gt;

&lt;p&gt;A great way to get out of imposter syndrome and to gain inspiration is to attend a demo day. (Shout out to &lt;a href="https://www.meetup.com/Las-Vegas-Developers/"&gt;Las Vegas Developers Group&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;These online (and someday in-person) meetups allow you to present without any judgment what you have been working on to other developers.&lt;/p&gt;

&lt;p&gt;I found it to be almost like an interview, without any of the pressure. It is fantastic practice and can bring really nice encouragement from the participants. &lt;/p&gt;

&lt;p&gt;The other thing is that it exposes you to what other people are working on. I love seeing someone present their Twitch clone, and then someone else previews a complex database integration. &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#15-go-to-sleep" class="anchor"&gt;
  &lt;/a&gt;
  15. Go To Sleep! 😴
&lt;/h2&gt;

&lt;p&gt;Sleep makes everything better. No, seriously. Going to bed gives our body and mind a chance to process and recover. &lt;/p&gt;

&lt;p&gt;I have (and sometimes still do) pull multiple late nights and all-nighters to get some code or design done. It feels really productive at that moment. I even feel like a "real developer"! &lt;/p&gt;

&lt;p&gt;However, it always comes with a trade-off. For days afterward my body is depleted. My focus is off from not getting enough rest and I can't be as productive or positive. My solutions from the night before don't hold up because I was fatigued. &lt;/p&gt;

&lt;p&gt;Something I am trying to work on now is separating good work from hard work. One doesn't always mean the other and often the best results come when there is balance. &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#16-eat-clean-amp-workout" class="anchor"&gt;
  &lt;/a&gt;
  16. Eat Clean &amp;amp; Workout 💪
&lt;/h2&gt;

&lt;p&gt;I love snacking, coding, and listing to &lt;a href="https://open.spotify.com/playlist/7aLNKf2lzZaKPLPi3o7mRS?si=QZ5gmEjEQ62BP6tIzJuahQ"&gt;Tycho&lt;/a&gt;. That said this practice is working against my ability to grow as a developer. &lt;/p&gt;

&lt;p&gt;It is crazy how much I can eat and how long I can sit when engrossed in a new feature or bug. Just like with a lack of sleep, not moving regularly, and eating junk food depletes my energy. &lt;/p&gt;

&lt;p&gt;I found that working out and refraining from sugar, wheat, cheese, and processed food helps my mood and thinking capabilities. &lt;/p&gt;

&lt;p&gt;A silver lining in the pandemic is my wife working from home, which means a consistent workout partner and accountability in my diet. &lt;/p&gt;

&lt;p&gt;We use lunch breaks to do HITT workouts and eat a lot of veggies and fish now. I still like snacks, but I love the clarity and energy to tackle code more.  &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#17-have-grace" class="anchor"&gt;
  &lt;/a&gt;
  17. Have Grace 🙏
&lt;/h2&gt;

&lt;p&gt;This is an important one. I am very hard on myself. My biggest critic of suggested ideas, final results, and level of work ethic is me. &lt;/p&gt;

&lt;p&gt;When I make a mistake it is often "confirmation" of what I have known all along. When I have a success, it gets written off as a fluke. &lt;/p&gt;

&lt;p&gt;This mindset is not helpful for motivation or productivity. It also isn't a fair and balanced analysis of myself. &lt;/p&gt;

&lt;p&gt;Having grace when I don't do well is so important because...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It gives me permission to try again &lt;/li&gt;
&lt;li&gt;It allows me to set realistic expectations for my goals&lt;/li&gt;
&lt;li&gt;It lets me be free of self-judgment and therefore more creative  when generating ideas&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are also hard on yourself, have grace. I guarantee that you are so much capable, hard-working, and successful than you think you are.&lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#18-bad-interviews-are-a-study-guide" class="anchor"&gt;
  &lt;/a&gt;
  18. Bad Interviews Are A Study Guide 📜
&lt;/h2&gt;

&lt;p&gt;Let's face it, many people don't enjoy technical interviews and I am no exception. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some of my worries...&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Will I know enough?&lt;/li&gt;
&lt;li&gt;If I make a mistake, will I be judged? &lt;/li&gt;
&lt;li&gt;Will a simple question come-up that I just freeze on because of nerves? &lt;/li&gt;
&lt;li&gt;Will a complex question come-up that I answer confidently, to only find it their question and my answer were about different tech stacks? &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If some or all of the above happens, it is ok. After interviews (or client meetings) that go bad, I like to research everything that didn't make sense. &lt;/p&gt;

&lt;p&gt;I end up learning so much because my search is targeted directly because of my weak areas. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/gedalyakrycer/30-web-developer-interview-questions-with-answers-3n3c"&gt;In fact, I ended writing a whole post on questions that tripped me up in interviews.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#19-use-topic-specific-desktops" class="anchor"&gt;
  &lt;/a&gt;
  19. Use Topic Specific Desktops 🖥️
&lt;/h2&gt;

&lt;p&gt;Having an optimal workspace set up can really help with productivity. If you are constantly searching for the right program or tab, you can feel overwhelmed. &lt;/p&gt;

&lt;p&gt;However, with an intentional setup that divides your screens up by topic — you will know where to find the right thing at all times. &lt;/p&gt;

&lt;p&gt;My current setup is an iMac 27" in the middle, an HP 24" monitor on the left, and an Asus 24" monitor on the right. &lt;/p&gt;

&lt;p&gt;This allows me to handle production (design or code) in the middle, with the highest quality and tallest screen. &lt;/p&gt;

&lt;p&gt;The right screen has all of my communication (Slack, Discord, Email, etc). &lt;/p&gt;

&lt;p&gt;The left has google search ready in Chrome and Safari, along with my note taker. (See #21 below.)&lt;/p&gt;

&lt;p&gt;I find this setup especially helpful during screen-sharing because I can take notes on the left while on the right communicate with a team member also on the call. &lt;/p&gt;

&lt;p&gt;Don't have multiple monitors? No worries, the same thing can be accomplished with Mac OS desktops. You can create as many as you like and swipe between them as needed. &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#20-summerise-tutorials" class="anchor"&gt;
  &lt;/a&gt;
  20. Summerise Tutorials 📖
&lt;/h2&gt;

&lt;p&gt;You have probably heard about "Tutorial Hell" and how courses aren't that helpful if you can't remember what to do afterward.&lt;/p&gt;

&lt;p&gt;I find it really helpful to write detailed summaries of concepts from the tutorials. The act of explaining in written form the coding concept, its properties, and how it works as an explanation — ingrains it in my mind. &lt;/p&gt;

&lt;p&gt;It also has the added benefit that those notes can later become content for my blog articles. :) &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#21-always-have-cloud-based-notes-ready" class="anchor"&gt;
  &lt;/a&gt;
  21. Always Have Cloud Based Notes Ready ☁️
&lt;/h2&gt;

&lt;p&gt;I love &lt;a href="https://evernote.com/"&gt;Evernote&lt;/a&gt;. It is one of many cloud base services that lets you take notes, capture code, and even write documentation from any device. (&lt;a href="https://www.notion.so/"&gt;Notion&lt;/a&gt; is another great one.)&lt;/p&gt;

&lt;p&gt;This is a tremendous help to productivity because at a moment's notice you can jot down and pull up key information.&lt;/p&gt;

&lt;p&gt;It is much easier to clean up rough notes from a meeting, then sit there afterward and try to remember what the next steps were. &lt;/p&gt;

&lt;p&gt;I used to do this with Word Docs, but as soon as I changed computers or only had access to my phone — all the notes were no longer available. &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#22-do-the-dishes" class="anchor"&gt;
  &lt;/a&gt;
  22. Do The Dishes 🍽️
&lt;/h2&gt;

&lt;p&gt;It often feels counter-intuitive, but taking chore breaks can help me be productive. &lt;/p&gt;

&lt;p&gt;I found that when I take 10min to do the dishes or fold laundry, my mind is allowed to wander during the mundane and repetitive actions. This actually helps me come up with solutions that I would not have gotten when I actively trying to look for them.&lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#23-watch-movies" class="anchor"&gt;
  &lt;/a&gt;
  23. Watch Movies 🍿
&lt;/h2&gt;

&lt;p&gt;Like the dishes above and sleeping, taking a break can help my mind reset, breathe and process whatever I am working on.&lt;/p&gt;

&lt;p&gt;However, it is important to also do something enjoyable and truly relaxing during some of these breaks. I love movies and it is usually the thing that gets me completely detached. &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#24-screenshot-encouragment" class="anchor"&gt;
  &lt;/a&gt;
  24. Screenshot Encouragment 😍
&lt;/h2&gt;

&lt;p&gt;As mentioned in &lt;code&gt;#17&lt;/code&gt;, I can be pretty hard on myself. Something that helps during those moments, is to refer back to times where I have done a good job. It is proof to my insecure side that I have what it takes and can do _____.&lt;/p&gt;

&lt;p&gt;To help with this, I have created a folder of screenshots of times my bosses gave positive feedback, clients expressed thanks and co-workers gave me encouragement.&lt;/p&gt;

&lt;p&gt;This folder is that little reminder that it was all be ok and if I try hard in this situation, I will most likely succeed again. &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#25-write-consistently" class="anchor"&gt;
  &lt;/a&gt;
  25. Write Consistently ✍️
&lt;/h2&gt;

&lt;p&gt;Throughout this post, I have mentioned writing. It is a great way to help engrain information and ensure that tutorials and notes are captured. &lt;/p&gt;

&lt;p&gt;It is also a powerful way to stay on task throughout your goals. I keep a daily journal to catalog where I am at, what I am struggling with, or if there was a win in the day. &lt;/p&gt;

&lt;p&gt;Looking back, I remember having entries during Bootcamp of thinking I won't make it because Javascript is way too hard. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"I am a designer, my mind doesn't work in the way Javascript requires. I am not sure how this week's homework or the rest of the Bootcamp will go." &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then just a few months later... &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"I am almost done launching my React portfolio with a filtering system! I feel so happy to be able think of something, design it and now code it into life."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Writing doesn't have to be pretty or long or short for that matter. Journalling and keeping an account of the progress just helps to process where we are at. Then a little bit later, surprise ourselves with how far we have come. &lt;/p&gt;

&lt;p&gt;It can be a huge motivator for sure! &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;Thank you for making it all the way down here. &lt;/p&gt;

&lt;p&gt;I still have a long way to go and a lot to learn, but I am so happy and grateful about where I am at right now. It has come from just sticking with it and incrementally trying each day.&lt;/p&gt;

&lt;p&gt;Hopefully, something on this list can help you. I'd love to hear about it if it did and other ways you stay motivated and productive.  Happy Coding! 🤓&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Thumbnail designed with &lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>career</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Native lazy-loading of images with zero Javascript</title>
      <author>Paul Facklam</author>
      <pubDate>Mon, 08 Feb 2021 12:04:18 +0000</pubDate>
      <link>https://dev.to/pfacklam/native-lazy-loading-of-images-with-zero-javascript-3hnf</link>
      <guid>https://dev.to/pfacklam/native-lazy-loading-of-images-with-zero-javascript-3hnf</guid>
      <description>&lt;h1&gt;
  &lt;a href="#about-lazyloading-and-why-you-should-use-it" class="anchor"&gt;
  &lt;/a&gt;
  About lazy-loading and why you should use it
&lt;/h1&gt;

&lt;p&gt;The worldwide web has evolved over the past decades and today's websites consist not only of text and color, but also of countless media content. First and foremost images.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/path/to/your/image.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Awesome image"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;But what does this have to do with lazy-loading?&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lazy-loading is a technique that defers loading of non-critical resources at page load time. Instead, these non-critical resources are loaded at the moment of need. Where images are concerned, "non-critical" is often synonymous with "off-screen".&lt;br&gt;
-- &lt;cite&gt;from &lt;a href="https://web.dev/lazy-loading/"&gt;web.dev/lazy-loading&lt;/a&gt; written by Jeremy Wagner and Rachel Andrew&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means by using lazy-loading we achieve the following benefits over the classic embedding in HTML:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Performance Gains&lt;/strong&gt; - With lazy-loading we can improve loading speed by reducing the number of images that need to be loaded initially.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cost reduction&lt;/strong&gt; - A lazy loaded image may never need to load because the user never reaches the image's position on the page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, sounds good. How can we make that happen? What do we need for this? Let's get started!&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#the-old-javascript-approach" class="anchor"&gt;
  &lt;/a&gt;
  The old (Javascript) approach
&lt;/h1&gt;

&lt;p&gt;There are a lot of snippets and scripts like &lt;a href="https://github.com/verlok/vanilla-lazyload"&gt;vanilla-lazyload&lt;/a&gt; out there that enable lazy-loading via javascript. In almost all cases a data attribute is used to prevent upfront image loading.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;data-src=&lt;/span&gt;&lt;span class="s"&gt;"/path/to/your/image.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Awesome image"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;But how is the image loaded at all? To achieve this, one of the following two techniques is usually used.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Event listeners&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This technique uses event listeners on the scroll, resize and orientationChange events in the browser. If one of the mentioned events is fired and assuming the image enters the viewport the data-src attribute is replaced with the src attribute to trigger the loading call. See it in action:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/imagekit_io/embed/MBNwKB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Intersection Observer API&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unlike the first method, the image is observed (asynchronously) by using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"&gt;IntersectionObserver API&lt;/a&gt;. The image is then loaded by changing the &lt;code&gt;data-src&lt;/code&gt; to &lt;code&gt;src&lt;/code&gt; attribute as soon as it enters the viewport.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/imagekit_io/embed/BPXQZZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;But what if I told you that you don't need Javascript at all? 😲 Yes, you heard right! Zero Javascript.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#the-new-html-approach" class="anchor"&gt;
  &lt;/a&gt;
  The new (HTML) approach
&lt;/h1&gt;

&lt;p&gt;So what does this new way of lazy-loading look like? No worries, it's perfectly simple. You just have to add &lt;code&gt;loading="lazy"&lt;/code&gt; to your image tag and that's it. 😎&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/path/to/your/image.jpg"&lt;/span&gt; &lt;span class="na"&gt;loading=&lt;/span&gt;&lt;span class="s"&gt;"lazy"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;With this new loading attribute, you can completely defer the loading of offscreen images (and even iframes in some browsers) to when they enter the viewport. Enough talking, let's see it in action!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pfacklam/embed/eYBmeyx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The attribute comes with three values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;auto&lt;/strong&gt; - (Default) equal to not including the attribute.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;lazy&lt;/strong&gt; - Defer loading of resources until it enters the viewport.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;eager&lt;/strong&gt; - Load the resource immediately&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What about browser support?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The attribute is supported by almost every popular browser (Chrome, Edge, Opera and Firefox). The implementation for Safari is in &lt;a href="https://bugs.webkit.org/show_bug.cgi?id=200764"&gt;progress and almost done&lt;/a&gt;. If you need more detailed information on cross-browser support &lt;a href="https://caniuse.com/loading-lazy-attr"&gt;caniuse.com&lt;/a&gt; is your friend. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What happens if a browser does not support the attribute?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Browsers that do not support the loading attribute simply ignore it without any side-effects. Fortunately, there is a polyfill at Github available named &lt;a href="https://github.com/mfranzke/loading-attribute-polyfill"&gt;loading-attribute-polyfill&lt;/a&gt; which can be used in those cases.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;HTMLImageElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Cool! The browser supports the loading attribute&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// Houston... We need a polyfill!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Are there any limitations?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Even though it is pretty cool to let the browser do the lazy-loading work, you should be aware of some limitations that come into play when using the attribute:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unlike the Javascript variants, you do not have any influence on the threshold to load the resource. It is part of the browser code and can't be changed for now.&lt;/li&gt;
&lt;li&gt;The attribute can't be used in combination with CSS background images. Maybe it will come in near future but it is definitely not available now.&lt;/li&gt;
&lt;li&gt;If printing the webpage is a real usecase for you, then please notice that there is an &lt;a href="https://bugs.chromium.org/p/chromium/issues/detail?id=875403"&gt;open bug&lt;/a&gt; for the loading attribute.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you liked this post, please give me a ❤️ or even a 🦄 and feel free to follow me on &lt;code&gt;dev.to&lt;/code&gt;. Appreciate it! ✌️&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__248468"&gt;
  
    .ltag__user__id__248468 .follow-action-button {
      background-color: #161616 !important;
      color: #000000 !important;
      border-color: #161616 !important;
    }
  
    &lt;a href="/pfacklam" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y0Dh__8n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8OJ8JD0n--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/248468/1a2f6ad3-a625-4a72-be2e-7c104d4235b9.jpeg" alt="pfacklam image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/pfacklam"&gt;Paul Facklam&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/pfacklam"&gt;In my 8+ years as a professional and passionate software developer at click solutions, I was able to gain in-depth knowledge of Javascript (React), CSS and HTML.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>A Quick Guide to Get Started with JavaScript Classes</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 08 Feb 2021 08:10:46 +0000</pubDate>
      <link>https://dev.to/alexdevero/a-quick-guide-to-get-started-with-javascript-classes-2033</link>
      <guid>https://dev.to/alexdevero/a-quick-guide-to-get-started-with-javascript-classes-2033</guid>
      <description>&lt;p&gt;JavaScript classes are popular feature of JavaScript. This tutorial  will help you learn what you should know so you can get started with JavaScript classes. You will learn about class constructor, properties and methods. You will also learn what public, static and private class fields are.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-quick-introduction" class="anchor"&gt;
  &lt;/a&gt;
  A quick introduction
&lt;/h2&gt;

&lt;p&gt;Before we dive into how to get started with JavaScript classes, let's quickly talk about few things. First, classes were added to JavaScript in ES6 specification (ECMAScript 2015). Second, they are not a new feature per se. Classes basically provide a different way to &lt;a href="https://blog.alexdevero.com/create-objects-in-javascript/"&gt;create objects&lt;/a&gt; and work with &lt;a href="https://blog.alexdevero.com/prototype-prototypal-inheritance/"&gt;prototypes&lt;/a&gt; and inheritance.&lt;/p&gt;

&lt;p&gt;This is also why many JavaScript developers call classes a syntactic sugar. They are correct. Classes are a syntactic sugar. Under the hood, you are still working with objects, prototypes and so on. The only real difference is in the syntax you are using. Another is that your code will not work in IE. &lt;a href="https://babeljs.io/"&gt;Babel&lt;/a&gt; will help you fix this.&lt;/p&gt;

&lt;p&gt;That being said, there is nothing wrong with using JavaScript classes over other older options. It is mainly a matter of your preference. If you like them, use them. If you don't, don't. Now, let's take a look at what you need to know to get started with JavaScript classes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-syntax" class="anchor"&gt;
  &lt;/a&gt;
  The syntax
&lt;/h2&gt;

&lt;p&gt;The syntax of classes is easy to learn and remember. Every class starts with &lt;code&gt;class&lt;/code&gt; keyword. Next comes body of the class, a block of code wrapped with curly brackets. There are no parentheses and parameters you know from &lt;a href="https://blog.alexdevero.com/javascript-functions-pt1/"&gt;functions&lt;/a&gt;. When you declare new class, the convention is to start with a capital letter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create new class called "MyClass":&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Body of the class.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#classes-constructor-and-parameters" class="anchor"&gt;
  &lt;/a&gt;
  Classes, constructor and parameters
&lt;/h2&gt;

&lt;p&gt;When you declare new class there are no parentheses where you could specify parameters. This doesn't mean that classes don't support parameters. They do. They just work with them in a different way. When you want to specify parameters for your class you have to use method called &lt;code&gt;constructor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This &lt;code&gt;constructor&lt;/code&gt; is a unique method. You can create it only inside a class and only once. If you don't create this method yourself, JavaScript will automatically use default that is built inside every class. The main job of this method is to execute tasks you have specified when you create a new instance of a class.&lt;/p&gt;

&lt;p&gt;Instance is basically a new object based on a specific class, and it inherits all properties and methods defined in that class. Every time you create new instance of a class it will also automatically invoke the &lt;code&gt;constructor&lt;/code&gt; method. This is useful when you want to do something when you create new class instance.&lt;/p&gt;

&lt;p&gt;For example, assigning properties with initial values. Another thing &lt;code&gt;constructor&lt;/code&gt; allows is specifying parameters. The &lt;code&gt;constructor&lt;/code&gt; method is a normal method. As such, it can also accept parameters. If you specify some parameter for the &lt;code&gt;constructor&lt;/code&gt; method these parameters will become parameters of the class itself.&lt;/p&gt;

&lt;p&gt;When you create new instance of the class, you can pass in some values as arguments, based on the parameters of the &lt;code&gt;constructor&lt;/code&gt;. Otherwise, you can omit any parameters and use just the &lt;code&gt;constructor&lt;/code&gt; to do some initial tasks. If you define your own &lt;code&gt;constructor&lt;/code&gt;, and replace the default, do at the top of the class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create new class "MyClass" with constructor,&lt;/span&gt;
&lt;span class="c1"&gt;// but without any parameters.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Create constructor method without any parameters&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Code that will be executed&lt;/span&gt;
    &lt;span class="c1"&gt;// when a new class instance is created.&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// Create new class "MyClass"&lt;/span&gt;
&lt;span class="c1"&gt;// that accepts two parameters: name and age.&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Create constructor method&lt;/span&gt;
  &lt;span class="c1"&gt;// and specify "name" and "age" parameters.&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Create properties "name" and "age" on the class&lt;/span&gt;
    &lt;span class="c1"&gt;// and assign them values passed as arguments&lt;/span&gt;
    &lt;span class="c1"&gt;// for "name" and "age" parameters.&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#this-and-classes" class="anchor"&gt;
  &lt;/a&gt;
  this and classes
&lt;/h2&gt;

&lt;p&gt;When you work with JavaScript classes it is very likely you will see the &lt;a href="https://blog.alexdevero.com/this-in-javascript-works/"&gt;this keyword&lt;/a&gt; a lot. Basically all you need to know is this. When you use &lt;code&gt;this&lt;/code&gt; inside a class it will refer to the class itself. When you create new instance of that class, it will refer to that very instance.&lt;/p&gt;

&lt;p&gt;One thing that can help you is using your imagination. When you see &lt;code&gt;this&lt;/code&gt; inside a class you can imagine replacing that &lt;code&gt;this&lt;/code&gt; with the name of the class you are currently working with. This is, theoretically speaking, what's happening.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create new class:&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Create constructor and define one parameter:&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This:&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
    &lt;span class="c1"&gt;// Can be translated here to:&lt;/span&gt;
    &lt;span class="c1"&gt;// MyClass.name = name&lt;/span&gt;

    &lt;span class="c1"&gt;// When you create an instance of MyClass&lt;/span&gt;
    &lt;span class="c1"&gt;// it can be translated here to:&lt;/span&gt;
    &lt;span class="c1"&gt;// InstanceOfMyClass.name = name&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#class-properties-and-methods" class="anchor"&gt;
  &lt;/a&gt;
  Class properties and methods
&lt;/h2&gt;

&lt;p&gt;Every class can have infinite number of properties, just like any object. In the beginning, there was only one way to define these properties. You could define properties only inside the &lt;code&gt;constructor&lt;/code&gt; method. Note that it doesn't matter if the &lt;code&gt;constructor&lt;/code&gt; method accepts any parameter.&lt;/p&gt;

&lt;p&gt;Even if the &lt;code&gt;constructor&lt;/code&gt; method doesn't accept any, defining class properties was still possible only inside it. This changed only to some degree. The &lt;code&gt;constructor&lt;/code&gt; method is still the only place to define parameters for the class and assign their values to some class properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create new class:&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Create constructor and define one parameter:&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Create class property called "name"&lt;/span&gt;
    &lt;span class="c1"&gt;// and assign it a value of "name" parameter&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;

    &lt;span class="c1"&gt;// Create additional class properties:&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;isHuman&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAlive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Other ways to create class properties are class fields. The names class fields and class properties are almost the same. Difference is that properties are defined inside &lt;code&gt;constructor&lt;/code&gt; method while class fields are defined outside it, inside the class body. Other than that, class properties and class fields are basically interchangeable.&lt;/p&gt;

&lt;p&gt;At this moment, there are three types of class fields: public, static and private. We will talk about each in the next section. But first, let's quickly talk about class methods.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#class-methods" class="anchor"&gt;
  &lt;/a&gt;
  Class methods
&lt;/h3&gt;

&lt;p&gt;When you want to create class method, you define it right inside the class body. Defining a class method is as simple as defining a function. There is one difference. When you create a class method you omit the &lt;code&gt;function&lt;/code&gt; keyword and start with the method name. And, no need for the &lt;code&gt;this&lt;/code&gt; keyword when you define the method.&lt;/p&gt;

&lt;p&gt;However, you will need &lt;code&gt;this&lt;/code&gt; if you want to reference some property or method of the class you are working with. When you want to call some class method you create new instance of the class. Then, you call the method on that instance, using dot notation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create new class with method:&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Create class method:&lt;/span&gt;
  &lt;span class="nx"&gt;myMethod&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create instance of "MyClass":&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myClassInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// Call "myMethod" on "myClassInstance" instance:&lt;/span&gt;
&lt;span class="nx"&gt;joe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myMethod&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Hello!'&lt;/span&gt;


&lt;span class="c1"&gt;// Create new class with method using this:&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Create constructor and define one parameter:&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Create class property called "name"&lt;/span&gt;
    &lt;span class="c1"&gt;// and assign it a value of "name" parameter&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Create class method:&lt;/span&gt;
  &lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello, my name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.`&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create instance of "MyClass":&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Call "sayHi" on "joe" instance:&lt;/span&gt;
&lt;span class="nx"&gt;joe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Hello, my name is Joe.'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#public-class-fields-and-methods" class="anchor"&gt;
  &lt;/a&gt;
  Public class fields and methods
&lt;/h3&gt;

&lt;p&gt;Class properties and public class field are very similar. The main difference is that you define class properties in the &lt;code&gt;constructor&lt;/code&gt; method. With class fields, you don't need the &lt;code&gt;constructor&lt;/code&gt;, because they are defined outside it. This is also means that if you don't need the &lt;code&gt;constructor&lt;/code&gt; for something else, you can omit it.&lt;/p&gt;

&lt;p&gt;However, if you want to define class parameters or do some stuff during class instantiation, you will still have to use &lt;code&gt;constructor&lt;/code&gt;. Another important difference is that public fields don't use the &lt;code&gt;this&lt;/code&gt; keyword. When you define new public field, you start with the name of the field (property), not the &lt;code&gt;this&lt;/code&gt; and dot.&lt;/p&gt;

&lt;p&gt;One thing about public class fields and access. Fields you define as public will be always accessible from the inside as well as the outside of the class, and its instances. This means that you will be able to access and modify them as you want. The same applies to public methods. They will be all accessible and modifiable.&lt;/p&gt;

&lt;p&gt;Last thing. Any class field and method you define are public by default. You can change this by defining the field or method either as static or private. This means using corresponding keyword. Otherwise, JavaScript will automatically assume that the field or method should be public and make them that way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create new class:&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Define class fields for "numOfWheels" and "fuel":&lt;/span&gt;
  &lt;span class="nx"&gt;numOfWheels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
  &lt;span class="nx"&gt;fuelType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;electric&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

  &lt;span class="c1"&gt;// Define public method:&lt;/span&gt;
  &lt;span class="nx"&gt;startEngine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Engine is running.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create instance of Car class:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tesla&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// Log the value of public class field "fuelType":&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tesla&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fuelType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'electric'&lt;/span&gt;

&lt;span class="c1"&gt;// Call the "startEngine" method:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tesla&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startEngine&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Engine is running.'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#static-class-fields-and-methods" class="anchor"&gt;
  &lt;/a&gt;
  Static class fields and methods
&lt;/h3&gt;

&lt;p&gt;The second type of class fields and methods are static. When you want to define a static class field or method you add the keyword &lt;code&gt;static&lt;/code&gt; before the field or method name. The main difference between static class fields and public class fields is that you can't access static class fields on instances of the class.&lt;/p&gt;

&lt;p&gt;You can access static class fields only on the class itself. The same applies to static methods. You can't call them on instances of the class. You can call them only on the class itself. Static fields and methods are often used for utility purposes. For example, doing cleanups, updates or having an evidence of existing class instances.&lt;/p&gt;

&lt;p&gt;When you work with static class fields remember that methods that can work with them are only static methods. You can't access static class fields with neither public nor private methods, only static.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Declare static property to keep track&lt;/span&gt;
  &lt;span class="c1"&gt;// of how many instances of Car has been created.&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;numOfCopies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// When new instance of Car is created&lt;/span&gt;
    &lt;span class="c1"&gt;// update the number of Car instances:&lt;/span&gt;
    &lt;span class="nx"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numOfCopies&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Create static method to access&lt;/span&gt;
  &lt;span class="c1"&gt;// static field "numOfCopies".&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;getNumOfCopies&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Return the value of "numOfCopies" field:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numOfCopies&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Log number of instances of MyClass&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getNumOfCopies&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 0&lt;/span&gt;

&lt;span class="c1"&gt;// Create instance of Car:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;porsche&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// Log number of instances of Car again:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getNumOfCopies&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#private-class-fields-and-methods" class="anchor"&gt;
  &lt;/a&gt;
  Private class fields and methods
&lt;/h3&gt;

&lt;p&gt;Private class fields and methods are the last type of fields and methods you can use. Private class fields and methods are basically the opposite of public fields and methods. When you define some field or method as private you can work with it only inside the class. From the outside, they will be invisible.&lt;/p&gt;

&lt;p&gt;This can be useful when you want to keep some data private. When you want some data to be inaccessible from the outside and also from any class instance. The syntax for private fields and methods is simple. In order to define private field or method start the name with &lt;code&gt;#&lt;/code&gt; (hashtag symbol).&lt;/p&gt;

&lt;p&gt;When you want to access private field, or call private method, you also have to use the hashtag symbol. One interesting thing is that public method can access private fields and methods. So, if you want, you can create private field or method. Then, you can create a public method to access the private field or call the private method. Both things will work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Declare private field "version":&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1.0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

  &lt;span class="c1"&gt;// Create private method "getVersion":&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;getVersion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Create public method "getVersionPublic" to access&lt;/span&gt;
  &lt;span class="c1"&gt;// private field "version":&lt;/span&gt;
  &lt;span class="nx"&gt;getVersionPublic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Return the value of "numOfCopies" field:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Create another public method "callGetVersion"&lt;/span&gt;
  &lt;span class="c1"&gt;// that calls the private method "getVersion":&lt;/span&gt;
  &lt;span class="nx"&gt;callGetVersion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;getVersion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create instance of Car:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// Log number of instances of Car again:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getVersionPublic&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// '1.0'&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;callGetVersion&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// '1.0'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#classes-and-instances" class="anchor"&gt;
  &lt;/a&gt;
  Classes and instances
&lt;/h2&gt;

&lt;p&gt;We already talked about instances of classes a couple of times. It is time to talk about them more. As I mentioned, instances are like new objects you create based on existing classes. The reason for creating new instances is that they automatically inherit properties and methods you defined in the class they are based on.&lt;/p&gt;

&lt;p&gt;This means that you don't have to write the same code over and over again if you want to use it in multiple objects. What you can do is create one class and put the code you want to re-use there. When you need an object that can do all that stuff you can use that class to create new instance.&lt;/p&gt;

&lt;p&gt;This instance will inherit properties and methods you defined in that "parent" class. It will be able to work with these properties and methods. In order to create new instance of class, you declare new variable. On the right side, you use the &lt;code&gt;new&lt;/code&gt; keyword followed by the name of the class you want to instantiate and parentheses.&lt;/p&gt;

&lt;p&gt;If the class accepts any parameters, you pass them inside the parentheses that follow after the name of the class. Otherwise, you leave the parentheses empty. This way, you can create as many instances of a specific class as you want.&lt;/p&gt;

&lt;p&gt;Remember that all properties and their values you "hard-code" in the &lt;code&gt;constructor&lt;/code&gt; of a specific class will be inherited by all instances of that class. Any properties you assign values passed as arguments will be dynamic. They will depend on arguments you use during instantiation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Class without parameters:&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Create constructor:&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Create class property "isAlive" and assign it true.&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAlive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create instance of "MyClass" class:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myClassInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MyClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jessica&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// log the value of "isAlive" property&lt;/span&gt;
&lt;span class="c1"&gt;// on "myClassInstance" instance:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myClassInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAlive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;


&lt;span class="c1"&gt;// Class with one parameter:&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyClassTwo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Create constructor and define one parameter:&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Create class property called "name"&lt;/span&gt;
    &lt;span class="c1"&gt;// and assign it a value of "name" parameter&lt;/span&gt;
    &lt;span class="c1"&gt;// and another boolean property "isAlive".&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAlive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create instance of "MyClassTwo" class&lt;/span&gt;
&lt;span class="c1"&gt;// and pass in argument for "name" parameter:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myClassInstanceTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MyClassTwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jacob&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// log the value of "name" property&lt;/span&gt;
&lt;span class="c1"&gt;// on "myClassInstanceTwo" instance:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myClassInstanceTwo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Jacob'&lt;/span&gt;

&lt;span class="c1"&gt;// Create another instance of "MyClassTwo" class&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myClassInstanceThree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MyClassTwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tobias&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// log the value of "name" property&lt;/span&gt;
&lt;span class="c1"&gt;// on "myClassInstanceTwo" instance:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myClassInstanceThree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Tobias'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-a-quick-guide-to-get-started-with-javascript-classes" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion: A quick guide to get started with JavaScript classes
&lt;/h2&gt;

&lt;p&gt;JavaScript classes are interesting feature that offers a new way of creating objects and working with prototypes and prototypal inheritance. I hope that this short and quick guide helped you understand at least the basics so you can get started with JavaScript classes.&lt;/p&gt;

&lt;p&gt;If you found JavaScript classes interesting, and want to learn more, take a look at JavaScript Classes – A Friendly Introduction &lt;a href="https://blog.alexdevero.com/javascript-classes-pt1/"&gt;part 1&lt;/a&gt; and &lt;a href="https://blog.alexdevero.com/javascript-classes-pt2/"&gt;part 2&lt;/a&gt;. These two tutorials will give you more in-depth information about JavaScript classes and tell you about what we may have skipped in this short guide.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>4 Cool Website and their APIs</title>
      <author>Suraj Vishwakarma</author>
      <pubDate>Mon, 08 Feb 2021 08:09:58 +0000</pubDate>
      <link>https://dev.to/surajondev/4-cool-website-and-their-apis-3d74</link>
      <guid>https://dev.to/surajondev/4-cool-website-and-their-apis-3d74</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hello Guys, It's been quite a time since I published the last blog but finally, I am back with 4 Websites that will help you to resolve problems that you might be facing. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yGBKHBX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/u8eeq5lbwwkx67y80t7a.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yGBKHBX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/u8eeq5lbwwkx67y80t7a.gif" alt="4 Cool Website and their APIs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The cool thing about these websites is that they all provide APIs and you can use that to develop your own application like them. So without further ado, let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#iconfinder" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.iconfinder.com/"&gt;Iconfinder&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Filter through the world's largest marketplace for icons with flexibility ease.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the best places on the internet to grab icons. The free plan gives access to more than 316K icons.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L6U3cVuy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n9pkm3v9wcess5w2mns2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L6U3cVuy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n9pkm3v9wcess5w2mns2.jpg" alt="IconFinder"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can download icons in different sizes, formats (including jpeg, png, SVG, etc.). With their API you can develop an application that can fetch icon data from their icon collection.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virustotal" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.virustotal.com/gui/"&gt;VirusTotal&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Analyze suspicious files and URLs to detect types of malware, automatically share with the security community.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can easily scan local documents or any document on the web (including email attachments) for any malware. This will help you to scan before you download it on your device.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cFHcGKVH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bzgatdwlvzfu9f3w15dl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cFHcGKVH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bzgatdwlvzfu9f3w15dl.png" alt="VirusTotal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;VirusTotal also provides API and you can develop the application using it. They have Public and Premium API for development and commercial purposes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pastebin" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://pastebin.com/"&gt;Pastebin&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A temporary online clipboard for your text and code snippets.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can paste text and code. Herewith login you can edit, delete, and can access any time. With syntax highlighting, you can paste code in 50+ languages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a7hC_r-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ik1dmcoknfnzjn2xu35x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a7hC_r-g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ik1dmcoknfnzjn2xu35x.png" alt="Pastebin"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It also provides API to develop your own application like Pastebin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#siteshot" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.site-shot.com/"&gt;Site-Shot&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;For Capturing a full-length screenshot of a webpage.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can capture screenshots of any website using site-shot. You can manually adjust the resolution to various Desktop, Android Devices, iOS devices.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JTdq8PUJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l129xx3wx17w4co6br66.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JTdq8PUJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l129xx3wx17w4co6br66.jpg" alt="Site-Shot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And Yes, it also provides API which you can get benefit yourself and develop a program like it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#last-note" class="anchor"&gt;
  &lt;/a&gt;
  Last Note
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;I hope this list of websites will help you to ease many problems and also you will use their API to develop your next project. Thank you for reading the blog post.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>python</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>JS: Check if an email is valid</title>
      <author>DevLorenz0</author>
      <pubDate>Sun, 07 Feb 2021 22:34:21 +0000</pubDate>
      <link>https://dev.to/devlorenzo/js-check-if-an-email-is-valid-23m4</link>
      <guid>https://dev.to/devlorenzo/js-check-if-an-email-is-valid-23m4</guid>
      <description>&lt;p&gt;&lt;code&gt;Hello World!&lt;/code&gt; The sixth episode of the series  - A CSS/JS trick in 5 minutes.&lt;br&gt;
My first ever &lt;a href="https://dev.to/devlorenzo/the-fabulous-list-of-all-form-input-types-48ig"&gt;Dev.to article&lt;/a&gt; was about HTML forms, in the last part, I explained you how to check if an email is valid. I will do the same here while going a little bit deeper.&lt;/p&gt;



&lt;p&gt;First We have to know how emails are done. In big lines, we know that their divided into two parts and always contain @. This &lt;a href="https://www.w3resource.com/javascript/form/email-validation.php"&gt;w3 resource&lt;/a&gt; explains that better. &lt;/p&gt;

&lt;p&gt;A base solution can be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function checkEmailValidity (email) {
  return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This function will just check if the email contains one (and doesn't contain more) @. This is better when you want to be inclusive (you think it's better to have some fake email while annulling the possibility to reject the right ones). &lt;/p&gt;

&lt;p&gt;We have to use regex to know if the email is valid, if you don't know how they work, check this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A JavaScript Regular Expression (or Regex) is a sequence of characters that we can utilize to work effectively with strings. Using this syntax, we can search for text in a string, replace substrings in a string or extract information from a string.&lt;br&gt;
Check &lt;a href="https://itnext.io/javascript-fundamentals-understanding-regex-fd81891375e0"&gt;this cool article&lt;/a&gt; to learn more about regex.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;We could also use a more advanced regex to check other parameters such as first character, unallowed characters, or invalid domain names:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function checkEmailValidity (email) 
{
 if (/^[a-zA-Z0-9.!#$%&amp;amp;'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/.test(myForm.emailAddr.value))
  {
    return (true)
  }
    return (false)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;If you need it I also did &lt;a href="https://dev.to/devlorenzo/js-check-if-a-password-is-valid-746"&gt;an article on how to check if a password is valid&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hope this helped and thanks for reading!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please smash that like button to make me understand that you want the series to continue :)&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Express in React! React Backend! Whut?! 🤯</title>
      <author>Orkhan Jafarov</author>
      <pubDate>Sun, 07 Feb 2021 19:36:01 +0000</pubDate>
      <link>https://dev.to/orkhanjafarovr/express-in-react-react-backend-whut-4lkg</link>
      <guid>https://dev.to/orkhanjafarovr/express-in-react-react-backend-whut-4lkg</guid>
      <description>&lt;p&gt;Hey there! One more implemented crazy idea for React&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#idea" class="anchor"&gt;
  &lt;/a&gt;
  Idea
&lt;/h3&gt;

&lt;p&gt;So, long time ago when I was researching &lt;strong&gt;react custom renderer&lt;/strong&gt;, I had a crazy idea to use it for Node.js server/backend. Finally, I've decided to try.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer" class="anchor"&gt;
  &lt;/a&gt;
  Disclaimer ⚠️
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It's not fully-ready solution (in process)&lt;/li&gt;
&lt;li&gt;Don't use it for production&lt;/li&gt;
&lt;li&gt;Yes, I know about scalability, architecture and etc. This is just an experimental project. Relax 🛀&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-it-works" class="anchor"&gt;
  &lt;/a&gt;
  How it works?
&lt;/h3&gt;

&lt;p&gt;It works with express.js framework to run Node.js server. Custom renderer is building express-structured app based on React Components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-it-looks-like-" class="anchor"&gt;
  &lt;/a&gt;
  How it looks like ?
&lt;/h3&gt;

&lt;p&gt;Base code example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactExpress&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./renderer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HomePage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Welcome to home page&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AboutPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;About Company&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Bla bla&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&amp;gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExpressApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;app&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;router&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;get&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;HomePage&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;get&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"*"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Not Found"&lt;/span&gt; &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;router&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;router&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/company"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;get&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/about"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AboutPage&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;router&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;router&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/api"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;post&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/status"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;It is okay, bro&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;router&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;ReactExpress&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ExpressApp&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#instances" class="anchor"&gt;
  &lt;/a&gt;
  Instances
&lt;/h3&gt;

&lt;p&gt;There're components for express.js instances like &lt;code&gt;router, static, get, post and etc.&lt;/code&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#components" class="anchor"&gt;
  &lt;/a&gt;
  Components
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;app /&amp;gt;&lt;/code&gt; - App Instance (props: port)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;static /&amp;gt;&lt;/code&gt; - Static route (props: publicPath, path, options)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;router /&amp;gt;&lt;/code&gt; - Router-Provider (props: path)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;get /&amp;gt;, &amp;lt;post /&amp;gt; and ...&lt;/code&gt; - Route component (props: path, content, handler, status)&lt;/p&gt;

&lt;p&gt;...still in process&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-go-deep-into-route-component" class="anchor"&gt;
  &lt;/a&gt;
  Let's go deep into Route Component
&lt;/h3&gt;

&lt;p&gt;Our route components are &lt;code&gt;&amp;lt;get /&amp;gt;, &amp;lt;post /&amp;gt;, &amp;lt;delete /&amp;gt; and etc.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;They have the same structure. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Response json&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;get&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/status"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;&lt;span class="s2"&gt;'m okay&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Response SSR React-Component&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;get&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/homepage"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Welcome to home page&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Response error&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;get&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/not-found"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Page not found"&lt;/span&gt; &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Response with handler&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;get&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/posts/:id"&lt;/span&gt; &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`id is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// The same for all methods&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;post&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/posts/:id"&lt;/span&gt; &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`id is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#react-api" class="anchor"&gt;
  &lt;/a&gt;
  React API
&lt;/h3&gt;

&lt;p&gt;Currently it's possible to use React Context API.&lt;br&gt;
For example there's a way to get handler's request and response arguments. It used in the project's demo&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../context&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TopNav&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TopWrapper&lt;/span&gt; &lt;span class="nx"&gt;currentPath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;originalUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Logo&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Logo&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NavItem&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/NavItem&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NavItem&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Components&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/NavItem&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NavItem&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://github.com/gigantz/react-xpress&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Github&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/NavItem&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/TopWrapper&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-is-planning" class="anchor"&gt;
  &lt;/a&gt;
  What is planning?
&lt;/h3&gt;

&lt;p&gt;I work on it and I'm trying to improve it, even it's not a good idea to use this kinda renderer for real-world app. But It would be awesome to have contributors to make its DX much better.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#future-of-the-components" class="anchor"&gt;
  &lt;/a&gt;
  Future of the components
&lt;/h3&gt;

&lt;p&gt;I have a plan to make it something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// Add components from the lib&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Middleware&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-xpress&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Make more component based structure&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Get&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/not-found"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Status&lt;/span&gt; &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Content&lt;/span&gt; &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Page is not found"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Using Middlewares&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Get&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/user"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Middleware&lt;/span&gt; &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;checkToken&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Status&lt;/span&gt; &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;401&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Content&lt;/span&gt; &lt;span class="na"&gt;json&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;401&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;No access&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Middleware&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Content&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserPage&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Content&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There're more crazy ideas is in process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#demo" class="anchor"&gt;
  &lt;/a&gt;
  Demo
&lt;/h3&gt;

&lt;p&gt;Here's a working prototype - &lt;a href="http://react-xpress-demo.herokuapp.com/"&gt;http://react-xpress-demo.herokuapp.com/&lt;/a&gt;&lt;br&gt;
Its Github repo - &lt;a href="https://github.com/gigantz/react-xpress"&gt;https://github.com/gigantz/react-xpress&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Feel free to contact me and contribute the project. It's just on its way and just be followed to get updates. Hopefully we'll deliver better product soon. For now you can easily clone the repo and try it.&lt;/p&gt;

&lt;p&gt;I'm also planning to write an article about react custom renderer. I hope you like this kind of experiments.&lt;/p&gt;

&lt;p&gt;Cheers 🎉✨,&lt;br&gt;
Orkhan Jafarov&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>node</category>
    </item>
    <item>
      <title>6 Nifty Python Language Features You Might Not Know About</title>
      <author>Bikramjeet Singh</author>
      <pubDate>Sun, 07 Feb 2021 17:58:58 +0000</pubDate>
      <link>https://dev.to/bikramjeetsingh/6-nifty-python-language-features-you-might-not-know-about-6mi</link>
      <guid>https://dev.to/bikramjeetsingh/6-nifty-python-language-features-you-might-not-know-about-6mi</guid>
      <description>&lt;p&gt;One of the strengths of the Python programming language is that it is both easy for beginners to learn and, at the same time, immensely rewarding for advanced users.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#data-classes" class="anchor"&gt;
  &lt;/a&gt;
  Data classes
&lt;/h1&gt;

&lt;p&gt;Data classes are classes with the sole purpose of acting as containers of data. They usually do not contain any business logic inside them.&lt;/p&gt;

&lt;p&gt;Python provides the &lt;code&gt;@dataclass&lt;/code&gt; decorator which, when added to a class, automatically generates several useful methods so you don't have to write them out by hand. These include the &lt;code&gt;__init__&lt;/code&gt; method for generating a constructor, &lt;code&gt;__str__&lt;/code&gt; and &lt;code&gt;__repr__&lt;/code&gt; for generating string representations and &lt;code&gt;__eq__&lt;/code&gt; for checking instances of the class for equality.&lt;/p&gt;

&lt;p&gt;Defining a data class is simple.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;published_on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
    &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Optionally, you can also set default values for variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"John Doe"&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Unknown"&lt;/span&gt;
    &lt;span class="n"&gt;published_on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For the full list of automatically generated methods, you can check out the &lt;a href="https://docs.python.org/3/library/dataclasses.html"&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#any-amp-all" class="anchor"&gt;
  &lt;/a&gt;
  Any &amp;amp; All
&lt;/h1&gt;

&lt;p&gt;Sometimes you need to have a check on multiple conditions before performing an action, such as in an &lt;code&gt;if&lt;/code&gt; statement. Python provides the boolean &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; operators for evaluating such logical expressions. However, when there are a very large number of conditions in play, your statement might begin to look a bit unwieldy.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;any()&lt;/code&gt; and &lt;code&gt;all()&lt;/code&gt; methods, are simply a shorter and more readable way of evaluating a large number of boolean expressions at once. &lt;code&gt;any()&lt;/code&gt; is equivalent to a series of &lt;code&gt;or&lt;/code&gt; operations, while &lt;code&gt;all()&lt;/code&gt; is equivalent to a series of &lt;code&gt;and&lt;/code&gt; operations.&lt;/p&gt;

&lt;p&gt;Suppose you are given a list of the marks a certain student scored ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;marks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;passing_marks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;... and you want to check if the student qualifies to be promoted to the next year. One way to do this would be to simply join each comparison with the &lt;code&gt;and&lt;/code&gt; operator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;passing_marks&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;passing_marks&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;passing_marks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;promoted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;promoted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can make this code slightly more readable by using the &lt;code&gt;all()&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;passing_marks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;passing_marks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;passing_marks&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="n"&gt;promoted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;promoted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, you can combine it with a list comprehension to get a sweet, concise solution:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;subject_marks&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;passing_marks&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;subject_marks&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="n"&gt;promoted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;promoted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The capabilities of these two functions can further be extended by combining them with the &lt;code&gt;not&lt;/code&gt; operator.&lt;/p&gt;

&lt;p&gt;Below is a quick summary of these methods.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;any()&lt;/code&gt;: Returns &lt;code&gt;True&lt;/code&gt; if at least one of the arguments evaluates to True&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;all()&lt;/code&gt;: Returns &lt;code&gt;True&lt;/code&gt; if all of the arguments evaluate to True&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;not any()&lt;/code&gt;: Returns &lt;code&gt;True&lt;/code&gt; if none of the arguments evaluate to True&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;not all()&lt;/code&gt;: Returns &lt;code&gt;True&lt;/code&gt; if at least one of the arguments evaluates to False&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#advanced-slice-operator" class="anchor"&gt;
  &lt;/a&gt;
  Advanced Slice Operator
&lt;/h1&gt;

&lt;p&gt;The slice operator is commonly used to access certain parts of a list or string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Python is awesome!"&lt;/span&gt;
&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# 'h'
&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# 'on '
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It has many more advanced usages as well. For example, negative indexes can be used to slice from the end instead of the beginning.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# 'e'
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can also specify a 'step' to skip over a certain number of elements while slicing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# 'to s'
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The step value can be negative. This causes the list/string to be sliced in reverse.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# ' inh'
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;A common shortcut to reverse an array or list is to slice it with &lt;code&gt;[::-1]&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# '!emosewa si nohtyP'
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#argument-unpacking" class="anchor"&gt;
  &lt;/a&gt;
  Argument Unpacking
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt; are special operators that allow multiple items to be packed into (or unpacked from) a single variable.&lt;/p&gt;

&lt;p&gt;You might have seen the words &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt; present in the definitions of functions.  When present in the context of a function definition, the &lt;code&gt;*&lt;/code&gt; operator combines multiple arguments into a single tuple, while the &lt;code&gt;**&lt;/code&gt; operator combines multiple keyword arguments into a dictionary.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;

&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;print_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firstname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Bikramjeet"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lastname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Singh"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;On the other had, when present in the context of a function &lt;em&gt;call&lt;/em&gt;, they do the opposite - the &lt;code&gt;*&lt;/code&gt; operator spreads the contents of a list/tuple into individual arguments, while the &lt;code&gt;**&lt;/code&gt; operator spreads the contents of a dictionary into individual keyword arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;list_of_nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;list_of_nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"firstname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Bikramjeet"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"lastname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Singh"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;print_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In functions that have a large number of parameters, it is often convenient to collect them into a dictionary before passing them to the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg4&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'arg1'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;...}&lt;/span&gt;
&lt;span class="n"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Another use of these operators is to combine lists and dictionaries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;combined_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;combined_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#functools" class="anchor"&gt;
  &lt;/a&gt;
  Functools
&lt;/h1&gt;

&lt;p&gt;Python supports &lt;a href="https://composingprograms.com/pages/16-higher-order-functions.html"&gt;higher order functions&lt;/a&gt; - functions that can take and return other functions. The concept of higher order functions is central to several other Python features, such as decorators.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://docs.python.org/3/library/functools.html"&gt;functools&lt;/a&gt; package provides useful helper functions for when you're working with higher order functions. Let's take a look at some of them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#partial" class="anchor"&gt;
  &lt;/a&gt;
  partial
&lt;/h2&gt;

&lt;p&gt;There are cases where you might want to create a 'specialized' version of an existing, more generalized function. This is done by 'freezing' the values of some of the base functions parameters.&lt;/p&gt;

&lt;p&gt;Consider a simple function that calculates the nth power of a number:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;

&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# returns 8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The operation of squaring a number is common enough that it is worth it to create a dedicated function for it, simply so we don't have to pass 2 as an argument each time. However, instead of rewriting our &lt;code&gt;pow&lt;/code&gt; function, we can simply reuse it with the &lt;code&gt;functools.partial&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;square&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# returns 16, equivalent to pow(4, 2)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Similarly, we can also create a cube function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;cube&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# returns 125, equivalent to pow(5, 3)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#cachedproperty" class="anchor"&gt;
  &lt;/a&gt;
  cached_property
&lt;/h2&gt;

&lt;p&gt;This is a decorator that allows you to cache the return values of potentially expensive methods. For example, database calls tend to be relatively long-running operations, so it's a good idea to cache them if you don't anticipate their values to change very often.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cached_property&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_expensive_method&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The method is evaluated in full the first time it is called, and its return value cached. The next time the same method is called, its result can simply be fetched from the cache.&lt;/p&gt;

&lt;p&gt;Note that the &lt;code&gt;cached_property&lt;/code&gt; decorator is only available from Python 3.8 onwards. For lower versions of Python, there are &lt;a href="https://pypi.org/project/cached-property/"&gt;separate packages&lt;/a&gt; available.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#totalordering" class="anchor"&gt;
  &lt;/a&gt;
  total_ordering
&lt;/h2&gt;

&lt;p&gt;When you define a custom class, especially one that is a container for numeric data of some sort, it is useful to define comparison methods &lt;code&gt;__eq__&lt;/code&gt; (equals), &lt;code&gt;__gt__&lt;/code&gt; (greater than), &lt;code&gt;__ge__&lt;/code&gt; (greater than or equal to), &lt;code&gt;__lt__&lt;/code&gt; (less than) &amp;amp; &lt;code&gt;__le__&lt;/code&gt; (less than or equal to) to make comparing objects of those classes easier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Distance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;km&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="c1"&gt;# Kilometers
&lt;/span&gt;    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="c1"&gt;# Meters
&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;km&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;km&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;km&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__eq__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;km&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;km&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__gt__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;km&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;km&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;km&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;km&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;However, defining all of these methods can be cumbersome and result in a large amount of boilerplate code, especially since there are 5 of them. Luckily you don't have to! Given the logic of &lt;code&gt;__eq__&lt;/code&gt; and any one of &lt;code&gt;__gt__&lt;/code&gt;, &lt;code&gt;__ge__&lt;/code&gt;, &lt;code&gt;__lt__&lt;/code&gt; or &lt;code&gt;__le__&lt;/code&gt;, all the other comparison methods can be derived.&lt;/p&gt;

&lt;p&gt;For example, in the example above, the &lt;code&gt;__le__&lt;/code&gt; method can be derived as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__le__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is what the &lt;code&gt;@total_ordering&lt;/code&gt; decorator does. When applied onto a class that defines at least the &lt;code&gt;__eq__&lt;/code&gt; and one other comparison method, it derives all the others for you.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_ordering&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Distance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#dundermagic-methods" class="anchor"&gt;
  &lt;/a&gt;
  Dunder/Magic Methods
&lt;/h1&gt;

&lt;p&gt;Dunder (double underscore) methods are special methods that allow you to make use of Python's built-in operators and keywords, such as &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;len&lt;/code&gt;, etc in user-defined classes. This is very useful in making code more concise and readable. You can read more about dunder methods in my previous article, &lt;a href="https://dev.to/bikramjeetsingh/how-to-write-better-python-classes-using-magic-methods-4166"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Image by &lt;a href="https://pixabay.com/users/paulbr75-2938186/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=1674179"&gt;Paul Brennan&lt;/a&gt; from &lt;a href="https://pixabay.com/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=1674179"&gt;Pixabay&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Build a Dogecoin Price Ticker using React</title>
      <author>Nitin Ranganath</author>
      <pubDate>Sun, 07 Feb 2021 17:49:25 +0000</pubDate>
      <link>https://dev.to/itsnitinr/build-a-dogecoin-price-ticker-using-react-54o0</link>
      <guid>https://dev.to/itsnitinr/build-a-dogecoin-price-ticker-using-react-54o0</guid>
      <description>&lt;p&gt;Projects. We all love them. Especially the ones that really help us to nail down the fundamentals and learn something new. Dogecoin has been trending since the past week so why don't we build something related to it. &lt;/p&gt;

&lt;p&gt;In this project, we will be building a simple Dogecoin price ticker, a web app which will fetch the lowest price of the day, the highest price of the day and the last traded price via an API and will be updated every 10 seconds. Throughout the project, you will learn about setting up a React project, building components, props, state and the most used React hooks such as &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useEffect&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XwCU5rdX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/7KYp1to.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XwCU5rdX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/7KYp1to.png" alt="Dogecoin Price Ticker Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've broken down the project into small sections and if you face any issues in following along, you can check the GitHub repo commits to look at the changes I've made.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Live Demo:&lt;/strong&gt; &lt;a href="https://dogecoin-ticker.netlify.app/"&gt;https://dogecoin-ticker.netlify.app/&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Source Code:&lt;/strong&gt; &lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/itsnitinr"&gt;
        itsnitinr
      &lt;/a&gt; / &lt;a href="https://github.com/itsnitinr/dogecoin-ticker"&gt;
        dogecoin-ticker
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A live Dogecoin price ticker built using React
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#creating-a-react-project" class="anchor"&gt;
  &lt;/a&gt;
  Creating a React Project
&lt;/h2&gt;

&lt;p&gt;The first step is to create ourselves a React project. For this purpose, we'll be using &lt;a href="https://create-react-app.dev/"&gt;Create React App&lt;/a&gt; which will help us to focus on our code and not worry about setting up the build tools. The prerequisites are that you'll need NodeJS v8.10 or above and NPM version v5.6 or above.&lt;/p&gt;

&lt;p&gt;Open up your terminal and run the following command in your preferred directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app dogecoin-ticker
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;npx&lt;/code&gt; is a package runner tool that comes with npm. The above command might take 5-10 minutes to complete so grab a cup of coffee and relax!&lt;/p&gt;

&lt;p&gt;Once done, let's hop on to the project directory. For that, you could either use the file explorer or use the following terminal command: &lt;code&gt;cd dogecoin-ticker&lt;/code&gt;. Now, open up the project folder using your favourite text editor and we'll get started with the initial setup in the next section. To start the development server, run &lt;code&gt;npm start&lt;/code&gt; on your terminal in the project folder.&lt;/p&gt;

&lt;p&gt;If you got stuck in any of the steps, check &lt;a href="https://github.com/itsnitinr/dogecoin-ticker/commit/b518292156a8d0cba699c7f495800bf4474c0bbf"&gt;this commit&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initial-setup" class="anchor"&gt;
  &lt;/a&gt;
  Initial Setup
&lt;/h2&gt;

&lt;p&gt;Once we start our development server using &lt;code&gt;npm start&lt;/code&gt;, go to &lt;code&gt;localhost:3000&lt;/code&gt; on your browser and you'll be greeted with a screen like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3zZ9vbCT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.digitalocean.com/articles/66983/React_Dark_BG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3zZ9vbCT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.digitalocean.com/articles/66983/React_Dark_BG.png" alt="CRA Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the default homepage that Create React App has generated for us. Since we don't need anything similar to this, let's start by deleting unwanted files and setting up the project as per our requirements.&lt;/p&gt;

&lt;p&gt;The folder structure at this moment looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dogecoin-ticker
- public
    - index.html
    - favicon.ico
    - logo192.png
    - logo512.png
    - manifest.json
    - robots.txt
- src
    - App.css
    - App.js
    - App.test.js
    - index.css
    - index.js
    - logo.svg
    - reportWebVitals.js
    - setupTests.js
- node_modules
- .gitignore
- package.json 
- package-lock.json (or yarn.lock if using yarn)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The public folder consists consists of our &lt;code&gt;index.html&lt;/code&gt; file which will be rendered by our browser. Open it up and start by removing the unwanted comments and modifying the title of the webpage. You can also additionally edit the meta tag for description and add your own. Here's how your &lt;code&gt;index.html&lt;/code&gt; should look like once you're done:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"%PUBLIC_URL%/favicon.ico"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"theme-color"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"#000000"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt;
      &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt;
      &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Live dogecoin price ticker built using React"&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"apple-touch-icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"%PUBLIC_URL%/logo192.png"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"manifest"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"%PUBLIC_URL%/manifest.json"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Dogecoin Ticker&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;You need to enable JavaScript to run this app.&lt;span class="nt"&gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"root"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To give a more personal touch to our website, I have also changed the favicon and logo images which you can download from &lt;a href="https://gofile.io/d/LZIVD4"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's move on to the &lt;code&gt;src&lt;/code&gt; folder. We can get rid of most of the files here such as &lt;code&gt;App.test.js&lt;/code&gt;, &lt;code&gt;logo.svg&lt;/code&gt;, &lt;code&gt;reportWebVitals.js&lt;/code&gt; and &lt;code&gt;setupTests.js&lt;/code&gt;. On saving, you might have noticed that our development server throws an error that it failed to compile. Since we deleted the above files, we need to fix the imports as well. Checkout &lt;a href="https://github.com/itsnitinr/dogecoin-ticker/commit/7d3a7dc558217cea3b3ce58566543d97bd4c0669"&gt;this&lt;/a&gt; commit to see the additions and deletions in detail. Our final result will look like this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;App.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Dogecoin Ticker&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We removed all the existing content generated by Create React App and replaced it with a &lt;code&gt;div&lt;/code&gt; containing an &lt;code&gt;h1&lt;/code&gt; with the text 'Dogecoin Ticker'. I've also changed the function to an arrow function but that's not mandatory. This function returns some JSX which is rendered by React. It can be used in multiple places in our project and is known as a component.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./index.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, we've removed the import for &lt;code&gt;reportWebVitals&lt;/code&gt; since we deleted it as it was not necessary. We import the React and ReactDOM libraries which allow us to render a React component onto the DOM. The React component that we're rendering here is the &lt;code&gt;App&lt;/code&gt; component from &lt;code&gt;App.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;App.css &amp;amp; index.css&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In these files, we just remove all the preexisting styles that were generated. Essentially, these are just empty CSS files for now but we'll add some custom styles soon.&lt;/p&gt;

&lt;p&gt;At the end of this section, our website looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OUsTco5a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/eCZRzCA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OUsTco5a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/eCZRzCA.png" alt="Section 2 Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-it-look-pretty" class="anchor"&gt;
  &lt;/a&gt;
  Making It Look Pretty
&lt;/h2&gt;

&lt;p&gt;Since we're just rendering a &lt;code&gt;div&lt;/code&gt; and an &lt;code&gt;h1&lt;/code&gt; currently through the &lt;code&gt;App&lt;/code&gt; component currently, our design looks plain. To spice it up, let's add a logo (which you can download from  &lt;a href="https://gofile.io/d/Ki7rFD"&gt;here&lt;/a&gt;) and some styles. Move the &lt;code&gt;logo.png&lt;/code&gt; to the &lt;code&gt;src&lt;/code&gt; folder once downloaded. &lt;/p&gt;

&lt;p&gt;Begin with importing our logo into our &lt;code&gt;App.js&lt;/code&gt; file like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./logo.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, let's add more content to our &lt;code&gt;App&lt;/code&gt; component such as a title and a subtitle. You can use HTML elements like &lt;code&gt;h1&lt;/code&gt; and &lt;code&gt;h5&lt;/code&gt; for this purpose. To use our imported logo as the source for the &lt;code&gt;img&lt;/code&gt; tag, we use &lt;code&gt;{logo}&lt;/code&gt;. We can use simple JavaScript expressions and variables inside the &lt;code&gt;{}&lt;/code&gt; to render dynamic content. &lt;/p&gt;

&lt;p&gt;For the purpose of styling, we can add &lt;code&gt;classNames&lt;/code&gt; to the HTML entity. We do not use &lt;code&gt;class&lt;/code&gt; since it  can be misinterpreted as a JavaScript class (OOP concept). We can target these classes in our &lt;code&gt;App.css&lt;/code&gt; file to style them. Here's how my &lt;code&gt;App.js&lt;/code&gt; and &lt;code&gt;App.css&lt;/code&gt; files look like:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;App.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./logo.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Dogecoin Logo"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Live Dogecoin Price&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h5&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"subtitle"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Dogecoin To The Moon 🚀🌕&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h5&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;App.css&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.App&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff3b2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("data:image/svg+xml,%3Csvg width='180' height='180' viewBox='0 0 180 180' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M81.28 88H68.413l19.298 19.298L81.28 88zm2.107 0h13.226L90 107.838 83.387 88zm15.334 0h12.866l-19.298 19.298L98.72 88zm-32.927-2.207L73.586 78h32.827l.5.5 7.294 7.293L115.414 87l-24.707 24.707-.707.707L64.586 87l1.207-1.207zm2.62.207L74 80.414 79.586 86H68.414zm16 0L90 80.414 95.586 86H84.414zm16 0L106 80.414 111.586 86h-11.172zm-8-6h11.173L98 85.586 92.414 80zM82 85.586L87.586 80H76.414L82 85.586zM17.414 0L.707 16.707 0 17.414V0h17.414zM4.28 0L0 12.838V0h4.28zm10.306 0L2.288 12.298 6.388 0h8.198zM180 17.414L162.586 0H180v17.414zM165.414 0l12.298 12.298L173.612 0h-8.198zM180 12.838L175.72 0H180v12.838zM0 163h16.413l.5.5 7.294 7.293L25.414 172l-8 8H0v-17zm0 10h6.613l-2.334 7H0v-7zm14.586 7l7-7H8.72l-2.333 7h8.2zM0 165.414L5.586 171H0v-5.586zM10.414 171L16 165.414 21.586 171H10.414zm-8-6h11.172L8 170.586 2.414 165zM180 163h-16.413l-7.794 7.793-1.207 1.207 8 8H180v-17zm-14.586 17l-7-7h12.865l2.333 7h-8.2zM180 173h-6.613l2.334 7H180v-7zm-21.586-2l5.586-5.586 5.586 5.586h-11.172zM180 165.414L174.414 171H180v-5.586zm-8 5.172l5.586-5.586h-11.172l5.586 5.586zM152.933 25.653l1.414 1.414-33.94 33.942-1.416-1.416 33.943-33.94zm1.414 127.28l-1.414 1.414-33.942-33.94 1.416-1.416 33.94 33.943zm-127.28 1.414l-1.414-1.414 33.94-33.942 1.416 1.416-33.943 33.94zm-1.414-127.28l1.414-1.414 33.942 33.94-1.416 1.416-33.94-33.943zM0 85c2.21 0 4 1.79 4 4s-1.79 4-4 4v-8zm180 0c-2.21 0-4 1.79-4 4s1.79 4 4 4v-8zM94 0c0 2.21-1.79 4-4 4s-4-1.79-4-4h8zm0 180c0-2.21-1.79-4-4-4s-4 1.79-4 4h8z' fill='%23676659' fill-opacity='0.13' fill-rule='evenodd'/%3E%3C/svg%3E")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#222831&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.subtitle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#393e46&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For styling, I kept the minimum height as 100vh so that the whole screen is utilised. On top of that, I've added a pale yellow color as background. The background-image property generates a diamond shaped pattern whose code I got from &lt;a href="https://www.heropatterns.com/"&gt;https://www.heropatterns.com/&lt;/a&gt;. Lastly, I've gave the &lt;code&gt;div&lt;/code&gt; the display property of flex and aligned the content to be horizontally and vertically centered. Feel free to copy paste the CSS code.&lt;/p&gt;

&lt;p&gt;I also imported the Raleway font from Google Fonts and applied some basic style reset to the &lt;code&gt;index.css&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.css&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url('https://fonts.googleapis.com/css2?family=Raleway:wght@400;700&amp;amp;display=swap')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;*,&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Raleway&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here's how our website looks like now:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qMPges9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/B6n4qvu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qMPges9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/B6n4qvu.png" alt="Post Design Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We're getting there! If you found any difficulty, refer &lt;a href="https://github.com/itsnitinr/dogecoin-ticker/commit/ce3ac5cbfa77587b8c84ad896c5e05a4a20e35dd"&gt;this commit&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-price-card-component" class="anchor"&gt;
  &lt;/a&gt;
  Building Price Card Component
&lt;/h2&gt;

&lt;p&gt;To display the prices of Dogecoin, you might have noticed that I've used a card-like component. This is a custom React component and in this section, we'll be building just that. Components are highly useful when we want the same layout but with with different content. Instead of writing the HTML code for each card, I can build a component which can take the price as a prop and render the content dynamically. Time to show it in action.&lt;/p&gt;

&lt;p&gt;While component file can be created in the &lt;code&gt;src&lt;/code&gt; folder itself, it is common practice to create a new folder inside &lt;code&gt;src&lt;/code&gt; called &lt;code&gt;components&lt;/code&gt; so that all our React components are at the same place and our &lt;code&gt;src&lt;/code&gt; folder doesn't become too crowded. So, create a &lt;code&gt;components&lt;/code&gt; folder inside the &lt;code&gt;src&lt;/code&gt; folder. Inside the newly created &lt;code&gt;components&lt;/code&gt; folder, let's create a new file called &lt;code&gt;PriceCard.jsx&lt;/code&gt; for our custom component.&lt;/p&gt;

&lt;p&gt;We can use either &lt;code&gt;js&lt;/code&gt; or &lt;code&gt;jsx&lt;/code&gt; extension for components. Both would work perfectly fine and hence, I'm going to use the &lt;code&gt;.jsx&lt;/code&gt; extension this time. The price card component is just a styled &lt;code&gt;div&lt;/code&gt; which takes consists of the type of price (highest of the day, lowest of the day or last traded price) and the price itself as props. Since the price and price type will be different for each card, we can leverage props to make our price card dynamic.&lt;/p&gt;

&lt;p&gt;Here's how I did it:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PriceCard.jsx&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PriceCard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;border&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;high&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;8px solid #f44336&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;low&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;8px solid #4caf50&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;current&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;8px solid #3f51b5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"price-card"&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;borderBottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;border&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"price-type"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;$ &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;PriceCard&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Firstly, we destructure the &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;price&lt;/code&gt; props which will be used to make the content of price card dynamic. For styling the bottom border dynamically (red border for highest of the day, green border for the lowest of the day and blue border for last traded price), I have a created an object with 3 keys: high, low and current. The &lt;code&gt;type&lt;/code&gt; prop will also be one of these values. By adding the &lt;code&gt;style&lt;/code&gt; attribute to the &lt;code&gt;div&lt;/code&gt;, the bottom border style has been made dynamic.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{{borderBottom: border[type]}}&lt;/code&gt; will evaluate to either &lt;code&gt;borderBottom: 8px solid #f44336&lt;/code&gt; , &lt;code&gt;borderBottom: 8px solid #4caf50&lt;/code&gt; or &lt;code&gt;borderBottom: 8px solid #3f51b5&lt;/code&gt;. Notice that we camel case instead of the usual kebab case. For outputting dynamic content in our JSX, we wrap it with &lt;code&gt;{}&lt;/code&gt; such as &lt;code&gt;{price}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that we have built and exported our custom &lt;code&gt;PriceCard&lt;/code&gt; component, let's import it into our &lt;code&gt;App&lt;/code&gt; component and use it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;App.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PriceCard&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/PriceCard&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./logo.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dogecoin Logo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Live Dogecoin Price&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h5&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"subtitle"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Dogecoin To The Moon 🚀🌕&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h5&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"prices-container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PriceCard&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"low"&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PriceCard&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"high"&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PriceCard&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"current"&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Since we don't have the prices retrieved from the API yet, I have set some random price to the price attribute. I've also wrapped all the &lt;code&gt;PriceCard&lt;/code&gt; components in a &lt;code&gt;div&lt;/code&gt; which we'll be using for styling.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Append the following styles to App.css:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.prices-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-evenly&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.price-card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fbf6f0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.price-type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#393e46&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.price&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#222831&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once you have completed the above steps, you will be able to see something like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qAw2d1V9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/dHeuJp0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qAw2d1V9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/dHeuJp0.png" alt="Price Card Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's the &lt;a href="https://github.com/itsnitinr/dogecoin-ticker/commit/9541ab763464d02109185cf5923775d008ccc3c9"&gt;commit for above changes&lt;/a&gt; in case you faced any issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-dogecoin-price-from-api" class="anchor"&gt;
  &lt;/a&gt;
  Getting Dogecoin Price From API
&lt;/h2&gt;

&lt;p&gt;Onto the final part of this project, which is to fetch the highest price of the day, lowest price of the day and last traded price from an API. This is also a great time to introduce you to React Hooks. We'll be using the &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useEffect&lt;/code&gt; hook in this section. &lt;/p&gt;

&lt;p&gt;The API that we'll be using is the &lt;a href="https://github.com/WazirX/wazirx-api"&gt;WazirX API&lt;/a&gt;, which is a free API that allows us to get the price of lots of cryptocurrencies. The endpoint for fetching the price of Dogecoin compared to US Dollar is &lt;a href="https://api.wazirx.com/api/v2/tickers/dogeusdt"&gt;https://api.wazirx.com/api/v2/tickers/dogeusdt&lt;/a&gt;. This returns a JSON with all the data we need. However, to avoid issues due to CORS, use this endpoint: &lt;a href="https://nitinr-cors.herokuapp.com/https://api.wazirx.com/api/v2/tickers/dogeusdt"&gt;https://nitinr-cors.herokuapp.com/https://api.wazirx.com/api/v2/tickers/dogeusdt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The response from looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"at"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1612629617&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"ticker"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"buy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.05"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"sell"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.05001"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"low"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.0447283"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"high"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.0517549"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"last"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.05"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"vol"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"19364432.0"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Also, we will be using &lt;code&gt;axios&lt;/code&gt; to make a GET request to the above endpoint. We need to install &lt;code&gt;axios&lt;/code&gt; before we can begin to use it. So, stop the React development server by pressing Ctrl + C. Now type &lt;code&gt;npm install axios&lt;/code&gt; and run the command. Once done, start the server back using &lt;code&gt;npm start&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Since the price of Dogecoin is subject to change every time we make an API call, we can keep it in the state using the &lt;code&gt;useState&lt;/code&gt; hook. Whenever the API is called, we can set the state to the newly fetched data so that our application can re-render accordingly. &lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;useEffect&lt;/code&gt; hook, we can make a call to our API as soon as our component is mounted. With the help of &lt;code&gt;setInterval&lt;/code&gt; function, we can call a function, which in turn calls our API every 10 seconds. Here's the complete &lt;code&gt;App.js&lt;/code&gt; component followed by the explanation:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;App.js:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PriceCard&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/PriceCard&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./logo.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTicker&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;low&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;high&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getDogecoinPrice&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://nitinr-cors.herokuapp.com/https://api.wazirx.com/api/v2/tickers/dogeusdt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setTicker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;getDogecoinPrice&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;getDogecoinPrice&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Dogecoin Logo"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Live Dogecoin Price&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h5&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"subtitle"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Dogecoin To The Moon 🚀🌕&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h5&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"prices-container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PriceCard&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"low"&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;low&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PriceCard&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"high"&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;high&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PriceCard&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"current"&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Dogecoin price updated every 10 seconds seconds from&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://wazirx.com/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;WazirX API&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We import the &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useEffect&lt;/code&gt; hooks from &lt;code&gt;react&lt;/code&gt; library as named exports and &lt;code&gt;axios&lt;/code&gt; from the &lt;code&gt;axios&lt;/code&gt; package as a default export. The &lt;code&gt;useState&lt;/code&gt; hooks takes in the initial value which we have set to an object having values of 0 for high, low and last. It returns us a variable which holds the current state and a function to set the new state. In our case, these are the &lt;code&gt;ticker&lt;/code&gt; and &lt;code&gt;setTicker&lt;/code&gt; respectively.&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;useEffect&lt;/code&gt; hook, we define an asynchronous function (since API calls are asynchronous in nature) named as &lt;code&gt;getDogecoinPrice&lt;/code&gt; in which we make a request to our API endpoint using &lt;code&gt;axios&lt;/code&gt;. We destructure the data from the response and set the state of ticker to &lt;code&gt;data.ticker&lt;/code&gt; since we need only the ticker data from response. After the function definition, we call this function once followed by a &lt;code&gt;setInterval&lt;/code&gt; with a delay of 10000ms (10 seconds) which will run our function and call our API every 10 seconds to get the updated price.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;useEffect&lt;/code&gt; hooks also take an array of dependencies as a second argument but since we need to run the &lt;code&gt;setInterval&lt;/code&gt; only once, when the component is mounted, we can keep it as an empty array.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;price&lt;/code&gt; attribute of &lt;code&gt;PriceCard&lt;/code&gt; component can be set to &lt;code&gt;ticker.low&lt;/code&gt;, &lt;code&gt;ticker.high&lt;/code&gt; and &lt;code&gt;ticker.last&lt;/code&gt; respectively to get the lowest, highest and last traded value. Since &lt;code&gt;ticker&lt;/code&gt; is a state variable, React will automatically re-render the UI every time its value changes. &lt;/p&gt;

&lt;p&gt;Finally, here's what we have built:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mdGnPBY4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/INVQRd2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mdGnPBY4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/INVQRd2.png" alt="Final Output"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Congratulations! You have built yourself a nice and simple web application using React to stay updated with Dogecoin. If you faced any difficulties during building it, please have a look at the GitHub repo or post a comment down below and I'll be more than happy to help you out. That's all, folks!  &lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>User Experience and Core Web Vitals Optimization – Angular Universal.</title>
      <author>Nichola Alkhouri</author>
      <pubDate>Sun, 07 Feb 2021 16:23:44 +0000</pubDate>
      <link>https://dev.to/nicholaalkhouri/user-experience-and-core-web-vitals-optimization-angular-universal-ko0</link>
      <guid>https://dev.to/nicholaalkhouri/user-experience-and-core-web-vitals-optimization-angular-universal-ko0</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally published &lt;a href="https://nichola.dev/user-experience-core-web-vitals-optimization-angular-universal/"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this article, I will use Angular Universal to server-side render a sample web application. This would help to improve the user experience and will boost Core Web Vitals scores. At the same time, I will show you that just enabling server-side rendering, without taking any further steps, can negatively impact those Core Web Vitals, and especially CLS.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#core-web-vitals-and-cls-to-measure-user-experience" class="anchor"&gt;
  &lt;/a&gt;
  Core Web Vitals and CLS To Measure User Experience
&lt;/h2&gt;

&lt;p&gt;Before we start, if you want to know more about Core Web Vitals, you can visit this page &lt;a href="https://web.dev/vitals/"&gt;https://web.dev/vitals/&lt;/a&gt;. I will provide a brief definition as they appeared in that article.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Web Vitals is an initiative by Google to provide unified guidance for quality signals that are essential to delivering a great user experience on the web. &lt;cite&gt;&lt;a href="https://web.dev/authors/philipwalton"&gt;Philip Walton&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;Core Web Vitals are the subset of Web Vitals that apply to all web pages, should be measured by all site owners, and will be surfaced across all Google tools. Each of the Core Web Vitals represents a distinct facet of the user experience, is measurable in the field, and reflects the real-world experience of a critical user-centric outcome.&lt;/p&gt;
&lt;cite&gt;&lt;a href="https://web.dev/authors/philipwalton"&gt;Philip Walton&lt;/a&gt;&lt;/cite&gt;
&lt;/blockquote&gt;

&lt;p&gt;From above, Core Web Vitals help us to measure and optimize the &lt;strong&gt;User Experience&lt;/strong&gt; of our web application. I will focus in this article on one specific signal of those Vitals, the CLS (Cumulative Layout Shift).&lt;/p&gt;

&lt;p&gt;CLS measures the "Visual Stability" of the web application, It reflects how stable your page is, and is affected by the sudden movement or the unexpected changes of the content which happen while the user is reading through. The ideal value of CLS is below "0.1"&lt;strong&gt;. &lt;/strong&gt;You can find more about CLS  in this article &lt;a href="https://web.dev/cls/"&gt;https://web.dev/cls/&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#simple-application-without-ssr" class="anchor"&gt;
  &lt;/a&gt;
  Simple Application Without SSR
&lt;/h2&gt;

&lt;p&gt;Let's first create a simple Angular client-side rendered application, our application will have only one functionality, it will fetch an Article from the server, and then display the articles in the view. We create the application by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng new cls-measuer-app
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Now lets update the app.component.ts, app.component.html to be as the following:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In &lt;code&gt;AppComponent&lt;/code&gt; we have an observable &lt;code&gt;article$&lt;/code&gt; which will hold the article object to be displayed.&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;ngOnInit&lt;/code&gt; we assign to the return value of the &lt;code&gt;getArticle()&lt;/code&gt; method to the property &lt;code&gt;article$&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;getArticle()&lt;/code&gt; simulates an API call to fetch the article data from the server. It returns a mocked &lt;code&gt;IArticle&lt;/code&gt; object from a json file with a delay of 500 ms. Notice here that the content of the article should be big enough to fill the entire page. This is essential to simulate a real-life example of an article.&lt;/li&gt;
&lt;li&gt;We define &lt;code&gt;IArticle&lt;/code&gt; interface, with the properties title, body, and imageUrl.&lt;/li&gt;
&lt;li&gt;In the template, we subscribe to the &lt;code&gt;article$&lt;/code&gt; using the async pipe, once resolved we display the data from the returned article object. It is important to specify the &lt;code&gt;height&lt;/code&gt; property of the image. Otherwise, it will have a very big negative impact on the CLS value.&lt;/li&gt;
&lt;li&gt;We display a loading indicator while the article is still loading.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we serve and browse the application we will see the header, the footer, and a loading indicator. After half a second the article content would have been loaded and the loading indicator will be replaced with the article content.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#measure-core-web-vitals" class="anchor"&gt;
  &lt;/a&gt;
  Measure Core Web Vitals
&lt;/h3&gt;

&lt;p&gt;To measure the CLS, I am using Web Vitals Chrome extension. I will run the application in production mode and trigger the measuring which will give me the following  results:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aW_OIgrg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g3iui6tqe4l0obpfy15m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aW_OIgrg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g3iui6tqe4l0obpfy15m.png" alt="measures-initial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice the value of CLS (0.122) which is higher than the ideal value (0.1). This means that we are not providing a good user experience in our application. The reason behind this is that we are replacing the loading indicator with the article content. This is considered an unexpected change of content and add a negative impact on the CLS signal.&lt;/p&gt;

&lt;p&gt;Luckily this problem is fixable in Angular applications. The solution is to avoid this shifting in the content by providing the final state of the page (after the article is loaded) as fast as possible to the user. We can do so by rendering the page on the server-side using Angular Universal.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#serverside-rendering-ssr-with-angular-universal-to-improve-user-experience" class="anchor"&gt;
  &lt;/a&gt;
  Server-side rendering (SSR) with Angular Universal to Improve User Experience
&lt;/h2&gt;

&lt;p&gt;Now we will start solving the above problem. We start by adding Angular Universal to our application to allow server-side rendering of the initial page load. So let's run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng add @nguniversal/express-engine
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;This will prepare the project, installs universal/express-engine, and creates the server-side app module and many other files, you can find more about this command and the files it generates in the &lt;a href="https://angular.io/guide/universal"&gt;Angular official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At this point our application supports server-sider rendering, and you can double check this by serving the application using:&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run dev:ssr
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;open the browser and navigate to the application url, you will now notice that article content is being displayed immediately.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#that-is-not-enough" class="anchor"&gt;
  &lt;/a&gt;
  That Is Not Enough
&lt;/h2&gt;

&lt;p&gt;Now our application is server-side rendered and is providing the user with the content of the page in no time. However, we still have a problem here. When you run your application, even though you see the Article content immediately, you will notice after a small period of time that the loading indicator will flicker for a moment, and the article content fills the page again. This is a result of the following sequence of execution:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Angular Universal will render the application on the server-side and send the final HTML to the client.&lt;/li&gt;
&lt;li&gt;The client receives the rendered HTML and displays it immediately to the user.&lt;/li&gt;
&lt;li&gt;The browser loaded all javascript files and re-hydrated our application. After that, the application triggers the article loading process and displays the loading indicator and replaced the indicator with the article content when the loading is finish.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If we tried to measure the CLS at this time, the result will be event worse than before. First we build our application:&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run build:ssr
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Then lets serve it:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run serve:ssr
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Now we run the application and takes the measurements again, and her is the result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NGtcXMgZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7sv2k5gz2cnpybb4kzre.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NGtcXMgZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7sv2k5gz2cnpybb4kzre.png" alt="measures-after-ssr"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice that CLS is now (0.168) which is higher than the previous value before enabling SSR. In other words, by enabling SSR we made things even worse than before, fortunately, there is a solution for this problem.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#transferstate-to-the-rescue" class="anchor"&gt;
  &lt;/a&gt;
  TransferState to the rescue
&lt;/h2&gt;

&lt;p&gt;The main reason for the problem we are facing is that our application is loading the article twice, once on the server-side, and then again on the client-side after the browser re-hydrated the application. To fix this we can use &lt;code&gt;TransferState&lt;/code&gt;, and by definition TransferState is:&lt;/p&gt;

&lt;blockquote class="wp-block-quote"&gt;
&lt;p&gt;A key value store that is transferred from the application on the server side to the application on the client side.&lt;/p&gt;
&lt;cite&gt;&lt;a href="https://angular.io/api/platform-browser/TransferState"&gt;Angular Official Documentation&lt;/a&gt;&lt;/cite&gt;
&lt;/blockquote&gt;

&lt;p&gt;server fetched from the API, and pass it to the client-side application, so we don't have to call the server again on the client-side, to do so we implement the following changes:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;We imported &lt;code&gt;BrowserTransferStateModule&lt;/code&gt; in the &lt;code&gt;AppModule&lt;/code&gt;, and &lt;code&gt;ServerTransferStateModule&lt;/code&gt; in &lt;code&gt;AppServerModule&lt;/code&gt; since the TransferState service is provided within these modules.&lt;/li&gt;
&lt;li&gt;We check if the application is running on the server-side &lt;code&gt;if(isPlatformServer(this.platformId))&lt;/code&gt;, we load the article from the API, and we store it in the transfer state &lt;code&gt;this.transferState.set(this.stateKey, article)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the application is running on the client-side, we check if the &lt;code&gt;transferState&lt;/code&gt; has a value from the server &lt;code&gt;this.transferState.hasKey(this.stateKey)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the &lt;code&gt;transferState&lt;/code&gt; has a value, we use it directly, otherwise, we reload the article from the API.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And thats it, lets build and serve our application again, and measure:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RmZbwgv0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ebr18rmpheamycgg5sdx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RmZbwgv0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ebr18rmpheamycgg5sdx.png" alt="metrict-last-measure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And now CLS is down to 0, and that is because the content of the page is never change after the initial rendering. &lt;/p&gt;

&lt;p&gt;Overall, if you want to boost your SEO, don't just enable Angular Universal in your application and assume that server-rendering your pages will solve all your SEO problems. Enabling Angular Universal is only the first step. You need to take further steps to make sure that your application is working as intended. and don't forget to measure first then change and compare.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
      <category>typescript</category>
      <category>ux</category>
    </item>
    <item>
      <title>New FULL Web Developer Course on YouTube !</title>
      <author>The Nerdy Dev</author>
      <pubDate>Sun, 07 Feb 2021 16:10:19 +0000</pubDate>
      <link>https://dev.to/thenerdydev/new-full-web-developer-course-on-youtube-5c2</link>
      <guid>https://dev.to/thenerdydev/new-full-web-developer-course-on-youtube-5c2</guid>
      <description>&lt;p&gt;I decided to create a full Web Developer Course that will cover all the technologies that you need to kickstart your Full Stack Developer Journey. No bullshit, everything practical and relevant will be covered. &lt;/p&gt;

&lt;p&gt;We will delve into following topics - &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;HTML &lt;/li&gt;
&lt;li&gt;CSS &lt;/li&gt;
&lt;li&gt;JavaScript &lt;/li&gt;
&lt;li&gt;Node.js &lt;/li&gt;
&lt;li&gt;MongoDB &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Check out the first video of this series where we cover the introduction to World Wide Web and the Evolution of the World Wide Web. The code for the video (if any) can be found on GitHub.  &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/H9snA_Ze0wU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;⭐ Check out the 10 JavaScript Projects in 2 Hours Video of my JavaScript Series where we build 12+ Projects using JavaScript :&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/KTGfHmyje5A"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Follow me on:&lt;br&gt;
👉 Twitter: &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt;&lt;br&gt;
👉 Instagram: &lt;a href="https://instagram.com/thenerdydev"&gt;https://instagram.com/thenerdydev&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>Optimize tests with Setup &amp; Teardown methods</title>
      <author>Automation Bro</author>
      <pubDate>Sun, 07 Feb 2021 15:52:21 +0000</pubDate>
      <link>https://dev.to/automationbro/optimize-tests-with-setup-teardown-methods-415</link>
      <guid>https://dev.to/automationbro/optimize-tests-with-setup-teardown-methods-415</guid>
      <description>&lt;p&gt;In this post, we will learn how we can use SeleniumBase Setup &amp;amp; Teardown methods to optimize our tests even further. If you are not familiar with setup &amp;amp; teardown concepts, essentially, it allows you to run certain steps before and after your actual test.&lt;/p&gt;

&lt;p&gt;So, when you run the Setup method, it will trigger the steps BEFORE your test will run and the TearDown will run the steps AFTER your test has finished.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup-method" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Setup Method&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The setup method will run the steps before each of your tests. Let’s take a look at the sample code below –&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZlEUM_5J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pij3uh1euhu465n4qrua.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZlEUM_5J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pij3uh1euhu465n4qrua.png" alt="setup code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Typically, you would use your setup method for any repetitive code between your tests such as opening the page, test data creation, or log in.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#teardown-method" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;TearDown method&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The tearDown method will run the steps after each of your tests has finished running. Let’s take a look at the sample code below –&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bncYyikh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k8j7mtrrjua0hfycyod1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bncYyikh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k8j7mtrrjua0hfycyod1.png" alt="teardown code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Typically, you would use the tearDown method for actions such as taking screenshots after the test has finished running, logging some data, or for Logout.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#check-out-the-video-below-to-learn-more-about-the-setup-amp-teardown-methods-using-selenium-python-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Check out the video below to learn more about the Setup &amp;amp; TearDown methods using Selenium Python –&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/uZ-sgPTM0eM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;📧 Subscribe to my &lt;a href="https://automationbro.com/mailing-list"&gt;mailing list&lt;/a&gt; to get access to more content like this &lt;/p&gt;

&lt;p&gt;👍 Follow &lt;a href="https://twitter.com/automationbro"&gt;automationbro&lt;/a&gt; on Twitter for the latest updates&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;This post was written with the help of a high amount of caffeine. And, if this post helped you out and you would like to support my work, you can do that by clicking on the button below and continue supporting my caffeine love :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/automationbro"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lUHFj71T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4aw2ub3f4qkyjk0ivwt4.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also support me by liking and sharing this content.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>python</category>
      <category>testing</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>If you were the new CEO of Amazon Web Services what would be your first executive order?</title>
      <author>Andrew Brown 🇨🇦</author>
      <pubDate>Sun, 07 Feb 2021 15:35:10 +0000</pubDate>
      <link>https://dev.to/andrewbrown/if-you-were-the-new-ceo-of-amazon-web-services-what-would-be-your-first-executive-order-1ik7</link>
      <guid>https://dev.to/andrewbrown/if-you-were-the-new-ceo-of-amazon-web-services-what-would-be-your-first-executive-order-1ik7</guid>
      <description>&lt;p&gt;Andy Jassy who is the current CEO of Amazon Web Services (AWS) is going to be the new CEO of Amazon. It's uncertain who will be next to the CEO of AWS. &lt;/p&gt;

&lt;p&gt;If you could have full control of AWS what would you decree?&lt;/p&gt;

&lt;p&gt;I would add a Dark Theme to the AWS Console.&lt;/p&gt;

</description>
      <category>aws</category>
    </item>
  </channel>
</rss>
