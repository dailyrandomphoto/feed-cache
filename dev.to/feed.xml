<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>5 Basic linux commands with detailed explanation and their resemblance to windows.</title>
      <author>Shubham Tyagi</author>
      <pubDate>Wed, 29 Sep 2021 19:15:37 +0000</pubDate>
      <link>https://dev.to/shubhamtyagi/5-basic-linux-commands-detailed-explanation-to-start-with-your-linux-journey-443f</link>
      <guid>https://dev.to/shubhamtyagi/5-basic-linux-commands-detailed-explanation-to-start-with-your-linux-journey-443f</guid>
      <description>&lt;p&gt;Linux sometimes seems to be very difficult from the outside but once you get a head start there are a ton of possibilities with linux which are not available with windows. Obviously you may not get as attractive and beginner friendly interface as windows does but everything comes with a price doesn't it.&lt;/p&gt;

&lt;p&gt;Here I will list 10 commands and explain them which you could try out yourself on your linux OS right away and experience it yourselves. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;df&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
this command will show the amount of available disk space and used disk space for file system to which you as a user currently has access to. For eg : if you have a dual boot system established in your pc and your linux OS doesn't have access to the D folder.If you run this command on your linux terminal then you wont be able to see the partiton of used and unused space of D folder. this command is same as when you open the disk management tool in windows.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iqX86Z_R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/9ds5e0B.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iqX86Z_R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/9ds5e0B.png" alt="df command"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;top&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
This command when you type in your terminal it will show the active linux processes which are managed by your linux kernel. This command is used like how you would use task manager in windows, the difference being , it shows the details of all the processes in far more depth than windows does.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it will look something like this when you type the command.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9bppXCcI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/ULJ9dee.png" alt=""&gt;
&lt;/li&gt;
&lt;li&gt;this is what is meant by each column head.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_jFd628u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/qTZSL7Z.png" alt=""&gt;
you can press 'q' to exit this window in your termial.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ls&lt;/strong&gt;&lt;br&gt;
This command list all the files and directory present in the location of where you are in your system. for example if you are in a directory games which has 3 sub-directory. then this command will list those 3 sub-directory.&lt;br&gt;
observe in the below image how the directories are highlighted in the terminal.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tkY-r4Hy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/3QKd57l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tkY-r4Hy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/3QKd57l.png" alt=""&gt;&lt;/a&gt;  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;cd&lt;/strong&gt;&lt;br&gt;
This command is a fairly self explanatory command,'''cd''' is a change directory command when you type&lt;br&gt;
&lt;br&gt;
&lt;code&gt;cd [directory name]&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
then you will be in that particular directory. If you type&lt;br&gt;
&lt;br&gt;
&lt;code&gt;cd ..&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
you will go in the root directory of current directory.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;touch&lt;/strong&gt;&lt;br&gt;
This command is used to create a file. This works like when you right click and create a new document in windows. You have to type&lt;br&gt;
&lt;br&gt;
&lt;code&gt;touch [filename.extension]&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>linux</category>
      <category>linuxcommands</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Easy way to integrate Google Maps in React</title>
      <author>Thomas Ledoux</author>
      <pubDate>Wed, 29 Sep 2021 18:56:32 +0000</pubDate>
      <link>https://dev.to/thomasledoux1/easy-way-to-integrate-google-maps-in-react-1j6j</link>
      <guid>https://dev.to/thomasledoux1/easy-way-to-integrate-google-maps-in-react-1j6j</guid>
      <description>&lt;p&gt;More often than not, you will be asked to add a map coming from Google Maps to websites you are developing.&lt;br&gt;
This might seem like a pain to integrate in your React application, but luckily Alexey Lyakhov created a package to make it all a bit easier: &lt;a href="https://github.com/JustFly1984/react-google-maps-api"&gt;React Google Maps API&lt;/a&gt;.&lt;br&gt;
It's &lt;a href="https://react-google-maps-api-docs.netlify.app/"&gt;well documented&lt;/a&gt; too!&lt;/p&gt;

&lt;p&gt;Now, let's dive into the actual code to create a component using this package!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;GoogleMap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;useJsApiLoader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Marker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;InfoWindow&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@react-google-maps/api&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;OfficeNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;field_address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;locality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;postal_code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;address_line1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;address_line2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;offices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;field_address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;locality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Gent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;postal_code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;9000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;address_line1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Veldstraat 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;address_line2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;51.053589&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.72242&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;field_address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;locality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Brussel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;postal_code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;address_line1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nieuwstraat 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;address_line2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;50.85061&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;4.35403&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;field_address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;locality&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Antwerpen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;postal_code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;address_line1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Meir 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;address_line2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;51.21878&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;4.40559&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;selectedOffice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSelectedOffice&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;
    &lt;span class="nx"&gt;OfficeNode&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isLoaded&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useJsApiLoader&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;google-map-script&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;googleMapsApiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ENTER-YOUR-API-KEY-HERE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onLoad&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapInstance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bounds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;google&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;maps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LatLngBounds&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;offices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;office&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;google&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;maps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LatLng&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nx"&gt;office&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;field_address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;office&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;field_address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;longitude&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="nx"&gt;mapRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mapInstance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;mapInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fitBounds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;offices&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onClickMarker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;officeId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setSelectedOffice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;office&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;office&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;officeId&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Google maps + React&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoaded&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;GoogleMap&lt;/span&gt;
            &lt;span class="na"&gt;mapContainerClassName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"c-office-overview__map"&lt;/span&gt;
            &lt;span class="na"&gt;onLoad&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onLoad&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;offices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;office&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Marker&lt;/span&gt;
                &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;office&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;onClickMarker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;office&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="na"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;office&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;field_address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="na"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;office&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;field_address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;longitude&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;selectedOffice&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;InfoWindow&lt;/span&gt;
                &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="na"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;selectedOffice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;field_address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="na"&gt;lng&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;selectedOffice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;field_address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;longitude&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="na"&gt;onCloseClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setSelectedOffice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;selectedOffice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;field_address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address_line1&lt;/span&gt;&lt;span class="si"&gt;}{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;selectedOffice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;field_address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address_line2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; -&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;selectedOffice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;field_address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postal_code&lt;/span&gt;&lt;span class="si"&gt;}{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                  &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;selectedOffice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;field_address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locality&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;InfoWindow&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;GoogleMap&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So let's see what's going on here.&lt;br&gt;
We import the different needed components from the library and we select the needed library (only places needed for this demo). &lt;br&gt;
After this is done, we can create a Ref with the useRef hook, this will be used to store the reference to the Google Maps map. &lt;/p&gt;

&lt;p&gt;We then use the &lt;code&gt;useJsApiLoader&lt;/code&gt; hook to initialise the Google Maps API, passing the API key. &lt;br&gt;
From the response of this hook, we can get the &lt;code&gt;isLoaded&lt;/code&gt; boolean back, this will be used to show/hide the map in our rendering.&lt;br&gt;
We also need to create an &lt;code&gt;onLoad&lt;/code&gt; function (wrapped in a useCallback hook), this will be called by the Google Maps API once it's done initialising. &lt;br&gt;
In this function we'll loop over our offices, and add positions to the bounds of our Google Map, so the map is correctly centered, and we'll assign the Google Maps instance to our Ref we created earlier. &lt;/p&gt;

&lt;p&gt;In our rendering, it's all pretty straightforward. We render our map once the &lt;code&gt;isLoaded&lt;/code&gt; boolean is true. &lt;br&gt;
We render a marker for every office, and add an onClick listener to select the office when the marker is clicked. &lt;/p&gt;

&lt;p&gt;We also have a check in the code to see if &lt;code&gt;selectedOffice&lt;/code&gt;, when an office is selected we want to use the InfoWindow from Google Maps to show some details of the office.&lt;br&gt;
When the close button is clicked, the &lt;code&gt;selectedOffice&lt;/code&gt; will be cleared.&lt;/p&gt;

&lt;p&gt;And that's it!&lt;br&gt;
I hope this was helpful.&lt;br&gt;
I might write a follow-up article where I explain how to search for addresses with Google Maps Places, and how to search the closest office to the address. This would also include working with the built-in geolocation API in the browsers. &lt;br&gt;
If you'd be interested in this, leave a comment :-)&lt;/p&gt;

&lt;p&gt;Source code can be found on &lt;a href="https://codesandbox.io/s/gracious-hypatia-fowlq"&gt;Codesandbox&lt;/a&gt; (you still need to enter a Google Maps API key, I can't give out mine since I'd get charged :D)&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>16 must-have Figma Plugins for UI/UX Designers</title>
      <author>Savio Martin</author>
      <pubDate>Wed, 29 Sep 2021 18:21:39 +0000</pubDate>
      <link>https://dev.to/saviomartin/16-must-have-figma-plugins-for-ui-ux-designers-4ffm</link>
      <guid>https://dev.to/saviomartin/16-must-have-figma-plugins-for-ui-ux-designers-4ffm</guid>
      <description>&lt;p&gt;Hey there, I'm Savio Martin, A 14-year-old boy on an intention to enhance as a successful full-stack web developer. I love building full-stack web applications and mobile apps. I have proved my superiority in frontend technologies. I love to share my resources and expertise with the dev community. I regularly write articles on &lt;a class="mentioned-user" href="https://dev.to/hashnode"&gt;@hashnode&lt;/a&gt;
.&lt;/p&gt;

&lt;p&gt;Today, I'm gonna share 16 must-have Figma Plugins for UI/UX Designers. These plugins are really helpful to UI/UX designers and fasten our job. So, consider installing these plugins. Those are the plugins I could not live with, huh!! So, let's get started&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#color-palettes"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.figma.com/community/plugin/740832935938649295/Color-Palettes"&gt;Color Palettes&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;With Color Palettes for Figma, you can search for your favourite colour code, palette number or name that you remember from Color Palettes plugin and apply it on your design and make it awesome&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hmentrQs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/740832935938649295/thumbnail" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hmentrQs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/740832935938649295/thumbnail" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;## &lt;a href="https://www.figma.com/community/plugin/733902567457592893/Autoflow"&gt;Autoflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Autoflow makes it easy to draw flows. Simply select 2 objects and a line will be magically drawn between them.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run Autoflow&lt;/li&gt;
&lt;li&gt;Select any 2 shapes while holding down ⇧SHIFT and a line will be drawn&lt;/li&gt;
&lt;li&gt;Keep selecting until you're all wired up!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n_cOCzhF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/733902567457592893/thumbnail" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n_cOCzhF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/733902567457592893/thumbnail" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;## &lt;a href="https://www.figma.com/community/plugin/766652281834442616/Product-Planner"&gt;Product Planner &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Product Planner makes the process more comfortable to get started, product planning, product insights, identifying risks, setting goals and identifying and solving problems. Use the prebuilt template relevant to your tasks.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OxSO9Rth--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/766652281834442616/thumbnail" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OxSO9Rth--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/766652281834442616/thumbnail" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;## &lt;a href="https://www.figma.com/community/plugin/738992712906748191/Remove-BG"&gt;Remove BG &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remove the background of images automatically with just a single click - using the remove.bg API.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bw7iCvTc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/738992712906748191/thumbnail" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bw7iCvTc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/738992712906748191/thumbnail" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;## &lt;a href="https://www.figma.com/community/plugin/733025261168520714/Figmotion"&gt;Figmotion&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Figmotion is an animation tool built right in Figma. This makes the entry into animation easier and more convenient as there is no need to switch to a completely separate motion tool such as Principle, Haiku or After Effects. Figmotion makes the animation hand-off to developers more manageable as well as it is built with web technologies in mind.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dLuX_PKM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/733025261168520714/thumbnail" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dLuX_PKM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/733025261168520714/thumbnail" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;## &lt;a href="https://www.figma.com/community/plugin/740232388085828578/Brands-Colors"&gt;Brands Colors &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With Brands Colors for Figma, you can search for your favorite brand's colors or app's colors and apply it on your design and make it awesome&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GSI5Axmk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/740232388085828578/thumbnail" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GSI5Axmk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/740232388085828578/thumbnail" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;## &lt;a href="https://www.figma.com/community/plugin/738454987945972471/Unsplash"&gt;Unsplash  &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Insert beautiful images from Unsplash straight into your designs.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LYqMxP0N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/738454987945972471/thumbnail" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LYqMxP0N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/738454987945972471/thumbnail" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;## &lt;a href="https://www.figma.com/community/plugin/736458162635847353/Mapsicle"&gt;Mapsicle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Never take a screenshot of a map again! With Mapsicle, you can quickly and seamlessly place maps in your mockups. An interactive map lets you pan to the perfect location, or you can search for a place anywhere in the world. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xSO6IEv8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/736458162635847353/thumbnail" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xSO6IEv8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/736458162635847353/thumbnail" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;## &lt;a href="https://www.figma.com/community/plugin/731176732337510831/Themer"&gt;Themer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Themer enables you to create and swap themes from your &lt;em&gt;published&lt;/em&gt; styles in your team library. Use it for color, text and effect styles.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UcQHe6Vd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/731176732337510831/thumbnail" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UcQHe6Vd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/731176732337510831/thumbnail" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;## &lt;a href="https://www.figma.com/community/plugin/743654854885744527/Responsify-%E2%9A%A1%EF%B8%8F"&gt;Responsify&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A Figma plugin to quickly test your designs across multiple device sizes.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select any frame, component, or instance&lt;/li&gt;
&lt;li&gt;Menu &amp;gt; Responsify️️ ⚡️ &amp;gt; Select device sizes to test&lt;/li&gt;
&lt;li&gt;Command + Shift + P to re-run
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--67iNtcle--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/743654854885744527/thumbnail" alt=""&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;## &lt;a href="https://www.figma.com/community/plugin/739208439270091369/Blobs"&gt;Blobs  &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create organic blob shapes with the click of a button. Every shape that is generated is unique to the last. You can control how unique a shape is  along with how many points it has.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pMDsv-sz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/739208439270091369/thumbnail" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pMDsv-sz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/739208439270091369/thumbnail" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;## &lt;a href="https://www.figma.com/community/plugin/740832935938649295/Color-Palettes"&gt;SmoothShadow  &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create really smooth, layered shadows&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8xbjJfCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/788830704169694737/thumbnail" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8xbjJfCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/788830704169694737/thumbnail" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;## &lt;a href="https://www.figma.com/community/plugin/741184519069077841/Isometric"&gt;Isometric  &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Isometric allows you to create isometric layers without manually having to set them up.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V0loJNwN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/741184519069077841/thumbnail" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V0loJNwN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/741184519069077841/thumbnail" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;## &lt;a href="https://www.figma.com/community/plugin/731627216655469013/Content-Reel"&gt;Content Reel  &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Design layouts more efficiently by pulling text strings, images and icons from one palette. Content Reel lets you create custom content and share it with other Figma users. Collaboration has never been easier!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OiZpVn-q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/731627216655469013/thumbnail" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OiZpVn-q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/731627216655469013/thumbnail" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;## &lt;a href="https://www.figma.com/community/plugin/802147585857776440/Webgradients"&gt;Webgradients  &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Meet the easy-to-use and powerful functional gradient plugin that you can use as content backdrops in any part of your website it in a moment! &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7pFtYdk5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/802147585857776440/thumbnail" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7pFtYdk5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/802147585857776440/thumbnail" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;## &lt;a href="https://www.figma.com/community/plugin/734590934750866002/Chart"&gt;Chart &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Chart is a plugin for Figma that uses real or random data to create the most popular charts. Chart supports copy-paste from editors like Excel, Numbers, Google Sheets, live connection with Google Sheets and remote JSON (REST API), local CSV and JSON files.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mOSx5nDF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/734590934750866002/thumbnail" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mOSx5nDF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.figma.com/community/plugin/734590934750866002/thumbnail" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope you all loved this article. If you have any doubts or queries, write it up in the comments below. Also, do reactions in this article. Thanks for your time. 🙏&lt;/p&gt;

&lt;p&gt;Don't forget to follow me on &lt;a href="https://github.com/saviomartin"&gt;Github&lt;/a&gt; and &lt;a href="https://www.instagram.com/teen_developer/"&gt;Instagram&lt;/a&gt;&lt;br&gt;
%[&lt;a href="https://github.com/saviomartin/"&gt;https://github.com/saviomartin/&lt;/a&gt;]&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wishing-you-a-good-day-happy-hacking"&gt;
  &lt;/a&gt;
  Wishing You A Good Day! Happy Hacking! 💻⚡
&lt;/h3&gt;

</description>
      <category>productivity</category>
      <category>design</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Listen to the Ruby and Rails-Themed Season 6 Finale of DevDiscuss — with Richard Schneeman &amp; Penelope Phippen!</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 29 Sep 2021 18:19:23 +0000</pubDate>
      <link>https://dev.to/devteam/listen-to-the-ruby-and-rails-themed-season-6-finale-of-devdiscuss-with-richard-schneeman-penelope-phippen-33d7</link>
      <guid>https://dev.to/devteam/listen-to-the-ruby-and-rails-themed-season-6-finale-of-devdiscuss-with-richard-schneeman-penelope-phippen-33d7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-season-6-finale-of-devdiscuss-is-here-already"&gt;
  &lt;/a&gt;
  The Season 6 Finale of DevDiscuss is here (already!):
&lt;/h2&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devdiscuss/s6-e8-ruby-and-rails-from-features-to-governance"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S6:E8 - Ruby and Rails: From Features to Governance&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devdiscuss"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevDiscuss
      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s6-e8-ruby-and-rails-from-features-to-governance" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s6-e8-ruby-and-rails-from-features-to-governance" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s6-e8-ruby-and-rails-from-features-to-governance" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s6-e8-ruby-and-rails-from-features-to-governance" alt="DevDiscuss" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtvK04RF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j-SdIkjZ--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s6-e8-ruby-and-rails-from-features-to-governance"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devdiscuss/s6-e8-ruby-and-rails-from-features-to-governance"&gt;
      &lt;img id="episode-profile-image" alt="S6:E8 - Ruby and Rails: From Features to Governance" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTELFWpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--otY2jCJh--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;DevDiscuss is the first original podcast from DEV all about the burning topics that impact all our lives as developers.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In this final episode of S6, we talked about Ruby and Rails (one of our favorite topics, as a Rails shop ourselves) with some truly phenomenal guests&lt;/strong&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#host"&gt;
  &lt;/a&gt;
  Host:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a class="mentioned-user" href="https://dev.to/ben"&gt;@ben&lt;/a&gt;
 — Creator of DEV &amp;amp; Co-Founder of Forem&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#guests"&gt;
  &lt;/a&gt;
  Guests:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/penelope_zone"&gt;@penelope_zone&lt;/a&gt;
, is a multifaceted Rubyist who works as a Director at Ruby Central, is the creator of Rubyfmt, and was formerly a lead maintainer of the RSpec project. She frequently writes and speaks about about complex aspects of the Ruby grammar, and issues of social justice for trans people in computer science. She’s sad that she can’t hug every cat.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://twitter.com/@schneems"&gt;Richard Schneeman&lt;/a&gt; is a Principal Software Engineer at Heroku who also created and maintains CodeTriage.com, a tool for helping people contribute to open-source. When he isn’t obsessively compulsively refactoring code he spends his time reminding his kids to wash their hands. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you so much for listening to this past season of DevDiscuss! We hope you enjoyed listening to it as much as we enjoyed creating it for you. Let us know your thoughts in the comments below — or on Twitter (&lt;a href="https://twitter.com/thepracticaldev"&gt;@thepracticaldev&lt;/a&gt; ).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p_QWS1v_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/vxNCVEe0PI9A3YVJEX/giphy.gif%3Fcid%3Decf05e47t5edcjl7ywl6wlc81vu3j783tuuf1hdkct22rpuw%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p_QWS1v_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/vxNCVEe0PI9A3YVJEX/giphy.gif%3Fcid%3Decf05e47t5edcjl7ywl6wlc81vu3j783tuuf1hdkct22rpuw%26rid%3Dgiphy.gif%26ct%3Dg" alt="Goodbye"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devdiscuss"&gt;follow DevDiscuss&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; — or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  Quick Listening Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s6-e8-ruby-and-rails-from-features-to-governance/id1513053883?i=1000536970982"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/138ihHs8lZHTUChPPPvNi3"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcy5kZXZwb2RzLmRldi9kZXZkaXNjdXNzX3BvZGNhc3QueG1s/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZkaXNjdXNzLzQ5?sa=X&amp;amp;ved=0CAQQkfYCahcKEwjQ2vq55aTzAhUAAAAAHQAAAAAQCg"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devdiscuss/s6e8-ruby-and-rails-from-qUMNc3mfBDg/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevDiscuss-p1324596/?topicId=166134093"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://devpods.herokuapp.com/podcasts/devdiscuss/episodes/225"&gt;DEV Pods Site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;Acknowledgements&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Our season six sponsors: &lt;a href="//cockroachlabs.com/devdiscuss"&gt;CockroachDB&lt;/a&gt; &amp;amp; &lt;a href="https://www.scoutapm.com/devdiscuss"&gt;Scout APM&lt;/a&gt;!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#see-you-soon-for-another-season-of-devdiscuss"&gt;
  &lt;/a&gt;
  See you soon for another season of DevDiscuss ❤️
&lt;/h3&gt;

</description>
      <category>discuss</category>
      <category>podcast</category>
    </item>
    <item>
      <title>Best Visual Studio Code themes</title>
      <author>Gustavo</author>
      <pubDate>Wed, 29 Sep 2021 18:02:51 +0000</pubDate>
      <link>https://dev.to/gustavosrr/best-visual-studio-code-themes-5785</link>
      <guid>https://dev.to/gustavosrr/best-visual-studio-code-themes-5785</guid>
      <description>&lt;h2&gt;
  &lt;a href="#dracula-official"&gt;
  &lt;/a&gt;
  Dracula Official
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c2v0rPPY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7xumjw29oj8nwk0ih3h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c2v0rPPY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7xumjw29oj8nwk0ih3h.png" alt="Dracula Official"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-theme"&gt;
  &lt;/a&gt;
  GitHub Theme
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dROpCyzr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmtaj072oeb1lzjt9g0t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dROpCyzr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmtaj072oeb1lzjt9g0t.png" alt="GitHub Theme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nord"&gt;
  &lt;/a&gt;
  Nord
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OvyOB80f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rshq0ouduow0r5yat212.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OvyOB80f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rshq0ouduow0r5yat212.png" alt="Nord Theme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#arkademy"&gt;
  &lt;/a&gt;
  Arkademy
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TFxdaN8L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10g4b2z92xngwuhq7usz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TFxdaN8L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10g4b2z92xngwuhq7usz.png" alt="Arkademy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#eva-theme"&gt;
  &lt;/a&gt;
  Eva Theme
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L3gks9CE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6uzlib6z8mffpvayu9yx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L3gks9CE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6uzlib6z8mffpvayu9yx.png" alt="Eva Theme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#horizon-theme"&gt;
  &lt;/a&gt;
  Horizon Theme
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9ku3cczB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cljgki9rtfottb09259z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ku3cczB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cljgki9rtfottb09259z.png" alt="Horizon Theme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#palenight-theme"&gt;
  &lt;/a&gt;
  Palenight Theme
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GxCpYQ3i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvesyunk43l43zxtt1w7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GxCpYQ3i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvesyunk43l43zxtt1w7.png" alt="Palenight"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#one-dark-pro"&gt;
  &lt;/a&gt;
  One Dark Pro
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--syGp0ucB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyx9peon6yigt5zk9lqt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--syGp0ucB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyx9peon6yigt5zk9lqt.png" alt="One Dark Pro"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tokyo-night"&gt;
  &lt;/a&gt;
  Tokyo Night
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nWrBjJw---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpcs0go26di7gpn1anp5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nWrBjJw---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpcs0go26di7gpn1anp5.png" alt="Tokyo Night"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#omni-theme"&gt;
  &lt;/a&gt;
  Omni Theme
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1WEVh-Dk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3s0i8bqb1wzxgd4krke.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1WEVh-Dk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3s0i8bqb1wzxgd4krke.png" alt="Omni Theme"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
    </item>
    <item>
      <title>Print images to console using Python</title>
      <author>Pranav Baburaj</author>
      <pubDate>Wed, 29 Sep 2021 17:40:12 +0000</pubDate>
      <link>https://dev.to/pranavbaburaj/print-images-to-console-using-python-23k6</link>
      <guid>https://dev.to/pranavbaburaj/print-images-to-console-using-python-23k6</guid>
      <description>&lt;p&gt;Hello everyone, hope you all are doing good. I would like to show you how to print images onto the console using Python. So, let's get started.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Before getting started, make sure to have pip and python installed in your system&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;Install required packages&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;pillow colr
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, you have setup the development environment. Let's get into the code&lt;/p&gt;

&lt;p&gt;First, import the necessary libraries. The script uses the &lt;code&gt;pillow&lt;/code&gt; library for Image processing&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PIL&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;colr&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Colr&lt;/span&gt;

&lt;span class="c1"&gt;# Ask the user for image filename
&lt;/span&gt;&lt;span class="n"&gt;image_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Image:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In this example, I am prompting the user to enter the filename for the image and collect it in the &lt;code&gt;image_path&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;Next, open the image&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now that we have opened the image. we need to read the image and get the colors. For that, use&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;pixel_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getdata&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;image.getdata()&lt;/code&gt; function returns a list of RGB or RGBA values.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, lets print the image&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;character&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pixel_values&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colr&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\u2584&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Wait, let me explain.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This &lt;code&gt;image.size&lt;/code&gt; property is a tuple containing the width and the height of the image.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;character&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pixel_values&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We loop through the list of rgb colors and make sure that all the values are either in the form of tuple or list.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This line unpacks the tuple into variables for red(&lt;code&gt;r&lt;/code&gt;), green(&lt;code&gt;g&lt;/code&gt;) and blue(&lt;code&gt;b&lt;/code&gt;)&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Colr&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\u2584&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This line prints a pixel onto the screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u7ba3EgM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.discordapp.com/attachments/875983412639436850/891594483626573844/unknown.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u7ba3EgM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.discordapp.com/attachments/875983412639436850/891594483626573844/unknown.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have created a python library for printing images onto the console. Check out the GitHub repository &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/pranavbaburaj"&gt;
        pranavbaburaj
      &lt;/a&gt; / &lt;a href="https://github.com/pranavbaburaj/img"&gt;
        img
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A python library to display images in the terminal
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
&lt;h1&gt;
&lt;b&gt;&lt;code&gt;Img&lt;/code&gt;&lt;/b&gt;
&lt;/h1&gt;
Display Images in your terminal with python
&lt;br&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/ab5e4cec72c29499ba1c307c232cd0c98fb9e5e80747eb0dd1397949e5fddcb6/68747470733a2f2f692e696d6775722e636f6d2f4f317a496763612e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/ab5e4cec72c29499ba1c307c232cd0c98fb9e5e80747eb0dd1397949e5fddcb6/68747470733a2f2f692e696d6775722e636f6d2f4f317a496763612e706e67" height="250"&gt;&lt;/a&gt;
&lt;br&gt;
&lt;p&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/e58b24f47a3560d1b56b01b50bfea0bab1b7c0a5bd4d2ff668045dd7c40eb0a4/68747470733a2f2f7374617469632e706570792e746563682f62616467652f7465726d696e616c2d696d67"&gt;&lt;img src="https://camo.githubusercontent.com/e58b24f47a3560d1b56b01b50bfea0bab1b7c0a5bd4d2ff668045dd7c40eb0a4/68747470733a2f2f7374617469632e706570792e746563682f62616467652f7465726d696e616c2d696d67"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/97d4586afa582b2dcec2fa8ed7c84d02977a21c2dd1578ade6d48ed82296eb10/68747470733a2f2f6261646765732e66726170736f66742e636f6d2f6f732f76312f6f70656e2d736f757263652e7376673f763d313033"&gt;&lt;img src="https://camo.githubusercontent.com/97d4586afa582b2dcec2fa8ed7c84d02977a21c2dd1578ade6d48ed82296eb10/68747470733a2f2f6261646765732e66726170736f66742e636f6d2f6f732f76312f6f70656e2d736f757263652e7376673f763d313033"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/2e520446caefbefbc3161e4e2ec351e39dbd6f5b55c9020fc466e335ee49b07d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f7072616e61766261627572616a2f696d67"&gt;&lt;img src="https://camo.githubusercontent.com/2e520446caefbefbc3161e4e2ec351e39dbd6f5b55c9020fc466e335ee49b07d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f7072616e61766261627572616a2f696d67"&gt;&lt;/a&gt;
    &lt;a href="https://twitter.com/intent/tweet?text=Display%20images%20in%20the%20the%20terminal%20using%20python&amp;amp;url=https://github.com/pranavbaburaj/img&amp;amp;via=_pranavbaburaj&amp;amp;hashtags=developers,images,terminal" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/90bc908826728c0e4261acfff5619fd732c7be2b2a00624fce6363c9a3623c90/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f687474702f736869656c64732e696f2e7376673f7374796c653d736f6369616c"&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;/div&gt;

&lt;h2&gt;
Installation&lt;/h2&gt;

&lt;p&gt;The package can be installed via &lt;code&gt;pip&lt;/code&gt;&lt;/p&gt;

&lt;div class="highlight highlight-source-python position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-s1"&gt;pip&lt;/span&gt; &lt;span class="pl-s1"&gt;install&lt;/span&gt; &lt;span class="pl-s1"&gt;terminal&lt;/span&gt;&lt;span class="pl-c1"&gt;-&lt;/span&gt;&lt;span class="pl-s1"&gt;img&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Quick Start&lt;/h2&gt;
&lt;p&gt;The library is really simple to get started with. Here's is an example of how you display an image&lt;/p&gt;
&lt;div class="highlight highlight-source-python position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s1"&gt;image&lt;/span&gt; &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-v"&gt;DrawImage&lt;/span&gt;
&lt;span class="pl-s1"&gt;image&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-v"&gt;DrawImage&lt;/span&gt;(&lt;span class="pl-s"&gt;"image.png"&lt;/span&gt;)&lt;/pre&gt;

&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;You can also use a url if you dont have the file locally stored&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight highlight-source-python position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-s1"&gt;image&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-v"&gt;DrawImage&lt;/span&gt;.&lt;span class="pl-en"&gt;from_url&lt;/span&gt;(&lt;span class="pl-s"&gt;"url"&lt;/span&gt;)&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Methods&lt;/h2&gt;
&lt;h4&gt;
&lt;code&gt;image.DrawImage&lt;/code&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;filename&lt;/code&gt;: The name of the file containing the image&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;size&lt;/code&gt;(&lt;em&gt;&lt;code&gt;Optional[Tuple]&lt;/code&gt;&lt;/em&gt;) : The size of the image to be displayed. Default: 24, 24&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;draw&lt;/code&gt;: Whether to draw on creating an instance or wait for the user to call the function&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
&lt;code&gt;image.DrawImage.from_url&lt;/code&gt;
&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;url&lt;/code&gt; : The url of the image&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;size&lt;/code&gt;(&lt;em&gt;&lt;code&gt;Optional[Tuple]&lt;/code&gt;&lt;/em&gt;) : The size of the image to be displayed. Default: 24, 24&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;draw&lt;/code&gt;: Whether to draw on…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/pranavbaburaj/img"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Please let me know what you thing. Hope you learned something new today. Thank you for reading :)&lt;/p&gt;

</description>
      <category>python</category>
      <category>images</category>
      <category>console</category>
      <category>terminal</category>
    </item>
    <item>
      <title>Javascript Security Checklist</title>
      <author>Bour Abdelhadi</author>
      <pubDate>Wed, 29 Sep 2021 17:38:18 +0000</pubDate>
      <link>https://dev.to/bscript/javascript-security-checklist-af</link>
      <guid>https://dev.to/bscript/javascript-security-checklist-af</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#1-code-linting---sast"&gt;1. Code Linting &amp;amp; SAST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-running-a-security-audit-with-npm-audit"&gt;2. Running a security audit with npm audit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#3-integrity-checking-for-javascript--sri-"&gt;3. Integrity checking for JavaScript (SRI)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#how-does-it-work-"&gt;How does it work?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-validations--validations--validations-"&gt;4. Validations, Validations, Validations!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5-minify-and-obfuscate-your-javascript"&gt;5. Minify and obfuscate your Javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Javascript is everywhere, It runs inside your browser, &lt;a href="https://openjsf.org/wp-content/uploads/sites/84/2020/02/Case_Study-Node.js-NASA.pdf"&gt;astronaut spacesuit&lt;/a&gt;, and most developers use it as a client-side and server-side programming language to allow them to create interactive web pages.&lt;/p&gt;

&lt;p&gt;Javascript is a lightweight, interpreted programming language with first-class functions.&lt;/p&gt;

&lt;p&gt;In addition, the Javascript ecosystem relies heavily on &lt;a href="https://npm.anvaka.com/"&gt;third-party libraries&lt;/a&gt;; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V3XJslgn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r5og8qisjk67p9er2kl4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V3XJslgn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r5og8qisjk67p9er2kl4.png" alt="Visualization of npm shows dependency graph of an npm package."&gt;&lt;/a&gt;&lt;br&gt;
Therefore, ensuring the security of JavaScript requires following security best practices to reduce attack surfaces. But how do we keep JavaScript applications safe?&lt;/p&gt;

&lt;p&gt;I will be sharing with you in this article some helpful tips I use every day as a security engineer so you can start thinking more about security before deploying your code to production.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-code-linting-amp-sast"&gt;
  &lt;/a&gt;
  1. Code Linting &amp;amp; SAST
&lt;/h2&gt;

&lt;p&gt;Seeing real-time feedback through linting while you're coding inside your IDE can help you accelerate development and reduce costs by finding errors and security issues earlier.&lt;/p&gt;

&lt;p&gt;You can use: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.jslint.com/"&gt;JSLint&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://jshint.com/"&gt;JSHint&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://standardjs.com/"&gt;Standard JS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eslint.org/"&gt;ESLint﻿&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most SAST tools like &lt;a href="https://www.sonarlint.org/"&gt;SonarQube&lt;/a&gt; provide more features to identify code smells and known security vulnerabilities.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wJA-O44H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvs53105myrcfvaas7m2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wJA-O44H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvs53105myrcfvaas7m2.png" alt="SonarQube"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-running-a-security-audit-with-npm-audit"&gt;
  &lt;/a&gt;
  2. Running a security audit with npm audit
&lt;/h2&gt;

&lt;p&gt;Most of the developers are using &lt;a href="https://docs.npmjs.com/"&gt;NPM(&lt;em&gt;node package manager&lt;/em&gt;)&lt;/a&gt;, which is a tool that helps you to install other people's code packages into your Javascript project.&lt;/p&gt;

&lt;p&gt;When it comes to security, the first thing we will consider is &lt;a href="https://docs.npmjs.com/packages-and-modules/securing-your-code"&gt;NPM audit tool&lt;/a&gt;. This tool will help you detect vulnerabilities in all your installed dependencies and help you fix them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eWniHNzr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b48wjp5mo23p1lo8wgj5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eWniHNzr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b48wjp5mo23p1lo8wgj5.png" alt="npm audit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Suppose you are using &lt;a href="https://github.com/"&gt;Github&lt;/a&gt; as a source control management system. In that case, they have a tool called &lt;a href="https://github.com/dependabot"&gt;Dependabot&lt;/a&gt;, which automatically scans the dependencies of &lt;a href="https://docs.npmjs.com/"&gt;NPM&lt;/a&gt; and informs you via email to clarify the risks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ozn23Q8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07imwj9p7x0puokzo3nr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ozn23Q8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07imwj9p7x0puokzo3nr.png" alt="Dependabot"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;If you're working on a big project, you should consider automating this job instead of doing it manually each time by yourself. Thus, we can create a Cron Jobs to set recurring tasks (Choose your preferable CI tool).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KqoqD5_I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdm7f3jm70hrtsv0huy9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KqoqD5_I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdm7f3jm70hrtsv0huy9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#3-integrity-checking-for-javascript-sri"&gt;
  &lt;/a&gt;
  3. Integrity checking for JavaScript (SRI)
&lt;/h2&gt;

&lt;p&gt;If you're a developer, I'm sure you used before the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag to import third-party libraries inside your code, but did you ever think about the possibility of manipulating the source code of those imported scripts?&lt;/p&gt;

&lt;p&gt;Yes, It can happen, especially when you render external resources on your website. Therefore, your website may face a security breach.&lt;/p&gt;

&lt;p&gt;You can use the &lt;em&gt;SRI&lt;/em&gt; feature to enable browsers to verify the resources they fetch as a security measure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="https://example.com/example-framework.js"
        integrity="sha384-oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K/uxy9rx7HNQlGYl1kPzQho1wx4JwY8wC"
        crossorigin="anonymous"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h3&gt;

&lt;p&gt;Let's say we'd like to add JQuery to our code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download the minimized version of &lt;a href="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"&gt;JQuery&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Calculate the SHA256 hash of JQuery version 3.5.1 hosted by Cloudflare&lt;/li&gt;
&lt;li&gt;Run it twice through OpenSSL to generate the checksum.&lt;/li&gt;
&lt;li&gt;Encode the result in base64 format.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl -s https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js | openssl dgst -sha256 -binary | openssl enc -base64 -A

9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have the hash, we can add the &lt;code&gt;integrity&lt;/code&gt; attribute to the script tag and the prefix &lt;code&gt;sha256-&lt;/code&gt; to the hash to indicate the hashing algorithm used. Starting from now, any browser that supports &lt;em&gt;SRI&lt;/em&gt; will require that the provided hash matches the calculated hash of the downloaded file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"
        integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
        crossorigin="anonymous"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Browser compatibility (SRI)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nXz7nNYl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pg6oyn54jy00wphuxvet.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nXz7nNYl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pg6oyn54jy00wphuxvet.png" alt="Browser compatibility SRI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-validations-validations-validations"&gt;
  &lt;/a&gt;
  4. Validations, Validations, Validations!
&lt;/h2&gt;

&lt;p&gt;Client-side validation is not enough, and you should never rely on it when you write your code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don't trust user inputs.&lt;/li&gt;
&lt;li&gt;Use proper methodologies for encoding/escaping&lt;/li&gt;
&lt;li&gt;Sanitize and clean your user inputs&lt;/li&gt;
&lt;li&gt;Set secure cookies&lt;/li&gt;
&lt;li&gt;Establish a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"&gt;secure content security policy&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Encrypt data transmissions between client-side and server-side&lt;/li&gt;
&lt;li&gt;Use updated libraries and frameworks&lt;/li&gt;
&lt;li&gt;Perform regular scans on your underlying databases and codebases&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Read: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://portswigger.net/web-security"&gt;https://portswigger.net/web-security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://snyk.io/blog/5-ways-to-prevent-code-injection-in-javascript-and-node-js/"&gt;https://snyk.io/blog/5-ways-to-prevent-code-injection-in-javascript-and-node-js/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-minify-and-obfuscate-your-javascript"&gt;
  &lt;/a&gt;
  5. Minify and obfuscate your Javascript
&lt;/h2&gt;

&lt;p&gt;As an attacker, I will try my best to understand the business logic behind the application, and if I do so, I can find my way through.&lt;/p&gt;

&lt;p&gt;It's crucial to minify &amp;amp; obfuscate your Javascript to make it more difficult for the attacker to understand your code and decrease the attack surface.&lt;/p&gt;




&lt;p&gt;To Be Continued...!&lt;/p&gt;

&lt;p&gt;You can reach me out on LinkedIn if you have questions &lt;a href="https://www.linkedin.com/in/bohr/"&gt;@Bour Abdelhadi&lt;/a&gt;&lt;/p&gt;

</description>
      <category>security</category>
      <category>javascript</category>
      <category>codereview</category>
    </item>
    <item>
      <title>Free Data Science for Beginners curriculum on GitHub</title>
      <author>Chris Noring</author>
      <pubDate>Wed, 29 Sep 2021 17:28:06 +0000</pubDate>
      <link>https://dev.to/azure/free-data-science-for-beginners-curriculum-on-github-1hme</link>
      <guid>https://dev.to/azure/free-data-science-for-beginners-curriculum-on-github-1hme</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Our team of Azure Cloud Advocates, Program Managers, and Student Ambassadors are pleased to bring a new addition to the For Beginners Curriculum series: Data Science for Beginners. &lt;br&gt;
&lt;a href="https://aka.ms/datascience-beginners"&gt;https://aka.ms/datascience-beginners&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Data Science for Beginners &lt;strong&gt;is a free&lt;/strong&gt;, MIT-licensed open-source curriculum of 20 lessons that focus on the foundations of Data Science and requires no prior knowledge to get started.&lt;/p&gt;

&lt;p&gt;Our curricula are structured with a modified Project-Based pedagogy and include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a pre-lesson warmup quiz&lt;/li&gt;
&lt;li&gt;a written lesson&lt;/li&gt;
&lt;li&gt;video&lt;/li&gt;
&lt;li&gt;knowledge checks&lt;/li&gt;
&lt;li&gt;a project to build&lt;/li&gt;
&lt;li&gt;infographics, sketch notes, and visuals&lt;/li&gt;
&lt;li&gt;a challenge&lt;/li&gt;
&lt;li&gt;an assignment&lt;/li&gt;
&lt;li&gt;a post-lesson quiz&lt;/li&gt;
&lt;li&gt;opportunities to deepen your knowledge on Microsoft Learn&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-will-you-learn"&gt;
  &lt;/a&gt;
  What will you learn?
&lt;/h2&gt;

&lt;p&gt;To make it easy for new learners to get started, we built the content so that it can be used &lt;em&gt;offline&lt;/em&gt; and so that the exercises can be completed using .ipynb notebooks within Visual Studio Code. Grab your datasets and let's go!&lt;/p&gt;

&lt;p&gt;Data Science for Beginners focuses on foundational concepts and practical applications of Data Science. &lt;/p&gt;

&lt;p&gt;You'll learn how to work with: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Different types of data&lt;/strong&gt;, as well as &lt;a href="https://github.com/microsoft/Data-Science-For-Beginners/tree/main/2-Working-With-Data/07-python"&gt;Python libraries like Pandas&lt;/a&gt; for doing more with your data and all about &lt;a href="https://github.com/microsoft/Data-Science-For-Beginners/tree/main/3-Data-Visualization"&gt;visualizations&lt;/a&gt; to make sense of your data. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Data science lifecycle&lt;/strong&gt;. Next, you'll learn of how data science is applied through the &lt;a href="https://github.com/microsoft/Data-Science-For-Beginners/tree/main/4-Data-Science-Lifecycle"&gt;Data Science Lifecycle&lt;/a&gt;, &lt;a href="https://github.com/microsoft/Data-Science-For-Beginners/tree/main/5-Data-Science-In-Cloud"&gt;in the cloud&lt;/a&gt;, &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Work through real-life examples&lt;/strong&gt;: and finally you get to work through &lt;a href="https://github.com/microsoft/Data-Science-For-Beginners/blob/main/6-Data-Science-In-Wild/20-Real-World-Examples/README.md"&gt;real examples&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-this-curriculum"&gt;
  &lt;/a&gt;
  How to use this curriculum
&lt;/h2&gt;

&lt;p&gt;This is a self-study course, but it works well in groups so consider finding study buddies and learning together. Warm up with a pre-lesson low-stakes quiz and work through the lessons and assignments together or solo. Test your knowledge with the post-lesson quiz.&lt;/p&gt;

&lt;p&gt;New for this curriculum is the use of Progress Assessment Tools in the Discussion Board area. Once done with a lesson group, visit the Discussion Board and copy the template to a new Discussion using the "quote reply". Fill in your learnings in the self-reflection box and respond to other students in the repo. Let's learn together!&lt;/p&gt;

&lt;p&gt;We are also open to PRs and Issue raising, following our Code of Conduct and templating systems. We hope the community will chip in with translations of the lessons, quizzes, and assignments. Thank you for participating as we learn together.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-sneak-peek"&gt;
  &lt;/a&gt;
  A sneak peek
&lt;/h2&gt;

&lt;p&gt;This curriculum is filled with a lot of art, created by our team. Take a look at this cool sketchnote created by &lt;a href="https://twitter.com/nitya"&gt;@nitya&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Statistics and Probability&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mVuBBK_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qr2kxfej5mpyw05vf9vn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mVuBBK_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qr2kxfej5mpyw05vf9vn.png" alt="Statistics and probability"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ready to do data science? Visit the repository!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aka.ms/datascience-beginners"&gt;Data Science for Beginners: 10 Weeks, 20 Lessons, Data Science for All!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Be sure to visit the other beginner's curricula too!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://aka.ms/webdev-beginners"&gt;Web Dev for Beginners&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://aka.ms/iot-beginners"&gt;IoT for Beginners&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/microsoft/ML-For-Beginners"&gt;Machine Learning for Beginners&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>datascience</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Understanding min-content, max-content, and fit-content in CSS</title>
      <author>Matt Angelosanto</author>
      <pubDate>Wed, 29 Sep 2021 17:25:21 +0000</pubDate>
      <link>https://dev.to/logrocket/understanding-min-content-max-content-and-fit-content-in-css-4jem</link>
      <guid>https://dev.to/logrocket/understanding-min-content-max-content-and-fit-content-in-css-4jem</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/ibadehinmojeed/"&gt;Ibadehin Mojeed&lt;/a&gt;&lt;/strong&gt; ✏️&lt;/p&gt;

&lt;p&gt;Understanding the CSS sizing properties is necessary for developers who want the flexibility to present webpage content appropriately.&lt;/p&gt;

&lt;p&gt;In CSS, we define an element size using the length (&lt;code&gt;px&lt;/code&gt;, &lt;code&gt;em&lt;/code&gt;), percentage, and keyword values. While the length and percentage value types are often used for webpage layouts, they are not always a perfect fit.&lt;/p&gt;

&lt;p&gt;In some context, we use the keyword value types, including &lt;code&gt;fit-content&lt;/code&gt;, &lt;code&gt;min-content&lt;/code&gt;, and &lt;code&gt;max-content&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this guide, we cover what these keyword values are, their differences, and how they can apply to a real-world project.&lt;/p&gt;

&lt;p&gt;Before we proceed, ensure you have a basic understanding of CSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intrinsic-and-extrinsic-sizing"&gt;
  &lt;/a&gt;
  Intrinsic and extrinsic sizing
&lt;/h2&gt;

&lt;p&gt;Consider a &lt;code&gt;div&lt;/code&gt; element containing content that has a fixed &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; of &lt;code&gt;200px&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"s_1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  nemo suscipitarchitectodeserunt vero, eveniet soluta deleniti alias dolor
  illum praesentium ipsa minus
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we gave &lt;a href="https://codesandbox.io/s/stoic-fermat-876h4?file=/index.html"&gt;the &lt;code&gt;div&lt;/code&gt; a border to see the extent of the size&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hn_l3o7f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/Giving-div-border.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hn_l3o7f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/Giving-div-border.png" alt="Giving div A Border Shows Content Overflowing Box"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When we alter the natural size of an element by applying a specific value to it, as seen in the image above, we refer to that sizing as extrinsic.&lt;/p&gt;

&lt;p&gt;On the other hand, when the content’s size defines the element’s size, we refer to that as intrinsic or natural size.&lt;/p&gt;

&lt;p&gt;By restricting the block’s dimension to a specific size, we experience a content overflow, a downside of extrinsic sizing.&lt;/p&gt;

&lt;p&gt;However, we can remedy the undesired behavior to produce a better layout by determining the element’s intrinsic size from the content using keyword values.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-raw-mincontent-endraw-keyword-value"&gt;
  &lt;/a&gt;
  The &lt;code&gt;min-content&lt;/code&gt; keyword value
&lt;/h2&gt;

&lt;p&gt;According to the &lt;a href="https://www.w3.org/TR/css-sizing-3/#min-content"&gt;W3C specifications&lt;/a&gt;, the &lt;code&gt;min-content&lt;/code&gt; is the smallest size a box can take without overflowing its content.&lt;/p&gt;

&lt;p&gt;For horizontal content, the &lt;code&gt;min-content&lt;/code&gt; uses the length of the widest bit of content in the element box and automatically sets that length value as the box width.&lt;/p&gt;

&lt;p&gt;The content in this case includes the text and assets like images and videos.&lt;/p&gt;

&lt;p&gt;If we revisit the box example above, we can apply the &lt;code&gt;min-content&lt;/code&gt; to the box element like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.s_2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* ... */&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;min-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* ... */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And &lt;a href="https://codesandbox.io/s/dawn-microservice-omv2v?file=/index.html"&gt;we should get this layout&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e4D5yy4S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/applying-min-content-box.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e4D5yy4S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/applying-min-content-box.png" alt="Applying min-content To The Box, Shows Purple Box Containing Content"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, with &lt;code&gt;min-content&lt;/code&gt;, the longest word within the content defines the size of the box; this is the intrinsic minimum width of the box.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#practical-examples-of-the-raw-mincontent-endraw-keyword-value"&gt;
  &lt;/a&gt;
  Practical examples of the &lt;code&gt;min-content&lt;/code&gt; keyword value
&lt;/h3&gt;

&lt;p&gt;To implement the &lt;code&gt;min-content&lt;/code&gt; keyword in a real-world project, let’s consider the following use cases.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#adding-captions-to-images"&gt;
  &lt;/a&gt;
  Adding captions to images
&lt;/h4&gt;

&lt;p&gt;In a case where we want to mark up an image with a caption that follows the width of the image, we can use &lt;code&gt;min-content&lt;/code&gt; to achieve the desired result seamlessly.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;figure&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
    &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://upload.wikimedia.org/wikipedia/commons/1/1b/Square_200x200.png"&lt;/span&gt;
    &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"sample"&lt;/span&gt;
  &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;
    Lorem ipsum dolor sit amet consectetur adipisicing elit
  &lt;span class="nt"&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This gives the &lt;code&gt;figure&lt;/code&gt; element a border to see the extent of the size.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dkjYOaCu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/Giving-figure-element-border.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dkjYOaCu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/Giving-figure-element-border.png" alt="Giving A Figure Element A Border With A Caption Underneath"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since the &lt;code&gt;figure&lt;/code&gt; is a block element, its width naturally occupies its container element.&lt;/p&gt;

&lt;p&gt;By assigning a &lt;code&gt;width&lt;/code&gt; of &lt;code&gt;min-content&lt;/code&gt; to the &lt;code&gt;figure&lt;/code&gt; element, its size is defined by the widest bit of content. In this case, the widest bit is the image:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;figure&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* ... */&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;min-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;a href="https://codesandbox.io/s/elastic-mirzakhani-3wnm4?file=/index.html"&gt;renders the following output&lt;/a&gt; with the image defining the width:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_r9cZhtG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/Image-defines-caption-width.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_r9cZhtG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/Image-defines-caption-width.png" alt="Image Defines Caption Width, Caption Wrapped Underneath Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#sizing-grid-and-flexbox-items"&gt;
  &lt;/a&gt;
  Sizing grid and flexbox items
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;min-content&lt;/code&gt; is also a valid value for a grid and flex sizing properties. In CSS, the &lt;code&gt;flex-basis&lt;/code&gt; property of a flexbox system sets the size of the content box. This makes the &lt;code&gt;min-content&lt;/code&gt; keyword an ideal value to automatically get the intrinsic minimum size of the box.&lt;/p&gt;

&lt;p&gt;In this case, we use &lt;code&gt;flex-basis: min-content&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Likewise, in a grid system, we can assign the &lt;code&gt;min-content&lt;/code&gt; keyword to the &lt;code&gt;grid-template-rows&lt;/code&gt; or &lt;code&gt;grid-template-columns&lt;/code&gt; properties to get the intrinsic minimum box size.&lt;/p&gt;

&lt;p&gt;Let’s consider the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"footer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that we removed the element's content for brevity.&lt;/p&gt;

&lt;p&gt;Let’s transform the structure to a grid layout and apply a &lt;code&gt;min-content&lt;/code&gt; keyword:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.grid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;min-content&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;min-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this, we get &lt;a href="https://codesandbox.io/s/ecstatic-lucy-fthqf?file=/index.html"&gt;the intrinsic minimum value for the content height&lt;/a&gt; without causing an overflow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cKbx7rQA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/intrinsic-min-value-content-height.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cKbx7rQA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/intrinsic-min-value-content-height.png" alt="Intrinsic min-value Content Height"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we do not apply &lt;code&gt;min-content&lt;/code&gt;, we get different behavior. To visualize this behavior, we can temporarily remove the &lt;code&gt;grid-template-rows&lt;/code&gt; and apply a fixed height to the &lt;code&gt;header&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.grid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;...&lt;/span&gt;
  &lt;span class="c"&gt;/* grid-template-rows: min-content auto min-content; */&lt;/span&gt;
  &lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;...&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this, we no longer get the natural content size. In this case, the element boxes may be too big for their content, causing the content to overflow the boxes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-raw-maxcontent-endraw-keyword-value"&gt;
  &lt;/a&gt;
  The &lt;code&gt;max-content&lt;/code&gt; keyword value
&lt;/h2&gt;

&lt;p&gt;According to &lt;a href="https://www.w3.org/TR/css-sizing-3/#max-content"&gt;W3C specifications&lt;/a&gt;, &lt;code&gt;max-content&lt;/code&gt; represents a box’s ideal size in a given axis when given infinite available space.&lt;/p&gt;

&lt;p&gt;In other words, &lt;code&gt;max-content&lt;/code&gt; represents the size a box needs to contain all of its content without being wrapped or it overflows the box.&lt;/p&gt;

&lt;p&gt;With this, let’s apply a &lt;code&gt;max-content&lt;/code&gt; to an element size:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Lorem ipsum dolor, sit amet consectetur adipisicing elit.&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Lorem ipsum dolor, sit amet consectetur adipisicing elit.&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As this renders, &lt;a href="https://codesandbox.io/s/zen-northcutt-i45k3?file=/index.html:308-514"&gt;we receive this output&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PmFDZt-6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/max-content.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PmFDZt-6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/max-content.png" alt="max-content Wrapping Box To Text Length"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, the first box element takes the &lt;code&gt;auto&lt;/code&gt; default width value, thus accommodating as much space as the container allows. But, when applying the &lt;code&gt;max-content&lt;/code&gt; value to the same box, we get the exact content size of the box.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;max-content&lt;/code&gt; keyword value is ideal in situations where we need the maximum width of the content to decide the size of the box.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-practical-example-of-the-raw-maxcontent-endraw-value-keyword"&gt;
  &lt;/a&gt;
  A practical example of the &lt;code&gt;max-content&lt;/code&gt; value keyword
&lt;/h3&gt;

&lt;p&gt;Consider a grid layout structure where we apply a &lt;code&gt;max-content&lt;/code&gt; to the grid columns:&lt;/p&gt;

&lt;p&gt;The HTML includes the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Lorem&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    Lorem ipsum dolor sit amet
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Lorem ipsum dolor&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, add the CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="n"&gt;max-content&lt;/span&gt; &lt;span class="n"&gt;max-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* ... */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;a href="https://codesandbox.io/s/amazing-mountain-m4tdj?file=/index.html"&gt;renders the column with the &lt;code&gt;max-content&lt;/code&gt; value&lt;/a&gt; taking the content size while the column with the &lt;code&gt;fr&lt;/code&gt; unit takes the remaining available space.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vzqcwQc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/max-content-take-content-size-fr-unit.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vzqcwQc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/max-content-take-content-size-fr-unit.png" alt="max-content Takes Content Size From fr Unit, Seen In Left-Side Column"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-undesirable-effect-of-raw-maxcontent-endraw-"&gt;
  &lt;/a&gt;
  The undesirable effect of &lt;code&gt;max-content&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;max-content&lt;/code&gt;, as we’ve learned, works pretty well for an infinite available space where the box element can contain all of its content without being wrapped and overflowing its parent container.&lt;/p&gt;

&lt;p&gt;However, in a case where the parent or ancestral element cannot accommodate the size of the box, the box tends to overflow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Lorem ipsum dolor, sit amet consectetur adipisicing elit.&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adding the CSS sets the &lt;code&gt;width&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* ... */&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.item1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;max-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* ... */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this code, &lt;a href="https://codesandbox.io/s/restless-framework-2nrie?file=/index.html"&gt;the intrinsic maximum width of the box is longer than the container&lt;/a&gt;, causing overflow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6WcIQHgU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/intrinsic-max-width-cause-overflow-e1631895721851.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6WcIQHgU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/intrinsic-max-width-cause-overflow-e1631895721851.png" alt="Using Intrinsic max-width Causes Overflow From Container"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this situation, we must adjust the box content to fit the container’s available space. This is where the &lt;code&gt;fit-content&lt;/code&gt; keyword comes in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-raw-fitcontent-endraw-keyword-value"&gt;
  &lt;/a&gt;
  The &lt;code&gt;fit-content&lt;/code&gt; keyword value
&lt;/h2&gt;

&lt;p&gt;Depending on the size of a container element, when applying &lt;code&gt;fit-content&lt;/code&gt; to a box element within the container, the box either uses the &lt;code&gt;max-content&lt;/code&gt; size, the &lt;code&gt;min-content&lt;/code&gt; size, or the available container as its ideal size.&lt;/p&gt;

&lt;p&gt;When given infinite available space, the &lt;code&gt;max-content&lt;/code&gt; defines the box’s ideal size. However, when the viewport is narrower, the available space becomes the box's size to prevent overflow until the box uses &lt;code&gt;min-content&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we revisit our last example, by applying a &lt;code&gt;fit-content&lt;/code&gt; to the box element, we have the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.item1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;-moz-fit-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fit-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* ... */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that we must use a &lt;code&gt;-moz-&lt;/code&gt; vendor prefix to use this keyword value on Mozilla Firefox.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/nifty-currying-2t84u?file=/index.html"&gt;As seen in the GIF below&lt;/a&gt;, the box uses the available space but never expands beyond the &lt;code&gt;max-content&lt;/code&gt;, and when the viewport is narrower, the box never shrinks beyond the &lt;code&gt;min-content&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UEXFHZQu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/Box-do-not-shrink-min-content.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UEXFHZQu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/Box-do-not-shrink-min-content.gif" alt="Box Does Not Shrink Past The Specified min-content"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-fitcontent-endraw-function"&gt;
  &lt;/a&gt;
  The &lt;code&gt;fit-content()&lt;/code&gt; function
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://www.w3.org/TR/css-sizing-3/#valdef-width-fit-content-length-percentage"&gt;W3C specifications&lt;/a&gt; also note the &lt;code&gt;fit-content()&lt;/code&gt; function allows developers to define a maximum allowable width for an element’s size. This CSS function often sizes grid columns and rows using the &lt;code&gt;grid-template-columns&lt;/code&gt; and &lt;code&gt;grid-template-rows&lt;/code&gt;, respectively.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;fit-content()&lt;/code&gt; accepts a &lt;code&gt;percentage&lt;/code&gt; or &lt;code&gt;length&lt;/code&gt; unit as an argument:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;fit-content&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;percentage&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nt"&gt;length&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similar to the &lt;code&gt;fit-content&lt;/code&gt; keyword, when assigning this function value to determine the sizing in a grid layout, it uses the specified argument as the maximum allowable box size while ensuring the box never goes beyond the &lt;code&gt;max-content&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s consider a grid layout structure and apply a &lt;code&gt;fit-content()&lt;/code&gt; to the grid column:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;     
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Lorem ipsum dolor&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    Lorem ipsum dolor, sit consectetur adipisicing elit.!
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Lorem&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the CSS, we add &lt;code&gt;fit-content()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fit-content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;fit-content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;250px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* ... */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The argument passed to the &lt;code&gt;fit-content()&lt;/code&gt;differentiates the two functions.&lt;/p&gt;

&lt;p&gt;In the first column of the grid layout, we passed &lt;code&gt;200px&lt;/code&gt; as an argument, hence, the column has a maximum allowable width of &lt;code&gt;200px&lt;/code&gt; and the second column has a maximum allowable width of &lt;code&gt;250px&lt;/code&gt;. The third column takes the remaining container space since it is assigned a value of &lt;code&gt;auto&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The boxes whose sizes are defined by &lt;a href="https://codesandbox.io/s/modern-thunder-cobt0?file=/index.html"&gt;&lt;code&gt;fit-content()&lt;/code&gt; never expand beyond the specified width&lt;/a&gt; while also never going beyond the &lt;code&gt;max-content&lt;/code&gt;. But, when the viewport is narrower, the box can shrink to fit the content.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eEN1Cjcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/fit-content.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eEN1Cjcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/09/fit-content.png" alt="fit-content Fits Text In First Two Columns"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;With intrinsic keyword values, we have the flexibility to present page content in the most appropriate ways. In this tutorial, we covered how to use the &lt;code&gt;min-content&lt;/code&gt;, &lt;code&gt;max-content&lt;/code&gt;, and &lt;code&gt;fit-content&lt;/code&gt; keyword values with practical examples so you can start using them in your projects.&lt;/p&gt;

&lt;p&gt;If you like this tutorial, ensure you share this content around the web. And, if you have questions or contributions, please share your thoughts via the comment section.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#is-your-frontend-hogging-your-users-cpu"&gt;
  &lt;/a&gt;
  Is your frontend hogging your users' CPU?
&lt;/h2&gt;

&lt;p&gt;As web frontends get increasingly complex, resource-greedy features demand more and more from the browser. If you’re interested in monitoring and tracking client-side CPU usage, memory usage, and more for all of your users in production, &lt;a href="https://logrocket.com/signup/"&gt;try LogRocket&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IQurLkEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt; is like a DVR for web apps, recording everything that happens in your web app or site. Instead of guessing why problems happen, you can aggregate and report on key frontend performance metrics, replay user sessions along with application state, log network requests, and automatically surface all errors.&lt;/p&gt;

&lt;p&gt;Modernize how you debug web apps — &lt;a href="https://logrocket.com/signup/"&gt;Start monitoring for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Console methods that you might not know but can change how you debug your code</title>
      <author>ShahiLalit</author>
      <pubDate>Wed, 29 Sep 2021 17:24:04 +0000</pubDate>
      <link>https://dev.to/shahilalit/console-methods-that-you-might-not-know-but-can-change-how-you-debug-your-code-3eee</link>
      <guid>https://dev.to/shahilalit/console-methods-that-you-might-not-know-but-can-change-how-you-debug-your-code-3eee</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;“A problem well stated is a problem half solved.” --John Dewey&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Howdy JavaScript Developers 👋&lt;/p&gt;

&lt;p&gt;We all love to write code, right? Most of us just follow 👇&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K54dsOY3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632889545186/eK3dQbqGY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K54dsOY3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632889545186/eK3dQbqGY.png" alt="eat sleep.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Until we get some bugs in our code and we have to break our routine and most of it changes like this 👇&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LAHcXWEt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632890108390/UEXbMxUav.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LAHcXWEt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632890108390/UEXbMxUav.png" alt="Eat.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am going to help you here write the magical code which will never have any 🐞.&lt;/p&gt;

&lt;p&gt;Hehe! ok, I am kidding there is no one in this heavenly earth who can teach you to code without bugs. &lt;br&gt;
But there are some ways we can reduce our time to debug and help us understand the 🐞 and source of it.&lt;/p&gt;

&lt;p&gt;I hope you are guys are still with me, if you are good, let's get started -&lt;/p&gt;

&lt;p&gt;As JavaScript Developer we all have used the console inside the dev tool way often. &lt;br&gt;
Our first approach to test or debug our code is to log it to the console.&lt;/p&gt;

&lt;p&gt;But do you know there are different console methods that we can use to differentiate between our logs?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consoleloghello-world"&gt;
  &lt;/a&gt;
  console.log("hello world!")
&lt;/h2&gt;

&lt;p&gt;🔸 The most commonly used console method is &lt;code&gt;console.log()&lt;/code&gt; which prints anything passed to it as arguments on the console&lt;/p&gt;

&lt;p&gt;🔸 Multiple arguments can be passed.&lt;/p&gt;

&lt;p&gt;🔸 It can be strings, variables, objects, functions, or HTML elements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qMl-fS20--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632890947608/J3p5UIZHv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qMl-fS20--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632890947608/J3p5UIZHv.png" alt="carbon.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consoleassertexpression-message"&gt;
  &lt;/a&gt;
  console.assert(expression, message);
&lt;/h2&gt;

&lt;p&gt;🔸 It is used to make conditional log statements on the console.&lt;/p&gt;

&lt;p&gt;🔸 It prints the message (passed as the second argument) if the expression (passed as the first argument) is false.&lt;/p&gt;

&lt;p&gt;🔸 If the assertion is true nothing is printed on the console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dC5cdvEz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632891730271/LH3eeaPn7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dC5cdvEz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632891730271/LH3eeaPn7.png" alt="Screenshot 2021-09-27 at 7.59.45 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consolewarn"&gt;
  &lt;/a&gt;
  console.warn()
&lt;/h2&gt;

&lt;p&gt;🔸 It prints a warning message onto the console.&lt;/p&gt;

&lt;p&gt;🔸 The message would be highlighted with yellow color.&lt;/p&gt;

&lt;p&gt;🔸 It gives us the call stack for the warning log as well which helps to trace the warning in the call stack.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2TXZoVL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632891867344/w3P3GT3Nx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2TXZoVL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632891867344/w3P3GT3Nx.png" alt="Screenshot 2021-09-27 at 8.02.22 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consoleerror"&gt;
  &lt;/a&gt;
  console.error()
&lt;/h2&gt;

&lt;p&gt;🔸 Just like the &lt;code&gt;console.warn()&lt;/code&gt; it prints the error message on the console.&lt;/p&gt;

&lt;p&gt;🔸 The message is highlighted with red color.&lt;/p&gt;

&lt;p&gt;🔸 We get the error call stack for easy debugging.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RrpWC-4s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632892521788/XqMCbqQy5.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RrpWC-4s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632892521788/XqMCbqQy5.jpeg" alt="error.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consolecountlabel"&gt;
  &lt;/a&gt;
  console.count(label);
&lt;/h2&gt;

&lt;p&gt;🔸 It prints the number of times the count method has been called for the argument passed to it.&lt;/p&gt;

&lt;p&gt;🔸 If no argument is passed to it, it counts for the &lt;code&gt;default&lt;/code&gt; label.&lt;/p&gt;

&lt;p&gt;🔸 Argument can only be a string.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lprgIZQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632892732043/cWZRY7j67.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lprgIZQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632892732043/cWZRY7j67.png" alt="Screenshot 2021-09-27 at 8.15.16 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consoletabledata"&gt;
  &lt;/a&gt;
  console.table(data)
&lt;/h2&gt;

&lt;p&gt;🔸 It prints arrays and objects into tabular form.&lt;/p&gt;

&lt;p&gt;🔸 It needs to have an array or an object as the mandatory argument.&lt;/p&gt;

&lt;p&gt;🔸 First column is labeled as &lt;code&gt;index&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;🔸 For arrays, the first column is the indices of the elements &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uTz_Va-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632892958659/cE2VqR11B.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uTz_Va-o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632892958659/cE2VqR11B.png" alt="Screenshot 2021-09-27 at 8.28.43 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;amp; for objects, its keys.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2HiJLvjO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632892997852/fwVdKRYsL.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2HiJLvjO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632892997852/fwVdKRYsL.jpeg" alt="table.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consoletimelabel-amp-consoletimeendlabel"&gt;
  &lt;/a&gt;
  console.time(label) &amp;amp; console.timeEnd(label)
&lt;/h2&gt;

&lt;p&gt;🔸 &lt;code&gt;console.time(label)&lt;/code&gt; starts the timer to track the time taken by a task.&lt;/p&gt;

&lt;p&gt;🔸 &lt;code&gt;console.timeEnd(label)&lt;/code&gt; stops the timer for that label and prints the total time taken since it started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zKQY9CG2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632893791333/a3hzAWr76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zKQY9CG2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632893791333/a3hzAWr76.png" alt="Screenshot 2021-09-27 at 8.35.18 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔸 &lt;code&gt;label&lt;/code&gt; argument has to be the same and once we call &lt;code&gt;console.timeEnd(label)&lt;/code&gt; the timer is removed from the stack.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consoletimeloglabel"&gt;
  &lt;/a&gt;
  console.timeLog(label)
&lt;/h2&gt;

&lt;p&gt;🔸 It logs the time elapsed since the timer had started after running the &lt;code&gt;console.time(label)&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;🔸 Needs to have the same &lt;code&gt;label&lt;/code&gt; argument as the &lt;code&gt;console.time(label)&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gQpC0vsl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632894073406/lfJade8lY.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gQpC0vsl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632894073406/lfJade8lY.jpeg" alt="timeLog.jpeg"&gt;&lt;/a&gt;&lt;br&gt;
🔸 If called after &lt;code&gt;console.timeEnd(label)&lt;/code&gt; it gives the warning message stating &lt;code&gt;Timer Label does not exist&lt;/code&gt; because &lt;code&gt;timer&lt;/code&gt; gets popped out of the stack.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consolegroup-amp-consolegroupend"&gt;
  &lt;/a&gt;
  console.group() &amp;amp; console.groupEnd()
&lt;/h2&gt;

&lt;p&gt;🔸 &lt;code&gt;console.group()&lt;/code&gt; groups the logs with an indentation&lt;/p&gt;

&lt;p&gt;🔸 &lt;code&gt;console.groupEnd()&lt;/code&gt; closes the group started before.&lt;/p&gt;

&lt;p&gt;🔸 can be used to batch errors and warnings together or print similar information together.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IWKxVuEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632894530058/UvQSrTbBq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IWKxVuEs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632894530058/UvQSrTbBq.png" alt="Screenshot 2021-09-27 at 8.53.59 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consoletrace"&gt;
  &lt;/a&gt;
  console.trace()
&lt;/h2&gt;

&lt;p&gt;🔸 It shows a complete call stack when debugging from the point it is called.&lt;/p&gt;

&lt;p&gt;🔸 It can very handy when debugging a complex code with multiple files and modules.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_XogGEdU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632894774080/CzJmVh_wv1.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_XogGEdU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632894774080/CzJmVh_wv1.jpeg" alt="trace.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consoleclear"&gt;
  &lt;/a&gt;
  console.clear()
&lt;/h2&gt;

&lt;p&gt;🔸 When the console gets too cluttered, you can use &lt;code&gt;console.clear()&lt;/code&gt; method to clear the console.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-tip"&gt;
  &lt;/a&gt;
  Bonus Tip
&lt;/h2&gt;

&lt;p&gt;You can print log statements with your own custom styles. There are a bunch of &lt;code&gt;string substitutions&lt;/code&gt; that you can use to manipulate the log statement. &lt;br&gt;
But it does work only with console methods that accept strings as arguments.&lt;/p&gt;

&lt;p&gt;Check how using &lt;code&gt;%c&lt;/code&gt; with our string in &lt;code&gt;console.log()&lt;/code&gt; changes the output of the log statements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oYTzPva4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632896233585/-wTmLgVpe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oYTzPva4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632896233585/-wTmLgVpe.png" alt="Screenshot 2021-09-29 at 11.46.58 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;Alright! that's the end of today's post. I hope you guys liked it and maybe you would start using the above console methods in proper use-cases instead of using just &lt;code&gt;console.log()&lt;/code&gt; for all your debugging.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“If your only tool is a hammer then every problem looks like a nail.”&lt;br&gt;
-- Abraham Maslow &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you are someone who is interested in Frontend development and wants to know more about it, consider following me 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/LalitSinghShahi"&gt;@Twitter&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/lalitshahi/"&gt;@LinkedIn&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/shahilalit"&gt;@Dev.to&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.lalitshahi.com/"&gt;@Hashnode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feedbacks, good or bad are appreciated 🧡&lt;/p&gt;

&lt;p&gt;Until next time, keep coding, keep learning and KEEP DEBUGGING. 😁&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

&lt;p&gt;Lalit&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>frontend</category>
      <category>debugging</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Discuss: Open Source Contribution Pain Points and Success?</title>
      <author>Christina Gorton</author>
      <pubDate>Wed, 29 Sep 2021 17:17:28 +0000</pubDate>
      <link>https://dev.to/devteam/discuss-open-source-contribution-pain-points-and-success-297n</link>
      <guid>https://dev.to/devteam/discuss-open-source-contribution-pain-points-and-success-297n</guid>
      <description>&lt;p&gt;Hey!👋 I am Christina, a Developer Advocate at Forem who focuses on the open source community. &lt;br&gt;
As I continue to work with the community in our open source project, I would love to understand any pain points or successes you have had while trying to contribute to an open source project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You do not need to name the specific project. If you have tried to contribute to DEV/Forem and want to give specifics that is fine!&lt;/p&gt;

&lt;p&gt;Have you tried contributing to open source before? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#were-you-unsuccessful"&gt;
  &lt;/a&gt;
  Were you unsuccessful?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/i8tV2kJB8Gig8/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/i8tV2kJB8Gig8/giphy.gif" alt="Frustrated"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If so, what prevented you from contributing? &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Did you encounter any unusual roadblocks?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What could the project maintainers have done better to help you?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Did you feel like the documentation was hard to follow?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#were-you-successful"&gt;
  &lt;/a&gt;
  Were you successful?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/g4eOulPFxnIEE/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/g4eOulPFxnIEE/giphy.gif" alt="Success"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If so, what do you think helped you succeed in contributing to the project?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What advice would you give to someone else trying to contribute to open source.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Is there anything you would do differently?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>discuss</category>
      <category>opensource</category>
      <category>hacktoberfest</category>
    </item>
    <item>
      <title>URL Shortener with Rust, Svelte, &amp; AWS (5/): Frontend</title>
      <author>Miles Watson</author>
      <pubDate>Wed, 29 Sep 2021 17:04:06 +0000</pubDate>
      <link>https://dev.to/mileswatson/url-shortener-with-rust-svelte-aws-5-frontend-p0n</link>
      <guid>https://dev.to/mileswatson/url-shortener-with-rust-svelte-aws-5-frontend-p0n</guid>
      <description>&lt;p&gt;In the last post, we worked on containerizing the backend of our application, so that we can deploy it with a single command. In this post, we will create a static front-end application with &lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt; + &lt;a href="https://bulma.io/"&gt;Bulma&lt;/a&gt;, and then integrate it into our Rust code + Dockerfile. I will be using the &lt;a href="https://yarnpkg.com/"&gt;Yarn&lt;/a&gt; package manager, but feel free to use &lt;code&gt;npm&lt;/code&gt; if you prefer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cloning-the-template"&gt;
  &lt;/a&gt;
  Cloning the Template
&lt;/h3&gt;

&lt;p&gt;First, run the following command in the root of your repo. This will create a directory called &lt;code&gt;svelte&lt;/code&gt; which contains a template that we'll use to build a simple frontend for our API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init svelte@next svelte
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Select the &lt;code&gt;Skeleton project&lt;/code&gt; template, &lt;code&gt;Yes&lt;/code&gt; to Typescript, and then &lt;code&gt;No&lt;/code&gt; to all the other questions.&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;svelte&lt;/code&gt; directory, run &lt;code&gt;yarn install&lt;/code&gt; to install dependencies, and then &lt;code&gt;yarn dev&lt;/code&gt; to start a dev server. By going to &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt; you should see a simple message:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B8yk-eIH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jrnua1zzka9velle7acb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B8yk-eIH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jrnua1zzka9velle7acb.png" alt="template welcome page"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#adding-a-static-adapter"&gt;
  &lt;/a&gt;
  Adding a Static Adapter
&lt;/h3&gt;

&lt;p&gt;Before we can deploy the site, we need to adapt it to our deployment target. SvelteKit provides a number of different adapters for platforms like Cloudflare Workers, Netlify, and Vercel. In our case, however, we will be using &lt;code&gt;adapter-static&lt;/code&gt; to prerender our entire site. &lt;/p&gt;

&lt;p&gt;First, we need to install the adapter using Yarn.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;--dev&lt;/span&gt; @sveltejs/adapter-static@next
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we need to change the &lt;code&gt;svelte.config.js&lt;/code&gt; file to configure the adapter. Import the adapter...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;adapter&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@sveltejs/adapter-static&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...then update &lt;code&gt;config.kit&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// hydrate the &amp;lt;div id="svelte"&amp;gt; element in src/app.html&lt;/span&gt;
    &lt;span class="nl"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// prerender the pages so they can be served statically&lt;/span&gt;
    &lt;span class="nx"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By running &lt;code&gt;yarn build&lt;/code&gt;, you should see that the &lt;code&gt;/svelte/build&lt;/code&gt; directory is populated with an &lt;code&gt;index.html&lt;/code&gt; file (among some other files / folders).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#serving-with-rocket"&gt;
  &lt;/a&gt;
  Serving with Rocket
&lt;/h3&gt;

&lt;p&gt;Now that we have statically built our application, we can serve it with Rocket. To do so, simply change our launch function to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[launch]&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;rocket&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nn"&gt;rocket&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.manage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;DashMap&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="nf"&gt;.mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nd"&gt;routes!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;shorten&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="nf"&gt;.mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nd"&gt;cfg!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug_assertions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c"&gt;// debug mode, therefore serve relative to crate root&lt;/span&gt;
                &lt;span class="nn"&gt;FileServer&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;rocket&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;relative!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/svelte/build"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c"&gt;// dockerized, therefore serve from absolute path&lt;/span&gt;
                &lt;span class="nn"&gt;FileServer&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/app/static"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;if cfg!(debug...&lt;/code&gt; statement will become clearer later on, when we update the Dockerfile.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fixing-tests"&gt;
  &lt;/a&gt;
  Fixing Tests
&lt;/h3&gt;

&lt;p&gt;Unfortunately, you may get an email saying that your Github Actions tests have failed. If you look at the logs, it should be apparent that the &lt;code&gt;FileServer&lt;/code&gt; failed to mount, because it couldn't find the provided directory. To fix this, we can add steps to install yarn, install dependencies, and then build the static site:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build Rust&lt;/span&gt;
    &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cargo build&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Yarn&lt;/span&gt;
    &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm install --global yarn&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Dependencies&lt;/span&gt;
    &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn --cwd svelte install&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build Svelte&lt;/span&gt;
    &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn --cwd svelte run build&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run Tests&lt;/span&gt;
    &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cargo test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the sake of completion, I also added a simple test to check that the static site is being served as expected.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[test]&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;static_site&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;tracked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;rocket&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="nf"&gt;.expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"valid rocket instance"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="nf"&gt;.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.dispatch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="nf"&gt;.status&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nn"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tests should now pass as expected.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#updating-the-dockerfile"&gt;
  &lt;/a&gt;
  Updating the Dockerfile
&lt;/h3&gt;

&lt;p&gt;Currently our Dockerfile uses two images - one to build the Rust project, and the second to run the executable. Now we need to add a third one for building the static site.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;
&lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;cargo &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--offline&lt;/span&gt; &lt;span class="nt"&gt;--path&lt;/span&gt; .

&lt;span class="c"&gt;# use a node image for building the site&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:16 as static&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /svelte&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./svelte .&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; yarn build

&lt;span class="c"&gt;# use a slim image for actually running the container.&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; rust:slim&lt;/span&gt;

&lt;span class="c"&gt;# ...&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=build /usr/local/cargo/bin/aws-rust-api /usr/local/bin/aws-rust-api&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=static /svelte/build/ ./static&lt;/span&gt;

&lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now be able to start your application using &lt;code&gt;docker-compose --build&lt;/code&gt; and see your site when you go to &lt;a href="http://127.0.0.1"&gt;http://127.0.0.1&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-functionality"&gt;
  &lt;/a&gt;
  Adding Functionality
&lt;/h3&gt;

&lt;p&gt;Although our site is being served statically, we still don't have any functionality! First, we will add support for simple Bulma styling to the &lt;code&gt;app.html&lt;/code&gt; &lt;code&gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/code&gt; tags.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will be using &lt;a href="https://www.npmjs.com/package/superagent"&gt;SuperAgent&lt;/a&gt; for making API requests, so let's add it to our dependency list.&lt;br&gt;
&lt;code&gt;yarn add superagent&lt;/code&gt;&lt;br&gt;
Next, we will create a &lt;code&gt;routes/__layout.svelte&lt;/code&gt; file, which will wrap around any of the routes in the directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"svelte"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container is-fluid my-5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;nav&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar is-dark"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"navigation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar-brand"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar-item ml-5 is-dark"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/favicon.png"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"32"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"32"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"title is-2 navbar-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;URL Shortener&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will give us a simple, function-less navbar to go across the top of the screen.&lt;br&gt;
Next, change the &lt;code&gt;index.svelte&lt;/code&gt; file to contain the following script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;superagent&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;superagent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;superagent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/api/shorten?url=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`http://&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we can bind to these variables / functions by appending the following to the &lt;code&gt;index.svelte&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {#if request == null}
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"field has-addons"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"control"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
                    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"input"&lt;/span&gt;
                    &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
                    &lt;span class="na"&gt;bind:value=&lt;/span&gt;&lt;span class="s"&gt;{url}&lt;/span&gt;
                    &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"URL"&lt;/span&gt;
                &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"control"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button is-info"&lt;/span&gt; &lt;span class="na"&gt;on:click=&lt;/span&gt;&lt;span class="s"&gt;{click}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Shorten&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    {:else}
        {#await request}
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Loading...&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        {:then response}
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-header-title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Done!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt;
                        &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;
                        &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;{getUrl(response.text)}&lt;/span&gt;
                        &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{getUrl(response.text)}&lt;span class="nt"&gt;&amp;lt;/a&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;footer&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-footer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt;
                        &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-footer-item button"&lt;/span&gt;
                        &lt;span class="na"&gt;on:click=&lt;/span&gt;&lt;span class="s"&gt;{()&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; (request = null)}&amp;gt;Back&lt;span class="nt"&gt;&amp;lt;/button&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt;
                        &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-footer-item button is-info"&lt;/span&gt;
                        &lt;span class="na"&gt;on:click=&lt;/span&gt;&lt;span class="s"&gt;{()&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                            navigator.clipboard.writeText(
                                getUrl(response.text)
                            )}&amp;gt;Copy&lt;span class="nt"&gt;&amp;lt;/button&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        {:catch}
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Something went wrong!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        {/await}
    {/if}
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;bind:value={url}&lt;/code&gt; is one of Svelte's special two-way bindings - updating the textbox will update the variable, and vice versa.&lt;/p&gt;

&lt;p&gt;When the user clicks the button, the &lt;code&gt;click&lt;/code&gt; function will start an asynchronous request to the API, and set the &lt;code&gt;request&lt;/code&gt; variable to the uncompleted promise.&lt;/p&gt;

&lt;p&gt;This will then cause the page to show &lt;code&gt;Loading...&lt;/code&gt; until the request completes, at which point the shortened URL is displayed (with some buttons).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-product"&gt;
  &lt;/a&gt;
  Final Product
&lt;/h3&gt;

&lt;p&gt;If you did everything correctly, you should be able to run &lt;code&gt;docker-compose up --build&lt;/code&gt; and use your site at &lt;a href="http://127.0.0.1"&gt;http://127.0.0.1&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--biP6IqYr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/GmSKZx4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--biP6IqYr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/GmSKZx4.gif" alt="URL Shortener Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all for this post! If you have any issues, make sure to check out the &lt;a href="https://github.com/mileswatson/url-shortener/tree/part-5"&gt;part-5 tag&lt;/a&gt; of my repo.&lt;/p&gt;

&lt;p&gt;In the next post, we will cover the basics of EB, and set up a CD pipeline for automatically deploying your program to the cloud. Make sure to click the "Follow" button if you want to be alerted when the next part is available!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#footnote"&gt;
  &lt;/a&gt;
  Footnote
&lt;/h4&gt;

&lt;p&gt;If you enjoyed reading this, then consider dropping a like or following me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/mileswatson"&gt;DEV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/watsonmiles"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/miles__watson"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mileswatson"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm just starting out, so the support is greatly appreciated!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer - I'm a (mostly) self-taught programmer, and I use my blog to share things that I've learnt on my journey to becoming a better developer. Because of this, I apologize in advance for any inaccuracies I might have made - criticism and corrections are welcome!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>rust</category>
      <category>svelte</category>
      <category>aws</category>
      <category>docker</category>
    </item>
  </channel>
</rss>
