<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>December 18th, 2020: What did you learn this week?</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Fri, 18 Dec 2020 13:50:31 +0000</pubDate>
      <link>https://dev.to/nickytonline/december-18th-2020-what-did-you-learn-this-week-458j</link>
      <guid>https://dev.to/nickytonline/december-18th-2020-what-did-you-learn-this-week-458j</guid>
      <description>&lt;p&gt;It's that time of the week again.&lt;/p&gt;

&lt;p&gt;So wonderful devs, what did you learn this week? It could be programming tips, career advice etc.&lt;/p&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/w7fJO4TOqiaSQ/giphy-downsized-large.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/w7fJO4TOqiaSQ/giphy-downsized-large.gif" alt="Deadpool and his cohorts chatting"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;Feel free to comment with what you learnt and/or reference your TIL post to give it some more exposure.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__5305"&gt;
  
    .ltag__tag__id__5305 .follow-action-button{
      background-color: #ffedc9 !important;
      color: #820000 !important;
      border-color: #ffedc9 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="/t/todayilearned" class="ltag__tag__link"&gt;todayilearned&lt;/a&gt; 
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        Summarize a concept that is new to you.
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>weeklylearn</category>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>FlyWeight Design Pattern in Go</title>
      <author>tomassirio</author>
      <pubDate>Fri, 18 Dec 2020 12:05:24 +0000</pubDate>
      <link>https://dev.to/tomassirio/flyweight-design-pattern-in-go-463o</link>
      <guid>https://dev.to/tomassirio/flyweight-design-pattern-in-go-463o</guid>
      <description>&lt;p&gt;Hey there!&lt;/p&gt;

&lt;p&gt;New week, new design pattern to learn. This week I'm writing about the FlyWeight Design pattern. This pattern is a little bit different from the ones I've written before because I feel like most of it is oriented toward memory conservation on your computing which we pretty much don't care about on our daily basis. However, if you are working with distributed systems, old computers, or enormous database sets, maybe this pattern is for you.&lt;/p&gt;

&lt;p&gt;So, let's imagine that you want to work on an MMO game (massive multiplayer online). This would require you to handle a lot of users with their first name, Lastname and username. A lot of this information would be repeated through your dataset, so let's see what we can do.&lt;/p&gt;

&lt;p&gt;Let's create a simple struct for our Users with their full name as an attribute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;FullName&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullName&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And we need to initialize some users on our main function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;u1&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;NewUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"John Doe"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;u2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;NewUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Jane Doe"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;u3&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;NewUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Jane Smith"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is where my point is beginning to make sense. See, the name Jane and the surname Doe are both repeated and we are storing them both times in our database. If we had a limited resource database this would be a huge problem when 700 Jan-Michael Vincent join our application.&lt;/p&gt;

&lt;p&gt;Then, let's make our application memory oriented. To achieve this, we are going to create a new User struct and a string slice to store all the names:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;allNames&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;User2&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;uint8&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The interesting thing is that now the new User is not going to store a string for the name but a int8 slice. The downside of this implementation is that the New User constructor will require more processing power.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;NewUser2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullName&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;User2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;getOrAdd&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;uint8&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;allNames&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;allNames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;uint8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;allNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allNames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;uint8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allNames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;User2&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;parts&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;parts&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;getOrAdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This method has an internal function declared which receives a string (our name) and returns us the position on the allNames slice where that name is. If it's not there, it will store it on the last position of the array and give us the position back. Then the constructor will use this internal function to store or retrieve each of the strings on our name (divided by a space).&lt;/p&gt;

&lt;p&gt;Every time we need a New User's Full Name we will use a method that will reconstruct it's name:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;User2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;parts&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allNames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now let's go to our main function to test what we've created:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;john&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;NewUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"John Doe"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;jane&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;NewUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Jane Doe"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;alsoJane&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;NewUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Jane Smith"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;john&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jane&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alsoJane&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Memory taken by users:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;john&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jane&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alsoJane&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="n"&gt;john2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;NewUser2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"John Doe"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;jane2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;NewUser2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Jane Doe"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;alsoJane2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;NewUser2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Jane Smith"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;totalMem&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;allNames&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;totalMem&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;totalMem&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;john2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;totalMem&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jane2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;totalMem&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alsoJane2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Memory taken by users2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;totalMem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We are creating 3 Users and 3 Users2 and we are printing how much memory do each of the structs consume:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go run main.go
John Doe
Jane Doe
Jane Smith
Memory taken by &lt;span class="nb"&gt;users&lt;/span&gt;: 26
Memory taken by users2 22
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We are saving 4 bytes on this example. It ain't much but it's &lt;del&gt;honest work&lt;/del&gt; memory saved on 3 strings. When names begin to get redundant on your database these 4 bytes will multiply exponentially saving a lot of memory.&lt;/p&gt;

&lt;p&gt;As I stated before, this Design Pattern is a little bit different from the ones I wrote of before. It's memory oriented instead of Behaviour oriented so use it when in need instead of just pushing random patterns all over your applications.&lt;/p&gt;

&lt;p&gt;That's it for this week. Hope you liked it.&lt;br&gt;
Happy coding&lt;/p&gt;

</description>
      <category>go</category>
      <category>design</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>My Web Development Study Plan For 2021</title>
      <author>Eddy Vinck</author>
      <pubDate>Fri, 18 Dec 2020 09:27:26 +0000</pubDate>
      <link>https://dev.to/eddyvinck/my-web-development-study-plan-for-2021-5b57</link>
      <guid>https://dev.to/eddyvinck/my-web-development-study-plan-for-2021-5b57</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally posted on my &lt;a href="https://www.eddyvinck.com/blog/my-2021-web-developer-study-plan/"&gt;personal website&lt;/a&gt;. You can subscribe to my newsletter &lt;a href="https://www.eddyvinck.com/newsletter"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;As 2020 is coming to an end, I have been reflecting on how much I have learned this year.&lt;/p&gt;

&lt;p&gt;For many, including me, it has been a rather difficult year. Unsurprisingly, this has had an impact on what I have been able to learn or build.&lt;/p&gt;

&lt;p&gt;Looking towards 2021 with the intention of further improving myself as a developer I have written a list of things I want to study.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learning" class="anchor"&gt;
  &lt;/a&gt;
  Learning
&lt;/h2&gt;

&lt;p&gt;I have many things I want to learn. The things I want to learn generally fall into the following categories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fundamentals and getting better at things I already know and use&lt;/li&gt;
&lt;li&gt;Promising tools and concepts that I've been keepign an eye on&lt;/li&gt;
&lt;li&gt;Things that will allow me to create things I cannot create with my current skillset&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer: This list is ambitious&lt;/strong&gt;. Especially since I will be moving into my own house next year. It's unlikely I will be able to do all of it, and that's okay.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#back-to-basics" class="anchor"&gt;
  &lt;/a&gt;
  Back to basics
&lt;/h3&gt;

&lt;p&gt;The fundamentals of the web, JavaScript and programming will always be relevant. I find that even as someone who has been coding for about 5 years that I still benefit from going back to the basics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;These are the fundamentals that I want to study (again)&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Event loop&lt;/li&gt;
&lt;li&gt;Design patterns&lt;/li&gt;
&lt;li&gt;Prototypes and classes&lt;/li&gt;
&lt;li&gt;Regular functions vs. arrow functions&lt;/li&gt;
&lt;li&gt;Learn more about how web pages are rendered&lt;/li&gt;
&lt;li&gt;Promises and &lt;code&gt;async&lt;/code&gt; / &lt;code&gt;await&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;How the internet works (generally)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#refreshers" class="anchor"&gt;
  &lt;/a&gt;
  Refreshers
&lt;/h3&gt;

&lt;p&gt;It's good to know the tools you use. I want to brush up on things that I use frequently or want to start using more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;These are the things I want to brush up on&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go through all the ReactJS documentation again&lt;/li&gt;
&lt;li&gt;Setting up GraphQL servers&lt;/li&gt;
&lt;li&gt;Unit testing with &lt;a href="https://testing-library.com/docs/react-testing-library/intro"&gt;React Testing Library&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;End to end testing with &lt;a href="https://www.cypress.io/"&gt;Cypress&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Chrome devtools - what's new that I'm not using yet?&lt;/li&gt;
&lt;li&gt;TypeScript&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#going-outside-of-my-comfort-zone" class="anchor"&gt;
  &lt;/a&gt;
  Going outside of my comfort zone
&lt;/h3&gt;

&lt;p&gt;Up until this year I have mostly been "just" a frontend developer. In an effort to go outside of my comfort zone I have been venturing into the backend, but only slightly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I want to get more familiar with backend in 2021.&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Authentication with JWT (JSON Web Tokens)&lt;/li&gt;
&lt;li&gt;API Gateways&lt;/li&gt;
&lt;li&gt;Restful APIs (I have mostly done GraphQL at this point)&lt;/li&gt;
&lt;li&gt;PostgresQL with Sequelize&lt;/li&gt;
&lt;li&gt;Server logging best practices beyond &lt;code&gt;console.log&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Docker and Docker Compose&lt;/li&gt;
&lt;li&gt;Get more familiar with Postman (or Insomnia which is a free alternative)&lt;/li&gt;
&lt;li&gt;Authentication library like PassportJS&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Serverless and JAMstack&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Serverless and JAMstack are things that aren't going away anytime soon. I have some general knowledge about it, but I haven't really taken the time yet to dive deeper into these concepts and build something with it. Now that this way of building has matured I think it's time to give it a fair shot.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;NextJS: it's a framework for React that is designed to work great for JAMstack projects. I'll probably be taking Wes Bos' Advanced React course when he updates it since I already purchased it.&lt;/li&gt;
&lt;li&gt;A headless CMS like KeystoneJS, Strapi or similar. Probably one of the cheaper ones since some are &lt;em&gt;really&lt;/em&gt; expensive.&lt;/li&gt;
&lt;li&gt;AWS Lambda and other Amazon services that might come in handy.&lt;/li&gt;
&lt;li&gt;Something with a database. Not sure what yet.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are also things in frontend that I want to check out but haven't yet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;These are my frontend picks:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;TailwindCSS&lt;/li&gt;
&lt;li&gt;XState: a state management library&lt;/li&gt;
&lt;li&gt;React Hook Form&lt;/li&gt;
&lt;li&gt;Styled System: a helper library for Styled Components, which I already use&lt;/li&gt;
&lt;li&gt;Design systems&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#courses" class="anchor"&gt;
  &lt;/a&gt;
  Courses
&lt;/h3&gt;

&lt;p&gt;I have a Frontend Masters subscription and I will be using it of course.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;These are the courses I want to check out next year:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;JavaScript Hard Parts v2&lt;/li&gt;
&lt;li&gt;JavaScript Recent Parts&lt;/li&gt;
&lt;li&gt;JavaScript New Hard Parts&lt;/li&gt;
&lt;li&gt;Production Grade TypeScript&lt;/li&gt;
&lt;li&gt;Production Ready NextJS&lt;/li&gt;
&lt;li&gt;Intro to Containers&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Maybe I'll also take a look at the Computer Science Learning Path.&lt;/p&gt;

&lt;p&gt;If I can get through the courses above I will also be checking out some of the serverless / JAMstack courses on there.&lt;/p&gt;



Not sponsored by the way (but I definitely could be because I recommend them so often.)



&lt;h3&gt;
  &lt;a href="#additional-things-to-learn" class="anchor"&gt;
  &lt;/a&gt;
  Additional things to learn
&lt;/h3&gt;

&lt;p&gt;These are things related to my field, but not particularly to my role. These are just things that interest me generally.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How to write good content&lt;/li&gt;
&lt;li&gt;Search Engine Optimization (SEO)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#doing" class="anchor"&gt;
  &lt;/a&gt;
  Doing
&lt;/h2&gt;

&lt;p&gt;Learning is very important, but to truly learn you must also do.&lt;/p&gt;

&lt;p&gt;I would like to start a larger side project in 2021. I'm not sure what it is going to be yet.&lt;/p&gt;

&lt;p&gt;I'd like to have a project that has either a proper backend that I can use to learn more about backend or a serverless setup. Or maybe I will build something serverless, but have a serverless application that works together with some sort of backend I can build.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-busy-year-ahead" class="anchor"&gt;
  &lt;/a&gt;
  A busy year ahead
&lt;/h2&gt;

&lt;p&gt;In 2020 I definitely overworked myself a couple times to a point where I &lt;em&gt;needed&lt;/em&gt; a longer break. I'd love to avoid that in 2021.&lt;/p&gt;

&lt;p&gt;Not that taking breaks is a bad thing, but ideally I should not overwork myself to the point where I don't want to do any coding outside of work for a couple of months. I'd like to be more consistent with programming throughout the year.&lt;/p&gt;

&lt;p&gt;With that in mind, I don't think I will be able do all the things in this list.&lt;/p&gt;

&lt;p&gt;I will be moving into my own house and learn a lot of things related to that, so I'll also have less time to work on web development outside of work.&lt;/p&gt;

&lt;p&gt;I can always move things to 2022 if I don't get to them in 2021.&lt;/p&gt;

&lt;p&gt;Happy holidays!&lt;/p&gt;




&lt;p&gt;&lt;em&gt;This article was originally posted on my &lt;a href="https://www.eddyvinck.com/blog/my-2021-web-developer-study-plan/"&gt;personal website&lt;/a&gt;. You can subscribe to my newsletter &lt;a href="https://www.eddyvinck.com/newsletter"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to build reusable layouts in React JS  with Router</title>
      <author>Julfikar Haidar</author>
      <pubDate>Fri, 18 Dec 2020 06:21:50 +0000</pubDate>
      <link>https://dev.to/julfikarhaidar/how-to-build-reusable-layouts-in-react-js-with-router-5gf7</link>
      <guid>https://dev.to/julfikarhaidar/how-to-build-reusable-layouts-in-react-js-with-router-5gf7</guid>
      <description>&lt;p&gt;This is a common problem I couldn't do the common layout when I started to learn React. The problem is getting bigger as the scope of work increases. That is why there is a need for a common layout and we will use it again and again. Let's get started&lt;/p&gt;

&lt;p&gt;Here is a simplified implementation of what I did.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oif7MEWJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jekefjcp3dzt81m9dine.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oif7MEWJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jekefjcp3dzt81m9dine.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This layout component will accept to get props such as title, description, className, children by default use some property here but we will be able to pass these properties from any other bases where we use this layout and that way we can dynamically display these content. We put inside single div and title, description these are headings but they will have the entire content. So with the   last name of let's say let's asset class name as well so you might want different layout for different pages. Here classname send as props and content avaiable in children props . So this our layout now we should be able to use this layout any of the pages.Let's try in the Home page to begin with.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KV8hWXB7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5ambzdw3a916tegluq7g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KV8hWXB7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5ambzdw3a916tegluq7g.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So let's say load from home page then we can use layout instead of using the div all we can do in layout. Now pass the title,desciption and send the content at the moment let's send anything let's just leave empty.Now if you go to the home page you can see we have the target achieve&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vrWA9X6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ex8bcsxzgoa0wi8ien57.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vrWA9X6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ex8bcsxzgoa0wi8ien57.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So this way you can use this component and use any other component as your need For example if you don't send anything as props then you'll see the default title and description of what we have given &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--itWFB-R2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/57x8sgy1tkag44rgyoo5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--itWFB-R2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/57x8sgy1tkag44rgyoo5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The similar way I use on another page before we do that let's further to go on and make it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WMBd1FOO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mt85ohdr0kxhgy6aelib.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WMBd1FOO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mt85ohdr0kxhgy6aelib.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here the code base whatever pass as props to get it and show output will be shown as we send.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QkvQzMz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6zek6d22wwwedr0yiawi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QkvQzMz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6zek6d22wwwedr0yiawi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If I made a mistake forgive me for seeking advice on how to do a better way thank you guy's and let's make it easy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Julfikar-Haidar"&gt;https://github.com/Julfikar-Haidar&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>TikTok Scraper</title>
      <author>Dmitry Kalinin</author>
      <pubDate>Fri, 18 Dec 2020 05:07:03 +0000</pubDate>
      <link>https://dev.to/id1/tiktok-scraper-25a9</link>
      <guid>https://dev.to/id1/tiktok-scraper-25a9</guid>
      <description>&lt;p&gt;This is not an official API support and etc. This is just a scraper that is using TikTok Web API to scrape media and related meta information.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#installation" class="anchor"&gt;
  &lt;/a&gt;
  Installation
&lt;/h4&gt;

&lt;p&gt;tiktok-scraper requires Node.js v10+ to run.&lt;/p&gt;

&lt;p&gt;Install from NPM&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-g&lt;/span&gt; tiktok-scraper
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Install from YARN&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn global add tiktok-scraper
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#in-terminal" class="anchor"&gt;
  &lt;/a&gt;
  In Terminal
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tiktok-scraper &lt;span class="nt"&gt;--help&lt;/span&gt;
Usage: tiktok-scraper &amp;lt;&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;options]
Commands:
  tiktok-scraper user &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;     Scrape videos from username. Enter only username
  tiktok-scraper hashtag &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;  Scrape videos from hashtag. Enter hashtag without &lt;span class="c"&gt;#&lt;/span&gt;
  tiktok-scraper trend         Scrape posts from current trends
  tiktok-scraper music &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;    Scrape posts from a music &lt;span class="nb"&gt;id &lt;/span&gt;number
  tiktok-scraper video &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;    Download single video without the watermark
  tiktok-scraper &lt;span class="nb"&gt;history       &lt;/span&gt;View previous download &lt;span class="nb"&gt;history
  &lt;/span&gt;tiktok-scraper from-file &lt;span class="o"&gt;[&lt;/span&gt;file] &lt;span class="o"&gt;[&lt;/span&gt;async]  Scrape &lt;span class="nb"&gt;users&lt;/span&gt;, hashtags, music, videos mentioned
                                &lt;span class="k"&gt;in &lt;/span&gt;a file. 1 value per 1 line
Options:
  &lt;span class="nt"&gt;--version&lt;/span&gt;               Show version number                          &lt;span class="o"&gt;[&lt;/span&gt;boolean]
  &lt;span class="nt"&gt;--timeout&lt;/span&gt;               Set &lt;span class="nb"&gt;timeout &lt;/span&gt;between requests. Timeout is &lt;span class="k"&gt;in
                          &lt;/span&gt;Milliseconds: 1000 mls &lt;span class="o"&gt;=&lt;/span&gt; 1 s              &lt;span class="o"&gt;[&lt;/span&gt;default: 0]
  &lt;span class="nt"&gt;--number&lt;/span&gt;, &lt;span class="nt"&gt;-n&lt;/span&gt;            Number of posts to scrape. If you will &lt;span class="nb"&gt;set &lt;/span&gt;0 &lt;span class="k"&gt;then &lt;/span&gt;all
                          posts will be scraped                     &lt;span class="o"&gt;[&lt;/span&gt;default: 0]
  &lt;span class="nt"&gt;--proxy&lt;/span&gt;, &lt;span class="nt"&gt;-p&lt;/span&gt;             Set single proxy                         &lt;span class="o"&gt;[&lt;/span&gt;default: &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="nt"&gt;--proxy-file&lt;/span&gt;            Use proxies from a file. Scraper will use random
                          proxies from the file per each request. 1 line 1
                          proxy.                                   &lt;span class="o"&gt;[&lt;/span&gt;default: &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="nt"&gt;--download&lt;/span&gt;, &lt;span class="nt"&gt;-d&lt;/span&gt;          Download video posts to the folder with the name input
                          &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;                        &lt;span class="o"&gt;[&lt;/span&gt;boolean] &lt;span class="o"&gt;[&lt;/span&gt;default: &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="nt"&gt;--asyncDownload&lt;/span&gt;, &lt;span class="nt"&gt;-a&lt;/span&gt;     Number of concurrent downloads            &lt;span class="o"&gt;[&lt;/span&gt;default: 5]
  &lt;span class="nt"&gt;--hd&lt;/span&gt;                    Download video &lt;span class="k"&gt;in &lt;/span&gt;HD. Video size will be x5-x10 &lt;span class="nb"&gt;times
                          &lt;/span&gt;larger and this will affect scraper execution speed.
                          This option only works &lt;span class="k"&gt;in &lt;/span&gt;combination with &lt;span class="nt"&gt;-w&lt;/span&gt; flag
                                                      &lt;span class="o"&gt;[&lt;/span&gt;boolean] &lt;span class="o"&gt;[&lt;/span&gt;default: &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="nt"&gt;--zip&lt;/span&gt;, &lt;span class="nt"&gt;-z&lt;/span&gt;               ZIP all downloaded video posts
                                                      &lt;span class="o"&gt;[&lt;/span&gt;boolean] &lt;span class="o"&gt;[&lt;/span&gt;default: &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="nt"&gt;--filepath&lt;/span&gt;              File path to save all output files.
      &lt;span class="o"&gt;[&lt;/span&gt;default: &lt;span class="s2"&gt;"/Users/blah/blah"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="nt"&gt;--filetype&lt;/span&gt;, &lt;span class="nt"&gt;--type&lt;/span&gt;, &lt;span class="nt"&gt;-t&lt;/span&gt;  Type of the output file where post information will
                          be saved. &lt;span class="s1"&gt;'all'&lt;/span&gt; - save information about all posts to
                          the&lt;span class="sb"&gt;`&lt;/span&gt; &lt;span class="s1"&gt;'json'&lt;/span&gt; and &lt;span class="s1"&gt;'csv'&lt;/span&gt;
                               &lt;span class="o"&gt;[&lt;/span&gt;choices: &lt;span class="s2"&gt;"csv"&lt;/span&gt;, &lt;span class="s2"&gt;"json"&lt;/span&gt;, &lt;span class="s2"&gt;"all"&lt;/span&gt;, &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;default: &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="nt"&gt;--filename&lt;/span&gt;, &lt;span class="nt"&gt;-f&lt;/span&gt;          Set custom filename &lt;span class="k"&gt;for &lt;/span&gt;the output files &lt;span class="o"&gt;[&lt;/span&gt;default: &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="nt"&gt;--noWaterMark&lt;/span&gt;, &lt;span class="nt"&gt;-w&lt;/span&gt;       Download video without the watermark. This option will
                          affect the execution speed  &lt;span class="o"&gt;[&lt;/span&gt;boolean] &lt;span class="o"&gt;[&lt;/span&gt;default: &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="nt"&gt;--store&lt;/span&gt;, &lt;span class="nt"&gt;-s&lt;/span&gt;             Scraper will save the progress &lt;span class="k"&gt;in &lt;/span&gt;the OS TMP or Custom
                          folder and &lt;span class="k"&gt;in &lt;/span&gt;the future usage will only download new
                          videos avoiding duplicates  &lt;span class="o"&gt;[&lt;/span&gt;boolean] &lt;span class="o"&gt;[&lt;/span&gt;default: &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="nt"&gt;--historypath&lt;/span&gt;           Set custom path where &lt;span class="nb"&gt;history &lt;/span&gt;file/files will be
                          stored
                   &lt;span class="o"&gt;[&lt;/span&gt;default: &lt;span class="s2"&gt;"/var/folders/d5/fyh1_f2926q7c65g7skc0qh80000gn/T"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="nt"&gt;--remove&lt;/span&gt;, &lt;span class="nt"&gt;-r&lt;/span&gt;            Delete the &lt;span class="nb"&gt;history &lt;/span&gt;record by entering &lt;span class="s2"&gt;"TYPE:INPUT"&lt;/span&gt; or
                          &lt;span class="s2"&gt;"all"&lt;/span&gt; to clean all the history. For example: user:bob
                                                                   &lt;span class="o"&gt;[&lt;/span&gt;default: &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="nt"&gt;--webHookUrl&lt;/span&gt;       Set webhook url to receive scraper result as HTTP requests.
                     For example to your own API                   &lt;span class="o"&gt;[&lt;/span&gt;default: &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="nt"&gt;--method&lt;/span&gt;           Receive data to your webhook url as POST or GET request
                                      &lt;span class="o"&gt;[&lt;/span&gt;choices: &lt;span class="s2"&gt;"GET"&lt;/span&gt;, &lt;span class="s2"&gt;"POST"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;default: &lt;span class="s2"&gt;"POST"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="nt"&gt;--help&lt;/span&gt;             Show &lt;span class="nb"&gt;help&lt;/span&gt;                                         &lt;span class="o"&gt;[&lt;/span&gt;boolean]
Examples:
  tiktok-scraper user USERNAME &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; 100
  tiktok-scraper user USERNAME &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; 100 &lt;span class="nt"&gt;-f&lt;/span&gt; customFileName
  tiktok-scraper hashtag HASHTAG_NAME &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; 100
  tiktok-scraper trend &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; 100
  tiktok-scraper music MUSICID &lt;span class="nt"&gt;-n&lt;/span&gt; 100
  tiktok-scraper music MUSIC_ID &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; 50
  tiktok-scraper video https://www.tiktok.com/@tiktok/video/6807491984882765062
  tiktok-scraper &lt;span class="nb"&gt;history
  &lt;/span&gt;tiktok-scraper &lt;span class="nb"&gt;history&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; user:bob
  tiktok-scraper &lt;span class="nb"&gt;history&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; all
  tiktok-scraper from-file BATCH_FILE ASYNC_TASKS &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; 25
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#features" class="anchor"&gt;
  &lt;/a&gt;
  Features
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Download unlimited post metadata from the User, Hashtag, Trends, or Music-Id pages&lt;/li&gt;
&lt;li&gt;Save post metadata to the JSON/CSV files&lt;/li&gt;
&lt;li&gt;Download media with and without the watermark and save to the ZIP file&lt;/li&gt;
&lt;li&gt;Download single video without the watermark from the CLI&lt;/li&gt;
&lt;li&gt;Sign URL to make custom request to the TikTok API&lt;/li&gt;
&lt;li&gt;Extract metadata from the User, Hashtag and Single Video pages&lt;/li&gt;
&lt;li&gt;Save previous progress and download only new videos that weren’t downloaded before. This feature only works from the * * CLI and only if download flag is on.&lt;/li&gt;
&lt;li&gt;View and manage previously downloaded posts history in the CLI&lt;/li&gt;
&lt;li&gt;Scrape and download user, hashtag, music feeds and single videos specified in the file in batch mode&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>bash</category>
    </item>
    <item>
      <title>Part 2: Add A Dead-Man's Switch To A Rails Application</title>
      <author>Yechiel Kalmenson</author>
      <pubDate>Fri, 18 Dec 2020 04:57:34 +0000</pubDate>
      <link>https://dev.to/yechielk/part-2-add-a-dead-man-s-switch-to-a-rails-application-243j</link>
      <guid>https://dev.to/yechielk/part-2-add-a-dead-man-s-switch-to-a-rails-application-243j</guid>
      <description>&lt;h3&gt;
  &lt;a href="#ah-yes-where-were-we" class="anchor"&gt;
  &lt;/a&gt;
  Ah Yes, Where Were We?
&lt;/h3&gt;

&lt;p&gt;In &lt;a href="https://dev.to/yechielk/part-1-adding-a-dead-man-s-switch-to-a-rails-application-bgp"&gt;part 1&lt;/a&gt; of this tutorial, we learned how to set up the part of the deadman's switch that allows us to reset the switch.&lt;/p&gt;

&lt;p&gt;In part 2, we will get to the main part; how to set up a script that will run if something happens and the switch isn't reset in a given amount of time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rake-it-in" class="anchor"&gt;
  &lt;/a&gt;
  Rake It In
&lt;/h3&gt;

&lt;p&gt;The standard way of running scripts in Rails apps (and Ruby environments generally) is using Rake tasks.&lt;/p&gt;

&lt;p&gt;Rake tasks are, in their most basic form, Ruby scripts that you can run using the command &lt;code&gt;rake [task-name]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In fact, chances are you've run quite a few already! If you've run commands like &lt;code&gt;rails db:setup&lt;/code&gt;, &lt;code&gt;rails db:migrate&lt;/code&gt;, these are rake tasks that come built-in with Rails for setting up your database!&lt;/p&gt;

&lt;p&gt;We can write our own Rake tasks as well. They usually live in the &lt;code&gt;lib/tasks/&lt;/code&gt; directory of our Rails app, and the files use the &lt;code&gt;.rake&lt;/code&gt; extension instead of the `.rb extension Ruby scripts usually use.&lt;/p&gt;

&lt;p&gt;Let's start by creating a file &lt;code&gt;lib/tasks/deadmans-switch.rake&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the file, let's put the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`ruby&lt;br&gt;
desc "Deadman's Switch"&lt;/p&gt;

&lt;p&gt;task :deadman_switch do&lt;br&gt;
    puts "Our first task!"&lt;br&gt;
end&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;At this point, we have a very basic Rake task. If you run &lt;code&gt;rake -T&lt;/code&gt; in your terminal, you should get a list of all the Rake asks you have available, including this one:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;shell&lt;br&gt;
rake deadmans_switch                       # Deadman's switch&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;On the left side, we have the name of our task, and on the right, the description that we gave it in the first line following the &lt;code&gt;desc&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;If we run &lt;code&gt;rake deadmans_switch&lt;/code&gt; in our terminal, we should see the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;shell&lt;br&gt;
$  rake deadman_switch &lt;br&gt;
=&amp;gt; Our first task!&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Of course, at this point, our task does nothing more than print a line to let us know it's there, but we can replace that with any Ruby code we want, so let's do that!&lt;/p&gt;

&lt;p&gt;Replace the contents of the task with:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;ruby&lt;br&gt;
    if 7.days.ago &amp;lt; Deadman.last_reset&lt;br&gt;
        puts "Still alive!"&lt;br&gt;
    else&lt;br&gt;
        puts "Executing Deadman Switch!"&lt;br&gt;
        # whatever you want to do goes here&lt;br&gt;
    end&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This script now uses the &lt;code&gt;.last_reset&lt;/code&gt; method we put on our &lt;code&gt;DeadmansSwitch&lt;/code&gt; class to check when you last reset the switch. If it was less than seven days ago, it just prints "Still alive!" and exits; if you didn't reset the switch in over a week, it'll execute whatever script you tell it to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I put a week in my script because I figured that was a reasonable timeframe for my needs. You can change that to 2 days, two weeks, a month, a year, whatever you feel the right timeframe for your needs. Ruby's &lt;code&gt;Time&lt;/code&gt; class offers great methods for denoting a timeframe, which you can use similar to the &lt;code&gt;7.days.ago&lt;/code&gt; that I used.&lt;/p&gt;

&lt;p&gt;Now if you run &lt;code&gt;rake deadmans_switch&lt;/code&gt; in the console, you should get:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;shell&lt;br&gt;
$  rake deadman_switch &lt;br&gt;
=&amp;gt; Still Alive!&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;At this point, you can start working on the actual body of the script, which will be different depending on what it is you need a dead man's switch, so I'll leave you to it.&lt;/p&gt;

&lt;p&gt;If you want to test and debug the script by running it and don't want to wait seven days for the switch to expire, you can change the &lt;code&gt;7.days.ago&lt;/code&gt; in your &lt;code&gt;if&lt;/code&gt; statement to something more reasonable like &lt;code&gt;7.minutes.ago&lt;/code&gt;. Just don't forget to change it back when you're done.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#have-you-been-triggered" class="anchor"&gt;
  &lt;/a&gt;
  Have You Been Triggered?
&lt;/h3&gt;

&lt;p&gt;Now that we have a script and a way to ensure it only runs after a given time, there's one more thing we need to do. We probably don't want this script to run more than once.&lt;/p&gt;

&lt;p&gt;For local scripts that run using a cron job, this isn't such an issue. You can probably use the script to reset the crontab. But this is a script running on Heroku where we don't have access to the scheduler from within the script, so we'll have to get creative.&lt;/p&gt;

&lt;p&gt;One option I explored, which turned out to be a dead-end for reasons I'll explain soon, but I'll include it here anyway purely for its entertainment value, was to put the following on the last line fo my script:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;ruby&lt;br&gt;
File.delete(__FILE__)&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__FILE__&lt;/code&gt; is a Ruby constant representing the current file, so what that line of code does is it deletes the current file once it reaches that line. Sort of like those spy movies where you get a note telling you to destroy it once you're finished reading it.&lt;/p&gt;

&lt;p&gt;At first, I didn't think it would work. Spending the better part of last year developing for Windows servers and battling numerous "file in use" errors, I was sure Linux wouldn't let me do it either. But I did it just for kicks, and it turns out Linux is a lot more trusting! You can even try it yourself; create a test file, paste the above line of code, run it using Ruby, and watch it disappear!&lt;/p&gt;

&lt;p&gt;While that's a pretty fun solution, unfortunately, it won't work for our purposes. Heroku, as mentioned in Part 1, uses an ephemeral file system, so even if we delete the file containing the script, the next time the app deploys, Heroku will do a fresh pull from GitHub, and our file will reappear.&lt;/p&gt;

&lt;p&gt;If we want to keep track of whether our script ran, we will need to use something that persists, like a database entry. Fortunately, I'm a psychic who can see into the future, and if you remember, in Part 1, when we created our &lt;code&gt;deamans_switches&lt;/code&gt; table, we added a &lt;code&gt;triggered&lt;/code&gt; column, and we will now make use of it.&lt;/p&gt;

&lt;p&gt;The first thing we will do is add two more methods to our &lt;code&gt;DeadmansSwitch&lt;/code&gt; class in &lt;code&gt;app/models/deadmans_switch.rb&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`ruby&lt;br&gt;
    def self.triggered&lt;br&gt;
        create(triggered: true)&lt;br&gt;
    end&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def self.triggered?
    where(triggered: true).size &amp;gt; 0
end
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The first one, &lt;code&gt;.triggered&lt;/code&gt;, creates a new row in the database, but unlike a regular row, we set the &lt;code&gt;triggered&lt;/code&gt; column to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second method, &lt;code&gt;.triggered?&lt;/code&gt;, queries the database and checks if there are any rows where &lt;code&gt;triggered&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; and returns &lt;code&gt;true&lt;/code&gt; if there is at least one such row.&lt;/p&gt;

&lt;p&gt;Now let's go back to our Rake task and put those to use.&lt;/p&gt;

&lt;p&gt;The first thing we will do is add the following line at the end of the script after everything we wanted to run ran:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;ruby&lt;br&gt;
Deadman.triggered&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will enter a row in the database with &lt;code&gt;triggered: true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, all the way at the beginning of our script, in the very first line, we will put the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;ruby&lt;br&gt;
abort if Deadman.triggered?&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will check the database and see if there are any rows where &lt;code&gt;triggered: true&lt;/code&gt; and abort the script if it finds any.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-scheduled" class="anchor"&gt;
  &lt;/a&gt;
  Getting Scheduled
&lt;/h3&gt;

&lt;p&gt;At this point, we have a working deadman's switch. The only thing left is to deploy it along with our Rails app and set up a scheduler to run it.&lt;/p&gt;

&lt;p&gt;My app is deployed on Heroku, so the instructions will be for getting set up on Heroku. If you have a different setup, things will work differently for you.&lt;/p&gt;

&lt;p&gt;So once you've written up all the code, committed it, and pushed it off to Heroku, here is how to go about scheduling your script.&lt;/p&gt;

&lt;p&gt;From the Heroku dashboard, navigate to the "Resources" tab.&lt;/p&gt;

&lt;p&gt;Once in the "Resources" tab, find the button that says "Find more add-ons" and click on it.&lt;/p&gt;

&lt;p&gt;Search for &lt;a href="https://elements.heroku.com/addons/scheduler"&gt;Heroku Scheduler&lt;/a&gt; and install it and provision it to your app.&lt;/p&gt;

&lt;p&gt;Once it's installed properly, you should see it under add-ons in your resources tab. Click on the link to the Scheduler and then on the button that says "Add Job."&lt;/p&gt;

&lt;p&gt;You will be prompted to set a schedule to run your task (I set it to run every night at midnight) and which command to run, which you should set to &lt;code&gt;rake deadmans_switch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hit "Save Job," and that's it, you're all set!&lt;/p&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
      <category>scripting</category>
    </item>
    <item>
      <title>React Redux: Token Authentication example with JWT &amp; Axios</title>
      <author>bezkoder</author>
      <pubDate>Fri, 18 Dec 2020 03:33:45 +0000</pubDate>
      <link>https://dev.to/bezkoder/react-redux-token-authentication-example-with-jwt-axios-1i1p</link>
      <guid>https://dev.to/bezkoder/react-redux-token-authentication-example-with-jwt-axios-1i1p</guid>
      <description>&lt;p&gt;In this tutorial, we’re gonna build a React + Redux Application for Token Authentication example with JWT, LocalStorage, React Router, Axios and Bootstrap. I will show you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JWT Authentication Flow for User Signup &amp;amp; User Login&lt;/li&gt;
&lt;li&gt;Project Structure for React Redux JWT Authentication, LocalStorage, Router, Axios&lt;/li&gt;
&lt;li&gt;Working with Redux Actions, Reducers, Store for Application state&lt;/li&gt;
&lt;li&gt;Creating React Components with Form Validation&lt;/li&gt;
&lt;li&gt;React Components for accessing protected Resources (Authorization)&lt;/li&gt;
&lt;li&gt;Dynamic Navigation Bar in React App&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Inside tutorial, you can also find Spring Boot backend that works well with this React Client:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;one working with MySQL/PostgreSQL&lt;/li&gt;
&lt;li&gt;and one working with MongoDB&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#overview-of-react-redux-jwt-authentication-example" class="anchor"&gt;
  &lt;/a&gt;
  Overview of React Redux JWT Authentication example
&lt;/h2&gt;

&lt;p&gt;We will build a React application in that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are Login/Logout, Signup pages.&lt;/li&gt;
&lt;li&gt;Form data will be validated by front-end before being sent to back-end.&lt;/li&gt;
&lt;li&gt;Depending on User’s roles (admin, moderator, user), Navigation Bar changes its items automatically.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are the screenshots:&lt;br&gt;
– Signup Page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qTGuJPYq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qi9jnomvx8rhtpcwxn2c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qTGuJPYq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qi9jnomvx8rhtpcwxn2c.png" alt="react-redux-jwt-authentication-token-example-signup"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– Signup failed:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QBmoUUV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/29glpi1hkkjha9r1k3f0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QBmoUUV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/29glpi1hkkjha9r1k3f0.png" alt="react-redux-jwt-authentication-token-example-signup-email-duplicate"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– Form Validation Support:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lwU3knz6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2mqrlvr0mefez74ggts3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lwU3knz6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2mqrlvr0mefez74ggts3.png" alt="react-redux-jwt-authentication-token-example-form-validation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– Login Page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xPwbI6Wh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zdya3j6wofa1p6p04su2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xPwbI6Wh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zdya3j6wofa1p6p04su2.png" alt="react-redux-jwt-authentication-token-example-login"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– Profile Page (for successful Login):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p0fRYDf9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/df5v88t9pimjv1vss9g2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p0fRYDf9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/df5v88t9pimjv1vss9g2.png" alt="react-redux-jwt-authentication-token-example-profile-page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– For Moderator account login, the navigation bar will change by authorities:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9ky0LKOq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cny05u9va48oaeomy662.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ky0LKOq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/cny05u9va48oaeomy662.png" alt="react-redux-jwt-authentication-token-example-authorization-login"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– Check Browser Local Storage:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o6BFcWy_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ftb9bzu540ukjhdg3y2k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o6BFcWy_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ftb9bzu540ukjhdg3y2k.png" alt="react-redux-jwt-authentication-token-example-local-storage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– Check State in Redux using &lt;code&gt;redux-devtools-extension&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pTr7zkXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jin3hsd49fxpa2paixi7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pTr7zkXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jin3hsd49fxpa2paixi7.png" alt="react-redux-jwt-authentication-token-example-redux-devtools-extension"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#user-registration-and-user-login-flow" class="anchor"&gt;
  &lt;/a&gt;
  User Registration and User Login Flow
&lt;/h2&gt;

&lt;p&gt;For JWT Authentication, we’re gonna call 2 endpoints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;POST &lt;code&gt;api/auth/signup&lt;/code&gt; for User Registration&lt;/li&gt;
&lt;li&gt;POST &lt;code&gt;api/auth/signin&lt;/code&gt; for User Login&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following flow shows you an overview of Requests and Responses that React Client will make or receive. This React Client must add a JWT to HTTP Header before sending request to protected resources.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pwW3vLlW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gqmaudsppx48t7zdv16h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pwW3vLlW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gqmaudsppx48t7zdv16h.png" alt="react-redux-jwt-authentication-token-example-flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find step by step to implement these back-end servers in following tutorial:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-jwt-authentication/"&gt;Spring Boot JWT Authentication with Spring Security, MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-security-postgresql-jwt-authentication/"&gt;Spring Boot JWT Authentication with Spring Security, PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-jwt-auth-mongodb/"&gt;Spring Boot JWT Authentication with Spring Security, MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/node-js-jwt-authentication-mysql/"&gt;Node.js JWT Authentication &amp;amp; Authorization with MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/node-js-mongodb-auth-jwt/"&gt;Node.js JWT Authentication &amp;amp; Authorization with MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/node-js-jwt-authentication-postgresql/"&gt;Node.js JWT Authentication &amp;amp; Authorization with PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#react-component-diagram-with-redux-router-axios" class="anchor"&gt;
  &lt;/a&gt;
  React Component Diagram with Redux, Router, Axios
&lt;/h2&gt;

&lt;p&gt;Let’s look at the diagram below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oid8MyXy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0m0skxpbu722jo01zzks.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oid8MyXy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0m0skxpbu722jo01zzks.png" alt="react-redux-jwt-authentication-token-example-project-overview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more details, implementation and Github Source code, please visit:&lt;br&gt;
&lt;a href="https://bezkoder.com/react-redux-jwt-auth/"&gt;https://bezkoder.com/react-redux-jwt-auth/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Without Redux:&lt;br&gt;
&lt;a href="https://bezkoder.com/react-jwt-auth/"&gt;React JWT Authentication example&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>redux</category>
      <category>authentication</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What I learned from failing my technical interviews</title>
      <author>Farhana</author>
      <pubDate>Thu, 17 Dec 2020 22:53:02 +0000</pubDate>
      <link>https://dev.to/farhanaxmustafa/what-i-learned-from-failing-my-technical-interviews-276a</link>
      <guid>https://dev.to/farhanaxmustafa/what-i-learned-from-failing-my-technical-interviews-276a</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vEiGr0XU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r7zjod4bb04m0691kbbj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vEiGr0XU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r7zjod4bb04m0691kbbj.png" alt="undraw_interview_rmcf"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Technical interviews are a nerve wracking experience that can demoralize a developer. In the past, these consisted of weird brain churning questions where you had to &lt;a href="https://www.businessinsider.com/answers-to-15-google-interview-questions-that-will-make-you-feel-stupid-2009-11"&gt;calculate how many golf balls can fit in a school bus&lt;/a&gt;. Thankfully, we don't have to answer these anymore. But to this day, the interview process has candidates solve unrealistic problems, with at least one other pair of eyes judging your every move, in at least 15 minutes.&lt;/p&gt;

&lt;p&gt;A little about me, I graduated with a bachelor's degree in computer science. It was the hardest experience ever and I even grew some gray hairs. However, I was fortunate enough to have found an amazing group of friends where we regularly studied together with our minds blank, our eyes dry and our bellies full of fast food in the computer lab until dawn.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-of-the-companies-i-interviewed-with-that-made-a-long-lasting-impact-on-me" class="anchor"&gt;
  &lt;/a&gt;
  Some of the companies I interviewed with that made a long, lasting impact on me
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#ibm" class="anchor"&gt;
  &lt;/a&gt;
  IBM
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Year: 2017&lt;/li&gt;
&lt;li&gt;Position: Front-end Developer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My first blunder. I haven't done a coding assessment before. I attempted my first one through an online platform that recorded you through your webcam. I received two questions, one was similar to FizzBuzz. FIZZBUZZ! I didn't know how to solve it. I swear. I was a mess on that keyboard. I had no idea how to solve that question fully. I gave up, submitted whatever I had and went to my next class.&lt;/p&gt;

&lt;p&gt;What I learned:&lt;br&gt;
Although I was humiliated to fail &lt;a href="https://leetcode.com/problems/fizz-buzz/"&gt;FizzBuzz&lt;/a&gt;, I realized this was only my first coding assessment and definitely not my last. I was going to take Leetcode more seriously and keep applying to more companies in order to gain more exposure to the interview process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#espn" class="anchor"&gt;
  &lt;/a&gt;
  ESPN
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Year: 2017 &lt;/li&gt;
&lt;li&gt;Position: Front-end Engineer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I was asked some front end questions like: Explain AJAX and what does Asynchronous mean. There were also a couple of Leetcode easy questions. I didn't have any prior front end experience so I didn't know how to answer the specific front end questions, nor did I expect them.&lt;/p&gt;

&lt;p&gt;What I learned:&lt;br&gt;
In addition to Leetcode, I needed to study for the specific role I wanted to go for. I started searching up typical front-end interview questions as well as practicing my skills by creating side projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#google" class="anchor"&gt;
  &lt;/a&gt;
  Google
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Year: 2017&lt;/li&gt;
&lt;li&gt;Position: &lt;a href="https://www.google.com/about/careers/students/engres.html"&gt;Engineering Residency program&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first round included two technical phone interviews. The interviewer called me on my phone and sent me a google doc link. He also pastes the coding question on the doc and I dove right into trying to solve the problem. Then I became confused. I asked him questions about what's a valid input and what isn't. Then I got more confused and he spent a lot of time trying to explain. Then I told him, I didn't want to continue the interview further. There was sympathy in his voice as he tried one more time to get me to understand the problem but I was firm and we hung up.&lt;br&gt;
I cried. I cried until it was time for the next interview. The person was calling my phone and I refused to answer. They left a couple of missed calls and then my recruiter immediately tries to contact me and asked if I was still joining. I didn't answer her either. &lt;/p&gt;

&lt;p&gt;I ghosted Google. &lt;/p&gt;

&lt;p&gt;Google, if you're reading this I'm sorry. I've grown since then. &lt;/p&gt;

&lt;p&gt;What I learned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I had a friend pick a random problem off Leetcode and I had to solve it on a video call while sharing my screen.&lt;/li&gt;
&lt;li&gt;I had recruited classmates to join me in white boarding the coding problems we encountered during our interviews in the library.&lt;/li&gt;
&lt;li&gt;I had organized a study group every weekend where we tackled data structures and algorithms together and solved Leetcode problems together.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I put in the effort to practice more and more, no matter how grueling it was. I forced myself to be put on the spot more, to get used to this uncomfortable feeling and become more confident.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#microsoft" class="anchor"&gt;
  &lt;/a&gt;
  Microsoft
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Year: 2019&lt;/li&gt;
&lt;li&gt;Position: Software development engineer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I passed the first round interview, which was a mix of behavioral and technical, and then proceeded to the final round. This was at a conference where I had two in-person interviews. The first one, I believe I did great for the behavioral questions where I talked about my past projects that were listed on my resume. Then he hit me with a system design question. W H A T. I didn't know how to solve it but I tried anyway. Didn't solve it correctly and the interviewer showed me the correct flow at the end. When it was time for me to ask questions, I asked him for something that stuck out to him that I should improve on. He said that I need to learn how to say I don't know if I didn't know how to solve a question... Point taken.&lt;/p&gt;

&lt;p&gt;What I learned:&lt;br&gt;
I accepted the fact that I needed to say "I don't know" in the interview. But I couldn't just leave it like that. I honed my answer to be something like "Honestly, I don't know, but if I were to guess, I think ..." I like to believe this answer instead has a better impact.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#facebook" class="anchor"&gt;
  &lt;/a&gt;
  Facebook
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Year: 2020&lt;/li&gt;
&lt;li&gt;Position: Full stack engineer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I was getting ghosted a lot this year, it was tough to get any company interested due to the pandemic. I was pretty happy to get someone to invite me for a first round coding interview.&lt;/p&gt;

&lt;p&gt;This was conducted over BlueJeans and I was sent a Coderpad link. I've done a good amount of studying at this point but was still nervous because of the competitive reputation of this company. I was asked a question regarding calculating taxes. The majority of the time, the interviewer had to explain to me the MATH behind taxes. I DON'T KNOW WHY I COULDN'T MATH. It just wasn't sticking. Because I couldn't math, I couldn't come up with a working solution and then time ran out. &lt;/p&gt;

&lt;p&gt;What I learned&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Taxes.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://guides.codepath.com/compsci/UMPIRE-Interview-Strategy"&gt;UMPIRE Interview strategy&lt;/a&gt;. I needed to know exactly how to approach a technical interview. After learning and practicing this strategy, I felt more confident on understanding the problem and solving it and pretty sure this impressed my future interviewers as well. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up" class="anchor"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h2&gt;

&lt;p&gt;When I received the email that started out saying  "Congratulations! We're pleased to offer you the position of Software engineer", I felt this burden drop from my shoulders. The constant Leetcoding, the burnouts, the vast amount of time on submitting applications, networking and still contributing to my side projects were finally done. (Maybe more like put on pause) &lt;/p&gt;

&lt;p&gt;I promise it gets better. You're not in this alone as computer science is becoming more and more in demand. Utilize your community and up-lift one another and remember the reason(s) why you're striving for success.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tips" class="anchor"&gt;
  &lt;/a&gt;
  Tips
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Interview constantly. Interview with companies you don't care about. &lt;/li&gt;
&lt;li&gt;Practice solving the questions under pressure e.g. timed, having someone watch you, think of ways to optimize the algorithm right then and there, etc.&lt;/li&gt;
&lt;li&gt;Learning the Pomodoro technique helped me take my Data structure and algorithm studying seriously. I stayed alert and focused and was able to increase my completed questions on Leetcode from 50 to 100. &lt;/li&gt;
&lt;li&gt;If you're financially able to, invest in Leetcode Premium. It helped to see the solution when I was stuck on a problem.&lt;/li&gt;
&lt;li&gt;Depending on what software engineering role you're going for, you'd need to study for the position as well. For example, front end roles will ask you about AJAX, the DOM tree, etc and iOS roles would ask you questions about Swift and Objective C.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#resources" class="anchor"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.crackingthecodinginterview.com/"&gt;Cracking the Coding Interview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leetcode.com/"&gt;Leetcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.thestandoutdeveloper.com/job-hunting#pricing"&gt;The Standout Developer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/how-to-prepare-for-a-software-developer-interview/"&gt;How to Prepare for a Software Developer Interview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/arslan_ah/the-ultimate-strategy-to-preparing-for-the-coding-interview-3ace"&gt;The Ultimate Strategy to Preparing for the Coding Interview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://techdevguide.withgoogle.com/"&gt;Tech Dev Guide With Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://guides.codepath.com/compsci/"&gt;CodePath's Computer Science Guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://yangshun.github.io/tech-interview-handbook/"&gt;Tech Interview Handbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#for-more-content-like-this-be-sure-to-follow-me-on-twitter" class="anchor"&gt;
  &lt;/a&gt;
  For more content like this, be sure to follow me on &lt;a href="https://twitter.com/farhanaxmustafa"&gt;Twitter&lt;/a&gt;!
&lt;/h2&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>interview</category>
    </item>
    <item>
      <title>My beloved PHP cheat sheet</title>
      <author>rickavmaniac</author>
      <pubDate>Thu, 17 Dec 2020 22:49:50 +0000</pubDate>
      <link>https://dev.to/rickavmaniac/my-beloved-php-cheat-sheet-7dl</link>
      <guid>https://dev.to/rickavmaniac/my-beloved-php-cheat-sheet-7dl</guid>
      <description>&lt;p&gt;Here is my cheat sheet I created along my learning journey. If you have any recommendations (addition/subtraction) let me know.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="c1"&gt;//Naming convention&lt;/span&gt;
&lt;span class="nv"&gt;$first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="c1"&gt;// all lower case with underscore separators&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;updateProduct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// camelCase&lt;/span&gt;
&lt;span class="kt"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductItem&lt;/span&gt; &lt;span class="c1"&gt;// StudlyCaps&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="no"&gt;ACCESS_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'123abc'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// all upper case with underscore separators&lt;/span&gt;

&lt;span class="c1"&gt;//output&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello World'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//variable declaration&lt;/span&gt;
&lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//string&lt;/span&gt;
&lt;span class="nv"&gt;$isActive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//boolean&lt;/span&gt;
&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//integer&lt;/span&gt;
&lt;span class="nv"&gt;$amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;99.95&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//float&lt;/span&gt;


&lt;span class="c1"&gt;//string concat&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//string escape characters \n new line  \t tab  \\ backslash&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello Mike&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Hello David"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//string interpolation&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello &lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//string number of characters&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Remove space(s) before and after&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Convert to lowercase / uppercase&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;strtolower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;strtoupper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Converts the first character to uppercase&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;ucfirst&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 'Mike' &lt;/span&gt;

&lt;span class="c1"&gt;// Replace text a by text b in $text&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;str_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// String Contains (PHP 8)&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nf"&gt;str_contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'ke'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# true&lt;/span&gt;

&lt;span class="c1"&gt;// Check if numeric&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;is_numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'59.99'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;# true&lt;/span&gt;


&lt;span class="c1"&gt;// Round a number&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.80&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// returns 1&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.49&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;  &lt;span class="c1"&gt;// returns 0&lt;/span&gt;


&lt;span class="c1"&gt;// Random number&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;# 89&lt;/span&gt;


&lt;span class="c1"&gt;// Ternary operator (true : false)&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$valid&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;'user valid'&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'user not valid'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="c1"&gt;//Null Coalesce Operator&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;//output 'Mike' if $name is null&lt;/span&gt;

&lt;span class="c1"&gt;//Null Coalesce Assignment&lt;/span&gt;
&lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;??=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="c1"&gt;// Null Safe Operator (PHP 8) will return null if one ? is null&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;?-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="o"&gt;?-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Null Safe + Null Coalesce (if null will return 'No user profile')&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;?-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="o"&gt;?-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="s1"&gt;'Not applicable'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="c1"&gt;//Spaceship operator return -1 0 1&lt;/span&gt;
&lt;span class="nv"&gt;$names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Paul'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'John'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;usort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// ['John', 'Mike', 'Paul']&lt;/span&gt;


&lt;span class="c1"&gt;// print variables contents (for debug)&lt;/span&gt;
&lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$names&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;print_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$names&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// terminate the current script&lt;/span&gt;
&lt;span class="k"&gt;die&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;


&lt;span class="c1"&gt;//Conditionals&lt;/span&gt;
&lt;span class="k"&gt;If&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$condition&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'condition 10'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;elseif&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$condition&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'condition 5'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'all other conditions'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//Comparaison operation&lt;/span&gt;
&lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="c1"&gt;// equal no type check&lt;/span&gt;
&lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="c1"&gt;// equal with type check&lt;/span&gt;
&lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="c1"&gt;//not equal&lt;/span&gt;
&lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="c1"&gt;//or&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="c1"&gt;//and&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;//greater than&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="c1"&gt;//less than&lt;/span&gt;


&lt;span class="c1"&gt;// Match Expression (PHP 8)&lt;/span&gt;
&lt;span class="nv"&gt;$type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'red'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'danger'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'yellow'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'orange'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'warning'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'green'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'success'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Unknown'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;


&lt;span class="c1"&gt;//for loop&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"i value = "&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;//while loop&lt;/span&gt;
&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'value : '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;//do while&lt;/span&gt;
&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'value : '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="c1"&gt;//Array declaration&lt;/span&gt;
&lt;span class="nv"&gt;$names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Peter'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Shawn'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'John'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;


&lt;span class="c1"&gt;//add to array&lt;/span&gt;
&lt;span class="nv"&gt;$names&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Micheal'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="c1"&gt;//Spread Operator&lt;/span&gt;
&lt;span class="nv"&gt;$names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Peter'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Paul'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nv"&gt;$people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'John'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;...&lt;/span&gt;&lt;span class="nv"&gt;$names&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// ['John', 'Mike', 'Peter', 'Paul']&lt;/span&gt;


&lt;span class="c1"&gt;//Remove array entry:&lt;/span&gt;
&lt;span class="nb"&gt;unset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Peter'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;


&lt;span class="c1"&gt;//Array to string&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;implode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;', '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//output Mike, Shawn, John, Micheal&lt;/span&gt;


&lt;span class="c1"&gt;// String to Array&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;explode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;','&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ['Mike', 'Shawn', 'John']&lt;/span&gt;


&lt;span class="c1"&gt;// Direct access&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;//output Peter&lt;/span&gt;


&lt;span class="c1"&gt;//loop for each array entry&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$names&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
   &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// loop break / continue&lt;/span&gt;
&lt;span class="nv"&gt;$values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'one'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'two'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'three'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$values&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'two'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// exit loop&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;'three'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// next loop iteration&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// Number of items in a Array&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$names&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  


&lt;span class="c1"&gt;//Associative array:&lt;/span&gt;
&lt;span class="nv"&gt;$person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'age'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'genre'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'men'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;


&lt;span class="c1"&gt;//Add to ass. array:&lt;/span&gt;
&lt;span class="nv"&gt;$person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="c1"&gt;//loop ass. array key =&amp;gt; value: &lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$names&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
   &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' : '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// Check if a specific key exist&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nf"&gt;array_key_exist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$person&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="c1"&gt;// Return keys&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;array_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$person&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ['age', 'genre']&lt;/span&gt;


&lt;span class="c1"&gt;// Return values&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;array_values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [45, 'men']&lt;/span&gt;


&lt;span class="c1"&gt;//Array filter (return a filtered array)&lt;/span&gt;
&lt;span class="nv"&gt;$filtered_people&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$people&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$names&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;


&lt;span class="c1"&gt;// Array map (return transform array):&lt;/span&gt;
&lt;span class="nv"&gt;$only_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$person&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nv"&gt;$people&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;//function declararion&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'default value'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;puts&lt;/span&gt; &lt;span class="nv"&gt;$first_name&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$last_name&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//function call&lt;/span&gt;
&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Taylor'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//function call with named parameters (PHP 8)&lt;/span&gt;
&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'Taylor'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// order can change&lt;/span&gt;

&lt;span class="c1"&gt;//function variables params&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nv"&gt;$params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// Closure function&lt;/span&gt;
&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'welcome'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;


&lt;span class="c1"&gt;// Arrow functions&lt;/span&gt;
&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'welcome'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="c1"&gt;//File read&lt;/span&gt;
&lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"test.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Output lines until EOF is reached&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nb"&gt;feof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;fgets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$line&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;br&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="c1"&gt;// File write&lt;/span&gt;
&lt;span class="nv"&gt;$file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'export.csv'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Mike'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'age'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;//Write key name as csv header&lt;/span&gt;
&lt;span class="nb"&gt;fputcsv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;array_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;

&lt;span class="c1"&gt;//Write lines (format as csv)&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$array&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;fputcsv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$row&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="c1"&gt;//Throw Error&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;someCondition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Data format error'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;//Catch the Error&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$db&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;checkData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$e&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getMessage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;//class declaration&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// object instantiation&lt;/span&gt;
&lt;span class="nv"&gt;$person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;


&lt;span class="c1"&gt;//class properties and constructor&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$first_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$last_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$last_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$first_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$last_name&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Constructor Property Promotion (PHP 8)&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$last_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//static constructor&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nv"&gt;$params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;$person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nc"&gt;Mike&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nc"&gt;Taylor&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="c1"&gt;// class inheritance&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Override method'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// Static Method&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;greeting&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Call static method&lt;/span&gt;
&lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;


&lt;span class="c1"&gt;// Static method internal call&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;greeting&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;


&lt;span class="c1"&gt;// Interface&lt;/span&gt;
&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Animal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;makeSound&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cat&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;Animal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;makeSound&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Meow"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;$animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Cat&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$animal&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;makeSound&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;


&lt;span class="c1"&gt;//Trait (mix-in)&lt;/span&gt;
&lt;span class="kd"&gt;trait&lt;/span&gt; &lt;span class="nc"&gt;HelloWorld&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'Hello World!'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Greetings&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;$object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Greetings&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$object&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>php</category>
      <category>laravel</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Asking is thriving</title>
      <author>Ben Szabo</author>
      <pubDate>Thu, 17 Dec 2020 22:33:45 +0000</pubDate>
      <link>https://dev.to/finnhvman/asking-is-thriving-45hi</link>
      <guid>https://dev.to/finnhvman/asking-is-thriving-45hi</guid>
      <description>&lt;p&gt;I started my career as a Java Software Engineer without any prior Java knowledge. I didn't study Computer Science at the university and I didn't do any software internship. All I knew was how to create static web pages with HTML and CSS.&lt;/p&gt;

&lt;p&gt;I became the first Java Engineer in the team and my role was to take over the development of an internal tool inherited from another team. I had to get up to speed really fast in order to survive.&lt;/p&gt;

&lt;p&gt;The thing I couldn't get away without was asking questions. A lot. There was so much to learn about the tool, domain and Java that I never ran out of questions. I was determined, relentless, out of my comfort zone and I'm pretty sure I was annoying. In the back of my mind there was this thought that I'm asking too many times and they would start hating me, but the drive to fit in the role was stronger.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TzooikNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vykowqa32cxz82mpcicy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TzooikNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/vykowqa32cxz82mpcicy.jpeg" alt="Question marks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Though the members who built the tool always answered. However frequently I went they always gave me guidance. I guess I was lucky for having such helpful and resilient mentors, because there was a wide gap to bridge with me. In the end I came through and I have been in software for the last decade, probably thanks to all those questions.&lt;/p&gt;

&lt;p&gt;Asking questions is a pretty important thing to do in software teams (most likely in any kinds of teams). So if you are ever pondering whether you should ask a question or not, rather ask away! Okay, maybe it's not always that simple because many factors come to play. But worry not, I put together a list of tips that could help you manage these factors and make you an effective asker!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tips-for-asking-effectively" class="anchor"&gt;
  &lt;/a&gt;
  Tips for asking effectively
&lt;/h1&gt;

&lt;p&gt;🔍 Come &lt;a href="#preparing-yourself"&gt;prepared&lt;/a&gt;&lt;br&gt;
⌚️ Find &lt;a href="#time-and-place"&gt;the right place and right time&lt;/a&gt;&lt;br&gt;
😊 Be &lt;a href="#politeness"&gt;polite&lt;/a&gt;&lt;br&gt;
👌 Express yourself &lt;a href="#communicating-concisely"&gt;concisely&lt;/a&gt;&lt;br&gt;
📝 Take &lt;a href="#notes"&gt;notes&lt;/a&gt; of the answer if necessary&lt;br&gt;
👋 Return the favor &lt;a href="#being-the-one-asked"&gt;when asked&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#preparing-yourself" class="anchor"&gt;
  &lt;/a&gt;
  Preparing yourself
&lt;/h1&gt;

&lt;p&gt;First, try to get prepared as much as you can around the topic you are about to ask. There's a chance that you might bump into the answer. However, if you don't then you still took some time to dive deeper in the area. Presenting that you already have a level of understanding helps a lot in communication.&lt;/p&gt;

&lt;p&gt;For example let's pretend you are given a task that revolves around hypergraphs and you know nothing about them. (Let's also pretend that most knowledge of hypergraphs has been wiped off the internet.) There's an expert in the company, but before you ask you could study around the matter. In this case the best start is to learn or revisit what graphs are. For instance understand that they are made of vertices and edges, there are undirected and directed graphs, and there are unweighted and weighted graphs.&lt;/p&gt;

&lt;p&gt;The point is to gain a good base knowledge of the topic you are requesting some help about. This will save you and the person you are meaning to ask some time and reduce the friction of the interaction. Here's a visualization of a hypergraph if you were wondering how they look:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0V3Pu_M7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jt9ny7mvrdpbi1ujtg89.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0V3Pu_M7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jt9ny7mvrdpbi1ujtg89.png" alt="A hypergraph visualized"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#time-and-place" class="anchor"&gt;
  &lt;/a&gt;
  Time and place
&lt;/h1&gt;

&lt;p&gt;A question might arise in you at any time, but you won't always say it out loud right away. We have been taught in ways when to speak up and when to stay quiet. So it's important to be aware of what situation you are in. There are several anchors to this. I'm dividing them into two groups: the rather objective ones and the more subjective ones in the following two sections.&lt;/p&gt;

&lt;p&gt;It's a good idea to gauge who might be interested in the answer for your question so you ask it in front of the right audience. If you are asking questions of taxation on a global all hands of a multinational company, you are probably wasting everyone's time who doesn't tax in your country. Similarly, think of the time presumably necessary to answer your question. Avoid asking long, open-ended questions if you are short on time, for example during a stand-up. In a fully remote setup you have much less meta information on what your coworkers occupied with, but you can resort to checking their calendars and chat statuses. So check these before you try to engage in a discussion with someone to diminish the "Why aren't they answering?" feeling.&lt;/p&gt;

&lt;p&gt;Some other circumstantial things need to be "felt out". Cultural backgrounds vary a lot, for example I remember the feeling of not being too encouraged to ask questions in the class room. Why? Because if you asked something dumb or obvious you got shamed by the class or even the teacher. We might carry these ideas throughout our lives as golden truths, so it's good to remind ourselves that we are not sitting in classrooms anymore. Another, maybe even greater part of this is that each country and region has their unwritten laws of how you should behave at the workplace. It's really hard to put your finger on these things, but try to be aware of these patterns as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hbG08Ylv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/33bgzi5h9uhpiqaf1o9o.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hbG08Ylv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/33bgzi5h9uhpiqaf1o9o.jpeg" alt="Children in school raising their hands"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#politeness" class="anchor"&gt;
  &lt;/a&gt;
  Politeness
&lt;/h1&gt;

&lt;p&gt;This is a no brainer, of course being polite always helps. It's good to remind ourselves to approach our colleagues respectfully. Surely people are more likely to answer a question that's asked nicely. Furthermore, keep in mind that the person might not be available to answer your question at the moment. Understand, that you may need to wait for them to come back to you, or schedule a meeting in the next few days or weeks.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#communicating-concisely" class="anchor"&gt;
  &lt;/a&gt;
  Communicating concisely
&lt;/h1&gt;

&lt;p&gt;I already mentioned respecting other people's time earlier. Being terse is respecting the time of the person you are asking. No one wants to answer long-winded questions or verbose emails. On top of it no one wants to pay the mental tax of figuring out the important details of a lengthy request. Phrase your questions with just the necessary information and you will save the receiver from spending a lot of mental energy. &lt;/p&gt;

&lt;p&gt;Take a look at the following fictional email.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hi Alice,&lt;/p&gt;

&lt;p&gt;I'm Bob, the latest member of the Hugs Team. I'm writing you  because I would like to learn about the technology you used when implemented Haha's. We are looking to integrate Hugs beside Haha's in the next quarter, so it would be really helpful if you could answered the following questions.&lt;/p&gt;

&lt;p&gt;Hugs would be something similar like Haha's, but they would represent a different emotion. (It's still a positive one, but could be used for expressing gratitude.)&lt;/p&gt;

&lt;p&gt;[some in-depth questions here]&lt;br&gt;
[...]&lt;br&gt;
[...]&lt;/p&gt;

&lt;p&gt;Thanks in advance and looking forward for your answer!&lt;/p&gt;

&lt;p&gt;Best Regards,&lt;br&gt;
&lt;em&gt;Bob Bobson&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Software Engineer&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Hugs Team&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Have you noticed any unnecessary parts? I'm not saying the above email is wrong, but it could be optimized. It's more polite than necessary, burdens the reader with a lot of extra information, and has some redundant pieces.&lt;/p&gt;

&lt;p&gt;Now take a look at the optimized version.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hi Alice,&lt;/p&gt;

&lt;p&gt;We are looking to implement a feature called Hugs that's similar to Haha's in the next quarter. We would appreciate if you could answer these questions:&lt;/p&gt;

&lt;p&gt;[some in-depth questions here]&lt;br&gt;
[...]&lt;br&gt;
[...]&lt;/p&gt;

&lt;p&gt;Many Thanks,&lt;br&gt;
&lt;em&gt;Bob Bobson&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Software Engineer&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Hugs Team&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We made the email shorter yet polite and still kept some crucial contextual information. Another commonly used medium is instant messaging like Slack. Whenever you are writing someone, it's better to write your request as a whole message and not line by line like you would do in a real life dialogue.&lt;/p&gt;

&lt;p&gt;IRL type of messaging:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Bob&lt;/strong&gt; 9:37 AM&lt;br&gt;
Hi!&lt;br&gt;
&lt;strong&gt;Alice&lt;/strong&gt; 9:41AM&lt;br&gt;
Hello&lt;br&gt;
&lt;strong&gt;Bob&lt;/strong&gt; 9:42 AM&lt;br&gt;
Can I ask you some questions?&lt;br&gt;
&lt;strong&gt;Alice&lt;/strong&gt; 9:44 AM&lt;br&gt;
Sure&lt;br&gt;
&lt;strong&gt;Bob&lt;/strong&gt; 9:45 AM&lt;br&gt;
What library did you use to implement the frontend components of Haha's?&lt;br&gt;
&lt;strong&gt;Alice&lt;/strong&gt; 9:49 AM&lt;br&gt;
We used... [Alice proceeds to explain the answer]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Notice how 8 minutes passed from the start until Alice received the question, and 12 minutes until Bob got an answer. Instead Bob could have opened with something like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Bob&lt;/strong&gt; 9:37 AM&lt;br&gt;
Hi! Could tell what library did you use to implement the frontend components of Haha's?&lt;br&gt;
&lt;strong&gt;Alice&lt;/strong&gt; 9:39 AM&lt;br&gt;
We used... [Alice proceeds to explain the answer]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With this type of messaging Alice received the question straight away and Bob got an answer after 2 minutes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DRDMS_hH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2qnbp09hrv9ygovu5w55.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DRDMS_hH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/2qnbp09hrv9ygovu5w55.jpg" alt="Everyone liked that"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#notes" class="anchor"&gt;
  &lt;/a&gt;
  Notes
&lt;/h1&gt;

&lt;p&gt;Sometimes you will get some long and complicated answers, and sometimes you will get some short answers but won't use it for a long time. Either way you might forget about the answer. Taking notes will help you with that. This seems unnecessary in a mailing for example, but another benefit of taking notes is that it forces you to actually interpret the answer. Interpreting immediately will push you to find potential holes in your understanding, thus driving you to ask more questions to get closer to what you need.&lt;/p&gt;

&lt;p&gt;All in all, try to be really attentive when you are receiving an answer so you can avoid the need of repeating your questions in the future. Moreover, from the answerer's perspective it's much better to explain something to someone who is really listening. People can easily tell that, like you can tell that the dog below is paying high attention to something.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wERH1-mV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wogbdvawox0uj88wjz0s.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wERH1-mV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wogbdvawox0uj88wjz0s.jpeg" alt="Dog watching something"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#being-the-one-asked" class="anchor"&gt;
  &lt;/a&gt;
  Being the one asked
&lt;/h1&gt;

&lt;p&gt;You will certainly find yourself on the other side of Q&amp;amp;A. In that case be mindful of the tips above. Try to stay approachable so people will remember that you are someone they can ask. Set up reminders for emails you want to answer later, set up reminders even for inquiries received via Slack. It takes some effort, but people will learn that you are reliable.&lt;/p&gt;

&lt;p&gt;Consider helping others when they ask as part of your job because the success of your company's might just depend on it.  Be helpful and nourish a great culture that will lead you and your peers to great wins.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#when-desperate-be-loud" class="anchor"&gt;
  &lt;/a&gt;
  When desperate be loud
&lt;/h1&gt;

&lt;p&gt;This isn't a serious advice rather a ridiculous last resort. If none of the above worked, try following some guerrilla marketing-esque tactics: State something blatantly wrong loud enough and in time someone will come and correct you anyways. Alternative explanation by David Khourshid:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--kkIzey0b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/619677584805208064/RwwbnNpi_normal.jpg" alt="David K. 🎹 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        David K. 🎹
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/davidkpiano"&gt;@davidkpiano&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      You can solve *any* problem if you believe in yourself, put your mind to it, and tweet the wrong answer then wait 5 minutes.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:37 PM - 30 Nov 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1333404876890648577" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-reply-action.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1333404876890648577" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-retweet-action.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      74
      &lt;a href="https://twitter.com/intent/like?tweet_id=1333404876890648577" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-like-action.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
      808
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;p&gt;&lt;em&gt;I hope these tips gave you a confidence boost to ask more often!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>career</category>
      <category>productivity</category>
      <category>help</category>
    </item>
    <item>
      <title>What awesome tools did you discover recently?</title>
      <author>Madza</author>
      <pubDate>Thu, 17 Dec 2020 22:22:37 +0000</pubDate>
      <link>https://dev.to/madza/what-awesome-tools-did-you-discover-recently-24l7</link>
      <guid>https://dev.to/madza/what-awesome-tools-did-you-discover-recently-24l7</guid>
      <description>&lt;p&gt;Could you share some amazing apps, tools, or services that you have come across recently and thought deserve more spotlight?&lt;/p&gt;

&lt;p&gt;Some of my recent discoveries would include:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fontjoy.com/"&gt;FontJoy&lt;/a&gt; - an online tool for exploring different font combinations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://neumorphism.io/"&gt;Neumorphism&lt;/a&gt; -an online tool for generating CSS shadows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.vantajs.com/"&gt;VantaJS&lt;/a&gt; - animated website backgrounds  with a built-in customization.&lt;/p&gt;

&lt;p&gt;Share your hidden online gems you just dug out!&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>productivity</category>
      <category>inspiration</category>
    </item>
    <item>
      <title>Murders in the ocean - DO+DEV Hackaton Submission (Part 1)</title>
      <author>Denislav Gavrilov 👨‍🚀🤖🤷‍♂️</author>
      <pubDate>Thu, 17 Dec 2020 21:36:57 +0000</pubDate>
      <link>https://dev.to/denislav__/murders-in-the-ocean-do-dev-hackaton-submission-part-1-3jpb</link>
      <guid>https://dev.to/denislav__/murders-in-the-ocean-do-dev-hackaton-submission-part-1-3jpb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-i-built-am-building" class="anchor"&gt;
  &lt;/a&gt;
  What I built (am building)
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;STILL IN DEVELOPMENT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hey there people on the web. I hope everyone is building marvelous stuff for this amazing hackathon and I am looking forward to seeing a lot of cool projects. Let me tell you a little bit about my project and the state of it.&lt;/p&gt;

&lt;p&gt;Due to the submission template being perfect, I will stick to it. Let's go!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#category-submission" class="anchor"&gt;
  &lt;/a&gt;
  Category Submission:
&lt;/h3&gt;

&lt;p&gt;Random Roulette 🕹️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#app-link" class="anchor"&gt;
  &lt;/a&gt;
  App Link
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://do-dev-hackaton-sv6sl.ondigitalocean.app/"&gt;https://do-dev-hackaton-sv6sl.ondigitalocean.app/&lt;/a&gt; - The URL is going to change in the future. I am, once again, having enormous problems choosing the perfect domain... I will make sure to edit my post when I pick the domain. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#screenshots" class="anchor"&gt;
  &lt;/a&gt;
  Screenshots
&lt;/h3&gt;

&lt;p&gt;This is the screen when the game is started:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XYEs83Ji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/f7gs9grj7s48e46iccvm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XYEs83Ji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/f7gs9grj7s48e46iccvm.png" alt="Start Screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the 'first-round' where everyone can still see the screen (the whole screen it a lot richer on details, this viewport is due to the 4 screens on 1 monitor):&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9i988PAv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jnkmo19qfgs2cm29wd5a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9i988PAv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jnkmo19qfgs2cm29wd5a.png" alt="First Round"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;This is what all the players see when it's the medic's round (explanation of the rules in the description):&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1uBMyFxR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p345dpspjht4vdbgo9ue.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1uBMyFxR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p345dpspjht4vdbgo9ue.png" alt="Medic Screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is what the individual screens look like for the killer and the medic when they choose who to kill/heal:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6UGe7eBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r03monb6l02oxlzof0vo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6UGe7eBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r03monb6l02oxlzof0vo.png" alt="Kill or Heal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#description" class="anchor"&gt;
  &lt;/a&gt;
  Description
&lt;/h3&gt;

&lt;p&gt;The game is simply a murder mystery. I doubt it if the majority of the players haven't played this format before.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#rules" class="anchor"&gt;
  &lt;/a&gt;
  Rules:
&lt;/h4&gt;

&lt;p&gt;There is 1 killer, 1 medic, and the rest of the players are passengers. The goal is to find the killer through discussion. The rules go like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Round 1 - The screen for everybody except for the killer goes off and the killer chooses his prey (who to kill).&lt;/li&gt;
&lt;li&gt;Round 2 - The screen for everybody except for the medic goes off and the medic chooses who to save.&lt;/li&gt;
&lt;li&gt;Round 3 - The screen for everybody comes clean and the results are shown: If nobody is killed, this means the medic managed to save the prey. If there is one killed, it means the medic could not save the prey. Everybody in the room discusses who to vote off and if they don't manage to catch the killer, the game continues looping through the next 3 rounds and so on.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#link-to-source-code" class="anchor"&gt;
  &lt;/a&gt;
  Link to Source Code
&lt;/h3&gt;

&lt;p&gt;I will be pasting the source code of the game once I finish it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#permissive-license" class="anchor"&gt;
  &lt;/a&gt;
  Permissive License
&lt;/h3&gt;

&lt;p&gt;MIT License. I will post a link once I finish the project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background" class="anchor"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;I was heavily inspired by Among Us (predictable, eh?) and I also remember playing this particular format of murder mystery games with a group of friends.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-i-built-it-am-building-it" class="anchor"&gt;
  &lt;/a&gt;
  How I built it (am building it)
&lt;/h3&gt;

&lt;p&gt;I've been working as a sysadmin for 1 year and as you can imagine, development is not one of my strong sides. Having that in mind, I am amazed by how easy DigitalOcean's app platform is. I am so glad I don't have to deal with server stuff and have the ability to deploy my app with a click of a button. It's superb, really!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-resourcesinfo" class="anchor"&gt;
  &lt;/a&gt;
  Additional Resources/Info
&lt;/h3&gt;

&lt;p&gt;This is my submission post to put my app out there but it is still not completed. That is why, I will be covering my adventure in a series of posts where I will be sharing my progress and post openly on how I built it, what challenges I face and how I overcome such.&lt;/p&gt;

&lt;p&gt;The game is being built with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://socket.io/"&gt;socket.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/docs/app-platform/"&gt;DigitalOcean's APP platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bootstrap for grinding&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>dohackathon</category>
    </item>
  </channel>
</rss>
