<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to make a good looking button group in Tailwind CSS</title>
      <author>Siddharth Chaudhary</author>
      <pubDate>Fri, 15 Oct 2021 18:22:02 +0000</pubDate>
      <link>https://dev.to/sidcraftscode/how-to-make-a-good-looking-button-group-in-tailwind-css-1fjh</link>
      <guid>https://dev.to/sidcraftscode/how-to-make-a-good-looking-button-group-in-tailwind-css-1fjh</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Tailwind CSS is a utility based framework. Which is great in many ways. However, Tailwind CSS does not have a default set of components for you to get started with.&lt;/p&gt;

&lt;p&gt;This is a series that will show you how to build various common UI components with Tailwind CSS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, you people showed a lot of interest in my articles that I wrote last week. So today, I created a tutorial on how to make a good looking button group in Tailwind CSS&lt;/p&gt;

&lt;p&gt;Let's start by making 3 buttons&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button type="button"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button"&amp;gt;Button&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add some padding to our buttons&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button type="button" class="px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button" class="px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button" class="px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add hover and focus styles to our buttons&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Right now, all we have is three decently styles, sad buttons. Let's make them a button group&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div role="group" class="flex"&amp;gt; 
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add a margin to our button group&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div role="group" class="flex m-2"&amp;gt; 
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We should add borders to our button&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div role="group" class="flex m-2"&amp;gt; 
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 border px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 border-t border-b px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 border px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's change the text color of our button group&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div role="group" class="text-gray-600 flex m-2"&amp;gt; 
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 border px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 border-t border-b px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 border px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Oops üò¨. Nearly forgot. Let's add rounded corners to our button group.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div role="group" class="text-gray-600 flex m-2"&amp;gt; 
&amp;lt;button type="button" class="rounded-l-lg hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 border px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button" class="hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 border-t border-b px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;button type="button" class="rounded-r-lg hover:bg-gray-50 focus:ring-2 focus:ring-indigo-200 border px-4 py-2"&amp;gt;Button&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's what our button group should look like üëá &lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/chaudhs769/embed/wvqKyjN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Thanks for reading and I hope you liked the article! üòä &lt;br&gt;
I'll be adding more articles to this series soon.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>tailwindcss</category>
      <category>css</category>
    </item>
    <item>
      <title>Detalhes sobre desenvolvimento de software</title>
      <author>Pedro Kiefer</author>
      <pubDate>Fri, 15 Oct 2021 17:42:03 +0000</pubDate>
      <link>https://dev.to/pedrokiefer/detalhes-sobre-desenvolvimento-de-software-3922</link>
      <guid>https://dev.to/pedrokiefer/detalhes-sobre-desenvolvimento-de-software-3922</guid>
      <description>&lt;p&gt;Vou tentar abordar uma s√©rie de t√≥picos recorrentes na vida de pessoas desenvolvedoras seniors, e que todos podem aplicar no dia a dia indepentemente do cargo/senioridade que possuem. A maioria dos t√≥picos tratam de sistemas web, mas √© f√°cil fazer um paralelo e aplicar para outras realidades, como software embarcado, dispositivos m√≥veis, software legado, etc.&lt;/p&gt;

&lt;p&gt;Cada t√≥pico ser√° um post separado para facilitar a leitura. Os t√≥picos s√£o indepentendes entre si, mas a leitura de todos √© recomendada.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/pedrokiefer/o-basico-ou-nem-tao-basico-assim-3aln"&gt;O b√°sico (ou nem t√£o b√°sico assim)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Arquitetura escal√°vel&lt;/li&gt;
&lt;li&gt;Cachear ou n√£o cachear, eis a quest√£o&lt;/li&gt;
&lt;li&gt;M√©tricas - the good, the bad, and the ugly&lt;/li&gt;
&lt;li&gt;Logging, o qu√™, quando e como?&lt;/li&gt;
&lt;li&gt;Deploy, release the kraken!&lt;/li&gt;
&lt;li&gt;Debugging; Deu ruim, e agora?&lt;/li&gt;
&lt;li&gt;Seguran√ßa&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Gostaria de agradecer √† todas as pessoas que me incentivaram a escrever e contribuiram com ideias, discuss√µes, feedbacks e revis√£o do texto: Diego Pereira, Elen Ara√∫jo, Jo√£o Vortmann, John Kliff, Lu√≠sa Kiefer, Luiza Hagemann, Rafael Inoc√™ncio, Rodolpho Escobar, Rodrigo Kassick, Wilson J√∫nior, Yago Nobre.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>architecture</category>
    </item>
    <item>
      <title>O b√°sico (ou nem t√£o b√°sico assim)</title>
      <author>Pedro Kiefer</author>
      <pubDate>Fri, 15 Oct 2021 17:41:17 +0000</pubDate>
      <link>https://dev.to/pedrokiefer/o-basico-ou-nem-tao-basico-assim-3aln</link>
      <guid>https://dev.to/pedrokiefer/o-basico-ou-nem-tao-basico-assim-3aln</guid>
      <description>&lt;p&gt;Desenvolver sistemas √© sobre pessoas.&lt;br&gt;
Eu sei, parece contradit√≥rio, afinal passamos o dia na frente de telas e escrevendo. Mas passamos o dia inteiro nos comunicando com colegas, fornecedores, clientes. Seja em reuni√µes formais, ou nas salas de chat da empresa, pessoas est√£o sempre envolvidas. Converse com os colegas, troque informa√ß√µes, d√™ e receba feedback. Trabalhar em TI n√£o √© sobre falar com m√°quinas ‚Äî por mais que possa parecer.&lt;/p&gt;

&lt;p&gt;Somos pessoas trabalhando com sistemas complexos, atendendo demandas de clientes e do neg√≥cio, ent√£o quero abordar alguns conceitos t√©cnicos que eu julgo b√°sicos e que ajudam muito no dia a dia dos times. S√£o temas que vejo se repetirem em diversas empresas. Teriam mais temas ‚Äî como agilidade, vis√£o hol√≠stica do produto, lideran√ßa ‚Äî, que s√£o t√£o importantes quanto esses que resolvi abordar, mas por hora deixo para uma pr√≥xima s√©rie de posts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#escolhas"&gt;
  &lt;/a&gt;
  Escolhas
&lt;/h2&gt;

&lt;p&gt;Como pessoas adoramos fazer escolhas e dar a nossa opini√£o, quando criamos sistemas n√£o seria diferente. Temos que escolher:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Linguagem de programa√ß√£o&lt;/li&gt;
&lt;li&gt;Infraestrutura para execu√ß√£o&lt;/li&gt;
&lt;li&gt;Bibliotecas e frameworks&lt;/li&gt;
&lt;li&gt;Ferramentas para testes, valida√ß√µes, deploys&lt;/li&gt;
&lt;li&gt;Editores de texto / IDEs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enquanto alguma dessas escolhas s√£o totalmente pessoais (ou deveriam ser), algumas podem ter impacto nas pessoas que vir√£o a trabalhar no projeto. Um exemplo disso √© organizar o c√≥digo em torno da escolha de IDE, e tornar dif√≠cil para outras pessoas ‚Äî por exemplo precisar alterar v√°rios caminhos em Makefiles sem a possibilidade de versionar a altera√ß√£o para n√£o quebrar os demais.&lt;/p&gt;

&lt;p&gt;Pese o impacto que decis√µes pessoais tem sobre o time, ou at√© sobre o produto. N√£o escolha uma linguagem s√≥ porque voc√™ quer aprend√™-la, pense que outras pessoas ter√£o que dar manuten√ß√£o ao sistema. Ser√° que todo mundo vai conhecer a ferramenta que estava em voga em 2015, ela ainda √© mantida?&lt;/p&gt;

&lt;p&gt;O mesmo vale para infraestrutura, selecionar uma stack serverless pode fazer muito sentido para ganharmos velocidade na entrega, mas ser√° que quando o volume de acessos crescer o custo vai continuar competitivo? Os demais colegas entendem dessa stack? E se o fornecedor descontinuar o sistema onde estamos rodando? Qual o esfor√ßo cognitivo no time para manter diversas stacks diferentes de software? J√° vi times que rodavam coisas em: EC2, AWS Lambda, cluster kubernetes, cluster spark; era um time s√≥, com todas essas infras diferentes. √â imposs√≠vel saber todas as boas pr√°ticas, os problemas, as solu√ß√µes de contorno para todas essas diferentes infraestruturas.&lt;/p&gt;

&lt;p&gt;O desenvolvimento √© feito para atingir os objetivos do neg√≥cio, n√£o metas pessoais de aprendizado - mas obviamente podemos (e devemos) aprender muito no processo. Pense sempre no seu eu futuro: ser√° que voc√™ vai ficar feliz em revisitar esse projeto? ser√° que um colega novo ficar√° feliz em come√ßar a trabalhar nesse projeto? Lembrando que no meio tempo aprendemos outras coisas, crescemos e amadurecemos. Dos diversos projetos que revisitei ao longo da carreira teria simplificado o c√≥digo, a infraestrutura e as linguagens usadas para facilitar o modelo mental que preciso ter para dar manuten√ß√£o.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#c%C3%B3digo"&gt;
  &lt;/a&gt;
  C√≥digo
&lt;/h2&gt;

&lt;p&gt;Um parte importante das tarefas di√°rias √© ler e escrever c√≥digos ‚Äî conforme a senioridade aumenta a quantidade de c√≥digo diminui, infelizmente. Se passamos tanto tempo lendo e escrevendo c√≥digos temos que priorizar escrever c√≥digos que sejam de f√°cil leitura e compreens√£o.&lt;/p&gt;

&lt;p&gt;Fazer aquela express√£o regular gigante em uma linda linha √© um desafio e tanto, super divertido, mas ser√° que o seu eu futuro vai ter facilidade de entender o que acontece l√°? Talvez adicionar dois par√°grafos explicando tudo? Ou, para os que usam python, ser√° que aquela &lt;em&gt;list comprehension&lt;/em&gt; com lambdas e tr√™s n√≠veis diferentes de dados valem a pena? Saber escrever c√≥digo compacto, ou complexo, n√£o te torna um desenvolvedor melhor.&lt;/p&gt;

&lt;p&gt;As pessoas tem uma certa capacidade de entender coisas, ideias simples s√£o de f√°cil entendimento, j√° ideas complexas e compostas precisam de mais tempo para serem processadas. Em linhas gerais isso √© o esfor√ßo cognitivo necess√°rios para compreender (e manter) algo no c√©rebro. Quando gastamos muito tempo processando as ideias acabamos n√£o fazendo o que √© importante para o neg√≥cio: gerar valor. Ent√£o, se o esfor√ßo cognitivo para entender o c√≥digo for grande as chances de que algu√©m, ou voc√™ mesmo, adicione um bug s√£o altas. Ou mesmo se n√£o for adicionado um bug, compreender o que o c√≥digo e suas nuances faz se torna dif√≠cil. Tem uma linha de pensamento que fala que escrever c√≥digos √© como escrever prosa, isto √©, precisamos que ele seja leg√≠vel, de f√°cil entendimento por humanos. Os compiladores e otimizadores de c√≥digo s√£o √≥timos em transformar qualquer c√≥digo em um bin√°rio execut√°vel, n√£o vivemos mais em 1970 em que escrever c√≥digo de uma certa maneira era requisito.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nomear-coisas"&gt;
  &lt;/a&gt;
  Nomear coisas
&lt;/h2&gt;

&lt;p&gt;Nomear coisas (e pessoas e pets) √© algo extremamente dif√≠cil. As possibilidades s√£o enormes, posso usar todos os personagens do meu livro favorito, posso usar o nome dos filmes que amo, os jogadores do meu time do cora√ß√£o, os nomes cient√≠ficos das flores que mais gosto. Se voc√™ identificou algum sistema que tenha nomes assim, bom, esses sistemas n√£o dizem nada para ningu√©m, somente para as pessoas que criaram ele originalmente ‚Äî muitas vezes, pessoas que j√° n√£o trabalham mais na empresa e o nome ficou ainda mais sem sentido.&lt;/p&gt;

&lt;p&gt;Os sistemas evoluem, os times mudam, as empresas crescem, adquirem outras empresas, e muitas vezes os sistemas permanencem. Como uma pessoa nova na empresa vai saber que MartyMcFly faz tracing do sistema ‚Äî afinal no filme ele viaja no tempo, nada melhor para um sistema que deixa tu olhar o que aconteceu em algum momento do passado. Ou que o Ego √© um sistema distribu√≠do de fofoca ‚Äî ok esse talvez mais gente entenda. O ponto √© n√£o devemos dar nomes que simplesmente achamos legais, ou que s√£o divertidos ou uma piada interna. Nomes precisam fazer sentido, deixar claro o seu prop√≥sito, isso facilita entender em que parte da arquitetura o sistema se encontra.&lt;/p&gt;

&lt;p&gt;Arquitetura de sistemas s√£o quebra-cabe√ßas (ou Legos) gigantes, dando nomes com significado faciltamos a montagem do quebra-cabe√ßa na cabe√ßa de cada um.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fazer-o-m%C3%ADnimo"&gt;
  &lt;/a&gt;
  Fazer o m√≠nimo
&lt;/h2&gt;

&lt;p&gt;O objetivo de todo o desenvolvimento √© entregar valor para os usu√°rios. Uma arquitetura complexa, c√≥digo d√≠ficil de entender, emaranhado de depend√™ncias podem at√© entregar valor em um momento inicial. Mas sistemas crescem, usu√°rios t√™m desejos diferentes, regras mudam, e quando temos algo extremamente complexo adicionar ou trocar as partes se torna um exerc√≠cio muito mais complicado. Queremos entregar o m√°ximo de valor sempre, n√£o ficar oscilando entre entregas e d√©bitos t√©cnicos (que se n√£o forem pagos se tornam grandes bolas de neve).&lt;/p&gt;

&lt;p&gt;Fa√ßa o m√≠nimo para atender os requisitos de neg√≥cio, &lt;strong&gt;sem abrir m√£o de testes, qualidade e seguran√ßa&lt;/strong&gt;. Testes s√£o o melhor jeito de documentar o sistema, qualquer um consegue ler os testes e entender o comportamento. Com eles voc√™ tamb√©m ganha velocidade para refatorar e n√£o ter medo de quebrar uma parte n√£o correlacionada. Tente simplificar o c√≥digo e a arquitetura conforme o sistema for crescendo. Quanto mais simples mais f√°cil manter na cabe√ßa um modelo de como funciona todo o sistema.&lt;/p&gt;

&lt;p&gt;Seguran√ßa deve ser criada desde o primeiro momento. Por exemplo: j√° comece utilizando HTTPS para todas as chamadas. N√£o coloque senhas e outros dados sens√≠veis no c√≥digo fonte. Veja seguran√ßa como parte de qualidade do software, n√£o espere um incidente para focar em seguran√ßa.&lt;/p&gt;

&lt;p&gt;Portanto, leve como lema &lt;strong&gt;Keep It Simple&lt;/strong&gt;, mantenha o sistema simples - fa√ßa o exerc√≠cio de tentar explicar o sistema para uma crian√ßa ou para seus av√≥s. Ou, para os f√£s de arquitetura, adotem &lt;a href="https://en.wikipedia.org/wiki/Minimalism#Minimalist_design_and_architecture"&gt;&lt;strong&gt;Less is more&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#qualidade"&gt;
  &lt;/a&gt;
  Qualidade
&lt;/h2&gt;

&lt;p&gt;Se voc√™ quer ter velocidade de entrega jamais abra a m√£o de qualidade. Qualidade √© o que permite os times e a empresa acelerarem. No livro &lt;a href="https://www.amazon.com.br/Accelerate-Software-Performing-Technology-Organizations/dp/1942788339"&gt;Accelerate&lt;/a&gt; h√° diversos dados e comprova√ß√µes das hip√≥teses de que qualidade √© essencial. Recomendo fortemente a leitura para todos que querem entender as rela√ß√µes entre c√≥digo, times e retorno para a empresa.&lt;/p&gt;

&lt;p&gt;Quando abrimos m√£o da qualidade come√ßamos um ciclo vicioso. Entregamos algo r√°pido, mas talvez sem testes. C√≥digo funciona por um tempo, at√© que quebra em produ√ß√£o. Como n√£o t√≠nhamos testes, fica d√≠ficil encontrar o problema e garantir que n√£o aconte√ßa novamente. No meio tempo j√° est√°vamos lan√ßando outras features, tamb√©m sem testes e no modo "funciona na minha m√°quina". Quando tudo isso vai para a produ√ß√£o, ficamos algumas horas fora do ar. O impacto com nossos usu√°rios √© enorme. Paramos tudos (ie. deixamos de entregar valor) para tentar arrumar o problema. N√£o pagamos o d√©bito t√©cnico da falta de testes, fazemos outro paliativo, e a complexidade do software vai crescendo.&lt;/p&gt;

&lt;p&gt;Eventualmente chegamos em um momento em que n√£o d√° mais. Adicionar funcionalidade est√° levando meses, porque qualquer altera√ß√£o esbarra em milhares de problemas. Ningu√©m entende como o sistema funciona. Nossa entrega de valor, que era r√°pida, est√° p√©ssima; passamos meio ano s√≥ pagando d√©bito t√©cnico. Quando finalmente voltamos a ter velocidade, o mercado j√° nos abandonou, e s√≥ perdemos dinheiro. Claro, isso √© o pior cen√°rio poss√≠vel, existem outros menos piores mas que geram muitos problemas nos times. Evite o d√©bito t√©cnico priorizando qualidade.&lt;/p&gt;

&lt;p&gt;Lembrando que existem diversos tipos de d√©bito t√©cnico, nem todos s√£o poss√≠veis de identificar de forma simples. Alguns s√£o sutis, ficam escondidos dentro do c√≥digo com testes funcionais. Mas, na hora de trocar alguma pe√ßa da arquitetura, acabamos abrindo a caixa de pandora. Nem todos os d√©bitos t√©cnicos s√£o previs√≠veis, alguns simplesmente aparecem nas horas mais inoportunas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prioridades"&gt;
  &lt;/a&gt;
  Prioridades
&lt;/h2&gt;

&lt;p&gt;No dia a dia do time sempre temos muitas decis√µes a tomar e devemos pensar como priorizar, tendo em vista que queremos garantir os requisitos do neg√≥cio. √Äs vezes os requisitos n√£o s√£o t√£o f√°ceis de saber. Por exemplo: se o sistema atende usu√°rios internos ent√£o dar suporte faz parte do neg√≥cio (claro, em alguns lugares teremos um time de suporte, mas mesmo assim vamos ter que ensinar esse time). Manter os usu√°rios satisfeitos e criar uma cultura de colabora√ß√£o √© fundamental.&lt;/p&gt;

&lt;p&gt;Eu gosto sempre de priorizar d√©bitos t√©cnicos toda a vez que encontro um, mesmo que isso n√£o esteja no escopo da sprint. Alguns d√©bitos t√©cnicos podem ser enormes e precisam ser negociados com o resto do time. Tente sempre fazer com que o time compre a ideia de eliminar d√©bitos.&lt;/p&gt;

&lt;p&gt;Resolvido os d√©bitos, o foco √© o neg√≥cio, como eu maximizo o valor entregue. Fazer cinco mil tarefas simult√¢neas n√£o leva a nada, s√≥ stress e burnout. E as tarefas (seguindo o pensamento √°gil) s√£o do time. Divida as tarefas entre todos, aprenda junto ou ensine o que voc√™ j√° sabe. Se o time tem um backlog para mais de ano, provavelmente n√£o √© um backlog pois o neg√≥cio vai mudar de hoje at√© l√°. Aqueles v√°rios cards parados v√£o deixar de fazer sentido. Minimize o backlog, mas garanta que o time tenha uma vis√£o a longo prazo (constru√≠da junto com os clientes).&lt;/p&gt;

&lt;p&gt;Ter um panorama de onde estamos e para onde estamos indo ajuda muito o time para saber o que priorizar. Torna f√°cil pegar as tarefas de maior valor do backlog e divide a carga de prioriza√ß√£o com todos. O importante √© todos estarem a par do que se passa no time, e entenderem qual o momento do grupo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#realimenta%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Realimenta√ß√£o
&lt;/h2&gt;

&lt;p&gt;Feche o ciclo de desenvolvimento observando as m√©tricas do sistema em produ√ß√£o e colhendo feedback dos usu√°rios. O comportamento est√° como o esperado? As m√©tricas atendem? O que voc√™ pode aprender sobre o sistema observando ele rodando? O que os usu√°rios est√£o falando?&lt;/p&gt;

&lt;p&gt;O trabalho de desenvolvimento vai al√©m de s√≥ escrever as linhas de c√≥digo e mandar para produ√ß√£o. Temos que acompanhar os sistemas, entender se temos melhorias t√©cnicas para fazer. A partir do momento em que o software est√° em produ√ß√£o precisamos desse acompanhamento. J√° vi sistemas que no ambiente de testes funcionavam perfeitamente com lat√™ncias m√≠nimas, quando foi para produ√ß√£o, e teve um alto volume de acesso, parou de funcionar. Ter m√©tricas, logging, tracing ‚Äî qui√ß√° fazer um profiling ‚Äî trar√° as respostas para os problemas t√©cnicos encontrados em produ√ß√£o, ou talvez s√≥ um caminho para onde devemos explorar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#livros"&gt;
  &lt;/a&gt;
  Livros
&lt;/h2&gt;

&lt;p&gt;Alguns livros que trazem muita informa√ß√£o boa para o dia adia. Sem ordem de prefer√™ncia. Sem julgamentos aos autores.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com.br/Code-Complete-Steve-McConnell/dp/0735619670/"&gt;Code Complete&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com.br/Clean-Code-Handbook-Software-Craftsmanship-ebook/dp/B001GSTOAM/"&gt;Clean Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com.br/Pragmatic-Programmer-Journeyman-Master-English-ebook/dp/B003GCTQAE/"&gt;The Pragmatic Programmer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com.br/Design-Patterns-Object-Oriented-Addison-Wesley-Professional-ebook/dp/B000SEIBB8/"&gt;Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com.br/Refactoring-Improving-Existing-Addison-Wesley-Signature-ebook/dp/B07LCM8RG2/"&gt;Refactoring&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>architecture</category>
    </item>
    <item>
      <title>HTML, a frontend language.</title>
      <author>BeautyJames</author>
      <pubDate>Fri, 15 Oct 2021 16:44:05 +0000</pubDate>
      <link>https://dev.to/beautyjames/html-a-frontend-language-5fc1</link>
      <guid>https://dev.to/beautyjames/html-a-frontend-language-5fc1</guid>
      <description>&lt;p&gt;Hello everyone, Beauty James here again with another intriguing topic. Since I talked about Frontend development in my previous article, I figured it would be beneficial to include topics about frontend languages on this blog.&lt;br&gt;
So, today we will be considering HTML, a frontend language. We‚Äôre going to start with the basics as we discuss the following;&lt;br&gt;
‚Ä¢ What is html?&lt;br&gt;
‚Ä¢ Basic concepts in HTML&lt;br&gt;
‚Ä¢ What is an html editor?&lt;br&gt;
‚Ä¢ Features of an html text editor&lt;br&gt;
‚Ä¢ When do you need an html editor?&lt;br&gt;
‚Ä¢ Examples of html editors&lt;br&gt;
‚Ä¢ How to write html codes?&lt;br&gt;
‚Ä¢ Basic text formatting in HTML&lt;br&gt;
‚Ä¢ Uses of html&lt;br&gt;
What is HTML?&lt;br&gt;
HTML (Hypertext Markup Language) is the code that is used to structure the web and it‚Äôs content. Structuring contents could be within a set of paragraphs, a list of bulleted point or using images and data tables. It tells the web browsers how to structure the web pages you visit. It could be complicated or really basic, depending on how the developer wants it to be.&lt;br&gt;
Basic concepts in HTML&lt;br&gt;
ÔÉò The program you need: HTML is written in plain text. All you need is a simple text editor that is already in your system. For Macintosh, you could use a  simple text editor and for Windows, that will be Notepad.&lt;br&gt;
ÔÉò Rules in HTML: In HTML, the rules are fairly simple. For example, HTML tags are always surrounded by angles (&amp;lt; &amp;gt;).&lt;br&gt;
ÔÉò Case sensitivity: HTML tags are not case sensitive. This means that you can use either uppercase or lowercase. For instance,  is the same as .&lt;br&gt;
ÔÉò Elements; HTML consists of a series of elements which you use to enclose, wrap or markup different parts of a content to make it appear or act in a certain way. They are the building blocks of HTML pages. Elements are indicated in the documents by tags enclosed in angle brackets for example &lt;/p&gt;
&lt;p&gt;. The extent of an element could also be indicated by a pair of tags: a start tag&lt;/p&gt;
&lt;p&gt; and an end tag &lt;/p&gt;. The text content of any element is placed within these tags. Note that the browsers do not display the tags but only use them to interpret the content of the page&lt;br&gt;
For example, consider the text below&lt;br&gt;
My dog has a temper.&lt;br&gt;
If you want to make the text stand by itself, you could specify that it is a paragraph by enclosing it in a paragraph &lt;p&gt; element.&lt;/p&gt;

&lt;p&gt;My dog has a temper&lt;/p&gt;

&lt;p&gt;In the text above, we can denote that the opening tag is &lt;/p&gt;
&lt;p&gt;, while the closing tag is &lt;/p&gt;. The sentence ‚ÄúMy dog has a temper‚Äù, becomes the content while the element here becomes the opening tag followed by the content and the closing tag. To understand this better, we will further look into the anatomy of an element.&lt;br&gt;
i.  The opening tag; This consist of the name of the tag wrapped in opening and closing angle brackets but it marks where the element begins.&lt;br&gt;
ii. The content; This is simply the content of an element. In this example, it is the paragraph text ‚ÄúMy dog has a temper‚Äù.&lt;br&gt;
iii.    The closing tag; This is the same as the opening tag except that it has a forward slash before the tag ends. It marks where the element ends.&lt;br&gt;
It should be noted that although the terms Element and Tag could be used interchangeably, they are not exactly the same. An element consists of an opening tag, the content and the closing tag while a tag simply marks the beginning or the end of  an element.&lt;br&gt;
ÔÉò Empty elements: Empty elements consists of a single tag which is usually used to insert something in the document. It doesn‚Äôt follow the anatomy of a regular element (the opening tag, the content and the closing tag) as mentioned above. &lt;br&gt;
ÔÉò Attributes: These are special codes placed within the html elements that describe how the element should look like. They contain extra information about the element that won‚Äôt appear in the content.&lt;br&gt;
An attribute should always have:&lt;br&gt;
i.  The attribute name followed by an equality sign&lt;br&gt;
ii. Space between it and the element (in cases of multiple attributes, the attributes should also be separated by spaces)&lt;br&gt;
iii.    The attribute value wrapped around opening and closing tags&lt;br&gt;
Examples of attributes are the color attribute which changes the color of the webpage and outline attribute which aligns the text either to the left or right.&lt;br&gt;
ÔÉò HTML structure: All html document are divided into two main parts; The head and the body as shown below;&lt;br&gt;
&lt;br&gt;
-----the head&lt;br&gt;
‚Ä¶‚Ä¶‚Ä¶&lt;br&gt;
&lt;br&gt;
-----the body&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
ÔÉò Nesting: Nesting is the act of enclosing text and graphics using tags. Example, .&lt;br&gt;
What is an HTML editor?&lt;br&gt;
An HTML editor is a specialized piece of software that assists in the creation of HTML and quite possibly CSS codes. It includes features that help streamline your coding workflow and of course  allows users to enter raw text. Whether you‚Äôre new to HTML or a seasoned professional, a good HTML editor will help you code faster thanks to it‚Äôs many helpful features.&lt;br&gt;
Features of an HTML text editor&lt;br&gt;
A good HTML editor should have a few or all of the following features:&lt;br&gt;
o   Code Validation: Code Validation simply means making sure that your code‚Äôs syntax is error free. This is a basic feature made available to most html text editors. It doesn‚Äôt necessarily check for complex errors like a debugging tool would, but it definitely helps to save time and is comparable to a debugging tool.&lt;br&gt;
o   A Quick Search Of code: This feature allows you to search for a code instead of going through hundreds of lines of codes for just a single component. &lt;br&gt;
o   Auto Completion: This feature automatically inserts components like closing tags when they‚Äôre logically supposed to appear, saving you time in the process.&lt;br&gt;
o   Syntax Highlighter:  Syntax Highlighter makes it possible to visually  differentiate between elements so you can quickly determine what you need to write next by emphasizing key elements in different colors.&lt;br&gt;
o   Debugging: HTML text editors can sometimes save you from having to scan through line after line of code trying to see and fix tiny errors that are easy to miss. This feature that checks your codes for errors and reports them back to you is known as Debugging&lt;br&gt;
o   Insert common HTML Elements: You can easily add HTML element with one click without constantly having to type them in every time you want to use them, saving you time.&lt;br&gt;
o   Search and replace: This feature helps you to search your code and replace all instances of your keyword to something else. You only have to type the code once instead of multiple times.&lt;br&gt;
When do you need an HTML editor?&lt;br&gt;
Sometimes you may need an HTML editor, a word processor or an IDE (Integrated Development Environment). Below are general guidelines that will help you to determine what type of software you need.&lt;br&gt;
An HTML editor is helpful when ;&lt;br&gt;
ÔÉò You‚Äôre learning how to write html codes&lt;br&gt;
ÔÉò You need a professional tool that will reduce errors in your code&lt;br&gt;
ÔÉò A basic word processor or text editor just isn‚Äôt cutting it for you anymore.&lt;br&gt;
ÔÉò You need to edit an HTML or CSS file.&lt;br&gt;
ÔÉò It‚Äôs essential to efficiently write HTML or other design-based code like CSS.&lt;br&gt;
Examples of HTML editors&lt;br&gt;
Using a word processor or basic text editor will most likely fill your work with errors. This could be prevented by simply using an html editor. With a wide range of HTML editors you could use, the following are the most reliable and efficient ones:&lt;br&gt;
‚Ä¢ Brackets.io; This kind of editor works well with html, CSS, LESS, SCSS, and JavaScript, making it perfect for frontend development. Brackets.io provides a professional experience and is an easy-to-use text editor for html, making it one of the best editors used by web developers.&lt;br&gt;
‚Ä¢ Atoms; This kind of editor supports multiple panes which helps you to edit multiple files at the same time especially for apple and Linux users. This is especially useful if you‚Äôre working on interrelated files. Its user interface is customizable and it has both Git and GitHub. Atom offers professional experience and is intuitive to use.&lt;br&gt;
‚Ä¢ Notepad++; Notepad++ is a free html editor that supports CSS, JavaScript, PHP and other programming languages. It has not just the basic features of an html editor, but some advanced features without being overly complicated. Notepad++ is the best option for an html editor that‚Äôs great for transitioning  out of beginner or intermediate-level web development. It is also great for advanced users who love the idea of a distraction-free interface.&lt;br&gt;
‚Ä¢ Komodo edit; This is  a free html editor that supports Perl, Ruby, Python, HTML/CSS and more programming languages. Komodo edit is a professional program with  great, advanced features, and also includes project management. Although the free version is often perfect on its own for most developers and beginners, it is preferable to upgrade to komodo IDE if professional features are needed, such as for business or enterprise level project. &lt;br&gt;
‚Ä¢ Visual studio code; This is a type of html editor that is well maintained by Microsoft and open-source community. Visual studio code supports HTML, CSS,  LESS, CASS, PHP, C++, c#, Ruby, Perl, SQL, XML, JSON, Python, and many more languages. It consists of both basic features like syntax Highlighting and advanced features like debugging and Git commands built-in, and tons of other extensions available. The user interface (UI) is Clean and well-organized.&lt;br&gt;
‚Ä¢ Dreamweaver; Dreamweaver is one of the best html editors because it supports many web standards including HTML and CSS. It is easier to spot and correct issues in Dreamweaver because it has Error Underlining. With Dreamweaver you don‚Äôt have to keep saving your working file and uploading it to your server to check your progress because there‚Äôs a live preview editing area built right into the UI so you can streamline your workflow.&lt;br&gt;
‚Ä¢ Vim; Due to it‚Äôs great advanced features such as error highlighting, and search and replace tool, Vim is sometimes considered as an IDE than a mere HTML text editor. It enables users to undo their actions in an unlimited number of times and it is also customizable.&lt;br&gt;
‚Ä¢ Sublime text 3; Sublime text 3 is an excellent option for an HTML editor that is also customizable. It has a clean interface that‚Äôs uncluttered and allows users to focus more on their code. Sublime text 3 has features such as syntax Highlighting and a split-pane UI capability as well, which allows users search and find elements quickly thereby, saving time.&lt;br&gt;
Other examples include;&lt;br&gt;
‚Ä¢ TinyMCE Editor, and&lt;br&gt;
‚Ä¢ Froala.&lt;br&gt;
How to write HTML codes&lt;br&gt;
Writing HTML codes is simply creating your own webpage. We will explain the process of creating a web page through the steps listed below:&lt;br&gt;
STEP 1; Open a text editor&lt;br&gt;
ÔÉº Open Notepad for Windows&lt;br&gt;
For Windows 8 or later, open the start screen, on the window symbol at the bottom left of your screen, type Notepad.&lt;br&gt;
For Windows 7 or earlier, open Start&amp;gt;Programs&amp;gt;Accessories&amp;gt;Notepad&amp;gt;&lt;br&gt;
ÔÉº Open TextEdit for Mac&lt;br&gt;
Open Finder&amp;gt;Application&amp;gt;TextEdit&lt;br&gt;
Also change some preferences to get the application to change files correctly. In preferences, Format&amp;gt;Plain text. Then under ‚ÄúOpen and Save‚Äù, check the box that says ‚ÄúDisplay html files as html codes instead of formatted text‚Äù.&lt;br&gt;
STEP 2; Write or copy the following code into Notepad or TextEdit &lt;br&gt;
&lt;br&gt;
&lt;br&gt;
This is my first web page &lt;br&gt;
 &lt;br&gt;
Hello world. This is my first webpage. There is more to come so make sure you don‚Äôt miss out ..&lt;br&gt;
 &lt;br&gt;
STEP 3: Save the file on the computer. A file can be saved as either ‚Äòhtm‚Äô or ‚Äòhtml‚Äô.&lt;br&gt;
STEP 4: View the html file in your browser. To preview your document, open it with your browser.&lt;br&gt;
Basic Text Formatting&lt;br&gt;
The following headline, paragraph, line break and horizontal rule tags will make our current web page a lot more exciting:&lt;br&gt;
‚Ä¢ Headline tag; In html, you can create text with bold copies by using the headline ranging from &lt;h1&gt;‚Ä¶‚Ä¶‚Ä¶..&lt;/h1&gt; to &lt;h6&gt;‚Ä¶‚Ä¶‚Ä¶&lt;/h6&gt;. The code of all these headline sizes will be written as

&lt;h1&gt;Level 1 headlines&lt;/h1&gt;

&lt;h2&gt;Level 2 headlines&lt;/h2&gt;

&lt;h3&gt;Level 3 headlines &lt;/h3&gt;

&lt;h4&gt;Level 4 headlines &lt;/h4&gt;

&lt;h5&gt;Level 5 headlines&lt;/h5&gt;

&lt;h6&gt;Level 6 headlines&lt;/h6&gt;

&lt;p&gt;To add the headline to your webpage, follow the steps listed above but instead, your code should look like this&lt;br&gt;
&lt;br&gt;
&lt;/p&gt; &lt;br&gt;
This is my first webpage &lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h1&gt;Hello world. &lt;/h1&gt;This is my first webpage. There is more to come.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Save the file and open it in your web browser to view it.&lt;br&gt;
‚Ä¢ Paragraph and Line breaks; To add space between paragraphs, you use a paragraph tag &lt;p&gt;‚Ä¶‚Ä¶‚Ä¶&lt;/p&gt;.&lt;br&gt;
To add a single blank line or space, you use a break tag &lt;br&gt;. This is an empty element and therefore stands alone.&lt;br&gt;
To apply paragraphs and line breaks to your web page, follow the same steps listed above, but your code should look like this&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
This is my first webpage&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h1&gt;Hello world.&lt;/h1&gt;.This is my first webpage. There‚Äôs more to come&lt;br&gt;
&lt;br&gt;

&lt;p&gt;I am learning how to use the horizontal rule, headline, paragraph and line break tags. Writing html isn‚Äôt as hard as it seems.
&lt;/p&gt;

&lt;p&gt;Here is a list of my favorites fruits:&lt;br&gt;
Apple &lt;br&gt;
Banana&lt;br&gt;
Watermelon&lt;br&gt;
But most of all, Grapes&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;
‚Ä¢ List items; Most websites users don‚Äôt like to read a lot of text so putting your information in form of a list (&lt;/p&gt;
&lt;li&gt;‚Ä¶‚Ä¶&lt;/li&gt;)either in numbers or bullets will be helpful. The numbered list are called ordered list (&lt;ol&gt;‚Ä¶‚Ä¶..&lt;/ol&gt;), while the bulleted list are called unordered list (&lt;ul&gt;‚Ä¶‚Ä¶..&lt;/ul&gt;). An ordered list goes like this.

&lt;ol&gt;
&lt;li&gt;my first item on the list&lt;/li&gt;
&lt;li&gt;my second item on the list&lt;/li&gt;
&lt;li&gt;my third item on the list&lt;/li&gt;
&lt;li&gt;my fourth item on the list&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the browser, it will appear like this;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; my first item on the list.&lt;/li&gt;
&lt;li&gt; my second item on the list.&lt;/li&gt;
&lt;li&gt; my third item on the list.&lt;/li&gt;
&lt;li&gt; my fourth item on the list. 
An unordered list or bulleted list goes like this;
&lt;ul&gt;
&lt;li&gt;my first item on the list&lt;/li&gt;
&lt;li&gt;my second item on the list&lt;/li&gt;
&lt;li&gt;my third item on the list&lt;/li&gt;
&lt;li&gt;my fourth item on the list&lt;/li&gt;
&lt;/ul&gt;
In the browser, it should appear like this; &lt;/li&gt;
&lt;li&gt; my first item on the list.&lt;/li&gt;
&lt;li&gt;  my second item on the list.&lt;/li&gt;
&lt;li&gt; my third item on the list.&lt;/li&gt;
&lt;li&gt;  my fourth item on the list.
Uses of HTML
‚Ä¢ Client-side storage: With HTML5, Client-side storage is feasible Using local storage and index DB. Index DB is a better and larger client-side data store. It can be expanded with the user‚Äôs permission.
‚Ä¢ Web document creation: Html is used to design and create documents on the web(including the head, the title and the body).
‚Ä¢ Web page development: HTML is mainly used for creating pages on the World wide web. Every page on the web is written using a version of  html code and contains a set of html tags including hyperlinks which connects users to other pages.
‚Ä¢ Data entry support with html: Html5 is used to support data entry. Html5 has developed new attributes to drive on-screen keyboards, validations and other data-experiences to enable users to have a better data entry.
‚Ä¢ Internet navigation: This is one of the most important uses of html, which is made possible by utilizing the concept of Hypertext. This is a text that enables users to navigate  webpages and between websites located on different servers.
Other uses of html includes:
‚Ä¢ Cutting edge feature
‚Ä¢ Game development usage
‚Ä¢ Responsive images on webpages
‚Ä¢ Offline capabilities usage
‚Ä¢ Native APIs usage to enrich a website
CONCLUSION
You have successfully made it to the end of this article! At this point, you should be able to understand what html looks like and how it works. If you are able to understand these basics concepts of html, you are off to a great start because usage of html is widespread and has become more sophisticated than ever before. It is your responsibility as a developer to put applications of html concepts in real time usage.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>We measured maintainer response time in Issues and PRs for 90k GitHub repos</title>
      <author>Quine</author>
      <pubDate>Fri, 15 Oct 2021 16:33:56 +0000</pubDate>
      <link>https://dev.to/quine_sh/we-measured-maintainer-response-time-in-issues-and-prs-for-90k-github-repos-2pcb</link>
      <guid>https://dev.to/quine_sh/we-measured-maintainer-response-time-in-issues-and-prs-for-90k-github-repos-2pcb</guid>
      <description>&lt;p&gt;Writing an open-source contribution is difficult and time-consuming, but so is reviewing it and maintaining it. For this reason, contributing to open source is a two-sided investment decision. On the one hand, contributors invest their time and energy writing high-quality code and understanding how their submission fits in the storyline of the repo. On the other hand, maintainers allocate time and attention to review the PR and tacitly make a long-term commitment to look after the wellbeing of the contribution. When a PR is finally merged, the time and effort that was put into writing and reviewing it converts into exponential value for the authors, the reviewers, and the ecosystem!&lt;/p&gt;

&lt;p&gt;Unfortunately, contributor stories does not always end in happy merges. The open source ecosystem is flooded with abandoned open issues and neglected pull-requests, which speaks about fundamental mismatches between repo's communities and aspiring contributors. We at Quine think this is mainly a data problem.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Would you invest time opening an issue if you knew the repo is abandoned?&lt;/em&gt; &lt;em&gt;Is your community more unresponsive that the "other" competing repo?&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;To address these information asymmetries we built &lt;strong&gt;&lt;em&gt;repo detail page&lt;/em&gt;&lt;/strong&gt;, a statistical dashboard that helps contributors and maintainers understand the health of a repository at the community level. To start with, we created a &lt;strong&gt;response time graph&lt;/strong&gt; that measures the (median) time it takes maintainers to respond to issues, and the time it takes for pull requests to be merged after being initially submitted. Your time is valuable, but so is the time of maintainers. Understanding the activity and responsiveness of the community you aspire to join can help you make an informed decision on where to invest your time and energy. For maintainers, the response time graph can help understand the internal dynamics of their community and provide a better contributor experience üôÇ&lt;/p&gt;

&lt;p&gt;Response time graphs are already available for the 90,000 most popular open source repositories on Github. To access them, signup &lt;a href="https://quine.sh"&gt;here&lt;/a&gt;! &lt;/p&gt;

&lt;p&gt;Quine's just getting started ‚ú® Follow us &lt;a href="https://twitter.com/quine_sh"&gt;on Twitter&lt;/a&gt; or join &lt;a href="https://discord.com/invite/ChAuP3SC5H"&gt;our Discord server&lt;/a&gt; if you want to be in the loop!&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>hacktoberfest</category>
      <category>github</category>
    </item>
    <item>
      <title>react or vue with asp.net core?</title>
      <author>a.eid7</author>
      <pubDate>Fri, 15 Oct 2021 16:31:25 +0000</pubDate>
      <link>https://dev.to/a_eid7/react-or-vue-with-aspnet-core-26l1</link>
      <guid>https://dev.to/a_eid7/react-or-vue-with-aspnet-core-26l1</guid>
      <description>&lt;p&gt;I want to learn a frontend framework suitable with asp.netcore, I heard that blazor is slow in startup and angular is hard, what I can choice :vue or react?&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Using React Query to solve state management in your React app</title>
      <author>Juan Pablo Djeredjian</author>
      <pubDate>Fri, 15 Oct 2021 16:16:31 +0000</pubDate>
      <link>https://dev.to/juandj/using-react-query-to-solve-state-management-in-your-react-app-4kf9</link>
      <guid>https://dev.to/juandj/using-react-query-to-solve-state-management-in-your-react-app-4kf9</guid>
      <description>&lt;p&gt;I recently got the opportunity (and the privilege!) of starting a greenfield project at my current company, involving an frontend application for an internal tool. The devs involved had the chance to choose the tech stack that we considered convenient, and we collaboratively wrote an RFC (Request for Comment) and presented it to the rest of the company to open up our choices to discussion.&lt;/p&gt;

&lt;p&gt;One of the main points that came up -after settling for React, the lingua franca framework at our company- is how we would handle state management. Our main application uses Redux, but many other alternatives were brought up: MobX, using native hooks (a combination of useReducer + useContext), using Redux plus Redux Toolkit. I even got to know and proposed Recoil, a super exciting project -and definitely a library with one of the best presentation videos I've seen so far.&lt;/p&gt;

&lt;p&gt;But our Staff Engineer Zac came up with a different idea. Enter React-Query.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-querys-novel-approach-to-state-management"&gt;
  &lt;/a&gt;
  React Query's novel approach to state management
&lt;/h3&gt;

&lt;p&gt;"I haven't used it yet, but I love the different approach it takes to handle state within an application. It basically splits server side state out from client side state and automates a lot of stuff like re-fetching and caching", explained Zac.&lt;/p&gt;

&lt;p&gt;The idea clicked with me instantly: most of the state that React apps keep in their store is just a reflection of data persisted remotely somewhere (a User, a list of Posts, Comments, or To-Dos, for e.g.). Only a minor part of it is client-side only, and it almost always corresponds to UI/UX information, like if whether a modal is open, a sidebar expanded, etc.&lt;/p&gt;

&lt;p&gt;So the idea behind React Query is taking that majority of server-side state and handling it completely: fetching, re-fetching, storing, cacheing, updating and memoizing it in an all-in-one solution. This separations helps to reduce a lot of the boilerplate that inevitably arises with other combined client- and server-side state management tools (such as Redux).&lt;/p&gt;

&lt;p&gt;The library also offers some advanced features like "optimistic updates", in which the library assumes an update to the data will be successful before actually receiving a response from the back-end, and allows to easily roll it back if it fails, making the app seem responsive as a breeze to the user.&lt;/p&gt;

&lt;p&gt;Promising enough. We decided that we'd go with it during the Proof of Concept phase of the app and started writing code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-the-poc-with-createreactapp"&gt;
  &lt;/a&gt;
  Writing the PoC with create-react-app
&lt;/h3&gt;

&lt;p&gt;As we started working on the frontend way before our backend team had availability to build the services that would provide the data needed for the app, we decided to go forward with setting up our project with &lt;strong&gt;create-react-app with its TypeScript template&lt;/strong&gt; and React Query using JSONPlaceholder as a fake API.&lt;/p&gt;

&lt;p&gt;So, let's write some code!&lt;/p&gt;

&lt;p&gt;First, we created a new app with create-react-app's CLI and installed react-query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app react-query-demo &lt;span class="nt"&gt;--template&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;typescript
&lt;span class="nb"&gt;cd &lt;/span&gt;react-query-demo
yarn add react-query
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;App.tsx&lt;/code&gt; component that comes by default looks so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./logo.svg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App-header"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App-logo"&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Edit &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;src/App.tsx&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;code&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; and save to reload.
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;
          &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App-link"&lt;/span&gt;
          &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://reactjs.org"&lt;/span&gt;
          &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt;
          &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"noopener noreferrer"&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Learn React
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Following React-Query's excellent documentation, we first modified that file by wrapping our app with the &lt;code&gt;QueryClientProvider&lt;/code&gt; that comes included in the library and created a new component &lt;code&gt;UserList&lt;/code&gt; where we will fetch our &lt;code&gt;Users&lt;/code&gt; from our fake API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;UserList&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./UserList&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App-header"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;React Query Demo&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserList&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's unpack our changes in that component. We first instantiated a new &lt;code&gt;queryClient&lt;/code&gt; instance with the &lt;code&gt;QueryClient&lt;/code&gt; constructor that React Query provides. We then passed that instance to the &lt;code&gt;QueryClientProvider&lt;/code&gt; with which we wrapped our whole app. This provides a context for our cached data and allows all components wrapped in it to use the querying and updating hooks that the library provides.&lt;/p&gt;

&lt;p&gt;We also cleaned up our component a bit, changed the title and added our newly created &lt;code&gt;UserList&lt;/code&gt; component, where things start to get real interesting. Let's take a look at it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;USERS_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;users&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;error&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;USERS_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Network response failed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}));&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Loading...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Error: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"userRow"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Username: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A lot more going on here, but this is where the juice of React Query really shows. Let's unpack all of it.&lt;/p&gt;

&lt;p&gt;As we are using JSONPlaceholder's fake API to fetch a list of users, we first create the &lt;code&gt;User&lt;/code&gt; interface, a simplified version &lt;a href="https://jsonplaceholder.typicode.com/users"&gt;based on the schema provided&lt;/a&gt; by the site. In our case, we will fetch an array of Users and display it to the user.&lt;/p&gt;

&lt;p&gt;Within our component, we make use of the main tool that React-Query provides: the &lt;code&gt;useQuery&lt;/code&gt; hook. The hook takes two arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a &lt;strong&gt;unique query key&lt;/strong&gt; which is used internally by React Query for "refetching, caching and sharing queries across the application". The library will store the data under this key, in a similar way as data for different reducers are kept under a key name in Redux. In our case, we set it to the &lt;code&gt;USERS_KEY&lt;/code&gt; constant, which is simply a string of value  &lt;code&gt;"users"&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;a &lt;strong&gt;function that returns a promise&lt;/strong&gt; that resolves the data, or throws an error.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The second argument highlights one of library's great advantages: since React Query's fetching mechanisms are agnostically built on &lt;strong&gt;Promises&lt;/strong&gt;, it can be used with literally any asynchronous data fetching client, such as Axios, the native &lt;strong&gt;fetch&lt;/strong&gt; and even GraphQL! (we'll expand on how to do this in a subsequent post).&lt;/p&gt;

&lt;p&gt;For now, we are using &lt;strong&gt;fetch&lt;/strong&gt; to request a list of &lt;code&gt;User&lt;/code&gt;s from the &lt;a href="https://jsonplaceholder.typicode.com/users"&gt;&lt;code&gt;https://jsonplaceholder.typicode.com/users&lt;/code&gt;&lt;/a&gt; endpoint. Notice that, when using fetch, we must also manually check if the request is successful, and throw an error is if it not, as the second parameter expects the fetcher function to throw when an error occurs, and fetch does not automatically do this. This wouldn't be necessary if we were using Axios, for example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note for TypeScript users:&lt;/strong&gt; React Query allows you to provide, via Generics, the result and error types of its hooks. This is especially useful when creating your own custom hooks, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useGetUsers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetchUsers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;useQuery&lt;/code&gt; hook returns an object, from where we have destructured three properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;isLoading:&lt;/strong&gt; a boolean that indicates that the query has no data and is currently fetching.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;data:&lt;/strong&gt; the property that contains the data that the Promise resolved to if the request was successful. In our case, it is an array of &lt;code&gt;User&lt;/code&gt;s, and we aliased it to the variable name &lt;code&gt;users&lt;/code&gt; just for clarity.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;isError:&lt;/strong&gt; a boolean that indicated that the query encountered an error.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;error:&lt;/strong&gt; a property that contains the error thrown if the query is in an &lt;strong&gt;isError&lt;/strong&gt; state.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can use these properties to decide what the component should render, depending on the state of the query. We first check if it is in an &lt;code&gt;isLoading&lt;/code&gt; state, and render a message accordingly. We then check if it an error occured via the &lt;code&gt;isError&lt;/code&gt; boolean, and display the error under &lt;code&gt;error.message&lt;/code&gt; . Finally, we can safely assume that query is in &lt;code&gt;isSuccess&lt;/code&gt; state and render our list of users.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updating our server-side state&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So far so good, but what about when we need to create, update or delete our remotely stored data? React Query solves this issue with the concept of &lt;strong&gt;Mutations&lt;/strong&gt; and the &lt;code&gt;useMutation&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;Let's create another component &lt;code&gt;CreateUser&lt;/code&gt; that renders a button which POSTs a new user to the API when clicking on it, and add it to our &lt;code&gt;App&lt;/code&gt; .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="p"&gt;[...]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App-header"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;React Query Demo&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserList&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CreateUser&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;QueryClientProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This time, we'll use Axios as our HTTP client to highlight React Query's versatility. Let's install it first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And let's write the code for our new component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useQueryClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;USERS_KEY&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./UserList&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;exampleUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;johndoe@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;johndoe1990&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CreateUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQueryClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mutate&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;postUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;invalidateQueries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;USERS_KEY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onButtonClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;exampleUser&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Creating User...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onButtonClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click to post a new user&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's go over what's going on here.&lt;/p&gt;

&lt;p&gt;Firstly, we create a hard-coded &lt;code&gt;exampleUser&lt;/code&gt; to POST into the fake API when the user clicks on the button. We also create our required &lt;strong&gt;mutation function&lt;/strong&gt;, &lt;code&gt;postUser&lt;/code&gt; &lt;strong&gt;,&lt;/strong&gt; which returns a Promise of an Axios Response of a POST call to our &lt;code&gt;/users&lt;/code&gt; endpoint, passing in as data the argument of our mutation function.&lt;/p&gt;

&lt;p&gt;Inside our component, we'll first initialize an instance of &lt;code&gt;queryClient&lt;/code&gt; with the &lt;code&gt;useQueryClient&lt;/code&gt; hook, also provided by React Query. This is the same instance created in &lt;code&gt;App.tsx&lt;/code&gt; and provided by our &lt;code&gt;QueryClientProvider&lt;/code&gt;. We'll make use of it in a second.&lt;/p&gt;

&lt;p&gt;And now we make use of the &lt;code&gt;useMutation&lt;/code&gt; hook, also provided by React Query, which takes two arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a required &lt;strong&gt;mutation function&lt;/strong&gt; that performs an asynchronous task and returns a Promise. In our case, we pass in the already defined &lt;code&gt;postUser&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;an object with multiple properties:

&lt;ul&gt;
&lt;li&gt;an optional &lt;strong&gt;mutation key&lt;/strong&gt;, in a similar way as we defined a &lt;strong&gt;query key&lt;/strong&gt;, to be used internally. We don't need to set one for this example.&lt;/li&gt;
&lt;li&gt;an optional &lt;strong&gt;onSuccess&lt;/strong&gt; callback, that fires when the mutation is successful and is passed the mutation result.&lt;/li&gt;
&lt;li&gt;an optional &lt;strong&gt;onError&lt;/strong&gt; callback that will fires if the mutation fails, and will get the error passed.&lt;/li&gt;
&lt;li&gt;an optional &lt;strong&gt;onMutate&lt;/strong&gt; callback, that fires before the mutation function is fired and is passed the same variables the mutation function would receive. This allows us to do optimistic updates: that is, we can early update a resource (and our UI) in the hope that the mutation succeeds and give our application a "synchronous feel". The value returned from this function will be passed to the &lt;strong&gt;onError&lt;/strong&gt; and the &lt;strong&gt;onSettled&lt;/strong&gt; callbacks, so that we can rollback our optimistic update in case the mutations fails.&lt;/li&gt;
&lt;li&gt;more config properties can be found &lt;a href="https://react-query.tanstack.com/reference/useMutation"&gt;in the docs.&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our example, we are only setting up an &lt;code&gt;onSuccess&lt;/code&gt; callback whose job is to invalidate our &lt;code&gt;"users"&lt;/code&gt; query, by calling the &lt;code&gt;invalidateQueries&lt;/code&gt; utility provided by our &lt;code&gt;queryClient&lt;/code&gt; and passing our &lt;code&gt;USERS_KEY&lt;/code&gt; as argument to it. By invalidating this query key in our cache after the mutation is successful, we indicate React Query that the data under that key is outdated and it should refetch it. Thus, the library will automatically re-query our &lt;code&gt;/users&lt;/code&gt; endpoint, and will bring back our updated &lt;code&gt;Users&lt;/code&gt; list.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;useMutation&lt;/code&gt; hook returns an object from where we destructure two properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;mutate:&lt;/strong&gt; a function that can be called passing variables to it as parameters and will trigger the mutation defined in the &lt;strong&gt;mutation function&lt;/strong&gt; defined in the hook.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;isLoading:&lt;/strong&gt; a boolean that indicates that the mutation is still pending.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our &lt;code&gt;CreateUser&lt;/code&gt; component will use &lt;strong&gt;mutate&lt;/strong&gt; when clicking on a button, so we create an &lt;code&gt;onButtonClick&lt;/code&gt; function that fires &lt;code&gt;mutate&lt;/code&gt; passing it our hardcoded &lt;code&gt;exampleUser&lt;/code&gt; as an argument. We then use our &lt;code&gt;isLoading&lt;/code&gt; flag to show an appropriate message to the user when the mutation is pending, or display the button with a call-to-action otherwise.&lt;/p&gt;

&lt;p&gt;And that's it! Try playing around with it in the app. One note though, if you check the Network tab on the DevTools, you'll see that, because we are using a fake API, the &lt;strong&gt;POST&lt;/strong&gt; call to add a user will indeed succeed with status code &lt;code&gt;201&lt;/code&gt; . However, when React Query refetches the data, (the subsequent &lt;strong&gt;GET&lt;/strong&gt; call that gets fired after we invalidate our query key) the new user won't be in the returned data there as &lt;strong&gt;JSONPlaceholder&lt;/strong&gt; will simply ignore any new data added to it. However, on a real API you would see the &lt;code&gt;User&lt;/code&gt; you just posted.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wrapping it up&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We've seen how React Query can handle the fetching of the data, cacheing and updating (via refetching) and provides us with a user-friendly hook to handle the returned data and rendering. Through the use of its &lt;strong&gt;query keys&lt;/strong&gt;, and its simple API, the library can replace a fully fledged state management solution, taking out of your hands the responsibility of writing hundred of lines of boilerplate code, and adding great functionality that you'd otherwise have to write from scratch.&lt;/p&gt;

&lt;p&gt;Check out &lt;a href="https://react-query-demo-zeta.vercel.app/"&gt;the finished demo app&lt;/a&gt; and &lt;a href="https://github.com/jpdjere/react-query-demo"&gt;clone the repo&lt;/a&gt; to play around with the code. And don't forget to give &lt;a href="https://react-query.tanstack.com/overview"&gt;the official documentation&lt;/a&gt; a read.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>react</category>
      <category>redux</category>
    </item>
    <item>
      <title>What are JavaScript Sets? </title>
      <author>Dani Schuhman</author>
      <pubDate>Fri, 15 Oct 2021 16:00:46 +0000</pubDate>
      <link>https://dev.to/dani8439/what-are-javascript-sets-3lpm</link>
      <guid>https://dev.to/dani8439/what-are-javascript-sets-3lpm</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@rgaleria?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Ricardo Gomez Angel&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/primary-colors?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#javascript-sets"&gt;
  &lt;/a&gt;
  JavaScript sets
&lt;/h1&gt;

&lt;p&gt;JavaScript sets were introduced in ES6. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set"&gt;&lt;code&gt;Set&lt;/code&gt; objects are collections of values.&lt;/a&gt; There can never be any duplicates inside of them, which can make them pretty useful depending on the situation. &lt;/p&gt;

&lt;p&gt;In order to create a &lt;code&gt;Set&lt;/code&gt;, we use the &lt;code&gt;Set.()&lt;/code&gt; constructor, which will create a new &lt;code&gt;Set&lt;/code&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const colors = new Set([ 'Red', 'Green', 'Blue', 'Purple', 'Purple', 'Red', 'Red', 'Blue', 'Magenta']);

console.log(colors)
// Returns 
Set(5)¬†{'Red', 'Green', 'Blue', 'Purple', 'Magenta'}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A &lt;code&gt;Set&lt;/code&gt; can hold mixed data types, just like an array. It is also iterable, like an array. However, there are two big differences between a &lt;code&gt;Set&lt;/code&gt; and an array. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Sets elements are unique. &lt;/li&gt;
&lt;li&gt;The order of elements in a &lt;code&gt;Set&lt;/code&gt; is irrelevant. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When creating a &lt;code&gt;Set&lt;/code&gt;, if we pass in a string as the value, it is an iterable. Whatever is passed in, will become a set of unique characters, with the duplicates removed. Using the string &lt;code&gt;Hello&lt;/code&gt;, if we pass it into a new &lt;code&gt;Set&lt;/code&gt; constructor, the second l will be removed, and we'll be returned a set that consists of only &lt;code&gt;{'H', 'e', 'l', 'o'}&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(new Set('Hello'))
// Returns 
Set(4)¬†{'H', 'e', 'l', 'o'}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#working-with-sets"&gt;
  &lt;/a&gt;
  Working with Sets
&lt;/h2&gt;

&lt;p&gt;There are several methods, and properties that can be used with Sets in order to manipulate the data. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;.add()&lt;/code&gt; method can add a new element onto our &lt;code&gt;Set&lt;/code&gt;. But just as all values are unique in a set, if you try to add a value twice, the second one will be ignored.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;colors.add('Yellow')
Set(6)¬†{'Red', 'Green', 'Blue', 'Purple', 'Magenta',¬†‚Ä¶}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;.has()&lt;/code&gt; method can check to see if a set contains a specific element. It's similar to the &lt;code&gt;.includes()&lt;/code&gt; method in arrays.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;colors.has('Yellow')
// Returns 
true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unlike arrays, as the order doesn't matter in &lt;code&gt;Set&lt;/code&gt;'s, we can't pass in an index. Doing so will return &lt;code&gt;undefined&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(colors[0])
// Returns
undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;.size&lt;/code&gt; property is similar to the &lt;code&gt;.length&lt;/code&gt; property in arrays, and will return the size of our &lt;code&gt;Set&lt;/code&gt; object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;colors.size
// Returns 
6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can delete elements from a set using the &lt;code&gt;.delete()&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;colors.delete('Yellow')
// Returns
true 
colors
Set(5)¬†{'Red', 'Green', 'Blue', 'Purple', 'Magenta'}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another method that can be used on a &lt;code&gt;Set&lt;/code&gt; is the &lt;code&gt;.clear()&lt;/code&gt; method, which will delete all of the elements of the set.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;colors.clear()
colors 
// Returns
Set(0)¬†{size: 0}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also iterate over the items in a set, using both the &lt;code&gt;.forEach()&lt;/code&gt; method, or a for/of loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (let item of colors) console.log(item)
// Returns 
Red
Green
Blue
Purple
Magenta
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#converting-between-a-raw-set-endraw-and-an-raw-array-endraw-"&gt;
  &lt;/a&gt;
  Converting between a &lt;code&gt;Set&lt;/code&gt; and an &lt;code&gt;Array&lt;/code&gt;.
&lt;/h3&gt;

&lt;p&gt;If we wanted to convert an array into a &lt;code&gt;Set&lt;/code&gt;, it's very simple. We can use the regular &lt;code&gt;Set&lt;/code&gt; constructor on an array, and it will transform it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let arr = ['Hello', 'how', 'are', 'you?']

let newSet = new Set(arr)
console.log(newSet)
// Returns 
Set(4)¬†{'Hello', 'how', 'are', 'you?'}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we wanted to convert a &lt;code&gt;Set&lt;/code&gt; into an &lt;code&gt;Array&lt;/code&gt;, we can use the spread operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log([...newSet])
// Returns 
(4)¬†['Hello', 'how', 'are', 'you?']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sets also have the &lt;code&gt;keys&lt;/code&gt; and &lt;code&gt;values&lt;/code&gt; methods. &lt;code&gt;keys&lt;/code&gt; is an alias for &lt;code&gt;values&lt;/code&gt;, so both methods do the same thing pretty much. Using either of them will return a new iterator object, that yields the &lt;code&gt;values&lt;/code&gt; for each element in the &lt;code&gt;Set&lt;/code&gt; in the order they appear.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let iceCreamFlavors = new Set();
iceCreamFlavors.add('vanilla'); // vanilla
iceCreamFlavors.add('chocolate'); // chocolate
iceCreamFlavors.add('mint chocolate chip'); // mint chocolate chip

let setItr = iceCreamFlavors.values();

console.log(setItr.next().value);
console.log(setItr.next().value);
console.log(setItr.next().value);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Sets are very easy to interact with thanks to how straightforward their methods are, and because of that can be a very useful tool. I hope that this introduction to them has helped explain just how helpful they can be. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Top 10 trending github repos of the weeküåü.</title>
      <author>Kavindu Santhusa</author>
      <pubDate>Fri, 15 Oct 2021 15:52:48 +0000</pubDate>
      <link>https://dev.to/ksengine/top-10-trending-github-repos-of-the-week-35bc</link>
      <guid>https://dev.to/ksengine/top-10-trending-github-repos-of-the-week-35bc</guid>
      <description>&lt;p&gt;GitHub is where over 65 million developers shape the future of software, together. Contribute to the open source community, manage your Git repositories, review code like a pro, track bugs and features, power your CI/CD and DevOps workflows, and secure code before you commit it.&lt;/p&gt;

&lt;p&gt;Here is the most popular repos published on this platform.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1"&gt;
  &lt;/a&gt;
  #1
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/louislam"&gt;
        louislam
      &lt;/a&gt; / &lt;a href="https://github.com/louislam/uptime-kuma"&gt;
        uptime-kuma
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A fancy self-hosted monitoring tool
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Uptime Kuma&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/louislam/uptime-kuma"&gt;&lt;img src="https://camo.githubusercontent.com/eac777f5dd7cc7cab02b7e7600db2c1172e816985d302490df59ea0842931a62/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f6c6f7569736c616d2f757074696d652d6b756d61"&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/louislam/uptime-kuma" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/84f55f44da98f4f9e7b743d23015c5c44f7ade03c0ab3ae18e0bf2b904effbfe/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f6c6f7569736c616d2f757074696d652d6b756d61"&gt;&lt;/a&gt; &lt;a href="https://hub.docker.com/r/louislam/uptime-kuma" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e513f793946b0a9f7c581aad3b13233dd57ee41cb333b8434398a9b8305fc007/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f762f6c6f7569736c616d2f757074696d652d6b756d612f6c61746573743f6c6162656c3d646f636b6572253230696d6167652532307665722e"&gt;&lt;/a&gt; &lt;a href="https://github.com/louislam/uptime-kuma"&gt;&lt;img src="https://camo.githubusercontent.com/dcd9ea6b2cc7f4d2b3a06548811deecefaea6724fbf8fe57ad9003ec9c9f909f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f6c6f7569736c616d2f757074696d652d6b756d61"&gt;&lt;/a&gt;  &lt;a href="https://opencollective.com/uptime-kuma" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/fb875182ae299319ea43c876bc805c8c13056f74a1d14857ebd9fdb2c4127db9/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f757074696d652d6b756d612f746f74616c2f62616467652e7376673f6c6162656c3d4261636b65727326636f6c6f723d627269676874677265656e"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div width="100%"&gt;
    &lt;a rel="noopener noreferrer" href="https://github.com/louislam/uptime-kuma./public/icon.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0r4nfdls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/louislam/uptime-kuma./public/icon.svg" width="128" alt=""&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;It is a self-hosted monitoring tool like "Uptime Robot".&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/9674a2b1b7d094b060fd79e6df7dca10b86a484ce6015b2668cff768dfc786ee/68747470733a2f2f757074696d652e6b756d612e7065742f696d672f6461726b2e6a7067"&gt;&lt;img src="https://camo.githubusercontent.com/9674a2b1b7d094b060fd79e6df7dca10b86a484ce6015b2668cff768dfc786ee/68747470733a2f2f757074696d652e6b756d612e7065742f696d672f6461726b2e6a7067" width="700" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
ü•î Live Demo&lt;/h2&gt;
&lt;p&gt;Try it!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://demo.uptime.kuma.pet" rel="nofollow"&gt;https://demo.uptime.kuma.pet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It is a 10 minutes live demo, all data will be deleted after that. The server is located at Tokyo, if you live far away from here, it may affact your experience. I suggest that you should install to try it.&lt;/p&gt;
&lt;p&gt;VPS is sponsored by Uptime Kuma sponsors on &lt;a href="https://opencollective.com/uptime-kuma" rel="nofollow"&gt;Open Collective&lt;/a&gt;! Thank you so much!&lt;/p&gt;
&lt;h2&gt;
‚≠ê Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Monitoring uptime for HTTP(s) / TCP / Ping / DNS Record / Push.&lt;/li&gt;
&lt;li&gt;Fancy, Reactive, Fast UI/UX.&lt;/li&gt;
&lt;li&gt;Notifications via Telegram, Discord, Gotify, Slack, Pushover, Email (SMTP), and &lt;a href="https://github.com/louislam/uptime-kuma/tree/master/src/components/notifications"&gt;70+ notification services, click here for the full list&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;20 seconds interval.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/louislam/uptime-kuma/tree/master/src/languages"&gt;Multi Languages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Simple Status Page&lt;/li&gt;
&lt;li&gt;Ping Chart&lt;/li&gt;
&lt;li&gt;Certificate Info&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
üîß How to Install&lt;/h2&gt;
&lt;h3&gt;
üê≥ Docker&lt;/h3&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;docker volume create uptime-kuma
docker run -d --restart=always -p 3001:3001 -v uptime-kuma:/app/data --name uptime-kuma louislam/uptime-kuma:1&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Browse to &lt;a href="http://localhost:3001" rel="nofollow"&gt;http://localhost:3001&lt;/a&gt; after started.&lt;/p&gt;‚Ä¶&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/louislam/uptime-kuma"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#2"&gt;
  &lt;/a&gt;
  #2
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/facebook"&gt;
        facebook
      &lt;/a&gt; / &lt;a href="https://github.com/facebook/flipper"&gt;
        flipper
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A desktop debugging platform for mobile developers.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/61c446d6a94563556b5a021ce98908578cf7d795383144cb32e566d6c2b32758/68747470733a2f2f6662666c69707065722e636f6d2f696d672f69636f6e2e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/61c446d6a94563556b5a021ce98908578cf7d795383144cb32e566d6c2b32758/68747470733a2f2f6662666c69707065722e636f6d2f696d672f69636f6e2e706e67" alt="logo" width="20%"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h1&gt;
  Flipper
&lt;/h1&gt;

&lt;p&gt;
  &lt;a href="https://search.maven.org/artifact/com.facebook.flipper/flipper" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/225183f2c2332411e3f9aa5cb316048a15ced8badbf0f859230e4093235b7770/68747470733a2f2f696d672e736869656c64732e696f2f6d6176656e2d63656e7472616c2f762f636f6d2e66616365626f6f6b2e666c69707065722f666c6970706572" alt="Android Maven Badge"&gt;
  &lt;/a&gt;
  &lt;a href="https://cocoapods.org/pods/Flipper" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/6c8fa4d21086bdaabc377eb33a0cb8cabaeca19edd630eefdb78f925c6fe6f0b/68747470733a2f2f696d672e736869656c64732e696f2f636f636f61706f64732f762f466c69707065724b69742e7376673f6c6162656c3d694f5326636f6c6f723d626c7565" alt="iOS"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  Flipper (formerly Sonar) is a platform for debugging mobile apps on iOS and Android. Visualize, inspect, and control your apps from a simple desktop interface. Use Flipper as is or extend it using the plugin API
&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/facebook/flipper/website/static/img/layout.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YrekD7B8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/facebook/flipper/website/static/img/layout.png" alt="Flipper"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/facebook/flipper#mobile-development"&gt;Mobile development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/facebook/flipper#extending-flipper"&gt;Extending Flipper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/facebook/flipper#contributing-to-flipper"&gt;Contributing to Flipper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/facebook/flipper#in-this-repo"&gt;In this repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/facebook/flipper#getting-started"&gt;Getting started&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/facebook/flipper#requirements"&gt;Requirements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/facebook/flipper#building-from-source"&gt;Building from Source&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/facebook/flipper#desktop"&gt;Desktop&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/facebook/flipper#running-from-source"&gt;Running from source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/facebook/flipper#building-standalone-application"&gt;Building standalone application&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/facebook/flipper#ios-sdk--sample-app"&gt;iOS SDK + Sample App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/facebook/flipper#android-sdk--sample-app"&gt;Android SDK + Sample app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/facebook/flipper#documentation"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/facebook/flipper#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/facebook/flipper#license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Mobile development&lt;/h2&gt;
&lt;p&gt;Flipper aims to be your number one companion for mobile app development on iOS and Android. Therefore, we provide a bunch of useful tools, including a log viewer, interactive layout inspector, and network inspector.&lt;/p&gt;
&lt;h2&gt;
Extending Flipper&lt;/h2&gt;
&lt;p&gt;Flipper is built as a platform. In addition to using the tools already included, you can create your own plugins to visualize and debug data from your mobile apps. Flipper takes care of sending data back‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/facebook/flipper"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#3"&gt;
  &lt;/a&gt;
  #3
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/goplus"&gt;
        goplus
      &lt;/a&gt; / &lt;a href="https://github.com/goplus/gop"&gt;
        gop
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      GoPlus - The Go+ language for engineering, STEM education, and data science
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h2&gt;
The Go+ language for engineering, STEM education, and data science&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/goplus/gop/actions/workflows/go.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9SZsXtL_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/goplus/gop/actions/workflows/go.yml/badge.svg" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://goreportcard.com/report/github.com/goplus/gop" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/eae2e75fbf689feb5ed01d7285ffb04c6882afad2376feaff9c696dc5c5ce5db/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f6769746875622e636f6d2f676f706c75732f676f70" alt="Go Report Card"&gt;&lt;/a&gt;
&lt;a href="https://codecov.io/gh/goplus/gop" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/aaa5a3c16fb37dd3adb8f1ea56cdbb692e5d086757ae68963797562a27632e4a/68747470733a2f2f636f6465636f762e696f2f67682f676f706c75732f676f702f6272616e63682f6d61696e2f67726170682f62616467652e737667" alt="Coverage Status"&gt;&lt;/a&gt;
&lt;a href="https://github.com/goplus/gop/releases"&gt;&lt;img src="https://camo.githubusercontent.com/5b36a5df2f29729453f846f5c46493b657126545036e47e0f3c42d93f57c4763/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f7461672f676f706c75732f676f702e7376673f6c6162656c3d72656c65617365" alt="GitHub release"&gt;&lt;/a&gt;
&lt;a href="https://play.goplus.org/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d9c6a265d47eb80859ed5e261bae36588046e34ac156c5c9e2a2de0eb7bde4fa/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c617967726f756e642d476f2b2d626c75652e737667" alt="Playground"&gt;&lt;/a&gt;
&lt;a href="https://github.com/gopcode/vscode-goplus"&gt;&lt;img src="https://camo.githubusercontent.com/800e8b74cd27fc9aadb68e1bded9bf62e36d6706cde1b30e4294b23b098627b6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7673636f64652d476f2b2d7465616c2e737667" alt="VSCode"&gt;&lt;/a&gt;
&lt;a href="https://github.com/goplus/gop/blob/main/README_zh.md"&gt;&lt;img src="https://camo.githubusercontent.com/f2810c819c8266336f23f6ea4c802d3434bda3f91c9d6801af97bac5fb10da0e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f524541444d452d2545342542382541442545362539362538372d7465616c2e737667" alt="Readme"&gt;&lt;/a&gt;
&lt;a href="https://pkg.go.dev/mod/github.com/goplus/gop" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1e02678fae25a0cc367e202eaed93c76629769623138bc3dc4ff5e9852572cc0/68747470733a2f2f706b672e676f2e6465762f62616467652f6769746875622e636f6d2f676f706c75732f676f702e737667" alt="GoDoc"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Summary about Go+&lt;/h2&gt;
&lt;p&gt;What are mainly impressions about Go+?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A static typed language.&lt;/li&gt;
&lt;li&gt;Fully compatible with &lt;a href="https://github.com/golang/go"&gt;the Go language&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Script-like style, and more readable code for data science than Go.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, the following is legal Go+ source code:&lt;/p&gt;
&lt;div class="highlight highlight-source-go position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-s1"&gt;a&lt;/span&gt; &lt;span class="pl-c1"&gt;:=&lt;/span&gt; [&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;3.4&lt;/span&gt;]
&lt;span class="pl-smi"&gt;println&lt;/span&gt;(&lt;span class="pl-s1"&gt;a&lt;/span&gt;)&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;How do we do this in the Go language?&lt;/p&gt;
&lt;div class="highlight highlight-source-go position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;package&lt;/span&gt; main
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s"&gt;"fmt"&lt;/span&gt;

&lt;span class="pl-k"&gt;func&lt;/span&gt; &lt;span class="pl-en"&gt;main&lt;/span&gt;() {
    &lt;span class="pl-s1"&gt;a&lt;/span&gt; &lt;span class="pl-c1"&gt;:=&lt;/span&gt; []&lt;span class="pl-smi"&gt;float64&lt;/span&gt;{&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;3.4&lt;/span&gt;}
    &lt;span class="pl-s1"&gt;fmt&lt;/span&gt;.&lt;span class="pl-en"&gt;Println&lt;/span&gt;(&lt;span class="pl-s1"&gt;a&lt;/span&gt;)
}&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Of course, we don't only do less-typing things.&lt;/p&gt;
&lt;p&gt;For example, we support &lt;a href="https://en.wikipedia.org/wiki/List_comprehension" rel="nofollow"&gt;list comprehension&lt;/a&gt;, which makes data processing easier.&lt;/p&gt;
&lt;div class="highlight highlight-source-go position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-s1"&gt;a&lt;/span&gt; &lt;span class="pl-c1"&gt;:=&lt;/span&gt; [&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;3&lt;/span&gt;, &lt;span class="pl-c1"&gt;5&lt;/span&gt;, &lt;span class="pl-c1"&gt;7&lt;/span&gt;, &lt;span class="pl-c1"&gt;11&lt;/span&gt;]
&lt;span class="pl-s1"&gt;b&lt;/span&gt; &lt;span class="pl-c1"&gt;:=&lt;/span&gt; [&lt;span class="pl-s1"&gt;x&lt;/span&gt;&lt;span class="pl-c1"&gt;*&lt;/span&gt;&lt;span class="pl-s1"&gt;x&lt;/span&gt; &lt;span class="pl-k"&gt;for&lt;/span&gt; &lt;span class="pl-s1"&gt;x&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;-&lt;/span&gt; &lt;span class="pl-s1"&gt;a&lt;/span&gt;, &lt;span class="pl-s1"&gt;x&lt;/span&gt; &lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;3&lt;/span&gt;]
&lt;span class="pl-smi"&gt;println&lt;/span&gt;(&lt;span class="pl-s1"&gt;b&lt;/span&gt;&lt;/pre&gt;‚Ä¶
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/goplus/gop"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#4"&gt;
  &lt;/a&gt;
  #4
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Slurmio"&gt;
        Slurmio
      &lt;/a&gt; / &lt;a href="https://github.com/Slurmio/school-dev-k8s"&gt;
        school-dev-k8s
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
school-dev-k8s&lt;/h1&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Slurmio/school-dev-k8s"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h2&gt;
  &lt;a href="#5"&gt;
  &lt;/a&gt;
  #5
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/babysor"&gt;
        babysor
      &lt;/a&gt; / &lt;a href="https://github.com/babysor/MockingBird"&gt;
        MockingBird
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      üöÄAIÊãüÂ£∞: 5ÁßíÂÜÖÂÖãÈöÜÊÇ®ÁöÑÂ£∞Èü≥Âπ∂ÁîüÊàê‰ªªÊÑèËØ≠Èü≥ÂÜÖÂÆπ Clone a voice in 5 seconds to generate arbitrary speech in real-time
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/12797292/131216767-6eb251d6-14fc-4951-8324-2722f0cd4c63.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Zhp6TWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/12797292/131216767-6eb251d6-14fc-4951-8324-2722f0cd4c63.jpg" alt="mockingbird"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://choosealicense.com/licenses/mit/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/dd1c858e94a371529a0a4c359bc95f18f09ba4a5fc0e658950bcb1383ea40fc9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e7376673f7374796c653d666c6174" alt="MIT License"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;English | &lt;a href="https://github.com/babysor/MockingBirdREADME-CN.md"&gt;‰∏≠Êñá&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;p&gt;üåç &lt;strong&gt;Chinese&lt;/strong&gt; supported mandarin and tested with multiple datasets: aidatatang_200zh, magicdata, aishell3, data_aishell, and etc.&lt;/p&gt;
&lt;p&gt;ü§© &lt;strong&gt;PyTorch&lt;/strong&gt; worked for pytorch, tested in version of 1.9.0(latest in August 2021), with GPU Tesla T4 and GTX 2060&lt;/p&gt;
&lt;p&gt;üåç &lt;strong&gt;Windows + Linux&lt;/strong&gt; run in both Windows OS and linux OS (even in M1 MACOS)&lt;/p&gt;
&lt;p&gt;ü§© &lt;strong&gt;Easy &amp;amp; Awesome&lt;/strong&gt; effect with only newly-trained synthesizer, by reusing the pretrained encoder/vocoder&lt;/p&gt;
&lt;p&gt;üåç &lt;strong&gt;Webserver Ready&lt;/strong&gt; to serve your result with remote calling&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://www.bilibili.com/video/BV17Q4y1B7mY/" rel="nofollow"&gt;DEMO VIDEO&lt;/a&gt;
&lt;/h3&gt;
&lt;h2&gt;
Quick Start&lt;/h2&gt;
&lt;h3&gt;
1. Install Requirements&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Follow the original repo to test if you got all environment ready
**Python 3.7 or higher ** is needed to run the toolbox.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Install &lt;a href="https://pytorch.org/get-started/locally/" rel="nofollow"&gt;PyTorch&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;If you get an &lt;code&gt;ERROR: Could not find a version that satisfies the requirement torch==1.9.0+cu102 (from versions: 0.1.2, 0.1.2.post1, 0.1.2.post2 )&lt;/code&gt; This error is probably due to a low version of python, try using 3.9 and it will‚Ä¶&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/babysor/MockingBird"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#6"&gt;
  &lt;/a&gt;
  #6
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/lvgl"&gt;
        lvgl
      &lt;/a&gt; / &lt;a href="https://github.com/lvgl/lvgl"&gt;
        lvgl
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Powerful and easy-to-use embedded GUI library with many widgets, advanced visual effects (opacity, antialiasing, animations) and low memory requirements (16K RAM, 64K Flash).
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
 LVGL - Light and Versatile Graphics Library&lt;/h1&gt;
&lt;p&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/b9f59645f486900c0f75fb74b2af9fefbda3575ead45de9194d60e8176c02f40/68747470733a2f2f6c76676c2e696f2f6173736574732f696d616765732f6c76676c5f776964676574735f64656d6f2e676966"&gt;&lt;img src="https://camo.githubusercontent.com/b9f59645f486900c0f75fb74b2af9fefbda3575ead45de9194d60e8176c02f40/68747470733a2f2f6c76676c2e696f2f6173736574732f696d616765732f6c76676c5f776964676574735f64656d6f2e676966"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
LVGL provides everything you need to create an embedded GUI with easy-to-use graphical elements, beautiful visual effects and a low memory footprint
&lt;/p&gt;

&lt;h4&gt;
&lt;a href="https://lvgl.io" rel="nofollow"&gt;Website &lt;/a&gt; ¬∑
&lt;a href="https://docs.lvgl.io/" rel="nofollow"&gt;Docs&lt;/a&gt; ¬∑
&lt;a href="https://forum.lvgl.io" rel="nofollow"&gt;Forum&lt;/a&gt;  ¬∑
&lt;a href="https://lvgl.io/services" rel="nofollow"&gt;Services&lt;/a&gt;  ¬∑
&lt;a href="https://docs.lvgl.io/master/examples.html" rel="nofollow"&gt;Interactive examples&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
Table of content&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/lvgl/lvgl#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lvgl/lvgl#get-started"&gt;Get started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lvgl/lvgl#examples"&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lvgl/lvgl#services"&gt;Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lvgl/lvgl#contributing"&gt;Contributing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
Overview&lt;/h2&gt;
&lt;h3&gt;
Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Powerful &lt;a href="https://docs.lvgl.io/master/widgets/index.html" rel="nofollow"&gt;building blocks&lt;/a&gt;: buttons, charts, lists, sliders, images, etc.&lt;/li&gt;
&lt;li&gt;Advanced graphics engine: animations, anti-aliasing, opacity, smooth scrolling, blending modes, etc&lt;/li&gt;
&lt;li&gt;Supports &lt;a href="https://docs.lvgl.io/master/overview/indev.html" rel="nofollow"&gt;various input devices&lt;/a&gt;: touchscreen, mouse, keyboard, encoder, buttons, etc.&lt;/li&gt;
&lt;li&gt;Supports &lt;a href="https://docs.lvgl.io/master/overview/display.html" rel="nofollow"&gt;multiple displays&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Hardware independent, can be use with any microcontroller and display&lt;/li&gt;
&lt;li&gt;Scalable to operate with little memory (64 kB Flash, 16 kB RAM)&lt;/li&gt;
&lt;li&gt;Multi-language support with UTF-8 handling, CJK, Bidirectional and Arabic script support&lt;/li&gt;
&lt;li&gt;Fully customizable graphical elements via &lt;a href="https://docs.lvgl.io/master/overview/style.html" rel="nofollow"&gt;CSS-like styles&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Powerful layouts inspired by CSS: &lt;a href="https://docs.lvgl.io/master/layouts/flex.html" rel="nofollow"&gt;Flexbox&lt;/a&gt; and &lt;a href="https://docs.lvgl.io/master/layouts/grid.html" rel="nofollow"&gt;Grid&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;OS, External memory and GPU are supported but not required. (built in support for STM32 DMA2D, and‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/lvgl/lvgl"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#7"&gt;
  &lt;/a&gt;
  #7
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/trailofbits"&gt;
        trailofbits
      &lt;/a&gt; / &lt;a href="https://github.com/trailofbits/algo"&gt;
        algo
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Set up a personal VPN in the cloud
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Algo VPN&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://twitter.com/AlgoVPN" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c67d8bb0ef4a515150ad9e3152a32aa81b9eec7dad29ba40cdee13b12f08a3ad/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f68747470732f747769747465722e636f6d2f666f6c645f6c6566742e7376673f7374796c653d736f6369616c266c6162656c3d466f6c6c6f77253230253430416c676f56504e" alt="Twitter"&gt;&lt;/a&gt;
&lt;a href="https://github.com/trailofbits/algo/actions"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MonGebmK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/trailofbits/algo/workflows/Main/badge.svg%3Fbranch%3Dmaster" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Algo VPN is a set of Ansible scripts that simplify the setup of a personal WireGuard and IPsec VPN. It uses the most secure defaults available and works with common cloud providers. See our &lt;a href="https://blog.trailofbits.com/2016/12/12/meet-algo-the-vpn-that-works/" rel="nofollow"&gt;release announcement&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Supports only IKEv2 with strong crypto (AES-GCM, SHA2, and P-256) for iOS, macOS, and Linux&lt;/li&gt;
&lt;li&gt;Supports &lt;a href="https://www.wireguard.com/" rel="nofollow"&gt;WireGuard&lt;/a&gt; for all of the above, in addition to Android and Windows 10&lt;/li&gt;
&lt;li&gt;Generates .conf files and QR codes for iOS, macOS, Android, and Windows WireGuard clients&lt;/li&gt;
&lt;li&gt;Generates Apple profiles to auto-configure iOS and macOS devices for IPsec - no client software required&lt;/li&gt;
&lt;li&gt;Includes a helper script to add and remove users&lt;/li&gt;
&lt;li&gt;Blocks ads with a local DNS resolver (optional)&lt;/li&gt;
&lt;li&gt;Sets up limited SSH users for tunneling traffic (optional)&lt;/li&gt;
&lt;li&gt;Based on current versions of Ubuntu and strongSwan&lt;/li&gt;
&lt;li&gt;Installs to DigitalOcean, Amazon Lightsail, Amazon EC2, Vultr, Microsoft Azure, Google Compute Engine, Scaleway, OpenStack‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/trailofbits/algo"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#8"&gt;
  &lt;/a&gt;
  #8
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/hrsh7th"&gt;
        hrsh7th
      &lt;/a&gt; / &lt;a href="https://github.com/hrsh7th/nvim-cmp"&gt;
        nvim-cmp
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A completion plugin for neovim coded in Lua.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
nvim-cmp&lt;/h1&gt;
&lt;p&gt;A completion engine plugin for neovim written in Lua
Completion sources are installed from external repositories and "sourced".&lt;/p&gt;
&lt;p&gt;
  
    

    &lt;span class="m-1"&gt;Kapture.2021-10-11.at.12.12.19.mp4&lt;/span&gt;
  

  

  

&lt;/p&gt;

&lt;h1&gt;
Readme!&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;nvim-cmp's breaking changes are &lt;a href="https://github.com/hrsh7th/nvim-cmp/issues/231"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;This is my hobby project. You can support me via GitHub sponsors.&lt;/li&gt;
&lt;li&gt;The bug reports are welcome, but I might not fix if you don't provide a minimal reproduction configuration and steps.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
Concept&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;No flicker&lt;/li&gt;
&lt;li&gt;Works properly&lt;/li&gt;
&lt;li&gt;Fully customizable via Lua functions&lt;/li&gt;
&lt;li&gt;Fully supported LSP's Completion capabilities
&lt;ul&gt;
&lt;li&gt;Snippets&lt;/li&gt;
&lt;li&gt;CommitCharacters&lt;/li&gt;
&lt;li&gt;TriggerCharacters&lt;/li&gt;
&lt;li&gt;TextEdit and InsertReplaceTextEdit&lt;/li&gt;
&lt;li&gt;AdditionalTextEdits&lt;/li&gt;
&lt;li&gt;Markdown documentation&lt;/li&gt;
&lt;li&gt;Execute commands (Some LSP server needs it to auto-importing. e.g. &lt;code&gt;sumneko_lua&lt;/code&gt; or &lt;code&gt;purescript-language-server&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Preselect&lt;/li&gt;
&lt;li&gt;CompletionItemTags&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Support pairs-wise plugin automatically&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
Setup&lt;/h1&gt;

&lt;h3&gt;
Recommended Configuration&lt;/h3&gt;

&lt;p&gt;This example configuration is using &lt;code&gt;vim-plug&lt;/code&gt;.&lt;/p&gt;

&lt;div class="highlight highlight-source-viml position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c1"&gt;call&lt;/span&gt; &lt;span class="pl-en"&gt;plug#begin&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-k"&gt;s:&lt;/span&gt;plug_dir&lt;/span&gt;)
Plug &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;neovim/nvim-lspconfig&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
Plug &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;hrsh7th/cmp-nvim-lsp&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
Plug &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;hrsh7th/cmp-buffer&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
Plug &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;hrsh7th/nvim-cmp&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; For vsnip user.&lt;/span&gt;
Plug &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;hrsh7th/cmp-vsnip&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
Plug &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;hrsh7th/vim-vsnip&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;"&lt;/span&gt; For luasnip&lt;/span&gt;&lt;/pre&gt;‚Ä¶
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/hrsh7th/nvim-cmp"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#9"&gt;
  &lt;/a&gt;
  #9
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/argoproj"&gt;
        argoproj
      &lt;/a&gt; / &lt;a href="https://github.com/argoproj/argo-cd"&gt;
        argo-cd
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Declarative continuous deployment for Kubernetes.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://github.com/argoproj/argo-cd/actions?query=workflow%3A%22Integration+tests%22"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VvyAJ2X3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/argoproj/argo-cd/workflows/Integration%2520tests/badge.svg%3Fbranch%3Dmaster" alt="Integration tests"&gt;&lt;/a&gt;
&lt;a href="https://argoproj.github.io/community/join-slack" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f3577de2235b140195f4d59a722b7e4a0fd2922de8b933cc2145abaac718554c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f736c61636b2d6172676f70726f6a2d627269676874677265656e2e7376673f6c6f676f3d736c61636b" alt="slack"&gt;&lt;/a&gt;
&lt;a href="https://codecov.io/gh/argoproj/argo-cd" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4da97e3fc5657fef0a34d2809552f76ed4e182e4dd221f9d5b64bdd2e39ed563/68747470733a2f2f636f6465636f762e696f2f67682f6172676f70726f6a2f6172676f2d63642f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov"&gt;&lt;/a&gt;
&lt;a href="https://github.com/argoproj/argo-cd/releases/latest"&gt;&lt;img src="https://camo.githubusercontent.com/82038ce45eae21eb815fb0e115e5d7cfdd746b076ec1ddb1d61e4757a904af8b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f6172676f70726f6a2f6172676f2d63643f6c6162656c3d6172676f2d6364" alt="Release Version"&gt;&lt;/a&gt;
&lt;a href="https://bestpractices.coreinfrastructure.org/projects/4486" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3ce16a1b096bf3bf140dd061f54c73071dca8e982e354179f6f11dae8d35175b/68747470733a2f2f626573747072616374696365732e636f7265696e6672617374727563747572652e6f72672f70726f6a656374732f343438362f6261646765" alt="CII Best Practices"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
Argo CD - Declarative Continuous Delivery for Kubernetes&lt;/h1&gt;
&lt;h2&gt;
What is Argo CD?&lt;/h2&gt;
&lt;p&gt;Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/argoproj/argo-cddocs/assets/argocd-ui.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F0970yBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/argoproj/argo-cddocs/assets/argocd-ui.gif" alt="Argo CD UI"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/0WAm0y2vLIo" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4d57550d6b798c15ef2cfbdc949bb74151211c8750cc14bfed146bc5a08e28c8/68747470733a2f2f696d672e796f75747562652e636f6d2f76692f3057416d307932764c496f2f302e6a7067" alt="Argo CD Demo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Why Argo CD?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Application definitions, configurations, and environments should be declarative and version controlled.&lt;/li&gt;
&lt;li&gt;Application deployment and lifecycle management should be automated, auditable, and easy to understand.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
Who uses Argo CD?&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/argoproj/argo-cdUSERS.md"&gt;Official Argo CD user list&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Documentation&lt;/h2&gt;
&lt;p&gt;To learn more about Argo CD &lt;a href="https://argo-cd.readthedocs.io/" rel="nofollow"&gt;go to the complete documentation&lt;/a&gt;
Check live demo at &lt;a href="https://cd.apps.argoproj.io/" rel="nofollow"&gt;https://cd.apps.argoproj.io/&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Community&lt;/h2&gt;
&lt;h3&gt;
Contribution, Discussion and Support&lt;/h3&gt;
&lt;p&gt;You can reach the Argo CD community and developers via the following channels:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Q &amp;amp; A : &lt;a href="https://github.com/argoproj/argo-cd/discussions"&gt;Github Discussions&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Chat : &lt;a href="https://argoproj.github.io/community/join-slack" rel="nofollow"&gt;The #argo-cd Slack channel&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Contributors Office Hours: &lt;a href="https://calendar.google.com/calendar/u/0/embed?src=argoproj@gmail.com" rel="nofollow"&gt;Every Thursday&lt;/a&gt; | &lt;a href="https://docs.google.com/document/d/1ttgw98MO45Dq7ZUHpIiOIEfbyeitKHNfMjbY5dLLMKQ" rel="nofollow"&gt;Agenda&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;User Community meeting: &lt;a href="https://calendar.google.com/calendar/u/0/embed?src=argoproj@gmail.com" rel="nofollow"&gt;Every other Wednesday&lt;/a&gt; | &lt;a href="https://docs.google.com/document/d/1xkoFkVviB70YBzSEa4bDnu-rUZ1sIFtwKKG1Uw8XsY8" rel="nofollow"&gt;Agenda&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Participation in the Argo CD project is governed by the &lt;a href="https://github.com/cncf/foundation/blob/master/code-of-conduct.md"&gt;CNCF Code of Conduct&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Blogs and Presentations&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://youtu.be/eEcgn_gU3SM" rel="nofollow"&gt;Combining Argo CD (GitOps), Crossplane (Control Plane), And KubeVela (OAM)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;‚Ä¶&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/argoproj/argo-cd"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#10"&gt;
  &lt;/a&gt;
  #10
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ossrs"&gt;
        ossrs
      &lt;/a&gt; / &lt;a href="https://github.com/ossrs/srs"&gt;
        srs
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      SRS is a simple, high efficiency and realtime video server, supports RTMP/WebRTC/HLS/HTTP-FLV/SRT/GB28181.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
SRS(Simple Realtime Server)&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/c6beb26f0ee210a925c67d128d38421a1c4e369a119a9bf50ff91f0a5c08ebf0/687474703a2f2f6f737372732e6e65742f6769662f76312f736c732e6769663f736974653d6769746875622e636f6d26706174683d2f7372732f342e3072656c65617365"&gt;&lt;img src="https://camo.githubusercontent.com/c6beb26f0ee210a925c67d128d38421a1c4e369a119a9bf50ff91f0a5c08ebf0/687474703a2f2f6f737372732e6e65742f6769662f76312f736c732e6769663f736974653d6769746875622e636f6d26706174683d2f7372732f342e3072656c65617365" alt=""&gt;&lt;/a&gt;
&lt;a href="https://github.com/ossrs/srs/actions?query=workflow%3ACodeQL+branch%3A4.0release"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XVHy8B36--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ossrs/srs/actions/workflows/codeql-analysis.yml/badge.svg%3Fbranch%3D4.0release" alt=""&gt;&lt;/a&gt;
&lt;a href="https://github.com/ossrs/srs/actions/workflows/release.yml?query=workflow%3ARelease"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oe2by-KA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ossrs/srs/actions/workflows/release.yml/badge.svg" alt=""&gt;&lt;/a&gt;
&lt;a href="https://github.com/ossrs/srs/actions?query=workflow%3ATest+branch%3A4.0release"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WNLgPw2T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ossrs/srs/actions/workflows/test.yml/badge.svg%3Fbranch%3D4.0release" alt=""&gt;&lt;/a&gt;
&lt;a href="https://codecov.io/gh/ossrs/srs/branch/4.0release" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3cb0b3a69f8c6c17baba350004a71448166cef410ae10e5160833f0b80078433/68747470733a2f2f636f6465636f762e696f2f67682f6f737372732f7372732f6272616e63682f342e3072656c656173652f67726170682f62616467652e737667" alt=""&gt;&lt;/a&gt;
&lt;a href="https://github.com/ossrs/srs../../wikis/Contact#wechat"&gt;&lt;img src="https://camo.githubusercontent.com/2cea1d9cc3d33fa80493551c25fb6fd3a51e4e728eb54f5e2f83fac8f876a999/68747470733a2f2f67697465652e636f6d2f77696e6c696e7669702f7372732d77696b692f7261772f6d61737465722f696d616765732f7765636861742d6261646765322e706e67" alt=""&gt;&lt;/a&gt;
&lt;a href="http://bbs.ossrs.net" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a105ca4eea4541a1778b12a480f1d91e29dbeeb209b7a51ccd324f3aaeded977/68747470733a2f2f67697465652e636f6d2f77696e6c696e7669702f7372732d77696b692f7261772f6d61737465722f696d616765732f626273322e706e67" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SRS/4.0Ôºå&lt;a href="https://github.com/ossrs/srs/wiki/v4_CN_Product#release40"&gt;Leo&lt;/a&gt;ÔºåÊòØ‰∏Ä‰∏™ÁÆÄÂçïÈ´òÊïàÁöÑÂÆûÊó∂ËßÜÈ¢ëÊúçÂä°Âô®ÔºåÊîØÊåÅRTMP/WebRTC/HLS/HTTP-FLV/SRT„ÄÇ&lt;/p&gt;
&lt;p&gt;SRS is a simple, high efficiency and realtime video server, supports RTMP/WebRTC/HLS/HTTP-FLV/SRT.&lt;/p&gt;
&lt;p&gt;SRS is licenced under &lt;a href="https://github.com/ossrs/srs/blob/4.0release/LICENSE"&gt;MIT&lt;/a&gt;, but some depended libraries are distributed using their &lt;a href="https://github.com/ossrs/srs/wiki/LicenseMixing"&gt;own licenses&lt;/a&gt;.&lt;/p&gt;


&lt;h2&gt;
Usage&lt;/h2&gt;

&lt;p&gt;Build SRS from source or &lt;strong&gt;docker(&lt;a href="https://github.com/ossrs/srs/wiki/v4_CN_Home#docker"&gt;CN&lt;/a&gt; / &lt;a href="https://github.com/ossrs/srs/wiki/v4_EN_Home#docker"&gt;EN&lt;/a&gt;)&lt;/strong&gt;, please read &lt;strong&gt;Wiki: Gettting Started(&lt;a href="https://github.com/ossrs/srs/wiki/v4_CN_Home#getting-started"&gt;CN&lt;/a&gt; / &lt;a href="https://github.com/ossrs/srs/wiki/v4_EN_Home#getting-started"&gt;EN&lt;/a&gt;)&lt;/strong&gt;:&lt;/p&gt;

&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;git clone -b 4.0release https://gitee.com/ossrs/srs.git &amp;amp;&amp;amp;amp
cd srs/trunk &amp;amp;&amp;amp; ./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; ./objs/srs -c conf/srs.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Open &lt;a href="http://localhost:8080/" rel="nofollow"&gt;http://localhost:8080/&lt;/a&gt; to check it, then publish
by &lt;a href="https://ffmpeg.org/download.html" rel="nofollow"&gt;FFmpeg&lt;/a&gt; or &lt;a href="https://obsproject.com/download" rel="nofollow"&gt;OBS&lt;/a&gt; as:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;ffmpeg -re -i ./doc/source.flv -c copy -f flv -y rtmp://localhost/live/livestream&lt;/pre&gt;

&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: It's also able to &lt;a href="http://localhost:8080/players/rtc_publisher.html?autostart=true" rel="nofollow"&gt;publish by H5&lt;/a&gt; if WebRTC is enabled.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Play the following streams by &lt;a href="https://ossrs.net" rel="nofollow"&gt;players&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RTMP (by &lt;a href="https://www.videolan.org/" rel="nofollow"&gt;VLC&lt;/a&gt;): rtmp://localhost/live/livestream&lt;/li&gt;
&lt;li&gt;H5(HTTP-FLV): &lt;a href="http://localhost:8080/players/srs_player.html?autostart=true&amp;amp;stream=livestream.flv&amp;amp;port=8080&amp;amp;schema=http" rel="nofollow"&gt;http://localhost:8080/live/livestream.flv&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;H5(HLS): &lt;a href="http://localhost:8080/players/srs_player.html?autostart=true&amp;amp;stream=livestream.m3u8&amp;amp;port=8080&amp;amp;schema=http" rel="nofollow"&gt;http://localhost:8080/live/livestream.m3u8&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;H5(WebRTC): &lt;a href="http://localhost:8080/players/rtc_player.html?autostart=true" rel="nofollow"&gt;webrtc://localhost/live/livestream&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From here, please read wikis:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/ossrs/srs/wiki/v4_EN_Home#getting-started"&gt;Getting Started&lt;/a&gt;, please read Wiki first.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ossrs/srs/wiki/v4_CN_Home#getting-started"&gt;‰∏≠ÊñáÊñáÊ°£ÔºöËµ∑Ê≠•&lt;/a&gt;Ôºå‰∏çËØªWiki‰∏ÄÂÆöÊâëË°óÔºå‰∏çËØªÊñáÊ°£ËØ∑‰∏çË¶ÅÊèêIssueÔºå‰∏çËØªÊñáÊ°£ËØ∑‰∏çË¶ÅÊèêÈóÆÈ¢òÔºå‰ªª‰ΩïÊñáÊ°£‰∏≠ÊòéÁ°ÆËØ¥ËøáÁöÑÁñëÈóÆÈÉΩ‰∏ç‰ºöËß£Á≠î„ÄÇ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fast index for Wikis:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Overview? (&lt;a href="https://github.com/ossrs/srs/wiki/v4_CN_Home"&gt;CN&lt;/a&gt;, &lt;a href="https://github.com/ossrs/srs/wiki/v4_EN_Home"&gt;EN&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;How‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ossrs/srs"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Enjoy these repos.&lt;br&gt;
Follow me for more articles.&lt;br&gt;
Thanks üíñüíñüíñ&lt;/p&gt;

</description>
      <category>docker</category>
      <category>hacktoberfest</category>
      <category>uptime</category>
      <category>monitoring</category>
    </item>
    <item>
      <title>Programming Platitudes</title>
      <author>Terry Child</author>
      <pubDate>Fri, 15 Oct 2021 15:50:51 +0000</pubDate>
      <link>https://dev.to/terrychild/programming-platitudes-nfc</link>
      <guid>https://dev.to/terrychild/programming-platitudes-nfc</guid>
      <description>&lt;ol start="0"&gt;
&lt;li&gt;Computers like to start counting at zero&lt;/li&gt;
&lt;li&gt;A good place to start is to say "hello, world!"&lt;/li&gt;
&lt;li&gt;Programming is a skill, it requires practice; designing programs is an art, it requires even more practice&lt;/li&gt;
&lt;li&gt;Global variables will come back to haunt you&lt;/li&gt;
&lt;li&gt;Computers get really confused when you ask them to divide something by zero&lt;/li&gt;
&lt;li&gt;Make it work, then make it neat, then make it fast&lt;/li&gt;
&lt;li value="13"&gt;Asynchronous events means the order of things can be unpredictable&lt;/li&gt;
&lt;li value="6"&gt;Copy and paste is not a substitute for functions&lt;/li&gt;
&lt;li&gt;Humorous test messages are not so humorous when they accidentally go live&lt;/li&gt;
&lt;li&gt;Sometimes 32,767+ 1 = -32,768&lt;/li&gt;
&lt;li&gt;No system is user proof&lt;/li&gt;
&lt;li&gt;Infinite loops can be really bad for performance&lt;/li&gt;
&lt;li&gt;No comment is better than an incorrect comment&lt;/li&gt;
&lt;li&gt;Users reserve the right to change their mind&lt;/li&gt;
&lt;li value="14"&gt;You will spend way more time reading code than writing it&lt;/li&gt;
&lt;li&gt;Rubbish data in, well processed yet still rubbish data out&lt;/li&gt;
&lt;li&gt;Be weary of the prototype that just went live "as a stop gap"&lt;/li&gt;
&lt;li&gt;Programming ability is related to your willingness to embrace meaninglessness&lt;/li&gt;
&lt;li&gt;You are probably not the first to try and solve this problem&lt;/li&gt;
&lt;li&gt;If all else fails, call it a caching problem and reboot&lt;/li&gt;
&lt;li&gt;Goto 10&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>jokes</category>
      <category>programming</category>
    </item>
    <item>
      <title>Adding react-to-print in your project</title>
      <author>Beatriz Oliveira</author>
      <pubDate>Fri, 15 Oct 2021 15:43:49 +0000</pubDate>
      <link>https://dev.to/beatrizoliveira/adding-react-to-print-in-your-project-1d7m</link>
      <guid>https://dev.to/beatrizoliveira/adding-react-to-print-in-your-project-1d7m</guid>
      <description>&lt;p&gt;In this blogpost I'll show an added feature in a project already created &lt;strong&gt;My first project with React ts + Hooks&lt;/strong&gt; link to blogpost:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/beatrizoliveira" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3RtzkGm4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--yFn0nB5M--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/556754/db096be3-acf3-4f8f-8358-0580f312e162.jpg" alt="beatrizoliveira"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/beatrizoliveira/my-first-project-with-react-ts-hooks-3mji" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;My first project with React ts + Hooks&lt;/h2&gt;
      &lt;h3&gt;Beatriz Oliveira „Éª Apr 4 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#typescript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#hooks&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#materialui&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 
&lt;h2&gt;
  &lt;a href="#step-by-step"&gt;
  &lt;/a&gt;
  Step by Step
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#1-install-dependencies"&gt;
  &lt;/a&gt;
  1 - Install Dependencies
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# using yarn&lt;/span&gt;
yarn add react-to-print

&lt;span class="c"&gt;# using npm&lt;/span&gt;
npm i react-to-print
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#2-flow-of-the-new-feature"&gt;
  &lt;/a&gt;
  2 - Flow of the new Feature:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S9170mQq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dnmkdhgrzki10f50sa4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S9170mQq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dnmkdhgrzki10f50sa4.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
An import concept is &lt;strong&gt;Lifting State Up&lt;/strong&gt; which consists of: when we want to add one or more features/components for certain functionality and manage them so that they work together we use the concept of elevating state so that the root component will be the manager of all child components.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4UmZRt7g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yg2sqihcc6cz9kbvhbtd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4UmZRt7g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yg2sqihcc6cz9kbvhbtd.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
See more in: &lt;a href="https://reactjs.org/docs/lifting-state-up.html#gatsby-focus-wrapper"&gt;https://reactjs.org/docs/lifting-state-up.html#gatsby-focus-wrapper&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-folder-structure"&gt;
  &lt;/a&gt;
  3 - Folder structure
&lt;/h3&gt;

&lt;p&gt;To best understand and visualization:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hpRy7j93--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6fj4b7x00dpdh1v3zx5y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hpRy7j93--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6fj4b7x00dpdh1v3zx5y.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#4-add-actionbutton"&gt;
  &lt;/a&gt;
  4 - Add ActionButton
&lt;/h3&gt;

&lt;p&gt;First, we will import all the dependencies that will be used and pass the type of the &lt;strong&gt;componentToPrint&lt;/strong&gt; function to be used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@material-ui/core/Button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactToPrint&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-to-print&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ActionButtonProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;componentToPrint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MutableRefObject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And we create ActionButton function and we passed the componentToPrint function into the same, and return button print:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ReactToPrint&lt;/span&gt;
        &lt;span class="nx"&gt;trigger&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;print&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;contained&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;primary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Print&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;componentToPrint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We wrap the button with ReactToPrint and pass a trigger on it where the component will return and then an onClick.&lt;br&gt;
How we will use the useRef hook to return mutable objects via &lt;code&gt;.current&lt;/code&gt; and related components.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#5-we-passed-componenttoprint-to-todolist-component"&gt;
  &lt;/a&gt;
  5 - We passed ComponentToPrint to TodoList component
&lt;/h3&gt;

&lt;p&gt;We wrap the To component of the List with a div that links with componentToPrint:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;componentToPrint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TextField&lt;/span&gt;
            &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IconButton&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handleAdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AddIcon&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/IconButton&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;IconButton&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handleDelete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DeleteIcon&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/IconButton&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#6-pass-componenttoprint-to-component-root-apptsx"&gt;
  &lt;/a&gt;
  6 - Pass componentToPrint to component Root (App.tsx)
&lt;/h3&gt;

&lt;p&gt;Coming to the last step we will pass the componentToprint on the parent component where it will manage the child components.&lt;/p&gt;

&lt;p&gt;We pass the componentToPrint function inside the App function and we will use the useRef hook to finish the relation of all the components that are part of the buttonPrint and we pass the componentToPrint as a parameter in their return:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;componentToPrint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TodoList&lt;/span&gt; &lt;span class="nx"&gt;componentToPrint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;componentToPrint&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ActionButton&lt;/span&gt; &lt;span class="nx"&gt;componentToPrint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;componentToPrint&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uo6pe8CH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93mfkjtk0ysjwia3qnyd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uo6pe8CH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/93mfkjtk0ysjwia3qnyd.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üîó GitHub: &lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/beatrizoliveiira"&gt;
        beatrizoliveiira
      &lt;/a&gt; / &lt;a href="https://github.com/beatrizoliveiira/todolist"&gt;
        todolist
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Todo List + react hooks + material ui
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/65451957/133009423-0dd2527e-96a3-4308-a402-7b513b4b7884.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RM7wPjwq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/65451957/133009423-0dd2527e-96a3-4308-a402-7b513b4b7884.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Todo-List&lt;/h2&gt;
&lt;p&gt;Well, the project that will be presented is very simple, but served to consolidate basic knowledge about React, I chose to use typescript, because the code becomes more readable and simple, but if you prefer you can use normal javascript.&lt;/p&gt;
&lt;h3&gt;
The project will use:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Typescript&lt;/li&gt;
&lt;li&gt;React Hooks&lt;/li&gt;
&lt;li&gt;Material UI&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Dev.to article with step by step&lt;/h3&gt;
&lt;p&gt;üîó &lt;a href="https://dev.to/beatrizoliveira/my-first-project-with-react-ts-hooks-3mji" rel="nofollow"&gt;https://dev.to/beatrizoliveira/my-first-project-with-react-ts-hooks-3mji&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Dev.to article adding new feat print button&lt;/h3&gt;
&lt;p&gt;üîó [ WIP ]&lt;/p&gt;
&lt;h3&gt;
New Feature &lt;a href="https://github.com/gregnb/react-to-print"&gt;react-to-print&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/65451957/133009303-393635bd-0c71-4de1-ac50-51ce0d53f75e.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IeFRDnxA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/65451957/133009303-393635bd-0c71-4de1-ac50-51ce0d53f75e.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Getting Started&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1-&lt;/strong&gt; Clone repository.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2-&lt;/strong&gt; Install dependecies.&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-s1"&gt;yarn&lt;/span&gt;
&lt;span class="pl-c"&gt;// or&lt;/span&gt;
&lt;span class="pl-s1"&gt;yarn&lt;/span&gt; &lt;span class="pl-s1"&gt;install&lt;/span&gt;
&lt;span class="pl-c"&gt;// and&lt;/span&gt;
&lt;span class="pl-s1"&gt;yarn&lt;/span&gt; &lt;span class="pl-s1"&gt;start&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Demo&lt;/h3&gt;
&lt;p&gt;üîó &lt;a href="https://todolist-git-master-beatrizoliveira250.vercel.app/" rel="nofollow"&gt;https://todolist-git-master-beatrizoliveira250.vercel.app/&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
CodeSanbox&lt;/h3&gt;
&lt;p&gt;üîó &lt;a href="https://codesandbox.io/s/react-to-print-f5tje?file=/src/App.tsx" rel="nofollow"&gt;https://codesandbox.io/s/react-to-print-f5tje?file=/src/App.tsx&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/beatrizoliveiira/todolist"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;üîó CodeSandbox: &lt;a href="https://codesandbox.io/s/react-to-print-f5tje?file=/src/App.tsx"&gt;https://codesandbox.io/s/react-to-print-f5tje?file=/src/App.tsx&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Devtools for Data Privacy ‚Äî Step 1: Privacy Taxonomy V1.0</title>
      <author>Cillian</author>
      <pubDate>Fri, 15 Oct 2021 15:38:55 +0000</pubDate>
      <link>https://dev.to/cillian/devtools-for-data-privacy-step-1-privacy-taxonomy-v10-2fpp</link>
      <guid>https://dev.to/cillian/devtools-for-data-privacy-step-1-privacy-taxonomy-v10-2fpp</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mbVziUVH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fx3j3s41h06k7r01d70s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mbVziUVH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fx3j3s41h06k7r01d70s.png" alt="Open Source Privacy Taxonomy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you‚Äôd like to jump straight to the &lt;a href="https://github.com/ethyca/privacy-taxonomy"&gt;Github repo&lt;/a&gt; or &lt;a href="https://ethyca.github.io/privacy-taxonomy/"&gt;documentation&lt;/a&gt; you can get these at:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ethyca/privacy-taxonomy"&gt;Privacy Taxonomy Github Repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ethyca.github.io/privacy-taxonomy"&gt;Github Pages Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Table of Contents&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#a-proposed-privacy-taxonomy"&gt;A Proposed Privacy Taxonomy&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#objective-of-a-privacy-taxonomy"&gt;Objective of a Privacy Taxonomy&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#accessing-amp-exploring-the-taxonomy"&gt;Accessing &amp;amp; Exploring the Taxonomy&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#privacy-taxonomy-research"&gt;Privacy Taxonomy Research&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#early-decisions"&gt;Early Decisions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#early-decisions"&gt;Concepts &amp;amp; Conventions of the Taxonomy&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#writing-conventions"&gt;Writing Conventions&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#taxonomy-structure"&gt;Taxonomy Structure&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#data-categories"&gt;Data Categories&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#data-uses"&gt;Data Uses&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#data-subjects"&gt;Data Subjects&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#data-qualifiers"&gt;Data Qualifiers&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Back in July, I articulated some of Ethyca‚Äôs driving ideas in a Stack Overflow feature: &lt;a href="https://stackoverflow.blog/2021/07/19/privacy-is-an-afterthought-in-the-software-lifecycle-that-needs-to-change/"&gt;Privacy is an afterthought in the software lifecycle. That needs to change&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To solve the problem I described, &lt;strong&gt;I believe the dev community needs to agree upon and build an open source definition language and set of tools for privacy&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The purpose of these tools is simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Allow anyone working on systems that process sensitive or risky data to consistently describe the types of data they‚Äôre handling and what that data is being used for.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create CI rules or policies for how data can be used and enforce those in the CI pipeline to prevent code that might create risks or misuse data from ever reaching production.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provide configurable tools to ensure respecting a user‚Äôs rights can be a feature of any system, such as data access, erasure, portability and retention.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create runtime rules or policies for fine-grained, semantic enforcement, thereby ensuring that only the necessary data is shared with systems or people to perform a process.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The two key benefits yielded are (1) ensuring that software systems more easily comply with complex data privacy regulations that are already forcing change on the tech community, and (2) ensuring that the products we build more naturally respect the rights of users.&lt;/p&gt;

&lt;p&gt;Over the last three years at Ethyca, we‚Äôve been working hard with technical design partners and engineering teams at some of the world‚Äôs biggest tech companies to understand the root cause of privacy challenges and build the tools necessary to solve these from the ground up. I‚Äôm excited that in the coming months we‚Äôll finally share the culmination of that work with the first public release of our open source privacy tools.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-proposed-privacy-taxonomy"&gt;
  &lt;/a&gt;
  A Proposed Privacy Taxonomy
&lt;/h2&gt;

&lt;p&gt;The foundation of those tools is a consistent understanding of types and uses of data, and so I want to share the first public release of our data taxonomy with you today.&lt;/p&gt;

&lt;p&gt;Its purpose is to create an agreed-upon definition of types and categories of personal data. This is a vital first step in any ontological design as, in order for any privacy standard to be interoperable, we must first achieve a shared definition of what types of data there are.&lt;/p&gt;

&lt;p&gt;I‚Äôm eager to share this and excited to get any feedback that might improve this standard for every developer. I believe what follows forms the foundation of any realistic solution to privacy engineering.&lt;/p&gt;

&lt;p&gt;The rest of this post breaks down our current thinking on what will be a freely available and extensible taxonomy: its components, hierarchy and syntax.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#objective-of-a-privacy-taxonomy"&gt;
  &lt;/a&gt;
  Objective of a Privacy Taxonomy
&lt;/h2&gt;

&lt;p&gt;As stated briefly above and in my other posts, if the dev community is going to solve privacy, we need to agree on a standard definition language on which to base our understanding of systems, the risk they pose and our ability to codify healthy policies into them ‚Äî ultimately, an ontology for privacy (more on that in a future post).&lt;/p&gt;

&lt;p&gt;The starting point for that is a definition of entities in a system: a taxonomy, the ability to describe what types of data we are handling and what we‚Äôre using them for. If we can make it easy for any dev to do this as part of their implementation process, we can start to bake privacy naturally into healthy software design and delivery processes.&lt;/p&gt;

&lt;p&gt;So a lot rides on getting the dev community to standardize their way of describing privacy data and privacy-related data processes in their systems. The taxonomy that follows is our attempt to publicly start that process, and we want to encourage as many developers as possible to contribute their views so that we can collectively build better technology.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessing-amp-exploring-the-taxonomy"&gt;
  &lt;/a&gt;
  Accessing &amp;amp; Exploring the Taxonomy
&lt;/h2&gt;

&lt;p&gt;This post marks the day we‚Äôre starting to release years of development work at Ethyca, as we had always intended, for the open source community. With that in mind, feel free to grab the &lt;a href="https://github.com/ethyca/privacy-taxonomy"&gt;taxonomy repo&lt;/a&gt; available below or use the &lt;a href="https://codepen.io/cilliank/embed/OJgexYz?theme-id=39778"&gt;codepen&lt;/a&gt; to explore the structure visually.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ethyca/privacy-taxonomy"&gt;https://github.com/ethyca/privacy-taxonomy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;or codepen here:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/cilliank/embed/OJgexYz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#privacy-taxonomy-research"&gt;
  &lt;/a&gt;
  Privacy Taxonomy Research
&lt;/h2&gt;

&lt;p&gt;Our goal at Ethyca was to conduct the detailed research necessary to provide the dev community with a first draft taxonomy robust enough to capture a comprehensive view of privacy, yet intuitive enough for any engineer to easily apply.&lt;/p&gt;

&lt;p&gt;To achieve this, we evaluated existing privacy ontologies and their taxonomies, such as &lt;a href="https://www.w3.org/community/dpvcg/wiki/PrOnto:_Privacy_Ontology_for_Legal_Reasoning"&gt;PrOnto&lt;/a&gt; and &lt;a href="https://www.researchgate.net/publication/351034289_COPri_v2_-_A_core_ontology_for_privacy_requirements"&gt;COPri v.2&lt;/a&gt;; international standards like &lt;a href="https://www.iso.org/standard/79573.html"&gt;ISO 19944&lt;/a&gt;; and contrasted with major data privacy regulations like the &lt;a href="https://ico.org.uk/for-organisations/guide-to-data-protection/guide-to-the-general-data-protection-regulation-gdpr/"&gt;GDPR&lt;/a&gt; (the ICO‚Äôs website is a helpful read for those curious), &lt;a href="https://ethyca.com/cpra-hub/"&gt;CCPA&lt;/a&gt;, &lt;a href="https://iapp.org/news/a/the-new-brazilian-general-data-protection-law-a-detailed-analysis/"&gt;LGPD&lt;/a&gt; and drafts of the &lt;a href="https://share.getcloudapp.com/4gulq7K2"&gt;Indian PDPB&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#early-decisions"&gt;
  &lt;/a&gt;
  Early Decisions
&lt;/h2&gt;

&lt;p&gt;Armed with this analysis and feedback from our technical design partners, we‚Äôve been refining this taxonomy for over a year. We feel that it‚Äôs an early but confident first step in capturing everything you will need to describe the privacy behaviors and data types of your tech stack.&lt;/p&gt;

&lt;p&gt;To achieve this, we made some early, opinionated and intentional decisions that I‚Äôd love feedback on. So the taxonomy repo you‚Äôll see here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Supports all of the data types and concepts necessary to describe a system for the GDPR, CCPA and LGPD.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Supports the standards of ISO 19944;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Is extensible, so you can add categories of data or data processing definitions to suit your business;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Is intended to be semantic and allow a natural understanding of any label for any user.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#concepts-amp-conventions-of-the-taxonomy"&gt;
  &lt;/a&gt;
  Concepts &amp;amp; Conventions of the Taxonomy
&lt;/h2&gt;

&lt;p&gt;Conceptually, the taxonomy is segmented in four groupings as follows:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-data-categories"&gt;
  &lt;/a&gt;
  1. Data Categories
&lt;/h2&gt;

&lt;p&gt;Data Categories are a comprehensive hierarchy of labels to represent types of data in your systems. They can be coarse definitions such as ‚ÄúUser Provided Data‚Äù or fine grained ones, such as ‚ÄúUser Provided Email Address‚Äù. We‚Äôll dig into this in a bit more detail shortly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-data-uses"&gt;
  &lt;/a&gt;
  2. Data Uses
&lt;/h2&gt;

&lt;p&gt;Data Uses are labels that describe how, or for what purposes, you are using the data. This branch of the taxonomy creates a structure for the most common uses of data in software applications. An example might be the use of data for payment processing or first party personalized advertising. These would both be data uses, ways in which your system uses data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-data-subject-categories"&gt;
  &lt;/a&gt;
  3. Data Subject Categories
&lt;/h2&gt;

&lt;p&gt;‚ÄúSubjects‚Äù is a slightly esoteric term, common in the privacy industry to represent the user type ‚Äî that is to say, the label applied to describe the provider or owner of the data. E.g., if you have an email address in your system, it might belong to an employee of the company, or to a customer. In this case, employees and customers are both ‚Äúsubjects‚Äù of the system. Under various privacy regulations, they are afforded rights over managing how their data is used and that may vary by the subject type, so the distinction between a patient in a medical records system and a customer in an e-commerce system is important.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-data-qualifiers"&gt;
  &lt;/a&gt;
  4. Data Qualifiers
&lt;/h2&gt;

&lt;p&gt;Data Qualifiers provide added context as to the degree of identification and therefore, potential risk using the data might pose relative to identifying an individual. A simple way to think about this is a spectrum: on one end is completely anonymous data, i.e. it is impossible to identify an individual from it, and on the other end is data that specifically identifies an individual. Along this spectrum are various labels that denote the degree of identification that a given data might provide.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-conventions"&gt;
  &lt;/a&gt;
  Writing Conventions
&lt;/h2&gt;

&lt;p&gt;We worked through various potential syntaxes to ensure it‚Äôs as easy as possible to read and write in plain English. Ultimately, dot notation lends itself most appropriately to writing statements that are concise and easy to understand. So the branch structure is dot notation and you‚Äôll see some of the end nodes are complex terms that use snake case for clarity.&lt;/p&gt;

&lt;p&gt;As such, if you were attempting to use the taxonomy of data categories to label, for example, an email address, the resulting hierarchical notation would look like:&lt;/p&gt;

&lt;p&gt;user.provided.identifiable.contact.email&lt;/p&gt;

&lt;p&gt;As you can see, it‚Äôs pretty easy to deduce from this that it‚Äôs user-provided data, it identifies them and it is considered contact information ‚Äî more specifically, an email address.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m61lIQXL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltbkxrpgc92rjh8y25xy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m61lIQXL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ltbkxrpgc92rjh8y25xy.png" alt="Notation Structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The design of these hierarchical structures is intended to allow any dev implementing this to type out the classification to a level of specificity that suits their needs. If I take the above example, my team and I might decide that we‚Äôre satisfied if we know it‚Äôs identifiable data about a user, which would look like:&lt;/p&gt;

&lt;p&gt;user.provided.identifiable&lt;/p&gt;

&lt;p&gt;Or labeling it with slightly more specificity as contact data:&lt;/p&gt;

&lt;p&gt;user.provided.identifiable.contact&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#taxonomy-structure"&gt;
  &lt;/a&gt;
  Taxonomy Structure
&lt;/h2&gt;

&lt;p&gt;As stated, the objective with releasing the taxonomy now is to discuss, debate and over time, iteratively improve the taxonomy so that it can cater to most common scenarios for devs and data teams in describing systems. Here we‚Äôll delve into the current structure and our rationale for their present state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-categories"&gt;
  &lt;/a&gt;
  Data Categories
&lt;/h2&gt;

&lt;p&gt;As you can see from the dot notation example above and the taxonomy visualizer tool in the header, Data Categories are classified into primitive categories with a hierarchy of branches and nodes that allow for degrees of precision when classifying data.&lt;/p&gt;

&lt;p&gt;Here‚Äôs a breakdown of that structure:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-categories-top-level"&gt;
  &lt;/a&gt;
  Data Categories ‚Äî Top Level
&lt;/h3&gt;

&lt;p&gt;There are three top-level categories:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;account&lt;/strong&gt;: Data related to a system account.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;system&lt;/strong&gt;: Data unique to, and under control of the system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;user&lt;/strong&gt;: Data related to the user of the system, either provided directly or derived based on their usage.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In defining these, we looked at the cross-labeling implications of data types such as an email address, which may be both account data and user data. This is a logical multi-label assignment so that you can manage this data for both purposes, or perhaps create exclusionary rules related to its use.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TLDR&lt;/strong&gt;: When considering and testing labeling extensively, we found that with three clear primitives you could elegantly construct a series of labels that covered the broadest possible data types while limiting the number of terms needed to do so.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-categories-second-level"&gt;
  &lt;/a&gt;
  Data Categories ‚Äî Second Level
&lt;/h3&gt;

&lt;p&gt;For each top-level node, there are multiple branches that provide richer context. You will see for the first two, account and system, these are limited, where the user node provides subclasses suitable to assist in detailed personal data management.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;account.contact&lt;/strong&gt;: Contact data related to a system account.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;account.payment&lt;/strong&gt;: Payment data related to a system account.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;system.authentication&lt;/strong&gt;: Data used to manage access to the system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;system.operations&lt;/strong&gt;: Data used for system operations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;user.derived&lt;/strong&gt;: Data derived from user provided data or as a result of user actions in the system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;user.provided&lt;/strong&gt;: Data provided or created directly by a user of the system.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Most of these are likely self-evident. Of note here are the derived and provided labels, as these respectively describe where data was derived by the system through observation or inference, versus explicitly provided by a user.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-categories-third-level"&gt;
  &lt;/a&gt;
  Data Categories ‚Äî Third Level
&lt;/h3&gt;

&lt;p&gt;As you can see, the hierarchy supports simple labels or, where necessary, very precise and fine-grained annotations. It‚Äôs easiest from here for you to dive in and play with the classifications yourself. However, we‚Äôll quickly look at level three of the user branch specifically, where you have branches from derived and provided:&lt;/p&gt;

&lt;p&gt;You can see this is split into identifiable and non-identifiable data:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;user.derived.identifiable&lt;/strong&gt;: Derived data that is linked to, or identifies a user.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;user.derived.nonidentifiable&lt;/strong&gt;: Non-user identifiable data derived related to a user as a result of user actions in the system.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And a similar split applies to provided, as shown below.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;user.provided.identifiable&lt;/strong&gt;: Data provided or created directly by a user that is linked to or identifies a user.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;user.provided.nonidentifiable&lt;/strong&gt;: Data provided or created directly by a user that is not identifiable.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#data-uses"&gt;
  &lt;/a&gt;
  Data Uses
&lt;/h2&gt;

&lt;p&gt;Similar to Data Categories, for Data Use, we‚Äôve attempted to capture the widest variety of data use cases with the briefest hierarchy we can. In addition to this, we‚Äôve captured all of the use cases described by ISO 19944 and GDPR to ensure that a single taxonomy can describe data uses across data privacy frameworks.&lt;/p&gt;

&lt;p&gt;You‚Äôll see if you use the taxonomy explorer in the header that this currently breaks down as follows:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-uses-top-level"&gt;
  &lt;/a&gt;
  Data Uses ‚Äî Top Level
&lt;/h3&gt;

&lt;p&gt;At present there are seven top-level nodes to the use categories taxonomy branch. We think this still needs work and are continuing to optimize. However, today they are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;provide&lt;/strong&gt;: Provide, in the context of providing a product or service.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;improve&lt;/strong&gt;: Improve, similarly relating to the product or service.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;personalize&lt;/strong&gt;: Personalization of the product or service.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;advertising&lt;/strong&gt;: Marketing, Advertising or Promotion.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;third_party_sharing&lt;/strong&gt;: Sharing data with a third party vendor or processor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;collect&lt;/strong&gt;: Collect data with no currently specified use (you shouldn‚Äôt do this but it seems necessary to encompass some poor, non-privacy appropriate, legacy processes).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;train_ai_system&lt;/strong&gt;: Train an AI System.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#data-uses-second-level"&gt;
  &lt;/a&gt;
  Data Uses ‚Äî Second Level
&lt;/h3&gt;

&lt;p&gt;From here, it‚Äôs likely quicker to explore the second level data use categories yourself. However, it‚Äôs worth noting that we‚Äôve attempted to capture the most common constructs that create privacy risks. For example:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;advertising.third_party.personalized&lt;/strong&gt;: Specifies data received from a third party for the purpose of personalization of advertising to a user or group of users.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;third_party_sharing.personalized_advertising&lt;/strong&gt;: Sharing of data collected by the system with a third party for their use in personalized advertising.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These two examples show really important distinctions of use. The first is where your product is performing personalized marketing/advertising by receiving and processing data from a third party. Whereas the second example declares that your system is sharing data with a third party for their use in advertising ‚Äî very different uses and privacy implications!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-uses-final-word"&gt;
  &lt;/a&gt;
  Data Uses ‚Äî Final Word
&lt;/h3&gt;

&lt;p&gt;As a final word on data use categories, I stated at the top of this post that we‚Äôve designed this with extensibility in mind, and data uses are a really effective example of this. Every business or software system is different and as such, you‚Äôre likely to have different or industry specific uses for your system.&lt;/p&gt;

&lt;p&gt;The objective therefore with data uses is to create a simple framework to generate a clear hierarchy of classifications, so that you can quickly extend this for your use, whether it‚Äôs medical data use or some other sensitive process.&lt;/p&gt;

&lt;p&gt;Finally, if you look at the repository history, you‚Äôll see we‚Äôve been iterating on structure from snake_case to dot notation and also hierarchy of terms. I‚Äôm hopeful that we‚Äôll continue to do this constantly with feedback from devs implementing this to ensure it satisfies real-world use cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-subjects"&gt;
  &lt;/a&gt;
  Data Subjects
&lt;/h2&gt;

&lt;p&gt;This is likely the easiest group of the taxonomy to understand. At present it‚Äôs a flat structure with no hierarchy and represents the various types of users (aka subjects) that may be participants in your system. These could be users, customers, employees, patients, voters, etc.&lt;/p&gt;

&lt;p&gt;You might ask why we‚Äôve done this. The benefit of this specificity is future-proofing. As privacy regulations evolve we expect that certain groups of users‚Äô data will be managed differently. The ability to assign one or multiple user types to your data assures that in future you can build policies and enforcements around data for any business or legal requirement. So you might decide that today you treat employee and customer data the same way, but you will have the flexibility to change retention policies on employee data in the future. As with everything in the taxonomy, you can extend this to support specific business cases. This flexibility means that a thoughtful system need not be fragile, rendered unworkable as soon as compliance requirements evolve. To the contrary: the ontology enables the system to be nimble, a vital quality in a landscape as dynamic as modern data and privacy compliance needs.&lt;/p&gt;

&lt;p&gt;Subject categories are explicit in their meaning today, so:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;anonymous_user&lt;/strong&gt;: An individual who is truly unknown/anonymous to the system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;citizen_voter&lt;/strong&gt;: An individual who is a citizen of a nation or state and may be a voter in a state sponsored voting system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;commuter&lt;/strong&gt;: An individual in transit on any means of transportation where their location may be monitored.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;consultant&lt;/strong&gt;: An individual external service provider to the organization..&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;customer&lt;/strong&gt;: An individual who has purchased products or services from the organization.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;employee&lt;/strong&gt;: An individual who is an employee of the organization.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;job_applicant&lt;/strong&gt;: An individual who is in the job application process of an organization, past or present.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;next_of_kin&lt;/strong&gt;: An individual identified as a legal point of contact for another category of individual in the system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;passenger&lt;/strong&gt;: An individual traveling on transportation provided by the organization.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;patient&lt;/strong&gt;: An individual identified for the purpose of medical or health procedures.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;prospect&lt;/strong&gt;: An individual identified for the purpose of sales and marketing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;shareholder&lt;/strong&gt;: An individual identified as an owner or shareholder of an organization.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;supplier_vendor&lt;/strong&gt;: An individual or organization providing goods or services to the organization.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;trainee&lt;/strong&gt;: An individual receiving training or tutoring.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;visitor&lt;/strong&gt;: An individual visiting a location of an organization.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#data-qualifiers"&gt;
  &lt;/a&gt;
  Data Qualifiers
&lt;/h2&gt;

&lt;p&gt;Data Qualifiers describe the degree of identification of the given data. Think of this as a spectrum: on one end is completely anonymous data, i.e. it is impossible to identify an individual from it, and on the other end is data that specifically identifies an individual.&lt;/p&gt;

&lt;p&gt;Along this spectrum are labels that describe the degree of identification that a given data might provide, such as:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;identified&lt;/strong&gt;: Data that directly identifies an individual.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;pseudonymized&lt;/strong&gt;: Data which has been de-identified (by removing/replacing all identifiers) but used with other data may re-identify an individual.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;unlinked_pseudonymized&lt;/strong&gt;: Data which has been de-identified (by removing/replacing all identifiers) where linkages have also been replaced/broken such that the individual cannot be re-identified.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;anonymized&lt;/strong&gt;: Data which has been unlinked and for which attributes have been modified to assure confidence that the person cannot be re-identified with this data or in combination with other data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;aggregated&lt;/strong&gt;: Statistical data that does not contain individual data and/or has been combined with sufficient data from multiple persons that no individual is identifiable.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this post I‚Äôve proposed a first draft of a privacy taxonomy, one that underpins much of the thinking we do at Ethyca. What we‚Äôre releasing today is just an up-down taxonomy. However, this precedes an entire ontology that provides a simple grammar to describe complex data flows and privacy-related behaviors in a software system. This has been at the heart of our work for nearly three years now.&lt;/p&gt;

&lt;p&gt;I‚Äôm excited to finally start sharing that work publicly with the community, and I encourage feedback, debate and changes. By having these conversations, we can build a better standard and the tools necessary to make this easy for every dev to implement.&lt;/p&gt;

&lt;p&gt;Over the coming weeks we‚Äôll be releasing more details of our work in this space and the benefits created by these tools. We welcome your feedback, participation and contribution.&lt;/p&gt;

&lt;p&gt;If you‚Äôd like to chat about anything here you can get me on Twitter, &lt;a href="https://twitter.com/cillian"&gt;@cillian&lt;/a&gt;, or feel free to comment here.&lt;/p&gt;

</description>
      <category>dataprivacy</category>
      <category>opensource</category>
      <category>showdev</category>
    </item>
  </channel>
</rss>
