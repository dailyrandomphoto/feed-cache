<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Lab 9 - GitHub Actions Workflow</title>
      <author>Kevan Y</author>
      <pubDate>Thu, 18 Nov 2021 20:14:29 +0000</pubDate>
      <link>https://dev.to/pandanoxes/lab-9-github-actions-workflow-joi</link>
      <guid>https://dev.to/pandanoxes/lab-9-github-actions-workflow-joi</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;For my ninth lab, I have to set up GitHub Action for my text ssg project. Then pick another student that has GitHub Actions setup and create a PR to his repo.&lt;br&gt;
In my previous I had a bit of experience with GitHub Action, I had a chance to set up with my mentor a GitHub Action to enable e2e testing with Cypress on the new build application when a PR is created, to have continuous integration. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setup-github-action"&gt;
  &lt;/a&gt;
  Setup GitHub Action
&lt;/h2&gt;

&lt;p&gt;First of all, I create a folder called &lt;code&gt;.github/workflows&lt;/code&gt;, this folder contains the file for setup for GitHub Action.&lt;/p&gt;

&lt;p&gt;I created a file called &lt;code&gt;ci_workflow.yml&lt;/code&gt; and put&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;CI&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;matrix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;16.x&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Use Node.js ${{ matrix.node-version }}&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.node-version }}&lt;/span&gt;
        &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;npm'&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm install and test&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;npm install&lt;/span&gt;
        &lt;span class="s"&gt;npm run test-silent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make it simple, this file means, on push to main or create PR to be pushed to main will run this workflow.&lt;br&gt;
The job of this workflow is to run a node-version 16.x on a ubuntu-latest system, and install all my application dependencies and run a test. &lt;br&gt;
If test fails it will return -1, if pass it will return 0.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LEbzrw8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gyoiz0nj3n9brggwzs6m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LEbzrw8V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gyoiz0nj3n9brggwzs6m.png" alt="Image description" width="880" height="194"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-more-test-cases-to-another-student-repo"&gt;
  &lt;/a&gt;
  Add more test cases to another student repo
&lt;/h2&gt;

&lt;p&gt;I pick Andre &lt;a href="https://github.com/AndreWillomitzer/textToHTML_V2"&gt;repo&lt;/a&gt;, I created an issue stating, to separate generate HTML into a function, then add test case for that function.&lt;br&gt;
After finishing my fix. I created a PR, I see that the workflow Andre setup is working correctly.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ABDhlKJc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0cqovdmoth1rtn2q60px.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ABDhlKJc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0cqovdmoth1rtn2q60px.png" alt="Image description" width="880" height="549"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;GitHub action is a powerful tool, it enables developers to shift some manual work into automation. Yet I still have a lot to learn of GitHub Actions.&lt;/p&gt;

</description>
      <category>opensource</category>
    </item>
    <item>
      <title>What does "functional programming" mean to you?</title>
      <author>Andrew (he/him)</author>
      <pubDate>Thu, 18 Nov 2021 20:11:55 +0000</pubDate>
      <link>https://dev.to/awwsmm/what-does-functional-programming-mean-to-you-knh</link>
      <guid>https://dev.to/awwsmm/what-does-functional-programming-mean-to-you-knh</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://www.pexels.com/@magda-ehlers-pexels"&gt;Magda Ehlers&lt;/a&gt; from Pexels&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What crosses your mind when you hear the phrase "functional programming"? Some people imagine arcane, esoteric code, built around functors and monads and applicatives, but I think of&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;immutability and referential transparency&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Immutability just means you create new objects instead of &lt;em&gt;mutating&lt;/em&gt; (changing) old ones. This means every variable is effectively &lt;code&gt;final&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; or whatever your language calls it. Instead of&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Dog&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Dog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;rename&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;newName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newName&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;br&gt;your &lt;code&gt;rename&lt;/code&gt;d &lt;code&gt;Dog&lt;/code&gt; would be a new object, Ã  la&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Dog&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Dog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Dog&lt;/span&gt; &lt;span class="nf"&gt;rename&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;newName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Dog&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;br&gt;Immutability makes it easy to reason about objects (&lt;code&gt;Dog doug = new Dog("doug")&lt;/code&gt; will always have &lt;code&gt;name.equals("doug")&lt;/code&gt;), but it can make your program less efficient, both in terms of memory usage and in terms of performance -- always creating new objects takes more time and space than reusing existing ones.&lt;/p&gt;

&lt;p&gt;Referential transparency is a closely-related concept. In a nutshell, what it means is that -- wherever you have the value &lt;code&gt;x&lt;/code&gt; in your code, you can replace it with whatever you initially declared &lt;code&gt;x&lt;/code&gt; to be. So if &lt;code&gt;const x = 10&lt;/code&gt;, then &lt;code&gt;x&lt;/code&gt; &lt;em&gt;always&lt;/em&gt; equals &lt;code&gt;10&lt;/code&gt;. You can replace every instance of &lt;code&gt;x&lt;/code&gt; with the literal &lt;code&gt;10&lt;/code&gt; and your program should do the exact same thing. (This does not work, of course, if your objects and variables are mutable and you can do something like &lt;code&gt;x = x + 1&lt;/code&gt;!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;higher-order functions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In many languages, functions and objects are separate things: you can pass objects as arguments to functions, and functions can be scoped as object &lt;em&gt;methods&lt;/em&gt;. But languages which encourage a functional style will allow you to pass functions as arguments to functions, like in Scala&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt;&lt;span class="o"&gt;)*)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;fs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;foreach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;br&gt;The above &lt;code&gt;process&lt;/code&gt; method takes a &lt;code&gt;String&lt;/code&gt; argument &lt;code&gt;text&lt;/code&gt; and a &lt;code&gt;(String =&amp;gt; Unit)*&lt;/code&gt; argument &lt;code&gt;fs&lt;/code&gt; -- that is, zero or more functions which themselves take a &lt;code&gt;String&lt;/code&gt; and return &lt;code&gt;Unit&lt;/code&gt;, Scala's equivalent of &lt;code&gt;void&lt;/code&gt;. Once you get used to working with higher-order functions, their utility is immense&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Console._&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"this does nothing"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"print to stdout"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;println&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"print to stderr"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;println&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"print to both"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;println&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;println&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"etc"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;println&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;println&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;myLogFunc&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;br&gt;Adding a new output device is as easy as passing a new function to &lt;code&gt;process&lt;/code&gt;. Treating functions as "first-class citizens" of a language opens a huge array of new possibilities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;pure functions (side-effect-free functions)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A "pure" function is a function without "side effects". What does that mean? In a nutshell, it means that a function should behave similar to a &lt;em&gt;mathematical&lt;/em&gt; function (think &lt;code&gt;y = f(x)&lt;/code&gt;) -- it should take some value, &lt;code&gt;x&lt;/code&gt;, and &lt;em&gt;return&lt;/em&gt; or &lt;em&gt;become&lt;/em&gt; some other value, &lt;code&gt;y&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Mathematical functions don't write to log files or print text to a terminal or change the value of other variables on the page -- they turn &lt;code&gt;x&lt;/code&gt; into &lt;code&gt;y&lt;/code&gt;, that's it.&lt;/p&gt;

&lt;p&gt;Of course, computer programs are kind of useless if they can't take input from a user, or read a config file, or communicate with external resources. Input / Output, or IO, is required to make programs "interactive". Functions which perform output (typically returning no value) typically return a &lt;code&gt;void&lt;/code&gt; or &lt;code&gt;Unit&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; value of some kind. Haskell, for instance, uses its &lt;a href="https://wiki.haskell.org/Introduction_to_IO"&gt;IO monad&lt;/a&gt; for input and output.&lt;/p&gt;

&lt;p&gt;We can't eliminate side-effecting functions, but we should try to make it as clear as possible what the intent of our functions are. If you want to calculate a value, and log it to a file, &lt;a href="https://en.wikipedia.org/wiki/Separation_of_concerns"&gt;separate those concerns&lt;/a&gt; into two separate routines, if possible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;declarative programming and lambdas&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;"Functional programming" also makes me think of a particular &lt;em&gt;style&lt;/em&gt; of programming: iterating over data structures (like arrays, dictionaries, maps, sets, etc.) using &lt;em&gt;declarative&lt;/em&gt;-style functions like &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;foreach&lt;/code&gt;, and so on.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Imperative&lt;/em&gt; programming is (in a sense) the opposite of declarative programming. An imperative program declares exactly what is to be done:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ii&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;ii&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;br&gt;A declarative program specifies &lt;em&gt;what&lt;/em&gt; is to be done, and the language itself figures out how to do that. For example, in a declarative program, we might rewrite the above as&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nv"&gt;array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;foreach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// lambda&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;br&gt;...or&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;sum&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;fold&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;partialSum&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;partialSum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;br&gt;...or even just &lt;code&gt;array.sum&lt;/code&gt;. Functional programming also tends to make heavy use of "lambda" functions, like the one used above, &lt;code&gt;x =&amp;gt; sum += x&lt;/code&gt;. This is an anonymous function (it doesn't have a name like &lt;code&gt;addToSum&lt;/code&gt;) which takes a value &lt;code&gt;x&lt;/code&gt; and adds it to the value &lt;code&gt;sum&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Declarative programming, and lambda functions, are hallmarks of functional programming, in my view.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;stream processing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All of the above leads me to routinely return to the (not at all novel) metaphor of plumbing for functional programming. You put data in one end of a "processing pipeline", like water entering a pipe. It may be split into multiple streams, sent down different paths, siphoned off into some database, or dumped ultimately into some data lake, but the data moves from producers / sources (input), through flows / transformers / conductors, and into consumers / sinks.&lt;/p&gt;

&lt;p&gt;Stream processing is quite similar to reactive programming, which has a whole &lt;a href="https://www.reactivemanifesto.org/"&gt;manifesto&lt;/a&gt; and is implemented in several languages (here's one for &lt;a href="https://doc.akka.io/docs/akka/current/general/stream/stream-design.html"&gt;Scala&lt;/a&gt;, and another for &lt;a href="https://shiny.rstudio.com/articles/reactivity-overview.html"&gt;R&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Remember:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"The Internet is... a series of tubes."&lt;/em&gt;&lt;br&gt;
-- U.S. Senator Ted Stevens &lt;a href="https://en.wikipedia.org/wiki/Series_of_tubes#Partial_text_of_Stevens's_comments"&gt;[source]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Functional_programming"&gt;Wikipedia&lt;/a&gt; also mentions lazy evaluation and recursion, but these don't immediately jump into my mind as "pillars" of functional programming.&lt;/p&gt;

&lt;p&gt;How about you? What comes to &lt;em&gt;your&lt;/em&gt; mind when someone says "functional programming"?&lt;/p&gt;

</description>
      <category>functional</category>
      <category>haskell</category>
      <category>scala</category>
      <category>erlang</category>
    </item>
    <item>
      <title>Definitive Guide for CSS Selectors</title>
      <author>Aravind Sanjeev</author>
      <pubDate>Thu, 18 Nov 2021 19:54:26 +0000</pubDate>
      <link>https://dev.to/aravsanj/definitive-guide-for-css-selectors-368n</link>
      <guid>https://dev.to/aravsanj/definitive-guide-for-css-selectors-368n</guid>
      <description>&lt;p&gt;A selector in CSS does what its name says it would do - select stuff. To apply CSS to an element or a group of elements, we need to select them first. However, things aren't that easy as selection process can become complicated as the code grows. CSS offers a multitude of ways to deal with the issue. In this post, I aim to cover everything you need to know about CSS selectors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-css-rule"&gt;
  &lt;/a&gt;
  1. CSS Rule
&lt;/h2&gt;

&lt;p&gt;When CSS is applied to an element, it is called a CSS rule. Because it's a rule that the element has to follow. Every CSS rule must consist of at least 4 parts - selector, declaration, property, and value.&lt;/p&gt;

&lt;p&gt;The below image shows the anatomy of a CSS rule.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pHXxjT0R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ggqhcil9hlrq0bzgen9w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pHXxjT0R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ggqhcil9hlrq0bzgen9w.png" alt="CSS Anatomy" width="700" height="489"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, it contains all the 4 parts - selector, declaration, property, and value. We will discuss each in the coming sections.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-selectors"&gt;
  &lt;/a&gt;
  1.1 Selectors
&lt;/h3&gt;

&lt;p&gt;A selector is used to select an element or a group of elements to apply CSS rules. In the above example, we used a &lt;em&gt;class selector&lt;/em&gt;. It selects every element having the class &lt;code&gt;container&lt;/code&gt;. Since CSS selectors are the main subject of this post, we will take a deep dive into understanding them later.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-declaration"&gt;
  &lt;/a&gt;
  1.2 Declaration
&lt;/h3&gt;

&lt;p&gt;A declaration is the rule the selected element has to obey. In the above example, we are telling element containing class &lt;code&gt;container&lt;/code&gt; that it can only have a maximum width of 1000px.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-property"&gt;
  &lt;/a&gt;
  1.3 Property
&lt;/h3&gt;

&lt;p&gt;While CSS selectors determine which element to target, a CSS property determines what to target in that element. The &lt;code&gt;max-width&lt;/code&gt; property shown above determines the maximum width of that element. CSS has well over 500 properties. &lt;a href="https://www.w3.org/Style/CSS/all-properties.en.html"&gt;Here&lt;/a&gt; is a list.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14-value"&gt;
  &lt;/a&gt;
  1.4 Value
&lt;/h3&gt;

&lt;p&gt;Value is the most obvious to explain. In the above example, the value is 1000px. The type of value depends on the property being used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-simple-selectors"&gt;
  &lt;/a&gt;
  2. Simple selectors
&lt;/h2&gt;

&lt;p&gt;Simple selectors are - well, simple. They are easy to use and the target is obvious. Simple selectors include universal selector, type selector, class selector, and the ID selector.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#21-universal-selector"&gt;
  &lt;/a&gt;
  2.1 Universal selector
&lt;/h3&gt;

&lt;p&gt;A universal selector is used to select every element. We can use universal selector to apply rules to every element on the page. Asterisk &lt;code&gt;*&lt;/code&gt; is the universal selector in CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, text of every element is applied the color red.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#22-type-selector"&gt;
  &lt;/a&gt;
  2.2 Type selector
&lt;/h3&gt;

&lt;p&gt;A type selector is used to select all elements of the same type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, every pargraph element is selected and font size 20 px is applied.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#23-class-selector"&gt;
  &lt;/a&gt;
  2.3 Class selector
&lt;/h3&gt;

&lt;p&gt;A class selector selects all elements having a particular class. We already saw the class selector above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;max-wdith&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1000px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember, multiple elements can have the same class. So the class selector is the ideal way to apply CSS rules to a group of elements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#24-id-selector"&gt;
  &lt;/a&gt;
  2.4 ID selector
&lt;/h3&gt;

&lt;p&gt;An ID selector is used to select an element by ID.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above CSS rule is applied to an element having ID &lt;code&gt;content&lt;/code&gt;. We typically don't use IDs for CSS because only a single element can have an ID. Normally IDs are reserved for DOM manipulation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-pseudo-selectors"&gt;
  &lt;/a&gt;
  3. Pseudo selectors
&lt;/h2&gt;

&lt;p&gt;There are two types of pseudo selectors in CSS, pseudo-class selector and pseudo-element selector.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#31-pseudo-classes"&gt;
  &lt;/a&gt;
  3.1 Pseudo classes
&lt;/h3&gt;

&lt;p&gt;A pseudo-class represents a particular state of an HTML element. An example would be a mouse hover. We can target that using &lt;code&gt;:hover&lt;/code&gt; pseudo class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;underline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above CSS will make text of every anchor &lt;code&gt;a&lt;/code&gt; element show underline while being hovered. A pseudo class is target by using the &lt;code&gt;:&lt;/code&gt; symbol followed by the class name.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#32-pseudo-elements"&gt;
  &lt;/a&gt;
  3.2 Pseudo elements
&lt;/h3&gt;

&lt;p&gt;A pseudo-element is used to style a part of an element. For example, the first letter of a pragraph.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="nd"&gt;::first-letter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above CSS makes first letter of every paragraph red. A pseudo-element is targeted using the &lt;code&gt;::&lt;/code&gt; symbol followed by the element name.&lt;/p&gt;

&lt;p&gt;Originally both pseudo classes and elements had &lt;code&gt;:&lt;/code&gt; symbol. However since CSS3, pseudo elements starts with &lt;code&gt;::&lt;/code&gt;. To ensure backward compatibility, old syntax is still working for pseudo elements introduced before CSS3.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-selections-using-attribute"&gt;
  &lt;/a&gt;
  4. Selections using attribute
&lt;/h2&gt;

&lt;p&gt;We can also select elements using specifc HTML attributes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;content-type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;'main'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above CSS will target elements having attribute &lt;code&gt;content-type&lt;/code&gt; with value &lt;code&gt;main&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;content-type=&lt;/span&gt;&lt;span class="s"&gt;"main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This is a paragraph&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can drop the value part and target all the elements having a specfic attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;content-type&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every element with attribute &lt;code&gt;content-type&lt;/code&gt; will now be selected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-complex-selectors"&gt;
  &lt;/a&gt;
  5. Complex selectors
&lt;/h2&gt;

&lt;p&gt;Complex selectors are used for more specific targets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#51-concept-of-combinators"&gt;
  &lt;/a&gt;
  5.1 Concept of combinators
&lt;/h3&gt;

&lt;p&gt;A combinator is used to combine selections. For example, simple space is used to select every child of a parent.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt; &lt;span class="nt"&gt;article&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;code&gt;article&lt;/code&gt; is the parent and &lt;code&gt;p&lt;/code&gt; is the child. Every paragraph element that comes under an &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; tag will now have grey text. Hence space is called a &lt;em&gt;descendant combinator&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Note: Combinators only work from parent to child. It can never work vice versa. It's called &lt;em&gt;cascading&lt;/em&gt; style sheets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#52-descendant-combinator"&gt;
  &lt;/a&gt;
  5.2 Descendant combinator
&lt;/h3&gt;

&lt;p&gt;You already saw the descedant combinator and chances are you've already used them. We can combine multiple descedant combinator operations to acheive specificity.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.main&lt;/span&gt; &lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="nt"&gt;article&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here paragraphs inside &lt;code&gt;article&lt;/code&gt; and &lt;code&gt;section&lt;/code&gt; tag inside the &lt;code&gt;main&lt;/code&gt; class will have blue color. Every other pargraphs will have red color. This concept of specificity is ingrained into CSS. It is very important to be as specific about your target to future-proof the code. You don't want a random element to have a weird styling and try to find the problem in a large style sheet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#53-next-sibling-combinator"&gt;
  &lt;/a&gt;
  5.3 Next sibling combinator
&lt;/h3&gt;

&lt;p&gt;The next sibling combinator is used to select a element that comes after a specific element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, any &lt;code&gt;section&lt;/code&gt; element that comes after the &lt;code&gt;img&lt;/code&gt; tag is selected and 20px margin is added.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#54-general-sibling-combinator"&gt;
  &lt;/a&gt;
  5.4 General sibling combinator
&lt;/h3&gt;

&lt;p&gt;A general sibling combinator will select all elements that comes after a specific element&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.thumb&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, all image tags that comes after the element containing class &lt;code&gt;.thumb&lt;/code&gt; will be selected.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#55-child-combinator"&gt;
  &lt;/a&gt;
  5.5 Child combinator
&lt;/h3&gt;

&lt;p&gt;Child combinator selects all elements that are children of a specific element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above CSS, all paragraph elements that comes under the div element is selected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-grouping-selectors"&gt;
  &lt;/a&gt;
  6. Grouping selectors
&lt;/h2&gt;

&lt;p&gt;We can easily group selectors using commas.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.content&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;#id&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/* css rules */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we can select all elements that need the same CSS and only apply them once.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The JavaScript event loop execution order, summarized in a simple manner</title>
      <author>Leonard Ginters</author>
      <pubDate>Thu, 18 Nov 2021 19:50:08 +0000</pubDate>
      <link>https://dev.to/leonard/the-javascript-event-loop-execution-order-simplified-5ah1</link>
      <guid>https://dev.to/leonard/the-javascript-event-loop-execution-order-simplified-5ah1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-simplified-order"&gt;
  &lt;/a&gt;
  The simplified order
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Everything in sync&lt;/li&gt;
&lt;li&gt;Microtask queue&lt;/li&gt;
&lt;li&gt;Task queue&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#tasks"&gt;
  &lt;/a&gt;
  Tasks
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;setTimeout&lt;/code&gt;, &lt;code&gt;setInterval&lt;/code&gt;, &lt;code&gt;setImmediate&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#microtasks"&gt;
  &lt;/a&gt;
  Microtasks
&lt;/h3&gt;

&lt;p&gt;Promises, &lt;code&gt;queueMicrotask&lt;/code&gt;, &lt;code&gt;MutationObserver&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Schedules a new microtask&lt;/span&gt;
&lt;span class="nx"&gt;queueMicrotask&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;microtask&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// Schedules a new task&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;task&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Output order: main, microtask, task&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Please note that this describes a really, really simplified perfect-world case. If you would like to find out more about this topic, I can highly recommend &lt;a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"&gt;Jake Archibald's article&lt;/a&gt; on this topic.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>No More Contacting Employees Off Hours in Portugal, Trojan Source Attacks, Another Apple Settlement, &amp; more on DevNews!</title>
      <author>dev.to staff</author>
      <pubDate>Thu, 18 Nov 2021 19:48:21 +0000</pubDate>
      <link>https://dev.to/devteam/no-more-contacting-employees-off-hours-in-portugal-trojan-source-attacks-another-apple-settlement-more-on-devnews-59i1</link>
      <guid>https://dev.to/devteam/no-more-contacting-employees-off-hours-in-portugal-trojan-source-attacks-another-apple-settlement-more-on-devnews-59i1</guid>
      <description>&lt;p&gt;The DevNews editorial team is back for this week's episode of our show where we investigate and discuss the latest and most important software developer news stories&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devnews/s6-e4-trojan-source-attacks-features-in-net-6-another-apple-settlement-and-no-more-contacting-employees-off-hours-at-least-in-portugal"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S6:E4 - Trojan Source Attacks, Features in .NET 6, Another Apple Settlement, and No More Contacting Employees Off Hours...At Least in Portugal&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devnews"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevNews
      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s6-e4-trojan-source-attacks-features-in-net-6-another-apple-settlement-and-no-more-contacting-employees-off-hours-at-least-in-portugal" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s6-e4-trojan-source-attacks-features-in-net-6-another-apple-settlement-and-no-more-contacting-employees-off-hours-at-least-in-portugal" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s6-e4-trojan-source-attacks-features-in-net-6-another-apple-settlement-and-no-more-contacting-employees-off-hours-at-least-in-portugal" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s6-e4-trojan-source-attacks-features-in-net-6-another-apple-settlement-and-no-more-contacting-employees-off-hours-at-least-in-portugal" alt="DevNews" src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJPvwj98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XOSCOlKI--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s6-e4-trojan-source-attacks-features-in-net-6-another-apple-settlement-and-no-more-contacting-employees-off-hours-at-least-in-portugal"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devnews/s6-e4-trojan-source-attacks-features-in-net-6-another-apple-settlement-and-no-more-contacting-employees-off-hours-at-least-in-portugal"&gt;
      &lt;img id="episode-profile-image" alt="S6:E4 - Trojan Source Attacks, Features in .NET 6, Another Apple Settlement, and No More Contacting Employees Off Hours...At Least in Portugal" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--84VpOv6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3GWkSFQs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;Ã&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Hosts:&lt;/strong&gt; &lt;a class="mentioned-user" href="https://dev.to/saronyitbarek"&gt;@saronyitbarek&lt;/a&gt;
 &amp;amp; &lt;a class="mentioned-user" href="https://dev.to/joshpuetz"&gt;@joshpuetz&lt;/a&gt;
 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Guests:&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://twitter.com/@_NickBoucher"&gt;Nicholas Boucher&lt;/a&gt; is a PhD Candidate at the University of Cambridge and a graduate of Harvard University. He performs research on the security of systems ranging from machine learning pipelines to compilers. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/captainsafia"&gt;Safia Abdalla&lt;/a&gt; helps build open source web frameworks at Microsoft and helps build the Nteract Solutions universe.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag__user ltag__user__id__37984"&gt;
  
    .ltag__user__id__37984 .follow-action-button {
      background-color: #3498DB !important;
      color: #FFFFFF !important;
      border-color: #3498DB !important;
    }
  
    &lt;a href="/captainsafia" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SdWxbhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ZuYLEVYS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/37984/46b8bf0f-9fb1-4e3b-bd68-3590ea5737b4.jpeg" alt="captainsafia image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/captainsafia"&gt;Safia Abdalla&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/captainsafia"&gt;I make open source at @nteractio, make software at 
@Microsoft, and write books and blogs. Dream big and follow through even bigger.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;In this episode, we talk about a new Apple settlement and a big win for workers in Portugal. Then we speak with Nicholas Boucher, PhD candidate at the University of Cambridge about new research into something they are calling a âTrojan Sourceâ attack. And finally, we chat with Safia Abdalla, senior software engineer at Microsoft about new updates and features in the recently released .NET 6.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devnews"&gt;follow DevNews&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; &lt;em&gt;â or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Quick Listening Links&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/devnews/id1525581923"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/1YVbyTFMCLLuORSISOjxlK"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cDovL2ZlZWRzLmNvZGVuZXdiaWUub3JnL2Rldm5ld3NfcG9kY2FzdC54bWw/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZuZXdzLzQ0?sa=X&amp;amp;ved=0CAQQkfYCahcKEwjYtvSU1qL0AhUAAAAAHQAAAAAQCg"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.stitcher.com/show/devnews/episode/s6-e4-trojan-source-attacks-features-in-net-6-another-apple-settlement-and-no-more-contacting-employees-off-hours-at-least-in-portugal-88390107"&gt;Stitcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devnews/s6e4-trojan-source-attacks-cA3UO4y-Tgj/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevNews-p1352512/"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpods.herokuapp.com/podcasts/devnews/episodes/231"&gt;DEV Pods website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#acknowledgements"&gt;
  &lt;/a&gt;
  &lt;em&gt;Acknowledgements&lt;/em&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;Our Season 6 sponsors: &lt;a href="https://www.hackatom.org/"&gt;Cosmos HackAtom&lt;/a&gt; &amp;amp; &lt;a href="https://www.microsoft.com/en-us/dev-community/Event/Register?eventId=DevNewsPodcast_FI2YKJLHvJdZ&amp;amp;ocid=aid3038582"&gt;Microsoft Azure&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We hope you enjoy the show this week! ð° &lt;/p&gt;

</description>
      <category>news</category>
      <category>podcast</category>
    </item>
    <item>
      <title>Highlight the Youtube URL</title>
      <author>Kien Nguyen Chi</author>
      <pubDate>Thu, 18 Nov 2021 19:44:13 +0000</pubDate>
      <link>https://dev.to/kiennguyenchi/highlight-the-link-for-react-app-a1c</link>
      <guid>https://dev.to/kiennguyenchi/highlight-the-link-for-react-app-a1c</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;This week, I work on an issue on a really large project. It is a JavaScript platform that implement a website for developers to publish blogs related to web development. You can take a look at the &lt;a href="https://github.com/Planet-NULLCAST/curriculum"&gt;GitHub Repo&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#issue"&gt;
  &lt;/a&gt;
  Issue
&lt;/h1&gt;

&lt;p&gt;I work on an existing &lt;a href="https://github.com/Planet-NULLCAST/curriculum/issues/462"&gt;Issue&lt;/a&gt; filed by an owner. It is about Highlighting of the Youtube video url in the Blog Preview. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#process"&gt;
  &lt;/a&gt;
  Process
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;First, I added &lt;em&gt;HightlightedLink&lt;/em&gt; element in the page returning. This element will process the preview post text in &lt;em&gt;props.posts&lt;/em&gt; to hightlight Youtube Link.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        &amp;lt;HighlightedLink
          text = {props.posts}
        /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Second, after getting text into &lt;em&gt;HightlightedLink&lt;/em&gt; element. I splitted the text by wherever has the youtube link.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    var regexLink = new RegExp(`(${"^(https://www.youtube.com/).* $"})`, "gi");
    var textParts = text.split(regexLink);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Third, if there are youtube link. I added style attribute for span tag to color the link with blue. The other text would be put into a span tag with default black color.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      return (
        textParts.filter(String).map((part) =&amp;gt; {
            return regexLink.test(part) ? (
              &amp;lt;span style="color:blue;"&amp;gt;{part}&amp;lt;/span&amp;gt;
            ) : (
              &amp;lt;span&amp;gt;{part}&amp;lt;/span&amp;gt;
            );
          })
      );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Otherwise, if there are no youtube link, I would return the whole text in a span tag.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return &amp;lt;span&amp;gt;{text}&amp;lt;/span&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;It is interesting to work in a huge project like this, although you would fix just a small part of it.&lt;/p&gt;

&lt;p&gt;Take a look at my &lt;a href="https://github.com/Planet-NULLCAST/curriculum/pull/499"&gt;pull request&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>opensource</category>
    </item>
    <item>
      <title>angularday report</title>
      <author>Radovan Racak</author>
      <pubDate>Thu, 18 Nov 2021 19:40:39 +0000</pubDate>
      <link>https://dev.to/vanrado/angularday-report-1nfh</link>
      <guid>https://dev.to/vanrado/angularday-report-1nfh</guid>
      <description>&lt;p&gt;November 2021, seems that pandemic situation is still not getting better but on the other hand several frontend or javascript focused conferences provide online attendance. So, why not visit the Italian one and meet several known and impressive people from the dev community :-)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#angularday"&gt;
  &lt;/a&gt;
  &lt;a href="https://twitter.com/angularday"&gt;AngularDay&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This Italian Angular international conference was organized by &lt;a href="https://twitter.com/grusp"&gt;GrUSP community&lt;/a&gt; on November 12th 2021. The event happened online, on &lt;a href="https://hopin.com/"&gt;Hopin&lt;/a&gt; easy-to-use web platform for conferences.&lt;/p&gt;

&lt;p&gt;There were various known speakers from the Angular community and also the official Angular Core Team joined (&lt;a href="https://twitter.com/twerske"&gt;Emma Twersky&lt;/a&gt;, &lt;a href="https://twitter.com/marktechson"&gt;Mark Thompson&lt;/a&gt;, &lt;a href="https://twitter.com/@thepunderwoman"&gt;Jessica Janiuk&lt;/a&gt;) in the last part.&lt;/p&gt;

&lt;p&gt;The atmosphere of the conference was easy going and was moderated by &lt;a href="https://twitter.com/giuliatosato"&gt;Giulia Tosato&lt;/a&gt;, &lt;a href="https://twitter.com/tomastrajan"&gt;Tomas Trajan&lt;/a&gt; and also &lt;a href="https://twitter.com/ladyleet"&gt;Tracy Lee&lt;/a&gt; joined in the last part.&lt;/p&gt;

&lt;p&gt;I decided to highlight the top points per talk which impressed me and Iâll briefly explain why.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#state-of-angular-maxim-salnikov"&gt;
  &lt;/a&gt;
  State of Angular, &lt;a href="https://twitter.com/webmaxru"&gt;Maxim Salnikov&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Maxim talked about the current status and future roadmap of the Angular framework. He summarized highlights of the improvements in &lt;a href="https://blog.angular.io/angular-v13-is-now-available-cce66f7bc296"&gt;Angular v13 that was released on November 5th 2021&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The top improvements which impressed me were following topics:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ivy-everywhere"&gt;
  &lt;/a&gt;
  âIvy Everywhereâ
&lt;/h3&gt;

&lt;p&gt;View Engine renderer is no longer available. In the case of our project, it means faster compilation and eventually faster builds.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#component-api-updates"&gt;
  &lt;/a&gt;
  Component API updates
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Better forms - Enable/disable validators dynamically (maxlength example)&lt;/li&gt;
&lt;li&gt;Simpler API for creating dynamic components&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#end-of-ie11-support"&gt;
  &lt;/a&gt;
  End of IE11 support
&lt;/h3&gt;

&lt;p&gt;Solution for old school clients would be to run MS Edge and set IE11 mode.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#angular-cli-improvements"&gt;
  &lt;/a&gt;
  Angular CLI improvements
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Big improvement in build cache - basically faster builds&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-4.html"&gt;Typescript v4.4 support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rxjs.dev/6-to-7-change-summary"&gt;RxJS 7.4 support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Automatic cleanup with Testbed - we can expect faster, less memory intensive and more optimized tests&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#whats-next-topic"&gt;
  &lt;/a&gt;
  Whatâs next topic
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/angular/angular/discussions/43784"&gt;Standalone components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Strongly typed forms&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.angular.io/angular-v13-is-now-available-cce66f7bc296"&gt;Angular v13 is now Available&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nosql-data-modeling-for-fe-developers-stanimira-vlaeva"&gt;
  &lt;/a&gt;
  NoSQL Data Modeling for FE Developers, &lt;a href="https://twitter.com/StanimiraVlaeva"&gt;Stanimira Vlaeva&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This topic was mostly about data modeling in the context of MongoDB, a NoSQL document database. That was quite a different topic from Front-end, but for someone who is also interested in server side technologies that could be also beneficial. &lt;/p&gt;

&lt;p&gt;While this topic had nothing to do with front-end I would highlight following points which impressed me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NoSQL document database approach in general, which is non-relational nor tabular

&lt;ul&gt;
&lt;li&gt;no tables, different data model from relational DB approach&lt;/li&gt;
&lt;li&gt;Documents - js or json object. Additional types in json, schema is flexible, every doc has own schema&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;When to use Referencing and when Embedding - pros and cons&lt;/li&gt;
&lt;li&gt;Managing duplication and staleness with batch updates&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#create-smart-angular-apps-using-azure-computer-vision-ankit-sharma"&gt;
  &lt;/a&gt;
  Create Smart Angular Apps Using Azure Computer Vision - &lt;a href="https://twitter.com/ankitsharma_007"&gt;Ankit Sharma&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Very interesting topic about integration of &lt;a href="https://azure.microsoft.com/en-us/services/cognitive-services/computer-vision/"&gt;Microsoft Cognitive Services Computer Vision APIs&lt;/a&gt; with Angular app. While there was no talk about some specific Angular techniques, this speech showed how easy it could be to implement a text recognition feature by using easy-to-use services provided by Azure Cloud. I was impressed. Now I am familiar with following aspects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Computer Vision, OCR API, Image Analysis API, Spatial Analysis&lt;/li&gt;
&lt;li&gt;How to set up easily Smart Angular app that has ability to recognize text from pictures&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bit.ly/smart-angular-app"&gt;Smart Angular app Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ankitsharmablogs.com"&gt;Ankit Sharma Blog&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#betterer-incremental-improvement-craig-spence"&gt;
  &lt;/a&gt;
  Betterer: Incremental Improvement, &lt;a href="https://twitter.com/phenomnominal"&gt;Craig Spence&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Craig spoke about something that was completely new for me. And that was a tool called Betterer. Wow wow I was so fascinated how he explained topics like Genetic Algorithms, Evolutionary Architecture, which inspired Betterer to make incremental improvement to our codebases easier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://phenomnomnominal.github.io/betterer/"&gt;Betterer&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Itâs basically a test runner that is similar to Jest or Mocha. But output from Betterer tells you if your new implementation made the codebase/workspace better, worse or  of whether this state is the same in comparison with the stored state in your main branch.&lt;/p&gt;

&lt;p&gt;That tool enables you to lock the quality of your codebase and what you can do is to go just in one direction and move closer towards a better solution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GWFot_Ry--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x23mzpje45dippqs9wtq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GWFot_Ry--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x23mzpje45dippqs9wtq.png" alt="Betterer" width="880" height="395"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Betterer possible use cases&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The typical use case would be when you want to introduce some stricter rule to your codebase - for example migrate JS to TS, replacement of an old component with a new component or just check if the number of eslint warnings is not increasing.&lt;/p&gt;

&lt;p&gt;So if youâve introduced new errors/warnings that are bad and it will throw an error, if youâve fixed some it keeps letting you fix them until eventually there are none.&lt;/p&gt;

&lt;p&gt;Betterer comes with many built-in tests, and of course &lt;a href="https://phenomnomnominal.github.io/betterer/docs/angular-test"&gt;Angular tests&lt;/a&gt; are supported, let's check &lt;a href="https://phenomnomnominal.github.io/betterer/docs"&gt;others&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=BCdDEhNWpUU&amp;amp;ab_channel=AngularNation"&gt;Meetup with Craig at AngularNation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://phenomnomnominal.github.io/betterer/"&gt;Betterer site&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-best-way-to-architect-your-angular-libraries-tomas-trajan"&gt;
  &lt;/a&gt;
  The best way to Architect Your Angular Libraries, &lt;a href="https://twitter.com/tomastrajan"&gt;Tomas Trajan&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Very helpful and useful tips from Tomas about this topic. Great live coding, during which he demonstrated how useful &lt;a href="https://material.angular.io/guide/schematics"&gt;Angular Schematics&lt;/a&gt; are and how it could generate output without writing any code. He focused by showing an example of how to architect the library and how to get the smallest possible bundle size by avoiding specific mistakes.&lt;/p&gt;

&lt;p&gt;Everything is well described in the &lt;a href="https://www.youtube.com/watch?v=2vHJ3_Om_gU"&gt;youtube video&lt;/a&gt; or in his &lt;a href="https://tomastrajan.medium.com/the-best-way-to-architect-your-angular-libraries-87959301d3d3"&gt;article&lt;/a&gt; about this topic. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CommonJS dependencies&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tomas showed how CommonJS dependencies in our library module could affect our final bundle size. In specific cases Ivy just doesnât know if it should tree-shake it, even though it has not been consumed in our code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Destroying code splitting in lazy loaded modules&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There was an example of how easily we can break code splitting of our lazy loaded modules. The library module that was consumed just in the lazy loaded module finally landed in main.js file. It is described in this &lt;a href="https://tomastrajan.medium.com/the-best-way-to-architect-your-angular-libraries-87959301d3d3#0b90"&gt;scenario&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using &lt;a href="https://tomastrajan.medium.com/the-best-way-to-architect-your-angular-libraries-87959301d3d3"&gt;Sub-Entries architecture&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This technique solves the problem with code splitting of used library modules across our lazy loaded modules. Then everything is tree-shaken properly even though we use CommonJS dependencies in our library modules.&lt;/p&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=2vHJ3_Om_gU"&gt;Tomas Trajan - The Best Way To Architect Your Angular Libraries&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tomastrajan.medium.com/"&gt;Tomas Trajan Medium - Angular In depth articles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tomastrajan.medium.com/the-best-way-to-architect-your-angular-libraries-87959301d3d3"&gt;The Best Way To Architect Your Angular Libraries&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#destructuring-frontend-monoliths-with-micro-frontends-trishul-goel"&gt;
  &lt;/a&gt;
  Destructuring frontend monoliths with Micro Frontends, &lt;a href="https://twitter.com/trishulgoel"&gt;Trishul Goel&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Trishul explained the general architecture behind Micro Frontends. That tells you how a common enterprise app monolith can be broken into smaller micro front-end parts. He showed an example in Angular which uses the Module federation approach.&lt;/p&gt;

&lt;p&gt;I summarized the basic concepts of it in the following points.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AppShell&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;load and serve the specific Micro Frontend, for example loading the home page micro front-end&lt;/li&gt;
&lt;li&gt;can encapsulate header, footer, global config or shared business logic which could be shared among Micro Frontends&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Communication&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;How the communication is handled between Micro Frontends and AppShell will rely on your tech stack. It will be easy in Angular with Angular cases, but worse in Angular using other frameworks. We can communicate by the following techniques&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;passing data as an argument of the function&lt;/li&gt;
&lt;li&gt;as a route parameter or pass the function and data as an argument of the module&lt;/li&gt;
&lt;li&gt;custom DOM events&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.angulararchitects.io/en/aktuelles/the-microfrontend-revolution-part-2-module-federation-with-angular/"&gt;Module federation&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Webpack 5 feature allows you to reference remote modules which are not available or known to the compiler at the compile time. These modules are known only at the run time. Letâs say that we can split our architecture and our AppShell module will encapsulate some remote Micro Frontend modules, then the deployment of them is decoupled.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Angular side&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have to set the host and remote module federation configuration file (each per remote). It is done via &lt;a href="https://webpack.js.org/plugins/module-federation-plugin/"&gt;ModuleFederationPlugin&lt;/a&gt;. Where we say which dependencies will be used from the host, what should be shared between remotes and also remotes references.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/tenpureto/tenpureto"&gt;Tenpureto&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As each individual Micro Frontend has its own setup, Trishulâs team uses Tenpureto templating engine for initializing new Micro Frontend. Whenever they need a new Micro Frontend it wraps up a new repository according to the specified template with all settings and scripts.&lt;/p&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=nBqUCkQHJu0"&gt;Destructuring frontend monoliths with Microfrontends - By Trishul Goel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/tenpureto/tenpureto"&gt;Tenpureto&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-needs-inheritance-and-composition-when-you-can-copy-paste-the-same-code-in-every-class-kate-sky"&gt;
  &lt;/a&gt;
  Who needs Inheritance and composition, when you can copy paste the same code in every class!, &lt;a href="https://twitter.com/KateSky8"&gt;Kate Sky&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;This talk focused on identifying&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;when to use composition&lt;/li&gt;
&lt;li&gt;how to apply Decorator Pattern&lt;/li&gt;
&lt;li&gt;how to take dynamic behavior of the components and refactor them into directives&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kate emphasized that custom directives are another way of refactoring things out of our components. And this idea is based basically on Angular code in itself, wherever the Decorator Pattern can be used.&lt;/p&gt;

&lt;p&gt;The goals of these concepts are to make our Angular code&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;well-organized and maintainable&lt;/li&gt;
&lt;li&gt;cleaner, easier to change and easier to read&lt;/li&gt;
&lt;li&gt;with great design that minimizes the duplication of code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/katesky/angular-day-it"&gt;AngularDay demo app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=50ALR6JRNrk"&gt;AngularAir - Using composition over inheritance in building Angular Components with Kate Sky&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;â¦ aaaand summary. As I gather my impressions and learnings from that conference, the best talks, from my perspective were &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Maxim Salnikov where he clearly explained what's new and where it goes&lt;/li&gt;
&lt;li&gt;Tomas Trajan, that cool guy who always does live coding and so far was the only participant to try that during a conference. So I appreciate his courage, despite that he had some connection problems. That was aÂ really beneficial introduction to sub-entries architecture in the angular libraries. I will head straight for that in future&lt;/li&gt;
&lt;li&gt;Craig Spence - the creator of Betterer. It's amazing what this guy has done for the whole community. This tool is worth consideration in every project. It tries to solve problems of Angular projects (at least from my experience). Betterer has so much potential&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>angular</category>
      <category>javascript</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Create a React App (Video)</title>
      <author>Saleh Mubashar</author>
      <pubDate>Thu, 18 Nov 2021 19:29:55 +0000</pubDate>
      <link>https://dev.to/salehmubashar/create-a-react-app-video-4fcj</link>
      <guid>https://dev.to/salehmubashar/create-a-react-app-video-4fcj</guid>
      <description>&lt;p&gt;Hi guys!&lt;/p&gt;

&lt;p&gt;Ok so in many of my tutorials related to react JS, I have not mentioned how to get started with React JS or how to create a react app.&lt;br&gt;
If you want to learn how to create an application in react js and follow along with my tutorials you can watch the below video in which I tell step-by-step how to create a react app and the commands needed.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/zLiMsF0UlpI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#commands-used-in-terminal"&gt;
  &lt;/a&gt;
  Commands Used in terminal
&lt;/h3&gt;

&lt;p&gt;These are the commands I used in the VS code terminal in the video. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new app (replace appname with any name but make sure it is letters only and does not begin with uppercase)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app appname
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Change directory
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd directoryname
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Open your app or run it in the browser.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;I hope you all found the video useful.&lt;br&gt;
Check out my other &lt;a href="https://discover.hubpages.com/technology/useRef"&gt;tutorials&lt;/a&gt; on &lt;a href="https://hubpages.com/@salehmubashar"&gt;hubpages&lt;/a&gt;.&lt;br&gt;
Also follow me on &lt;a href="https://twitter.com/SyntaxE85827144"&gt;twitter&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Like my work? Buy me a coffee!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/salehmubashar"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQj764Ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/default-orange.png" alt="Buy Me A Coffee" width="434" height="100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Until next time,&lt;br&gt;
Cheers :)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>react</category>
    </item>
    <item>
      <title>Rust from the beginning, your first program</title>
      <author>Chris Noring</author>
      <pubDate>Thu, 18 Nov 2021 19:27:55 +0000</pubDate>
      <link>https://dev.to/azure/rust-from-the-beginning-your-first-program-30cp</link>
      <guid>https://dev.to/azure/rust-from-the-beginning-your-first-program-30cp</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This is the first part in a series about the Rust programming language. You will learn to write, compile and run your first program in Rust.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Series:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your first program, &lt;strong&gt;you are here&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Variables&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;IO, read and write from the console&lt;/li&gt;
&lt;li&gt;Rust projects with Cargo&lt;/li&gt;
&lt;li&gt;Control flow&lt;/li&gt;
&lt;li&gt;Error handling&lt;/li&gt;
&lt;li&gt;Working with files
Advanced&lt;/li&gt;
&lt;li&gt;Ownership &amp;amp; Borrowing&lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-rust-and-where-it-shines"&gt;
  &lt;/a&gt;
  Why Rust and where it shines
&lt;/h2&gt;

&lt;p&gt;If you are considering Rust, you most likely have a few different applications in mind that requires speed and effective usage of memory like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Game engines&lt;/strong&gt;, game engines sure demands both resources and speed. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Websites and tools&lt;/strong&gt;, possibly more the tooling than the websites. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Operating systems&lt;/strong&gt;, most operating systems at its core tend to be built in high performance languages.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Microcontrollers&lt;/strong&gt;. Close to the hardware.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The sales pitch that really sells Rust though is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Low speed and resource usage&lt;/strong&gt;. It combines best-in-class speed with a very low resource usage.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Nice approach to garbage collection and safety&lt;/strong&gt;. Rust solves problems associated with C/C++ such as garbage collection and safety.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Strong typing system means high-safety&lt;/strong&gt;. High safety through its strong type system.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Ergonomics&lt;/strong&gt;. Rust makes systems programming accessible by combining power with ergonomics.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cargo for packages and managing code projects&lt;/strong&gt;. Great features like Cargo for managing projects.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Testing built-in&lt;/strong&gt;. Easy to test your code with no extra libraries.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those all sounds good, but let's dive into it and learn to code in it and see what it has to offer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-rust"&gt;
  &lt;/a&gt;
  Install Rust
&lt;/h2&gt;

&lt;p&gt;There's a few different ways to install Rust. The recommended way is to use &lt;a href="https://www.rust-lang.org/tools/install"&gt;rustup&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you feel like evaluating the language first, check out the &lt;a href="https://play.rust-lang.org/"&gt;playground&lt;/a&gt; that enables you to write code, compile and run it with no install.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exercise-your-first-rust-program"&gt;
  &lt;/a&gt;
  Exercise - Your first Rust program
&lt;/h2&gt;

&lt;p&gt;Give that you've installed Rust, you will have access to the compiler &lt;code&gt;rustc&lt;/code&gt;, an executable you use via the command line.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a file &lt;em&gt;main.rs&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Give it the following content:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello world"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compile program with &lt;code&gt;rustc&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   rust main.rs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Run program:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   ./main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   Hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-code-line-by-line"&gt;
  &lt;/a&gt;
  The code line by line
&lt;/h2&gt;

&lt;p&gt;It wasn't much code, but you know have a working application. So what did you do? &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Entrypoint&lt;/strong&gt;, you defined an entry point to the application a method &lt;code&gt;main()&lt;/code&gt;. This is you telling Rust where to start the program execution. You used the keyword &lt;code&gt;fn&lt;/code&gt; to define a function, followed by the function name "main" and curly braces:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Printing to the console&lt;/strong&gt;. You used the print macro, &lt;code&gt;println!&lt;/code&gt; and give it a string literal "Hello world".&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;pre&gt;&lt;br&gt;
   fn main()&lt;br&gt;
   {&lt;br&gt;
     &lt;b&gt;println!("Hello world");&lt;/b&gt;&lt;br&gt;
   }&lt;br&gt;
   &lt;/pre&gt;

&lt;p&gt;That's it, that's all you needed for a program in Rust. Next, let's look at using variables.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#variables-and-interpolation"&gt;
  &lt;/a&gt;
  Variables and interpolation
&lt;/h2&gt;

&lt;p&gt;You use variables in Rust to store values that you want to refer later to in code. There are different variable types you can work with, but for now, let's learn how to create a variable and use our &lt;code&gt;println!&lt;/code&gt; macro.&lt;/p&gt;

&lt;p&gt;You create a variable by typing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Chris"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above creates a variable &lt;code&gt;name&lt;/code&gt; that you can refer later to in code.&lt;/p&gt;

&lt;p&gt;You can now print &lt;code&gt;name&lt;/code&gt; with the &lt;code&gt;println!()&lt;/code&gt; macro like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The curly braces &lt;code&gt;{}&lt;/code&gt; interpolates your variable &lt;code&gt;name&lt;/code&gt; and you end up with "Hi Chris" where you to compile and run the code.&lt;/p&gt;

&lt;p&gt;Let's actually do that next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exercise-modify-your-code"&gt;
  &lt;/a&gt;
  Exercise - modify your code
&lt;/h2&gt;

&lt;p&gt;Now that you learned about defining a variable and printing it, lets modify your existing code. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Change &lt;em&gt;app.rs&lt;/em&gt; to this code:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Chris"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compile the program with &lt;code&gt;rustc&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   rustc main.rs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Run the program:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   ./main &lt;span class="c"&gt;# it's an exe file on windows&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You now see "Hello Chris"&lt;/p&gt;

&lt;p&gt;Congratulations, you've now started your journey to become a programmer in Rust, or as it's also called, a &lt;em&gt;Rustacean&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;You learned about Rust, why and where to use it. Additionally, you've created a program in it and you're now ready to learn more about Rust. Welcome Rustacean :) &lt;/p&gt;

</description>
      <category>rust</category>
      <category>programming</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Guide to blockchain game development</title>
      <author>Matt Angelosanto</author>
      <pubDate>Thu, 18 Nov 2021 19:07:24 +0000</pubDate>
      <link>https://dev.to/logrocket/guide-to-blockchain-game-development-22ho</link>
      <guid>https://dev.to/logrocket/guide-to-blockchain-game-development-22ho</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/ikehakinyemi/"&gt;Ikeh Akinyemi&lt;/a&gt;&lt;/strong&gt; âï¸&lt;/p&gt;

&lt;p&gt;Blockchain development has grown and evolved rapidly over the past few years and is now being adopted across various spheres of software development. From decentralized applications (DApps), to decentralized finance (DeFi) software, to NFTs, to DAOs, blockchain technology has infiltrated a wide range of industries and serves many use cases.&lt;/p&gt;

&lt;p&gt;In this tutorial, weâll explore the emerging trend of blockchain game development. Blockchain-based games are also referred to as chain games. Once you understand the basic structure involved in writing a smart contract and deploying it to a blockchain, you can use the tools available within the crypto space to build games.&lt;/p&gt;

&lt;p&gt;Weâll build a lottery game to demonstrate how game development on blockchain works. Weâll also review the basic structure for implementing transactions within a blockchain game. Then, weâll deploy it to a testnet network.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-blockchain"&gt;
  &lt;/a&gt;
  What is blockchain?
&lt;/h2&gt;

&lt;p&gt;The underlying data structure of a blockchain is a chain of linked lists, or unique âblocks.â Each block that is added to the chain is automatically linked to the previous block added, and the previous block as well points to its predecessor.&lt;/p&gt;

&lt;p&gt;This chain of linked list is itself a list of transactions. The process through which these blocks are agreed upon before they are added to the list-of-lists data structure is laid the key innovation that blockchains have given us: a protocol. This protocol helps the network decide how blocks are added to the chain.&lt;/p&gt;

&lt;p&gt;This decision-making process gave birth to the decentralized nature of blockchain. Proof of work (PoW), proof of take (PoS), and proof of authority (PoA) are decentralized mechanisms through which these decisions are made and agreed on before a block gets added to the chain.&lt;/p&gt;

&lt;p&gt;The cryptocurrencies that have emerged through these blockchains are a means to incentivize people to run software that secures the networks around these blockchains.&lt;/p&gt;

&lt;p&gt;Blockchain platforms like &lt;a href="https://near.org/"&gt;NEAR&lt;/a&gt; provide a cryptographically secure platform for storing, updating, and removing data from a blockchain using &lt;a href="https://blog.logrocket.com/smart-contract-programming-languages/"&gt;smart contracts&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web3-game-development"&gt;
  &lt;/a&gt;
  Web3 game development
&lt;/h2&gt;

&lt;p&gt;Web3, in the context of blockchains, refers to decentralized apps that run on the blockchain. These are apps that allow anyone to participate without monetizing their personal data. With good knowledge of a programming language that is supported by any of these blockchains, we can start writing smart contracts to build game applications as DApps on the blockchain.&lt;/p&gt;

&lt;p&gt;As the blockchain ecosystem evolves, new paradigms emerge. Drawing inspiration from the De-Fi ecosystem, the blockchain game ecosystem has also evolved to something known as GameFi. GameFi, also referred to as &lt;a href="https://coinmarketcap.com/view/play-to-earn/"&gt;play to earn&lt;/a&gt;, introduces a new way to game by turning its regular users into a governing force behind major decisions within the gaming industry.&lt;/p&gt;

&lt;p&gt;GameFi facilitates a player-owned economy when it comes to trading valuables as well as generating additional income with tokens and &lt;a href="https://blog.logrocket.com/how-to-create-nfts-with-javascript/"&gt;non-fungible tokens&lt;/a&gt;. This means building communities around a particular game, and the users of these games can earn cryptocurrencies or assets that are valuable within the metaverse of the game (and outside it too).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-smart-contracts-on-the-near-blockchain"&gt;
  &lt;/a&gt;
  Writing smart contracts on the NEAR blockchain
&lt;/h2&gt;

&lt;p&gt;For this tutorial, weâll demonstrate how to build games on the NEAR blockchain by building a sample game project.&lt;/p&gt;

&lt;p&gt;Within this game, weâll explore how to set up the codebase structure and the programming languages needed to write smart contracts that run on the Near blockchain. When weâre all done, weâll test our application on the local environment, then deploy our smart contract to a testnet.&lt;/p&gt;

&lt;p&gt;Weâre going to clone a starter kit codebase. This repository provides a basic boilerplate on top of which to write more smart contract code as we build the various features of our game.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/IkehAkinyemi/lottery-smart-contract.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the above command is successfully executed, change the directory to the &lt;code&gt;lottery-smart-contract&lt;/code&gt; folder. You can open it in any text editor; for this tutorial, weâll use Visual Studio Code.&lt;/p&gt;

&lt;p&gt;From the terminal, run the &lt;code&gt;code .&lt;/code&gt; command within the folder directory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4DJ2ohPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/11/folder-structure-starter-kit.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4DJ2ohPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/11/folder-structure-starter-kit.png" alt="Folder Structure Starter Kit" width="730" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above picture shows the basic folder structure for a NEAR project using &lt;a href="https://www.assemblyscript.org/"&gt;AssemblyScript&lt;/a&gt; for its smart contract.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;script&lt;/code&gt; folder contains the shell source file to compile and deploy the smart contract to the blockchain. The &lt;code&gt;src&lt;/code&gt; contains the &lt;code&gt;lottery&lt;/code&gt; folder, inside of which weâll write the necessary code for our smart contract.&lt;/p&gt;

&lt;p&gt;The remaining files are configuration files that AssemblyScript needs to understand some of the types defined on Near. The &lt;code&gt;near-sdk-as&lt;/code&gt; library is a collection of packages used to develop NEAR smart contracts in AssemblyScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-build-a-lottery-game-on-the-near-blockchain"&gt;
  &lt;/a&gt;
  How to build a lottery game on the NEAR blockchain
&lt;/h2&gt;

&lt;p&gt;With this game, weâll explore some of the basic concepts of writing smart contracts on the Near blockchain using AssemblyScript.&lt;/p&gt;

&lt;p&gt;Run the &lt;code&gt;yarn install&lt;/code&gt; or &lt;code&gt;npm install&lt;/code&gt; command to install the &lt;code&gt;near-sdk-as&lt;/code&gt; library and any necessary dependencies.&lt;/p&gt;

&lt;p&gt;Next, create a folder called &lt;code&gt;assembly&lt;/code&gt;. Inside this folder, create two files: &lt;code&gt;index.ts&lt;/code&gt; and &lt;code&gt;model.ts&lt;/code&gt;. The &lt;code&gt;model.ts&lt;/code&gt; file contains the different object types weâll be using throughout our code in the &lt;code&gt;index.ts&lt;/code&gt; file. The &lt;code&gt;model.ts&lt;/code&gt; file contains the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;RNG&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;near-sdk-as&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;nearBindgen&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Lottery&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;luckyNum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;u32&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randGen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RNG&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;u32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MAX_VALUE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;LO-&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;randGen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, we define a &lt;code&gt;Lottery&lt;/code&gt; type. This represents the structure of the lottery game type. Weâll define inside it the different interfaces we want to make available â both the public and private interfaces â just like the private &lt;code&gt;luckyNum&lt;/code&gt; variable thatâs an unsigned integer.&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;RNG&lt;/code&gt; (random number generator) object, we initialized the &lt;code&gt;this.id&lt;/code&gt; variable of the game to a random number. And in the &lt;code&gt;randGen&lt;/code&gt; variable, weâre just initializing the &lt;code&gt;RNG&lt;/code&gt; object, while with the &lt;code&gt;randGen.next&lt;/code&gt; function, weâre generating a random number using the seed values, &lt;code&gt;&amp;lt;u32&amp;gt;(1, u32.MAX_VALUE)&lt;/code&gt;, that were passed into it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#defining-function-interfaces"&gt;
  &lt;/a&gt;
  Defining function interfaces
&lt;/h3&gt;

&lt;p&gt;Now letâs define the &lt;code&gt;play&lt;/code&gt; feature of our game. This will contain the code snippet responsible for generating a random number within a set range of integers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;RNG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;logging&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;near-sdk-as&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;nearBindgen&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Lottery&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;

  &lt;span class="nx"&gt;play&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randGen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RNG&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;u32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MAX_VALUE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pickNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;randGen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You picked: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;pickedNum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;pickedNum&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;luckyNum&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the &lt;code&gt;play&lt;/code&gt; function, any player can call it to generate a random number using the &lt;code&gt;RNG&lt;/code&gt; object. Then, we imported the &lt;code&gt;logging&lt;/code&gt; object, which gives us access to output values on the native console â thatâs our local machine terminal.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;play&lt;/code&gt; function returns a &lt;code&gt;bool&lt;/code&gt; value, and this &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; value is the result of comparing the &lt;code&gt;pickedNum&lt;/code&gt; against &lt;code&gt;this.luckyNum&lt;/code&gt; to determine whether the guessed number is equal to the &lt;code&gt;luckyNum&lt;/code&gt; defined in the lottery game.&lt;/p&gt;

&lt;p&gt;Next, weâll define the &lt;code&gt;reset&lt;/code&gt; function. As the name implies, this will enable us to reset the &lt;code&gt;this.luckyNum&lt;/code&gt; to a new random number:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;nearBindgen&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Lottery&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;

  &lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randGen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RNG&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;u32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MAX_VALUE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;randGen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;randNum&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;luckyNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Rerun this function to generate a new random luckyNum&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;luckyNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;randNum&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The luckyNum has been reset to another number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, we generated another new random number. Using the &lt;code&gt;assert&lt;/code&gt; function, we compared it against the current &lt;code&gt;this.luckyNum&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;If the comparison evaluates &lt;code&gt;true&lt;/code&gt;, then the rest of the functionâs code continues to execute. If not, the function halts at that point and returns the assertion message, &lt;code&gt;Rerun this function to generate a new random luckyNum&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When the &lt;code&gt;assert&lt;/code&gt; is true, we assign the variable &lt;code&gt;this.luckyNum&lt;/code&gt; to the newly generated number, &lt;code&gt;randNum&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#defining-the-raw-player-endraw-object"&gt;
  &lt;/a&gt;
  Defining the &lt;code&gt;Player&lt;/code&gt; object
&lt;/h3&gt;

&lt;p&gt;For each player of the lottery game, weâll define a basic type structure. This structure presents the player within our game.&lt;/p&gt;

&lt;p&gt;Update the &lt;code&gt;model.ts&lt;/code&gt; file with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;RNG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PersistentVector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;near-sdk-as&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;AccountID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;nearBindgen&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Lottery&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;nearBindgen&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Player&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AccountId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;guesses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PersistentVector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;guesses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PersistorVector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;g&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// choose a unique prefix per account&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;guesses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isRight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Player&lt;/code&gt; object type contains two interfaces: the &lt;code&gt;this.id&lt;/code&gt; variable, which is an &lt;code&gt;AccountID&lt;/code&gt; type, and &lt;code&gt;this.guesses&lt;/code&gt;, which is an array of boolean values.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;PersistentVector&lt;/code&gt; data structure is an array datatype. During initialization, we use the &lt;code&gt;Context&lt;/code&gt; object to get the current caller of this smart contract through the &lt;code&gt;Context.sender&lt;/code&gt; function. Then, we assign it to &lt;code&gt;this.id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For &lt;code&gt;this.guesses&lt;/code&gt;, we initialize a new &lt;a href="https://near.github.io/near-sdk-as/modules/_sdk_core_assembly_collections_persistentvector_.html"&gt;&lt;code&gt;PersistentVector&lt;/code&gt;&lt;/a&gt; object and assign it to &lt;code&gt;this.guesses&lt;/code&gt;. Then, using the &lt;code&gt;push&lt;/code&gt; function interface available on &lt;code&gt;PersistorVector&lt;/code&gt;, we append a new boolean value, &lt;code&gt;isRight&lt;/code&gt;, into the &lt;code&gt;this.guesses&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;Letâs define other types and variables that weâll use while defining the core functions in the next section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nx"&gt;exsport&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TxFee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;u128&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;500000000000000000000000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WinningPrize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;u128&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;100000000000000000000000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Gas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;u64&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="nx"&gt;_000_000_000_000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;players&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PersistentMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;AccountID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Player&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;p&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#defining-core-game-functions"&gt;
  &lt;/a&gt;
  Defining core game functions
&lt;/h3&gt;

&lt;p&gt;Create an &lt;code&gt;index.ts&lt;/code&gt; file inside the &lt;code&gt;assembly&lt;/code&gt; folder. This is where weâll define the core functions of our lottery game.&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;index.ts&lt;/code&gt; file, define a &lt;code&gt;pickANum&lt;/code&gt; function, as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;TxFee&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Lottery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;players&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./model&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;u128&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;near-sdk-as&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;pickANum&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;verifyDeposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attachedDeposit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;game&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Lottery&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;play&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;player&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;guesses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;player&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;verifyDeposit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;deposit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;u128&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;deposit&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;TxFee&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You need 0.5 NEAR tokens to pick a number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above function, weâre verifying a deposit of 0.5 NEAR tokens before any player of the lottery game can invoke any call to play a game on the smart contract. This way, our players are paying a certain amount of money before playing the game. Also, once a player plays, we update the profile of that player in the players data structure.&lt;/p&gt;

&lt;p&gt;Next, letâs define the function that will handle paying a winning player by randomly generating the right number thatâs equal to the &lt;code&gt;luckyNum&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;TxFee&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Lottery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Gas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;WinningPrize&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./model&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;u128&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ContractPromiseBatch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;logging&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;near-sdk-as&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;on_payout_complete&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This winner has successfully been paid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;payout&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;player&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;players&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;guesses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;guesses&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;to_winner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ContractPromiseBatch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contractName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nx"&gt;to_winner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transfer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;WinningPrize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;to_winner&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;function_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;on_payout_complete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;u128&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Zero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Gas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above functions help us make transfer transactions to the winners of the lottery game. With the &lt;code&gt;ContractPromiseBatch&lt;/code&gt; object, we create and set up a transfer transaction to the address we passed in as the argument to the &lt;code&gt;create&lt;/code&gt; method. Then, with the &lt;code&gt;transfer&lt;/code&gt; function, we make a transaction worth of the token, &lt;code&gt;WinningPrize&lt;/code&gt;, that was passed into it.&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;function_call&lt;/code&gt; function, we then schedule a function call for when the transaction has been successfully sent. For this game, the function we intend to call on a successful transaction is the &lt;code&gt;on_payout_complete&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;For the purpose of this tutorial, we wonât focus on setting up a &lt;a href="https://docs.near.org/docs/concepts/networks#testnet"&gt;NEAR Testnet&lt;/a&gt; or &lt;a href="https://wallet.testnet.near.org/"&gt;Testnet wallet&lt;/a&gt;, but I would encourage you to check out the links to learn more about the various networks that exists in the NEAR ecosystem.&lt;/p&gt;

&lt;p&gt;For this demonstration, weâll build our lottery game to generate the binary format &lt;code&gt;.wasm&lt;/code&gt; file, then use the &lt;code&gt;near dev-deploy&lt;/code&gt; command to deploy the smart contract.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-and-deploying-smart-contracts"&gt;
  &lt;/a&gt;
  Building and deploying smart contracts
&lt;/h3&gt;

&lt;p&gt;Weâll first build the smart contract using the &lt;code&gt;asb&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn asb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is an alias command for the &lt;code&gt;yarn asb&lt;/code&gt; &lt;code&gt;--verbose&lt;/code&gt; &lt;code&gt;--nologo&lt;/code&gt; command, as defined in the &lt;code&gt;package.json&lt;/code&gt; file located in the root directory.&lt;/p&gt;

&lt;p&gt;After weâve successfully generated a &lt;code&gt;build&lt;/code&gt; folder that contains a &lt;code&gt;lottery.wasm&lt;/code&gt; file inside the &lt;code&gt;build/release/&lt;/code&gt; folder, we can run the following command to deploy it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;near dev-deploy ./build/release/lottery.wasm 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will deploy the smart contract and provide us with the contract name or ID, which we can use to interact with it on the frontend or through a shell file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;near&lt;/span&gt; &lt;span class="nx"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;deploy&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;lottery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wasm&lt;/span&gt;                 
&lt;span class="nx"&gt;Starting&lt;/span&gt; &lt;span class="nx"&gt;deployment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Account&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1635968803538&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;35727285470528&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//rpc.testnet.near.org, helper: https://helper.testnet.near.org, file: ./lottery.wasm&lt;/span&gt;
&lt;span class="nx"&gt;Transaction&lt;/span&gt; &lt;span class="nx"&gt;Id&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="nx"&gt;TWTTnLEx7hpPsVMfK31DDX3gVmG4dsqoMy7sA7ypHdo&lt;/span&gt;
&lt;span class="nx"&gt;To&lt;/span&gt; &lt;span class="nx"&gt;see&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt; &lt;span class="nx"&gt;explorer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;please&lt;/span&gt; &lt;span class="nx"&gt;open&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;browser&lt;/span&gt;
&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//explorer.testnet.near.org/transactions/4TWTTnLEx7hpPsVMfK31DDX3gVmG4dsqoMy7sA7ypHdo&lt;/span&gt;
&lt;span class="nx"&gt;Done&lt;/span&gt; &lt;span class="nx"&gt;deploying&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1635968803538&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;35727285470528&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#testing-our-blockchain-game"&gt;
  &lt;/a&gt;
  Testing our blockchain game
&lt;/h2&gt;

&lt;p&gt;Iâve written two unit tests to confirm that our application is actually functional. These two simple tests will create a lottery game and as well reset the &lt;code&gt;luckyNum&lt;/code&gt; variable to a new random number.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;/src/lottery/__test__&lt;/code&gt; folder contains the test file. Run the test suite using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yarn &lt;span class="nb"&gt;test&lt;/span&gt;:unit
&lt;span class="o"&gt;[&lt;/span&gt;Describe]: Checks &lt;span class="k"&gt;for &lt;/span&gt;creating account

 &lt;span class="o"&gt;[&lt;/span&gt;Success]: â creates a new game
 &lt;span class="o"&gt;[&lt;/span&gt;Success]: â create and reset the luckyNum of a new game

    &lt;span class="o"&gt;[&lt;/span&gt;File]: src/lottery/__tests__/index.unit.spec.ts
  &lt;span class="o"&gt;[&lt;/span&gt;Groups]: 2 pass, 2 total
  &lt;span class="o"&gt;[&lt;/span&gt;Result]: â PASS
&lt;span class="o"&gt;[&lt;/span&gt;Snapshot]: 0 total, 0 added, 0 removed, 0 different
 &lt;span class="o"&gt;[&lt;/span&gt;Summary]: 2 pass,  0 fail, 2 total
    &lt;span class="o"&gt;[&lt;/span&gt;Time]: 19.905ms
  &lt;span class="o"&gt;[&lt;/span&gt;Result]: â PASS
   &lt;span class="o"&gt;[&lt;/span&gt;Files]: 1 total
  &lt;span class="o"&gt;[&lt;/span&gt;Groups]: 2 count, 2 pass
   &lt;span class="o"&gt;[&lt;/span&gt;Tests]: 2 pass, 0 fail, 2 total
    &lt;span class="o"&gt;[&lt;/span&gt;Time]: 13907.01ms
Done &lt;span class="k"&gt;in &lt;/span&gt;14.90s.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this tutorial, we demonstrated how to create game applications on blockchain platforms. Blockchain-based games can be played either as multiplayer games or solo.&lt;/p&gt;

&lt;p&gt;You can also extend the concept of blockchain games to include a metaverse â a digital world â around your game. The metaverse is a world where players can team up, create a governance, and even create currencies as a means for value exchange. You can mint NFTs or form DAO within a digital game world.&lt;/p&gt;

&lt;p&gt;Check out the NEAR docs to see how to build a frontend to consume the gameâs smart contract created in this tutorial. The full codebase of the smart contract is available on &lt;a href="https://github.com/IkehAkinyemi/lottery-smart-contract"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#logrocket-full-visibility-into-your-web-apps"&gt;
  &lt;/a&gt;
  &lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt;: Full visibility into your web apps
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="880" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt; is a frontend application monitoring solution that lets you replay problems as if they happened in your own browser. Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay the session to quickly understand what went wrong. It works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and @ngrx/store.&lt;/p&gt;

&lt;p&gt;In addition to logging Redux actions and state, LogRocket records console logs, JavaScript errors, stacktraces, network requests/responses with headers + bodies, browser metadata, and custom logs. It also instruments the DOM to record the HTML and CSS on the page, recreating pixel-perfect videos of even the most complex single-page apps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;Try it for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>gamedev</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>ð Launching Fig</title>
      <author>Brendan Falk</author>
      <pubDate>Thu, 18 Nov 2021 18:51:41 +0000</pubDate>
      <link>https://dev.to/withfig/launching-fig-da6</link>
      <guid>https://dev.to/withfig/launching-fig-da6</guid>
      <description>&lt;p&gt;I am excited to announce that as of today, &lt;a href="https://fig.io"&gt;Fig&lt;/a&gt; is generally available to the public for download. &lt;/p&gt;

&lt;p&gt;With our public launch, I'd like to share a little more about Fig's mission: who are we, what we're doing, and what's to come. &lt;/p&gt;

&lt;p&gt;The terminal has barely changed since the 1970s and yet is still used every day by tens of millons of developers. Our bet is the terminal isn't going away any time soon. We are excited for Fig to play a part in its evolution. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-fig"&gt;
  &lt;/a&gt;
  ð What is Fig?
&lt;/h3&gt;

&lt;p&gt;Fig makes the terminal easier for beginners, more productive for advanced engineers, and more collaborative for teams.&lt;/p&gt;

&lt;p&gt;To do this we are creating the &lt;strong&gt;app ecosystem for the terminal&lt;/strong&gt;. We've built out a simple Javacript API (Fig.js) that makes it easy to extend your local terminal &amp;amp; shell with visual apps and shortcuts.&lt;/p&gt;

&lt;p&gt;The first app built on top of the Fig platform is &lt;a href="https://github.com/withfig/autocomplete"&gt;autocomplete&lt;/a&gt;. We are launching autocomplete today, but soon, we will open up our API so anyone can create their own apps. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#our-first-app-autocomplete"&gt;
  &lt;/a&gt;
  ð¥ Our First App: Autocomplete
&lt;/h3&gt;

&lt;p&gt;Our first app, &lt;strong&gt;autocomplete&lt;/strong&gt;, is a modern intellisense for your interactive shell. We support inline completions for subcommands, options, and arguments for 200+ CLI tools. &lt;/p&gt;

&lt;p&gt;We make it ridculously easy to build completions. We've defined a declarative standard that makes building completions for things like  &lt;code&gt;git checkout &amp;lt;branch&amp;gt;&lt;/code&gt; or &lt;code&gt;npm install &amp;lt;package&amp;gt;&lt;/code&gt;  around 10 lines of Javascript. All of our completions are open source in our public GitHub repo (&lt;a href="https://github.com/withfig/autocomplete"&gt;withfig/autocomplete&lt;/a&gt;) and have been built by 120+ contributors!&lt;/p&gt;

&lt;p&gt;Autocomplete is built to be &lt;em&gt;extensible&lt;/em&gt;. You can add your own personal shortcuts, add project-specific shortcuts,  customize descriptions for package.json scripts, and even build completions for your team's internal CLI tool. You can build all this and more by checking out our &lt;a href="https://fig.io/docs"&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here's what autocomplete looks like in action.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wel5bMZtFLA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-figjs-api"&gt;
  &lt;/a&gt;
  ð The Fig.js API
&lt;/h3&gt;

&lt;p&gt;Fig isn't &lt;em&gt;just&lt;/em&gt; autocomplete. Fig's backbone is the Fig.js, an API that enables building web apps that seamlessly integrate with the terminal.&lt;/p&gt;

&lt;p&gt;Very soon, we will open up access to the Fig API, so that anyone can build their own apps. You can use our API to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Receive events from the shell (e.g. when a new process is executed or when the working directory changes)&lt;/li&gt;
&lt;li&gt;Run local shell commands&lt;/li&gt;
&lt;li&gt;Position the Fig window in various locations around the user's terminal&lt;/li&gt;
&lt;li&gt;Insert text into the active terminal session&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We will discuss Fig.js in more depth when we're ready for &lt;strong&gt;you&lt;/strong&gt; to start building apps with it. In the meantime, you can see the early prototypes we built to get a sense of what's possible:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/90T5ePnROZk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#future-apps"&gt;
  &lt;/a&gt;
  âï¸ Future Apps
&lt;/h3&gt;

&lt;p&gt;What workflows do you do every day in the terminal that could be improved? Are any of these workflows shared across your team? &lt;/p&gt;

&lt;p&gt;As you might expect, engineers do &lt;strong&gt;a lot&lt;/strong&gt; of different things in their terminal. Here are a few Fig apps that will make common terminal workflows faster and easier:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Shared terminal configuration (scripts, functions, aliases, snippets, CLIs, and dotfiles) across a teams&lt;/li&gt;
&lt;li&gt;Interactive jupyter notebook style "runbooks" for dev ops/SREs&lt;/li&gt;
&lt;li&gt;Shared environment variables, secrets, certificates, and keys&lt;/li&gt;
&lt;li&gt;Live terminal sharing and session recording&lt;/li&gt;
&lt;li&gt;2FA for SSHing into remote machines&lt;/li&gt;
&lt;li&gt;"Fig cloud" for hosting and deployment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;What else could you do?&lt;/em&gt; You could have an internal app for your team/company. You could build a keyboard driven git GUI that uses &lt;code&gt;d3.js&lt;/code&gt; to visualise your commit history. You could use Fig onboard new engineers to your team or even users to your public CLI.&lt;/p&gt;

&lt;p&gt;These ideas really barely scratch the surface of what's possible. We're so excited to see what the community will build!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-hasnt-fig-built-its-own-terminal"&gt;
  &lt;/a&gt;
  ð¾ Why hasn't Fig built its own terminal?
&lt;/h3&gt;

&lt;p&gt;Early on, we decided not built our own terminal and instead integrate with  &lt;em&gt;existing&lt;/em&gt; terminal emulators. &lt;/p&gt;

&lt;p&gt;This is incredibly ambitious, but it has three major advantages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Teams can use Fig to collaborate but engineers will still be able to use their preferred terminal. &lt;/li&gt;
&lt;li&gt;Fig developers can build for a much larger audience. Since anyone can add Fig to their existing setup, apps built on top of the Fig.js API are &lt;em&gt;not limited&lt;/em&gt; to people who use a specific terminal or shell...&lt;/li&gt;
&lt;li&gt;Fig is backwards compatibile. Your terminal is still your terminal. Fig is a new interface to build upon.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Fig will work with your standalone terminal (like iTerm2 or Kitty), the terminal embedded in your IDE (like VSCode or JetBrains), and even in the terminal in a browser-based IDE (like GitHub Codespaces). &lt;em&gt;Fig works where you work.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;For instance, here's Fig in VSCode:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fkN-gzEh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://fig.io/images/screenshots/vscode-colored-background.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fkN-gzEh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://fig.io/images/screenshots/vscode-colored-background.png" alt="Fig in VSCode" width="880" height="527"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We imagine a world where your manager uses bash on Windows, your colleague uses Alacritty on Arch Linux, and you use the terminal embedded in VSCode on macOS. Fig works with all of them and lets you seamless collaborate.&lt;/p&gt;

&lt;p&gt;Fig currently work with iTerm2, the native macOS terminal, Hyper, Alacritty, and the terminal embedded in VSCode on macOS. Once we have stablized and launched our API, we will go cross-platform to Linux and Windows. If you'd like to help with this, come chat with us in our &lt;a href="https://fig.io/community"&gt;Discord community&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One day, we may build a Fig terminal to provide the best first party experience. For now, our integrations work quite nicely!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-will-fig-make-money"&gt;
  &lt;/a&gt;
  ð° How will Fig make money?
&lt;/h3&gt;

&lt;p&gt;We get asked this question a lot and so as a final note to our launch, I thought it would be good to address it.&lt;/p&gt;

&lt;p&gt;First, &lt;strong&gt;Fig will be always free for individuals&lt;/strong&gt;. We want users to feel confident that even if they sign up to Fig and become the biggest power user, they will never be charged.&lt;/p&gt;

&lt;p&gt;Our pricing model is inspired by GitHub's:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For individuals and open-source projects, Fig is completely free.
&lt;/li&gt;
&lt;li&gt;For teams product that require hosting, Fig will charge a small fee per person per month.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For instance, our &lt;a href="https://fig.io/teams"&gt;autocomplete for teams&lt;/a&gt; product enables companies to build and share completions for internal CLIs. We think charging for hosting is reasonable as there is a cost incurred by us. We are willing to absorb this cost for individuals but not for teams. &lt;/p&gt;

&lt;p&gt;Finally, Fig will &lt;strong&gt;never&lt;/strong&gt; sell your data. The terminal is an incredibly sensitive environment. Security and privacy is top of mind for everything we do.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E2%97%A7-whats-next"&gt;
  &lt;/a&gt;
  â§ What's next?
&lt;/h3&gt;

&lt;p&gt;We are really only just getting started. Fig's platform opens up a whole new world of opportunties for developer tooling. Our public launch of autocomplete today is just our first demonstration of what's possible. Our roadmap for the next several months includes more terminal integrations, launching our Fig.js API, new apps, and maybe even a beta on Linux!&lt;/p&gt;

&lt;p&gt;If you're excited about Fig's vision and mission &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follow &lt;a href="https://twitter.com/fig"&gt;@fig&lt;/a&gt; on Twitter.&lt;/li&gt;
&lt;li&gt;Join our &lt;a href="https://fig.io/community"&gt;Discord community&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Join the team: &lt;a href="https://fig.io/jobs"&gt;fig.io/jobs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Or just email me (brendan [at] fig.io)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-Brendan Falk&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Create a PR to automatically fix code linting errors</title>
      <author>Iacovos Constantinou</author>
      <pubDate>Thu, 18 Nov 2021 18:36:51 +0000</pubDate>
      <link>https://dev.to/iacons/create-a-pr-to-automatically-fix-code-linting-errors-1hf2</link>
      <guid>https://dev.to/iacons/create-a-pr-to-automatically-fix-code-linting-errors-1hf2</guid>
      <description>&lt;p&gt;This Github workflow aims to automatically fix as many lint errors as possible.&lt;/p&gt;

&lt;p&gt;In particular, it executes eslint with &lt;code&gt;--fix&lt;/code&gt; argument, so that we report and fix lint errors. Note that not all lint errors can be fixed automatically.&lt;/p&gt;

&lt;p&gt;If any errors were fixed by &lt;code&gt;eslint&lt;/code&gt;, a new PR is created including the changes made. The base is always the current branch while the assignee is the PR author. &lt;/p&gt;

&lt;p&gt;This allows the PR author to review the changes and if needed merge them into the initial PR.&lt;/p&gt;

&lt;p&gt;On top of that, the PR is marked with the label &lt;code&gt;autofix&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;The repository can be found &lt;a href="https://github.com/softius/actions-auto-improve-code-style/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On purpose there is a lint error in &lt;code&gt;index.js&lt;/code&gt; and you can review the PR created &lt;a href="https://github.com/softius/actions-auto-improve-code-style/pull/5"&gt;here&lt;/a&gt; to fix this. .&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Maintainer Must-Haves&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/softius"&gt;
        softius
      &lt;/a&gt; / &lt;a href="https://github.com/softius/actions-auto-improve-code-style"&gt;
        actions-auto-improve-code-style
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Create a PR automatically to fix code linting errors.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
actions-auto-improve-code-style&lt;/h1&gt;
&lt;p&gt;This GitHub workflow executes eslint with &lt;code&gt;--fix&lt;/code&gt; argument, so that we can not only capture but also automatically fix as many as possible.&lt;/p&gt;
&lt;p&gt;If any errors were fixed by &lt;code&gt;eslint&lt;/code&gt;, a new PR is created including the changes made. The base is always the current branch while the assignee is the PR author.&lt;/p&gt;
&lt;p&gt;This allows the PR author to review the changes and if needed merge them into into the initial PR.&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/softius/actions-auto-improve-code-style"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;While this workflow uses eslint, the same approach can be used with phpcs/phpcbf and other linters.&lt;/p&gt;

&lt;p&gt;To customize the workflow further, you can refer to this &lt;a href="https://github.com/peter-evans/create-pull-request"&gt;action&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Make sure to follow me on &lt;a href="https://dev.to/iacons"&gt;dev.to&lt;/a&gt;, &lt;a href="https://medium.com/@softius"&gt;Medium&lt;/a&gt; or &lt;a href="https://twitter.com/iacons"&gt;Twitter&lt;/a&gt; to read more about PHP, Docker and other dev topics.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@kensuarez?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Ken Suarez&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fix?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;  &lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>github</category>
      <category>opensource</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
