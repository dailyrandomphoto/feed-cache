<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Form Example in Laravel 8</title>
      <author>Sanajit Jana</author>
      <pubDate>Sun, 12 Sep 2021 14:18:54 +0000</pubDate>
      <link>https://dev.to/sanajitjana/form-example-in-laravel-8-45oc</link>
      <guid>https://dev.to/sanajitjana/form-example-in-laravel-8-45oc</guid>
      <description>&lt;p&gt;Laravel 8 form example tutorial. In this post, i will teach from starting on how to send form data on controller and how to insert form data in database using laravel 8.&lt;/p&gt;

&lt;p&gt;If you are trying to create form and want to insert form data into database using laravel 8 latest version. So this post will help you to do this.&lt;/p&gt;

&lt;p&gt;Because in this post example, i will create contact-list form and submit to database using laravel 8 version.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-submit-form-data-into-database"&gt;
  &lt;/a&gt;
  How to Submit Form Data into Database?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Step 1 – Install Laravel 8 Application&lt;/li&gt;
&lt;li&gt;Step 2 – Configuring Database using Env File&lt;/li&gt;
&lt;li&gt;Step 3 – Create Model &amp;amp; Migration File For Add Blog Post Form&lt;/li&gt;
&lt;li&gt;Step 4 – Create Routes&lt;/li&gt;
&lt;li&gt;Step 5 – Creating Controller&lt;/li&gt;
&lt;li&gt;Step 6 – Create Blade File For Add Blog Post Form&lt;/li&gt;
&lt;li&gt;Step 7 – Start Development Server&lt;/li&gt;
&lt;li&gt;Step 8 – Run Laravel 8 Form App On Browser&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#step-1-install-laravel-8-application"&gt;
  &lt;/a&gt;
  Step 1 – Install Laravel 8 Application
&lt;/h3&gt;

&lt;p&gt;In step 1, open your terminal and navigate to your local web server directory using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;//for windows user&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;xampp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;htdocs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;//for ubuntu user&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then install laravel 8 latest application using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="n"&gt;composer&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;prefer&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="n"&gt;laravel&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;laravel&lt;/span&gt; &lt;span class="nc"&gt;LaravelForm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-configuring-database-using-env-file"&gt;
  &lt;/a&gt;
  Step 2 – Configuring Database using Env File
&lt;/h3&gt;

&lt;p&gt;In step 2, open your downloaded laravel 8 app into any text editor. Then find .env file and configure database detail like following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="no"&gt;DB_CONNECTION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;
&lt;span class="no"&gt;DB_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;127.0.0.1&lt;/span&gt;
&lt;span class="no"&gt;DB_PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3306&lt;/span&gt;
&lt;span class="no"&gt;DB_DATABASE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="no"&gt;DB_USERNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="no"&gt;DB_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3-create-model-amp-migration-file-for-add-blog-post-form"&gt;
  &lt;/a&gt;
  Step 3 – Create Model &amp;amp; Migration File For Add Blog Post Form
&lt;/h3&gt;

&lt;p&gt;In step 3, open command prompt and navigate to your project by using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nc"&gt;LaravelForm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then create model and migration file by using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="n"&gt;php&lt;/span&gt; &lt;span class="n"&gt;artisan&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above command will create two files into your laravel 8 form application, which is located inside the following locations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LaravelForm/app/Models/Post.php&lt;/li&gt;
&lt;li&gt;LaravelForm/database/migrations/2020_09_09_025857_create_posts_table.php&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, find create_posts_table.php file inside LaravelForm/database/migrations/ directory. Then open this file and add the following code into function up() on this file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'posts'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Blueprint&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'description'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;timestamps&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, open again your terminal and type the following command on cmd to create tables into your selected database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="n"&gt;php&lt;/span&gt; &lt;span class="n"&gt;artisan&lt;/span&gt; &lt;span class="n"&gt;migrate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4-create-routes"&gt;
  &lt;/a&gt;
  Step 4 – Create Routes
&lt;/h3&gt;

&lt;p&gt;In step 4, open your web.php file, which is located inside routes directory. Then add the following routes into web.php file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Support\Facades\Route&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Http\Controllers\PostController&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cm"&gt;/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| contains the "web" middleware group. Now create something great!
|
*/&lt;/span&gt;
&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'welcome'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'add-blog-post-form'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;PostController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'index'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'store-form'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;PostController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'store'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-5-creating-controller"&gt;
  &lt;/a&gt;
  Step 5 – Creating Controller
&lt;/h3&gt;

&lt;p&gt;In step 5, create form controller by using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="n"&gt;php&lt;/span&gt; &lt;span class="n"&gt;artisan&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="nc"&gt;PostController&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above command will create PostController.php file, which is located inside LaravelForm/app/Http/Controllers/ directory.&lt;/p&gt;

&lt;p&gt;So open PostController.php file and add the following code into it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Http\Controllers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Http\Request&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Models\Post&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostController&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'add-blog-post-form'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$post&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$post&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$post&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'add-blog-post-form'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'status'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Blog Post Form Data Has Been inserted'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-6-create-blade-file-for-form"&gt;
  &lt;/a&gt;
  Step 6 – Create Blade File For Form
&lt;/h3&gt;

&lt;p&gt;In step 6, create new blade view file that named add-blog-post-form.blade.php inside resources/views directory for add blog post form.&lt;/p&gt;

&lt;p&gt;Then add the following html form code into add-blog-post-form.blade.php:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Laravel 8 Form Example Tutorial&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"csrf-token"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"{{ csrf_token() }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container mt-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  @if(session('status'))
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"alert alert-success"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        {{ session('status') }}
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  @endif
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-header text-center font-weight-bold"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      Laravel 8 - Add Blog Post Form Example
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"add-blog-post-form"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"add-blog-post-form"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"{{url('store-form')}}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       @csrf
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"exampleInputEmail1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Title&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="na"&gt;required=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-group"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"exampleInputEmail1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Description&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-control"&lt;/span&gt; &lt;span class="na"&gt;required=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn-primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-7-start-development-server"&gt;
  &lt;/a&gt;
  Step 7 – Start Development Server
&lt;/h3&gt;

&lt;p&gt;Finally, open your command prompt again and run the following command to start development server for your laravel 8 form application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="n"&gt;php&lt;/span&gt; &lt;span class="n"&gt;artisan&lt;/span&gt; &lt;span class="n"&gt;serve&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-8-run-laravel-8-form-app-on-browser"&gt;
  &lt;/a&gt;
  Step 8 – Run Laravel 8 Form App On Browser
&lt;/h3&gt;

&lt;p&gt;In step 8, open your browser and fire the following url into your browser:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="mf"&gt;127.0.0.1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you fire the above given url on browser, you will look like in the following image:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M6sDdJgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrlx7ey52jex61d3p7bu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M6sDdJgg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrlx7ey52jex61d3p7bu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>formsubmit</category>
      <category>laravel8</category>
      <category>databasesubmit</category>
      <category>laravelcurd</category>
    </item>
    <item>
      <title>[Rust] Tokio stack overview: Runtime</title>
      <author>Roger Torres Paes (he/him/ele)</author>
      <pubDate>Sun, 12 Sep 2021 13:39:39 +0000</pubDate>
      <link>https://dev.to/rogertorres/rust-tokio-stack-overview-runtime-9fh</link>
      <guid>https://dev.to/rogertorres/rust-tokio-stack-overview-runtime-9fh</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;TL:DR: In this first installment of a series devised to give an overview of the Tokio stack, I talk about its &lt;strong&gt;runtime&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Quoting its &lt;a href="https://tokio.rs/blog/2017-01-tokio-0-1"&gt;first announcement&lt;/a&gt;, "Tokio is a platform for writing fast networking code in Rust [and] is primarily intended as a foundation for other libraries". &lt;/p&gt;

&lt;p&gt;&lt;a href="https://tokio.rs/#tk-lib-tokio"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pia7Vin8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yuzlo4csnkfvpl6gwnq8.png" alt="Tokio Stack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this series, I plan to go through all the libraries (crates) that belong to this stack, explaining the very basics of each, which means trying to answer these simple questions: what problems do them solve and how?&lt;/p&gt;

&lt;p&gt;Today, I start with the first (and, I assume, the most known) of them: the &lt;strong&gt;Tokio runtime&lt;/strong&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-an-asynchronous-runtime"&gt;
  &lt;/a&gt;
  What is an asynchronous runtime?
&lt;/h2&gt;

&lt;p&gt;Core Rust provides the types to build an asynchronous application. However, when building, say, an asynchronous &lt;em&gt;network&lt;/em&gt; application, we found ourselves in the need of a lot of boilerplate code. We can write it ourselves, &lt;strong&gt;or&lt;/strong&gt; we can use a library that gives it to us, ready-made (and probably better-made). And that is what an asynchronous runtime such as Tokio does, it provides the building blocks to construe such an application.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#futures"&gt;
  &lt;/a&gt;
  Futures
&lt;/h2&gt;

&lt;p&gt;Let us start by taking a look at what core Rust brings to the table, so we can better understand what we would lack if we were to build an asynchronous network application all by ourselves.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;P.S. &lt;em&gt;I already wrote an &lt;a href="https://dev.to/rogertorres/asynchronous-rust-basic-concepts-44ed"&gt;introduction to async Rust&lt;/a&gt;, so this will be a dried out explanation.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Asynchronous Rust allows us to create concurrent applications. It does so via the syntax &lt;code&gt;async/.await&lt;/code&gt;. Basically, blocks and functions declared with &lt;code&gt;async&lt;/code&gt; &lt;em&gt;desugar&lt;/em&gt; into a block or function that returns the implementation of a trait called &lt;a href="https://aturon.github.io/blog/2016/08/11/futures/"&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;Future&lt;/code&gt; is a state machine, so it can keep up with the progress made in a certain operation, which means it can stop processing at some point and, when executing again, continue from where it stopped. On a higher level, we might say that a future is the representation of a value that may or may not be ready, a duality that is put forward using an enum called &lt;code&gt;Poll&lt;/code&gt; that has two variants: &lt;code&gt;Pending&lt;/code&gt; and &lt;code&gt;Ready&amp;lt;T&amp;gt;&lt;/code&gt;. The &lt;code&gt;Future&lt;/code&gt; trait also has a function, called &lt;code&gt;poll()&lt;/code&gt;, that will try to make as much progress as possible within the future (thus driving the state machine forward). This function, &lt;code&gt;poll()&lt;/code&gt;, is first executed when we &lt;code&gt;.await&lt;/code&gt; the future. To &lt;code&gt;.await&lt;/code&gt; the future is to deliver it to a &lt;strong&gt;scheduler&lt;/strong&gt; (formerly known as &lt;em&gt;executor&lt;/em&gt;) that will &lt;code&gt;poll()&lt;/code&gt; it. If it is processed through completion, &lt;code&gt;Ready&amp;lt;T&amp;gt;&lt;/code&gt; is returned, otherwise &lt;code&gt;Pending&lt;/code&gt; is returned and the scheduler keeps the future aside, waiting for a request to &lt;code&gt;poll()&lt;/code&gt; it again. This request comes from the &lt;strong&gt;driver&lt;/strong&gt; (formerly known as &lt;em&gt;reactor&lt;/em&gt;), which is an I/O event loop. &lt;/p&gt;

&lt;p&gt;Rust does not provide these last two. That is why we need a crate that provides them. Besides that, we also need some time-related utilities to handle all this scheduling stuff.&lt;/p&gt;

&lt;p&gt;Needless to say, that this is precisely what the Tokio runtime provides. Quoting its &lt;a href="https://docs.rs/tokio/1.11.0/tokio/runtime/index.html"&gt;documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unlike other Rust programs, asynchronous applications require runtime support. In particular, the following runtime services are necessary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An I/O event loop, called the driver, which drives I/O resources and dispatches I/O events to tasks that depend on them.&lt;/li&gt;
&lt;li&gt;A scheduler to execute tasks that use these I/O resources.&lt;/li&gt;
&lt;li&gt;A timer for scheduling work to run after a set period of time.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#scheduler"&gt;
  &lt;/a&gt;
  Scheduler
&lt;/h2&gt;

&lt;p&gt;When you code an async function for the first time, you realize that the place from which you are calling this function also has to be async. And if you go all the way up and try to make your &lt;code&gt;main()&lt;/code&gt; function async, Rust will tell you that "&lt;code&gt;main&lt;/code&gt; function is not allowed to be &lt;code&gt;async&lt;/code&gt;". &lt;/p&gt;

&lt;p&gt;Asking Rust to &lt;code&gt;explain&lt;/code&gt; this error gives us a hint:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ rustc --explain E0752

`fn main()` or the specified start function is not allowed to be `async`. Not having a correct async runtime library setup may cause this error.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A quick search on the web is enough to provide the solution: we got to import &lt;code&gt;tokio&lt;/code&gt; and use this attribute macro:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[tokio::main]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; 
    &lt;span class="c"&gt;// ... &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, even thought it certainly works, a question remains…&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h3&gt;

&lt;p&gt;Because at some point the futures have to be dealt with, and there is nothing above the &lt;code&gt;main()&lt;/code&gt; function in a Rust program, so whoever is handling them, have to be below it. Another way to put it is to say that the &lt;code&gt;main()&lt;/code&gt; is the entry door of your program. The operating system running the binary knows nothing about futures, so they have to be managed "inside the house", that is, after we entered the program. So, &lt;code&gt;main()&lt;/code&gt; has to be synchronous. &lt;/p&gt;

&lt;p&gt;If that is the case, how does Tokio manage to make &lt;code&gt;main()&lt;/code&gt; async, if the top-level function cannot be async? Well, it does not. &lt;code&gt;#[tokio::main]&lt;/code&gt; will desugar &lt;code&gt;async fn main()&lt;/code&gt; into something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;Builder&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new_multi_thread&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.enable_all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.block_on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// ...&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When using the attribute macro &lt;code&gt;#[tokio::main]&lt;/code&gt;, we are building a runtime below &lt;code&gt;main()&lt;/code&gt;, a runtime that will handle the tree of futures. Why am I calling it a tree? Because a future may &lt;code&gt;.await&lt;/code&gt; other futures. I will talk more about multiple &lt;code&gt;.await&lt;/code&gt; calls later. For now, let us move on with this idea of handling a tree of futures.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#handling-the-tree-of-futures"&gt;
  &lt;/a&gt;
  Handling the tree of futures
&lt;/h3&gt;

&lt;p&gt;Consider the example below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[tokio::main]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;join!&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;'static&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;net&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;TcpListener&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"0.0.0.0:8080"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="nf"&gt;.accept&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"`foo()` is finished"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="s"&gt;"foo"&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nf"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"error"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;'static&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;net&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;TcpListener&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"0.0.0.0:8081"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="nf"&gt;.accept&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"`bar()` is finished"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="s"&gt;"bar"&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nf"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"error"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Tip: run the code above and connect to both &lt;code&gt;0.0.0.0:8080&lt;/code&gt; and &lt;code&gt;0.0.0.0:8081&lt;/code&gt; using your browser and check the result in the terminal where you ran the program.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When we call &lt;code&gt;foo().await&lt;/code&gt;, we are handing &lt;code&gt;foo()&lt;/code&gt;'s future to the runtime scheduler, the one responsible for calling &lt;code&gt;poll()&lt;/code&gt; on it. Futures are executed by the scheduler as part of &lt;a href="https://docs.rs/tokio/1.11.0/tokio/task/index.html"&gt;&lt;em&gt;tasks&lt;/em&gt;&lt;/a&gt;. You might think of a task as a thread that is not handled by the OS scheduler, but by the runtime scheduler (they are &lt;a href="https://en.wikipedia.org/wiki/Green_threads"&gt;virtual/green threads&lt;/a&gt;). &lt;/p&gt;

&lt;p&gt;This will run &lt;code&gt;foo()&lt;/code&gt; as far as possible towards completion, which means that the executor will not preemptively stop it to run something else in its stead (as the OS does with its threads). For the Tokio scheduler, as far as a task is doing relevant work, it may keep working. In a more technical jargon, tasks run until they &lt;em&gt;yield&lt;/em&gt;. In our example, &lt;code&gt;foo()&lt;/code&gt; runs until it starts listening at port &lt;code&gt;8080&lt;/code&gt;. If you're trying to understand which part of our code is explicitly yielding the task, give up. It is not there. We don't code yields, Rust manages that for us.&lt;/p&gt;

&lt;p&gt;After &lt;code&gt;foo()&lt;/code&gt; yields, &lt;code&gt;join!&lt;/code&gt; will call &lt;code&gt;bar()&lt;/code&gt;, which will run until it starts listening at port &lt;code&gt;8081&lt;/code&gt;. At this point, as both functions have yielded, we have two futures waiting to be polled again, and they may be polled in any order. Now, imagine that &lt;code&gt;foo()&lt;/code&gt; and/or &lt;code&gt;bar()&lt;/code&gt; call async functions inside them, giving new tasks to the scheduler. In a scenario like this, &lt;em&gt;we have a tree of futures.&lt;/em&gt; One important thing to understand here is that we have a "root-future" (the async book calls it “top-level future”, but I will stick with “root”); in this case, it is the future returned by that async block in &lt;code&gt;main&lt;/code&gt; (you will find inside &lt;code&gt;block_on()&lt;/code&gt; in the &lt;em&gt;desugared&lt;/em&gt; example). And this is important for at least two reasons.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, a task is responsible for a tree of futures. So, let's say we have an &lt;code&gt;async fn main()&lt;/code&gt;. As we saw, under the hood this is a normal &lt;code&gt;main()&lt;/code&gt; that will &lt;code&gt;block_on()&lt;/code&gt; an async block. If inside this future we &lt;code&gt;.await&lt;/code&gt; another future, it will be dealt by the same task, as it is part of the same tree.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second&lt;/strong&gt;, it points to the &lt;a href="https://www.youtube.com/watch?v=ThjvMReOXYM&amp;amp;t=4757s"&gt;threshold between concurrency and parallelism&lt;/a&gt;. If you just &lt;code&gt;.await&lt;/code&gt; or &lt;code&gt;join!&lt;/code&gt; futures, you will never have two Tokio tasks running simultaneously because, at the end, our &lt;code&gt;main()&lt;/code&gt; is &lt;code&gt;.await&lt;/code&gt;ing the root-future, and its node-futures are executed one after the other as part of the same task, hence in the same OS thread. In other words, your async program will have concurrency, but not parallelism. &lt;/p&gt;

&lt;p&gt;Revisiting our example, even if ports &lt;code&gt;8080&lt;/code&gt; and &lt;code&gt;8081&lt;/code&gt; are accessed at the same time, &lt;code&gt;foo()&lt;/code&gt; and &lt;code&gt;bar()&lt;/code&gt; will be executed one after the other because they are &lt;del&gt;fruits&lt;/del&gt; futures of the same tree. Sure, this is no big deal here, but if you remember that we are talking about network applications and, by doing so, extrapolate over this silly example, you will quickly see this cannot be right.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scheduling-parallel-tasks"&gt;
  &lt;/a&gt;
  Scheduling parallel tasks
&lt;/h3&gt;

&lt;p&gt;As mentioned above, &lt;code&gt;main()&lt;/code&gt; is the entry point of our program, so everything we are doing is below it. And what we have below (what &lt;code&gt;#[tokio::main]&lt;/code&gt; desugars to) is a &lt;code&gt;runtime&lt;/code&gt; that was built using &lt;code&gt;new_multi_thread()&lt;/code&gt;: &lt;em&gt;a multi-threaded Tokio runtime&lt;/em&gt;. So far, we have been using only one of those threads; it is running our task spawned by &lt;code&gt;block_on()&lt;/code&gt;. If we want parallelism, we need to hand our futures to the runtime itself, so they can become a "root-future" and, as such, become new tasks. To achieve this parallelism, that is, to allow the runtime to execute our tasks with a different worker of its thread pool, we got to &lt;code&gt;spawn&lt;/code&gt; the tasks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;collections&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mutex&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nd"&gt;#[tokio::main]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Mutex&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Default&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;default&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
    &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
    &lt;span class="nf"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Mutex&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;net&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;TcpListener&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"0.0.0.0:8080"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="nf"&gt;.accept&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;loop&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="nf"&gt;.try_lock&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
                    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"`foo()` is finished"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="nf"&gt;.insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"f"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nf"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Mutex&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;net&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;TcpListener&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"0.0.0.0:8081"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="nf"&gt;.accept&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;loop&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="nf"&gt;.try_lock&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
                    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"`bar()` is finished"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="nf"&gt;.insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nf"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Mutex&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;loop&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="nf"&gt;.try_lock&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="nf"&gt;.len&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="nf"&gt;.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"f"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="nf"&gt;.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, &lt;code&gt;foo()&lt;/code&gt; and &lt;code&gt;bar()&lt;/code&gt; become root-futures in their own right, and as &lt;code&gt;handle()&lt;/code&gt; is the single future within the &lt;code&gt;block_on()&lt;/code&gt; future, we end up with three different trees of futures. That way, if we call all three functions at the “same” time, they &lt;strong&gt;can&lt;/strong&gt; be executed in three different threads (assuming the runtime has these threads). &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I might have went a little over the top by using &lt;code&gt;Arc&amp;lt;Mutex&amp;lt;HashMap&amp;gt;&amp;gt;&lt;/code&gt;, since it could be dealt with in an easier manner with &lt;a href="https://docs.rs/tokio/0.2.2/tokio/task/struct.JoinHandle.html"&gt;&lt;code&gt;JoinHandle&lt;/code&gt;&lt;/a&gt;. My reasoning was that using the smart pointers made it easier to see the parallelism, as the &lt;code&gt;JoinHandle&lt;/code&gt; &lt;em&gt;looks&lt;/em&gt; very similar to how we use &lt;code&gt;.await&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#going-beyond"&gt;
  &lt;/a&gt;
  Going beyond
&lt;/h3&gt;

&lt;p&gt;If you want to go above and beyond, a good place to start is to understand how Tokio employs a work-stealing technique to manage its multithreaded scheduler.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#driver"&gt;
  &lt;/a&gt;
  Driver
&lt;/h2&gt;

&lt;p&gt;Let us reconsider our previous example. After &lt;code&gt;foo()&lt;/code&gt; and &lt;code&gt;bar()&lt;/code&gt; both yield, which happens once they start listening at &lt;code&gt;0.0.0.0&lt;/code&gt;, they return &lt;code&gt;Poll::Pending&lt;/code&gt;. As there is still work to be done, the scheduler will not get rid of them, but will not &lt;code&gt;poll()&lt;/code&gt; them again autonomously; it will &lt;code&gt;poll()&lt;/code&gt; them again under request. &lt;/p&gt;

&lt;p&gt;In this case, the source of the need to &lt;code&gt;poll()&lt;/code&gt; them again is the access to &lt;code&gt;0.0.0.0&lt;/code&gt;. However, if neither &lt;code&gt;foo()&lt;/code&gt; nor &lt;code&gt;bar()&lt;/code&gt; are actually running, which process will pull the trigger? Something has to be running to mediate our access to &lt;code&gt;0.0.0.0&lt;/code&gt; and the scheduler. That is the role of the &lt;strong&gt;driver&lt;/strong&gt;, which is how Tokio call its I/O event loop.&lt;/p&gt;

&lt;p&gt;Before diving into the driver, though, let us talk a bit more about what make it necessary: a pending future.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pending-future"&gt;
  &lt;/a&gt;
  Pending future
&lt;/h3&gt;

&lt;p&gt;Maybe this topic belongs to the scheduler, but as it is vital for an understanding of the driver, I think it also fits here.&lt;/p&gt;

&lt;p&gt;When we poll a future, it receives a &lt;code&gt;Context&lt;/code&gt; as an argument. Currently, this &lt;code&gt;Context&lt;/code&gt; is just a wrapper for the &lt;code&gt;&amp;amp;Waker&lt;/code&gt;. This &lt;code&gt;&amp;amp;Waker&lt;/code&gt; is a reference to the &lt;code&gt;Waker&lt;/code&gt; found within the task that calls &lt;code&gt;poll()&lt;/code&gt;. This &lt;code&gt;&amp;amp;Waker&lt;/code&gt; has a method &lt;code&gt;wake()&lt;/code&gt; that is called by the driver, so the task (that owns &lt;code&gt;Waker&lt;/code&gt;) becomes aware that it should &lt;code&gt;poll()&lt;/code&gt; the future once again. &lt;/p&gt;

&lt;p&gt;The following flow is an illustrative example of how it works:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A future is &lt;code&gt;.await&lt;/code&gt;ed.&lt;/li&gt;
&lt;li&gt;As such, it is handed to the scheduler task that was created by &lt;code&gt;block_on()&lt;/code&gt; (as we saw, &lt;code&gt;spawn&lt;/code&gt; also creates tasks).&lt;/li&gt;
&lt;li&gt;This task will &lt;code&gt;poll()&lt;/code&gt; the future, which will do some work until it reaches the point where it has to yield; let's say it is listening at some address, as our &lt;code&gt;foo()&lt;/code&gt; was.&lt;/li&gt;
&lt;li&gt;Before yielding, the future &lt;code&gt;clone()&lt;/code&gt; the &lt;code&gt;&amp;amp;Waker&lt;/code&gt; received as an argument in &lt;code&gt;poll()&lt;/code&gt;. That “binds” the future and the task.&lt;/li&gt;
&lt;li&gt;It yields, returning &lt;code&gt;Poll::Pending&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When the operating system's I/O receives a connection on that certain address, it will let the driver know.&lt;/li&gt;
&lt;li&gt;The driver will call &lt;code&gt;wake()&lt;/code&gt; on the &lt;code&gt;&amp;amp;Waker&lt;/code&gt; stored by the future, and this will wake up the task.&lt;/li&gt;
&lt;li&gt;The awoken task will then &lt;code&gt;poll()&lt;/code&gt; the future again. If it returns &lt;code&gt;Pending&lt;/code&gt; again, the new &lt;code&gt;Waker&lt;/code&gt; the was passed by this last &lt;code&gt;poll()&lt;/code&gt; will be copied and the process restarts.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The 6th and 7th steps describes the role of the driver as an interface between the OS and the task scheduler. This means that the driver will perform system calls to the OS, such as &lt;code&gt;kqueue&lt;/code&gt; in BSD/macOS, &lt;code&gt;IPCP&lt;/code&gt; in Windows or &lt;code&gt;epoll&lt;/code&gt; in Linux (and now we are hearing more and more about &lt;code&gt;io_uring&lt;/code&gt;, which Tokio handles as well). &lt;/p&gt;

&lt;p&gt;It is worth noting that the interaction is actually between the driver and &lt;code&gt;mio&lt;/code&gt;, so it is &lt;code&gt;mio&lt;/code&gt; who interacts with the OS. That being said, I will abstract from it here, so we can depict a simplified conversation between Tokio's driver and the OS I/O, which comprises the 6th step above.&lt;/p&gt;

&lt;p&gt;The driver, being an event &lt;em&gt;loop&lt;/em&gt;, will keep polling the OS using one of these system calls. Let us retrieve our &lt;code&gt;foo()&lt;/code&gt; example. If the driver polls the OS and find out that there was a connection at &lt;code&gt;0.0.0.0:8080&lt;/code&gt;, it will then &lt;code&gt;wake()&lt;/code&gt; the task for it to &lt;code&gt;poll()&lt;/code&gt; the future.&lt;/p&gt;

&lt;p&gt;Sure, there is a myriad of details left out. For example, how the communication via &lt;a href="https://tokio.rs/tokio/tutorial/channels"&gt;channels&lt;/a&gt; between the scheduler and the driver actually works? Nevertheless, I will respect the &lt;code&gt;beginners&lt;/code&gt; tag with which I marked this post and stop here. (Even because, if I write posts for beginners, it is not only because I think we still miss more introductory content, but also because of my own current limitations; and here we are teetering on the edge of my knowledge gap 🙃). &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#timer"&gt;
  &lt;/a&gt;
  Timer
&lt;/h2&gt;

&lt;p&gt;The module &lt;code&gt;tokio::time&lt;/code&gt; is part of the runtime and provides utilities for tracking time. I don't have much to talk about these, but I will, for the sake of completion, quote the part of the documentation that explains what this module provides:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;Sleep&lt;/code&gt;&lt;/strong&gt; is a future that does no work and completes at a specific &lt;code&gt;Instant&lt;/code&gt; in time.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;Interval&lt;/code&gt;&lt;/strong&gt; is a stream yielding a value at a fixed period. It is initialized with a &lt;code&gt;Duration&lt;/code&gt; and repeatedly yields each time the duration elapses.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;Timeout&lt;/code&gt;&lt;/strong&gt;: Wraps a future or stream, setting an upper bound to the amount of time it is allowed to execute. If the future or stream does not complete in time, then it is canceled and an error is returned.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;p&gt;I will stop here for today. I feel there is a lot missing, but this post is already longer than I wanted. Hopefully, we will be able to revisit some topics as we move on to talk about the other crates.&lt;/p&gt;

&lt;p&gt;As always, if you spot something &lt;/p&gt;

&lt;p&gt;See you there!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://unsplash.com/photos/4u2U8EO9OzY"&gt;Pawel Nolbert&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>rust</category>
      <category>beginners</category>
      <category>tokio</category>
      <category>runtime</category>
    </item>
    <item>
      <title>Map, Filter and Reduce explained.</title>
      <author>namitmalasi</author>
      <pubDate>Sun, 12 Sep 2021 13:37:20 +0000</pubDate>
      <link>https://dev.to/namitmalasi/map-filter-and-reduce-explained-19np</link>
      <guid>https://dev.to/namitmalasi/map-filter-and-reduce-explained-19np</guid>
      <description>&lt;p&gt;You probably have heard of .map(), .reduce() and .filter(). &lt;br&gt;
Map, reduce, and filter are all array methods in JavaScript.In this article, you will learn why and how to use each one. &lt;br&gt;
I will try and explain with examples of how each of these functions works.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#map"&gt;
  &lt;/a&gt;
  map()
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;map()&lt;/strong&gt; is used to transform an array. It creates a new array populated with the results of the calling function on every element in the calling array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const array=[1,2,3,4,5];

const output=array.map(element=&amp;gt;
 {
  return element*2;
})

console.log(output);  // [2,4,6,8,10]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code,&lt;br&gt;
array ===calling array&lt;br&gt;
element=&amp;gt;{...} ===calling function&lt;/p&gt;

&lt;p&gt;The array elements are being traversed one by one and in each iteration the current element is multiplied by 2. The new value is pushed into a new array and after the traversal is complete we get a new array of elements in the output.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#filter"&gt;
  &lt;/a&gt;
  filter()
&lt;/h3&gt;

&lt;p&gt;Filter is used to filter the array. &lt;strong&gt;filter()&lt;/strong&gt; method creates a new array with all the elements that pass the test implemented by the provided function.&lt;br&gt;
If the test condition returns true, the element gets pushed to the output array. If the condition returns false, the element does not get pushed to the output array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const array=[10,23,55,40,111];

const output=array.filter(element=&amp;gt;
                      {
  return element%2;
})

console.log(output);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above it is filtering out all the odd elements from the array based on the test implemented in the function and pushing them into a new array and then returning the new array.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reduce"&gt;
  &lt;/a&gt;
  reduce()
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;reduce()&lt;/strong&gt; method executes a reducer function on each element of the array, resulting in a single output value.&lt;br&gt;
The reducer function takes two-parameter (accumulator, current).&lt;/p&gt;

&lt;p&gt;accumulator= the returned value of the previous iteration&lt;br&gt;
current=the current item in the array&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const array=[1,2,3,4,5,6,7,8,9];

const output=array.reduce((acc,curr)=&amp;gt;
{
acc=acc+curr
 return acc

},0)

console.log(output);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code calculates the sum of the elements of the array.&lt;br&gt;
The initial value of acc is set to 0 as mentioned in the code. On each iteration, the current element is added to acc, and hence at last the total sum is returned.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;I really hope that you enjoyed reading this article and learned something from it. If you have any doubt or you think i missed something let me know in the comments. Feel free to like and share the post. &lt;br&gt;
You can connect with me on:&lt;br&gt;
Twitter:&lt;a href="https://twitter.com/namitmalasi"&gt;Namit Malasi&lt;/a&gt;&lt;br&gt;
LinkedIn:&lt;a href="https://www.linkedin.com/in/namit-malasi-a4b56310a/"&gt;Namit Malasi&lt;/a&gt;&lt;br&gt;
Github: &lt;a href="https://github.com/namitmalasi"&gt;Namit Malasi&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>functional</category>
    </item>
    <item>
      <title>Role of Mobile Forensics in dealing with Mobile Threats.</title>
      <author>Prasan Singh</author>
      <pubDate>Sun, 12 Sep 2021 12:57:25 +0000</pubDate>
      <link>https://dev.to/prasan26/various-threats-associated-with-mobile-devices-and-identify-mobile-forensics-role-in-dealing-with-them-1kpg</link>
      <guid>https://dev.to/prasan26/various-threats-associated-with-mobile-devices-and-identify-mobile-forensics-role-in-dealing-with-them-1kpg</guid>
      <description>&lt;p&gt;Mobile devices such as smartphones and tablets have become an integral part of modern first world life. There are literally billions of active mobile devices. Each device typically contains a large amount of sensitive data about the user, as well as individuals and organizations with which the user interacts. They also act as endpoints that are typically authenticated and authorized to access a wide variety of secured systems. And most mobile devices are connected to the public internet a significant amount of the time. Mobile devices are small mobile computing devices. Each is comprised of a combination of hardware and software. Each is potentially susceptible to compromise by many different means. Various threats associated with mobile devices are listed below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Data Leakage. &lt;/li&gt;
&lt;li&gt;Mobile apps are often the cause of unintentional data leakage.&lt;/li&gt;
&lt;li&gt;Unsecured Wi-Fi.&lt;/li&gt;
&lt;li&gt;Network Spoofing.&lt;/li&gt;
&lt;li&gt;Phishing Phishing and social engineering attacks.&lt;/li&gt;
&lt;li&gt;Broken Cryptography.&lt;/li&gt;
&lt;li&gt;Improper Session Handling.&lt;/li&gt;
&lt;li&gt;Poor cyber hygiene, including weak passwords and improper or 
no use of multifactor authentication (MFA)&lt;/li&gt;
&lt;li&gt;Poor technical controls, such as improper session handling, 
out-of-date devices and operating systems, and cryptographic 
controls&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Perhaps the most difficult threat to defend against is the user. Users can be turned into unwilling accomplices of an adversary through many types of social engineering, or they can simply make a mistake in configuring or using the device. Either way, the technical security controls can often be defeated by the user being induced to do the wrong thing through error, trickery, coercion, or ill intent. Once this occurs, the systems to which they have access, such as their employer, can be at risk, as well as their own sensitive data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xpNbUm_q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vs8mrvr9719dlx3m9bd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xpNbUm_q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vs8mrvr9719dlx3m9bd.png" alt="Screenshot (397)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mobile devices can be attacked via web browser, email clients, instant messaging systems, and through compromised or malicious apps. Once compromised, an adversary may compromise the confidentiality, integrity, or availability of the data on the device, or may use the device as a way to do the same on systems to which the mobile device is connected&lt;/p&gt;

&lt;p&gt;A compromised mobile device may also be used as a resource by an adversary. They may, for example, use it to send spam email or unsolicited text messages. They might use it to mine cryptocurrency. Or they might use it to artificially increase the number of clicks on advertising to fraudulently gains ad revenue.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8uaRFWOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1pum8pyybnkbipqwaj4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8uaRFWOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1pum8pyybnkbipqwaj4.png" alt="ipconfig-help"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A mobile device that is lost may contain data that has not been properly backed up elsewhere, resulting in loss of that data. This may result in economic loss as well as non-monetary consequences. If that data is subject to unauthorized access by an adversary, there may be additional consequences ranging from economic to legal to reputational.&lt;/p&gt;

&lt;p&gt;As noted in the text Forensic science: An introduction (Saferstein, 2016), and presented on YouTube (Hinkson, 2019), digital forensic investigation of a mobile device can provide evidence that can be used to determine the temporal order of events as well as a causal chain of cause and effect. By gathering evidence, we can help determine the facts, and may be able to determine who is responsible as well as how and why the crime occurred. By gathering the evidence, we can help in determining the facts of innocence or guilt of a suspect, and/or by performing post-compromise analysis, we may be able to determine how an adversary compromised the security of a device and help improve security controls in the future. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#hack-this-fall-20"&gt;
  &lt;/a&gt;
  Hack This Fall 2.0
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Hack This Fall&lt;/strong&gt; is an Online Hackathon powered by MLH. It is taking place shortly, you can join this Hackathon by the following link: &lt;a href="https://hackthisfall.devpost.com/"&gt;https://hackthisfall.devpost.com/&lt;/a&gt; and Use code &lt;strong&gt;HTFHE030&lt;/strong&gt; while registering for it. Don't let an awesome opportunity go! &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6EbMwR-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nyc7tdp9g6hpwhr0vmb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6EbMwR-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nyc7tdp9g6hpwhr0vmb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cybersecurity</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Image Creation,
Management, and Registry(Part 1)</title>
      <author>Deepak Porwal</author>
      <pubDate>Sun, 12 Sep 2021 12:35:35 +0000</pubDate>
      <link>https://dev.to/dporwal/image-creation-management-and-registry-part-1-pk9</link>
      <guid>https://dev.to/dporwal/image-creation-management-and-registry-part-1-pk9</guid>
      <description>&lt;h3&gt;
  &lt;a href="#working-with-docker-images"&gt;
  &lt;/a&gt;
  Working with Docker Images
&lt;/h3&gt;

&lt;p&gt;Every Docker container is based on an image.&lt;/p&gt;

&lt;p&gt;Till now we have been using images that were created by others and available in Docker Hub.&lt;/p&gt;

&lt;p&gt;Docker can build images automatically by reading the instructions from a Dockerfile&lt;/p&gt;

&lt;p&gt;A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W9L4pt-c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7yjvsd1903ntc4oar2r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W9L4pt-c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7yjvsd1903ntc4oar2r.png" alt="Dockerfile build"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#overview-of-dockerfile"&gt;
  &lt;/a&gt;
  Overview of Dockerfile
&lt;/h3&gt;

&lt;p&gt;Basic format of Dockerfile:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; busybox&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; cat.txt&lt;/span&gt;
&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="s"&gt; add.txt&lt;/span&gt;
&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="s"&gt; compress/tar.gz /tmp&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["sh"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A Dockerfile must start with a FROM instruction.&lt;br&gt;
The FROM instruction specifies the Base Image from which you are building.&lt;/p&gt;

&lt;p&gt;There are multiple INSTRUCTIONS that are available in Dockerfile, some of these include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  FROM&lt;/li&gt;
&lt;li&gt;  RUN&lt;/li&gt;
&lt;li&gt;  CMD&lt;/li&gt;
&lt;li&gt;LABEL&lt;/li&gt;
&lt;li&gt;EXPOSE&lt;/li&gt;
&lt;li&gt;ENV&lt;/li&gt;
&lt;li&gt;ADD&lt;/li&gt;
&lt;li&gt;COPY&lt;/li&gt;
&lt;li&gt;ENTRYPOINT&lt;/li&gt;
&lt;li&gt;VOLUME&lt;/li&gt;
&lt;li&gt;USER&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many more....&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#copy-vs-add-instruction"&gt;
  &lt;/a&gt;
  COPY vs ADD Instruction
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;COPY&lt;/em&gt; and &lt;em&gt;ADD&lt;/em&gt; are both Dockerfile instructions that serve similar purposes.&lt;/p&gt;

&lt;p&gt;They let you copy files from a specific location into a Docker image.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#difference-between-copy-and-add"&gt;
  &lt;/a&gt;
  Difference between COPY and ADD
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;COPY&lt;/em&gt;&lt;/strong&gt; takes in an src and destination. It only lets you copy in a local file or directory from your host&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;ADD&lt;/em&gt;&lt;/strong&gt; lets you do that too, but it also supports 2 other sources.&lt;/p&gt;

&lt;p&gt;First, you can use a URL instead of a local file/directory. Secondly, you can extract a tar file from the source directly into the destination.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#use-wgetcurl-wherever-possible"&gt;
  &lt;/a&gt;
  Use WGET/CURL wherever possible
&lt;/h4&gt;

&lt;p&gt;Using ADD to fetch packages from remote URLs is strongly discouraged; you should use curl or wget instead.&lt;/p&gt;

&lt;p&gt;This will execute all the lines repeatedly, will execute everytime same file. So, its not a good practice&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;ADD&lt;/span&gt;&lt;span class="s"&gt; http://example.com/big.tar.xz /usr/src/things/&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-xJf&lt;/span&gt; /usr/src/things/big.tar.xz &lt;span class="nt"&gt;-C&lt;/span&gt; /usr/src/things
&lt;span class="k"&gt;RUN &lt;/span&gt;make &lt;span class="nt"&gt;-C&lt;/span&gt; /usr/src/things all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will not create unnecessary files and will make a sequence, which will deal with only file file and then process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /usr/src/things &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; curl &lt;span class="nt"&gt;-SL&lt;/span&gt; http://example.com/big.tar.xz &lt;span class="se"&gt;\
&lt;/span&gt;    | &lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-xJC&lt;/span&gt; /usr/src/things &lt;span class="se"&gt;\
&lt;/span&gt;    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class="nt"&gt;-C&lt;/span&gt; /usr/src/things all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets have a demo to show you how &lt;strong&gt;&lt;em&gt;ADD&lt;/em&gt;&lt;/strong&gt; work.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a Compressed file&lt;/li&gt;
&lt;li&gt;Create a Dockerfile and define the file to copy from to destination&lt;/li&gt;
&lt;li&gt;Run that Dockerfile&lt;/li&gt;
&lt;li&gt;Verify the Output on the Destination directory.&lt;/li&gt;
&lt;/ol&gt;

&lt;h5&gt;
  &lt;a href="#step-1-create-compressed-file"&gt;
  &lt;/a&gt;
  Step 1. Create Compressed file
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;root@dporwal-docker:~# &lt;span class="nb"&gt;touch &lt;/span&gt;compress.txt
root@dporwal-docker:~# &lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-czvf&lt;/span&gt; compress.tar.gz compress.txt 
root@dporwal-docker:~# docker build &lt;span class="nt"&gt;-t&lt;/span&gt; demobusybox &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Om5F1d5p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d98v9ueu25jxcgef7mwh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Om5F1d5p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d98v9ueu25jxcgef7mwh.png" alt="createCompressedfile"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-2-create-a-dockerfile-and-define-the-file-to-copy-from-to-destination"&gt;
  &lt;/a&gt;
  Step 2. Create a Dockerfile and define the file to copy from to destination
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;vi Dockerfile
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;dockerfile1&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qj2Qc-V4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ab6hu6futbb956xb4i9l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qj2Qc-V4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ab6hu6futbb956xb4i9l.png" alt="Dockerfile"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-3-run-that-dockerfile"&gt;
  &lt;/a&gt;
  Step 3. Run that Dockerfile
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker build &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-4-verify-the-output-on-the-destination-directory"&gt;
  &lt;/a&gt;
  Step 4. Verify the Output on the Destination directory.
&lt;/h4&gt;

&lt;p&gt;Start the container that is build by DOcerfile&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JuJMpHJR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2lurryux6f8l8bsmh28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JuJMpHJR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2lurryux6f8l8bsmh28.png" alt="verifyOutput"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#expose-instruction"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;EXPOSE&lt;/em&gt;&lt;/strong&gt; Instruction
&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;EXPOSE&lt;/em&gt; instruction informs Docker that the container listens on the specified network ports at runtime and it does not actually publish the port. It functions as a type of documentation between the person who builds the image and the person who runs the container, about which ports are intended to be published.&lt;/p&gt;

&lt;p&gt;In above dockerfile1 you can see the scenario where person will not be able to get the port it should intends to publish because of not using &lt;em&gt;EXPOSE&lt;/em&gt; command&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_3l0X6Ja--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gksefea5yg8sf8ageiby.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_3l0X6Ja--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gksefea5yg8sf8ageiby.png" alt="inaccesible"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, now we will use this &lt;em&gt;EXPOSE&lt;/em&gt; command Dockerfile.&lt;/p&gt;

&lt;p&gt;Here I'm creating a dockerfile, which will launch nginx server on port 9080.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; ubuntu:latest&lt;/span&gt;
&lt;span class="k"&gt;LABEL&lt;/span&gt;&lt;span class="s"&gt; version="0.0.1"&lt;/span&gt;
&lt;span class="k"&gt;LABEL&lt;/span&gt;&lt;span class="s"&gt; maintainer="porwal.deepak2000@gmail.com"&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get upgrade &lt;span class="nt"&gt;-y&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;nginx &lt;span class="nt"&gt;-y&lt;/span&gt; 

&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 9080&lt;/span&gt;

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["nginx", "-g", "daemon off;"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is my initial environment of my docker server.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ACc9oWII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mx2m576mf65fl7otafjv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ACc9oWII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mx2m576mf65fl7otafjv.png" alt="inital stage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we will run below commands to build the custom image &lt;em&gt;exposedemo&lt;/em&gt; with tag 0.0.1&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker image build &lt;span class="nt"&gt;--tag&lt;/span&gt; exposedemo:0.0.1 &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_sU-qhzr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yojc8oiv2020c6qz60ee.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_sU-qhzr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yojc8oiv2020c6qz60ee.png" alt="build exposedemo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here we will create a container from the &lt;em&gt;exposedemo&lt;/em&gt; image we build.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker container run &lt;span class="nt"&gt;-d&lt;/span&gt; exposedemo:0.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in this image you can see in yellow box the container is running on port &lt;strong&gt;9080&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BzT2hL_o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdwhpk4q7sjymy1mzado.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BzT2hL_o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdwhpk4q7sjymy1mzado.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;to Verify you can also use this command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker inspect exposedemo:0.0.1 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YS9lj2gZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6toe473r96zikg6g0nka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YS9lj2gZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6toe473r96zikg6g0nka.png" alt="verifyexpose"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#healthcheck-instruction"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;HEALTHCHECK&lt;/em&gt;&lt;/strong&gt; Instruction
&lt;/h3&gt;

&lt;p&gt;HEALTHCHECK instruction Docker allows us to tell the platform on how to test that our application is healthy.&lt;/p&gt;

&lt;p&gt;When Docker starts a container, it monitors the process that the container runs. If the process ends, the container exits. &lt;/p&gt;

&lt;p&gt;That's just a basic check and does not necessarily tell the detail about the application.&lt;/p&gt;

&lt;p&gt;We can specify certain options before the CMD operation, these includes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;HEALTHCHECK &lt;span class="nt"&gt;--interval&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;5s CMD ping &lt;span class="nt"&gt;-c&lt;/span&gt; 1 172.17.0.2

&lt;span class="nt"&gt;--interval&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;DURATION &lt;span class="o"&gt;(&lt;/span&gt;default: 30s&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;--timeout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;DURATION &lt;span class="o"&gt;(&lt;/span&gt;default: 30s&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;--start-period&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;DURATION &lt;span class="o"&gt;(&lt;/span&gt;default: 0s&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nt"&gt;--retries&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;N &lt;span class="o"&gt;(&lt;/span&gt;default: 3&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets create a container &lt;em&gt;demohealthcheck&lt;/em&gt; which we will be using to check the connection, and will create another container &lt;em&gt;monitor&lt;/em&gt; where we will implement &lt;strong&gt;HEALTCHECK&lt;/strong&gt; command by checking connection with &lt;em&gt;demohealthcheck&lt;/em&gt; container.&lt;/p&gt;

&lt;p&gt;Commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker container run &lt;span class="nt"&gt;-dt&lt;/span&gt; &lt;span class="nt"&gt;--name&lt;/span&gt; demohealthcheck busybox sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will get the IP Address of this container to connect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker inspect demohealthcheck 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ubgFHVUF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38w2tq1ce9p7wqzk0fcw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ubgFHVUF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38w2tq1ce9p7wqzk0fcw.png" alt="demohealthcheck"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now lets create dockerfile and implement &lt;em&gt;HEALTHCHECK&lt;/em&gt; command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; demohealthcheck&lt;/span&gt;
&lt;span class="k"&gt;HEALTHCHECK&lt;/span&gt;&lt;span class="s"&gt; --interval=5s CMD ping -c 1 172.17.0.3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gHVKB2HN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qvdi1xnc4altxdu0qidy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gHVKB2HN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qvdi1xnc4altxdu0qidy.png" alt="healthcheckdockerfile"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Building image and container from the above docker file and check the connection.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nlb_V7S9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebaey6ht7kixse1o4w1c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nlb_V7S9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebaey6ht7kixse1o4w1c.png" alt="monitoringimage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can also check the HEALTHCHECK Logs by&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker inspect monitor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CMp-ow5t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xjk9as718m2g4jvfnkl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CMp-ow5t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xjk9as718m2g4jvfnkl.png" alt="inspectmonitor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;if &lt;em&gt;ExitCode: 1&lt;/em&gt; then, there is something wrong with container.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Exit Code&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0: Success&lt;/td&gt;
&lt;td&gt;the container is healthy and ready to use&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1: Failure&lt;/td&gt;
&lt;td&gt;the container is not working correctly&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2: Reserved&lt;/td&gt;
&lt;td&gt;do not use the exit code&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;We can also use HealthCheck commands while building the container.&lt;br&gt;
like below we are using &lt;em&gt;--health-cmd&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-dt&lt;/span&gt; &lt;span class="nt"&gt;--name&lt;/span&gt; tmp &lt;span class="nt"&gt;--health-cmd&lt;/span&gt; &lt;span class="s2"&gt;"curl -f http://localhost"&lt;/span&gt; busybox sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and we will see that container is unhealthy.On doing &lt;em&gt;docker inspect tmp&lt;/em&gt; we found that curl command is not found.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s_UDN_CS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jajt8oig92y34njgfcl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s_UDN_CS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7jajt8oig92y34njgfcl.png" alt="unhealthycontainer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h9Etg-4g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m750agsusljqeqsjb3v3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h9Etg-4g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m750agsusljqeqsjb3v3.png" alt="curlcommandnotfound"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we will remove this container and will try to check the container after every 5 sec and it will retry 1 time on failure.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;you can try below command and let me know in discussion if you are good to do so.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-dt&lt;/span&gt; &lt;span class="nt"&gt;--name&lt;/span&gt; tmp &lt;span class="nt"&gt;--health-cmd&lt;/span&gt; &lt;span class="s2"&gt;"curl -f http://localhost"&lt;/span&gt; &lt;span class="nt"&gt;--health-interval&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;5s &lt;span class="nt"&gt;--health-retries&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 busybox sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;for more commands you can check:&lt;br&gt;
&lt;a href="https://docs.docker.com/engine/reference/run/#healthcheck"&gt;https://docs.docker.com/engine/reference/run/#healthcheck&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#dockerfile-entrypoint"&gt;
  &lt;/a&gt;
  Dockerfile &lt;strong&gt;&lt;em&gt;ENTRYPOINT&lt;/em&gt;&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The best use for ENTRYPOINT is to set the image’s main command&lt;br&gt;
ENTRYPOINT doesn’t allow you to override the command.&lt;br&gt;
It is important to understand the distinction between CMD and ENTRYPOINT.&lt;/p&gt;

&lt;p&gt;As, CMD command in Dockerfile can be overridden by runtime command. Whereas ENTRYPOINT command will append to the given command given at runtime.&lt;/p&gt;

&lt;p&gt;Sample Code Snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; ubuntu&lt;/span&gt;
&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["top", "-b"]&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["-c"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xiH1xjAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w72pz1vjqwl9zkvubvq5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xiH1xjAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w72pz1vjqwl9zkvubvq5.png" alt="CMD Command"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aZFeO__M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rksyf36qhynl292sxxze.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aZFeO__M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rksyf36qhynl292sxxze.png" alt="entrypoint"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#workdir-instruction"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;WORKDIR&lt;/em&gt;&lt;/strong&gt; Instruction
&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;WORKDIR&lt;/em&gt; instruction sets the working directory for any RUN, CMD, ENTRYPOINT, COPY and ADD instructions that follow it in the Dockerfile&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; busybox&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; /root/demo
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /root/demo&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;dporwal.txt
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ['/bin/sh']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SyW3hvAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytw4hdyzpm06j196jswo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SyW3hvAX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytw4hdyzpm06j196jswo.png" alt="workdircmd"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The WORKDIR instruction can be used multiple times in a Dockerfile&lt;/p&gt;

&lt;p&gt;Sample Snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WORKDIR /a
WORKDIR b
WORKDIR c
RUN pwd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output = /a/b/c&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7UY6Nq6m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r14v8lg88t71auoob9aw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7UY6Nq6m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r14v8lg88t71auoob9aw.png" alt="Exampleabove snippet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#env-instruction"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;ENV&lt;/em&gt;&lt;/strong&gt; Instruction
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Passing as argument during run time.&lt;/em&gt;&lt;br&gt;
The ENV instruction sets the environment variable  to the value .&lt;/p&gt;

&lt;p&gt;You can use -e, --env, and --env-file flags to set simple environment variables in the container you’re running or overwrite variables that are defined in the Dockerfile of the image you’re running.&lt;/p&gt;

&lt;p&gt;Example Snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;--env&lt;/span&gt; &lt;span class="nv"&gt;VAR1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;value1 &lt;span class="nt"&gt;--env&lt;/span&gt; &lt;span class="nv"&gt;VAR2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;value2 ubuntu &lt;span class="nb"&gt;env&lt;/span&gt; | &lt;span class="nb"&gt;grep &lt;/span&gt;VAR

Eg.
docker run &lt;span class="nt"&gt;-dt&lt;/span&gt; &lt;span class="nt"&gt;--name&lt;/span&gt; env01 &lt;span class="nt"&gt;--env&lt;/span&gt; &lt;span class="nv"&gt;USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;USERADMIN busybox sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gLydhUWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4f4nrbo4m11dq8ncv03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gLydhUWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4f4nrbo4m11dq8ncv03.png" alt="envcommand"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;implementation of ENV in dockerfile&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Example Snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; busybox&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; NGINX 1.2&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;touch &lt;/span&gt;web-&lt;span class="nv"&gt;$NGINX&lt;/span&gt;.txt
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["/bin/sh"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D3JvnPKQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4xn7jyl2p6agf6wfwc0q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D3JvnPKQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4xn7jyl2p6agf6wfwc0q.png" alt="envdockerfile"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/dporwal/docker-20kl"&gt;Getting Started with Docker&lt;/a&gt;&lt;/p&gt;

</description>
      <category>docker</category>
      <category>linux</category>
      <category>devops</category>
      <category>microservices</category>
    </item>
    <item>
      <title>localbitcoins clone script-a guide for entrepreneurs to develop a p2p exchange like localbitcoins </title>
      <author>banjamin</author>
      <pubDate>Sun, 12 Sep 2021 12:31:45 +0000</pubDate>
      <link>https://dev.to/banjamindev/localbitcoins-clone-script-a-guide-for-entrepreneurs-to-develop-a-p2p-exchange-like-localbitcoins-59ep</link>
      <guid>https://dev.to/banjamindev/localbitcoins-clone-script-a-guide-for-entrepreneurs-to-develop-a-p2p-exchange-like-localbitcoins-59ep</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-clone-script"&gt;
  &lt;/a&gt;
  what is CLONE SCRIPT?
&lt;/h2&gt;

&lt;p&gt;A clone script is the architecture of an existing website. These scripts are suitable for entrepreneurs to start an online website. The purpose of clone scripts is to help businesses start their exchanges so quickly and also at a lower price.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-develop-a-website-with-clone-scripts"&gt;
  &lt;/a&gt;
  Why develop a website with clone scripts?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Faster development:&lt;/strong&gt; a clone script is readymade software which means it doesn’t need all the time and effort for developing from scratch. So this ready-made platform will be customized easily and in less time. So you hit the market faster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cost-effective&lt;/strong&gt;:  we understood that clone script is developed from an existing website, so it needs less effort than developing a website from scratch so the less effort needs the lower the cost will be.&lt;br&gt;
&lt;strong&gt;Market view&lt;/strong&gt;: the clone scripts are mostly developed from successful and popular websites.  It means that website has shown its features and usability. So by developing a website using a clone script, your website will find its place among users faster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#localbitcoins-clone-scripts"&gt;
  &lt;/a&gt;
  Localbitcoins clone scripts
&lt;/h2&gt;

&lt;p&gt;For starting a peer-to-peer bitcoin exchange website like localbitcoins, &lt;a href="https://radindev.com/localbitcoins-clone-script/"&gt;localbitcoins clone script&lt;/a&gt;can be a good choice. Because localbitcoins clone script contains all the features and aspects of the localbitcoins. It helps to develop a website like localbitcoins with some customizing features.  The localbitcoins clone script is completely tested and debugged.&lt;br&gt;
Localbitcoins is a &lt;a href="https://radindev.com/p2p-crypto-exchange-script/"&gt;p2p exchange platform&lt;/a&gt; that connects the buyers and sellers of bitcoins.  Localbitcoins uses its user’s location to connect the sellers and buyers who are close together. So if you want to trade bitcoins you don’t need to trade with people far from yourself.  Localbitcoins is known for its fast transaction process and high security and liquidity. In the localbitcoins platform, sellers can post an ad for buying and selling bitcoins or they can choose among the existing ads. They provide their condition in the ad, by replying to the ads a chat box will pop up to make the communication easier for the traders.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QuLNNgCo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://radindev.com/wp-content/uploads/2021/09/4068825.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QuLNNgCo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://radindev.com/wp-content/uploads/2021/09/4068825.svg" alt="localbitcoins clone script"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages and disadvantages&lt;/strong&gt; &lt;br&gt;
&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;br&gt;
Most of the services are free&lt;br&gt;
High security &lt;br&gt;
due to several layers of security for users on the platform &lt;br&gt;
Enough trading pairs &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;br&gt;
The US users are not allowed to trade on the platform &lt;br&gt;
The customer support process is slow &lt;br&gt;
Lack of hard wallet system &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-feature-of-the-localbitcoins-website"&gt;
  &lt;/a&gt;
  The feature of the LocalBitcoins website:
&lt;/h2&gt;

&lt;p&gt;Chatbox system&lt;br&gt;
Token listing &lt;br&gt;
Ad based trading&lt;br&gt;
Low fees&lt;br&gt;
Large trade volume&lt;br&gt;
Accepts new cryptocurrencies&lt;br&gt;
Stringent security&lt;br&gt;
Abundant Altcoins&lt;br&gt;
Bonuses and rewards&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reasons-for-choosing-whitelabel-localbitcoins-clone-script"&gt;
  &lt;/a&gt;
  Reasons for choosing white-label localbitcoins clone script
&lt;/h2&gt;

&lt;p&gt;By using a white label localbitcoins clone script, you can customize the features and functionalities that are the requirements of the exchange community.&lt;br&gt;
The admin of the exchange platform can design and change the logo, and the theme or name of the website.&lt;br&gt;
Developing an exchange platform using white-label will cost less. &lt;br&gt;
You don’t need any technical or programming knowledge to launch a white-label exchange.&lt;br&gt;
Because the software is tested by professionals before you know that it will operate properly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-security-features-of-the-localbitcoins-platform"&gt;
  &lt;/a&gt;
  What are the security features of the localbitcoins platform?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;KYC&lt;/strong&gt;: In know your customer system, several steps are needed to establish the customer identity. This helps to ban scammers and reduce fraud.&lt;br&gt;
&lt;strong&gt;Escrow payments&lt;/strong&gt;: all transactions that are executed in the platform are covered by escrow protection.&lt;br&gt;
&lt;strong&gt;Login protection&lt;/strong&gt;: localbitcoins will make sure that you are logging into the platform with the same browser and with the same IP. If you log in from another web browser or with different IP it will require email verification.&lt;br&gt;
&lt;strong&gt;2FA&lt;/strong&gt;: the two-factor authentication allows users to set an additional pin for logging in. Two-factor authentication is an extra security layer that helps to prevent the accounts from being hacked.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#localbitcoins-clone-script-features"&gt;
  &lt;/a&gt;
  Localbitcoins clone script features
&lt;/h2&gt;

&lt;p&gt;Online/offline trading multi-currency support &lt;br&gt;
Multi-lingual&lt;br&gt;
Wallet secured with escrow &lt;br&gt;
Ad based trading &lt;br&gt;
Customized UI and UX &lt;br&gt;
Merchant dashboard&lt;br&gt;
2FA security&lt;br&gt;
Transaction history&lt;br&gt;
Open source code &lt;br&gt;
Multiple trading&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#which-is-the-best-cryptocurrency-exchange-software-development-company"&gt;
  &lt;/a&gt;
  Which is the best Cryptocurrency exchange software development company?
&lt;/h2&gt;

&lt;p&gt;Radindev is a leading company in the field of developing a cryptocurrency exchange. they have developed various crypto exchange platforms on blockchain and also they have developed clone scripts for their customers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-localbitcoins-clone-script-work"&gt;
  &lt;/a&gt;
  How does localbitcoins clone script work?
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Sign up to start trading:&lt;/strong&gt;&lt;br&gt;
 To start trading in local bitcoins clone script, first, you should signup and login into your account by using an email account or phone number.&lt;br&gt;
&lt;strong&gt;Verification:&lt;/strong&gt;&lt;br&gt;
 For the security of the trading in LocalBitcoins clone script, a user should pass the KYC verification and provide the KYC details and wait until gets verified by the admin.&lt;br&gt;
&lt;strong&gt;Trading:&lt;/strong&gt;&lt;br&gt;
By posting ads with its detail like accepted payment methods, trading limits and other details, they will start the buyers. Or they can find and choose among the existing advertisement. When one person chooses one of the ads the trading powered by escrow starts and until the end of the transactions it will be secured.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#now-lets-take-a-look-at-its-competitors"&gt;
  &lt;/a&gt;
  Now let’s take a look at its competitors:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HAtIpnpH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://radindev.com/wp-content/uploads/2021/09/ocalbitcoins-restricted-to-only-10-states-1200x675-1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HAtIpnpH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://radindev.com/wp-content/uploads/2021/09/ocalbitcoins-restricted-to-only-10-states-1200x675-1.jpg" alt="localbitcoins clone script"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Local bitcoins&lt;/strong&gt;&lt;br&gt;
Localbitcoins is a provider of a platform for cryptocurrency exchange. This private company is established in Finland in 2012.  They work in the field of financial services, technology, cryptocurrency, exchange, fintech, payments, and platforms. It has 28 employees now. The website has 3.3m visits per month.&lt;br&gt;
They have about 59.9k followers on Twitter and 13713 is their rank in Alexa.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---6gRjiMu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://radindev.com/wp-content/uploads/2021/08/Binance.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---6gRjiMu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://radindev.com/wp-content/uploads/2021/08/Binance.jpg" alt="binance"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Binance&lt;/strong&gt;&lt;br&gt;
One of its competitor websites is Binance. Binance is a company that offers a cryptocurrency exchange platform. This company was founded in 2017 and it’s working in the field of financial services technology, blockchain, cryptocurrency, exchange, fintech. &lt;br&gt;
Now it has around 3200 employees and different branches in, France, Germany, India, Singapore, us and some other countries. They have around 4.7m followers on Twitter. Their website rank in Alexa is 255. Binance has total funding of $10 m  the total visit of their website per month is around 250m. it has more than 10m users.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2OKZm2Pi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://radindev.com/wp-content/uploads/2021/09/OKEX-CLONE-SCRIPT.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2OKZm2Pi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://radindev.com/wp-content/uploads/2021/09/OKEX-CLONE-SCRIPT.svg" alt="okex clone script"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Okex&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Okex&lt;/strong&gt; is a private company founded in china in 2014 working on blockchain and provide financial services for traders globally all around the world. Recently they have almost 1000 employees and around 477.4k followers on Twitter. Their website rank in Alexa is 1425. Their website has 13.2 m visits per month.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dtvpy0Eo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://radindev.com/wp-content/uploads/2021/08/paxful-1-final-2-1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dtvpy0Eo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://radindev.com/wp-content/uploads/2021/08/paxful-1-final-2-1.jpg" alt="paxful"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Paxful&lt;/strong&gt;&lt;br&gt;
 &lt;strong&gt;Paxful&lt;/strong&gt; is a company developing a p2p bitcoin marketplace and an app for transferring money.it was established in 2015 and works in the field of technology, cryptocurrency, fintech, marketplace, and mobile app. It has 432 employees and 108k followers on Twitter.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1M-_R-dI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://radindev.com/wp-content/uploads/2021/09/comparison-employee.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1M-_R-dI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://radindev.com/wp-content/uploads/2021/09/comparison-employee.svg" alt="comparison"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>webdev</category>
      <category>cryptocurrency</category>
      <category>p2p</category>
    </item>
    <item>
      <title>You don't know spread operator !</title>
      <author>Valentin PARSY</author>
      <pubDate>Sun, 12 Sep 2021 12:27:23 +0000</pubDate>
      <link>https://dev.to/parsyvalentin/you-don-t-know-spread-operator-3gk2</link>
      <guid>https://dev.to/parsyvalentin/you-don-t-know-spread-operator-3gk2</guid>
      <description>&lt;p&gt;I was recently reading a &lt;a href="https://2ality.com/2021/08/iteration-helpers.html"&gt;blog post about iteration&lt;/a&gt; from &lt;a href="https://twitter.com/rauschma"&gt;Axel Rauschmayer&lt;/a&gt; (I suggest you follow him, all his posts are minegold for JS devs).&lt;br&gt;
This post was mindblowing to me as I learned so much about iteratables in JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-challenge-our-knowledge"&gt;
  &lt;/a&gt;
  Let's challenge our knowledge
&lt;/h3&gt;

&lt;p&gt;Let me sum up a bit of what I learned here with a small challenge to you : &lt;br&gt;
When I use the spread operator on a Number, I want the result to be an array that counts from 1 to the given value : &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g2Y3q-Gd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0z8hf4grikvwed044qoe.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g2Y3q-Gd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0z8hf4grikvwed044qoe.jpg" alt="Example in the chrome console"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-steps-to-an-answer"&gt;
  &lt;/a&gt;
  First steps to an answer
&lt;/h3&gt;

&lt;p&gt;First thing to do is try the code for yourself and you will see that using a spread operator on a Number throws an error =&amp;gt; &lt;strong&gt;Uncaught TypeError: X is not iterable&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Then &lt;strong&gt;what is an iterable&lt;/strong&gt; ? &lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators"&gt;An iterable is an object that defines an iteration behavior,&lt;/a&gt; meaning it has a property with a Symbol.iterator key and an iterator as value.&lt;br&gt;
This iterator should respect the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterator_protocol"&gt;iteration protocol&lt;/a&gt; which means it is a function that returns an object with a next fonction that returns an object with 2 properties : "value" (the current iteration's value) and "done" (a boolean indicating weither we are done iterating with this iterator or not).&lt;/p&gt;

&lt;p&gt;The spread operator is simply a consummer of such iterables: when you give it an iterable, it'll call the next function of its Symbol.iterator property until it returns an object with {done: true} (and push each time the result in an array).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#verify-that-with-an-array"&gt;
  &lt;/a&gt;
  Verify that with an Array
&lt;/h3&gt;

&lt;p&gt;An array in JavaScript is an iterable since it has an iterator as a value of its property with Symbol.iterator key.&lt;br&gt;
Here is how you can use this iterator :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MsDB5kFv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wg4tk254640lb3tjmc7j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MsDB5kFv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wg4tk254640lb3tjmc7j.jpg" alt="Usage of an array iterator in the chrome console"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#answer-to-the-challenge"&gt;
  &lt;/a&gt;
  Answer to the challenge
&lt;/h3&gt;

&lt;p&gt;So how do I make the spread operator not throwing an error when given a number ? You set the Symbol.iterator property on the Number primitive wrapper object.&lt;br&gt;
Let's make all numbers iterables ! &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ePHRC503--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwfhb43kg2abzaek28sk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ePHRC503--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwfhb43kg2abzaek28sk.jpg" alt="Setting the property on the Number's prototype"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Obviously you never want to change the prototype of a primitive wrapper object, it's too dangerous.&lt;br&gt;
But the knowledge of how iteration and the spread operator works is I think very valuable as a developper. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Paxful Clone Script-6 Steps to Provide an Exchange Website Like Paxful</title>
      <author>Radin Dev</author>
      <pubDate>Sun, 12 Sep 2021 12:23:44 +0000</pubDate>
      <link>https://dev.to/radindev/paxful-clone-script-6-steps-to-provide-an-exchange-website-like-paxful-953</link>
      <guid>https://dev.to/radindev/paxful-clone-script-6-steps-to-provide-an-exchange-website-like-paxful-953</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3FwK98fB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wo49tu8g1bq6z8bgn6by.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3FwK98fB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wo49tu8g1bq6z8bgn6by.png" alt="paxful is a p2p finance platform for trading cryptocurrencies"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-paxful"&gt;
  &lt;/a&gt;
  What is Paxful?
&lt;/h2&gt;

&lt;p&gt;Paxful is one of the best p2p finance platform for trading cryptocurrency. many companies are interested to launch &lt;strong&gt;&lt;a href="https://radindev.com/paxful-clone-script/"&gt;paxful clone script&lt;/a&gt;&lt;/strong&gt; similar to paxful exchange.&lt;br&gt;
In 2014, Ray Youssef and Artur Schaback founded EasyBitz which was then renamed to Paxful, which gets its name from the Latin word for "peace". They had one goal in mind when they created it: to make Bitcoin easier for everyone from businesses to traders. &lt;br&gt;
A lot of big problems in the world revolve around money, specifically earning it and transporting it. Sending money around the world is not fast or cheap in any way, but Paxful changed that.&lt;br&gt;
Paxful is the p2p cryptocurrency marketplace where buyers and sellers are connected for business. Having over 300 payment methods available on Paxful creates it unbelievably easy to find proper suggestions.&lt;br&gt;
The p2p system of Paxful removes limits. You can think of your Paxful account as your very own financial passport. Also, you can send money and buy things from halfway around the world. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d7Otoweg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlx35esq5rhfh0djw243.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d7Otoweg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlx35esq5rhfh0djw243.jpeg" alt="stats of paxful exchange"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, in this article, we supposed to analyze the process of functioning paxful exchange, paxful clone script, benefits, features, functions, white label paxful clone script and how to build exchange like paxful. Let’s find out what these are:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-clone-script"&gt;
  &lt;/a&gt;
  What is clone script?
&lt;/h2&gt;

&lt;p&gt;A clone script is a replacement code or architecture of an existing website. The purpose of the website clone script is, it helps the entrepreneurs to start business rapidly with popular and unique features and minimize the startup costs. Actually The Clone scripts are the copy of famous online businesses out there in the world. These scripts can be used by entrepreneurs to start their online business at ease.&lt;br&gt;
Some business owners say clone scripts are not legal. But it isn’t. Because cloning a website doesn’t mean that the clone scripts are made from the exact code of the existing website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-and-benefits-of-using-clone-script"&gt;
  &lt;/a&gt;
  Features and benefits of using clone script
&lt;/h3&gt;

&lt;p&gt;Scalable and Customizable:&lt;br&gt;
Clone scripts are used in developing the clone app and it is very easy to customize the clone scripts according to the requirement of the project of the client. &lt;br&gt;
Quick Launch:&lt;br&gt;
The clone scripts do not take a long time to run as they are predefined scripts and already written and capable to run quickly.&lt;br&gt;
Low Cost:&lt;br&gt;
the clone scripts are open source so we can get that from the original site of the existing app and can easily get that from there and use it in our app though we do not have to pay any amount hence results in it being cost-effective.&lt;br&gt;
High Success Rate:&lt;br&gt;
The clone scripts are very powerful and we know that these are already used on someone’s site or used by many others though it is bug-free and attracted by the users across the globe. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-the-purpose-of-clone-scripts"&gt;
  &lt;/a&gt;
  What’s the purpose of clone scripts?
&lt;/h3&gt;

&lt;p&gt;The ultimate purpose of clone scripts is to help budding entrepreneurs to start their own online business hassle-free. Also eliminate the cost and time of development of the business applications. The entrepreneurs can buy the clone script from any of the service providers and customize them based on their preferences.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#white-label-paxful-clone-script-to-get-high-cryptocurrency"&gt;
  &lt;/a&gt;
  White label Paxful Clone Script - To Get High Cryptocurrency
&lt;/h2&gt;

&lt;p&gt;White label Paxful Clone Script is a set of source code that contains all trading functionalities of the Paxful exchange website. White label Paxful clone script allows you to customize the features according to the current digital trend &amp;amp; it allows you to change brand name, logo, theme, design according to your business needs at that moment. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z9ZRypYM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1qg3en0b0uizwgsff0z7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z9ZRypYM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1qg3en0b0uizwgsff0z7.png" alt="steps to build a website like paxful"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-steps-to-build-website-like-paxful"&gt;
  &lt;/a&gt;
  6 steps to build website like paxful
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#step1-paxful-business-model"&gt;
  &lt;/a&gt;
  Step1: Paxful Business Model
&lt;/h3&gt;

&lt;p&gt;Paxful is one of the most advanced clone scripts that you can use for making a high-end crypto trading platform. Using this powerful solution, it is possible for any entrepreneur to create an exchange as impeccable as Paxful. It has made the cryptocurrency exchange development more valuable for all the parties involved. From the developers to the exchange owners, it is prolific for everyone. paxful clone script works on a very strong architectural design that paves way for some big changes. The replication gets easier only because the platform has allowed you to use its technology. Otherwise, the security aspects are unbeatable and the functionality is also matchless. With this program, it is even possible for you to have a very certain style of trade. It brings a string of plugins and features for the users. To guarantee an honest exchange on the website, smart contracts with escrow are used. To reduce fraud, with other methods of exchange on the site, a system of reviews and reputation ratings has been introduced.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-key-exchange-features"&gt;
  &lt;/a&gt;
  Step 2. Key Exchange Features
&lt;/h3&gt;

&lt;p&gt;Registration. To create a new Paxful account:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Open a web browser and launch the Paxful webpage&lt;/li&gt;
&lt;li&gt; Click Create account on the top right corner of the main page. ...&lt;/li&gt;
&lt;li&gt; Complete the following fields on the signup form: ...&lt;/li&gt;
&lt;li&gt; Click Create Paxful account. ...&lt;/li&gt;
&lt;li&gt; Complete your captcha verification.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;User profiles.  Your public profile contains a summary of your account and your history on Paxful. Also, you can add an avatar (photo or any image), indicate the phone number, main currency and very briefly tell about yourself. In addition, you can configure notification settings in your profile. &lt;br&gt;
Remember that your public profile is visible to other Paxful users. On your public profile, other Paxful users will be able to view the following information about you:&lt;br&gt;
• Username&lt;br&gt;
• Profile picture&lt;br&gt;
• Verification - information if your email, phone, ID or address are verified, and you were verified as a trusted vendor.&lt;br&gt;
• Reputation - an aggregation of the positive and negative feedback that you have received on Paxful.&lt;br&gt;
• Active offers - offers you created that are currently active.&lt;br&gt;
• Your profile language&lt;br&gt;
• Number of trade partners&lt;br&gt;
• Number of trades&lt;br&gt;
• Trade volume - total BTC you’ve traded on Paxful.&lt;br&gt;
• Number of users who trust you&lt;br&gt;
• Number of users who have blocked you&lt;br&gt;
• Time elapsed since you joined Paxful&lt;br&gt;
• Last time you were online on Paxful&lt;br&gt;
Note: Your public profile will contain all the IDs you have earned on Paxful and will help other users decide if you are a safe trade partner or not.&lt;br&gt;
Verification, Know Your Customer (KYC). Paxful is one of the few crypto marketplaces that enforce KYC verification procedures. Verification is an important part of Paxful as we aim to make the trading experience on our platform as safe as possible. Users who fail to verify their identity can continue to use the exchanger, but a limit on the volume of transactions will be set for them.&lt;br&gt;
Cryptocurrency wallet.  The Paxful wallet is useful, protected, and easy to use on all your devices. You can simply manage your funds and top up directly through p2p marketplace, and send or receive Bitcoin, in just a few clicks. Over 3 million people have used the Paxful wallet to send and receive over 40,000 BTC. Its best-in-class security features make it one of the most trusted wallets in the world — so you’ll never have to choose between security and convenience.&lt;br&gt;
Security tools. Cryptocurrency holders and traders are especially vulnerable to cyber-attacks since digital currencies only run electronically. This is why choosing a secure and reliable online Bitcoin wallet is very essential. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Choose a crypto wallet that fits your needs&lt;/li&gt;
&lt;li&gt;Enable two-factor authentication&lt;/li&gt;
&lt;li&gt;Encrypt your Bitcoin wallet&lt;/li&gt;
&lt;li&gt;Backup your entire wallet regularly&lt;/li&gt;
&lt;li&gt;Utilize the multi-signature feature&lt;/li&gt;
&lt;li&gt;Keep your software updated&lt;/li&gt;
&lt;li&gt;Use different passwords for different accounts&lt;/li&gt;
&lt;li&gt;Never give away your private key&lt;/li&gt;
&lt;li&gt;Don’t click on unknown or suspicious links&lt;/li&gt;
&lt;li&gt;Use a secure Internet connection&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UVOdk95d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ciu2fx27z5rcqr5zpqu2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UVOdk95d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ciu2fx27z5rcqr5zpqu2.png" alt="paxful,a cryptocurrency platform purchase, sale and exchange"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cryptocurrency purchase, sale and exchange. &lt;br&gt;
Over 350 ways to buy and sell Bitcoin: Select a payment method you like and trade directly with other people!&lt;br&gt;
1.Bank Transfers&lt;br&gt;
2.Exchange for Cash&lt;br&gt;
3.Other Wallet (Send to over 140 online wallets worldwide)&lt;br&gt;
4.Discounted Gift Cards&lt;br&gt;
5.Digital Currencies&lt;br&gt;
6.Goods &amp;amp; Services&lt;/p&gt;

&lt;p&gt;Escrow. Escrow in the financial sense means an arrangement where a third party (not the buyer or the seller)  holds funds in safekeeping pending the completion of a promised obligation. And enables users to get guaranteed transactons. It is best if it is open source software so that users can verify the integrity of the smart contract and the absence of errors in the code. &lt;br&gt;
Reviews and rating system. On the Paxful website, users can distinguish reliable counterparties from unscrupulous or scammers. They can be positive, neutral or negative. You can leave a response instantly after the successful completion of the transaction (or its failure). &lt;br&gt;
Customer support. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Customizable dashboard&lt;/li&gt;
&lt;li&gt; The ability to view site statistics (activity, trading volume, etc.)&lt;/li&gt;
&lt;li&gt; View user profiles&lt;/li&gt;
&lt;li&gt; Buy-Sell tab&lt;/li&gt;
&lt;li&gt; General information about the platform&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#step-3-monetization-of-the-cryptocurrency-exchange"&gt;
  &lt;/a&gt;
  Step 3. Monetization of the cryptocurrency exchange
&lt;/h3&gt;

&lt;p&gt;Publication fee. &lt;br&gt;
Buyer creates an escrow account&lt;br&gt;
One of the two parties, either the Buyer or Seller, will initiate the transaction. This process begins when the user inquires about the offering and creates an account on CryptoExchange. With an account set up, the two parties can solidify the terms of their agreement.&lt;br&gt;
Advertisements. Advertising promotion fees, posters, contextual advertising and paid links - all this is used on the site and in the Paxful application to increase the profitability of the platform.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-marketing-strategy"&gt;
  &lt;/a&gt;
  Step 4: Marketing Strategy
&lt;/h3&gt;

&lt;p&gt;The paxful cryptocurrency exchange was launched in 2014 and is a peer-to-peer Bitcoin marketplace, has recently entered India. In the first 21 weeks of 2020, Paxful has recorded a minimum of $1 million in weekly volumes. Since the beginning of May 2020, the weekly traded Bitcoin volumes have grown setting three consecutive all-time highs – with the week ending 17th May recording a total of $1.521 million (ATH).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-development-approaches"&gt;
  &lt;/a&gt;
  Step 5. Development approaches
&lt;/h3&gt;

&lt;p&gt;Template Solution. You can create a crypto exchange like Paxful using ready-made software. You can get it for free, for example, on GitHub, or buy for 300 - 1000 dollars. Free solutions usually have poor functionality and are not well tested for errors and other vulnerabilities. Paxful clones software sold may vary by manufacturer.&lt;br&gt;
Development from scratch. A more complex and expensive option to create a Paxful clone software, but it gives you more control over the development process and allows you to implement unique software solutions. The cost of creating a P2P crypto exchanger from scratch usually varies from 20 to 50 thousand dollars.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-6-get-the-consultation-from-the-experienced-clone-script-providers"&gt;
  &lt;/a&gt;
  Step 6. Get the consultation from the experienced clone script providers
&lt;/h3&gt;

&lt;p&gt;The script is usually developed by well-experienced and qualified experts. They take care of everything from development, design, testing, and deployment, allowing you to focus on just the customization part. There are many advantages involved with purchasing and deploying a Paxful clone script for your business.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-benefits-of-paxful-clone-script-to-start-a-p2p-cryptocurrency-exchange-software"&gt;
  &lt;/a&gt;
  The benefits of Paxful clone script to start a P2P cryptocurrency exchange software
&lt;/h2&gt;

&lt;p&gt;• Ready to launch&lt;br&gt;
• Skip development from scratch&lt;br&gt;
• No technical assistance&lt;br&gt;
• Easy customization&lt;br&gt;
• Save time and money&lt;br&gt;
These are benefits you can get to develop a P2P crypto exchange with Paxful clone script.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ylg0X72M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6pcsove2j4154zzhxym5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ylg0X72M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6pcsove2j4154zzhxym5.png" alt="paxful clone app development"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazing-paxful-clone-app-to-buy-and-sell-cryptos"&gt;
  &lt;/a&gt;
  Amazing Paxful Clone App - To Buy and Sell Cryptos
&lt;/h2&gt;

&lt;p&gt;Paxful Clone App Development Company&lt;br&gt;
Paxful Clone App is the cryptocurrency exchange trading app that contains all the crypto trading features of the Paxful app and also the additional features that help you to develop your own Crypto Exchange App such as Paxful. Ultra-fast transaction permits you trade crypto coins in a matter of seconds with 100+ payment gateway support.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Deploy Microservices on AWS ECS (Fargate) - Serverless</title>
      <author>Mubbashir Mustafa</author>
      <pubDate>Sun, 12 Sep 2021 12:16:04 +0000</pubDate>
      <link>https://dev.to/mubbashir10/deploy-microservices-on-aws-ecs-fargate-serverless-16el</link>
      <guid>https://dev.to/mubbashir10/deploy-microservices-on-aws-ecs-fargate-serverless-16el</guid>
      <description>&lt;p&gt;Amazon ECS (Amazon Elastic Container Service) is a highly scalable and fully managed container management service that makes it a breeze to run, stop, and manage containers on a cluster. You can use it to deploy your containerized applications or your microservices.&lt;/p&gt;




&lt;p&gt;Before we continue, here's a summary of key concepts in AWS ECS:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cluster"&gt;
  &lt;/a&gt;
  Cluster
&lt;/h4&gt;

&lt;p&gt;A logical grouping of your services or tasks&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#task-definition"&gt;
  &lt;/a&gt;
  Task Definition
&lt;/h4&gt;

&lt;p&gt;Specification about how your container(s) should be run on AWS ECS&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h4&gt;

&lt;p&gt;An instance of the &lt;code&gt;Task Definition&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#service"&gt;
  &lt;/a&gt;
  Service
&lt;/h4&gt;

&lt;p&gt;A task manager&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#section-1-create-an-aws-ecs-cluster"&gt;
  &lt;/a&gt;
  Section 1: Create an AWS ECS Cluster
&lt;/h3&gt;




&lt;p&gt;From the AWS console, navigate to AWS ECS&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xs6XOEc---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6mrgbu1n94fa7okhj5e3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xs6XOEc---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6mrgbu1n94fa7okhj5e3.png" alt="AWS ECR from AWS Console"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click 'Get started'&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hSu8X8Yg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/429wx6i3kte25uwnleiu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hSu8X8Yg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/429wx6i3kte25uwnleiu.png" alt="AWS ECS - Getting Started"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click 'Create cluster'&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ynkPLIye--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ntawo5kbp76q39bmn05f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ynkPLIye--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ntawo5kbp76q39bmn05f.png" alt="AWS ECS - Create Cluster"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select 'Network only' as cluster template, click &lt;code&gt;Next step&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UYmoz0va--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0swzeojn7tm6jkcz2iq5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UYmoz0va--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0swzeojn7tm6jkcz2iq5.png" alt="AWS Cluster creation template"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Configure your cluster and click 'Create'&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cluster name&lt;/em&gt;&lt;br&gt;
Give any meaningful name to your cluster&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Create VPC (optional)&lt;/em&gt;&lt;br&gt;
Enable to launch your cluster in a VPC (A VPC is an isolated portion of the AWS Cloud)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tags (optional)&lt;/em&gt;&lt;br&gt;
You can use them to help you organize/group your AWS resources&lt;/p&gt;

&lt;p&gt;&lt;em&gt;CloudWatch Container Insights&lt;/em&gt;&lt;br&gt;
Check to enable container insights (failures, restarts, CPU utilization, memory usage, .etc) and view them inside &lt;a href="https://aws.amazon.com/cloudwatch/"&gt;AWS Cloud Watch&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6dXHbEaI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/883uuaup1ssumtqs9p33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6dXHbEaI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/883uuaup1ssumtqs9p33.png" alt="AWS ECS Cluster Configuration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the cluster has been created, click 'View Cluster'&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3W4ccdQn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/263r2rps63bor55v0anv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3W4ccdQn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/263r2rps63bor55v0anv.png" alt="AWS ECS Cluster Creation"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#section-2-create-an-aws-ecs-task-definition"&gt;
  &lt;/a&gt;
  Section 2: Create an AWS ECS Task Definition
&lt;/h3&gt;




&lt;p&gt;From the left sidebar (expand it by clicking the hamburger menu from the left top), click 'Task Definitions'&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lGUQlGM2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipc96asf9t5fgij4yr97.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lGUQlGM2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipc96asf9t5fgij4yr97.png" alt="AWS ECS Task Definition"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click 'Create new Task Definition'&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uXUruzz7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvzzrr5yfr6wlkq8jdud.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uXUruzz7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvzzrr5yfr6wlkq8jdud.png" alt="Create new Task Definition in AWS ECS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select 'Fargate' and click 'Next step'&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8cTIlpoE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucstnlcpsoefwn9w1jao.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8cTIlpoE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucstnlcpsoefwn9w1jao.png" alt="Create Fargate type Task Definition in AWS ECS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Give a meaningful name to your task definition, leave the &lt;code&gt;Task Role&lt;/code&gt; field empty (or you can create a new role from &lt;a href="https://aws.amazon.com/iam/"&gt;IAM&lt;/a&gt; and select it here), and leave the 'Network mode' to &lt;code&gt;awsvpc&lt;/code&gt; (when launching as the Fargate type, only &lt;code&gt;awsvpc&lt;/code&gt; can be selected)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tSnFxNZA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ljfnhnf5thog4xm8d1n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tSnFxNZA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ljfnhnf5thog4xm8d1n.png" alt="AWS ECS Task Definition Configuration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select 'Create new role' (or select any other existing role that you have created, and configure vCPU and Memory size for this task (this determines what charges you will be paying for this task)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ITO9JooC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zv002utsrzqxnutbucz5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ITO9JooC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zv002utsrzqxnutbucz5.png" alt="Task Definition Resources in AWS ECS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click 'Add container'&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--85PNs6PZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6h4c1n6ul7q42j11c9n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--85PNs6PZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6h4c1n6ul7q42j11c9n.png" alt="Add container to AWS ECS Task Def"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Give a name to your container, in the image field paste the image URI of the image (If you are not familiar with AWS ECR then &lt;a href="https://dev.to/mubbashir10/push-docker-images-to-aws-ecr-4l7e"&gt;read this first&lt;/a&gt;), add port to which your container listens to (for example if your nodejs app is running on 3000, then you should enter 3000 in this field)&lt;/p&gt;

&lt;p&gt;You can skip the &lt;code&gt;Advanced container configuration&lt;/code&gt; but if you need to configure other aspects of your container (like health checks, volumes, networking, the environment variable, etc. then you can do that from this section). &lt;/p&gt;




&lt;p&gt;ℹ️ &lt;strong&gt;Note: You can add multiple containers under a Task definition&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;Once the container configuration is completed, click 'Add'&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wa2zaSpa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2i59ftn0qcorm559gf5t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wa2zaSpa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2i59ftn0qcorm559gf5t.png" alt="Add container to AWS ECS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can skip the integrations with &lt;a href="https://aws.amazon.com/about-aws/whats-new/2019/11/aws-launches-firelens-log-router-for-amazon-ecs-and-aws-fargate/"&gt;AWS Firelens&lt;/a&gt; and AWS App Mesh unless you need it. If you need to add volumes that should be accessible to every container within a task, do so from the volumes section. The Tags are optional and let you organize your AWS resources.&lt;/p&gt;

&lt;p&gt;Click 'Add'&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q8aoE37c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6m6wcsl84oiqjh44jtp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q8aoE37c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6m6wcsl84oiqjh44jtp.png" alt="Configure option for AWS ECS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the task definition has been created, it will show you a success message&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cML6EbtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwnvx0ry1kumfiavkxqj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cML6EbtN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwnvx0ry1kumfiavkxqj.png" alt="AWS ECS Clusters, Tasks, and Services"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#section-3-create-an-aws-ecs-service"&gt;
  &lt;/a&gt;
  Section 3: Create an AWS ECS Service
&lt;/h3&gt;




&lt;p&gt;Now go back to your cluster and click 'Deploy' (from the services section)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0UHzadwi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kuxmwkn8zp2bwq2typ33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0UHzadwi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kuxmwkn8zp2bwq2typ33.png" alt="Create a service in AWS ECS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Leave everything to default&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CD16iZFP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmu6kg0077nb3s9h6ivt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CD16iZFP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmu6kg0077nb3s9h6ivt.png" alt="AWS ECS Clusters, Tasks, and Services"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Application Type:&lt;/em&gt;&lt;br&gt;
Service&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Specify revision manually&lt;/em&gt;&lt;br&gt;
Uncheck&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Family&lt;/em&gt;&lt;br&gt;
Select the Task Definition you created earlier&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Revision&lt;/em&gt;&lt;br&gt;
Latest&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Service Name&lt;/em&gt;&lt;br&gt;
Any meaningful name&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Desired Tasks&lt;/em&gt;&lt;br&gt;
Enter the number of Tasks (instances) you want to run &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--68Xjjnwr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nitif21p2lfff31zf62g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--68Xjjnwr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nitif21p2lfff31zf62g.png" alt="Service deployment configuration AWS ECS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Load balancing&lt;/code&gt; is optional but recommended. Configure a load balancer to distribute incoming traffic across the tasks running in your service.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on 'Create a new load balancer'&lt;/li&gt;
&lt;li&gt;Give any meaningful name&lt;/li&gt;
&lt;li&gt;Enter in the port where you want AWS ELB (elastic load balancer) to listen on (this is not the container's port that you configured earlier in the task definition)&lt;/li&gt;
&lt;li&gt;Select HTTP/HTTPS as protocol (for HTTPS you will need to have a valid SSL certificate)&lt;/li&gt;
&lt;li&gt;Target group routes traffic from AWS ELB to tasks/instances; give any name and select the protocol as HTTP&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PnMQV3PJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58cu92c3e8gk9jxpxe72.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PnMQV3PJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58cu92c3e8gk9jxpxe72.png" alt="AWS ELB in AWS ECS Service"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the Networking section:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select the VPC in which your cluster and task definitions are (by default, it's always already selected)&lt;/li&gt;
&lt;li&gt;Select subnets (within VPC) where you want to deploy the task (I have selected all available subnets under my VPC)&lt;/li&gt;
&lt;li&gt;Select "Use an existing security group", and select a security group that allows inbound HTTP traffic - &lt;a href="https://dev.to/mubbashir10/control-inbound-outbound-traffic-using-aws-security-groups-4h69"&gt;learn how to create&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Every task can be associated with a Public IP address, disable it if you don't need a public IP&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NSN7ey-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9vrntw5h5aaxbvd76j6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NSN7ey-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h9vrntw5h5aaxbvd76j6.png" alt="Networking in AWS ECS Service"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add tags if you want to and then click &lt;code&gt;Deploy&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c13mordN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1a0ssovx3vdh8jmz54e8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c13mordN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1a0ssovx3vdh8jmz54e8.png" alt="Deploy services on AWS ECS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the service has deployed, it will change the status to "Active"&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oD4TKsrp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1tmuetpr8pj4vozp0idq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oD4TKsrp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1tmuetpr8pj4vozp0idq.png" alt="AWS ECS Service Deployed"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#section-4-access-the-aws-ecs-service"&gt;
  &lt;/a&gt;
  Section 4: Access the AWS ECS Service
&lt;/h3&gt;




&lt;p&gt;To access the service you can go to &lt;code&gt;AWS EC2-&amp;gt; Load Balancers-&amp;gt;Your Load Balancer Name&lt;/code&gt; and then copy the A-Record&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q7doT4dM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8vzfhpq3rgpaw6by9k6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q7doT4dM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8vzfhpq3rgpaw6by9k6.png" alt="AWS ECS Clusters, Tasks, and Services"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To access an individual task (provided you enabled the public IP earlier), go to &lt;code&gt;AWS ECS-&amp;gt;Services-&amp;gt;Your Service-&amp;gt;Logs-&amp;gt;Your Task-&amp;gt;Network-&amp;gt;Public IP&lt;/code&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--06IAme3V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s832nn2yz316h63hhwtn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--06IAme3V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s832nn2yz316h63hhwtn.png" alt="AWS ECS Clusters, Tasks, and Services"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Let's connect: &lt;/p&gt;

&lt;p&gt;Linkedin: &lt;a href="https://www.linkedin.com/in/mubbashir10/"&gt;https://www.linkedin.com/in/mubbashir10/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://twitter.com/mubbashir100"&gt;https://twitter.com/mubbashir100&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>devops</category>
      <category>docker</category>
      <category>microservices</category>
    </item>
    <item>
      <title>AdminLTE - Open-Source Django Starter</title>
      <author>Sm0ke</author>
      <pubDate>Sun, 12 Sep 2021 12:05:30 +0000</pubDate>
      <link>https://dev.to/sm0ke/adminlte-open-source-django-starter-1p28</link>
      <guid>https://dev.to/sm0ke/adminlte-open-source-django-starter-1p28</guid>
      <description>&lt;p&gt;Hello Coders!&lt;/p&gt;

&lt;p&gt;This article presents &lt;a href="https://appseed.us/admin-dashboards/django-dashboard-adminlte"&gt;AdminLTE Django&lt;/a&gt;, an open-source &lt;a href="https://appseed.us/admin-dashboards/django"&gt;Django Dashboard&lt;/a&gt; crafted on top of the latest stable version of &lt;strong&gt;AdminLTE&lt;/strong&gt;, an iconic Material UI design. The product, available for download on Github under the MIT License, has been updated recently to &lt;strong&gt;use the latest Django version&lt;/strong&gt; (3.2.6 LTS), &lt;strong&gt;SASS compilation&lt;/strong&gt; via Gulp and and &lt;strong&gt;improved Docker&lt;/strong&gt; scripts.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ynm-wJDp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpfcvpauywqnvp95x5ri.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ynm-wJDp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kpfcvpauywqnvp95x5ri.png" alt="AdminLTE - Open-source Django Dashboard, the calendar page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Probably the most simple way to get the product up &amp;amp; running in a local environment is to use the Docker setup as presented by the official product documentation and README file (saved on Github).&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Download the sources from the &lt;a href="https://appseed.us/admin-dashboards/django-dashboard-adminlte"&gt;product page&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;unzip django-dashboard-adminlte.zip
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;django-dashboard-adminlte
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Start &lt;strong&gt;AdminLTE Django&lt;/strong&gt; in Docker&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose pull
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose build 
&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once all commands are executed we should see this simple Django dashboard running in the browser:&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wg7Ipe0e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pjyzjcog5oxksf4jgvgp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wg7Ipe0e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pjyzjcog5oxksf4jgvgp.png" alt="AdminLTE - Open-source Django Dashboard Login Page. "&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;AdminLTE&lt;/strong&gt; - Charts Page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AZVlvrxX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pmc2fs746r3dr3qaxr52.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AZVlvrxX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pmc2fs746r3dr3qaxr52.png" alt="AdminLTE - Open-source Django Dashboard Charts Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#product-features"&gt;
  &lt;/a&gt;
  Product Features
&lt;/h2&gt;

&lt;p&gt;This new release of &lt;strong&gt;AdminLTE Django&lt;/strong&gt; comes with an important update regarding the dependencies and also other (less) important but useful features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dependencies Update: latest &lt;strong&gt;Django 3.2.6 LTS&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;SASS compilation&lt;/strong&gt; scripts via Gulp&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Docker&lt;/strong&gt; - improved scripts&lt;/li&gt;
&lt;li&gt;Codebase refactoring for an easier maintenance&lt;/li&gt;
&lt;li&gt;Free support via &lt;a href="https://discord.gg/fZC6hup"&gt;Discord&lt;/a&gt; and Github (issues tracker)&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://adminlte-django.appseed-srv1.com/"&gt;AdminLTE Django&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;li&gt;More &lt;a href="https://appseed.us/admin-dashboards/django"&gt;Django Dashboards&lt;/a&gt; - provided by AppSeed&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;Open-Source Admin Dashboards&lt;/a&gt; - a curated list with starters &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>adminlte</category>
      <category>dashboards</category>
      <category>opensource</category>
    </item>
    <item>
      <title>How to add Spring Boot and Gradle multi-project builds capabilities to your Nx workspace?</title>
      <author>khalil la</author>
      <pubDate>Sun, 12 Sep 2021 12:01:09 +0000</pubDate>
      <link>https://dev.to/gridou/how-to-add-spring-boot-and-gradle-multi-project-builds-capabilities-to-your-nx-workspace-53cd</link>
      <guid>https://dev.to/gridou/how-to-add-spring-boot-and-gradle-multi-project-builds-capabilities-to-your-nx-workspace-53cd</guid>
      <description>&lt;p&gt;I like to use Nx workspace to manage my projects. I don't put all my projects in one workspace but I use one workspace per multi-module project.&lt;br&gt;
It works nicely with node frameworks like angular, react, nest... But when its come to other languages and frameworks, we need to use custom plugins. &lt;/p&gt;

&lt;p&gt;In this article I will use my plugin &lt;code&gt;@jnxplus/nx-boot-gradle&lt;/code&gt; to add support of spring boot and Gradle multi-project builds to Nx workspace.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@jnxplus/nx-boot-gradle&lt;/code&gt; add to the Spring Boot world, an opinionated way to integrate Spring Boot apps/libs inside Nx workspace using Gradle multi-project builds.&lt;/p&gt;

&lt;p&gt;Let's show you how to use it.&lt;/p&gt;

&lt;p&gt;We start by creating a workspace :&lt;br&gt;
Open a terminal and run this command to create a new workspace :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-nx-workspace@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wen asked provide my-org as name and choose a empty workspace :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QEhZjTYh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/18sw4apaau7yn6502omr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QEhZjTYh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/18sw4apaau7yn6502omr.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now and in the same terminal go inside my-org folder :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;my-org 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#1-install-the-plugin"&gt;
  &lt;/a&gt;
  1. Install the plugin
&lt;/h3&gt;

&lt;p&gt;In the workspace root run this command to install the plugin :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; @jnxplus/nx-boot-gradle
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-add-spring-boot-and-gradle-wrapper-support"&gt;
  &lt;/a&gt;
  2. Add Spring boot and Gradle wrapper support
&lt;/h3&gt;

&lt;p&gt;The following command adds Spring boot and Gradle support (Gradle wrapper and config files) to the workspace. This only needs to be performed once per workspace.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nx generate @jnxplus/nx-boot-gradle:init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PB0GDRKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7uh1h43pghhl3godl6ld.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PB0GDRKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7uh1h43pghhl3godl6ld.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you see, the command add the following files :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gradle wrapper and Gradle executables for windows and Linux :
Using Gradle Wrapper we can distribute/share a project to everybody to use the same version and Gradle's functionality(compile, build, install...) even if it has not been installed&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;gradle.properties&lt;/code&gt; :
This file contain Spring Boot and dependency management versions that we will use for all apps and libs inside Nx worspace.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;settings.gradle&lt;/code&gt; :
Here we will add our apps and libs later so Gradle will be able to  perform its tasks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-usage"&gt;
  &lt;/a&gt;
  3. Usage
&lt;/h3&gt;

&lt;p&gt;Generate an application&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nx generate @jnxplus/nx-boot-gradle:application my-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When asked, provide answers or choose default :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0rv14EEc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ngg5uib5a9wnn1gra93.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0rv14EEc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ngg5uib5a9wnn1gra93.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check the &lt;code&gt;settings.gradle&lt;/code&gt;, here we added a entry for my-app :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rootProject.name &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'boot-multiproject'&lt;/span&gt;
include&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'apps:my-app'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Build the app&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nx build my-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Serve the app&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nx serve my-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;open &lt;a href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt; to see app working:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uCONWssk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxhxo65wmsoq3m8sjppm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uCONWssk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxhxo65wmsoq3m8sjppm.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Test the app&lt;br&gt;
To test the app run this command :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nx &lt;span class="nb"&gt;test &lt;/span&gt;my-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W_eQ3uQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nr1g48yrse7qqpe2z4k0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W_eQ3uQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nr1g48yrse7qqpe2z4k0.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What I like to do to see if test command is really working is breaking the tests, and run it again :&lt;/p&gt;

&lt;p&gt;So change the test and add a comma between Hello and World :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;@Test
public void shouldReturnHelloWorld&lt;span class="o"&gt;()&lt;/span&gt; throws Exception &lt;span class="o"&gt;{&lt;/span&gt;
  this.mockMvc.perform&lt;span class="o"&gt;(&lt;/span&gt;get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;.andDo&lt;span class="o"&gt;(&lt;/span&gt;print&lt;span class="o"&gt;())&lt;/span&gt;.andExpect&lt;span class="o"&gt;(&lt;/span&gt;status&lt;span class="o"&gt;()&lt;/span&gt;.isOk&lt;span class="o"&gt;())&lt;/span&gt;
                .andExpect&lt;span class="o"&gt;(&lt;/span&gt;content&lt;span class="o"&gt;()&lt;/span&gt;.string&lt;span class="o"&gt;(&lt;/span&gt;containsString&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hello, World"&lt;/span&gt;&lt;span class="o"&gt;)))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Perfect, now test target is failing :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--haUa_MUn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/08kf1id8zzdap3sekus9.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--haUa_MUn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/08kf1id8zzdap3sekus9.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Revert change and let's generate this time a library :&lt;br&gt;
To generate a library use this command :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nx generate @jnxplus/nx-boot-gradle:library my-lib
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When asked, provide answers or choose default :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gG4Izu3_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7xdo8dqgwn6li10zomh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gG4Izu3_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a7xdo8dqgwn6li10zomh.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check the &lt;code&gt;settings.gradle&lt;/code&gt;, here we added a entry for my-lib :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rootProject.name &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'boot-multiproject'&lt;/span&gt;
include&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'libs:my-lib'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
include&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'apps:my-app'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Like an app, we can build it and test it :&lt;br&gt;
Build :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nx build my-lib 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Test :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nx &lt;span class="nb"&gt;test &lt;/span&gt;my-lib 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we can't run it with serve target :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;PS C:&lt;span class="se"&gt;\U&lt;/span&gt;sers&lt;span class="se"&gt;\k&lt;/span&gt;hali&lt;span class="se"&gt;\d&lt;/span&gt;evs&lt;span class="se"&gt;\m&lt;/span&gt;y-org&amp;gt; nx serve my-lib
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  NX   ERROR  Cannot find target &lt;span class="s1"&gt;'serve'&lt;/span&gt; &lt;span class="k"&gt;for &lt;/span&gt;project &lt;span class="s1"&gt;'my-lib'&lt;/span&gt;
PS C:&lt;span class="se"&gt;\U&lt;/span&gt;sers&lt;span class="se"&gt;\k&lt;/span&gt;hali&lt;span class="se"&gt;\d&lt;/span&gt;evs&lt;span class="se"&gt;\m&lt;/span&gt;y-org&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hope you like this article, and give this plugin a try :)&lt;/p&gt;

&lt;p&gt;You can find the Github code here :&lt;br&gt;
&lt;a href="https://github.com/khalilou88/my-org"&gt;https://github.com/khalilou88/my-org&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nx</category>
      <category>springboot</category>
      <category>gradle</category>
    </item>
    <item>
      <title>Webpack Academy #7: More options on config file</title>
      <author>CodeOz</author>
      <pubDate>Sun, 12 Sep 2021 11:41:12 +0000</pubDate>
      <link>https://dev.to/codeoz/webpack-academy-7-more-options-on-config-file-405b</link>
      <guid>https://dev.to/codeoz/webpack-academy-7-more-options-on-config-file-405b</guid>
      <description>&lt;p&gt;We almost do it !&lt;/p&gt;

&lt;p&gt;This is the last webpack academy!&lt;/p&gt;

&lt;p&gt;I hope you like and learn it!&lt;/p&gt;

&lt;p&gt;Today will be easier than the last.&lt;/p&gt;

&lt;p&gt;I will show you some other interesting things to do in the config file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#name-options"&gt;
  &lt;/a&gt;
  Name options
&lt;/h3&gt;

&lt;p&gt;When we use &lt;code&gt;hash&lt;/code&gt; to name our bundle, we made something like 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[contenthash:8].js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But you can use another thing to &lt;strong&gt;properly&lt;/strong&gt; name your bundle !&lt;/p&gt;

&lt;p&gt;Use the &lt;code&gt;name&lt;/code&gt; option!&lt;/p&gt;

&lt;p&gt;So you can use this 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[name].[contenthash:8].js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we get something like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;myApp.ce59c821.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why do we get this name?&lt;/p&gt;

&lt;p&gt;To understand this, we should go back into the &lt;code&gt;entry&lt;/code&gt; property in our config file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;myApp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/style.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/main.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes, webpack will use the name given by your entry point (here &lt;code&gt;myApp&lt;/code&gt;) and put it into &lt;code&gt;[name]&lt;/code&gt; property!&lt;/p&gt;

&lt;p&gt;It works for css bundle also!&lt;/p&gt;

&lt;p&gt;But what happens with chunk file, since there are not defined in our config file?&lt;/p&gt;

&lt;p&gt;Do you understand that you can give a name to your chunk?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jsonObjectImport&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* webpackChunkName: "myChunkName" */&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./big-object.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Webpack will replace &lt;code&gt;[name]&lt;/code&gt; by the chunk name! (here &lt;code&gt;myChunkName&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;It's an important property to me since we can see the name of our bundle in our dist folder!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-alias"&gt;
  &lt;/a&gt;
  Create alias
&lt;/h3&gt;

&lt;p&gt;In order to avoid something like this &lt;code&gt;import toto from ../../../toto/toto&lt;/code&gt;, we can use alias to make something more readable like &lt;code&gt;import toto from @/toto/toto&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To achieve this, we need to use &lt;code&gt;resolve.alias&lt;/code&gt; in our config file !&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./src/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So if we need to import a file from &lt;code&gt;src/&lt;/code&gt; we can make this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/first&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;For more information about this &lt;a href="https://webpack.js.org/configuration/resolve/#resolvealias"&gt;https://webpack.js.org/configuration/resolve/#resolvealias&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#copy-webpack-plugin"&gt;
  &lt;/a&gt;
  Copy webpack plugin
&lt;/h3&gt;

&lt;p&gt;If you have any static files, you will see that theses static files will be not added into your &lt;code&gt;dist/&lt;/code&gt; folder!&lt;/p&gt;

&lt;p&gt;Since it will not be compiled by Webpack.&lt;/p&gt;

&lt;p&gt;If you need to add some static files into our &lt;code&gt;dist/&lt;/code&gt; folder like images or others things, you will need to use &lt;strong&gt;Copy Webpack plugin&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CopyPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
   &lt;span class="na"&gt;patterns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
      &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;src/static&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;static&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
   &lt;span class="p"&gt;}],&lt;/span&gt;
&lt;span class="p"&gt;}),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You put the source path of your statics files, and the name of the folder that will contain these files in our &lt;code&gt;dist/&lt;/code&gt; folder!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#environment-files"&gt;
  &lt;/a&gt;
  Environment files
&lt;/h3&gt;

&lt;p&gt;If you need to inject an environment file into your project, you will need to use this plugin &lt;strong&gt;DotenvPlugin&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Create an &lt;code&gt;.env&lt;/code&gt; with your value. (Here I push the env file for the example, but you should not push env file in your git project !)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;DotenvPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
   &lt;span class="na"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./.env&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./.env&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use sample with default env value also!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For more information: &lt;a href="https://github.com/nwinch/webpack-dotenv-plugin"&gt;https://github.com/nwinch/webpack-dotenv-plugin&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It's finished! I hope you like this series about Webpack!&lt;/p&gt;

&lt;p&gt;I like to write this, and I hope you learn a few things!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Code-Oz/webpack-academy/tree/6d960e309b390f07205f8d500e6a2163348b304d"&gt;You can check the source code at this commit&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;I hope you like this reading!&lt;/p&gt;

&lt;p&gt;If you want to have a nice article to read about web dev, you can subscribe to my FREE newsletter &amp;amp; get a &lt;strong&gt;cheatlist about Javascript&lt;/strong&gt; at this URL 👇&lt;/p&gt;

&lt;p&gt;🎁 &lt;a href="https://www.getrevue.co/profile/code__oz"&gt;MY NEWSLETTER&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;☕️ You can &lt;a href="https://www.buymeacoffee.com/CodeoZ"&gt;SUPPORT MY WORKS&lt;/a&gt; 🙏&lt;/p&gt;

&lt;p&gt;🏃‍♂️ You can follow me on 👇&lt;/p&gt;

&lt;p&gt;🕊 Twitter : &lt;a href="https://twitter.com/code__oz"&gt;https://twitter.com/code__oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👨‍💻 Github: &lt;a href="https://github.com/Code-Oz"&gt;https://github.com/Code-Oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you can mark 🔖 this article!&lt;/p&gt;

</description>
      <category>webpack</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
