<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Day 74 of 100 Days of Code &amp; Scrum: Tenth Weekly Retrospective</title>
      <author>Rammina</author>
      <pubDate>Sun, 09 Jan 2022 06:19:24 +0000</pubDate>
      <link>https://dev.to/rammina/day-74-of-100-days-of-code-scrum-tenth-weekly-retrospective-4me3</link>
      <guid>https://dev.to/rammina/day-74-of-100-days-of-code-scrum-tenth-weekly-retrospective-4me3</guid>
      <description>&lt;p&gt;Happy weekend, everyone!&lt;/p&gt;

&lt;p&gt;Today marks the end of first week of the year, and I was off to a fairly productive start! I managed to get a lot of things done with regards to my &lt;a href="https://www.rammina.com"&gt;company website&lt;/a&gt;, professional networking, job searching, and so on. Overall, it went fairly well, but there are things that could be improved upon.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cfj7y8Cl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641709020279/6SJ5d_etm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cfj7y8Cl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641709020279/6SJ5d_etm.png" alt="Rammina Restofund Page" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are still so many features I can add to my company website, but they are not necessary or needed currently. I will most likely put them on the backburner for the coming weeks.&lt;/p&gt;

&lt;p&gt;Let's move on to my weekly retrospective!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#weekly-sprint-goals"&gt;
  &lt;/a&gt;
  Weekly Sprint Goals
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#company-website"&gt;
  &lt;/a&gt;
  Company Website
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#higher-priority"&gt;
  &lt;/a&gt;
  Higher Priority
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;add more details to portfolio projects, like a "View More Details" that shows on a modal the technology stack and features of a specific project.&lt;/li&gt;
&lt;li&gt;add more sections to other pages and make them more detailed:

&lt;ul&gt;
&lt;li&gt;the &lt;a href="https://www.rammina.com/services"&gt;Services page&lt;/a&gt; could include specific sections for "Website Development," such as Frontend Web Development and Backend Web Development, what kind of technology stacks are used, and so on.&lt;/li&gt;
&lt;li&gt;Digital advertising, for example, could include different types of services and techniques such as email marketing, social media marketing, and the likes.&lt;/li&gt;
&lt;li&gt;Writing also could include different types of writing services, including articles, blogs, and etc.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;add a small subsection on the Contact section that says something like "or you can contact us via e-mail at &lt;a href="mailto:ramminadevdesign@gmail.com"&gt;&lt;/a&gt;&lt;a href="mailto:ramminadevdesign@gmail.com"&gt;ramminadevdesign@gmail.com&lt;/a&gt; or call us on number" below the submit button for the form.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#lower-priority"&gt;
  &lt;/a&gt;
  Lower Priority
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;add tags functionality for each blog post to make it easier to categorize.&lt;/li&gt;
&lt;li&gt;add lazy loading and infinite scrolling for all blog posts page (so data that is loaded by batches to reduce build time).&lt;/li&gt;
&lt;li&gt;add pages for different users and authors.&lt;/li&gt;
&lt;li&gt;allow registered users to comment on blog posts (going to use Disqus).&lt;/li&gt;
&lt;li&gt;add quality-of-life features:

&lt;ul&gt;
&lt;li&gt;filtering by tags&lt;/li&gt;
&lt;li&gt;search functionality&lt;/li&gt;
&lt;li&gt;sort blog posts and authors&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;add share on social media button (e.g. Twitter, LinkedIn, Facebook) for each blog post.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;continue to learn more about Scrum, through reading articles and watching videos.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#weekly-review"&gt;
  &lt;/a&gt;
  Weekly Review
&lt;/h2&gt;

&lt;p&gt;Here are the things I've managed to do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add a specific project details page for each individual portfolio project, like &lt;a href="https://www.rammina.com/resto-fund"&gt;RestoFund&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;attach alternative contact methods subsection for the &lt;a href="https://www.rammina.com/#contact"&gt;Contact section&lt;/a&gt;, such as e-mail and contact number.&lt;/li&gt;
&lt;li&gt;fix some of the bugs in my company website.&lt;/li&gt;
&lt;li&gt;learned a little bit more about Next.js.&lt;/li&gt;
&lt;li&gt;continued studying Scrum.&lt;/li&gt;
&lt;li&gt;expanded my network.&lt;/li&gt;
&lt;li&gt;I installed a Website Blocker Chrome extension to minimize distractions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#weekly-retrospective"&gt;
  &lt;/a&gt;
  Weekly Retrospective
&lt;/h2&gt;

&lt;p&gt;Moving on, let's tackle what I've managed to do well, what my shortcomings are, and what I could do better next time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-went-great"&gt;
  &lt;/a&gt;
  What Went Great
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I now have a page about the details for each project.&lt;/li&gt;
&lt;li&gt;there are now ways to contact me in case the message form does not work.&lt;/li&gt;
&lt;li&gt;cleaned up my website and fixed some bugs.&lt;/li&gt;
&lt;li&gt;continued learning Next.js and Scrum.&lt;/li&gt;
&lt;li&gt;expanded my network a little bit more.&lt;/li&gt;
&lt;li&gt;finally installed that website blocker that I've been procrastinating for months.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#some-mistakes-ive-made"&gt;
  &lt;/a&gt;
  Some Mistakes I've Made
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I planned to add too many features for my website, which is impossible to fit in a week.&lt;/li&gt;
&lt;li&gt;I still had days where I didn't code much.&lt;/li&gt;
&lt;li&gt;I pretty much neglected studying Typescript.&lt;/li&gt;
&lt;li&gt;I could learn more Next.js, by going through the documentation as I work.&lt;/li&gt;
&lt;li&gt;got distracted at times and couldn't focus much.&lt;/li&gt;
&lt;li&gt;I'm currently overwhelmed by the amount of choices I have, leading to analysis paralysis and I have hours when I go in circles without doing much.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#things-i-could-improve-on"&gt;
  &lt;/a&gt;
  Things I Could Improve On
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;focus my attention on my current priorities.&lt;/li&gt;
&lt;li&gt;be more disciplined with learning new things every day.&lt;/li&gt;
&lt;li&gt;prioritize the tasks that are more likely to help me meet my weekly goals.&lt;/li&gt;
&lt;li&gt;learn a little bit even if it's not much, on bad days.&lt;/li&gt;
&lt;li&gt;make some of my chores a lot easier to do in terms of workflow.&lt;/li&gt;
&lt;li&gt;try to automate the things I don't really have to do myself.&lt;/li&gt;
&lt;li&gt;avoid doing things that make me lazy, such as laying down on bed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scrum.org/resources/blog/typical-sprint-play-play"&gt;Typical Sprint: Play-by-play | Scrum.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scrum.org/resources/blog/2-best-scrum-masters-i-ever-worked-master-coaching-and-facilitation"&gt;The 2 Best Scrum Masters I Ever Worked With - The Master Of Coaching And Facilitation | Scrum.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=cl1Ch9ARdQs"&gt;How to Increase Domain Rating (Website Authority) | YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scrum.org/resources/blog/myth-8-scrum-master-junior-agile-coach"&gt;Myth 8: The Scrum Master is a Junior Agile Coach | Scrum.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for the support, everyone! Enjoy your weekend!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" alt="Rammina Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#other-media"&gt;
  &lt;/a&gt;
  Other Media
&lt;/h3&gt;

&lt;p&gt;Feel free to reach out to me in other media!&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://www.rammina.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BK-zilS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1638444046/rammina-button-128_x9ginu.png" alt="Rammina Logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://twitter.com/RamminaR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C341ckO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636792959/twitter-logo_laoyfu_pdbagm.png" alt="Twitter logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://github.com/Rammina"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4ZlXeay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636795051/GitHub-Emblem2_epcp8r.png" alt="Github logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>5 UX Tricks You Must Know in 2022</title>
      <author>Tapajyoti Bose</author>
      <pubDate>Sun, 09 Jan 2022 06:15:11 +0000</pubDate>
      <link>https://dev.to/ruppysuppy/5-ux-tricks-you-must-know-in-2022-5b2l</link>
      <guid>https://dev.to/ruppysuppy/5-ux-tricks-you-must-know-in-2022-5b2l</guid>
      <description>&lt;p&gt;Do you have what it takes to be an &lt;strong&gt;outstanding UX Developer&lt;/strong&gt; in 2022? &lt;em&gt;Add these tricks to your arsenal&lt;/em&gt; and witness your &lt;strong&gt;Development skills&lt;/strong&gt; break &lt;em&gt;new grounds that you didn't know even existed&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UacM9-P---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ck6sa4gk88chjl05lxui.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UacM9-P---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ck6sa4gk88chjl05lxui.gif" alt="let the party begin" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#three-click-rule"&gt;
  &lt;/a&gt;
  Three Click Rule
&lt;/h1&gt;

&lt;p&gt;What is the &lt;strong&gt;Three Click Rule&lt;/strong&gt; you ask? A &lt;em&gt;quick Google Search&lt;/em&gt; will reveal:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The three-click rule or three click rule is an unofficial web design rule concerning the design of website navigation. It suggests that a user of a website should be able to find any information with no more than three mouse clicks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Er... Why is this relevant?&lt;/em&gt; The decline in &lt;em&gt;attention span&lt;/em&gt; of the people lately has led to the origin of the &lt;strong&gt;Three Click Rule&lt;/strong&gt;. A &lt;strong&gt;click&lt;/strong&gt; is an interaction that results in the &lt;em&gt;highest cognitive load&lt;/em&gt;, because the &lt;em&gt;click works only in a small surface area&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;An alternative to &lt;em&gt;reduce the taxation&lt;/em&gt; on the brain, you can use &lt;strong&gt;gesture inputs&lt;/strong&gt; like &lt;strong&gt;swipes&lt;/strong&gt;, &lt;strong&gt;pinch&lt;/strong&gt; or &lt;strong&gt;double taps&lt;/strong&gt; (eg: &lt;strong&gt;Instagram&lt;/strong&gt; &amp;amp; &lt;strong&gt;LinkedIn&lt;/strong&gt;). The &lt;em&gt;general rule of thumb&lt;/em&gt; is, for &lt;strong&gt;double taps&lt;/strong&gt;, &lt;em&gt;the surface area should be large&lt;/em&gt;, else you fall in the same trap as the &lt;strong&gt;click&lt;/strong&gt; issue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y2Ac1tyr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/516lxs3n4e492hcsd26f.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y2Ac1tyr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/516lxs3n4e492hcsd26f.gif" alt="swipe" width="540" height="540"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#appropriate-use-of-white-space"&gt;
  &lt;/a&gt;
  Appropriate use of White Space
&lt;/h1&gt;

&lt;p&gt;This is &lt;em&gt;one of the most crucial pillars&lt;/em&gt; of &lt;strong&gt;Modern UX&lt;/strong&gt;. As you can see here, the one with &lt;strong&gt;more spaced-out content&lt;/strong&gt; &lt;em&gt;looks way professional&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eoEdEpAJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwvq1i7kgzpnu8lhyd6e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eoEdEpAJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwvq1i7kgzpnu8lhyd6e.png" alt="no space" width="368" height="284"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iu-bTDm5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gj0utgn31529kuywhymr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iu-bTDm5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gj0utgn31529kuywhymr.png" alt="spaced" width="441" height="323"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you gain more experience designing &lt;strong&gt;UX&lt;/strong&gt;, you slowly &lt;em&gt;develop an eye for it&lt;/em&gt; by default. It is also crucial to maintain &lt;strong&gt;consistent spacing&lt;/strong&gt; (the &lt;em&gt;padding/margin&lt;/em&gt; in the left &amp;amp; right sides should be equal, same is the case for the &lt;em&gt;padding/margin&lt;/em&gt; in the top &amp;amp; bottom)&lt;/p&gt;

&lt;p&gt;You also need to maintain &lt;em&gt;adequate spacing across sections&lt;/em&gt;, a &lt;strong&gt;highly spaced out section&lt;/strong&gt; should be followed by a &lt;strong&gt;section with low spacing&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GpaTkakv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/naajbklktvk4iyel4mm7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GpaTkakv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/naajbklktvk4iyel4mm7.jpg" alt="section spacing" width="749" height="582"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To avoid &lt;strong&gt;lopsided spacing&lt;/strong&gt;, one &lt;em&gt;hack&lt;/em&gt; is to use &lt;strong&gt;alternate positioning&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a8vJDhd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hfv685fj9ldfe0ugte4.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a8vJDhd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hfv685fj9ldfe0ugte4.PNG" alt="alternate positioning" width="880" height="356"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#scroll-interaction"&gt;
  &lt;/a&gt;
  Scroll Interaction
&lt;/h1&gt;

&lt;p&gt;The use of &lt;strong&gt;Scroll Interactions&lt;/strong&gt; such as &lt;strong&gt;Scroll Storytelling&lt;/strong&gt;, &lt;strong&gt;Parallax&lt;/strong&gt;, and more are on a &lt;em&gt;constant rise&lt;/em&gt; and can lead to truly &lt;em&gt;immersive websites&lt;/em&gt;. Even the &lt;a href="https://www.apple.com/in/mac-pro/"&gt;Mac Pro&lt;/a&gt; uses &lt;strong&gt;Scroll Interaction&lt;/strong&gt; on the &lt;em&gt;product page&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;These &lt;strong&gt;immersive scrolling experiences&lt;/strong&gt; are generally implemented using a technique known as &lt;strong&gt;Scroll Hijacking&lt;/strong&gt;, where &lt;em&gt;the scroll behavior is altered as per the requirement of the developer&lt;/em&gt;. Even though it has &lt;em&gt;enormous upsides&lt;/em&gt;, it comes with a &lt;em&gt;major catch&lt;/em&gt;: if not implemented properly, it can lead to &lt;strong&gt;severe accessibility issues&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o0kjoHHn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9qv6qyzna5leufzap6k.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o0kjoHHn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c9qv6qyzna5leufzap6k.gif" alt="scroll storytelling" width="880" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#masonry-grid"&gt;
  &lt;/a&gt;
  Masonry Grid
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gXinIIUA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52r7hiuehkku0xn9rdu0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gXinIIUA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52r7hiuehkku0xn9rdu0.jpg" alt="masonry grid" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Masonry Grid&lt;/strong&gt; had been around for a long time but saw a &lt;em&gt;rapid increase in popularity&lt;/em&gt; after the introduction of &lt;strong&gt;Windows 8&lt;/strong&gt;. It involves a &lt;em&gt;grid of elements with different sizes&lt;/em&gt; and &lt;strong&gt;provides a fresh feel&lt;/strong&gt; over &lt;em&gt;traditional grid items&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Unlike &lt;em&gt;most other items in this list&lt;/em&gt;, this one is possibly the &lt;strong&gt;easiest to implement&lt;/strong&gt; as it only requires &lt;strong&gt;CSS&lt;/strong&gt; knowledge.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/andybarefoot/embed/QMeZda?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cursor-interactions"&gt;
  &lt;/a&gt;
  Cursor Interactions
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Cursor Interactions&lt;/strong&gt; is the perfect way to keep a &lt;em&gt;user engaged in your website&lt;/em&gt; in this age of &lt;em&gt;dwindling attention spans&lt;/em&gt;. You have a &lt;em&gt;buffet of options&lt;/em&gt; to choose from ranging from &lt;strong&gt;Custom Cursors&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zXIOEuZn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aq96zkwge7l9qczq84lq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zXIOEuZn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aq96zkwge7l9qczq84lq.gif" alt="cursor interactions" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;to &lt;strong&gt;highly dynamic cursor interactions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ruppysuppy/embed/GRrbyXa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The target audience for the &lt;strong&gt;Cursor Interactions&lt;/strong&gt; are the &lt;strong&gt;desktop users&lt;/strong&gt;, so if your &lt;strong&gt;audience demographic&lt;/strong&gt; is mainly the &lt;strong&gt;phone users&lt;/strong&gt;, &lt;em&gt;you could opt out of using these interactions&lt;/em&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h1&gt;

&lt;p&gt;In this article, we went through some &lt;strong&gt;cool UX tricks&lt;/strong&gt; that you can &lt;em&gt;use in your applications to give them a modern feel&lt;/em&gt;. Hope this helps you in your journey!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fun Fact&lt;/strong&gt;: This was my &lt;strong&gt;50th article&lt;/strong&gt;, I have been writing &lt;em&gt;consistently for the past 50 weeks&lt;/em&gt;! When I started I had &lt;em&gt;a lot of doubt about who will read the articles&lt;/em&gt;, now I have a &lt;em&gt;lot of people supporting me&lt;/em&gt;. &lt;strong&gt;Thanks a lot to everyone who had been on this journey with me!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy Developing!&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h1&gt;

&lt;p&gt;Need a &lt;strong&gt;Top Rated Front-End Development Freelancer&lt;/strong&gt; to chop away your development woes? Contact me on &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to see what I am working on? Check out my &lt;a href="https://tapajyoti-bose.vercel.app"&gt;Personal Website&lt;/a&gt; and &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to connect? Reach out to me on &lt;a href="https://www.linkedin.com/in/tapajyoti-bose/"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am a freelancer who will start off as a &lt;strong&gt;Digital Nomad&lt;/strong&gt; in mid-2022. Want to catch the journey? Follow me on &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow my blogs for &lt;strong&gt;Weekly new Tidbits&lt;/strong&gt; on &lt;a href="https://dev.to/ruppysuppy"&gt;Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are a few commonly asked questions I get. So, I hope this &lt;strong&gt;FAQ&lt;/strong&gt; section solves your issues.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I am a beginner, how should I learn Front-End Web Dev?&lt;/strong&gt;&lt;br&gt;
Look into the following articles:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/front-end-developer-roadmap-zero-to-hero-4pkf"&gt;Front End Development Roadmap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ruppysuppy/5-projects-to-master-front-end-development-57p"&gt;Front End Project Ideas&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you mentor me?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Sorry, I am already under a lot of workload and would not have the time to mentor anyone.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you like to collaborate on our site?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
As mentioned in the &lt;em&gt;previous question&lt;/em&gt;, I am in a time crunch, so I would have to pass on such opportunities.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>webdev</category>
      <category>ux</category>
      <category>ui</category>
      <category>webdesign</category>
    </item>
    <item>
      <title>Deep dive into React codebase [EP1: Prerequisites]</title>
      <author>Nikita Grechino</author>
      <pubDate>Sun, 09 Jan 2022 06:06:48 +0000</pubDate>
      <link>https://dev.to/fromaline/deep-dive-into-react-codebase-ep1-prerequisites-33ak</link>
      <guid>https://dev.to/fromaline/deep-dive-into-react-codebase-ep1-prerequisites-33ak</guid>
      <description>&lt;h2&gt;
  &lt;a href="#preface"&gt;
  &lt;/a&gt;
  Preface
&lt;/h2&gt;

&lt;p&gt;My last article about the obscured history behind Hyperscript was warmly received, so I decided to pursue the matter...&lt;/p&gt;

&lt;p&gt;Have you ever found yourself in this annoying position where you are not exactly sure how things work under the hood? If you are a tinkerer, chances are it is almost a habit for you. So let's break it together!&lt;/p&gt;

&lt;p&gt;As a frontend developer, I can't find better technology to examine rather than React. Its codebase is big enough, well-tested, and filled with great code to learn from. Also, it's simply a really big deal for a frontend developer to understand how React works behind the scene.&lt;br&gt;
You’ve probably seen lots of articles and videos about React internals, so what’s the point in another one?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code-intense&lt;/strong&gt;&lt;br&gt;
We'll take a deep dive into the codebase, not into the React-related concepts. Of course, we will examine necessary concepts, but through their application in the source code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Practice-based&lt;/strong&gt;&lt;br&gt;
I’ll try to do my best to introduce as much practice-oriented content, as I possibly could to facilitate improvement in real-world coding skills. We will make our own versions of different parts of React, play around with its guts and hack them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Live series&lt;/strong&gt;&lt;br&gt;
I’ve planned to create a weekly series to divide and conquer the difficult task of investigating React internals. So we may take a thorough look and grasp the very nature of React source code.&lt;/p&gt;

&lt;p&gt;Enough promises, fasten your seat belts our journey begins now!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: This article turned out to be quite long. So if you had a hard time reading it, let me know in the comments section, and I will split up future articles into smaller chunks.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites-to-the-whole-series"&gt;
  &lt;/a&gt;
  Prerequisites to the whole series
&lt;/h2&gt;

&lt;p&gt;In this article, we'll sum up the needed fundamentals about React and its codebase to get our feet wet and lay the foundation for further investigations in future articles.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#where-did-react-come-from"&gt;
  &lt;/a&gt;
  Where did React come from?
&lt;/h3&gt;

&lt;p&gt;To understand the source code of React we need to understand why it was initially created. In other words, why source code was written in the first place?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Extra material: I got info for this paragraph from &lt;a href="https://youtu.be/KVZ-P-ZI6W4?t=89"&gt;this YouTube video&lt;/a&gt;, which was captured on the first React.js Conf in 2015. The video is filled with a ton of interesting details about the early days of React. If you are interested in extra info, check it out from 1:29 to 17:15.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The starting point&lt;/strong&gt;&lt;br&gt;
Back in 2011 developers at Facebook Ads Org wrote client-side JS applications following an MVC pattern and using two-way data binding along with templates. These apps were initially pretty simple, but they got more complicated over time because more features were added. &lt;br&gt;
So to maintain and extend these apps more developers were hired. Eventually, the growing number of app features and team members slowed down the whole development of these apps too much.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The main problem&lt;/strong&gt;&lt;br&gt;
The main technical issue was so-called &lt;strong&gt;cascading updates&lt;/strong&gt;. When some new data would flow in the app, some small change somewhere deep in the tree would cause a full re-render of the whole app from scratch. These updates were really slow because not only do you have to figure out what needs to be mutated, but you need to go and get the views to update themselves. Such updates not only hurt performance, but they added up over time and developers couldn't get their heads around to figure out what would cause the cascading updates in the first place.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: If you want to code an app with cascading updates in place to trace the problem, that led to React creation, let me know in the comments. I'll attempt to figure things out even more and make another tutorial-like article, where we would create an MVC client-side app like it's 2011 and we are a group of engineers at Facebook Ads Org.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The solution&lt;/strong&gt;&lt;br&gt;
The 'aha' moment happened when the team realized, that they already had code that describes what the app should look like with a given data. So conceptually, when changes happened, they could just &lt;strong&gt;re-execute the logic once again with a new set of data.&lt;/strong&gt;&lt;br&gt;
The only major problems with this approach were performance and glitches. Performance was bad because a full re-render is a CPU-intense calculation and glitches were a thing before different states (e.g. selection state) were lost when re-render happened.&lt;br&gt;
To resolve these issues, Jordan Walke built a prototype, that made this whole process more efficient and provided a reasonable user experience. He didn't have a name for it yet, but that's actually when React was born.&lt;/p&gt;

&lt;p&gt;Well, this was a long story short of &lt;strong&gt;why&lt;/strong&gt; React was created and now we understand the idea behind React.js.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Extra material: If you are eager to develop an even deeper understanding of the story behind React creation, check out &lt;a href="https://blog.risingstack.com/the-history-of-react-js-on-a-timeline/"&gt;this history timeline article&lt;/a&gt; by RisingStack Engineering team. The article contains all needed links and explanations, that you can follow to fully understand why React was born.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lets-pick-the-version-to-examine"&gt;
  &lt;/a&gt;
  Let's pick the version to examine
&lt;/h3&gt;

&lt;p&gt;React source code lives in &lt;a href="https://github.com/facebook/react"&gt;the official repository&lt;/a&gt; on GitHub.&lt;br&gt;
If you want to examine code along with me and thus maximize benefits from this article series, you may clone this repo to your local machine by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/facebook/react.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We’ll inspect the latest stable major release of React by the date of this article publication - &lt;a href="https://github.com/facebook/react/tree/v17.0.0"&gt;v17.0.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Extra material: If you don't fully understand what major release means or why there are three numbers in the version scheme, check out &lt;a href="https://www.gitkraken.com/gitkon/semantic-versioning-git-tags"&gt;this great article&lt;/a&gt; provided by GitKraken. It covers semantic versioning as a concept and how to handle it in the real codebase with git tags.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;React team uses git tags for versioning. So let's check out the commit, where Dan Abramov bumped packages' versions for the 17.0.0 release.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git checkout v17.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are all on the same page, so let's guide our way to the actual code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-make-sense-of-the-repository-setup"&gt;
  &lt;/a&gt;
  Let's make sense of the repository setup
&lt;/h3&gt;

&lt;p&gt;React is a monorepo, which means multiple projects (or packages in the case of React), that related somehow live in the single repository. According to &lt;a href="https://reactjs.org/blog/2017/12/15/improving-the-repository-infrastructure.html"&gt;the official React docs&lt;/a&gt;, the monorepo pattern is used to coordinate changes between different React packages and host issues in one place.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Extra material: If you are really interested in finding out more valuable info about monorepo and figuring out the advantages of this pattern, check out &lt;a href="https://danluu.com/monorepo/"&gt;this article&lt;/a&gt; by Dan Luu.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;All React packages live in the &lt;code&gt;./packages&lt;/code&gt; directory and we’ll go through the primary ones in this article to get a bird’s-eye view of React as a project is made up of.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: We’ll take a thorough look at all major packages in future articles.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;React Core&lt;/strong&gt;&lt;br&gt;
Located in &lt;code&gt;./packages/react&lt;/code&gt;.&lt;br&gt;
This package contains only the functionality necessary to define React components, so it doesn’t render anything on its own. This exact package is available on npm as a &lt;code&gt;react&lt;/code&gt; package. &lt;br&gt;
So when you do something like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You effectively refer to the React Core package, not to the whole React repo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Renderers&lt;/strong&gt;&lt;br&gt;
As we already know, React was originally created for the client-side JS applications, that run in the browser. But later it was tweaked to also support native platforms, like iOS and Android. This adaption introduced the concept of renderers to React codebase.&lt;/p&gt;

&lt;p&gt;Renderers are very important for React because they manage how the output from the &lt;strong&gt;React Core&lt;/strong&gt; package is rendered in different environments.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: We'll write our own renderer in one of the future articles!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So there are multiple renderers in the repo now.&lt;br&gt;
First of all, let's look at three renderers, that actually render React components to the &lt;strong&gt;user&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;react-dom&lt;/code&gt;&lt;br&gt;
Located in &lt;code&gt;./packages/react-dom&lt;/code&gt;&lt;br&gt;
It's a descendant of the original React, which was tightly coupled with the browser environment. It renders React components to the DOM and this exact package is available as &lt;code&gt;react-dom&lt;/code&gt; npm package.&lt;br&gt;
So you're probably familiar with its simplest usage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;react-native-renderer&lt;/code&gt;&lt;br&gt;
Located in &lt;code&gt;./packages/react-native-renderer&lt;/code&gt;&lt;br&gt;
It interacts with React Native implementation, which renders React components to native views. So unlike &lt;code&gt;react-dom&lt;/code&gt;, it's less a renderer and more a layer between &lt;strong&gt;React Core&lt;/strong&gt; and &lt;a href="https://reactnative.dev/"&gt;React Native&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;react-art&lt;/code&gt;&lt;br&gt;
Located in &lt;code&gt;./packages/react-art&lt;/code&gt;&lt;br&gt;
It provides bindings to the &lt;a href="https://github.com/sebmarkbage/art/"&gt;ART library&lt;/a&gt;, which is used for drawing vector graphics. It's the third officially supported renderer, aside from renderer for DOM and native platforms.&lt;/p&gt;

&lt;p&gt;Then, let's quickly review renderers, that are used for purposes other than rendering React components to the user screen.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;react-test-renderer&lt;/code&gt;&lt;br&gt;
Located in &lt;code&gt;./packages/react-test-renderer&lt;/code&gt;&lt;br&gt;
This renderer was created together with &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt; team.&lt;br&gt;
It renders React components to JSON tree and makes Snapshot Testing possible.&lt;br&gt;
If you've written tests before, you are already familiar with this application of &lt;code&gt;react-test-renderer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We define a component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Link.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"link"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we write a test for it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-test-renderer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Link component renders correctly&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://dev.to"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;DEV community&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toJSON&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toMatchSnapshot&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we run the test, Jest creates a snapshot file, that contains the output of the component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`Link component renders correctly 1`&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="s2"&gt;`  
&amp;lt;a  
  className="link"  
  href="https://dev.to"  
  target="_blank"&amp;gt;  
  DEV community  
&amp;lt;/a&amp;gt;  
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the next test run, Jest will compare a new output with the previous one. If they match, the test will pass. If they don't match, the test will fail, indicating that a bug was introduced.&lt;br&gt;
The &lt;code&gt;react-test-renderer&lt;/code&gt; is very important to React ecosystem because it allows making sure that React components don't change unexpectedly.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;react-noop-renderer&lt;/code&gt;&lt;br&gt;
Located in &lt;code&gt;./packages/react-noop-renderer&lt;/code&gt;&lt;br&gt;
This renderer is used by React team for debugging, the so-called Fiber Reconciler, and is not intended to be used directly by design.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: If you don't know or are just not exactly sure what Fiber Reconciler is, keep reading, We'll take care of this in a snap.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reconcilers&lt;/strong&gt;&lt;br&gt;
Reconcilers are a major part of React library. &lt;br&gt;
They implement the reconciliation algorithm, that makes React fast enough for real-world apps.&lt;br&gt;
If the reconciliation algorithm wasn't a thing, either we, as developers, would have to manually update our components, or React would have to re-render the whole app on every minor change in any given component.&lt;/p&gt;

&lt;p&gt;React v17.0.0 uses Fiber Reconciler, which was introduced in React v16.0.0. Simply put, Fiber Reconciler is a package, that implements the reconciliation algorithm in a certain way.&lt;br&gt;
Its source code is located in &lt;code&gt;./packages/react-reconciler&lt;/code&gt;.&lt;br&gt;
We'll take a closer look at the Fiber Reconciler in one of the next episodes of the series.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: Why do I refer to reconcilers as a plural, nor singular noun, though only the Fiber Reconciler is out there? It's because the Fiber Reconciler is a replacement for the so-called Stack Reconciler, that powered React v15.0.0 and earlier.&lt;br&gt;
If you want to understand the difference between Fiber and Stack Reconcilers, let me know in the comments and I'll consider making a series of articles, where we would take a deep dive into both reconcilers and code their simpler versions ourselves.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#afterword"&gt;
  &lt;/a&gt;
  Afterword
&lt;/h2&gt;

&lt;p&gt;Oof, this was a long and intense reading and we learned a ton about React as a project and more specifically React codebase. &lt;br&gt;
In the next episode, we'll continue to explore the repository setup and have fun in the process!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sum-up"&gt;
  &lt;/a&gt;
  Sum up
&lt;/h3&gt;

&lt;p&gt;Let's sum up what we learned today.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React was created, because Facebook developers couldn't extend and maintain complex apps with dynamic data in MVC style.&lt;/li&gt;
&lt;li&gt;React came from a conceptually simple idea - if you have code, that describes UI with a given set of data, you may re-execute this exact code if data have changed.&lt;/li&gt;
&lt;li&gt;React is a monorepo, that contains React Core, a bunch of renderers, and a reconciler.&lt;/li&gt;
&lt;li&gt;React Core contains only the functionality necessary to define React components and is available through the &lt;code&gt;react&lt;/code&gt; npm package.&lt;/li&gt;
&lt;li&gt;Renderers manage how React components are rendered in different environments.&lt;/li&gt;
&lt;li&gt;Reconciler implements a reconciliation algorithm, that allows React to be declarative and fast.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#iam-looking-forward-to-the-next-episode-what-should-i-do"&gt;
  &lt;/a&gt;
  I'am looking forward to the next episode, what should I do?
&lt;/h3&gt;

&lt;p&gt;It's a weekly series and I am going to publish the next episode of the series on Sunday (January 15) at 6:00 am UTC+0.&lt;br&gt;
&lt;a href="https://dev.to/fromaline"&gt;Follow me on dev.to&lt;/a&gt;, if you don't want to miss it.&lt;/p&gt;

&lt;p&gt;If you have any ideas regarding this series or any other technology you want to make sense of, let me know in the comments! &lt;br&gt;
Any feedback on this episode, either positive or negative will be welcomed.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Show and hide a header based on scroll direction</title>
      <author>Chris Bongers</author>
      <pubDate>Sun, 09 Jan 2022 05:46:58 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/show-and-hide-a-header-based-on-scroll-direction-19fa</link>
      <guid>https://dev.to/dailydevtips1/show-and-hide-a-header-based-on-scroll-direction-19fa</guid>
      <description>&lt;p&gt;This article actually has a funny origin as it was requested by my good friend Fredrik asked me to help with a specific menu.&lt;/p&gt;

&lt;p&gt;He initially reached out to me, thanking me for writing down the article on &lt;a href="https://daily-dev-tips.com/posts/slide-down-menu-on-scroll/"&gt;showing a menu on scroll&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And he wanted to create something similar to the &lt;a href="https://www.pentagram.com/"&gt;Pentagram website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's take a moment to see what happens and what kind of actions we need to focus on.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We see the header with no background sitting over an image&lt;/li&gt;
&lt;li&gt;On scroll, the header disappears like a regular element&lt;/li&gt;
&lt;li&gt;Once we scroll down and pass the first viewport height, the following actions can happen&lt;/li&gt;
&lt;li&gt;Scroll up, the menu re-appears with a background&lt;/li&gt;
&lt;li&gt;Scroll down, the menu disappears again&lt;/li&gt;
&lt;li&gt;When we hit the viewport height, it always disappears again&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I've done some more research on this website, and they actually use two headers to achieve this effect. However, I'm going to show you how to do this with just one!&lt;/p&gt;

&lt;p&gt;The result for today can be seen in this CodePen.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/BawYXYz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sketching-a-solution"&gt;
  &lt;/a&gt;
  Sketching a solution
&lt;/h2&gt;

&lt;p&gt;Let's start by wireframing an HTML setup to work with. I went for a straightforward approach and came up with the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;Logo&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"img.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"colorfull passage"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"img.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"colored leafs"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;text&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we have the header as one element and a main wrapper with some sections.&lt;/p&gt;

&lt;p&gt;I'll start by making each section the exact size of the viewport. This will make the effect stand out a bit more.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#efefef&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: You can find the complete CSS in the CodePen example.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then we have to start working on the initial header styling.&lt;br&gt;
As mentioned, it should be an absolute positioned element, so it will scroll away initially.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#handling-scroll-events-in-javascript"&gt;
  &lt;/a&gt;
  Handling scroll events in JavaScript
&lt;/h2&gt;

&lt;p&gt;Now I think it's time to start adding some scroll listeners in JavaScript.&lt;/p&gt;

&lt;p&gt;As you might know, listening to scroll events has a high impact on performance because it fires too often.&lt;br&gt;
Especially on mobile devices, it fires like crazy.&lt;/p&gt;

&lt;p&gt;So, we want to add some kind of threshold to not fire too many events.&lt;/p&gt;

&lt;p&gt;I've decided on a 100ms delay of firing. You can play around with this value. However, it will impact when it adds/removes certain classes to get weird behaviors.&lt;/p&gt;

&lt;p&gt;The throttle function looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;throttle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;lastTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;lastTime&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;func&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, this will check if enough time is passed. If that is the case, we fire the &lt;code&gt;func()&lt;/code&gt; we passed as an argument.&lt;/p&gt;

&lt;p&gt;To use this we can wrap the function we want to use for the scroll effect like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;throttle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;validateHeader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So on scroll, but only after &lt;code&gt;100ms&lt;/code&gt; will we fire a &lt;code&gt;validateHeader&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Before building this function, let's set up some variables we need.&lt;br&gt;
We want to have the header element and the last scrolled position in this case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;header&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;lastScroll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it's time to make the &lt;code&gt;validateHeader&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validateHeader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// todo&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can start by getting the current scroll offset and the screen size.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;windowY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;windowH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first check we need to do is determine if we scrolled past the first viewport height (&lt;code&gt;windowH&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;windowY&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;windowH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// We passed the first section, set a toggable class&lt;/span&gt;
  &lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;is-fixed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;is-fixed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;can-animate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will add a new class to our header if this is the case. This class is the &lt;code&gt;is-fixed&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;If the scroll is not high enough, we remove this class and the &lt;code&gt;can-animate&lt;/code&gt; class we'll add in a second.&lt;/p&gt;

&lt;p&gt;This &lt;code&gt;is-fixed&lt;/code&gt; class looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;&amp;amp;.is-fixed&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This class changes the header from &lt;code&gt;absolute&lt;/code&gt; to &lt;code&gt;fixed&lt;/code&gt; and makes sure it's hidden initially. It also changes the background of the header.&lt;/p&gt;

&lt;p&gt;The next thing we need is to determine if we passed the viewport height + the size of the header.&lt;br&gt;
I split these two to prevent flickering from happening because of the animation we will set.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Determine is we ready to animate&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;windowY&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;windowH&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;can-animate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;scroll-up&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;code&gt;can-animate&lt;/code&gt; class will add the smooth animation we want. However, as mentioned, we don't want to on the first load. That's why we split the two.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;&amp;amp;.can-animate&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="m"&gt;0.3s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;visibility&lt;/span&gt; &lt;span class="m"&gt;0s&lt;/span&gt; &lt;span class="m"&gt;0.3s&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last part of this puzzle is the actual show once we scroll upwards.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;windowY&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;lastScroll&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;scroll-up&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;scroll-up&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see we evaluate if the window position is smaller than the last scrolled position.&lt;br&gt;
If yes, it means we should scroll up and add the &lt;code&gt;scroll-up&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;This class will transform the negative position of the header.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;&amp;amp;.scroll-up&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last thing this function needs is to update the last scroll position with the current one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;lastScroll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;windowY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it, we got ourselves a header that can change appearance once it passes the first viewport height.&lt;br&gt;
And it will show only on scroll up.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: You can see the complete code in the embedded CodePen.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I hope you enjoyed this article. I would love to see what you used this for.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Maximize your Tailwind efficiency by using these resources</title>
      <author>Kaushal Joshi</author>
      <pubDate>Sun, 09 Jan 2022 05:39:27 +0000</pubDate>
      <link>https://dev.to/clumsycoder/maximize-your-tailwind-efficiency-by-using-these-resources-1agm</link>
      <guid>https://dev.to/clumsycoder/maximize-your-tailwind-efficiency-by-using-these-resources-1agm</guid>
      <description>&lt;p&gt;I have been using Tailwind for the past few months and I don't think now I would switch to other styling frameworks. It is just a lifesaver! It is mobile first, has an easy learning curve and saves a lot of time. And it doesn't make me feel dumb like CSS does 😟&lt;/p&gt;

&lt;p&gt;Tailwind is already pretty good, but we can make it even better. Here are a few resources that helped me to build projects with Tailwind efficiently and fast. &lt;/p&gt;

&lt;p&gt;Before starting, I expect you to be already familiar with Tailwind and know about its workings. I have discussed CSS prerequisites and use cases for Tailwind in my last blog, which you can read &lt;a href="https://clumsycoder.hashnode.dev/getting-started-with-tailwindcss"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#online-playground"&gt;
  &lt;/a&gt;
  Online Playground
&lt;/h2&gt;

&lt;p&gt;Tailwind Play is an online playground for Tailwind CSS. The best thing about it is that it shows the output in no seconds! You can also change the CSS3 styling or &lt;code&gt;tailwind.config&lt;/code&gt; file if needed.&lt;br&gt;&lt;br&gt;
It also has autocomplete and syntax highlighting for tailwind classes.&lt;/p&gt;

&lt;p&gt;🌐 &lt;a href="https://play.tailwindcss.com/"&gt;Tailwind Play&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#vs-code-extensions"&gt;
  &lt;/a&gt;
  VS Code Extensions
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#tailwind-css-intellisense"&gt;
  &lt;/a&gt;
  Tailwind CSS IntelliSense
&lt;/h3&gt;

&lt;p&gt;This is a &lt;strong&gt;MUST&lt;/strong&gt; have extension. It has autocomplete, syntax highlighting and lining abilities. It also lets us see CSS for a particular tailwind class when hovered.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hwk1Amjd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641564732856/zMq0YlLDA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hwk1Amjd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641564732856/zMq0YlLDA.gif" alt="IntelliSense.gif" width="880" height="578"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔥 Get it on &lt;a href="https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss"&gt;Visual Studio Marketplace&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#headwind"&gt;
  &lt;/a&gt;
  Headwind
&lt;/h3&gt;

&lt;p&gt;Headwind is an opinionated CSS class sorter that enforces consistent order of classes. It parses the entire file on each save and sorts classes on the basis of importance and removes duplicates.&lt;br&gt;
It also highlights conflicting classes and lets us choose what to omit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bfesqr3C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641565367984/gq_s858if.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bfesqr3C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641565367984/gq_s858if.gif" alt="Headwind .gif" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔥 Get it on &lt;a href="https://marketplace.visualstudio.com/items?itemName=heybourn.headwind"&gt;Visual Studio Marketplace&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tailwind-docs"&gt;
  &lt;/a&gt;
  Tailwind Docs
&lt;/h3&gt;

&lt;p&gt;This extension will open the documentation directly from VS Code. Open command palette by &lt;code&gt;ctrl/cmnd + shift + p&lt;/code&gt; and type the topic you want to search. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OyTx3wbP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641634903244/y5X4tPjSwD.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OyTx3wbP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641634903244/y5X4tPjSwD.gif" alt="Animation4.gif" width="880" height="944"&gt;&lt;/a&gt;&lt;br&gt;
🔥 Get it on &lt;a href="https://marketplace.visualstudio.com/items?itemName=austenc.tailwind-docs"&gt;Visual Studio Marketplace&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tailwind-styled-snippets"&gt;
  &lt;/a&gt;
  Tailwind Styled Snippets
&lt;/h3&gt;

&lt;p&gt;This is useful only if you're using &lt;code&gt;styled-components&lt;/code&gt; with your react project. This extension rocks in creating components with tailwind and styled components or emotionjs.&lt;/p&gt;

&lt;p&gt;🔥 Get it on &lt;a href="https://marketplace.visualstudio.com/items?itemName=muhajirframe.tailwind-styled-snippets"&gt;Visual Studio Marketplace&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#components-library"&gt;
  &lt;/a&gt;
  Components Library
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#flowbite"&gt;
  &lt;/a&gt;
  Flowbite
&lt;/h3&gt;

&lt;p&gt;Flowbite is a freemium component library consisting of 400+ components and elements. The free version is enough to fulfil basic use cases but there is also a premium version. Two premium plans are 'developers' and 'designers' that give you more features to use. Premium version has features like post CSS configuration, JS minification, Figma preview and etc.&lt;/p&gt;

&lt;p&gt;🌐 &lt;a href="https://flowbite.com/docs/getting-started/introduction/"&gt;Flowbite&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tailwind-components"&gt;
  &lt;/a&gt;
  Tailwind Components
&lt;/h3&gt;

&lt;p&gt;The biggest open source component library for Tailwind UI components and templates. It has a variety of components to choose from and you can copy paste the code that you need.&lt;/p&gt;

&lt;p&gt;🌐 &lt;a href="https://tailwindcomponents.com/"&gt;Website link&lt;/a&gt;&lt;br&gt;&lt;br&gt;
⚡ &lt;a href="https://github.com/tailwindcomponents"&gt;GitHub Repo&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#postsrc"&gt;
  &lt;/a&gt;
  PostSrc
&lt;/h3&gt;

&lt;p&gt;PostSrc also has a wide range of tailwind components to use, but it's not as famous as Tailwind.&lt;/p&gt;

&lt;p&gt;🌐 &lt;a href="https://postsrc.com/"&gt;PostSrc&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#colors"&gt;
  &lt;/a&gt;
  Colors
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#tailwind-shades"&gt;
  &lt;/a&gt;
  Tailwind Shades
&lt;/h3&gt;

&lt;p&gt;This website generates color shades when a base color is given as the input. You can also change hue, saturation or light of colors. At last, you can copy code to paste in &lt;code&gt;tailwind.config&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;🌐 &lt;a href="https://www.tailwindshades.com/"&gt;Website link&lt;/a&gt;&lt;br&gt;&lt;br&gt;
⚡ &lt;a href="https://github.com/anheric/tailwindshades"&gt;GitHub Repo&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shades-generator"&gt;
  &lt;/a&gt;
  Shades Generator
&lt;/h3&gt;

&lt;p&gt;Similar to Tailwind Shades but it has a color picker that you can use to get the color from the browser in real time. It doesn't have the functionality to adjust HSL but you can remove a shade from the palette if you want to.&lt;/p&gt;

&lt;p&gt;🌐 &lt;a href="https://javisperez.github.io/tailwindcolorshades/"&gt;Website link&lt;/a&gt;&lt;br&gt;&lt;br&gt;
⚡ &lt;a href="https://githttps://github.com/javisperez/tailwindcolorshades"&gt;GitHub Repo&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#cheat-sheet"&gt;
  &lt;/a&gt;
  Cheat Sheet
&lt;/h2&gt;

&lt;p&gt;Actually, official docs are so great that you don't even need cheat sheets. But these are quick references if you need everything in one place. &lt;a href="https://twitter.com/nerdcave"&gt;Jay Alraj&lt;/a&gt; has created a site that has everything about Tailwind CSS in a clean and concise way.&lt;br&gt;&lt;br&gt;
One thing, it is not updated to Tailwind v3 yet but I assume something will come out soon.&lt;/p&gt;

&lt;p&gt;🌐 &lt;a href="https://nerdcave.com/tailwind-cheat-sheet"&gt;Cheatsheet link&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#plugins"&gt;
  &lt;/a&gt;
  Plugins
&lt;/h2&gt;

&lt;p&gt;Tailwind CSS also gives you the flexibility to add custom plugins. &lt;/p&gt;

&lt;p&gt;There are many tailwind plugins available on the internet, but one that I used is from a GitHub repo &lt;a href="https://github.com/lorisleiva/tailwindcss-plugins"&gt;tailwind-plugins&lt;/a&gt;. It has plugins for animations, gradients, keyframes and pagination.&lt;/p&gt;

&lt;p&gt;⚡ &lt;a href="https://github.com/lorisleiva/tailwindcss-plugins/tree/main/gradients"&gt;Gradients&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;⚡ &lt;a href="https://github.com/lorisleiva/tailwindcss-plugins/tree/main/animations"&gt;Animations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;⚡ &lt;a href="https://github.com/lorisleiva/tailwindcss-plugins/tree/main/keyframes"&gt;Keyframes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;⚡ &lt;a href="https://github.com/lorisleiva/tailwindcss-plugins/tree/main/pagination"&gt;Pagination&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another repo, &lt;a href="https://github.com/benface/tailwindcss-typography"&gt;tailwind-typography&lt;/a&gt; is a plugin for manipulating the typography of the app.&lt;/p&gt;

&lt;p&gt;⚡ &lt;a href="https://github.com/benface/tailwindcss-typography"&gt;Typography&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#icons"&gt;
  &lt;/a&gt;
  Icons
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#heroicons"&gt;
  &lt;/a&gt;
  HeroIcons
&lt;/h3&gt;

&lt;p&gt;HeroIcons is an open source project for SVG icons created by the makers of Tailwind CSS itself! You can integrate them with React or Vue libraries and also get a Figma file to use in your designs &lt;/p&gt;

&lt;p&gt;🌐 &lt;a href="https://heroicons.com/"&gt;Website link&lt;/a&gt;&lt;br&gt;&lt;br&gt;
⚡&lt;a href="https://github.com/tailwindlabs/heroicons"&gt;GitHub Repo&lt;/a&gt;&lt;br&gt;&lt;br&gt;
🎨 &lt;a href="https://www.figma.com/community/file/958423903283802665"&gt;Figma&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I found these resources very helpful while developing projects. If you think I am not using something that would make my life easier, do let me know!  I am most active on &lt;a href="https://twitter.com/clumsy_coder"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/7JKaushal"&gt;LinkedIn&lt;/a&gt; and &lt;a href="https://www.clumsycoder.showwcase.com"&gt;Showwcase&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is my second article about Tailwind CSS. I am planning to write more as learn more about this. Subscribe to the newsletter or follow me to have an update about it :)&lt;/p&gt;

&lt;p&gt;Happy Designing! 🎨&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to Connect a React App to a Notion Database</title>
      <author>Alex Eagleson</author>
      <pubDate>Sun, 09 Jan 2022 02:23:44 +0000</pubDate>
      <link>https://dev.to/alexeagleson/how-to-connect-a-react-app-to-a-notion-database-51mc</link>
      <guid>https://dev.to/alexeagleson/how-to-connect-a-react-app-to-a-notion-database-51mc</guid>
      <description>&lt;p&gt;All code from this tutorial as a complete package is available in &lt;a href="https://github.com/alexeagleson/react-node-notion"&gt;this repository&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;If you find this tutorial helpful, please share it with your friends and colleagues!  For more like it you can subscribe on &lt;a href="https://www.youtube.com/channel/UCV5YqK3AaInd3lYFQqlp7Lw"&gt;Youtube&lt;/a&gt; or follow me on &lt;a href="https://twitter.com/eagleson_alex"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#what-is-notion"&gt;What is Notion?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#project-setup"&gt;Project Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#creating-a-notion-database"&gt;Creating a Notion Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#creating-the-server"&gt;Creating the Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#querying-the-server"&gt;Querying the Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#creating-a-notion-integration"&gt;Creating a Notion Integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#querying-the-database"&gt;Querying the Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#connecting-the-app"&gt;Connecting the App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wrapping-up"&gt;Wrapping Up&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-is-notion"&gt;
  &lt;/a&gt;
  What is Notion?
&lt;/h2&gt;

&lt;p&gt;Before we jump in I want to explain quickly a little bit what &lt;a href="https://www.notion.so/product"&gt;Notion&lt;/a&gt; is.&lt;/p&gt;

&lt;p&gt;It's basically an organizational tool that runs in the cloud and supports multiple user collaboration at the same time.  &lt;/p&gt;

&lt;p&gt;It can be used for anything from organizing daily tasks, keeping track of school schedules, to managing the documentation of large enterprise projects.  &lt;/p&gt;

&lt;p&gt;Basically if you want to "organize" any kind of information, Notion is a great tool for that.  &lt;/p&gt;

&lt;p&gt;Similar products you might be familiar with would be something like Confluence, Evernote or OneNote.  &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/oTahLEX3NXo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Recently I discovered that Notion provides an API to read and modify data on your Notion workspace.  &lt;/p&gt;

&lt;p&gt;They also have fantastic support for simple databases (even relational ones) so I thought it would be fun to try a little app that could use Notion as a quick and dirty CMS, and I had a lot of fun doing it, so I thought I would write up a little tutorial to share the process with others.  &lt;/p&gt;

&lt;p&gt;I want to be clear that &lt;em&gt;&lt;strong&gt;I am absolutely not advocating for the use of Notion as a real database for a production application&lt;/strong&gt;&lt;/em&gt;.  &lt;/p&gt;

&lt;p&gt;I do not know anything about the actual speed and performance of querying it at any scale, and I also wouldn't trust any critical data on a service that isn't specifically designed to offer a reliability guarantee.&lt;/p&gt;

&lt;p&gt;However, for fun little projects I think it's a great option, especially for front end developers who don't have a lot of existing knowledge about databases and just want to get their feet wet.&lt;/p&gt;

&lt;p&gt;It can also be a great way to collaborate with less technical folks and allow them the flexibility that Notion offers for creating content, and giving developers the ability to directly reference that content in code.&lt;/p&gt;

&lt;p&gt;So without further delay, let's play around with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project Setup
&lt;/h2&gt;

&lt;p&gt;The structure of our project will be:&lt;/p&gt;

&lt;p&gt;React App -&amp;gt; Node server -&amp;gt; Notion database&lt;/p&gt;

&lt;p&gt;The reason we need the Node server is because if we were to query directly from our React app,  we would have to expose our Notion account credentials and secret/database ID.  Anything on the client side is always visible to the user.&lt;/p&gt;

&lt;p&gt;By querying on the server we can keep the credentials there, out of reach of the front end, and only provide the database table data itself to the front end. &lt;/p&gt;

&lt;p&gt;We'll begin by creating the project directory and React app.  We're using &lt;a href="https://reactjs.org/docs/create-a-new-react-app.html"&gt;Create React App&lt;/a&gt; here as it's still the simplest way to get an instant React project up and running with minimal complexity:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir react-node-notion
cd react-node-notion
npx create-react-app@latest sample-app --template typescript
cd sample-app
npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure you are able to see the example React app on &lt;a href=""&gt;http://localhost:3000/&lt;/a&gt; before you continue.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-notion-database"&gt;
  &lt;/a&gt;
  Creating a Notion Database
&lt;/h2&gt;

&lt;p&gt;Next we are going to create our Notion workspace and database.  &lt;/p&gt;

&lt;p&gt;Navigate to:&lt;/p&gt;

&lt;p&gt;&lt;a href=""&gt;https://www.notion.so/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can create an account or login with an existing Google or Apple account.  Notion is free to use for an individual.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hlxX4Yg5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/r_10%2Cbo_3px_solid_darkgrey/v1641346161/blogs/notion-cms/new-page_nwh5hq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hlxX4Yg5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/r_10%2Cbo_3px_solid_darkgrey/v1641346161/blogs/notion-cms/new-page_nwh5hq.png" alt="Create New Page" width="218" height="311"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next we'll create a page where our database will live.  My database is going to help me keep track of stuff I want to learn in 2022.  &lt;/p&gt;

&lt;p&gt;Click anywhere on the "My Cool Project" page and type &lt;code&gt;/page&lt;/code&gt;.  You'll have te option of creating a new page.  Create one and give it an icon.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o7sr5ev9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/r_10%2Cbo_3px_solid_darkgrey/v1641687406/blogs/notion-cms/create-page_uuctgq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o7sr5ev9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/r_10%2Cbo_3px_solid_darkgrey/v1641687406/blogs/notion-cms/create-page_uuctgq.png" alt="New Page" width="487" height="320"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open your new page.  You can give it a cover image at the top.  CLick anywhere on the blank page and type &lt;code&gt;/database&lt;/code&gt;.  You're going to select &lt;strong&gt;&lt;em&gt;"Table Database - Inline"&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first column should be a unique value (our primary key).  I'm simply going to name that column &lt;code&gt;key&lt;/code&gt;.  The second column I will name &lt;code&gt;label&lt;/code&gt; and the third column I will name &lt;code&gt;url&lt;/code&gt;.  The key column will be of type &lt;code&gt;title&lt;/code&gt; by default, but you will need to set the label column to &lt;code&gt;text&lt;/code&gt; and the url column to &lt;code&gt;url&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;I've made the column headers lowercase on purpose since we will be referring to them with Javascript properties when we query (which are traditionally lowercase).  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1N_XQX4w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/r_10%2Cbo_3px_solid_darkgrey/v1641687724/blogs/notion-cms/create-database_rrrnco.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1N_XQX4w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/r_10%2Cbo_3px_solid_darkgrey/v1641687724/blogs/notion-cms/create-database_rrrnco.png" alt="Create Database" width="880" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I will be using this database to keep track of the things I want to learn, and a URL link to the resource to learn them.  This is super simple but you can come up with anything as complex as you want, we're mostly just here to give an example of how to query this data and display it in an app (or anywhere you like really).&lt;/p&gt;

&lt;p&gt;Populate the DB with whatever data suits you best.  Here's mine:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--860RtwOh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/r_10%2Cbo_3px_solid_darkgrey/v1641688013/blogs/notion-cms/final-database_qs1zxb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--860RtwOh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/r_10%2Cbo_3px_solid_darkgrey/v1641688013/blogs/notion-cms/final-database_qs1zxb.png" alt="Final Database" width="880" height="534"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-server"&gt;
  &lt;/a&gt;
  Creating the Server
&lt;/h2&gt;

&lt;p&gt;We're next going to spin up a super simple Node server to serve the data.  All we need is the &lt;code&gt;http&lt;/code&gt; module and the Notion client library from NPM.  &lt;/p&gt;

&lt;p&gt;Let's begin with just the server and confirm we can query the data before we add the Notion integration:&lt;/p&gt;

&lt;p&gt;Go back to the root directory &lt;code&gt;react-node-notion&lt;/code&gt; before running these commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir server
cd server
npm init -y
npm install -D typescript @types/node
npx tsc --init
mkdir src
touch src/server.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case you aren't creating your files from the command line, the above instructions will install the necessary packages and create a &lt;code&gt;server&lt;/code&gt; directory and an &lt;code&gt;src&lt;/code&gt; directory inside with a &lt;code&gt;server.ts&lt;/code&gt; file.  Your full directory structure for the entire project should look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
├── sample-app
│   └── (React app files)
└── server
    ├── src
    │   └── server.ts
    ├── tsconfig.json
    ├── package-lock.json
    └── package.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your &lt;code&gt;server.ts&lt;/code&gt; file will look like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;server/src/server.ts&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;localhost&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Avoid CORS errors&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Will respond to queries to the domain root (like http://localhost/)&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;success&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Only supports the / route&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Resource not found&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server is running on http://&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your &lt;code&gt;npx tsc --init&lt;/code&gt; command will have created a &lt;code&gt;tsconfig.json&lt;/code&gt; file.  All the defaults are fine, you just need to add one value:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tsconfig.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"outDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./dist"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That will output the result of the &lt;code&gt;tsc&lt;/code&gt; command into a &lt;code&gt;dist&lt;/code&gt; folder with a JS file that you can run.&lt;/p&gt;

&lt;p&gt;Give it a try by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx tsc &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; node dist/server.js&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That says "run typescript and then use Node to run the resulting Javascript file it creates in the output folder".  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#querying-the-server"&gt;
  &lt;/a&gt;
  Querying the Server
&lt;/h2&gt;

&lt;p&gt;Navigate back to the &lt;code&gt;sample-app&lt;/code&gt; directory and open the &lt;code&gt;src&lt;/code&gt; directory.  We can delete &lt;code&gt;App.css&lt;/code&gt; and the &lt;code&gt;logo.svg&lt;/code&gt; file.  &lt;/p&gt;

&lt;p&gt;We'll update the &lt;code&gt;index.css&lt;/code&gt; with some super simple CSS based off &lt;a href="https://www.swyx.io/css-100-bytes/"&gt;this minimalist style&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sample-app/src/index.css&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70ch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3em&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.75&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.25em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;h5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;h6&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#1d1d1d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we update the contents of &lt;code&gt;App.tsx&lt;/code&gt;.  Remove all the default content inside the file (including the imports) and replace it with the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sample-app/src/App.tsx&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Things to Learn&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;
        &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:8000/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Fetch List
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"&gt;Fetch API&lt;/a&gt; to query the simple server we just wrote that we made listen on port 8000 and respond on the root domain route &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So that means to reach that endpoint we need to query &lt;code&gt;http://localhost:8000/&lt;/code&gt;.  Save and run your app, then press the "Fetch List" button.  Open the dev console with F12 and you will see:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5BtIGz6e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/r_10%2Cbo_3px_solid_darkgrey/v1641689103/blogs/notion-cms/fetch-success_sujvb8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5BtIGz6e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/r_10%2Cbo_3px_solid_darkgrey/v1641689103/blogs/notion-cms/fetch-success_sujvb8.png" alt="Fetch Success" width="472" height="345"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice the &lt;code&gt;{ data: "success" }&lt;/code&gt; response there in the console.  Great!  &lt;/p&gt;

&lt;p&gt;Our React app is connected to our server and we can query basic data.  Let's get Notion hooked up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-notion-integration"&gt;
  &lt;/a&gt;
  Creating a Notion Integration
&lt;/h2&gt;

&lt;p&gt;Before you can query data from your Notion account you need to create an &lt;em&gt;integration&lt;/em&gt; that has the necessary permissions.  You can configure integrations to have different permissions like read/write/insert depending on who you are sharing the integration secret with.&lt;/p&gt;

&lt;p&gt;Go to the following URL:&lt;/p&gt;

&lt;p&gt;&lt;a href=""&gt;https://www.notion.so/my-integrations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And click the big &lt;strong&gt;[+ New Integration]&lt;/strong&gt; button on the left.  &lt;/p&gt;

&lt;p&gt;You can configure and name your integration how you like.  For mine I only want to be able to read content from my database, so I am only giving it read permissions and no access to user data:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hvjNLC4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/r_10%2Cbo_3px_solid_darkgrey/v1641689746/blogs/notion-cms/integration-setup_piu1pt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hvjNLC4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/r_10%2Cbo_3px_solid_darkgrey/v1641689746/blogs/notion-cms/integration-setup_piu1pt.png" alt="Integration Setup" width="565" height="1152"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After you have created the integration you will be provided with a "secret" that gives access to your integration.  Keep this handy as we will need it soon:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MEBysqQz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/r_10%2Cbo_3px_solid_darkgrey/v1641689915/blogs/notion-cms/notion-secret_r0nytu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MEBysqQz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/r_10%2Cbo_3px_solid_darkgrey/v1641689915/blogs/notion-cms/notion-secret_r0nytu.png" alt="Notion Secret" width="543" height="250"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition to the secret, we also need to configure the database itself to be allowed to be read.  Go back to your "Things to Learn" database (or whatever you wrote).&lt;/p&gt;

&lt;p&gt;At the upper right corner of your database page is a "Share" button.  Click it and then click the "Invite" button.  You will have the ability to invite your new integration that you created to have access to this database.  It will still be private and hidden from the general public.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r--wjCOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/r_10%2Cbo_3px_solid_darkgrey/v1641690016/blogs/notion-cms/share-database_d9smky.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r--wjCOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/r_10%2Cbo_3px_solid_darkgrey/v1641690016/blogs/notion-cms/share-database_d9smky.png" alt="Share Database" width="472" height="324"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The two values you need to query this database from your Node app are the Notion secret (which you already have) and the database ID.  The database ID you can get from the URL when you are looking at your database.  The URL will look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://www.notion.so/aaaaaaaaaaaaaaaaaaaaaaaaaa?v=bbbbbbbbbbbbbbbbbbbbbbbbbbb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example your &lt;code&gt;database id&lt;/code&gt; is the &lt;code&gt;aaaaaaaaaaaaaaaaaaaaaa&lt;/code&gt; part before the question mark.&lt;/p&gt;

&lt;p&gt;You now have everything you need to query the data.  Back to the Node server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#querying-the-database"&gt;
  &lt;/a&gt;
  Querying the Database
&lt;/h2&gt;

&lt;p&gt;We are going to need a secure place to store our Notion secret and database ID.  If we put them in our code they will become visible to anyone who checks the source when we push to a remote repository.  To get around this we will store our credentials in a &lt;code&gt;.env.&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Inside your &lt;code&gt;server&lt;/code&gt; directory create two new files (note that both of them are hidden files that are prefix with a &lt;code&gt;.&lt;/code&gt; before the filename):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;server/.env&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;NOTION_SECRET="secret_xxxxxxxxxxxxxxxxxxxxxx"
NOTION_DATABASE_ID="aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where the dummy values above are replaced by the values you took from Notion.  Remember your secret key does need the &lt;code&gt;secret_&lt;/code&gt; prefix in front of it.&lt;/p&gt;

&lt;p&gt;We also want to create a &lt;code&gt;.gitignore&lt;/code&gt; file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;server/.gitignore&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.env
dist
node_modules
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will tell &lt;code&gt;git&lt;/code&gt; not to push your secret &lt;code&gt;.env&lt;/code&gt; file our your automatically generated &lt;code&gt;dist&lt;/code&gt; folder when you commit.  &lt;/p&gt;

&lt;p&gt;While we're at it let's add a start script for our server that does the &lt;code&gt;tsc&lt;/code&gt; build and runs the JS output:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;server/package.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"tsc &amp;amp;&amp;amp; node dist/server.js"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alright!  Now that that is taken care of we just need two packages.  One is the official Notion client for Node, and the other is &lt;code&gt;dotenv&lt;/code&gt; library that will made it super simple to read your secret and database id values from that &lt;code&gt;.env&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @notionhq/client@0.4.9 dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that I have locked Notion client to &lt;code&gt;0.4.9&lt;/code&gt; as the API may change since this is a relatively new product and I would like this tutorial to work for anyone who uses it in the future.  You can try running the latest build however you may need to refer to their documentation and make corrections if anything has changed.&lt;/p&gt;

&lt;p&gt;Now we're going to update our &lt;code&gt;server.ts&lt;/code&gt; file.  We'll do it all at once but I'll add lots of comments to explain everything:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;server/src/server.ts&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@notionhq/client&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// This is Typescript  interface for the shape of the object we will&lt;/span&gt;
&lt;span class="c1"&gt;// create based on our database to send to the React app&lt;/span&gt;
&lt;span class="c1"&gt;// When the data is queried it will come back in a much more complicated shape, so our goal is to&lt;/span&gt;
&lt;span class="c1"&gt;// simplify it to make it easy to work with on the front end&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ThingToLearn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// The dotenv library will read from your .env file into these values on `process.env`&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notionDatabaseId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NOTION_DATABASE_ID&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notionSecret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NOTION_SECRET&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Will provide an error to users who forget to create the .env file&lt;/span&gt;
&lt;span class="c1"&gt;// with their Notion data in it&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;notionDatabaseId&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;notionSecret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Must define NOTION_SECRET and NOTION_DATABASE_ID in env&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Initializing the Notion client with your secret&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;notionSecret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;localhost&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Require an async function here to support await with the DB query&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;// Query the database and wait for the result&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;notion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;databases&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;database_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;notionDatabaseId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;

      &lt;span class="c1"&gt;// We map over the complex shape of the results and return a nice clean array of&lt;/span&gt;
      &lt;span class="c1"&gt;// objects in the shape of our `ThingToLearn` interface&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ThingToLearn&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// row represents a row in our database and the name of the column is the&lt;/span&gt;
        &lt;span class="c1"&gt;// way to reference the data in that column&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;labelCell&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;urlCell&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// Depending on the column "type" we selected in Notion there will be different&lt;/span&gt;
        &lt;span class="c1"&gt;// data available to us (URL vs Date vs text for example) so in order for Typescript&lt;/span&gt;
        &lt;span class="c1"&gt;// to safely infer we have to check the `type` value.  We had one text and one url column.&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isLabel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;labelCell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rich_text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;urlCell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// Verify the types are correct&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isLabel&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;isUrl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// Pull the string values of the cells off the column data&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;labelCell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rich_text&lt;/span&gt;&lt;span class="p"&gt;?.[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;plain_text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;urlCell&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

          &lt;span class="c1"&gt;// Return it in our `ThingToLearn` shape&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// If a row is found that does not match the rules we checked it will still return in the&lt;/span&gt;
        &lt;span class="c1"&gt;// the expected shape but with a NOT_FOUND label&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;NOT_FOUND&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;

      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Resource not found&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server is running on http://&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Should be good!  We'll start the server with the new script we made in &lt;code&gt;package.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#connecting-the-app"&gt;
  &lt;/a&gt;
  Connecting the App
&lt;/h2&gt;

&lt;p&gt;A quick jump back into the React app and hit that "Fetch Data" button again.  If everything went well you will be greeted with the content of your database in your browser console:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5svSCfBx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/r_10%2Cbo_3px_solid_darkgrey/v1641691474/blogs/notion-cms/notion-react-query_kdwswh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5svSCfBx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/r_10%2Cbo_3px_solid_darkgrey/v1641691474/blogs/notion-cms/notion-react-query_kdwswh.png" alt="React Notion Query" width="687" height="390"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You've now got the data in your React app, you can do whatever you want with it!  We could probably wrap up the tutorial here, but let's make one final step of turning the data into an actual list of links:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sample-app/src/App.tsx&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Copy the payload shape interface from our server&lt;/span&gt;
&lt;span class="c1"&gt;// We want to copy (rather than import) since we we won't necessarily deploy our&lt;/span&gt;
&lt;span class="c1"&gt;// front end and back end to the same place&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ThingToLearn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// A state value will store the current state of the array of data which can be updated&lt;/span&gt;
  &lt;span class="c1"&gt;// by editing your database in Notion and then pressing the fetch button again&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;thingsToLearn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setThingsToLearn&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ThingToLearn&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Things to Learn&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;
        &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:8000/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="c1"&gt;// Set the React state with the array response&lt;/span&gt;
              &lt;span class="nx"&gt;setThingsToLearn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Fetch List
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Map the resulting object array into an ordered HTML list with anchor links */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Using index as key is harmless since we will only ever be replacing the full list */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;thingsToLearn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;idx&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"noopener noreferrer"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And with that, a click of the fetch button and we get a nice list of things to do which reflects the state of our Notion database and creates links to the relevant pages.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G8e36Q7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/r_10%2Cbo_3px_solid_darkgrey/v1641691929/blogs/notion-cms/final-result_irlemi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G8e36Q7h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/r_10%2Cbo_3px_solid_darkgrey/v1641691929/blogs/notion-cms/final-result_irlemi.png" alt="Final Result" width="880" height="546"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go ahead, try changing some text in your DB and hitting the button again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Well that's pretty neat!  Now that you know how to do this, what cool projects can you think to build?&lt;/p&gt;

&lt;p&gt;Remember that all code from this tutorial as a complete package is available in &lt;a href="https://github.com/alexeagleson/react-node-notion"&gt;this repository&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;Please check some of my other learning tutorials.  Feel free to leave a comment or question and share with others if you find any of them helpful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/how-to-use-nodejs-to-backup-your-personal-files-and-learn-some-webdev-skills-along-the-way-541a"&gt;How to use Node.js to backup your personal files&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/docker-for-javascript-developers-41me"&gt;Introduction to Docker for Javascript Developers&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/learnings-from-react-conf-2021-17lg"&gt;Learnings from React Conf 2021&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/how-to-create-a-dark-mode-component-in-react-3ibg"&gt;How to Create a Dark Mode Component in React&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/how-to-analyze-and-improve-your-create-react-app-production-build-4f34"&gt;How to Analyze and Improve your 'Create React App' Production Build &lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/how-to-create-and-publish-a-react-component-library-2oe"&gt;How to Create and Publish a React Component Library&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/how-to-use-indexeddb-to-store-data-for-your-web-application-in-the-browser-1o90"&gt;How to use IndexedDB to Store Local Data for your Web App &lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-running-a-local-web-server-4d8g"&gt;Running a Local Web Server&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-linters-eslint-59pm"&gt;ESLint&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-prettier-214j"&gt;Prettier&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/building-a-modern-web-stack-babel-3hfp"&gt;Babel&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-react-with-and-without-jsx-31c7"&gt;React &amp;amp; JSX&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-webpack-part-1-2mn1"&gt;Webpack: The Basics&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-webpack-part-2-49bj"&gt;Webpack: Loaders, Optimizations &amp;amp; Bundle Analysis&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;If you find this tutorial helpful, please share it with your friends and colleagues!  For more like it you can subscribe on &lt;a href="https://www.youtube.com/channel/UCV5YqK3AaInd3lYFQqlp7Lw"&gt;Youtube&lt;/a&gt; or follow me on &lt;a href="https://twitter.com/eagleson_alex"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>node</category>
    </item>
    <item>
      <title>What am I doing wrong in the RClone `crypt remote` creation process?</title>
      <author>Calin Baenen</author>
      <pubDate>Sun, 09 Jan 2022 01:57:48 +0000</pubDate>
      <link>https://dev.to/baenencalin/what-am-i-doing-wrong-in-the-rclone-crypt-remote-creation-process-2m3p</link>
      <guid>https://dev.to/baenencalin/what-am-i-doing-wrong-in-the-rclone-crypt-remote-creation-process-2m3p</guid>
      <description>&lt;p&gt;So, I'm following along with &lt;a href="https://www.youtube.com/watch?v=YDF1nBaAptw"&gt;this video&lt;/a&gt; on how to set up &lt;code&gt;rclone&lt;/code&gt;, and I was making an encrypted version of my Google Drive remote (&lt;code&gt;google_drive&lt;/code&gt;).&lt;br&gt;
However, whenever I do &lt;code&gt;./rclone copy Test.txt google_drive_crypt&lt;/code&gt; it creates a new directory inside the &lt;code&gt;rclone&lt;/code&gt; folder called "google_drive" and puts the encoded folder in there. -- However, when the person does it in the video it works perfectly fine, putting the file on Google Drive.&lt;br&gt;
What am I doing wrong?&lt;/p&gt;

&lt;p&gt;Here's a (small) command backlog:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;calin@CalinArchLinuxPC rclone-v1.57.0-linux-386]&lt;span class="nv"&gt;$ &lt;/span&gt;./rclone config
Current remotes:

e&lt;span class="o"&gt;)&lt;/span&gt; Edit existing remote
n&lt;span class="o"&gt;)&lt;/span&gt; New remote
d&lt;span class="o"&gt;)&lt;/span&gt; Delete remote
r&lt;span class="o"&gt;)&lt;/span&gt; Rename remote
c&lt;span class="o"&gt;)&lt;/span&gt; Copy remote
s&lt;span class="o"&gt;)&lt;/span&gt; Set configuration password
q&lt;span class="o"&gt;)&lt;/span&gt; Quit config
e/n/d/r/c/s/q&amp;gt; n
name&amp;gt; google_drive
Storage&amp;gt; drive

&lt;span class="c"&gt;# ...&lt;/span&gt;

name&amp;gt; google_drive_crypt
remote&amp;gt; google_drive
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
&lt;b&gt;&lt;/b&gt;&lt;center&gt;Thanks!&lt;br&gt;Cheers!&lt;/center&gt;
&lt;/h1&gt;

</description>
      <category>help</category>
      <category>rclone</category>
      <category>linux</category>
    </item>
    <item>
      <title>Vamos escrever? Um guia prático pra começar a bloggar</title>
      <author>Pachi 🪐 (she/her/ela)</author>
      <pubDate>Sun, 09 Jan 2022 01:54:29 +0000</pubDate>
      <link>https://dev.to/acaverna/vamos-escrever-um-guia-pratico-pra-comecar-a-bloggar-3i1</link>
      <guid>https://dev.to/acaverna/vamos-escrever-um-guia-pratico-pra-comecar-a-bloggar-3i1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#senta-que-l%C3%A1-vem-hist%C3%B3ria"&gt;
  &lt;/a&gt;
  Senta que lá vem história…
&lt;/h2&gt;

&lt;p&gt;Eu sempre gostei de escrever.&lt;br&gt;
Minha primeira vitória foi na segunda série, quando minha professora gostou tanto de uma historinha que eu escrevi, que ela digitou, fez perguntas sobre o texto e compartilhou com a turma como exercicio de leitura e intrepretação de texto. &lt;br&gt;
&lt;strong&gt;Fiquei emocionada!&lt;/strong&gt; &lt;br&gt;
Depois disso eu nunca parei de escrever, mas nada sério ou público. &lt;br&gt;
Quando consegui acesso à internet, em 2007, comecei a bloggar, principalmente para mim mesma, apenas pelo prazer de escrever.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#e-ai-veio-o-c%C3%B3digo"&gt;
  &lt;/a&gt;
  E ai veio o código
&lt;/h2&gt;

&lt;p&gt;No final de 2018, comecei a aprender a codar e, no verão de 2019, fui para Codeland, uma confêrencia de programação que ocorre em Nova Iorque e tem como foco o público iniciante.  Nessa conferecia assisti a uma palestra, da &lt;a href="https://twitter.com/ASpittel"&gt;Ali Spittel&lt;/a&gt; sobre blogs e porque tides deveriam blogger, e isso me inspirou a começar a escrever aqui no Dev.to.&lt;/p&gt;

&lt;p&gt;Se você for reparar no meu perfil aqui, verá nitidamente minha evolução como escritora e como comecei a ganhar confiança durante o processo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Devagar e sempre… E assim como a Ali me inspirou naquele verão, eu quero inspirar você&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#por-que-escrever"&gt;
  &lt;/a&gt;
  Por que escrever?
&lt;/h2&gt;

&lt;p&gt;Vou ser sincera com você aqui, não me lembro muito sobre o conteúdo da palestra que mencionei a cima, mas lembro que me inspirou e me fez começar a escrever, o que me ajudou a estar onde estou hoje.&lt;br&gt;
Tem uma frase que diz que as pessoas podem não se lembrar o que você disse, mas se lembram como você os fez sentir… E é bem isso nesse caso.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Eu comecei a escrever apenas para registrar minha jornada e TALVEZ fazer algumas amizades. 
Agora escrevo para ajudar e motivar as pessoas, para compartilhar o que sei e escrevo como parte do meu trabalho, mas ainda escrevo sobre a minha jornada.&lt;/li&gt;
&lt;li&gt;Escrever é  provavelmente o formato de criação de conteúdo mais simples para se começar, pensando no tempo consumido e nos recursos necessários, assim como no fato de que você pode editar seu conteudo de prática caso necessário,&lt;/li&gt;
&lt;li&gt; Você pode compartilhar com muitas pessoas, que podem ler no ritmo delas, tomar notas facilmente do que elas querem ler novamente mais tarde,&lt;/li&gt;
&lt;li&gt;Você não precisa se expor muito, como por exemplo, com videos, aonde sua voz e seu rosto estão sendo compartilhados. &lt;/li&gt;
&lt;li&gt;Escrever também é a maneira mais acessível de criar conteúdo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Portanto, no geral, se você deseja criar conteúdo, mas não sabe por onde começar, eu sempre recomendo começar por aqui. &lt;strong&gt;Vamos escrever!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sobre-o-que-escrever-e-formatos-de-escrita"&gt;
  &lt;/a&gt;
  Sobre o que escrever e formatos de escrita
&lt;/h2&gt;

&lt;p&gt;A pergunta que não quer calar é… Sobre o que posso escrever? Já existem posts sobre TUDO por aí! Sim, isso é verdade. Mas não subestime como sua experiência, sua “voz” e seu estilo de escrita podem tornar as coisas mais compreensiveis e ajudar outras pessoas.&lt;br&gt;
Vamos criar algumas listas aqui. Responda as perguntas abaixo e escreva as respostas em algum lugar:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;O que você  sabe? E não se prenda a apenas tópicos técnicos.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;O que você quer aprender? E porque?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Que problemas você revolveu recentemente? Como você resolveu eles?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Que perguntas você tem?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Responder a essas perguntas lhe dará alguns tópicos para trabalhar. &lt;br&gt;
Aqui está uma das minhas listas passadasl para você ter uma visão melhor:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cvv3asoo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.therelicans.com/remoteimages/uploads/articles/x531nyndcehq8revjoxa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cvv3asoo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.therelicans.com/remoteimages/uploads/articles/x531nyndcehq8revjoxa.png" alt="Screenshot de uma das minhas listas" width="522" height="686"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora, sobre os formatos de escrita,pode ser um tutorial, ou uma lista de lições aprendidas, ou apenas uma narrativa direta.&lt;/p&gt;

&lt;p&gt;Meu primeiro post no blog foi mais como um diário pessoal, onde falei sobre minha vida como estudante de programação. Hoje em dia escrevo mais conteúdo técnico, focado no meu público: devs iniciantes e mulheres na área de tecnologia.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#meu-processo-de-escrita"&gt;
  &lt;/a&gt;
  Meu processo de escrita
&lt;/h2&gt;

&lt;p&gt;Vamos falar sobre o processo de escrita. Embora cada pessoa deva criar seu próprio processo, existem algumas etapas que podem beneficiar a maioria das escritoras. Compartilharei com você o MEU processo e espero que isso ajude você a criar o seu.&lt;/p&gt;

&lt;p&gt;Eu tenho uma quadro no Notion onde eu acompanho meus textos e escritas por colunas.&lt;br&gt;
A primeira coluna é para &lt;strong&gt;ideias&lt;/strong&gt;. &lt;br&gt;
Toda vez que penso em um tópico que poderia se tornar um bom post, escrevo isso lá. &lt;br&gt;
A segunda coluna é para postagens &lt;strong&gt;Em processo&lt;/strong&gt;, seguida por &lt;strong&gt;Em revisão&lt;/strong&gt;, &lt;strong&gt;Postadas&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YYE2xeaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.therelicans.com/remoteimages/uploads/articles/1nydmvf6hcwlujoqrd9y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YYE2xeaE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.therelicans.com/remoteimages/uploads/articles/1nydmvf6hcwlujoqrd9y.png" alt="foto do quadro" width="880" height="521"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Eu tenho um modelo de estrutura de tópicos que uso toda vez que começo um novo post. Ele contém os elementos que eu quero que meu post tenha:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Intro - Sobre o que será este post,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Seções 1, 2 e 3 - Normalmente eu tenho 3 pontos principais, e cada seção cobre um.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Conclusão - Aqui eu resumo todos os itens acima em uma frase ou duas.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Call to action (opcional) - O que eu quero que o leitor faça a seguir? No meu caso, eu geralmente quero que as pessoas lendo se sintam interessadas em me seguir e acompanhar meu trabalho pela Troco e pelo Twitter.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eu também gosto de criar capas para meu artico usando o Canva.com e uso um editor de Markup, o &lt;a href="https://stackedit.io/app#"&gt;https://stackedit.io/app#&lt;/a&gt;, para usar Markup e deixar meu artigo mais legivel.&lt;/p&gt;

&lt;p&gt;Quando eu fico satisfeita com as etapas acima, o que não demora muito, porque eu acredito que feito é melhor do que perfeita. eu o publico e o movo para a coluna &lt;strong&gt;Postado&lt;/strong&gt; no meu quadro.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#checklist"&gt;
  &lt;/a&gt;
  Checklist
&lt;/h2&gt;

&lt;p&gt;Então, aqui estão, em uma lista de verificação, as etapas que sigo para cada postagem do blog:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Escolha uma ideia da sua lista de ideias,
2.Crie um rascunho do post, começando com os subtitulos e pontos que você quer discutir,

&lt;ol&gt;
&lt;li&gt;Comece a escrever o artigo, se guiando pelos pontos acima,&lt;/li&gt;
&lt;li&gt;Depois de terminar de escrever, crie uma capa no Canva.com,&lt;/li&gt;
&lt;li&gt;Use um corretor ortigráfico,&lt;/li&gt;
&lt;li&gt;Em seguida, use o &lt;a href="https://stackedit.io/app#"&gt;https://stackedit.io/app#&lt;/a&gt; para formatar o Markup e  facilitar a leitura.&lt;/li&gt;
&lt;li&gt;É hora de postar!&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o-e-desafio"&gt;
  &lt;/a&gt;
  Conclusão e Desafio!
&lt;/h2&gt;

&lt;p&gt;AEEEEEEE! Você acaba de aprender como eu escrevo meus posts, por que faço isso e todas as dicas que posso dar para você começar a escrever um ótimo conteúdo!&lt;/p&gt;

&lt;p&gt;Agora vem cá…&lt;br&gt;
&lt;strong&gt;Tenho um desafio para você:&lt;/strong&gt; &lt;br&gt;
Como esta sendo a sua jornada na área de tecnologia? Por qur você decidiu entrar na area?&lt;br&gt;
Escreva um artigo sobre isso e poste aqui no Dev.to com a tag #braziliandevs !&lt;br&gt;
Quando terminar, compartilhe comigo para que eu possa revisar para você (se você quiser, é claro) e dar conselhos sobre como e onde melhorar, se necessário!&lt;/p&gt;

&lt;p&gt;Um fofo abraço,&lt;br&gt;
Pachi Codes &amp;lt;3&lt;/p&gt;

</description>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>How you can prevent accidentally revealing your passwords while screen-sharing using these simple python one-liners</title>
      <author>Bilal</author>
      <pubDate>Sun, 09 Jan 2022 00:35:51 +0000</pubDate>
      <link>https://dev.to/glowinginthedark/how-you-can-prevent-accidentally-revealing-your-passwords-while-screen-sharing-using-these-simple-python-one-liners-352p</link>
      <guid>https://dev.to/glowinginthedark/how-you-can-prevent-accidentally-revealing-your-passwords-while-screen-sharing-using-these-simple-python-one-liners-352p</guid>
      <description>&lt;p&gt;Let's say that you've written up some automation scripts to save yourself some time. Such scripts can often be used to make your work life easier, but they usually also include your credentials. In a different scenario, you might just be using credentials to test something. &lt;/p&gt;

&lt;p&gt;It can be very handy to quickly be able to substitute your real credentials into some gibberish text like &lt;strong&gt;base64&lt;/strong&gt; which your code can then convert back. This way, when someone takes a glance 👀 at your code, they will not be intrigued by the sight of your bare credentials laying in the open.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#detour-for-beginners-what-is-base64"&gt;
  &lt;/a&gt;
  Detour for beginners - &lt;em&gt;What is base64?&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;base64 is a character encoding similar to ASCII or UTF-8, except that base64 contains a set of 64 common (&lt;a href="https://en.wikipedia.org/wiki/Base64#Design"&gt;printable&lt;/a&gt;) text characters. It was created to make binary data "safer" to transmit via email so that it remains unaffected. You can take a look at how ASCII text and binary digits can be converted to and from base64 text &lt;a href="https://en.wikipedia.org/wiki/Base64#Examples"&gt;here&lt;/a&gt; and &lt;a href="https://stackabuse.com/encoding-and-decoding-base64-strings-in-python/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For us, this is useful because we can input our real credentials as UTF-8 text and in the output, each character will end up likely as a different character - hence the gibberish. You can experiment with this by following the steps below.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;You can perform these steps in an interactive python terminal, or a regular python file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-import-base64"&gt;
  &lt;/a&gt;
  1. Import base64
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-encode-your-real-credentials"&gt;
  &lt;/a&gt;
  2. Encode your real credentials
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;encoded_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"YOUR_PASSWORD"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In &lt;code&gt;"YOUR_PASSWORD".encode()&lt;/code&gt;, &lt;a href="https://docs.python.org/3/library/stdtypes.html#str.encode"&gt;str.encode&lt;/a&gt; is used to convert the UTF-8 text "YOUR_PASSWORD" to the corresponding UTF-8 bytes (binary).&lt;/li&gt;
&lt;li&gt;Next, the output bytes from &lt;code&gt;str.encode()&lt;/code&gt; are input to &lt;a href="https://docs.python.org/3/library/base64.html#base64.b64encode"&gt;base64.b64encode()&lt;/a&gt;, which converts the UTF-8 bytes to base64 bytes.&lt;/li&gt;
&lt;li&gt;Lastly, we convert the base64 bytes to UTF-8 text by calling &lt;code&gt;decode()&lt;/code&gt; on the return value of &lt;code&gt;base64.b64encode()&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Visually, this is how it looks:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ywQe186--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15fj1ebls4i3b9hm7kq4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ywQe186--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15fj1ebls4i3b9hm7kq4.png" alt="Flow chart showing a breakdown of base64 encoding in python" width="880" height="542"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-use-your-base64-encoded-credentials-in-your-automation-scriptcode"&gt;
  &lt;/a&gt;
  3. Use your base64 encoded credentials in your automation script/code
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;my_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"WU9VUl9QQVNTV09SRA=="&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Neat! 😁&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#bonus-javascript-oneliner"&gt;
  &lt;/a&gt;
  Bonus: JavaScript one-liner
&lt;/h2&gt;

&lt;p&gt;After encoding your credential in base64 using python, you can also use the encoded text in JavaScript - using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/atob"&gt;atob()&lt;/a&gt; function - like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;myPass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;atob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;WU9VUl9QQVNTV09SRA==&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;As a final note, if you are writing production code or anything that will be used in the long-run, this is not the best way to store credentials. For the long term, it is better to use a configuration file or a .env file  for environment variables. &lt;em&gt;If you'd like an article diving into those subjects, let me know in the comments!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you have questions about any part or thoughts you want to share, feel free to mention those in the comments below as well :)&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>programming</category>
      <category>python</category>
    </item>
    <item>
      <title>Self-Taught Developer Journal, Day 34: TOP JS Foundations Part 4, Arrays and Loops</title>
      <author>Jennifer Tieu</author>
      <pubDate>Sun, 09 Jan 2022 00:35:14 +0000</pubDate>
      <link>https://dev.to/jennifer_tieu/self-taught-developer-journal-day-34-top-js-foundations-part-4-arrays-and-loops-3a0o</link>
      <guid>https://dev.to/jennifer_tieu/self-taught-developer-journal-day-34-top-js-foundations-part-4-arrays-and-loops-3a0o</guid>
      <description>&lt;p&gt;Today I learned...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#arrays"&gt;
  &lt;/a&gt;
  Arrays
&lt;/h2&gt;

&lt;p&gt;An array is a global list-like object. It is a common practice to create arrays using the &lt;strong&gt;const&lt;/strong&gt; variable declaration.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const arrayExample = [1, 2, 3];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Reminder, you can still change the elements inside of the array when it's declared with &lt;strong&gt;const&lt;/strong&gt;, but the array cannot be reassigned.&lt;/p&gt;

&lt;p&gt;Another method to create an array is using the new keyword:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const arrayExample = new Array(1, 2, 3);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This is equivalent to the array literal method (const array = []). The array literal method is preferred over the new keyword for simplicity, readability, and execution time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accessing-elements"&gt;
  &lt;/a&gt;
  Accessing Elements
&lt;/h3&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// First element
let firstElem = arrayExample[0] = 1;

// Last element
let lastElem = arrayExample[arrayExample - 1];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#adding-elements-in-arrays"&gt;
  &lt;/a&gt;
  Adding Elements in Arrays
&lt;/h2&gt;

&lt;p&gt;Use the &lt;strong&gt;push()&lt;/strong&gt; method:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const arrayExample = [1, 2, 3];
arrayExample.push(4);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Use &lt;strong&gt;.length&lt;/strong&gt; or &lt;strong&gt;indexes&lt;/strong&gt;, but beware of undefined holes:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const arrayExample = [1, 2, 3];
// Remember, length is calculated starting from 1 but arrays are indexed starting from 0
arrayExample[arrayExample.length] = 4;

// holes are made in the array with the elements not explicitly assigned are given the value undefined
arrayExample[6] = 10; // [1, 2, 3, 4, undefined, undefined, 10]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#associative-array"&gt;
  &lt;/a&gt;
  Associative Array
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Arrays with named indexes are called associative arrays (or hashes)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;JavaScript does NOT support array with named indexes and always use &lt;strong&gt;numbered indexes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;"If you use named indexes, JavaScript WILL REDEFINE THE ARRAY TO AN OBJECT."&lt;/strong&gt; This will result in incorrect results.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const pets = [];
const["dog"] = "Duke";
const["cat"] = "Agatha";
pets.length; // returns 0
pets[0]; // returns undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;In JavaScript, arrays (a special kind of object) use numbered indexes and objects use named indexes.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use objects when you want the element names to be strings.&lt;/li&gt;
&lt;li&gt;Use arrays when you want the element names to be numbers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-vs-new-array"&gt;
  &lt;/a&gt;
  [] vs new Array()
&lt;/h2&gt;

&lt;p&gt;Some different behavior:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const array = [10]; // returns [10]

const array = new Array(10); returns array with 10 undefined elements
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#recognizing-arrays"&gt;
  &lt;/a&gt;
  Recognizing Arrays
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;typeof()&lt;/strong&gt; operator will return an array as the type object.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const array = [1, 2, 3];
typeof(array); // returns object
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Instead use &lt;strong&gt;isArray()&lt;/strong&gt; or &lt;strong&gt;instanceof&lt;/strong&gt;:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const array = [1, 2, 3];
Array.isArray(array); // returns true

array instanceof Array; // returns true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#loops"&gt;
  &lt;/a&gt;
  Loops
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;map()&lt;/strong&gt; method performs an action to each item in a collection and creates a new collection from it.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const dogs = ["Husky", "Dachshund", "Poodle"];

const upperDogs = dogs.map(dog =&amp;gt; dog.toUpper())

console.log(upperDogs); 
// return ["HUSKY", "DACHSCHUND", "POODLE"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;filter()&lt;/strong&gt; method creates a NEW array if the elements in the collection pass a test by the provided function.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const dogs = ["Husky", "Dachshund", "Poodle"];

const hDogs = dogs.filter(dog =&amp;gt; dog.startsWith("H"))

console.log(hDogs); 
// return ["Husky"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;map() and filter() are often used with function expressions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.theodinproject.com/paths/foundations/courses/foundations/"&gt;The Odin Project Project&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.w3schools.com/js/js_array_methods.asp"&gt;https://www.w3schools.com/js/js_array_methods.asp&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.w3schools.com/js/js_arrays.asp"&gt;https://www.w3schools.com/js/js_arrays.asp&lt;/a&gt;&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&lt;/a&gt;&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code"&gt;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Lotir - Share link and images between your phone and your computer</title>
      <author>Julien</author>
      <pubDate>Sun, 09 Jan 2022 00:05:03 +0000</pubDate>
      <link>https://dev.to/julien41/lotir-share-link-and-images-between-your-phone-and-your-computer-5d36</link>
      <guid>https://dev.to/julien41/lotir-share-link-and-images-between-your-phone-and-your-computer-5d36</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;I've always found painful to use email to share things to my phone&lt;/strong&gt;. But I've never found any solutions solving this problem efficiently. They would either be too complex or not designed as first for this use case.&lt;br&gt;
So I built this app by myself.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Action Star&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;This app is event-driven. Each time something is shared from desktop, a notification is sent to phone thanks to Realm Trigger&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/julien040"&gt;
        julien040
      &lt;/a&gt; / &lt;a href="https://github.com/julien040/lotir"&gt;
        lotir
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Lotir is an app to share text and images between your devices
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Lotir&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/julien040/lotir/master/assets/Github%20header.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ubWaXmX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/julien040/lotir/master/assets/Github%2520header.png" alt="Header"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
What is Lotir ?&lt;/h2&gt;
&lt;p&gt;I've created this app because I couldn't support sending myself an email to share something on my phone.&lt;/p&gt;
&lt;p&gt;Lotir is a simple app that allows you to share images and text between your phone and your computer.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It's free&lt;/li&gt;
&lt;li&gt;No ads&lt;/li&gt;
&lt;li&gt;Simple to use&lt;/li&gt;
&lt;li&gt;Share text and images&lt;/li&gt;
&lt;li&gt;Temporary : Lotir keep your stuff for 7 days&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=48bThHfEfug" title="Lotir - Text sharing demo" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/863738635672839aa0c489faf70544f3102fb5b5c8f0eb25254c067fb289f041/68747470733a2f2f696d672e796f75747562652e636f6d2f76692f34386254684866456675672f302e6a7067" alt="Demo Image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
How to use it ?&lt;/h2&gt;
&lt;p&gt;To use the app, you need to install it on your phone. Download it from &lt;a href="https://github.com/julien040/lotir/releases"&gt;Github Release&lt;/a&gt;. To access the computer app, just go to &lt;a href="https://lotir.ml" rel="nofollow"&gt;lotir.ml&lt;/a&gt; and set a sync key.&lt;/p&gt;
&lt;p&gt;If you want to know more about this project, it has been built for the MongoDB Atlas hackathon. Check the announcement post &lt;a href="https://dev.to/julien41/lotir-share-link-and-images-between-your-phone-and-your-computer-3cd9" rel="nofollow"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Development&lt;/h2&gt;
&lt;h3&gt;
Project structure&lt;/h3&gt;
&lt;p&gt;This repository is monorepo. It contains the following sub-projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;mobile&lt;/code&gt; - Mobile apps (Expo)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;desktop&lt;/code&gt; - Desktop apps (Neutralino)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;website&lt;/code&gt; - Web app (Next.js)&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/julien040/lotir"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#whats-the-use-case-of-the-app-"&gt;
  &lt;/a&gt;
  What's the use case of the app ? 🤔
&lt;/h3&gt;

&lt;p&gt;Lotir permites an easy share of text and image between your phone and your computer. It takes less than 30 seconds to share. And it's bi-directionnal. You can share from your computer or your phone.&lt;br&gt;
Lotir can be useful in these situations :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Imagine you receive a long OTP Code on your phone. Use Lotir to send it to your computer.&lt;/li&gt;
&lt;li&gt;You have a very long url that you should send to Whatsapp. Use Lotir to send it to your phone.&lt;/li&gt;
&lt;li&gt;You have a photo on your phone, and you need it on your computer. Send it over Lotir.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, everything is temporary. Thanks to &lt;a href="https://docs.mongodb.com/manual/core/index-ttl/"&gt;MongoDB TTL indexes&lt;/a&gt;, each thing shared stays on the server for 7 days.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Share any text from and to your phone/computer&lt;/li&gt;
&lt;li&gt;Share any image from and to your phone/computer&lt;/li&gt;
&lt;li&gt;Receive a notification when a new share happened&lt;/li&gt;
&lt;li&gt;Data is safe and temporary. I use a MongoDB Database hosted on Atlas. Data is replicated using a replica-set in three availability zones and can't stay for more than 7 days.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#how-to-use-"&gt;
  &lt;/a&gt;
  How to use ?
&lt;/h3&gt;

&lt;p&gt;Lotir does not have the concept of registration/login. Instead, it uses a sync key. Consider it as a secret key, it authenticates you to the server. Keep it hidden. To use Lotir, just put the same key in all your devices.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XWeQdkU7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fglubv32wqs681an1lm4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XWeQdkU7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fglubv32wqs681an1lm4.png" alt="How to set sync key" width="600" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you done that, you're ready to use Lotir&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#download-app"&gt;
  &lt;/a&gt;
  Download app
&lt;/h3&gt;

&lt;p&gt;As you saw, Lotir is composed of two parts : a computer app and a phone app.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#computer"&gt;
  &lt;/a&gt;
  Computer
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://lotir.ml"&gt;Lotir.ml&lt;/a&gt; is a web app that can handle all computer functionalities. However, if you prefer desktop apps, you can download them from &lt;a href="https://github.com/julien040/lotir/releases/tag/v1.0.0"&gt;github release&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---SyGs4hJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4ym3kref2tma3sl13d6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---SyGs4hJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4ym3kref2tma3sl13d6.png" alt="Website Home" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#phone"&gt;
  &lt;/a&gt;
  Phone
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Currently, iOS is not yet available.&lt;/em&gt;&lt;br&gt;
To use Lotir on your phone, install its APK from &lt;a href="https://github.com/julien040/lotir/releases/tag/v1.0.0"&gt;github release&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Google Play protect may show several warnings about the security of this app. You can skip them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MgcE1U0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmv3p247qfhh76dbt6sn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MgcE1U0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmv3p247qfhh76dbt6sn.png" alt="Lotir on android" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#architecture-%F0%9F%97%BA"&gt;
  &lt;/a&gt;
  Architecture 🗺
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8rmvd0iK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdqxkd1yrg2pxmaathrm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8rmvd0iK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdqxkd1yrg2pxmaathrm.png" alt="Lotir architecture" width="880" height="838"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#clients-blue-on-diagram"&gt;
  &lt;/a&gt;
  Clients (blue on diagram)
&lt;/h4&gt;

&lt;p&gt;Clients are mobile apps, desktop apps and web apps. They identify themselves using the sync key specified in settings. Using Realm SDK (web and React Native), they interact with MongoDB Realm Functions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web app is built using NextJS and Realm Web SDK. UI is handled by chakra UI. I've added a custom theme on top of it.&lt;/li&gt;
&lt;li&gt;Mobile apps are built using Expo and NativeBase. Notification service is also handled by Expo. Apps are then built using EAS Build.&lt;/li&gt;
&lt;li&gt;Desktop apps are just a webview around &lt;a href="https://lotir.ml"&gt;Lotir.ml&lt;/a&gt; created with Neutralino. These are lighter than Electron.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#realm-function-purple-on-diagram"&gt;
  &lt;/a&gt;
  Realm Function (purple on diagram)
&lt;/h4&gt;

&lt;p&gt;Those are the main interface between client and backend. There is 5 of them :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;addMessage : used to share text&lt;/li&gt;
&lt;li&gt;addImage : used to share image&lt;/li&gt;
&lt;li&gt;setToken : used to register notification token for mobile app&lt;/li&gt;
&lt;li&gt;getMessages : retrieve shared text and images for clients&lt;/li&gt;
&lt;li&gt;notifMobile : a function that responds to Realm trigger to create a new notifications&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;When an image needs to be shared, it is first upload to imgBB by the &lt;code&gt;addImage&lt;/code&gt; function and link is then saved using &lt;code&gt;addMessage&lt;/code&gt; function&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;
  &lt;a href="#database-trigger-yellow-on-diagram"&gt;
  &lt;/a&gt;
  Database trigger (yellow on diagram)
&lt;/h4&gt;

&lt;p&gt;Each time something is shared, a new document is created in MongoDB. Creation of a new document triggers the notifMobile function. If it is detected that the message comes from a computer, the function sends a notification to the phone.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#mongodb-atlas-database-green-on-diagram"&gt;
  &lt;/a&gt;
  MongoDB Atlas database (green on diagram)
&lt;/h4&gt;

&lt;p&gt;This is the central piece of the architecture. The MongoDB database hosted on MongoDB Atlas saves and retrieves all data for Realm Functions. Each share is saved in a collection with 5 attributes :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;platform : mobile or computer&lt;/li&gt;
&lt;li&gt;id : the sync key&lt;/li&gt;
&lt;li&gt;title : &lt;em&gt;self explanatory&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;body : &lt;em&gt;self explanatory&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;time : timestamp of when the share was created&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, a MongoDB TTL index ensures that shares don't stay more than 7 days on the server.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#mongodb-charts"&gt;
  &lt;/a&gt;
  MongoDB Charts
&lt;/h4&gt;

&lt;p&gt;To check some stats about the app, I've set up a small dashboard using MongoDB Charts. I can see how many different users there are, the repartition per platform and how many shares have been made in a week.&lt;br&gt;
&lt;a href="https://charts.mongodb.com/charts-hackathon-yozau/public/dashboards/7229043c-49a4-49d0-9010-efdfe1cce2c9"&gt;Link to dashboard&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#mongodb-realm-hosting"&gt;
  &lt;/a&gt;
  MongoDB Realm Hosting
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://lotir.ml"&gt;Lotir.ml&lt;/a&gt; is hosted using MongoDB Realm Hosting&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#open-source-projects-used"&gt;
  &lt;/a&gt;
  Open Source projects used
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Expo : thanks to a recent update, Realm SDK could be used along Expo&lt;/li&gt;
&lt;li&gt;Realm SDK (web and React Native) : those SDKs greatly simplified development and permits me to avoid using http endpoints.&lt;/li&gt;
&lt;li&gt;react-native-async-storage : used to save data in Mobile app&lt;/li&gt;
&lt;li&gt;Native base : Great UI library for React Native&lt;/li&gt;
&lt;li&gt;react-navigation : Router for React Native&lt;/li&gt;
&lt;li&gt;React for NextJs and React Native&lt;/li&gt;
&lt;li&gt;NextJS : the site isn't optimized but still run fast thanks to NextJS&lt;/li&gt;
&lt;li&gt;Chakra UI : Equivalent of Native base but for React and Vue.&lt;/li&gt;
&lt;li&gt;Icons 8 : Icons come from this awesome website&lt;/li&gt;
&lt;li&gt;Neutralino : Embed the web app in executables&lt;/li&gt;
&lt;li&gt;Realm-cli : I could easily push and pull config of Realm Project thanks to CLI.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;To record my phone screen, I use &lt;code&gt;Your Phone&lt;/code&gt; from Microsoft&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These videos show two situations : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Transfering text to phone&lt;/li&gt;
&lt;li&gt;Transfering image to phone&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/48bThHfEfug"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ReES1dGLhd4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>atlashackathon</category>
    </item>
    <item>
      <title>Why a High Code Coverage Is Nothing Worth and Leads Only to False Conclusions</title>
      <author>Vulcanus</author>
      <pubDate>Sun, 09 Jan 2022 00:04:30 +0000</pubDate>
      <link>https://dev.to/vulcanus/why-a-high-code-coverage-is-nothing-worth-and-leads-only-to-false-conclusions-48li</link>
      <guid>https://dev.to/vulcanus/why-a-high-code-coverage-is-nothing-worth-and-leads-only-to-false-conclusions-48li</guid>
      <description>&lt;p&gt;Code coverage shows the degree in percentage to which an application is executed by a testing framework. It is used for quality assurance and "helps" to increase quality of software.&lt;/p&gt;

&lt;p&gt;In this article I will demonstrate why code coverage will not help increasing quality, can be faked and what you can do instead to ensure quality.&lt;/p&gt;

&lt;p&gt;Most tools show the percentage of code coverage by the executed lines of code. Normally unit, integration and end to end tests help to increase the coverage, which means that by theory you have to write the test by yourself to get the code tested. But is that really the only way? Let's see if that is really the case with an C# example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;ConsoleApp1&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SimpleClass&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;SimpleProperty&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nf"&gt;SimpleMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s"&gt;"simple yes"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"simple no"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;SimpleMethod2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;SimpleMethod3&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have created a small class that has a property and three methods doing basic things. When a test is written for a class like this, it might look like in the code below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Test1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;SimpleClass&lt;/span&gt; &lt;span class="n"&gt;simpleClass&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;SimpleClass&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;simpleClass&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SimpleMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="n"&gt;Assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;IsTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"simple yes"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This simple test executes one method and asserts the output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--erpYYWul--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e9r0x6zqow1utfk2tdu5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--erpYYWul--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e9r0x6zqow1utfk2tdu5.PNG" width="880" height="60"&gt;&lt;/a&gt;&lt;br&gt;Code coverage of Test1
  &lt;/p&gt;

&lt;p&gt;There is a more complex way to "test" a class but it automates the execution of the methods which means that this code will automatically "test" other classes too. The code is very basic and more of an example. It should only help to show my point.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Test2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Assembly&lt;/span&gt; &lt;span class="n"&gt;assembly&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Assembly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ClassLibrary1"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;objectTypes&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;assembly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetTypes&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;parameterInstances&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;();&lt;/span&gt;

    &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;objectType&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;objectTypes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;objectType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ConstructorInfo&lt;/span&gt; &lt;span class="n"&gt;objectConstructor&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;objectType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetConstructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EmptyTypes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;objectInstance&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;objectConstructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;methodInfos&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;objectType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetMethods&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;methodInfo&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;methodInfos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;parameterInfos&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;methodInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetParameters&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;methodParameters&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;();&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;parameterInfos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;parameterType&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parameterInfos&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;ParameterType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;parameterInstances&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ContainsKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameterType&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameterType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsValueType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="n"&gt;parameterInstances&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameterType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;CreateValPossibilities&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameterType&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="k"&gt;else&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="n"&gt;parameterInstances&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameterType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;CreateRefPossibilities&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameterType&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="n"&gt;methodParameters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameterInstances&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;parameterType&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;object&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parameterPermutations&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;GetAllPossibleCombinations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;methodParameters&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;parameterPermutation&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;parameterPermutations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;methodInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;objectInstance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parameterPermutation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToArray&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To explain what this code does with the power of &lt;a href="https://en.wikipedia.org/wiki/Reflective_programming"&gt;reflections&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It loads the "ClassLibrary1" assembly and collects all types it contains&lt;/li&gt;
&lt;li&gt;It iterates through the type collection and creates an instance of the ones being a class&lt;/li&gt;
&lt;li&gt;It iterates through the methods of that class, creates parameters with specific values of certain types and creates a list of permutations to pass them to those methods for execution (working kind of like a &lt;a href="https://en.wikipedia.org/wiki/Fuzzing"&gt;Fuzzer&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Guess the code coverage of &lt;em&gt;SimpleClass&lt;/em&gt; …&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bXJo44V7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yia5d7zkcqhc3vkej97d.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bXJo44V7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yia5d7zkcqhc3vkej97d.PNG" width="880" height="56"&gt;&lt;/a&gt;&lt;br&gt;Code coverage of Test2
  &lt;/p&gt;

&lt;p&gt;This code sample will not be able to execute every code line in other scenarios since there are branches you can not cover that simply. Sure you can tailor the code to have some higher degree of line coverage, but this does not enhance quality. By theory we now have achieved "quality" when reading this KPI. Executing code without real context to just execute it does not make any sense. But what should you strive for instead?&lt;/p&gt;

&lt;p&gt;Context! We need context to know about the environment, the users, the input and the processes. To explain you, why we need context, let's make an example with &lt;em&gt;SimpleClass&lt;/em&gt; and have a look on &lt;em&gt;SimpleMethod2&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;SimpleMethod2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method takes as parameter a string and returns the length of it. When executing a test with a string, we covered the complete method and reached 100% here. Cool? Well, when you look more closely, you will notice it. Do we really ensure "quality"?&lt;/p&gt;

&lt;p&gt;The int here is a Int32 &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/struct"&gt;struct&lt;/a&gt; where the lowest possible value is &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.int32.minvalue?view=net-6.0"&gt;-2147483648&lt;/a&gt; and the highest &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.int32.maxvalue?view=net-6.0"&gt;2147483647&lt;/a&gt;. Since the Length property of string is a type of  Int32 the theoretical length of a string is the highest possible value of Int32. Practically you will not really reach this number even close since the Common Language Runtime (CLR) limits the size of single objects by 2GB (well, you could in fact change that in the &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/run-time-config/garbage-collector#allow-large-objects"&gt;config&lt;/a&gt; but normally there is no reason for that). By default a string uses UTF-16 which needs two bytes for a single character and in fact this means you probably reach a length of 1073741823. &lt;br&gt;
Ok, the length of the string will not cause any problems but what can? Strings are reference types which means we have the power of null! When the parameter is null, the code will crash.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cfpEc3Sr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/proohp4o3tr7g1x57uj8.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cfpEc3Sr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/proohp4o3tr7g1x57uj8.PNG" width="595" height="94"&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.nullreferenceexception?view=net-6.0"&gt;NullReferenceException&lt;/a&gt;
  &lt;/p&gt;

&lt;p&gt;My point? Exactly this. Even though we have a high code coverage in this method, we still have the possibility that the application crashes. &lt;br&gt;
We need context to understand what can happen and model our test cases that way. Instead of caring much about the code coverage KPI, we should cover the different &lt;a href="https://en.wikipedia.org/wiki/Use_case"&gt;use cases&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Misuse_case"&gt;misuse cases&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5XW_Yh5b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkx4fcd935z2oevdxpfq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5XW_Yh5b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkx4fcd935z2oevdxpfq.png" width="496" height="496"&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://commons.wikimedia.org/wiki/File:Misuse_restaurant_model.svg"&gt;Use case and misuse case combined&lt;/a&gt;
  &lt;/p&gt;

&lt;p&gt;Shortly explained, while a use case defines the interactions between an actor and a system that contains a set of steps to accomplish a certain goal, does the misuse case describe the process of malicious acts against a system. But how can we ensure quality with context?&lt;/p&gt;

&lt;p&gt;We have to take one step back and define what quality is and what quality characteristics are going to be needed to ensure "quality."&lt;br&gt;
Quality is conditional, subjective and is understood differently by different people. While a consumer focuses on &lt;a href="https://en.wikipedia.org/wiki/Acceptance_testing"&gt;specification quality&lt;/a&gt;, producers have &lt;a href="https://en.wikipedia.org/wiki/Conformance_testing"&gt;conformance quality&lt;/a&gt; in mind. Knowing the different focus of each group, we can dig deeper more specifically. To do this we can use the quality models defined in &lt;a href="https://www.iso.org/obp/ui/#iso:std:iso-iec:25010:ed-1:v1:en"&gt;ISO 25010&lt;/a&gt; which is part of the 25000 series also known as SQuaRE (Systems and software Quality Requirements and Evaluation).&lt;br&gt;
The first model is quality in use. It shows how the product meets the needs of the users to achieve specific goals.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--75_wXRWe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkhe1vicvjh5l1y2su3p.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--75_wXRWe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkhe1vicvjh5l1y2su3p.PNG" width="461" height="604"&gt;&lt;/a&gt;&lt;br&gt;Quality In Use model
  &lt;/p&gt;

&lt;p&gt;The second one is product quality and consists of eight characteristics which are composed of sub characteristics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qm1IPVMO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9u4f1ihxoryjuxlcism6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qm1IPVMO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9u4f1ihxoryjuxlcism6.PNG" width="880" height="225"&gt;&lt;/a&gt;&lt;br&gt;System/Software Product Quality model
  &lt;/p&gt;

&lt;p&gt;Knowing now these quality models helps to see the usage and the product through different perspectives. With those characteristics in mind, we can enhance the requirements and refine them to be more specific about the needs. Now together with the use cases and misuse cases, we can test the code against different scenarios and functional as well as non-functional requirements. Knowing the different scenarios allows you also to build your own KPIs. With a high context coverage, you will also inherently reach a high code coverage, but this does not work the other way around.&lt;/p&gt;

&lt;p&gt;Testing your code automatically is important and working with effective KPIs helps you to focus on blind spots. Some KPIs are more effective than others so keep in mind what data is collected and processed to display you the result since a KPI can lead to false conclusions.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>testing</category>
      <category>codequality</category>
      <category>discuss</category>
    </item>
  </channel>
</rss>
