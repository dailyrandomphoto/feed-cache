<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How do you use Git and GitHub everyday when working with a team?</title>
      <author>nphamvn</author>
      <pubDate>Fri, 17 Sep 2021 00:17:03 +0000</pubDate>
      <link>https://dev.to/nphamvn/how-do-you-use-git-and-github-everyday-when-working-with-a-team-39ej</link>
      <guid>https://dev.to/nphamvn/how-do-you-use-git-and-github-everyday-when-working-with-a-team-39ej</guid>
      <description>&lt;p&gt;Start from scratch to final, how are you using?&lt;br&gt;
When do you initialize git, commit first commit and so on?&lt;/p&gt;

</description>
      <category>github</category>
      <category>discuss</category>
    </item>
    <item>
      <title>MS Graph, Blazor WebAssembly and Azure Static Web Apps</title>
      <author>Justin Yoo</author>
      <pubDate>Fri, 17 Sep 2021 00:00:25 +0000</pubDate>
      <link>https://dev.to/azure/ms-graph-blazor-webassembly-and-azure-static-web-apps-3p1d</link>
      <guid>https://dev.to/azure/ms-graph-blazor-webassembly-and-azure-static-web-apps-3p1d</guid>
      <description>&lt;p&gt;&lt;a href="https://docs.microsoft.com/azure/static-web-apps/overview?WT.mc_id=dotnet-42714-juyoo"&gt;Azure Static Web Apps (ASWA)&lt;/a&gt; offers a straightforward &lt;a href="https://docs.microsoft.com/azure/static-web-apps/authentication-authorization?WT.mc_id=dotnet-42714-juyoo"&gt;authentication&lt;/a&gt; feature. With this feature, you don't need to write a complicating authentication logic by your hand and can sign in to ASWA. By the way, the authentication details from there only show whether you've logged in or not. If you need more information, you should do something more on your end. Throughout this post, I'm going to discuss how to access your user profile data stored in &lt;a href="https://docs.microsoft.com/azure/active-directory/fundamentals/active-directory-whatis?WT.mc_id=dotnet-42714-juyoo"&gt;Azure Active Directory (AAD)&lt;/a&gt; through &lt;a href="https://docs.microsoft.com/graph/overview?WT.mc_id=dotnet-42714-juyoo"&gt;Microsoft Graph&lt;/a&gt; from the &lt;a href="https://docs.microsoft.com/aspnet/core/blazor/?WT.mc_id=dotnet-42714-juyoo"&gt;Blazor WebAssembly (WASM)&lt;/a&gt; app running on an &lt;a href="https://docs.microsoft.com/azure/static-web-apps/overview?WT.mc_id=dotnet-42714-juyoo"&gt;ASWA&lt;/a&gt; instance.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can find the sample code used in this post on this &lt;a href="https://github.com/fusiondevkr/fusiondevkr"&gt;GitHub repository&lt;/a&gt; (docs in Korean).&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/fusiondevkr"&gt;
        fusiondevkr
      &lt;/a&gt; / &lt;a href="https://github.com/fusiondevkr/fusiondevkr"&gt;
        fusiondevkr
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      fusiondevkr 백엔드 세팅
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Office for Fusion Dev Korea&lt;/h1&gt;
&lt;p&gt;Fusion Dev Korea 에서 운영하는 애플리케이션을 관리합니다.&lt;/p&gt;
&lt;h2&gt;
구조&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;resources&lt;/code&gt;: 애저 리소스를 구성하는 ARM 템플릿 및 Biceps 템플릿 파일&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;src&lt;/code&gt;: 프론트엔드 및 백엔드 애플리케이션&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;power/flow&lt;/code&gt;: 파워 오토메이트 솔루션&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;power/apps&lt;/code&gt;: 파워 앱스 솔루션&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/fusiondevkr/fusiondevkr"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#retrieving-authentication-data-from-azure-static-web-apps"&gt;
  &lt;/a&gt;
  Retrieving Authentication Data from Azure Static Web Apps
&lt;/h2&gt;

&lt;p&gt;After publishing your &lt;a href="https://docs.microsoft.com/aspnet/core/blazor/?WT.mc_id=dotnet-42714-juyoo"&gt;Blazor WASM&lt;/a&gt; app to &lt;a href="https://docs.microsoft.com/azure/static-web-apps/overview?WT.mc_id=dotnet-42714-juyoo"&gt;ASWA&lt;/a&gt;, the page before log-in might look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fPdN6u6D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/09/accessing-msgraph-from-blazor-wasm-running-on-aswa-01-en.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fPdN6u6D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/09/accessing-msgraph-from-blazor-wasm-running-on-aswa-01-en.png" alt="Before log-in"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to use &lt;a href="https://docs.microsoft.com/azure/active-directory/fundamentals/active-directory-whatis?WT.mc_id=dotnet-42714-juyoo"&gt;AAD&lt;/a&gt; as your primary identity provider, add the link to the &lt;code&gt;Login&lt;/code&gt; HTML element.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;After the sign-in, you can retrieve your authentication details by calling the API endpoint like below. For brevity, I omitted unnecessary codes.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Here are the authentication details from the response:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;As mentioned above, there's only limited information available from the response. Therefore, if you need more user details, you should do some additional work on your end.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessing-user-data-through-microsoft-graph"&gt;
  &lt;/a&gt;
  Accessing User Data through Microsoft Graph
&lt;/h2&gt;

&lt;p&gt;You only know your email address used for log-in. Here are the facts about your logged-in details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You signed in through your tenant where your email belongs.&lt;/li&gt;
&lt;li&gt;The sign-in information &lt;strong&gt;TELLS&lt;/strong&gt; your email address used for log-in.&lt;/li&gt;
&lt;li&gt;The sign-in information &lt;strong&gt;DOESN'T TELL&lt;/strong&gt; the tenant information where you logged in.&lt;/li&gt;
&lt;li&gt;The sign-in information &lt;strong&gt;DOESN'T TELL&lt;/strong&gt; the tenant information where the ASWA is hosted.&lt;/li&gt;
&lt;li&gt;The sign-in information &lt;strong&gt;DOESN'T TELL&lt;/strong&gt; the tenant information where you want to access.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In other words, there are chances that all three tenants details – the tenant where you logged in, the tenant hosting the ASWA instance, and the tenant where you want to access – might be different from each other. All you know of my details are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You logged into a tenant, and&lt;/li&gt;
&lt;li&gt;You only know my email address used for log-in.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then, how can you know your user details from the tenant that you want to access?&lt;/p&gt;

&lt;p&gt;First of all, you need to get permission to get the details to the tenant. Although you signed in to ASWA, it doesn't mean you have enough permission to access the resources. Because &lt;a href="https://docs.microsoft.com/azure/static-web-apps/overview?WT.mc_id=dotnet-42714-juyoo"&gt;ASWA&lt;/a&gt; offers &lt;a href="https://docs.microsoft.com/azure/static-web-apps/apis?WT.mc_id=dotnet-42714-juyoo"&gt;Azure Functions&lt;/a&gt; as its facade API, let's use this feature.&lt;/p&gt;

&lt;p&gt;When calling the facade API from the Blazor WASM app side, it always includes the auth details through the request header of &lt;code&gt;x-ms-client-principal&lt;/code&gt;. The information is the Base64 encoded string, which looks like this:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Therefore, decode the string and deserialise it to get the email address for log-in. Here's a POCO class for deserialisation.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;With this POCO class, deserialise the header value and get the email address you're going to utilise.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;All the plumbing to get the user details is done. Let's move on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#registering-app-on-azure-active-directory"&gt;
  &lt;/a&gt;
  Registering App on Azure Active Directory
&lt;/h2&gt;

&lt;p&gt;The next step is to &lt;a href="https://docs.microsoft.com/azure/active-directory/develop/quickstart-register-app?WT.mc_id=dotnet-42714-juyoo"&gt;register an app&lt;/a&gt; on &lt;a href="https://docs.microsoft.com/azure/active-directory/fundamentals/active-directory-whatis?WT.mc_id=dotnet-42714-juyoo"&gt;AAD&lt;/a&gt; through Azure Portal. I'm not going to go further for this step but will give you &lt;a href="https://docs.microsoft.com/azure/active-directory/develop/quickstart-register-app?WT.mc_id=dotnet-42714-juyoo"&gt;this document&lt;/a&gt; to get it done. Once you complete app registration, you should give it &lt;a href="https://docs.microsoft.com/azure/active-directory/develop/quickstart-configure-app-access-web-apis?WT.mc_id=dotnet-42714-juyoo#application-permission-to-microsoft-graph"&gt;appropriate roles and permissions&lt;/a&gt;, which is the &lt;a href="https://docs.microsoft.com/azure/active-directory/develop/quickstart-configure-app-access-web-apis?WT.mc_id=dotnet-42714-juyoo#application-permission-to-microsoft-graph"&gt;application permission&lt;/a&gt; instead of the delegate permission.  For example, &lt;code&gt;User.Read.All&lt;/code&gt; permission should be enough for this exercise.&lt;/p&gt;

&lt;p&gt;Once you complete this step, you'll have &lt;code&gt;TenantID&lt;/code&gt;, &lt;code&gt;ClientID&lt;/code&gt; and &lt;code&gt;ClientSecret&lt;/code&gt; information.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#microsoft-authentication-library-msal-for-net"&gt;
  &lt;/a&gt;
  Microsoft Authentication Library (MSAL) for .NET
&lt;/h2&gt;

&lt;p&gt;You first need to get an access token to retrieve your details stored on &lt;a href="https://docs.microsoft.com/azure/active-directory/fundamentals/active-directory-whatis?WT.mc_id=dotnet-42714-juyoo"&gt;AAD&lt;/a&gt;. There are many ways to get the token, but let's use the &lt;a href="https://docs.microsoft.com/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow?WT.mc_id=dotnet-42714-juyoo#get-a-token"&gt;client credential&lt;/a&gt; approach for this time. First, as we're using Blazor WASM, we need a NuGet package to install.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.nuget.org/packages/Microsoft.Identity.Client/"&gt;Microsoft.Identity.Client&lt;/a&gt;: &lt;code&gt;dotnet add package Microsoft.Identity.Client&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After installing the package, add several environment variables to &lt;code&gt;local.settings.json&lt;/code&gt;. Here are the details for authentication.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;To get the access token, write the code below. Without having to worry about the user interaction, simply use both ClientID and ClientSecret values, and you'll get the access token. For example, if you use the &lt;a href="https://docs.microsoft.com/dotnet/api/microsoft.identity.client.confidentialclientapplicationbuilder?WT.mc_id=dotnet-42714-juyoo"&gt;&lt;code&gt;ConfidentialClientApplicationBuilder&lt;/code&gt;&lt;/a&gt; class, you'll easily get the one (line #16-20).&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Once you have the access token in hand, you can use &lt;a href="https://docs.microsoft.com/graph/overview?WT.mc_id=dotnet-42714-juyoo"&gt;Microsoft Graph&lt;/a&gt; API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#microsoft-graph-api-for-net"&gt;
  &lt;/a&gt;
  Microsoft Graph API for .NET
&lt;/h2&gt;

&lt;p&gt;To use Microsoft Graph API, install another NuGet package:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.nuget.org/packages/Microsoft.Graph/"&gt;Microsoft.Graph&lt;/a&gt;: &lt;code&gt;dotnet add package Microsoft.Graph&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And here's the code to get the Graph API. Call the method written above, &lt;code&gt;GetAccessTokenAsync()&lt;/code&gt; (line #4-8).&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Finally, call the &lt;code&gt;GetGraphClientAsync()&lt;/code&gt; method to create the Graph API client (line #1) and get the user details using the email address taken from the &lt;code&gt;ClientPrincipal&lt;/code&gt; instance (line #4). If no user data is queried, you can safely assume that the email address used for the ASWA log-in is not registered as either a Guest User or an External User. Therefore, the code will return the &lt;code&gt;404 Not Found&lt;/code&gt; response (line #7).&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The amount of your information would be huge if you could filter out your details from AAD.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;You don't want to expose all the details to the public. Therefore, you can create another POCO class only for the necessary information.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;And return the POCO instance to the Blazor WASM app side.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now, you've got the API to get the user details. Let's keep moving.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exposing-user-details-on-azure-static-web-apps"&gt;
  &lt;/a&gt;
  Exposing User Details on Azure Static Web Apps
&lt;/h2&gt;

&lt;p&gt;Here's the code that the Blazor WASM app calls the API to get the user details. I use the &lt;code&gt;try { ... } catch { ... }&lt;/code&gt; block here because I want to silently proceed with the response regardless it indicates success or failure. Of course, You should handle it more carefully, but I leave it for now.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In your Blazor component, the method &lt;code&gt;GetLoggedInUserDetailsAsync()&lt;/code&gt; is called like below (line #6, 18).&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;If your email address belongs to the tenant you want to query, you'll see the result screen like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZmMSO4mY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/09/accessing-msgraph-from-blazor-wasm-running-on-aswa-02-en.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZmMSO4mY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/09/accessing-msgraph-from-blazor-wasm-running-on-aswa-02-en.png" alt="After the log-in - user found"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If your email address doesn't belong to the tenant you want to query, you'll see the result screen like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cG-Ve-ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/09/accessing-msgraph-from-blazor-wasm-running-on-aswa-03-en.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cG-Ve-ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/09/accessing-msgraph-from-blazor-wasm-running-on-aswa-03-en.png" alt="After the log-in - user not found"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we can access your user details from the Blazor WASM app running on ASWA through Microsoft Graph API.&lt;/p&gt;




&lt;p&gt;So far, I've walked through the entire process to get the user details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using &lt;a href="https://docs.microsoft.com/aspnet/core/blazor/?WT.mc_id=dotnet-42714-juyoo"&gt;Blazor WASM&lt;/a&gt; app hosted on &lt;a href="https://docs.microsoft.com/azure/static-web-apps/overview?WT.mc_id=dotnet-42714-juyoo"&gt;ASWA&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;Using &lt;a href="https://docs.microsoft.com/azure/active-directory/develop/msal-overview?WT.mc_id=dotnet-42714-juyoo"&gt;MSAL&lt;/a&gt; for authentication and authorisation against &lt;a href="https://docs.microsoft.com/azure/active-directory/fundamentals/active-directory-whatis?WT.mc_id=dotnet-42714-juyoo"&gt;AAD&lt;/a&gt;, and&lt;/li&gt;
&lt;li&gt;Using &lt;a href="https://docs.microsoft.com/graph/overview?WT.mc_id=dotnet-42714-juyoo"&gt;Microsoft Graph&lt;/a&gt; to access to the user details.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you know, Microsoft Graph can access all &lt;a href="https://www.microsoft.com/microsoft-365?WT.mc_id=dotnet-42714-juyoo"&gt;Microsoft 365&lt;/a&gt; resources like &lt;a href="https://www.microsoft.com/microsoft-365/sharepoint/collaboration?WT.mc_id=dotnet-42714-juyoo"&gt;SharePoint Online&lt;/a&gt;, &lt;a href="https://www.microsoft.com/microsoft-teams/group-chat-software?WT.mc_id=dotnet-42714-juyoo"&gt;Teams&lt;/a&gt; and so forth. So if you follow this approach, your chances to use Microsoft 365 resources will get more broadened.&lt;/p&gt;

</description>
      <category>azure</category>
      <category>staticwebapps</category>
      <category>blazorwasm</category>
      <category>msgraph</category>
    </item>
    <item>
      <title>Getting Started with Flask and Docker 🐳🚀</title>
      <author>Zoo Codes</author>
      <pubDate>Thu, 16 Sep 2021 23:05:37 +0000</pubDate>
      <link>https://dev.to/ken_mwaura1/getting-started-with-flask-and-docker-3ie8</link>
      <guid>https://dev.to/ken_mwaura1/getting-started-with-flask-and-docker-3ie8</guid>
      <description>&lt;p&gt;Over the past few weeks, I've worked on a few flask apps across a variety of use cases. The aim was brush up my knowledge of flask as well proper structure for a production application. When I got challenged to use docker and flask app for a starter project and write about it. It was a perfect opportunity to really cement my knowledge as well provide my version of a quickstart guide. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#audience-and-objectives"&gt;
  &lt;/a&gt;
  Audience and Objectives
&lt;/h2&gt;

&lt;p&gt;This article is aimed at beginner developers who are looking for a guide using docker and flask. However, intermediate &lt;br&gt;
developers can also glean some knowledge. I will also endeavour to point out issues I faced while working on this project.&lt;/p&gt;

&lt;p&gt;This article aims at developing a simple flask app and dockerizing the app and pushing the code to GitHub.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites-to-getting-started"&gt;
  &lt;/a&gt;
  Prerequisites to Getting Started
&lt;/h2&gt;

&lt;p&gt;To effectively follow along with this post and subsequent code, you will need the following prerequisites.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python and pip (I am currently using 3.9.7 ) Any version above 3.7 should work.&lt;/li&gt;
&lt;li&gt;Git installed in your system. Check appropriate instructions for your system.&lt;/li&gt;
&lt;li&gt;Docker on your system. &lt;a href="https://docs.docker.com/get-docker/"&gt;Installation instructions&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Terminal. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#initial-setup"&gt;
  &lt;/a&gt;
  Initial Setup
&lt;/h3&gt;

&lt;p&gt;These instructions are verified to work on most Unix systems. &lt;strong&gt;Note:&lt;/strong&gt; Windows implementation may vary. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new directory and change into it.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;flask_starter_app &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;flask_starter_app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Create a new virtual environment for the project. Alternatively activate your preferred virtual environment.&lt;/li&gt;
&lt;li&gt;Proceed to use pip to install our required modules using pip. we'll be using flask, flask-bootstrap and jikanpy&lt;/li&gt;
&lt;li&gt;Save the installed packages in a requirements file.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  python3 &lt;span class="nt"&gt;-m&lt;/span&gt; venv venv
  &lt;span class="nb"&gt;source &lt;/span&gt;venv/bin/activate
  pip &lt;span class="nb"&gt;install &lt;/span&gt;flask flask-bootstrap jikanpy 
  pip freeze &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We are installing main flask module for our project. Flask-Bootstrap will help us integrate bootstrap in our app for styling.&lt;br&gt;
We also install Jikanpy is a python wrapper for &lt;a href="https://jikan.moe/"&gt;Jikan Api&lt;/a&gt;, which is the unofficial &lt;a href="https://myanimelist.net/"&gt;MyAnimeList&lt;/a&gt; Api.&lt;/p&gt;

&lt;p&gt;Hopefully, everything is installed successfully. Alternatively check the code on &lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/KenMwaura1"&gt;
        KenMwaura1
      &lt;/a&gt; / &lt;a href="https://github.com/KenMwaura1/flask_starter_app"&gt;
        flask_starter_app
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      simple flask starter app utilizing docker 
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
flask_starter_app&lt;/h1&gt;
&lt;p&gt;simple flask starter app utilizing docker to showcase seasonal anime using jikanpy (myanimelist unofficial api).&lt;/p&gt;
&lt;h2&gt;
Docker Quickstart&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Using Docker is recommended, as it guarantees the application is run using compatible versions of Python and Node&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Inside the app there a Dockerfile to help you get started.&lt;/p&gt;
&lt;p&gt;To build the development version of the app&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;docker build -t flask-starter-app &lt;span class="pl-c1"&gt;.&lt;/span&gt;   &lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;To run the app&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt; docker run --name=flask-app -p 5001:5000 -t -i flask-starter-app  &lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;If everything went well, the app should be running on &lt;a href="http://localhost:5001" rel="nofollow"&gt;localhost:5001&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/KenMwaura1/flask_starter_app"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h2&gt;
  &lt;a href="#its-all-containers"&gt;
  &lt;/a&gt;
  It's All Containers
&lt;/h2&gt;

&lt;p&gt;Docker refers to open source &lt;a href="https://www.ibm.com/cloud/learn/containerization"&gt;containerization&lt;/a&gt; platform.&lt;br&gt;
Containers are standardized executable components that combine application source code with OS-level dependencies and libraries. We can create containers without docker, however it provides a consistent, simpler and safer way to build containers. One of the major reasons for the meteoric growth of the use of containers from software development to software delivery and even testing, is the ease of use and reproducibility of the entire workflow. &lt;/p&gt;

&lt;p&gt;Previously developers used Virtual Machines in the cloud or self-hosted servers to run their applications and workloads. &lt;br&gt;
However, going from development to production was sometimes plagued with failures due differences in Operating systems or &lt;br&gt;
at times dependencies. Containers allow us to essentially take the code, file structure, dependencies etc. and package them and deploy them to a server and have them run as expected with minimal changes. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#terminology"&gt;
  &lt;/a&gt;
  Terminology
&lt;/h3&gt;

&lt;p&gt;Here we'll run through some tools and terminology in reference to Docker: &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#dockerfile"&gt;
  &lt;/a&gt;
  DockerFile
&lt;/h4&gt;

&lt;p&gt;Docker containers start out as single text file containing all the relevant instructions  on how build an &lt;em&gt;image&lt;/em&gt;.&lt;br&gt;
A &lt;em&gt;Dockerfile&lt;/em&gt; automates the process of creating an image, contains a series of CLI instructions for the Docker engine to assemble the image. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#docker-images"&gt;
  &lt;/a&gt;
  Docker Images
&lt;/h4&gt;

&lt;p&gt;Docker images hold all application source code, libraries and dependencies to run an application. It is very possible to build a docker image from scratch but developers leverage common repositories to pull down pre-built images for common software and tools. &lt;br&gt;
Docker images are made up of layers and each time a container is built from an image. a new layer is added becoming the latest version of the image. You can use a single to run multiple live containers. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#docker-hub"&gt;
  &lt;/a&gt;
  Docker Hub
&lt;/h4&gt;

&lt;p&gt;This is a public repository of Docker images, containing over 100,000 container images. It holds containers of software from commercial vendors, open-source projects and even individual developers.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#docker-daemon"&gt;
  &lt;/a&gt;
  Docker daemon
&lt;/h4&gt;

&lt;p&gt;Refers the service that runs in your system powering the creation of Docker images and containers.The daemon receives commands from client and executes them.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#docker-registry"&gt;
  &lt;/a&gt;
  Docker registry
&lt;/h4&gt;

&lt;p&gt;This is an open-source scalable storage and distribution system for docker images. Using git( a version control system) the registry track image versions in repositories using tags for identification.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-build"&gt;
  &lt;/a&gt;
  Let's Build!
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#flask"&gt;
  &lt;/a&gt;
  Flask
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://flask.palletsprojects.com/en/2.0.x/"&gt;Flask&lt;/a&gt; prides itself in being micro framework therefore it only comes with &lt;br&gt;
simple configuration out of the box. However. it allows for a wide range of custom configuration options. This gives you &lt;br&gt;
the freedom to start simple, add extensions for variety utilities as you grow. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-were-building"&gt;
  &lt;/a&gt;
  What we're Building
&lt;/h3&gt;

&lt;p&gt;Today we'll be building a simple web app to display the current seasonal anime from MyAnimeList. If you follow me on &lt;a href="https://twitter.com/Ken_Mwaura1"&gt;Twitter&lt;/a&gt; you'll know am a massive manga and anime fan. MyAnimeList is defacto platform for information, reviews and rankings thus it was the optimal choice. However, it doesn't have an API or sdk to access their content. Normally we would have to scrape the site, luckily the awesome community created [Jikan (&lt;a href="https://jikan.moe/"&gt;https://jikan.moe/&lt;/a&gt;) Api  as well &lt;a href="https://github.com/abhinavk99/jikanpy"&gt;jikanpy&lt;/a&gt; which is python wrapper for the API. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#wheres-the-code"&gt;
  &lt;/a&gt;
  Where's the code?
&lt;/h3&gt;

&lt;p&gt;Now hopefully you carried out the steps above in Prerequisites section. Ensure your virtual environment is activated. Inside our &lt;code&gt;flask-starter-app&lt;/code&gt; directory create &lt;code&gt;run.py&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# run.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This file will serve our app. First we import our app instance from app directory, which doesn't exist yet. Let's create it.&lt;br&gt;
Create the app directory, inside it create:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;templates folder&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;__init__.py&lt;/code&gt; file &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;models.py&lt;/code&gt; file &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;views.py&lt;/code&gt; file &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;anime_requests.py&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your folder structure should now look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python-projects &lt;span class="nv"&gt;$ &lt;/span&gt;tree flask_starter_app
flask_starter_app
├── app
│   ├── __init__.py
│   ├── anime_request.py
│   ├── models.py
│   ├── views.py
│   └── templates
│       └── index.html
└── requirements.txt
└── run.py
└── venv


2 directories, 7 files
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the &lt;code&gt;__init__.py&lt;/code&gt; file add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/__init__.py
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_bootstrap&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bootstrap&lt;/span&gt;

&lt;span class="n"&gt;bootstrap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Bootstrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first two lines import the Flask and Bootstrap classes from their respective modules. We then instantiate the Bootstrap class and assign it bootstrap variable.The app variable contains an instance of the Flask object and pass along the &lt;strong&gt;name&lt;/strong&gt; as the first parameter to refer to our app. We then initialize bootstrap by calling the &lt;code&gt;init_app()&lt;/code&gt; method as passing pur app as an argument.&lt;br&gt;
Finally, we import views file from our current directory. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#class-is-in-session"&gt;
  &lt;/a&gt;
  Class is in Session
&lt;/h4&gt;

&lt;p&gt;Inside the &lt;code&gt;models.py&lt;/code&gt; file ad the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/models.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dataclasses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dataclass&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Anime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
    class to model anime data
    """&lt;/span&gt;
    &lt;span class="n"&gt;mal_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;image_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;synopsis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;airing_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;episodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This file will hold all of our models, here we create an Anime class to hold data from the Api. We import dataclass decorator from the &lt;a href="https://docs.python.org/3.9/library/dataclasses.html"&gt;dataclasses&lt;/a&gt; module. This will give us access to a variety of special methods, allowing us to keep our code simple and succinct. We attach the decorator to our class and then proceed to define the structure of the data from the Api. Check the &lt;a href="https://jikan.docs.apiary.io/#"&gt;docs&lt;/a&gt; to understand more. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#requests-requests-"&gt;
  &lt;/a&gt;
  Requests, Requests ...
&lt;/h4&gt;

&lt;p&gt;Add the following to the &lt;code&gt;anime_request.py&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/anime_request.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jikanpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Jikan&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Anime&lt;/span&gt;

&lt;span class="n"&gt;jikan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Jikan&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# function to get seasonal anime
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_season_anime&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="s"&gt;"""
    function to get the top anime from My anime list
    :return: list of anime
    """&lt;/span&gt;
    &lt;span class="n"&gt;season_anime_request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jikan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;season&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;season_anime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;season_anime_request&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'anime'&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;season_anime_request&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'anime'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;anime&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;mal_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;anime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'mal_id'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;anime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'url'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;anime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;image_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;anime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'image_url'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;synopsis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;anime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'synopsis'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;anime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'type'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;airing_start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;anime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'airing_start'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;episodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;anime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'episodes'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;members&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;anime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'members'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;new_anime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Anime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mal_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;synopsis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;airing_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;episodes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;season_anime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_anime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;season_anime&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above we import Jikan class from the jikanpy module, this will give us access to variety of methods to make requests to the Jikan Api. We also import our Anime class from the &lt;code&gt;models&lt;/code&gt; file. we create a variable jikan and assign it an instance of the Jikan class. &lt;br&gt;
We now define &lt;code&gt;get_season_anime&lt;/code&gt; function to make requests to the Jikan Api and append it to a list. We create a variable &lt;code&gt;season_anime_request&lt;/code&gt; that calls &lt;code&gt;season&lt;/code&gt; method from Jikan class. It accepts the two parameters: year and season, this is handy when you want retrieve specific data from year and even season. In our case we don't specify in order to get the current season anime. We then define an empty list to hold our data. &lt;/p&gt;

&lt;p&gt;The season method returns a dictionary of various key value pairs. The data we need is values of the &lt;code&gt;anime&lt;/code&gt; key. which is a list of dictionaries. We add an if statement to check if key we want exists, then loop through the values. We create appropriate variables to reference the data in the response.&lt;br&gt;
We create a &lt;code&gt;new_anime&lt;/code&gt; variable that is an instance of Anime class. We append our class to our empty list, finally we return the list of classes. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#views-for-days"&gt;
  &lt;/a&gt;
  Views For Days
&lt;/h4&gt;

&lt;p&gt;Add the following code your &lt;code&gt;views.py&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.anime_request&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_season_anime&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'POST'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="s"&gt;"""
    root page view that returns the index page and its data
    :return: index template
    """&lt;/span&gt;
    &lt;span class="n"&gt;season_anime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_season_anime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'index.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;season_anime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;season_anime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This file is holds routes for our flask application. Currently, we'll only have one, feel free to add more. We begin by importing &lt;code&gt;render_template&lt;/code&gt; this will pass render our html pages in the browser and pass along any required parameters. We also import &lt;code&gt;get_season_anime&lt;/code&gt; function from anime_request file. We also import our app from &lt;code&gt;__init__.py&lt;/code&gt; file, this allows use the &lt;code&gt;@app&lt;/code&gt; decorator that exposes the route method. This registers routes passed as arguments as well the methods allowed for the route. &lt;/p&gt;

&lt;p&gt;We define the &lt;code&gt;index&lt;/code&gt; function that will be called once the user opens root route. Inside the function, we define season_anime variable that holds list of instance of the Anime classes. We finally call &lt;code&gt;render_template&lt;/code&gt; function and pass along our index.html file inside the templates folder, along with season_anime variable to our template. &lt;/p&gt;

&lt;p&gt;Add the following to your index.html file inside the templates folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--app/templates/index.html --&amp;gt;&lt;/span&gt;
{% extends 'bootstrap/base.html' %}

{% block navbar %}
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar navbar-inverse"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"navigation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container-fluid"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar-header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar-toggle"&lt;/span&gt; &lt;span class="na"&gt;data-toggle=&lt;/span&gt;&lt;span class="s"&gt;"collapse"&lt;/span&gt; &lt;span class="na"&gt;data-target=&lt;/span&gt;&lt;span class="s"&gt;".navbar-collapse"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sr-only"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Toggle navigation&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon-bar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon-bar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon-bar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar-brand"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; Anime Watchlist &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar-collapse collapse"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav navbar-nav"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
{% endblock %}

{% block content %}
    {% for anime in season_anime %}
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-group col-xs-12 col-sm-4 col-md-2 col-lg-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"{{ anime.image_url }}"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"{{ anime.title }} poster"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"img-responsive"&lt;/span&gt;
                     &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"max-height: 30rem"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-left "&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/anime/{{anime.mal_id}}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                        {{ anime.title|truncate(30)}}&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; Episodes : {{ anime.episodes }}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; date started airing: {{ anime.airing_start | truncate(13) }}&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    {% endfor %}
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Flask uses the &lt;a href="https://flask.palletsprojects.com/en/2.0.x/templating/"&gt;jinja&lt;/a&gt; templating engine. This allows us to use a slew of advanced features. In our case we extend the base html file containing all bootstrap styling, this keeps allows to have a basic structure that applies all of our pages. We also use special &lt;code&gt;{% %}&lt;/code&gt; to define a special navbar block. &lt;br&gt;
Normally this is  set in its own file and imported but here we'll just have it here. We define a content block inside we loop through season_anime argument passed in our views file. For each value we render a card with title, image, number of episodes and the date it started airing.&lt;/p&gt;

&lt;p&gt;Open a terminal and run &lt;code&gt;python run.py&lt;/code&gt; Your app should look similar below: &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#dockerize-everything"&gt;
  &lt;/a&gt;
  Dockerize Everything
&lt;/h2&gt;

&lt;p&gt;Now we have a fully functional flask app, lets dockerize it. Inside the root of our app(flask_starter_app), create a &lt;code&gt;Dockerfile&lt;/code&gt;. &lt;br&gt;
Add the following configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;#Dockerfile &lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.9.7&lt;/span&gt;

&lt;span class="k"&gt;MAINTAINER&lt;/span&gt;&lt;span class="s"&gt; Ken Mwaura "kemwaura@gmail.com"&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./requirements.txt /app/requirements.txt&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . /app&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; app&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; FLASK_APP=run.py&lt;/span&gt;

&lt;span class="k"&gt;ENV&lt;/span&gt;&lt;span class="s"&gt; FLASK_ENV=development&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt

&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 5001:5000&lt;/span&gt;

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["flask", "run", "--host", "0.0.0.0"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line sets the base image to build from, in our case we're using the python 3.9.7 image to mirror the development &lt;br&gt;
environment. Let’s go over some of these Docker instructions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;MAINTAINER sets the Author field of the image (useful when pushing to Docker Hub)&lt;/li&gt;
&lt;li&gt;COPY copies files from the first parameter (the source .) to the destination parameter (in this case, /app)&lt;/li&gt;
&lt;li&gt;WORKDIR sets the working directory (all following instructions operate within this directory); you may use WORKDIR as often as you like&lt;/li&gt;
&lt;li&gt;ENV sets environment variable &lt;code&gt;FLASK_APP&lt;/code&gt; to the run.py file. This flask cli the file to run. &lt;/li&gt;
&lt;li&gt;ENV sets environment variable &lt;code&gt;FLASK_ENV&lt;/code&gt; to development. This tells flask to run the app in a development mode.&lt;/li&gt;
&lt;li&gt;RUN uses pip to install the required dependencies from the requirements file. &lt;/li&gt;
&lt;li&gt;EXPOSE tells docker to map port 5001 to port 5000 where our app is running. &lt;/li&gt;
&lt;li&gt;CMD tells docker what should be executed to run our app. In our case it's flask run command and the specified host. &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#build-the-image"&gt;
  &lt;/a&gt;
  Build the Image
&lt;/h3&gt;

&lt;p&gt;Now that we gave a Dockerfile, let's check it builds correctly&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker build &lt;span class="nt"&gt;-t&lt;/span&gt; flask-starter-app &lt;span class="nb"&gt;.&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#run-the-container"&gt;
  &lt;/a&gt;
  Run the Container
&lt;/h3&gt;

&lt;p&gt;After the build completes, run the container&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; docker run &lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;flask-app &lt;span class="nt"&gt;-p&lt;/span&gt; 5001:5000 &lt;span class="nt"&gt;-t&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; flask-starter-app  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go to &lt;a href="http://localhost:5001"&gt;localhost:5001&lt;/a&gt; and you should see your app running as below: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FUn7226J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7roted279imwa2nw6mt6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FUn7226J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7roted279imwa2nw6mt6.png" alt="Screenshot of docker"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-information"&gt;
  &lt;/a&gt;
  Further information
&lt;/h2&gt;

&lt;p&gt;Ensure you are using the right ports. Flask by default runs on port 5000 (not 8000 like Django or 80 like Apache). &lt;br&gt;
Check out &lt;a href="https://runnable.com/docker/binding-docker-ports"&gt;Binding Docker Ports&lt;/a&gt; for more information.&lt;/p&gt;

&lt;p&gt;I hope you liked this write-up and get inspired to extend it further. Keep coding! Feel free to leave comments below or &lt;br&gt;
reach out on Twitter: &lt;a href="https://twitter.com/Ken_Mwaura1"&gt;Ken_Mwaura1&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>python</category>
      <category>docker</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Git pre-hook: pre-commit with Gradle task</title>
      <author>Animesh Kumar</author>
      <pubDate>Thu, 16 Sep 2021 23:00:32 +0000</pubDate>
      <link>https://dev.to/an1meshk/git-pre-hook-pre-commit-with-gradle-task-134m</link>
      <guid>https://dev.to/an1meshk/git-pre-hook-pre-commit-with-gradle-task-134m</guid>
      <description>&lt;p&gt;There are various Git pre-hooks that are quite helpful for several essential tasks we want to execute before commit or push or rebase etc. Basically, there are various use cases, like running a linting before you commit or running unit tests before push or commit.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Whenever a Git repository is initialized, Git creates sample hooks inside &lt;code&gt;.git/hooks&lt;/code&gt; directory in the project directory. E.g. &lt;code&gt;.git/hooks/pre-commit.sample&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#below-are-steps-on-how-to-configure-prehook-for-a-gradle-project"&gt;
  &lt;/a&gt;
  Below are steps on how to configure pre-hook for a Gradle project:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-create-a-prehook-script-lets-create-raw-precommit-endraw-file-inside-a-new-raw-scripts-endraw-directory-and-we-want-to-run-unit-tests-before-code-commit"&gt;
  &lt;/a&gt;
  1. Create a pre-hook script, let's create &lt;code&gt;pre-commit&lt;/code&gt; file inside a new &lt;code&gt;scripts&lt;/code&gt; directory, and we want to run unit tests before code commit.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"*****Running unit tests******"&lt;/span&gt;

git stash &lt;span class="nt"&gt;-q&lt;/span&gt; &lt;span class="nt"&gt;--keep-index&lt;/span&gt;

./gradlew &lt;span class="nb"&gt;test

&lt;/span&gt;&lt;span class="nv"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;

git unstash pop &lt;span class="nt"&gt;-q&lt;/span&gt;

&lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="nv"&gt;$status&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above command stash the working directory changes before running the unit tests, and unstash back. This makes sure, we're running unit tests only in the clean working directory. (as this is been configured for pre-commit, changes must have been staged, make sense?😀)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-next-create-gradle-task-to-install-the-precommit-script-why-do-we-need-it-because-we-want-this-to-run-on-all-developers-machine-not-just-on-our-machine-we-all-love-consistency-and-wants-to-put-the-constraints"&gt;
  &lt;/a&gt;
  2. Next, create Gradle task to install the pre-commit script. Why do we need it? because, we want this to run on all developers' machine, not just on our machine, we all love consistency and wants to put the constraints.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight gradle"&gt;&lt;code&gt;
&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="nf"&gt;installLocalGitHook&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;type:&lt;/span&gt; &lt;span class="n"&gt;Copy&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
&lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rootProject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;rootDir&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'scripts/pre-commit'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;into&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rootProject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;rootDir&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'.git/hooks'&lt;/span&gt;&lt;span class="o"&gt;)}&lt;/span&gt;
&lt;span class="n"&gt;fileMode&lt;/span&gt; &lt;span class="mi"&gt;0775&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;dependsOn&lt;/span&gt; &lt;span class="n"&gt;installLocalGitHook&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Here pre-commit file was created inside project root directory &lt;code&gt;scripts&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Above Gradle task will run wherever someone takes the build and assuming that developer who is making changes will run build task at least once and I hope I'm right😉.&lt;/p&gt;

&lt;p&gt;Once pre-commit script is copied to &lt;code&gt;.git/hooks/&lt;/code&gt; directory, we're all set. &lt;/p&gt;

&lt;p&gt;Next time, whenever someone will run &lt;code&gt;git commit&lt;/code&gt;, it will first run the &lt;code&gt;./gradlew test&lt;/code&gt; task.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"update code"&lt;/span&gt;

&lt;span class="nt"&gt;--&lt;/span&gt; Output
&lt;span class="k"&gt;*****&lt;/span&gt;Running unit tests&lt;span class="k"&gt;******&lt;/span&gt;
&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The way &lt;code&gt;./gradlew test&lt;/code&gt; is configured, in the same way, any other task can be executed. And of course for other tasks stash and unstash won't compulsory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;If you have reached here, then I did a satisfactory effort to keep you reading. Please be kind to leave any comments or ask for any corrections. &lt;strong&gt;Happy Coding!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>2 use cases of the useReducer ReactJS hook</title>
      <author>Damian Demasi</author>
      <pubDate>Thu, 16 Sep 2021 22:48:16 +0000</pubDate>
      <link>https://dev.to/colocodes/2-use-cases-of-the-usereducer-reactjs-hook-ine</link>
      <guid>https://dev.to/colocodes/2-use-cases-of-the-usereducer-reactjs-hook-ine</guid>
      <description>&lt;p&gt;&lt;code&gt;useReducer&lt;/code&gt; is a Hook that allows us to manage multiple states more efficiently, create complex state logic, and manage states that depend on previous states. The following two use cases are good examples of how we can make use of this hook.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-usereducer-endraw-use-cases"&gt;
  &lt;/a&gt;
  &lt;code&gt;useReducer&lt;/code&gt; use cases
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Manage multiple states: modify an array&lt;/li&gt;
&lt;li&gt;Modify complex states, such as arrays or objects: login form&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#manage-multiple-states"&gt;
  &lt;/a&gt;
  Manage multiple states
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;useReducer&lt;/code&gt; can be used to simplify the way in which multiple states impact a piece of data. In this case, adding, removing, and clearing an array can be achieved by using &lt;code&gt;useReducer&lt;/code&gt; instead of three separate states.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ADD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;REMOVE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CLEAR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
        &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UseCaseMultipleStates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatcher&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;initial value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Three different state triggers&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;dispatcher&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ADD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;removeHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;dispatcher&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;REMOVE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clearHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;dispatcher&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CLEAR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;hr&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;useReducer use case&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Manage multiple states: modify an array&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;addHandler&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;[+] Add random value to array&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0 2rem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;removeHandler&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;[-] Remove last value from array&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;clearHandler&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;[x] Clear array&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Shopping cart array:&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(empty)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; - &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;UseCaseMultipleStates&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#modify-complex-states-such-as-arrays-or-objects-login-form"&gt;
  &lt;/a&gt;
  Modify complex states, such as arrays or objects: login form
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;useReducer&lt;/code&gt; can be especially handy when dealing with multiple states and a complex state logic. &lt;/p&gt;

&lt;p&gt;By handling a login form with this hook instead of multiple &lt;code&gt;useState&lt;/code&gt; hooks we can appreciate how powerful this hook is.&lt;/p&gt;

&lt;p&gt;Helper function for simulating a login API (thanks to &lt;a href="https://www.youtube.com/watch?v=o-nCM1857AQ&amp;amp;t=102s&amp;amp;ab_channel=HarryWolff"&gt;Harry Wolff&lt;/a&gt; for &lt;a href="https://github.com/hswolff/youtube/blob/master/videos/why-i-love-usereducer/src/utils.js"&gt;this code&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loginHelper&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Main component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;loginHelper&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./loginHelper&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;USERNAME&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PASSWORD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;LOGGED_IN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;LOGGED_OUT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IS_LOADING&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IS_NOT_LOADING&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ERROR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UseCaseComplexStates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatcher&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;usernameHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;dispatcher&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;USERNAME&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;passwordHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;dispatcher&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PASSWORD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logoutHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;dispatcher&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;LOGGED_OUT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;submitHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;// Check credentials (simulated)&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;dispatcher&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IS_LOADING&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;loginHelper&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="nx"&gt;dispatcher&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IS_NOT_LOADING&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="nx"&gt;dispatcher&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;LOGGED_IN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;dispatcher&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ERROR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🚨 Incorrect username or password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;hr&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;useReducer use case&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Modify complex states, such as arrays or objects: login form&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;maxWidth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;50%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#a8dadc&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;borderRadius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1rem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2rem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isLoggedIn&lt;/span&gt;
                    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Welcome!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logoutHandler&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Log out!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;submitHandler&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1rem 0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Username&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;usernameHandler&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0 1rem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'user'&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1rem 0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Password&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;passwordHandler&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0 1rem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'password'&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1rem 0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Logging you in...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Log in&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

                    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;UseCaseComplexStates&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can watch all these examples live &lt;a href="https://6142b64c2e448f0007271a3f--romantic-booth-593b0c.netlify.app/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also take a look at the code in &lt;a href="https://github.com/Colo-Codes/react-hooks-use-cases/tree/main/src/components/UseCaseUseReducer"&gt;this repository&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 use cases of the useState ReactJS hook</title>
      <author>Damian Demasi</author>
      <pubDate>Thu, 16 Sep 2021 22:30:59 +0000</pubDate>
      <link>https://dev.to/colocodes/5-use-cases-of-the-usestate-reactjs-hook-4n00</link>
      <guid>https://dev.to/colocodes/5-use-cases-of-the-usestate-reactjs-hook-4n00</guid>
      <description>&lt;p&gt;&lt;code&gt;useState&lt;/code&gt; is a Hook that needs to be called inside a function component to add some local state to it. React will preserve this state between component re-renders.&lt;/p&gt;

&lt;p&gt;There are many use cases for the &lt;code&gt;useState&lt;/code&gt; hook, but in this article, I will focus on the following five:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-usestate-endraw-use-cases"&gt;
  &lt;/a&gt;
  &lt;code&gt;useState&lt;/code&gt; use cases
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;State management&lt;/li&gt;
&lt;li&gt;Conditional rendering&lt;/li&gt;
&lt;li&gt;Toggle flags (true/false)&lt;/li&gt;
&lt;li&gt;Counter&lt;/li&gt;
&lt;li&gt;Get API data and store it in state&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#state-management"&gt;
  &lt;/a&gt;
  State management
&lt;/h3&gt;

&lt;p&gt;Let's start with a &lt;strong&gt;warning:&lt;/strong&gt; don't write code in this way, because it will create an infinite loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UseCaseStateManagement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;initial value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;useState use case&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;State management&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;hr&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;UseCaseStateManagement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The loop is created because the initial render calls the state update function &lt;code&gt;setState&lt;/code&gt;, which in time triggers a re-render and a new function evaluation.&lt;/p&gt;

&lt;p&gt;If we want to change a state due to an action performed by the user, we can do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UseCaseStateManagement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;initial value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;🔄 This is a re-render&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clickHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;useState use case&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;State management&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;hr&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;clickHandler&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Set state&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;UseCaseStateManagement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That state will be preserved across component re-renders and we will be able to make use of it in the newest re-render.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conditional-rendering"&gt;
  &lt;/a&gt;
  Conditional rendering
&lt;/h3&gt;

&lt;p&gt;We can use a state to conditionally render a component or part of it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UseCaseConditionalRender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCondition&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clickHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setCondition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;hr&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;useState use case&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Conditional Rendering&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;clickHandler&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Set condition&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;UseCaseConditionalRender&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#toggle-flags"&gt;
  &lt;/a&gt;
  Toggle flags
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;useState&lt;/code&gt; can be used to toggle between two values, usually &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;, in order to toggle a flag, such as the display mode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;classes&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./UseCaseToggle.module.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UseCaseToggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setMode&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Use setState function form because the new state depends on the previous one&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clickHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggledClass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;light&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggledClass&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;hr&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;useState use case&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Toggle flags&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;clickHandler&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Toggle display mode&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;UseCaseToggle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result will be an alternation between dark and light mode on the component.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#counter"&gt;
  &lt;/a&gt;
  Counter
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;useState&lt;/code&gt; can be used to keep track of a variable through multiple re-renders, such as in a counter application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UseCaseCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Use setState function form because the new state depends on the previous one&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clickHandlerDecrease&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Converting the prevState to number to avoid errors&lt;/span&gt;
        &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clickHandlerIncrease&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;hr&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;useState use case&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Counter&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;clickHandlerDecrease&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;--&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;clickHandlerIncrease&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;++&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;UseCaseCounter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#get-api-data-and-store-it-in-state"&gt;
  &lt;/a&gt;
  Get API data and store it in state
&lt;/h3&gt;

&lt;p&gt;A more complex use of this hook is presented when we need to interact with an API. In this case, we can use a state to store the response of a &lt;code&gt;fetch()&lt;/code&gt; to the API, and the state of a spinner that will indicate if the data is being fetched.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UseCaseApi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;starship&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setStarship&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clickHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://swapi.dev/api/starships/10&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;setStarship&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

        &lt;span class="nx"&gt;setIsLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Getting data... 🚀&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;hr&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;useState use case&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Get API data and store it in state&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;clickHandler&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Get Millennium Falcon data&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;starship&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;UseCaseApi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can watch all these examples live &lt;a href="https://6142b64c2e448f0007271a3f--romantic-booth-593b0c.netlify.app/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also take a look at the code in &lt;a href="https://github.com/Colo-Codes/react-hooks-use-cases/tree/main/src/components/UseCaseUseState"&gt;this repository&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>hooks</category>
    </item>
    <item>
      <title>My second vanilla JavaScript Project: using APIs, promises, classes, error handling, and more!</title>
      <author>Damian Demasi</author>
      <pubDate>Thu, 16 Sep 2021 22:25:12 +0000</pubDate>
      <link>https://dev.to/colocodes/my-second-vanilla-javascript-project-using-apis-promises-classes-error-handling-and-more-24p8</link>
      <guid>https://dev.to/colocodes/my-second-vanilla-javascript-project-using-apis-promises-classes-error-handling-and-more-24p8</guid>
      <description>&lt;h1&gt;
  &lt;a href="#why-did-i-choose-to-build-this-project"&gt;
  &lt;/a&gt;
  Why did I choose to build this project? 🤔
&lt;/h1&gt;

&lt;p&gt;This project was one of my favourite tools for breaking my way out of tutorial hell 👹. I also wanted this project to serve me as a display of my JavaScript skills to potential employers or collaborators.&lt;/p&gt;

&lt;p&gt;👉  &lt;strong&gt;You can take a look at the finished live project  &lt;a href="https://colo-codes.github.io/mini-projects/covid-19-dashboard-app/"&gt;here&lt;/a&gt;.&lt;/strong&gt; 👈&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-did-i-want-to-implement-in-the-project"&gt;
  &lt;/a&gt;
  What did I want to implement in the project?
&lt;/h1&gt;

&lt;p&gt;By the time I decided to start working on this project I had just finished learning about &lt;strong&gt;Promises&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;async...await&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;APIs&lt;/strong&gt; and &lt;strong&gt;error handling&lt;/strong&gt;. I wanted to code a project to implement all of this knowledge, also include that project in my portfolio, and keep sharpening my design and coding skills 🤓. I usually try to maximise the return on time invested, so I tend to do projects that can serve multiple purposes.&lt;/p&gt;

&lt;p&gt;Finally, I also wanted to continue experimenting with the whole process of building a website from scratch. As I did with my  &lt;a href="https://blog.damiandemasi.com/my-first-vanilla-javascript-project-making-a-simple-to-do-app"&gt;previous project&lt;/a&gt;, I wanted to gain experience dealing with &lt;strong&gt;user stories&lt;/strong&gt;, the definition of &lt;strong&gt;features&lt;/strong&gt;, and the &lt;strong&gt;design&lt;/strong&gt; stage, and also with the &lt;strong&gt;testing&lt;/strong&gt; and &lt;strong&gt;deployment&lt;/strong&gt; stages. Once more, I also wanted to get a feel of how much work (and time) was involved in the operation.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#time-harvesting"&gt;
  &lt;/a&gt;
  Time harvesting
&lt;/h1&gt;

&lt;p&gt;As with all the other projects and learning activities I'm involved in lately, I decided to use &lt;a href="https://clockify.me/tracker"&gt;Clockify&lt;/a&gt; (not sponsored by them, yet 😉). I used this app to calculate how much time the different parts of the project will take, and thus have a good estimate in the future to calculate how much time and effort a new project will take me.&lt;/p&gt;

&lt;p&gt;The overall process of working on this project, from start to finish, took around &lt;strong&gt;45.5 hours&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UrFnS0id--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629439091414/LbAujCAeO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UrFnS0id--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629439091414/LbAujCAeO.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A bit more than 2.5 hours were allocated to API research, 4.5 hours to design, around 14.5 hours to HTML and CSS (mostly CSS… it was a bumpy ride 😅), and the rest to JavaScript.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#choosing-the-apis"&gt;
  &lt;/a&gt;
  Choosing the APIs
&lt;/h1&gt;

&lt;p&gt;At first, I didn't know what the project’s theme will be, so I started by researching free APIs to get some insights on what could be done. I great resource that I found is &lt;a href="https://github.com/public-apis/public-apis"&gt;this list of public APIs&lt;/a&gt; on GitHub, where APIs ranging from animals and anime to videos and weather, are being displayed.&lt;/p&gt;

&lt;p&gt;I found a couple of them that caught my interest, and I decided to use &lt;a href="https://blog.mmediagroup.fr/post/m-media-launches-covid-19-api/"&gt;one that provides COVID-19 up-to-date data&lt;/a&gt;. I imagined that it would be interesting to be able to compare how different countries are experiencing the COVID-19 pandemic and get some insights about their vaccination campaigns (more on this in "User stories"). Plus, we had just entered a new lockdown in my state 😷, so the theme felt right.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#workflow"&gt;
  &lt;/a&gt;
  Workflow
&lt;/h1&gt;

&lt;p&gt;I followed the same workflow as with my &lt;a href="https://blog.damiandemasi.com/my-first-vanilla-javascript-project-making-a-simple-to-do-app"&gt;previous project&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Initial planning&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define user stories&lt;/li&gt;
&lt;li&gt;Define features based on user stories&lt;/li&gt;
&lt;li&gt;Create a flow chart linking the features&lt;/li&gt;
&lt;li&gt;Define the architecture the program will have&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Design&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Search for inspiration&lt;/li&gt;
&lt;li&gt;Define colour scheme and typography&lt;/li&gt;
&lt;li&gt;Make a graphic design of the site&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Code&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build HTML structure&lt;/li&gt;
&lt;li&gt;Build the needed CSS to implement the graphic design into actual code&lt;/li&gt;
&lt;li&gt;Build JavaScript code to implement the features defined during the initial planning&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Review and deploy&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Test for browser compatibility&lt;/li&gt;
&lt;li&gt;Test for responsiveness&lt;/li&gt;
&lt;li&gt;Validate HTML and CSS code&lt;/li&gt;
&lt;li&gt;Deploy the project&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#initial-planning"&gt;
  &lt;/a&gt;
  Initial planning
&lt;/h1&gt;

&lt;p&gt;The initial planning for this project was a bit more complex than the one of my previous one, especially because it had many moving parts such as APIs, the creation and deletion of elements, and calculations that needed to be updated “on the fly” 🪰.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#user-stories"&gt;
  &lt;/a&gt;
  User stories
&lt;/h2&gt;

&lt;p&gt;I started by putting myself in the shoes of the users and, thus, I could write the following  &lt;a href="https://en.wikipedia.org/wiki/User_story"&gt;user stories&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As a user, I want to be able to get the following COVID-19 information about my country:

&lt;ul&gt;
&lt;li&gt;Confirmed cases&lt;/li&gt;
&lt;li&gt;Recovered cases&lt;/li&gt;
&lt;li&gt;Deaths&lt;/li&gt;
&lt;li&gt;Administered vaccines&lt;/li&gt;
&lt;li&gt;Partially vaccinated population&lt;/li&gt;
&lt;li&gt;Fully vaccinated population&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;As a user, I want to be able to add other countries so I can compare COVID-19 data between them.&lt;/li&gt;
&lt;li&gt;As a user, I want to be able to delete countries so I can add new ones.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#defining-features"&gt;
  &lt;/a&gt;
  Defining features
&lt;/h2&gt;

&lt;p&gt;Based on the previously defined user stories, I proceeded to determine the features that the COVID-19 Dashboard app will implement. I also include some &lt;em&gt;nice to have&lt;/em&gt; features to improve the user experience.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Get the user’s locale information and render the COVID-19 information for the user’s country.&lt;/li&gt;
&lt;li&gt;Provide a search box with a predefined list of countries to search COVID-19 data from.&lt;/li&gt;
&lt;li&gt;Compare up to 4 countries.&lt;/li&gt;
&lt;li&gt;Provide the user with the possibility to delete compared countries individually or in bulk.&lt;/li&gt;
&lt;li&gt;Provide the user with the possibility to change the comparison reference country.&lt;/li&gt;
&lt;li&gt;Provide a nice-looking background but also allow the user to deactivate it so it doesn’t interfere with all the information that would be displayed.&lt;/li&gt;
&lt;li&gt;Make the app responsive.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#going-visual-making-a-flowchart"&gt;
  &lt;/a&gt;
  Going visual: making a flowchart
&lt;/h2&gt;

&lt;p&gt;Due to the relative complexity of the app, I definitely wanted to make a flow chart of it to have a clear idea of how the user will be interacting with the page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1c4vXfq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629443023317/1fqDSCms1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1c4vXfq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629443023317/1fqDSCms1.png" alt="COVID-19 Dashboard flow chart.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defining-tasks-on-kanban-board"&gt;
  &lt;/a&gt;
  Defining tasks on Kanban board
&lt;/h2&gt;

&lt;p&gt;As with my &lt;a href="https://blog.damiandemasi.com/my-first-vanilla-javascript-project-making-a-simple-to-do-app"&gt;previous project&lt;/a&gt;, I decided to use the Kanban framework to address the defined features and start working on them. In this case, I used &lt;a href="https://www.notion.so/"&gt;Notion&lt;/a&gt; instead of &lt;a href="https://app.clickup.com/"&gt;ClickUp&lt;/a&gt;, to test how comfortable I felt working in this way with Notion, and I must say I prefer using ClickUp due to its better features for this type of work 🤔. Again, I could have used &lt;a href="https://app.asana.com/"&gt;Asana&lt;/a&gt;, &lt;a href="https://trello.com/en"&gt;Trello&lt;/a&gt;, or &lt;a href="https://docs.github.com/en/issues/organizing-your-work-with-project-boards/managing-project-boards/about-project-boards"&gt;GitHub Projects&lt;/a&gt;. I think the tool is not that important as long as there is a Kanban board somewhere (or any other similar framework, for that matter).&lt;/p&gt;

&lt;p&gt;In the board, I included the previously defined features, the items created on the flowchart, and the main project workflow elements.&lt;/p&gt;

&lt;p&gt;I began by inputting all the tasks and assigning them to the "Not started" column. During the project, the Kanban board was useful to keep track of what needed to get done. This is a snapshot of how it looked during the project:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EQRTIKiY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629443108790/3WLK6ekFK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EQRTIKiY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629443108790/3WLK6ekFK.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#design"&gt;
  &lt;/a&gt;
  Design
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#searching-for-inspiration"&gt;
  &lt;/a&gt;
  Searching for inspiration
&lt;/h3&gt;

&lt;p&gt;In this project, I knew I wanted to display the information on cards, so I browsed the Internet to see how professional designers had implemented cards in their work. After looking for quite a few designs, I decided to build a card containing the country flag at the top, the COVID-19 infection related information below the flag, and the vaccination information at the bottom part of the card.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bXdyKSlM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629449079777/kGwjwPzGK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bXdyKSlM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629449079777/kGwjwPzGK.png" alt="Screenshot 2021-08-20 at 16.51.20.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#defining-the-colour-scheme-and-fonts"&gt;
  &lt;/a&gt;
  Defining the colour scheme and fonts
&lt;/h3&gt;

&lt;p&gt;When defining colours, I tried to avoid the ones that were too strong or bright, because the user will have to read numbers clearly and easily. After trying many different combinations on the great site  &lt;a href="https://coolors.co/"&gt;Coolors&lt;/a&gt;, this was the winner 🥇:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fim7oGbY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629443225540/Z__7VXVGH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fim7oGbY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629443225540/Z__7VXVGH.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#designing-for-desktop-and-mobile"&gt;
  &lt;/a&gt;
  Designing for desktop and mobile
&lt;/h3&gt;

&lt;p&gt;The next step in the workflow was building the design, and I, once again, used &lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt;. I experimented 🧪 for quite some time testing different card shapes and sizes until I found one that I thought worked well. I also included the colours from the colour palette and the desktop and mobile versions of the design.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r4AA-rCJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629443785372/4BrByV3tu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r4AA-rCJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629443785372/4BrByV3tu.png" alt="Screenshot 2021-08-20 at 16.45.58.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can take a closer look to this design &lt;a href="https://www.figma.com/file/8AD4uOPsp0Ki1bIIY7OHaQ/COVID-19-Dashboard?node-id=0%3A1"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#coding-the-foundations-html-css-and-javascript"&gt;
  &lt;/a&gt;
  Coding the foundations: HTML, CSS and JavaScript
&lt;/h1&gt;

&lt;p&gt;Building the HTML code for this project wasn’t too difficult. The &lt;code&gt;index.html&lt;/code&gt; document is like a container on which the cards will be rendered using JavaScript code.&lt;/p&gt;

&lt;p&gt;You can take a closer look at the source code of this project &lt;a href="https://github.com/Colo-Codes/mini-projects/tree/main/covid-19-dashboard-app"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#going-crazy-again-with-css"&gt;
  &lt;/a&gt;
  Going crazy (again) with CSS
&lt;/h2&gt;

&lt;p&gt;Even though the design seems simple, it required considerable effort from me to transform the graphic design into closely enough CSS style 😥.&lt;/p&gt;

&lt;p&gt;I experimented with the &lt;code&gt;backdrop-filter&lt;/code&gt; CSS property and had to create an alternative for browsers other than Chrome due to support issues. Unfortunately, I discovered that even Chrome presents some strange flickering (or artifacts) when applying &lt;code&gt;backdrop-filter&lt;/code&gt; to a big image (such as the one I was using as background), so I ditched the idea of using that property 🤦‍♂️. Initially I wanted to use it because a simple blur using the &lt;code&gt;filter&lt;/code&gt; property leaves a white “border” on the image. I ended up using &lt;code&gt;filter&lt;/code&gt; anyway and applying an outline to compensate for the white border. In the end, the user will hardly notice the white border is even there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#going-full-throttle-with-javascript"&gt;
  &lt;/a&gt;
  Going full throttle with JavaScript
&lt;/h2&gt;

&lt;p&gt;When it came the turn of addressing &lt;a href="https://github.com/Colo-Codes/mini-projects/blob/main/covid-19-dashboard-app/js/index.js"&gt;JavaScript&lt;/a&gt;, I started by testing how the APIs worked and how the data they were returning looked like.&lt;/p&gt;

&lt;p&gt;I implemented an API ( &lt;a href="https://geocode.xyz/"&gt;https://geocode.xyz/&lt;/a&gt; ) for getting the user’s country name by using reverse geocoding. Once that data was available (I used &lt;code&gt;async…await&lt;/code&gt; for that), I made use of the name of the country to trigger a new API request ( &lt;a href="https://restcountries.eu/"&gt;https://restcountries.eu/&lt;/a&gt; ) to get the country’s flag.&lt;/p&gt;

&lt;p&gt;With the data from the first API call or the name of the country entered by the user, I triggered two API requests ( &lt;a href="https://covid-api.mmediagroup.fr"&gt;https://covid-api.mmediagroup.fr&lt;/a&gt; ) to get the country’s COVID-19 data and the country’s vaccination data.&lt;/p&gt;

&lt;p&gt;I employed the data from the API that delivers COVID-19 data to build the list of available countries to get information from, to avoid errors when requesting data for a country that was not supported by the API 🤓.&lt;/p&gt;

&lt;p&gt;I used several &lt;code&gt;async..await&lt;/code&gt; functions to implement all the API requests and I also employed some “spinners” to let the user know that the site was fetching the data, thus improving its user experience.&lt;/p&gt;

&lt;p&gt;I also took advantage of the &lt;code&gt;async…await&lt;/code&gt; functions to handle any possible error that could arise from the APIs and implemented a messaging system to render those error messages to the user.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-architecture"&gt;
  &lt;/a&gt;
  JavaScript architecture
&lt;/h3&gt;

&lt;p&gt;During the time I was working on this project, I didn’t know about  &lt;a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller"&gt;MVC&lt;/a&gt; or JavaScript modules, so I condensed all the code into a single file. I won’t refactor this code because I think it is a fair snapshot of how my knowledge looked like at the time, but if I was to build it again knowing what I know now, I would implement MVC from the start.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lm-L3TPR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629449522412/2iGudhWra.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lm-L3TPR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629449522412/2iGudhWra.png" alt="Screenshot 2021-08-20 at 18.21.12.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The JavaScript architecture is simple, having one class that is in charge of building the card for each country, and a collection of functions that handle the different interactions with the user.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#testing-the-app-and-asking-for-feedback"&gt;
  &lt;/a&gt;
  Testing the app and asking for feedback
&lt;/h1&gt;

&lt;p&gt;As with my previous project, during the building process, I was constantly testing how the app was performing. Doing this pushed me to modify the HTML and CSS code on several occasions.&lt;/p&gt;

&lt;p&gt;I asked friends and family to test the app, and they had a mixture of problems with the API used for fetching the user’s country. I wanted to change it for another, more reliable API, but I couldn’t find one.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#publishing"&gt;
  &lt;/a&gt;
  Publishing
&lt;/h1&gt;

&lt;p&gt;As I always do, I used Git to keep track of the changes in the project and to be able to publish it on GitHub so I could share it with others 🕺.&lt;/p&gt;

&lt;p&gt;Due to the experimental nature of the project, I used  &lt;a href="https://colo-codes.github.io/mini-projects/todo-app/"&gt;GitHub pages&lt;/a&gt; to deploy and publish the project. I could also have used  &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;  or  &lt;a href="https://www.damiandemasi.com/"&gt;my own hosting&lt;/a&gt; service if the APIs I chose were more reliable.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lessons-learned"&gt;
  &lt;/a&gt;
  Lessons learned
&lt;/h1&gt;

&lt;p&gt;At the start, this project seemed simple, but it quickly got complicated, especially because I was dealing with three different APIs (and a couple more that didn’t work in the end).&lt;/p&gt;

&lt;p&gt;I didn’t spend much time on HTML, but CSS proved to be demanding once more 😅. Thanks to the challenges I faced I gain more CSS skills and learned how to better debug it.&lt;/p&gt;

&lt;p&gt;Regarding JavaScript, I could have implemented MVC from the get-go, so I will do that in my next project. As I previously said, I prefer not to refactor this project and leave it as a witness of my skills at the time.&lt;/p&gt;

&lt;p&gt;APIs are reliable… most of the time 🤭. I’m sure paid APIs perform better, so if I need to use them in the future for a more serious project, I will research deeply what is the best API to get for the job.&lt;/p&gt;

&lt;p&gt;This project still has room for improvement, but I had to make the decision to stop working on it at some point. Overall, I think it’s functioning as expected.&lt;/p&gt;

&lt;p&gt;As always, I'm open to any suggestions you may have about this writing or the project itself.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Versioning binaries in Go</title>
      <author>Gustavo Castillo</author>
      <pubDate>Thu, 16 Sep 2021 22:23:28 +0000</pubDate>
      <link>https://dev.to/gcdcoder/versioning-binaries-in-go-52al</link>
      <guid>https://dev.to/gcdcoder/versioning-binaries-in-go-52al</guid>
      <description>&lt;p&gt;In this article we will learn how to add a version to our binaries in Go using a &lt;code&gt;Makefile&lt;/code&gt; file and a third party package to print our logo in ASCII code.&lt;/p&gt;

&lt;p&gt;Having a version in our binaries is very important since with it, we could know which version of our application we are running on production, in addition our users could report errors for specific versions and thus be able to fix them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#makefile-to-create-the-binary-add-version-and-build-time"&gt;
  &lt;/a&gt;
  Makefile to create the binary add version, and build time
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Get version from git hash&lt;/span&gt;
git_hash :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;shell git rev-parse &lt;span class="nt"&gt;--short&lt;/span&gt; HEAD &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'development'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Get current date&lt;/span&gt;
current_time &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;shell &lt;span class="nb"&gt;date&lt;/span&gt; +&lt;span class="s2"&gt;"%Y-%m-%d:T%H:%M:%S"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Add linker flags&lt;/span&gt;
linker_flags &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'-s -X main.buildTime=${current_time} -X main.version=${git_hash}'&lt;/span&gt;

&lt;span class="c"&gt;# Build binaries for current OS and Linux&lt;/span&gt;
.PHONY:
build:
    @echo &lt;span class="s2"&gt;"Building binaries..."&lt;/span&gt;
    go build &lt;span class="nt"&gt;-ldflags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;linker_flags&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;./bin/binver ./main.go
    &lt;span class="nv"&gt;GOOS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;linux &lt;span class="nv"&gt;GOARCH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;amd64 go build &lt;span class="nt"&gt;-ldflags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;linker_flags&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;./bin/linux_amd64/binver ./main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this we will only need to execute the &lt;code&gt;make build&lt;/code&gt; command from our terminal to create the binary with its respective version and build time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-the-main-file-in-go"&gt;
  &lt;/a&gt;
  Create the main file in Go
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"flag"&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"os"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/morikuni/aec"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;buildTime&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt;   &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;binverFigletStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;`
_     _
| |__ (_)_ ____   _____ _ __
| '_ \| | '_ \ \ / / _ \ '__|
| |_) | | | | \ V /  __/ |
|_.__/|_|_| |_|\_/ \___|_|

`&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;printASCIIArt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;binverLogo&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;aec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LightGreenF&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binverFigletStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binverLogo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;displayVersion&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Display version and exit"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;displayVersion&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;printASCIIArt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Version:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Build time:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buildTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#repository-and-video"&gt;
  &lt;/a&gt;
  Repository and video
&lt;/h2&gt;

&lt;p&gt;If you want to see the complete code or the video where I explain how to do it step by step I leave you here the links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gustavocd/binver"&gt;GitHub repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=7BZidOIknwE"&gt;Video tutorial&lt;/a&gt; (In Spanish).&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>go</category>
    </item>
    <item>
      <title>Pi Network and Alternative Apps for Cryptomining</title>
      <author>Rishi</author>
      <pubDate>Thu, 16 Sep 2021 21:50:11 +0000</pubDate>
      <link>https://dev.to/cryptomininggyd/pi-network-and-alternative-apps-for-android-1fh0</link>
      <guid>https://dev.to/cryptomininggyd/pi-network-and-alternative-apps-for-android-1fh0</guid>
      <description>&lt;p&gt;&lt;strong&gt;Cloud Based Cryptomining Apps like Pi Network&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are looking for cloud based crypto mining apps like Pi Network so there are certain apps which looks legit and can bring some value in future if you mine now because the list of apps which I’m providing are backed by tech experts in review, they have good future plans, white paper, and their founders are well known people who are doing regular conferences and presentation so make people aware about their coins and plans. I guess there are more then 12-15 crypto mining apps, which are offering free mining for their coins, but if you will look closely, so there are only 5 to7 apps which looks legit and most of these apps are following the model of Pi Network. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pi Network - referral code: crypto18&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pi Network's app is a cloud mining based crypto currency which is quite different from other crypto currencies. However, other crypto currencies have seen how easy it is for Pi to be mined and are trying to copy Pi's mode of operation. With only five seconds of your day on your smartphone and no investment, you can have a chance to receive a huge amount of money.&lt;/p&gt;

&lt;p&gt;With the soaring price of Bitcoin, we no longer have a chance to own Bitcoin, but you can mine Pi for free and that too without any investment. The Pi Network, is kind of the first digital currency that you can mine on your phone," has become a popular topic of discussion on social media and these days many apps are copying the same model and mode of operations after evaluating the feasibility of the project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apple Store: -  &lt;a href="https://apps.apple.com/us/app/pi-network/id1445472541"&gt;https://apps.apple.com/us/app/pi-network/id1445472541&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google Play Store: - &lt;a href="https://play.google.com/store/apps/details?id=com.blockchainvault"&gt;https://play.google.com/store/apps/details?id=com.blockchainvault&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pi Network referral code: crypto18&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bee Network - referral code: crypto18&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bee network is genuine and a new type of cryptocurrency and there for it is not listed on cryptocurrency exchanges and their is no value for now but in future their will be value of these Bee Coins for sure, once they get listed on the exchanges. Bee network, almost similar to Pi app and in short we can say that it's almost copy of Pi apps, which means Bee's success so far is based on Pi's success. I know it should ring panic alarm because it's for a big part of a copy-paste project, but in reality this happens all the time and doesn't always mean it's a scam, like; Bitcoin BEP2, Bitcoin SV, Bitcoin Diamond, Bitcoin Cash, Bitcoin Gold and they all are kind of similar and successful too. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apple Store: -  &lt;a href="https://apps.apple.com/us/app/bee-network-phone-based-asset/id1529988919"&gt;https://apps.apple.com/us/app/bee-network-phone-based-asset/id1529988919&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google Play Store: - &lt;a href="https://play.google.com/store/apps/details?id=network.bee.app"&gt;https://play.google.com/store/apps/details?id=network.bee.app&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bee Network referral code: crypto18&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Timestope - Witness (referral) code:crypto18&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Timestope is south Korean project with some background in technology and cryptocurrencies. It seems Timestope is consist of team of a legit people in a company that's already been making apps for some time. There are chances in future their currency will have some better value as they are also running some other dApps from their own platform. It seems Timestope can't be successful as Pi Network, but eventually it will bring some value as mining is free on your phone and you don’t have to pay anything except for clicking on their app once a day.&lt;/p&gt;

&lt;p&gt;The basis of TimeStope is to be a witness. Only those who have been invited by the witness can create the TIME through TimeStope, and 9.6τ is distributed to the invitee every day. When the mining period expires, you must witness for someone other than the invitee who invited you and the person you invited, and the attendance score will be reset. This is a way to consistently provide fair opportunities to new participants.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google Play Store: - &lt;a href="https://play.google.com/store/apps/details?id=com.timestope"&gt;https://play.google.com/store/apps/details?id=com.timestope&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Timestope Witness (referral) code: crypto18&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alpha Network - referral code: crypto18&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Alpha Networks is a blockchain-powered entertainment platform dedicated to building the infrastructure of the next era of media. Alpha Network combines subscription VOD, targeted advertising, and pay-per-view business models on one platform for a seamless user experience. With Alpha Network you can earn cryptocurrency from your phone by pressing a button every 24 hours. There are a few ways in which you can increase the amount of Alpha coins you earn per hour. But before we go into that, have a look at their presentation video.&lt;/p&gt;

&lt;p&gt;It seems Alpha coin is very reliable and 100% legit. I've been trading on the platform since 2018 without any issues. Similar to gaming apps, Alpha network has a direct easy-to-use application where users can sign in using their email or Facebook account, push a button and earn 0.5 coins per hour until the 500 million coin supply is exhausted. The app also has a “boost” feature that allows users to watch 15-second ads to earn extra coins. Users can also increase their mining rate by inviting others to join.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google Play Store: - &lt;a href="https://play.google.com/store/apps/details?id=com.alphanetwork.alphaminer"&gt;https://play.google.com/store/apps/details?id=com.alphanetwork.alphaminer&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alpha Network referral code: crypto18&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Phoneum ( PHT) - referral code -  4fwf3aun&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(Use the above code to claim 200 free PHT coins as bonus)&lt;/p&gt;

&lt;p&gt;PHT cloud earning or Phoneum is a very straight forward app with attractive app with a lot of functionality such as VIP Miners and as well as regular miners. And unlike other apps you have to click on PHT Cloud Earning app once a week. However hash rate or the speed of mining on this app is little low, but this app is cloud based and its not going to use any computational power from your phone except for little space for app. So, you can use this app, and hey you're doing pretty much nothing, so if it brings some value in future so its worth mining. But I wouldn't say this is a similar to Pi, but its free with legit details. &lt;/p&gt;

&lt;p&gt;Phoneum is one of the new age mobile only crypto currencies that can be mined only from the mobile phone. The team behind Phoneum is building a community of users who would socialize the Phoneum coin, PHT as it is called. The Phoneum ecosystem has an app (available on iOS and Android) which can be used to mine the PHT coins, then several mobile games that keep users engaged and incentivize them to earn more coins.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google Play Store: -&lt;a href="https://play.google.com/store/apps/details?id=com.cloud.earning"&gt;https://play.google.com/store/apps/details?id=com.cloud.earning&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloud Earning PHT or Phoneum referral code - 4fwf3aun&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Apart from them, if you still looking for more crypto mining apps even if they looks fishy with their details, UI and the permission they need from your mobile, so here is list of those crypto mining apps, but I won’t recommend these apps, because there are only 1 to 5 percent chances that there coins will be worth something in near future.&lt;/p&gt;

&lt;p&gt;Midoin (Android &amp;amp; iOS), CowCow (Android), Spotter (Android), Reflex (Android), AntCoin (Android), Eagle Network (Android), Thundercore Hub (Android), Swissborg Community App (Android)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why you need referrals codes-&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are mining with any crypto mining apps, either on Android or iOS, so you can also refer these crypto mining apps to friends or relatives or people and it will increase your hash rate as well as their hash rate too. But make sure your referral is actively mining, because only than your hash rate will increase if they will be active (click at-least once in day on an app). If you are new and looking to join these apps and want referral codes? So, you can use my referral codes and I’m so active on below mentioned 5 apps. Make sure to choose someone who is always active, like I am, as this will improve your own mining rate too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pi Network reference code: crypto18&lt;br&gt;
Bee Network reference code: crypto18&lt;br&gt;
Alpha Network reference code: crypto18&lt;br&gt;
TimeStope witness code:  crypto18&lt;br&gt;
Cloud Earning PHT or Phoneum (PHT) reference code: 4fwf3aun&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To know more about Cryptomining on Smartphone --&amp;gt; &lt;a href="https://bit.ly/cryptomininggyd"&gt;https://bit.ly/cryptomininggyd&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Happy Mining!!! &lt;/p&gt;

</description>
      <category>cryptomining</category>
      <category>cryptominingapps</category>
      <category>crypto</category>
      <category>pinetwork</category>
    </item>
    <item>
      <title>List of best CryptominingApps</title>
      <author>Rishi</author>
      <pubDate>Thu, 16 Sep 2021 21:31:08 +0000</pubDate>
      <link>https://dev.to/cryptomininggyd/list-of-best-cryptominingapps-km5</link>
      <guid>https://dev.to/cryptomininggyd/list-of-best-cryptominingapps-km5</guid>
      <description>&lt;p&gt;If you are looking for genuine cypto mining apps, so with simple google search you will find that there are several similar projects as Pi Network, but you will find that most of them are quite sketchy and maybe these sketchy apps meant to do some harm to your phone or data. However, if you will look closely for certain points, so you can easily find some real or genuine cypto mining apps like Pi Network. And those points are, Permission needed for these apps, review on app store, ratio of reviews and download on app stores, White papers, founders or organization behind these (because if someone is taking responsibility so it’s always good thing in reference to those ghost apps, who just pop-ups on app store with some website out of nowhere and some ghosts are running that. So never ever spend a single dime or time on sketchy app.&lt;/p&gt;

&lt;p&gt;There is many crypto mining app for your phone, works with android and iPhone. On these apps you only have to do one click every 24 hours to secure your earnings for that time period. So here I'm going to list some crypto projects which are similar to Pi network and among all of that I have most faith in Pi, but for sake of hope and profit, I prefer to use some other apps too for crypto Mining because they looks legit with all available information on internet.&lt;/p&gt;

&lt;p&gt;There are 15 to 20 crypto mining apps, which are offering free mining for their coins, but if you will do little research on them, so there are only 5 to7 apps which looks legit and most of these apps are following the model of Pi Network, and rest of them either have uncleared future plans or they owned by some anonymous guys, who don't want to come in light, which make these apps fishy. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;List of Best Crypto Mining Apps: -&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pi Network (Android &amp;amp; iOS)&lt;br&gt;
Bee Network (Android &amp;amp; iOS)&lt;br&gt;
Alpha Network (Android)&lt;br&gt;
TimeStope (Android)&lt;br&gt;
Cloud Earning PHT or Phoneum (Android)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Apart from them, if you still looking for more crypto mining apps even if they looks fishy with their details, UI and the permission they need from your mobile, so here is list of those crypto mining apps, but I won’t recommend these apps, because there are only 1 to 5 percent chances that there coins will be worth something in near future. &lt;/p&gt;

&lt;p&gt;If you are looking for genuine cypto mining apps, so with simple google search you will find that there are several similar projects as Pi Network, but you will find that most of them are quite sketchy and maybe these sketchy apps meant to do some harm to your phone or data. However, if you will look closely for certain points, so you can easily find some real or genuine cypto mining apps like Pi Network. And those points are, Permission needed for these apps, review on app store, ratio of reviews and download on app stores, White papers, founders or organization behind these (because if someone is taking responsibility so it’s always good thing in reference to those ghost apps, who just pop-ups on app store with some website out of nowhere and some ghosts are running that. So never ever spend a single dime or time on sketchy app.&lt;/p&gt;

&lt;p&gt;There are many crypto mining app for your phone, who works with android and iPhone. On these apps you only have to do one click every 24 hours to secure your earnings for that time period. So here I'm going to list some crypto projects which are similar to Pi network and among all of that I have most faith in Pi, but for sake of hope and profit, I prefer to use some other apps too for crypto Mining because they looks legit with all available information on internet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Referral codes for Best Crypto mining apps: -&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are mining with any crypto mining apps, either on Android or iOS, so you can also refer these crypto mining apps to friends or relatives or people and it will increase your hash rate as well as their hash rate too. But make sure your referral is actively mining, because only than your hash rate will increase if they will be active (click at-least once in day on an app). If you are new and looking to join these apps and want referral codes? So, you can use my referral codes and I’m so active on below mentioned 5 apps. Make sure to choose someone who is always active, like I am, as this will improve your own mining rate too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pi Network reference code: crypto18&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bee Network reference code: crypto18&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alpha Network reference code: crypto18&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TimeStope witness code:  crypto18&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloud Earning PHT or Phoneum (PHT) reference code: 4fwf3aun&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Apart from them, if you still looking for more crypto mining apps even if they looks fishy with their details, UI and the permission they need from your mobile, so here is list of those crypto mining apps, but I won’t recommend these apps, because there are only 1 to 5 percent chances that there coins will be worth something in near future. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To know more about Cryptomining on Smartphone --&amp;gt; &lt;a href="https://bit.ly/cryptomininggyd"&gt;https://bit.ly/cryptomininggyd&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>cryptomining</category>
      <category>cryptominingapps</category>
      <category>crypto</category>
    </item>
    <item>
      <title>Designing web accessible video calls</title>
      <author>Jess Mitchell</author>
      <pubDate>Thu, 16 Sep 2021 21:23:46 +0000</pubDate>
      <link>https://dev.to/trydaily/designing-web-accessible-video-calls-3852</link>
      <guid>https://dev.to/trydaily/designing-web-accessible-video-calls-3852</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tips-from-daily-on-how-we-implement-accessible-uis-to-ensure-everyone-can-connect-online-through-video"&gt;
  &lt;/a&gt;
  Tips from Daily on how we implement accessible UIs to ensure everyone can connect online through video
&lt;/h2&gt;

&lt;p&gt;A major goal of ours at Daily is to build video and audio APIs that work for as many people as possible. This means not only building high quality APIs, but also building UIs (user interfaces) that accommodate more than just an imaginary “average user”; we want &lt;a href="https://daily.co/prebuilt"&gt;Daily Prebuilt&lt;/a&gt;, our &lt;a href="https://dashboard.daily.co/"&gt;Dashboard&lt;/a&gt;, and our &lt;a href="https://docs.daily.co/"&gt;docs&lt;/a&gt; to be accessible to everyone.&lt;/p&gt;

&lt;p&gt;One way we’ve worked towards this at Daily is to build our UIs following web accessibility standards from the start. Internally, we use a component library with components that have all been built to meet &lt;a href="https://www.w3.org/WAI/standards-guidelines/wcag/"&gt;these basic standards&lt;/a&gt;, which means all of our UIs using this library have accessibility baked in. 🍞 &lt;/p&gt;

&lt;p&gt;In this tutorial, we’ll review web accessibility basics, and take a look at how we’ve implemented web accessibility in Daily’s own UIs. We know a site's accessibility can almost always be improved — and this is something we’re committed to working on continuously. However, if you’re building video apps for the first time (or even the second or third), we hope that some of the steps we’ve taken can inspire your own designs.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#web-accessibility-what-exactly-is-it"&gt;
  &lt;/a&gt;
  Web accessibility: What exactly is it?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.w3.org/WAI/planning-and-managing/initiate/#learn-the-basics"&gt;Web accessibility&lt;/a&gt; refers to making website information and interactions available to everyone, regardless of barriers, such as disability, geography, language, device restrictions, and more. These barriers may be temporary, such as a broken arm, or permanent, such as a visual impairment.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: The term “accessibility” is sometimes written as “a11y”, which is a numeronym. (There are 11 letters between the first letter (“a”) and last letter (“y”). Hence, a11y. 😉)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-benefits-from-web-accessibility"&gt;
  &lt;/a&gt;
  Who benefits from web accessibility?
&lt;/h2&gt;

&lt;p&gt;In terms of who web accessibility is for, it truly benefits everyone. We want to emphasize that because even people who don’t &lt;em&gt;require&lt;/em&gt; accessible websites still benefit from them. 🙌&lt;/p&gt;

&lt;p&gt;Accessible websites are often just better designed websites. Basic accessibility guidelines—like making sure your font size is large enough or your colour palette is high contrast enough—make the website easier for everyone to understand.&lt;/p&gt;

&lt;p&gt;However, when accessibility is not considered, there are often specific groups of people who are affected most. &lt;a href="https://www.w3.org/WAI/fundamentals/accessibility-intro/"&gt;This includes people with&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cognitive impairments (e.g. memory impairments)&lt;/li&gt;
&lt;li&gt;Neurological disorders (e.g. Parkinson’s)&lt;/li&gt;
&lt;li&gt;Physical, visual, auditory, or speech impairments (e.g. colour blindness, reduction in fine motor skills)&lt;/li&gt;
&lt;li&gt;Temporary impairments (e.g. broken arm)&lt;/li&gt;
&lt;li&gt;Poor network conditions (e.g. slow page load times)&lt;/li&gt;
&lt;li&gt;Small or old devices (e.g. reduced CPU capacity)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#pour-principles"&gt;
  &lt;/a&gt;
  POUR Principles
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://www.w3.org/TR/UNDERSTANDING-WCAG20/intro.html"&gt;WCAG (Web Content Accessibility Guidelines)&lt;/a&gt; outline four principles for web accessibility, also known as the POUR principles. These principles are incredibly useful for testing whether a website meets the goals set out by &lt;a href="https://www.w3.org/WAI/standards-guidelines/"&gt;web accessibility standards&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;POUR is an acronym for perceivable, operable, understandable, and robust. These principles represent the following goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Perceivable&lt;/em&gt;: Websites should be perceivable, i.e. available to the senses, such as vision, touch, and hearing.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Operable&lt;/em&gt;: Users can interact with any elements on a webpage that are meant to be interacted with regardless of the device they’re using (e.g. mouse, keyboard, etc.)&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Understandable&lt;/em&gt;: Websites should be easy to understand regardless of how they’re read (e.g. visually, screen reader, etc.)&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Robust&lt;/em&gt;: Websites should maximize how compatible they are with various browsers, devices, operating systems, network conditions, etc.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#web-accessibility-at-daily"&gt;
  &lt;/a&gt;
  Web Accessibility at Daily
&lt;/h2&gt;

&lt;p&gt;Now that we’ve done a quick overview of what web accessibility is, let’s take a look at some of the ways Daily has made its UIs accessible. This is not a complete list of how we incorporate accessibility into Daily products, but we hope this helps give some inspiration with your own apps!&lt;/p&gt;

&lt;p&gt;The list we’ll cover today includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Making all UI elements keyboard-accessible, including how we use focus traps and avoid keyboard traps to enhance keyboard navigation&lt;/li&gt;
&lt;li&gt;Adding skip links in Daily’s Dashboard&lt;/li&gt;
&lt;li&gt;Special treatment of “hidden” elements&lt;/li&gt;
&lt;li&gt;Using semantic HTML&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#making-all-interactive-ui-elements-keyboardaccessible"&gt;
  &lt;/a&gt;
  Making all interactive UI elements keyboard-accessible
&lt;/h2&gt;

&lt;p&gt;One of the most effective ways to make websites more accessible is to make sure your audience can always interact with your site without a mouse. The idea is to make sure any element on the page that can be interacted with can be interacted with in multiple ways, whether it be a keyboard, mouse, or other device.&lt;/p&gt;

&lt;p&gt;This means the site visitor should be able to tab through elements, submit forms or inputs, or escape optional views, like modals, without using a mouse. &lt;/p&gt;

&lt;p&gt;In the example below, notice how a participant can join a call and move through Daily Prebuilt’s video call UI only with a keyboard:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7okS6zr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.daily.co/blog/content/images/2021/09/CleanShot-2021-09-01-at-11.07.03.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7okS6zr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.daily.co/blog/content/images/2021/09/CleanShot-2021-09-01-at-11.07.03.gif" alt="Tabbing through Daily Prebuilt video"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is ideal because we never want site visitors to feel like they can’t join a call or, worse, can’t leave a call once they’ve joined. No one should ever feel “stuck” moving through the user flow.&lt;/p&gt;

&lt;p&gt;If you’re curious what tabbing through a Daily call is like with a screen reader, watch this example below, which is using a &lt;a href="https://chrome.google.com/webstore/detail/screen-reader/kgejglhpjiefppelpmljglcjbhoiplfn/related?hl=en"&gt;screen reader Chrome extension&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/mtV9RSeI05o"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-focus-traps"&gt;
  &lt;/a&gt;
  Adding focus traps
&lt;/h3&gt;

&lt;p&gt;Another way of helping non-mouse users is to include focus traps in your websites.&lt;/p&gt;

&lt;p&gt;Focus traps refer to traps (or loops) of focusable elements within a parent element on the page. A common example of when to use this is with a modal. When a site visitor opens a modal, if they tab through the contents of the modal and get to the end, tabbing again should bring the user back to the first tabbable element in the modal. This is in contrast to another, less accessible option: continuing to tab to the next element in the DOM—past the modal— while the modal is still open.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7okS6zr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.daily.co/blog/content/images/2021/09/CleanShot-2021-09-01-at-11.07.03.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7okS6zr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.daily.co/blog/content/images/2021/09/CleanShot-2021-09-01-at-11.07.03.gif" alt="Tabbing through Settings modal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The reason focus traps are useful is because we can assume while the modal is open, the modal is the only element the visitor is trying to interact with until they close it. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#avoiding-keyboard-traps"&gt;
  &lt;/a&gt;
  Avoiding keyboard traps
&lt;/h3&gt;

&lt;p&gt;Wait, are “traps” bad or good? Well, it depends! We now know why focus traps are good for accessibility, but is there ever a time where trapping the focus is bad?&lt;/p&gt;

&lt;p&gt;You can probably tell from the name of this section: yes!&lt;/p&gt;

&lt;p&gt;A “keyboard trap” refers to when an element can be focused but can’t be unfocused. The site visitor gets trapped on an element if they’re only using a keyboard. Since some users can’t use a mouse, any action a site visitor takes with a keyboard should be able to be undone. &lt;/p&gt;

&lt;p&gt;An example of this is if you open a modal to change your username in a Daily call. &lt;/p&gt;

&lt;p&gt;In this first example below, we see a modal with a username form and one button to change the name. If I’m only using a keyboard, there’s no button to close the modal or cancel changing my name. If the keyboard’s &lt;code&gt;Escape&lt;/code&gt; key doesn’t close the modal either, I’ll have to fill out the form to get back to the video call. This is what we don’t want.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zUXNp6qB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4m0y33urz0dbhb7dmmcj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zUXNp6qB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4m0y33urz0dbhb7dmmcj.png" alt="Bad example of a modal with no way out"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let’s compare that scenario to how Daily Prebuilt’s username form is actually set up: The modal can be closed with a keyboard’s &lt;code&gt;Escape&lt;/code&gt; key or by pressing the &lt;code&gt;Cancel&lt;/code&gt; button. The call participant is never forced to change their username if the username modal has been opened.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NT49Rtaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3ty2tktij2wa2pwdqm8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NT49Rtaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3ty2tktij2wa2pwdqm8.png" alt="Better example of a modal with a cancel button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-skip-links-to-dailys-dashboard"&gt;
  &lt;/a&gt;
  Adding skip links to Daily’s Dashboard
&lt;/h2&gt;

&lt;p&gt;Another web accessibility feature that can help non-mouse users a lot is to add skip links to websites with navigation bars or a lot of links in the header. Skip links are links that are styled to be off screen unless they’re tabbed to, which means you don’t see them if you’re using a mouse.&lt;/p&gt;

&lt;p&gt;You can include more than one skip link; ideally, you want to give site visitors the option of skipping to whichever section of the page they may want to jump to without having to tab through the entire page.&lt;/p&gt;

&lt;p&gt;As an example of this, let’s look at Daily’s Dashboard. If you’re looking at the &lt;a href="https://dashboard.daily.co/recordings"&gt;Recordings page&lt;/a&gt; and want to get to the &lt;code&gt;Learn how to retrieve rtp-tracks recordings&lt;/code&gt; link, you have to tab through the header and nav bar to get to the main content.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FDDd1YGK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.daily.co/blog/content/images/2021/09/CleanShot-2021-09-01-at-11.20.47.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FDDd1YGK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.daily.co/blog/content/images/2021/09/CleanShot-2021-09-01-at-11.20.47.gif" alt="Tabbing through Dashboard header and nav"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To make this easier to navigate by keyboard, we can add two skip links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Skip to navigation&lt;/code&gt; to avoid having to tab through the header&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Skip to main&lt;/code&gt; to avoid tabbing through the header and nav bar&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since we are already on the &lt;code&gt;Recordings&lt;/code&gt; page in the example below, we can skip right to the main content with one tab and open that first link. 🎊&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HjdTWsRr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.daily.co/blog/content/images/2021/09/CleanShot-2021-09-01-at-11.25.11-1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HjdTWsRr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.daily.co/blog/content/images/2021/09/CleanShot-2021-09-01-at-11.25.11-1.gif" alt="Using skip links to skip to main content"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To create these skip links in the Daily Dashboard, we added two anchor tags to the top of our Dashboard header:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"skip-link"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     Skip to main content
   &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

   &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"skip-link"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#nav"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     Skip to navigation
   &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
   ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we style them to not show by default and instead only show when they are being focused on. We do this by clipping the links to be 1 x 1px, and updating the &lt;code&gt;clip&lt;/code&gt; property only when they’re focused.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.skip-link&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;white-space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;nowrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.skip-link&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly, we add an id attribute (&lt;code&gt;#main&lt;/code&gt; and &lt;code&gt;#nav&lt;/code&gt;) to the associated elements so clicking the link (the anchor tag) brings the focus to that part of the page. The end result is that all the content between the link and the target (i.e. the header and the nav bar) gets skipped in the tab order.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#special-treatment-of-hidden-elements"&gt;
  &lt;/a&gt;
  Special treatment of “hidden” elements
&lt;/h2&gt;

&lt;p&gt;Along the same lines of skip links, there are other times when an element may be off screen. One example is when icons are used for buttons and we want screen readers to know how to interpret them, as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-hidden-labels-for-screen-readers"&gt;
  &lt;/a&gt;
  Creating hidden labels for screen readers
&lt;/h3&gt;

&lt;p&gt;The way we handle this at Daily is by using a &lt;code&gt;&amp;lt;VisuallyHidden&amp;gt;&lt;/code&gt; React component in the button contents, which is really just a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; with text that is styled to not be visible. This means the screen reader can read it but site visitors who can visually see the UI will just see the icon.&lt;/p&gt;

&lt;p&gt;It’s important to note when you are visually hiding an element meant for a screen reader, you should not use &lt;code&gt;visible:hidden;&lt;/code&gt; or &lt;code&gt;display:none;&lt;/code&gt;. Both of these CSS properties will hide the element visually &lt;em&gt;and&lt;/em&gt; hide it from a screen reader, which is not what we want.&lt;/p&gt;

&lt;p&gt;Instead, like in the previous skip link example, we want to style it to only not be visually shown. There are a few ways to do this, so let’s look at how we hide text in Daily’s component library:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;VisuallyHidden&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="nx"&gt;jsx&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`
     span {
       clip: rect(1px, 1px, 1px, 1px);
       height: 1px;
       overflow: hidden;
       position: absolute;
       white-space: nowrap;
       width: 1px;
     }
   `&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/style&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similar to the skip link, we clip the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; to be 1 x 1px and hide any overflowing content. This successfully prevents the text from being seen while still letting the screen reader read it.&lt;/p&gt;

&lt;p&gt;Our &lt;a href="https://docs.daily.co/reference#properties"&gt;Daily Prebuilt full screen button&lt;/a&gt; is one example where this &lt;code&gt;&amp;lt;VisuallyHidden&amp;gt;&lt;/code&gt; component is used. Since it is just a full screen icon in the Prebuilt UI, we add text to make it more descriptive for a screen reader.&lt;/p&gt;

&lt;p&gt;To ensure it can be read properly by screen readers, a span with the text  “Enter full screen” is included in the HTML but not shown in the UI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2ZmPxKJX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21vcd9wjaxr8a65gjzc5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ZmPxKJX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21vcd9wjaxr8a65gjzc5.png" alt="DOM shows span that isn't visible in the call UI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#removing-hidden-elements-from-the-tab-order"&gt;
  &lt;/a&gt;
  Removing hidden elements from the tab order
&lt;/h3&gt;

&lt;p&gt;Another example of special treatment of hidden elements is removing an element from the tab order if it is in the DOM but the site visitor is not meant to be aware of it.&lt;/p&gt;

&lt;p&gt;For example, tooltips included in Daily Prebuilt are not shown unless hovered over. These tooltips don’t need to be read by the screen reader while the call participant tabs through the call elements because the buttons they’re related to are already being described by the screen reader.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Tooltip&lt;/span&gt;
    &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ctrlKey&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; + D`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;tabIndex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TrayButton&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleMic&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MicrophoneIcon&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;buttonText&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/TrayButton&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Tooltip&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, we can remove the tooltip from the tab order with the attribute &lt;code&gt;tabindex=”-1”&lt;/code&gt;. This will prevent the tooltip from getting keyboard focus, which will prevent the screen reader from reading the tooltip’s text.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-semantic-html"&gt;
  &lt;/a&gt;
  Using semantic HTML
&lt;/h2&gt;

&lt;p&gt;One of the most basic ways we’re committed to accessibility at Daily is using semantic HTML.&lt;/p&gt;

&lt;p&gt;Semantic HTML refers to HTML elements that describe the element content. For example, if you are building a web form, writing the form with semantic HTML would use a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag, with an &lt;code&gt;&amp;lt;input type=”submit”&amp;gt;&lt;/code&gt; at the end to submit the form. In essence, you always want to use the element that represents what the element actually is (such as a &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt;, a &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;, an unordered list &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;, etc.) This is in contrast to using non-semantic HTML, which would use a vaguer container element, like a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Semantic HTML helps communicate to the browser (and developer reading the code!) what each section of your markup is. This also makes it easier for screen readers to understand how to read the page’s content to its listener, and it makes the page more SEO-friendly. &lt;/p&gt;

&lt;p&gt;It's win-win for everyone!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;As mentioned, these examples are just a few ways our frontend team at Daily—&lt;a href="https://www.daily.co/blog/author/christian/"&gt;Christian&lt;/a&gt;, especially—is ensuring Daily products are accessible to everyone. We still have some areas to improve, but we do our best to ensure our product UIs are accessible at launch. 💫&lt;/p&gt;

&lt;p&gt;Some additional tips we didn’t have space to go into include always labelling form inputs, testing color palettes to meet &lt;a href="https://webaim.org/resources/contrastchecker/"&gt;color contrast requirements&lt;/a&gt;, and actually testing websites with screen reader tools, like a &lt;a href="https://developer.chrome.com/docs/devtools/accessibility/reference/"&gt;screen reader Chrome extension&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Testing with screen reader extensions are not only useful for developers, but they also help show what it’s really like to rely on a screen reader to navigate the web. If you’ve never used a screen reader before, &lt;a href="https://twitter.com/kentcdodds/status/1083073242330361856"&gt;check out this example&lt;/a&gt; of how frustrating it can be when people use special characters unnecessarily.&lt;/p&gt;

&lt;p&gt;Another area we didn’t touch on is optimizing site performance to help those with CPU or internet restrictions. Check out our &lt;a href="https://www.daily.co/blog/tips-to-improve-performance/"&gt;previous post on improving video call performance&lt;/a&gt; to learn some quick ways to make your custom Daily calls easier to load.&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title> Is Pi Network Legit? for Cryptomining </title>
      <author>Rishi</author>
      <pubDate>Thu, 16 Sep 2021 21:21:10 +0000</pubDate>
      <link>https://dev.to/cryptomininggyd/is-pi-network-legit-for-cryptomining-3g53</link>
      <guid>https://dev.to/cryptomininggyd/is-pi-network-legit-for-cryptomining-3g53</guid>
      <description>&lt;p&gt;&lt;strong&gt;CryptominingApp - Pi Network Review and Crypto Analysis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I guess, you have installed Pi Network app, but if you haven't so you should install it, because 23 millions users are already mining and and this app is developed and backed by Stanford University PhDs, and they do regular online seminars and presentation to involve miners. Pi network is one of the most trusted app foe crypto mining. You can join free mining pool before listing and earn some or more coins because with some research reports it is expected that Pi coins will bring some good value from $10 to $100 by the end of 2025 or maybe it can be next bitcoin because of miners. Pi Netowrk will stop mining when it will reach 100 million miners and till now 23 million miners are on board. &lt;/p&gt;

&lt;p&gt;The Pi Network, is kind of the first digital currency that you can mine on your phone," has become a popular topic of discussion on social media and these days many apps are copying the same model and mode of operations after evaluating the feasibility of the project. With the soaring price of Bitcoin, we no longer have a chance to own Bitcoin, but you can mine Pi for free and that too without any investment. Here you are losing nothing, but with 5 seconds of day, if the project succeeds, each Pi could be worth 10 to 100 U.S. dollars.&lt;/p&gt;

&lt;p&gt;As a new user you will receives one free Pi and starts with a mining speed of 0.10 Pi per hour, which will increase with more accepted referrals. As per some experts the estimates about the Pi's value, is now worth $10-100 each.&lt;/p&gt;

&lt;p&gt;There is currently no official trading market for Pi neither its listed in any exchange, but with the launch of main-net in start of 2022, Pi coins will be available for trading in some exchanges and with time its value will increase as it has user base of more than 24 million miners. A typical cryptocurrency owner usually has a private key to access his or her funds, but Pi users do not, which means it is unlikely that they will be able to transfer or spend the currency. This also means that Pi currency only exists on servers and administrators can create as many Pi’s as they want.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pi Network is a legit or not?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to make money with cryptocurrencies, Pi Network claims you can do so for free by installing an app on your phone. But, as cool as it sounds, I’m sure you’ll agree that it’s all too good to be true. In fact, you may have already heard people calling Pi Network a scam.&lt;/p&gt;

&lt;p&gt;Pi Network is a mobile application where you can mine a cryptocurrency called Pi. All you have to do is log-in everyday and click a button, and you have to do none investment, but just 5 seconds a day. The app’s users get nothing but basic features like in-app messaging. Most users hope to one day exchange their virtual coins for real money. With the research paper of Pi network and their future plans along with the list of most reputed founders of tech industry its sure that Pi network is going to be successful for sure and 1 Pi can be worth 1 to 10 dollars easily in next 2 to 3 years. Pi Network’s coin value is zero at the moment. However, people behind this project promised Pi holders can spend or exchange their Pi for fiat currency on the Pi marketplace. Using the app is as simple as clicking to receive Pi every 24 hours. It’s difficult to see how this action could be valuable. While Pi Network encourages developers to build apps on the platform, it does little for users.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to Mine PI Cryptocurrency?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pi Network referral code: crypto18&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Follow these simple instructions:&lt;/p&gt;

&lt;p&gt;--Go to the App Store or Google Play, depending on the type of your operating system.&lt;br&gt;
--Type Pi Network into the search gap.&lt;br&gt;
--Download the application on your smartphone and open it.&lt;br&gt;
--Specify the registration method: Facebook or phone number. We recommend the second option since it is much safer.&lt;br&gt;
--Fill in the country of residence and phone number.&lt;br&gt;
--Fill in first name, last name and nickname.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apple Store: - &lt;a href="https://apps.apple.com/us/app/pi-network/id1445472541"&gt;https://apps.apple.com/us/app/pi-network/id1445472541&lt;/a&gt;&lt;br&gt;
Rating on iOS: - 4.4 rating by 7000 users&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google Play Store: - &lt;a href="https://play.google.com/store/apps/details?id=com.blockchainvault"&gt;https://play.google.com/store/apps/details?id=com.blockchainvault&lt;/a&gt;&lt;br&gt;
Rating on Android: - 4.4 rating by 3,15,578 users&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Website: - &lt;a href="https://minepi.com/"&gt;https://minepi.com/&lt;/a&gt; &lt;br&gt;
Whitepaper: - &lt;a href="https://minepi.com/white-paper"&gt;https://minepi.com/white-paper&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why you need Pi Network Referral code-crypto18&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you have an invitation you can download the mobile app. If you looking for start and need reference codes, so you can use my reference codes because you need a referral code to join most of these networks. When you use someone’s code, they get a better mining rate. Make sure to choose someone who is always active, like I am, as this will improve your own mining rate too:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pi Network referral code: crypto18&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To know more about Cryptomining on Smartphone --&amp;gt; &lt;a href="https://bit.ly/cryptomininggyd"&gt;https://bit.ly/cryptomininggyd&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>cryptominingapp</category>
    </item>
  </channel>
</rss>
