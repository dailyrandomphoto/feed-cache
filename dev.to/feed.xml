<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Making the Parser</title>
      <author>Bruno Noriller</author>
      <pubDate>Sun, 17 Oct 2021 22:58:58 +0000</pubDate>
      <link>https://dev.to/noriller/making-the-parser-32lp</link>
      <guid>https://dev.to/noriller/making-the-parser-32lp</guid>
      <description>&lt;p&gt;Continuing from &lt;a href="https://dev.to/noriller/how-to-make-a-parser-and-a-filter-4g98"&gt;last week&lt;/a&gt;, let's make a parser.&lt;/p&gt;

&lt;p&gt;It will be really simple and basically cover nothing, but it will do as an example.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;This article contains code snippets of Regex that may be disturbing for some programmers. &lt;br&gt;
Reader discretion is advised.&lt;/em&gt;&lt;/p&gt;



&lt;p&gt;First, you have to think what you want to cover with your parser.&lt;/p&gt;

&lt;p&gt;For this example it will be: single words, "quoted words" and tag:value.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#so-lets-make-a-draft-of-what-it-will-do"&gt;
  &lt;/a&gt;
  So, let's make a draft of what it will do:
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyBasicParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;singleValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseSingleValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;quotedValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseQuotedValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tagValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseTagValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;singleValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;quotedValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tagValues&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#lets-start-with-the-simplest-one"&gt;
  &lt;/a&gt;
  Let's start with the simplest one:
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;parseSingleValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="c1"&gt;// lets just split by spaces!&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;parseSingleValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;some random string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// returns: [ 'some', 'random', 'string' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Nice, looking good and easy!&lt;br&gt;
(And we didn't even had to use Regex!)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#next-is-the-quoted-values"&gt;
  &lt;/a&gt;
  Next is the quoted values:
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;parseQuotedValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;quotesRegex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(?&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;quote&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;"'&lt;/span&gt;&lt;span class="se"&gt;])&lt;/span&gt;&lt;span class="sr"&gt;.*&lt;/span&gt;&lt;span class="se"&gt;?\k&lt;/span&gt;&lt;span class="sr"&gt;&amp;lt;quote&amp;gt;/g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
    &lt;span class="c1"&gt;// matches and returns everything that matched (this will include the quotes)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;quotesRegex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// we can clear the quotes by slicing the first and last character off the string&lt;/span&gt;
    &lt;span class="c1"&gt;// and since no matches means null, we use the optional chaining here&lt;/span&gt;
    &lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;parseQuotedValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`something "quoted here" not here 'here again'`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// returns: [ 'quoted here', 'here again' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Ok... ok... don't fret now.&lt;/p&gt;

&lt;p&gt;First, the Regex:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(?&amp;lt;quote&amp;gt;["'])&lt;/code&gt; this will match either single or double quotes and give it a name (to easily reference later)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.*?&lt;/code&gt; match anything&lt;/p&gt;

&lt;p&gt;&lt;code&gt;\k&amp;lt;quote&amp;gt;&lt;/code&gt; this will match the same as it did earlier.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;g&lt;/code&gt; so it doesn't stop at the first match&lt;/p&gt;

&lt;p&gt;&lt;a href="https://regex101.com/r/VL4aij/1"&gt;Regex101 will explain it a lot better than me.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Regex alone, using the &lt;code&gt;.match&lt;/code&gt; function would return &lt;code&gt;[ '"quoted here"', '\'here again\'' ]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So we just slice the first and last and there you go!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#finally-the-tags"&gt;
  &lt;/a&gt;
  Finally the tags!
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;parseTagValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tagRegex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\S&lt;/span&gt;&lt;span class="sr"&gt;+:&lt;/span&gt;&lt;span class="se"&gt;\S&lt;/span&gt;&lt;span class="sr"&gt;+/g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tagRegexInclusive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\S&lt;/span&gt;&lt;span class="sr"&gt;*:&lt;/span&gt;&lt;span class="se"&gt;\S&lt;/span&gt;&lt;span class="sr"&gt;*/g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
    &lt;span class="c1"&gt;// matches the quoted values&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tagRegex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// split at the colon (if there were matches)&lt;/span&gt;
    &lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;parseTagValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tag:value something alone: and other:tag :value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// returns: [ [ 'tag', 'value' ], [ 'other', 'tag' ] ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Not so scary right?&lt;/p&gt;

&lt;p&gt;But why two you might ask?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;\S&lt;/code&gt; this matches any non-white space character&lt;/p&gt;

&lt;p&gt;&lt;code&gt;:&lt;/code&gt; matches the colon&lt;/p&gt;

&lt;p&gt;&lt;code&gt;\S&lt;/code&gt; and another match of non-white space&lt;/p&gt;

&lt;p&gt;And the difference between them is:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;+&lt;/code&gt; will match ONE or more of the token&lt;/p&gt;

&lt;p&gt;&lt;code&gt;*&lt;/code&gt; will match ZERO or more of the token&lt;/p&gt;

&lt;p&gt;&lt;a href="https://regex101.com/r/cK81PA/1"&gt;Regex101 to the rescue again.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;+&lt;/code&gt; matches only &lt;code&gt;tag:value&lt;/code&gt; and &lt;code&gt;other:tag&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt; will, in addition to those, also match &lt;code&gt;alone:&lt;/code&gt; and &lt;code&gt;:value&lt;/code&gt;. And for this example, I will just not treat those last two as tags.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#but-that-wont-do"&gt;
  &lt;/a&gt;
  But that won't do...
&lt;/h2&gt;

&lt;p&gt;Some of you might be already expecting this... but let's just show the others:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// let's call MyBasicParser with all the values we used&lt;/span&gt;
&lt;span class="nx"&gt;MyBasicParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s2"&gt;`some random string something "quoted here" not here 'here again' tag:value something alone: and other:tag :value`&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// it returns:&lt;/span&gt;
&lt;span class="cm"&gt;/* 
    [
      [ 'some','random','string','something','"quoted','here"','not','here','\'here','again\'','tag:value','something','alone:','and','other:tag',':value' ],
      [ 'quoted here', 'here again' ],
      [['tag', 'value'], ['other', 'tag']]
    ]
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;OOPS!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-refactoring"&gt;
  &lt;/a&gt;
  The refactoring!
&lt;/h2&gt;

&lt;p&gt;For each piece, I will want to return the string without the part that was parsed.&lt;/p&gt;

&lt;p&gt;I also know that I will want to change the order, because as is it will just parse everything as "single values".&lt;/p&gt;

&lt;p&gt;This also means the order is important, so, I want the quotes to be parsed first.&lt;br&gt;
With the quotes parsed, it will need to parse the tags.&lt;br&gt;
And finally it will parse the rest.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-see-the-code"&gt;
  &lt;/a&gt;
  Let's see the code:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyBasicParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// this now also returns the string after the parsing&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;quotedValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;afterQuotedString&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseQuotedValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// that the next one will use and will give the same&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;tagValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;afterTagString&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseTagValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;afterQuotedString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// this one, being the last, will be the same&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;singleValues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseSingleValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;afterTagString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// I've just changed here so it would return an object &lt;/span&gt;
  &lt;span class="c1"&gt;// too many arrays were being returned and with the order changing... what was what?&lt;/span&gt;
  &lt;span class="c1"&gt;// now, the consumer of the parser will know exactly what is what&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;singleValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;quotedValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tagValues&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I know, I could make it even better, maybe with a Fluent Interface or something... but hey... just an example!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#and-as-for-the-methods"&gt;
  &lt;/a&gt;
  And as for the methods:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;parseSingleValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// I've added here a filter to filter empty string values&lt;/span&gt;
  &lt;span class="c1"&gt;// because as we clean the strings, a lot of spaces will be left there&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// new helper function!&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;tryRegexAndCleanTheString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// take the matches as before&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;regexMatches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// clean the string by simply replacing the match value with an empty string&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cleanedString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;regexMatches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;regexMatches&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cleanedString&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// both are still the same, except that they use the helper function&lt;/span&gt;
&lt;span class="c1"&gt;// then they return an object with the matches (still dealing with each in their own way)&lt;/span&gt;
&lt;span class="c1"&gt;// and the cleaned string for the next step to use&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;parseQuotedValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;quotesRegex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(?&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;quote&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;"'&lt;/span&gt;&lt;span class="se"&gt;])&lt;/span&gt;&lt;span class="sr"&gt;.*&lt;/span&gt;&lt;span class="se"&gt;?\k&lt;/span&gt;&lt;span class="sr"&gt;&amp;lt;quote&amp;gt;/g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;regexMatches&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cleanedString&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tryRegexAndCleanTheString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;quotesRegex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;quotedValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;regexMatches&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="na"&gt;afterQuotedString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cleanedString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;parseTagValues&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tagRegex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\S&lt;/span&gt;&lt;span class="sr"&gt;+:&lt;/span&gt;&lt;span class="se"&gt;\S&lt;/span&gt;&lt;span class="sr"&gt;+/g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;regexMatches&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cleanedString&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tryRegexAndCleanTheString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tagRegex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;tagValues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;regexMatches&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="na"&gt;afterTagString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cleanedString&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-end-result"&gt;
  &lt;/a&gt;
  The end result
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;MyBasicParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="s2"&gt;`some random string something "quoted here" not here 'here again' tag:value something alone: and other:tag :value`&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// it returns:&lt;/span&gt;
&lt;span class="cm"&gt;/* 
    {
      singleValues:  [ 'some','random','string','something','not','here','something','alone:','and',':value' ],
      quotedValues: [ 'quoted here', 'here again' ],
      tagValues: [['tag', 'value'], ['other', 'tag']]
    }
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#the-next-step"&gt;
  &lt;/a&gt;
  The next step
&lt;/h2&gt;

&lt;p&gt;This is but a really, REALLY simple version of my own parser:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/@noriller/easy-filter-parser"&gt;https://www.npmjs.com/package/@noriller/easy-filter-parser&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That I use in:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/@noriller/easy-filter"&gt;https://www.npmjs.com/package/@noriller/easy-filter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that will use the "continuation" of them.&lt;/p&gt;

&lt;p&gt;As for today... that's all!&lt;/p&gt;

&lt;p&gt;Next time we will be doing a basic version of the filter!&lt;/p&gt;




&lt;p&gt;&lt;a href="https://buymeacoffee.com/noriller"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2bcfUlP1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/doa0qgukkst0ykgbtepb.png" alt="Buy Me A Coffe"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@melwasser?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Melanie Wasser&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fear?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt; and badly edited by yours truly.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>codenewbie</category>
      <category>showdev</category>
    </item>
    <item>
      <title>CSS Layouts: History from Float to Flexbox and Grid </title>
      <author>Diana Le</author>
      <pubDate>Sun, 17 Oct 2021 22:23:55 +0000</pubDate>
      <link>https://dev.to/dianale_dev/css-layouts-history-from-float-to-flexbox-and-grid-5af7</link>
      <guid>https://dev.to/dianale_dev/css-layouts-history-from-float-to-flexbox-and-grid-5af7</guid>
      <description>&lt;p&gt;CSS layouts have changed significantly within the past several years due to flexbox and to grid. In order to bridge the gap between developers who started before this modern era (such as myself), and between developers starting now (who are wondering what &lt;code&gt;clearfix&lt;/code&gt; is), let's take a look at solutions we did in the past and how they compare to the (much easier and more versatile) methods of today. Although it's unlikely anyone new to development is using the older methods, you will still encounter these layouts if you work on older sites.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Special shoutout to Rachel Andrew, Jen Simmons, CSS Tricks, MDN and Scrimba for providing so many online resources and books on this topic&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Originally &lt;a href="https://codepen.io/pursuitofleisure/post/css-layouts-2019"&gt;posted on Codepen&lt;/a&gt; on Nov 24, 2019.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-past-present-and-future"&gt;
  &lt;/a&gt;
  The Past, Present and Future
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#pre-dawn"&gt;Pre-Dawn Layouts (No CSS / Tables)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hacks"&gt;The Age of Floats and Hacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#modern"&gt;The Modern Era of Flex and Grid&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#flex-vs-grid"&gt;When to use Flex vs Grid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#flexbox"&gt;Flex and Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#grid"&gt;Grid and Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#supercombo"&gt;Supercombo of Flex AND Grid&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#other"&gt;Other Layout Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#backwards"&gt;Backwards Compatibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#more-info"&gt;More Information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#predawn-no-css-tables"&gt;
  &lt;/a&gt;
  Pre-Dawn (No CSS / Tables) &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Before we had CSS, all the "styling" was done using HTML because there was no way to separate it. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Document flow - order of elements in the HTML&lt;/li&gt;
&lt;li&gt;Tables for layout

&lt;ul&gt;
&lt;li&gt;No separation of content and presentation&lt;/li&gt;
&lt;li&gt;Complicated / time-consuming to update&lt;/li&gt;
&lt;li&gt;Not responsive&lt;/li&gt;
&lt;li&gt;Not semantically correct use of &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; tags&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I've had to modify my fair share of web sites built entirely with tables, and it was quite unpleasant. At one point in order to accomplish the design on a site I didn't build, I stuck a complete &lt;code&gt;div&lt;/code&gt; within a &lt;code&gt;td&lt;/code&gt; cell. (I wasn't proud but it worked and passed W3C validation!)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-age-of-floats-and-hacks"&gt;
  &lt;/a&gt;
  The Age of Floats and Hacks &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Floats were initially designed to wrap text around an image or other element. Then some really smart developers figured out a way to hack this tool to make multiple-column layouts by setting widths of floats within a container.&lt;/p&gt;

&lt;p&gt;Float works well for columns with equal height: &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pursuitofleisure/embed/WNNdVQQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Unfortunately float does &lt;strong&gt;not&lt;/strong&gt; stack well when columns have different heights. In the example above, because the 2nd card is longer, it blocks the 4th card from being able to form a new row directly below the 1st card.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pursuitofleisure/embed/qBBpebY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The solution was to add a wrapper around each row with clearfix in HTML. This makes each row its own container:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pursuitofleisure/embed/QWWaeEN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Bootstrap 3’s grid system follows this logic:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rows have negative margins on both left and right sides to account for left/right padding of floated divs&lt;/li&gt;
&lt;li&gt;This method doesn't work well with dynamic content or when you don't know how many items will be in each row&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is no easy way to vertically align content when the elements are floated.&lt;/p&gt;

&lt;p&gt;An alternative method that &lt;strong&gt;does&lt;/strong&gt; allow vertical alignment is inline-blocks:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pursuitofleisure/embed/YzzYmGd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;However there are complications with using inline-block elements for layout:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inline elements contain properties of both &lt;code&gt;block&lt;/code&gt; and &lt;code&gt;inline&lt;/code&gt;, which means you can set a width (because of the &lt;code&gt;block&lt;/code&gt; property) but items that are &lt;code&gt;inline-block&lt;/code&gt; always preserve horizontal white space in order to maintain spaces between words (because of the &lt;code&gt;inline&lt;/code&gt; property)&lt;/li&gt;
&lt;li&gt;This means there is always an inherent margin between items&lt;/li&gt;
&lt;li&gt;You either need to zero out the margin or make sure widths never add up to 100%&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-do-i-get-my-heights-to-match"&gt;
  &lt;/a&gt;
  How do I get my heights to match???
&lt;/h3&gt;

&lt;p&gt;Neither floats nor inline-block force the elements to be same height.&lt;/p&gt;

&lt;p&gt;Let's make everything a table again?&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pursuitofleisure/embed/qBBxBRr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;None of these solutions are ideal and/or require a combination of different CSS properties. I started out my career using floats and got pretty good at it, but after avoiding using it at all the past couple of years, I don't miss it at all.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-modern-era-flex-and-grid"&gt;
  &lt;/a&gt;
  The Modern Era - Flex and Grid &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Flexbox and grid are modern solutions to the previous issues we had with layout methods. Both layouts have their specialties but let's clear up some things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Flexbox was implemented first&lt;/li&gt;
&lt;li&gt;The addition of grid does &lt;strong&gt;not&lt;/strong&gt; make flex obsolete. Some things you can do in flex that you cannot do in grid&lt;/li&gt;
&lt;li&gt;There is overlap in which both can be used to achieve the same visual effect&lt;/li&gt;
&lt;li&gt;If you can, use the right one to take advantage of its unique inherent features&lt;/li&gt;
&lt;li&gt;You can use both of them to accomplish things neither can do by itself&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use-flex-vs-grid"&gt;
  &lt;/a&gt;
  When to use Flex vs Grid &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#use-flex-when"&gt;
  &lt;/a&gt;
  Use Flex when:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Content is priority&lt;/li&gt;
&lt;li&gt;Need horizontal or vertical alignment&lt;/li&gt;
&lt;li&gt;Layout is one-dimensional&lt;/li&gt;
&lt;li&gt;Need better older browser support (but use prefixes!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#use-grid-when"&gt;
  &lt;/a&gt;
  Use Grid when:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Things need a set width regardless of content&lt;/li&gt;
&lt;li&gt;Need two-dimensional layout (items in one row or column need to align with the item in the previous row or column)&lt;/li&gt;
&lt;li&gt;Elements need to overlap&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The terms one-dimensional vs. two-dimensional are very confusing if you're completely new to these layout methods, because you &lt;em&gt;can&lt;/em&gt; have multiple rows or columns using flexbox, and you &lt;em&gt;can&lt;/em&gt; only use grid for one row or column only.&lt;/p&gt;

&lt;p&gt;Because flex only considers one direction at a time, I think of flex as forgetting what it did previously. If you have 2 rows of items using flex, once you get to the 2nd row, flexbox doesn't remember what it did in row 1. It follows the flex properties that are set; if this happens to cause the items in row 2 to align with the items in row 1, that just happens to be the case that they are all the same width. It doesn't necessarily have to line up.&lt;/p&gt;

&lt;p&gt;With grid, think of a Connect Four game board. You can drop the plastic tokens and line up multiple red pieces together to form one big red section, or giant blue sections, but the pieces must &lt;em&gt;always&lt;/em&gt; slot within the row and columns. Nothing can ever fill half a row or column.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flexbox"&gt;
  &lt;/a&gt;
  Flexbox &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Content-driven&lt;/li&gt;
&lt;li&gt;Enables easier vertical and horizontal alignment&lt;/li&gt;
&lt;li&gt;Allows children to "flex", "either growing to fill unused space or shrinking to avoid overflowing the parent" - W3&lt;/li&gt;
&lt;li&gt;Only considers one direction (row or column) and only processes one at a time&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;You CAN set widths on flex items but if you're setting widths on everything in the flex container, you aren't taking advantage of flex and should use grid instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Flexbox is a savior when it comes to vertically aligning things within a container. Previous methods I would use commonly were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Setting line-height equal to the height of the container (and thus blowing up if text ever wrapped to multiple lines)&lt;/li&gt;
&lt;li&gt;Creating a wrapper around the item and using a combination of &lt;code&gt;display: table&lt;/code&gt; and &lt;code&gt;display: table-cell&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;transform: translateY()&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#flexbox-examples"&gt;
  &lt;/a&gt;
  Flexbox Examples
&lt;/h4&gt;

&lt;p&gt;Let's look at the default Flex settings and compare with different values for flex-grow and flex-shrink:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pursuitofleisure/embed/KKKoRKP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Remember when we couldn't do both equal-height containers and vertical alignment? We can with flexbox:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pursuitofleisure/embed/OJJgGPg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Playing around with flex-grow and flex-shrink can allow us to fill the row if we don't have an equal number of items per row. This is an example of flex forgetting what it did previously; it only obeys the content-sizing rules you have set up.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pursuitofleisure/embed/mddowVm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here are two simple navigation bars using flex, which is a good example of what flex is inherently good at versus grid. Each flex item extends to the width of the content; grid would not be useful here. The first groups links to the left and aligns one to the very right to separate it:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pursuitofleisure/embed/ZEzggja?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The second navigation bar allows all items to be equally spaced when we don't know how many links or how long the link names will be. This wasn't hard to do using floats or inline-block; it just required manually updating the margins every time a new item got added or the text was updated:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pursuitofleisure/embed/MWWmOoB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Finally here's a masonry-type gallery we can build with flex. We wouldn't be able to accomplish this exactly with grid because everything using grid would have to align to both the horizontal and vertical tracks set up:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pursuitofleisure/embed/yLBMbdJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grid"&gt;
  &lt;/a&gt;
  Grid &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Grid is the first CSS module designed specifically for layouts - something we've been lacking ever since CSS was created.&lt;/p&gt;

&lt;p&gt;Grid can handle both rows and columns, meaning that it will always align items to the horizontal and vertical tracks you have set up. Grid is mostly defined on the container, not the children as it is with flexbox.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#grid-examples"&gt;
  &lt;/a&gt;
  Grid Examples
&lt;/h4&gt;

&lt;p&gt;Here's a basic non-responsive layout using fractional units. Notice how much shorter the code is versus the previous methods.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pursuitofleisure/embed/xxxpvGY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Note that this same layout can be accomplished with flexbox as well as long as you set the width property on all the flex children. This will cause them to neither grow nor shrink (or flex) anymore, which means you are no longer taking advantage of the inherent properties of flex. It's still better than using floats or inline-block, but if you are able to use grid in this scenario, then that is a better case for grid.&lt;/p&gt;

&lt;p&gt;Here's a responsive layout using auto-fit and repeat. Notice the lack of media queries:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pursuitofleisure/embed/eYYXWrP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here's the same idea except for a photo gallery. Notice that there is a fallback for older browsers that do not support grid by using a feature query:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pursuitofleisure/embed/qBWxKNp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#advanced-grid-examples"&gt;
  &lt;/a&gt;
  Advanced Grid Examples
&lt;/h4&gt;

&lt;p&gt;We can control the exact location of items by specifying the row/column numbers and where they start/end. This method can be confusing if you are used to other programming languages where arrays start at 0. With grid, the lines each start at 1 instead. I would highly recommend using Firefox or Chrome's Developer Tools to easily debug these layouts:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pursuitofleisure/embed/BaBdqOJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here's the exact same layout, but instead of using grid and row numbers, we are using named areas instead:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pursuitofleisure/embed/GRKvbpy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Because we can control the exact size of items using column and row spans, we can create a variation of the flex masonry gallery above using the grid property &lt;code&gt;grid-auto-flow: dense&lt;/code&gt;. Note that this rearranges items differently than how they were laid out in the html source order.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pursuitofleisure/embed/qBWxKNp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#supercombo-of-flex-and-grid"&gt;
  &lt;/a&gt;
  Supercombo of Flex AND Grid &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pursuitofleisure/embed/GRREJKX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This layout uses grid to align the cards and make them &lt;strong&gt;equal&lt;/strong&gt; heights across all the rows (finally!). Flexbox is then used to align the button to the bottom of every card. It seems simple now but this was one of the most &lt;em&gt;frustrating&lt;/em&gt; experiences I had using floats; I would have to set &lt;code&gt;min-height&lt;/code&gt; and hope that the content never fluctuated wildly afterwards, but this means needing to change the height multiple times using media queries.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-layout-methods"&gt;
  &lt;/a&gt;
  Other Layout Methods &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;As awesome as they are, flexbox and grid don't make every previous method obsolete. The document flow of the HTML is still the OG layout. We're probably not going to &lt;code&gt;display: grid&lt;/code&gt; on the body tag. Other layout methods are still fine too provided we use them for their &lt;strong&gt;actual purpose&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use floats to wrap items around another item (ex: text wrapping around an image)&lt;/li&gt;
&lt;li&gt;Use tables for tabular data (this is better semantically as well)&lt;/li&gt;
&lt;li&gt;Use position: absolute / fixed / sticky for any element that must be taken out of the HTML flow&lt;/li&gt;
&lt;li&gt;Use multi-column layout for flowing continuous content&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#backwards-compatibility"&gt;
  &lt;/a&gt;
  Backwards Compatibility &lt;a&gt;&lt;/a&gt;&lt;a&gt;
&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#but-what-about-outdated-browser"&gt;
  &lt;/a&gt;
  But what about [outdated browser]?
&lt;/h3&gt;

&lt;p&gt;Flexbox and grid are only fully supported in modern browsers. Internet Explorer 10 supports flexbox with caveats around some properties (particularly the flex shorthand), and IE11 has its own prefixes for grid and doesn't support all the other properties. As of 2021, you probably don't have to support IE much anymore.&lt;/p&gt;

&lt;p&gt;I used to find coding web pages for older browsers to be a giant pain, especially IE9 and below. It can still be frustrating occasionally, but recently I've subscribed to the idea that websites should always be as backwards-compatible as they can be because that was the entire purpose of the web. Web sites are not applications in terms of being versioned and then failing to run completely if your browser is too old. They should always be accessible as possible.&lt;/p&gt;

&lt;p&gt;What I was doing wrong when I was testing in IE was trying to match the design exactly across every single desktop browser. Then I kept hearing about the idea: why does the site have to look exactly the same in IE8 vs modern browsers? We already have different experiences for mobile and tablet, and even the same browser will render slightly differently on different computers.&lt;/p&gt;

&lt;p&gt;If your client's users are mainly IE11, then yeah you shouldn't be doing everything in grid. Ideally the design would keep that in mind as well. But if we're working off designs that are based on modern browsers, then we should use modern methods &lt;strong&gt;but&lt;/strong&gt; make sure that these still look and function well in all the older browsers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#layout-comparison"&gt;
  &lt;/a&gt;
  Layout Comparison
&lt;/h3&gt;

&lt;p&gt;Let's take the same simple 3 boxes layout that we started with at the beginning and look at how they compare across floats, flex and grid:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pursuitofleisure/embed/WNNwZeK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Notice that the float method doesn't make the items equal heights - not unless you add a &lt;code&gt;min-height&lt;/code&gt; and even then if the content in one of those boxes gets longer you're back to square one. Maybe that's okay for older browsers; maybe they won't get that nice polish of having beautifully aligned buttons, but the content and images and order are still presented in the same manner and everything is still readable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resilient-css"&gt;
  &lt;/a&gt;
  Resilient CSS
&lt;/h3&gt;

&lt;p&gt;I really like the term "resilient CSS" by Jen Simmons. The site's CSS should use the cascade properly in terms of failing and overriding. CSS properties not understood by the browser will just not run and skip to the next line.&lt;/p&gt;

&lt;p&gt;Knowing this we can arrange our CSS in a way to maximize compatibility. If we use feature queries, we need to take into account that modern browsers will run all the CSS, including the ones we intend for older browsers. So if we set a width first on a CSS property for older browsers (let's say we're using &lt;code&gt;display: inline-block&lt;/code&gt;), and we intend to use grid on that same element for modern browsers, we would need to override that width property within the feature query because the modern browser will run everything. We have to be sure to 'cancel' out or undo the other CSS.&lt;/p&gt;

&lt;p&gt;Look back at this example to see what what I'm talking about:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pursuitofleisure/embed/GRREJKX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;So double-edged sword, browser compatibility can be frustrating but I appreciate that everyone can still view web sites from 20 years ago and that this is one of the reasons the web is so special. I have had discussions with coworkers on why even jump to these newer methods so soon if we have to spend more time and write additional CSS to account for older browsers,&lt;/p&gt;

&lt;p&gt;It's going to be personal preference as a developer - how much do you want to fit the site within the budget versus your long-term growth in web development. But that is the nature of the web development, things change constantly and it's hard to keep up with everything, but these CSS layout methods are so &lt;strong&gt;fundamentally different&lt;/strong&gt; and better than the tools we've used before. As flexbox and grid continue to add new properties, the investment in learning these new methods will pay off and make the web better in the future.&lt;/p&gt;

&lt;p&gt;If we use newer methods, we can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keep up with web development field&lt;/li&gt;
&lt;li&gt;Build more complicated layouts more easily&lt;/li&gt;
&lt;li&gt;Make sites easier to maintain in the future&lt;/li&gt;
&lt;li&gt;Still maintain backwards compatibility for older browsers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Start using newer methods gradually and browser test components and you'll be on your way to awesome new designs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-information"&gt;
  &lt;/a&gt;
  More Information &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;The New CSS Layout&lt;/strong&gt; by Rachel Andrew&lt;/li&gt;
&lt;li&gt;Complete Guide to Flexbox: &lt;a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/"&gt;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Complete Guide to Grid: &lt;a href="https://css-tricks.com/snippets/css/complete-guide-grid/"&gt;https://css-tricks.com/snippets/css/complete-guide-grid/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;What’s the Difference between Flex and Grid: &lt;a href="https://css-tricks.com/quick-whats-the-difference-between-flexbox-and-grid/"&gt;https://css-tricks.com/quick-whats-the-difference-between-flexbox-and-grid/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;IE and grid: &lt;a href="https://rachelandrew.co.uk/archives/2018/07/17/should-i-try-to-use-the-ie-version-of-grid-layout-revisited-for-2018/"&gt;https://rachelandrew.co.uk/archives/2018/07/17/should-i-try-to-use-the-ie-version-of-grid-layout-revisited-for-2018/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/CSS_Grid_and_Progressive_Enhancement"&gt;CSS Grid Layout and Progressive Enhancement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Layout Land: &lt;a href="https://www.youtube.com/watch?v=FEnRpy9Xfes&amp;amp;list=PLbSquHt1VCf1x_-1ytlVMT0AMwADlWtc1"&gt;https://www.youtube.com/watch?v=FEnRpy9Xfes&amp;amp;list=PLbSquHt1VCf1x_-1ytlVMT0AMwADlWtc1&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Resilient CSS series: &lt;a href="https://www.youtube.com/watch?v=u00FY9vADfQ"&gt;https://www.youtube.com/watch?v=u00FY9vADfQ&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#free-lessons-and-tools"&gt;
  &lt;/a&gt;
  Free Lessons and Tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Quick screencast videos: &lt;a href="https://scrimba.com/"&gt;https://scrimba.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Flexbox game: &lt;a href="https://flexboxfroggy.com/"&gt;https://flexboxfroggy.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Grid generator: &lt;a href="https://cssgrid-generator.netlify.com/"&gt;https://cssgrid-generator.netlify.com/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>frontend</category>
    </item>
    <item>
      <title>hacktoberfest</title>
      <author>domonic</author>
      <pubDate>Sun, 17 Oct 2021 22:20:58 +0000</pubDate>
      <link>https://dev.to/domonic/hacktoberfest-4g9g</link>
      <guid>https://dev.to/domonic/hacktoberfest-4g9g</guid>
      <description>&lt;p&gt;hacktoberfest is a site where you join up and if you can push a fix to 4 repos on gihub that have bene labled with 'hacktoberfest' on them. apparently you can get a free t-shirt. So if you have a repo in hacktoberfest post it here.&lt;/p&gt;

</description>
      <category>python</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>JavaScript Array .map() vs .forEach()</title>
      <author>Brett Martin</author>
      <pubDate>Sun, 17 Oct 2021 21:49:13 +0000</pubDate>
      <link>https://dev.to/bamartindev/javascript-array-map-vs-foreach-2257</link>
      <guid>https://dev.to/bamartindev/javascript-array-map-vs-foreach-2257</guid>
      <description>&lt;p&gt;&lt;em&gt;originally published @ &lt;a href="https://www.catstache.io/blog/array-map-foreach"&gt;CatStach.io&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When working with arrays of data, it can be a bit confusing when you should reach for &lt;code&gt;map&lt;/code&gt; or &lt;code&gt;forEach&lt;/code&gt;, so in this post I hope to help clear that up!  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;tldr: use &lt;code&gt;map&lt;/code&gt; if you want to make transformations to the data, use &lt;code&gt;forEach&lt;/code&gt; if you want to perform side effects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lets imagine we have an array of store items that we would like to work with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;storeItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sunglasses&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;15.00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;memberDiscount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Flip flops&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;50.00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;memberDiscount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sunscreen&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;5.99&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;memberDiscount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#mapping"&gt;
  &lt;/a&gt;
  Mapping
&lt;/h2&gt;

&lt;p&gt;Say we wanted to use this data, but we wanted to modify the items to have all their names uppercase:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uppercaseItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;storeItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()};&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="cm"&gt;/*
[
  { name: 'SUNGLASSES', price: 15.00, memberDiscount: true},
  { name: 'FLIP FLOPS', price: 50.00, memberDiscount: true},
  { name: 'SUNSCREEN', price: 5.99, memberDiscount: false}
]
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above function will return a new array with modified names, and it WONT update the storeItems array so that will continue to hold the initial values. &lt;/p&gt;

&lt;p&gt;For another example, what if we wanted to modify the price based on if there is a member discount, and the person currently viewing the data is a member.  We could write the following function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;applyMemberDiscounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isMember&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;memberDiscount&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isMember&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;discounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;applyMemberDiscounts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;storeItems&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cm"&gt;/*
[
  { name: 'Sunglasses', price: 12.00, memberDiscount: true},
  { name: 'Flip flops', price: 40.00, memberDiscount: true},
  { name: 'Sunscreen', price: 5.99, memberDiscount: false}
]
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For a final example, I'll talk about how I use map when rendering React components.  If I had some component, &lt;code&gt;&amp;lt;StoreItem&amp;gt;&lt;/code&gt; that took all the values and made them look pretty, I would display them by building all the components and storing them in a new array, then later in the JSX I can just pass the array as children.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;comps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;storeItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;StoreItem&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;)
&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="c1"&gt;// In component return&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;comps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can probably start to imagine how you would use this in your code now - basically if you want to &lt;strong&gt;transform&lt;/strong&gt; your data, and keep a copy of the old data, use map!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-foreach"&gt;
  &lt;/a&gt;
  Using forEach
&lt;/h2&gt;

&lt;p&gt;The cases where you would want to use forEach would fall under "side effect" scenarios.  I pretty much only use &lt;code&gt;forEach&lt;/code&gt; where I don't care about the result of the function that is being applied to the array elements. If you have some logging function (or in the simplest example &lt;code&gt;console.log&lt;/code&gt;), the result of applying that function to the value is generally uninteresting, so &lt;code&gt;forEach&lt;/code&gt; works well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;storeItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: $&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or, if you have some sort of action dispatching system where you dont care about the result of dispatching, you could take some array of actions and use &lt;code&gt;forEach&lt;/code&gt; to dispatch them all.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;firstAction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;secondAction&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you find yourself writing code like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;storeItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I would highly suggest you swap to using &lt;code&gt;map&lt;/code&gt; instead.  While the above is code that will compile and work, it is transforming the original dataset, and that can cause bugs that are difficult to track down!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Both &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;forEach&lt;/code&gt; have their place when working with arrays of data.  If you are wanting to make transformation to the data, reach for &lt;code&gt;map&lt;/code&gt;.  If you are looking to do effectful computations based on the data without modifying it, reach for &lt;code&gt;forEach&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;I hope this helped in identifying the right tool for the job at hand!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Adding CSS to HTML Lists</title>
      <author>Charity Parks</author>
      <pubDate>Sun, 17 Oct 2021 20:37:52 +0000</pubDate>
      <link>https://dev.to/charityparks/adding-css-to-html-lists-275c</link>
      <guid>https://dev.to/charityparks/adding-css-to-html-lists-275c</guid>
      <description>&lt;p&gt;CSS properties can control the appearance of HTML elements. Such properties can add backgrounds to parts or to all of your webpage. The CSS properties can put borders around some of your content, or change the style of bullet points. &lt;/p&gt;

&lt;p&gt;If you have a HTML list you want to style with CSS, you can do something like the following:&lt;/p&gt;

&lt;p&gt;(HTML code)&lt;br&gt;
&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;Favorite Music Groups&lt;code&gt;&amp;lt;/h1&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;Rascal Flatts&lt;code&gt;&amp;lt;/li&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;Little Big Town&lt;code&gt;&amp;lt;/li&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;li&amp;gt;&lt;/code&gt;Restless Heart&lt;code&gt;&amp;lt;/li&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;Little Feat&lt;code&gt;&amp;lt;/li&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;The Beatles&lt;code&gt;&amp;lt;/li&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;Lady A&lt;code&gt;&amp;lt;/li&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;/ol&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It would look like this:&lt;/p&gt;

&lt;h1&gt;Favorite Music Groups&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Rascal Flatts&lt;/li&gt;
&lt;li&gt;Little Big Town&lt;/li&gt;
&lt;li&gt;Restless Heart&lt;/li&gt;
&lt;li&gt;Little Feat&lt;/li&gt;
&lt;li&gt;The Beatles&lt;/li&gt;
&lt;li&gt;Lady A&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now add CSS.&lt;/p&gt;

&lt;p&gt;ol &lt;code&gt;{&lt;br&gt;
list-style-type: lower-roman;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It would look like this:&lt;/p&gt;

&lt;h1&gt;Favorite Music Groups&lt;/h1&gt;

&lt;p&gt;i. Rascal Flatts&lt;br&gt;
ii. Little Big Town &lt;br&gt;
iii. Restless Heart&lt;br&gt;
iv. Little Feat&lt;br&gt;
v. The Beatles&lt;br&gt;
vi. Lady A&lt;/p&gt;

&lt;p&gt;There are a lot of CSS properties to choose from to change the style of your HTML elements! &lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Weekly Digest 41/2021</title>
      <author>Marco Biedermann</author>
      <pubDate>Sun, 17 Oct 2021 20:04:07 +0000</pubDate>
      <link>https://dev.to/marcobiedermann/weekly-digest-412021-4e9e</link>
      <guid>https://dev.to/marcobiedermann/weekly-digest-412021-4e9e</guid>
      <description>&lt;p&gt;Welcome to my Weekly Digest #41 of this year.&lt;/p&gt;

&lt;p&gt;This weekly digest contains a lot of interesting and inspiring articles, videos, tweets, and designs I consumed during this week.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interesting-articles-to-read"&gt;
  &lt;/a&gt;
  Interesting articles to read
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#storybook-ondemand-architecture"&gt;
  &lt;/a&gt;
  Storybook on-demand architecture
&lt;/h3&gt;

&lt;p&gt;3x smaller builds &amp;amp; faster load times for built Storybooks&lt;/p&gt;

&lt;p&gt;&lt;a href="https://storybook.js.org/blog/storybook-on-demand-architecture/"&gt;Storybook on-demand architecture&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#smart-css-solutions-for-common-ui-challenges"&gt;
  &lt;/a&gt;
  Smart CSS Solutions For Common UI Challenges
&lt;/h3&gt;

&lt;p&gt;Writing CSS has probably never been more fun and exciting than it is today. In this post we’ll take a look at common problems and use cases we all have to face in our work and how to solve them with modern CSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.smashingmagazine.com/2021/10/modern-css-solutions-for-common-problems/"&gt;Smart CSS Solutions For Common UI Challenges - Smashing Magazine&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-great-videos-i-watched-this-week"&gt;
  &lt;/a&gt;
  Some great videos I watched this week
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#dart-in-100-seconds"&gt;
  &lt;/a&gt;
  Dart in 100 Seconds
&lt;/h3&gt;

&lt;p&gt;Dart is high-productivity statically-typed programming language capable of targeting multiple platforms. It's used by Flutter to produce fast client apps with an awesome developer experience.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/NrO0CJCbYLA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/fireship_dev"&gt;Fireship&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chrome-95-whats-new-in-devtools"&gt;
  &lt;/a&gt;
  Chrome 95 - What’s New in DevTools
&lt;/h3&gt;

&lt;p&gt;New CSS length authoring tools, hide issues in the Issues tab, improved the display of properties, and more.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/T_Ppg7ghrWM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/ChromiumDev"&gt;Google Chrome Developers&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vector-dot-product"&gt;
  &lt;/a&gt;
  Vector Dot Product
&lt;/h3&gt;

&lt;p&gt;This video covers the dot product and scalar projection with p5.js and vectors, concepts that Daniel will need for finding the distance between a point and a line which will lead to the path following steering behavior in the next video!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/DHPfoqiE4yQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/shiffman"&gt;Daniel Shiffman&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thinking-on-ways-to-solve-multiselect"&gt;
  &lt;/a&gt;
  Thinking on ways to solve multi-select
&lt;/h3&gt;

&lt;p&gt;In today's GUI challenge I share my thinking on a way to enable users to multi-select. To demonstrate multi-select I've prepared a filterable grid which accepts input from both a -select multiple- and a set of -fieldset- elements. Two multi-select methods yep, each tailored for their use case.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/x0aCdLDZ8BM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/argyleink"&gt;Adam Argyle&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-es-modules-on-codepen"&gt;
  &lt;/a&gt;
  Using ES Modules on CodePen
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt;! They seem like such simple things, but having them in the native language of JavaScript is very powerful. CodePen tries to be helpful with them, and in conjunction with services like Skypack, there is an awful lot you can do.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/FmOGSlWpCaQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/CodePen"&gt;CodePen&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useful-github-repositories"&gt;
  &lt;/a&gt;
  Useful GitHub repositories
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#awesome-new"&gt;
  &lt;/a&gt;
  Awesome New
&lt;/h3&gt;

&lt;p&gt;A list of &lt;code&gt;.new&lt;/code&gt; domains to perform online actions in one quick action.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/yjose"&gt;
        yjose
      &lt;/a&gt; / &lt;a href="https://github.com/yjose/awesome-new"&gt;
        awesome-new
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A list of `.new` domains to perform online actions in one quick action.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;A list of &lt;code&gt;.new&lt;/code&gt; domain to perform online actions in one quick step.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://doc.new" rel="nofollow"&gt;Doc.new&lt;/a&gt; : New Google Doc.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://sheet.new" rel="nofollow"&gt;Sheet.new&lt;/a&gt; : New Google sheet.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://slide.new" rel="nofollow"&gt;Slide.new&lt;/a&gt; : New Google Slide.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://form.new" rel="nofollow"&gt;Form.new&lt;/a&gt; : New Google form.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://meet.new" rel="nofollow"&gt;Meet.new&lt;/a&gt; : New video call with Google Meet.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://meeting.new" rel="nofollow"&gt;Meeting.new&lt;/a&gt; : New Google Calendar event.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cal.new" rel="nofollow"&gt;Cal.new&lt;/a&gt; : New Google Calendar event.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://keep.new" rel="nofollow"&gt;Keep.new&lt;/a&gt; : New Google note.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://site.new" rel="nofollow"&gt;Site.new&lt;/a&gt; : New Google Site.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://next.new" rel="nofollow"&gt;Next.new&lt;/a&gt; : New NextJS project using stackblitz.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://node.new" rel="nofollow"&gt;Node.new&lt;/a&gt; : New Node.js Project using stackblitz.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://react.new" rel="nofollow"&gt;React.new&lt;/a&gt; : New React project using codeSandbox.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ts.new" rel="nofollow"&gt;Ts.new&lt;/a&gt; : New Typescript project using codeSandbox.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://js.new" rel="nofollow"&gt;Js.new&lt;/a&gt; : New Javascript project using codeSandbox.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://vue.new" rel="nofollow"&gt;Vue.new&lt;/a&gt; : New Vue project using codeSandbox.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nuxt.new" rel="nofollow"&gt;Nuxt.new&lt;/a&gt; : New Nuxt project using codeSandbox.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ng.new" rel="nofollow"&gt;Ng.new&lt;/a&gt; : New Angular project using codeSandbox.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://csb.new" rel="nofollow"&gt;Csb.new&lt;/a&gt; : New codeSandbox project.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://pen.new" rel="nofollow"&gt;Pen.new&lt;/a&gt; : New codePen project.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://repo.new" rel="nofollow"&gt;Repo.new&lt;/a&gt; : New Github repo.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://gist.new" rel="nofollow"&gt;Gist.new&lt;/a&gt; : New Github gist.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://story.new" rel="nofollow"&gt;Story.new&lt;/a&gt; : New Medium story.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://design.new" rel="nofollow"&gt;Design.new&lt;/a&gt; : New Canva design.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://link.new" rel="nofollow"&gt;Link.new&lt;/a&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/yjose/awesome-new"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#swcnode"&gt;
  &lt;/a&gt;
  swc-node
&lt;/h3&gt;

&lt;p&gt;Fast TypeScript/JavaScript transformer without &lt;code&gt;node-gyp&lt;/code&gt; and &lt;code&gt;postinstall&lt;/code&gt; script.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Brooooooklyn"&gt;
        Brooooooklyn
      &lt;/a&gt; / &lt;a href="https://github.com/Brooooooklyn/swc-node"&gt;
        swc-node
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Faster ts-node without typecheck
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;code&gt;swc-node&lt;/code&gt;
&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;🚀 Help me to become a full-time open-source developer by &lt;a href="https://github.com/sponsors/Brooooooklyn"&gt;sponsoring me on Github&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Fast &lt;code&gt;TypeScript/JavaScript&lt;/code&gt; transformer without &lt;code&gt;node-gyp&lt;/code&gt; and postinstall script&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;
  &lt;a href="https://github.com/Brooooooklyn/swc-node/actions"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Of9P1No_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Brooooooklyn/swc-node/workflows/CI/badge.svg" alt="Build Status"&gt;&lt;/a&gt;
  &lt;a href="https://npmcharts.com/compare/@swc-node/core?minimal=true" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/83e973f70d2e8c94be30186dea87caf95d5daea4fb833c19df86a71f3d75af54/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f407377632d6e6f64652f636f72652e7376673f73616e6974697a653d74727565" alt="Downloads"&gt;&lt;/a&gt;
  &lt;a href="https://github.com/Brooooooklyn/swc-node/blob/master/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/d053f2858071a667a1e73f0fe76b43652244410852928d896546202c970c2736/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f6c2f407377632d6e6f64652f636f72652e7376673f73616e6974697a653d74727565" alt="License"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
Support matrix&lt;/h2&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;node10&lt;/th&gt;
&lt;th&gt;node12&lt;/th&gt;
&lt;th&gt;node14&lt;/th&gt;
&lt;th&gt;node16&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Windows x64&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Windows x32&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Windows arm64&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;macOS x64&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;macOS arm64&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Linux x64 gnu&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Linux x64 musl&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Linux arm gnueabihf&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Linux arm64 gnu&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Linux arm64 musl&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Android arm64&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FreeBSD x64&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
@swc-node/core&lt;/h2&gt;
&lt;p&gt;Fastest &lt;code&gt;TypeScript&lt;/code&gt; transformer.&lt;/p&gt;
&lt;p&gt;Detail: &lt;a href="https://github.com/Brooooooklyn/swc-node./packages/core"&gt;@swc-node/core&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Benchmark&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;transform RxJS &lt;code&gt;AjaxObservable.ts&lt;/code&gt; to ES2015 &amp;amp; CommonJS &lt;code&gt;JavaScript&lt;/code&gt;. Benchmark code: &lt;a href="https://github.com/Brooooooklyn/swc-node./bench/index.js"&gt;bench&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hardware info&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;
&lt;pre&gt;&lt;code&gt;Model Name: MacBook Pro
Model Identifier: MacBookPro15,1
Processor Name: 6-Core Intel Core i7
Processor Speed: 2.6 GHz
Number of Processors: 1&lt;/code&gt;&lt;/pre&gt;…&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Brooooooklyn/swc-node"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#bootstrap-icons"&gt;
  &lt;/a&gt;
  Bootstrap Icons
&lt;/h3&gt;

&lt;p&gt;Official open source SVG icon library for Bootstrap with over 1,400 icons.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/twbs"&gt;
        twbs
      &lt;/a&gt; / &lt;a href="https://github.com/twbs/icons"&gt;
        icons
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Official open source SVG icon library for Bootstrap.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a href="https://v5.getbootstrap.com/" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/bec2c92468d081617cb3145a8f3d8103e268bca400f6169c3a68dc66e05c971e/68747470733a2f2f76352e676574626f6f7473747261702e636f6d2f646f63732f352e302f6173736574732f6272616e642f626f6f7473747261702d6c6f676f2d736861646f772e706e67" alt="Bootstrap logo" width="200" height="165"&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;h3&gt;
Bootstrap Icons&lt;/h3&gt;
&lt;p&gt;
  Official open source SVG icon library for Bootstrap with over 1,400 icons
  &lt;br&gt;
  &lt;a href="https://icons.getbootstrap.com/" rel="nofollow"&gt;&lt;strong&gt;Explore Bootstrap Icons »&lt;/strong&gt;&lt;/a&gt;
  &lt;br&gt;
  &lt;br&gt;
  &lt;a href="https://getbootstrap.com/" rel="nofollow"&gt;Bootstrap&lt;/a&gt;
  ·
  &lt;a href="https://themes.getbootstrap.com/" rel="nofollow"&gt;Themes&lt;/a&gt;
  ·
  &lt;a href="https://blog.getbootstrap.com/" rel="nofollow"&gt;Blog&lt;/a&gt;
  &lt;br&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href="https://icons.getbootstrap.com" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TM0YEL54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/twbs/icons/raw/main/.github/preview.png" alt="Bootstrap Icons preview"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Install&lt;/h2&gt;
&lt;p&gt;Bootstrap Icons are packaged up and published to npm. We only include the processed SVGs in this package—it's up to you and your team to implement. &lt;a href="https://icons.getbootstrap.com/" rel="nofollow"&gt;Read our docs&lt;/a&gt; for usage instructions.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm i bootstrap-icons&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;For those &lt;a href="https://packagist.org/packages/twbs/bootstrap-icons" rel="nofollow"&gt;using Packagist&lt;/a&gt;, you can also install Bootstrap Icons via Composer:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;composer require twbs/bootstrap-icons&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a href="https://www.figma.com/file/cKgRyErzl4pR1WN4NcB5lv/Bootstrap-Icons" rel="nofollow"&gt;Also available in Figma.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;Depending on your setup, you can include Bootstrap Icons in a handful of ways.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Copy-paste SVGs as embedded HTML&lt;/li&gt;
&lt;li&gt;Reference via &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element&lt;/li&gt;
&lt;li&gt;Use the SVG sprite&lt;/li&gt;
&lt;li&gt;Include via CSS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://icons.getbootstrap.com/#usage" rel="nofollow"&gt;See the docs for more information.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Development&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/twbs/icons/actions?workflow=Tests"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--knb6tOgw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/twbs/icons/workflows/Tests/badge.svg" alt="Build Status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Clone the repo, install dependencies, and start the Hugo server locally.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;git clone https://github.com/twbs/icons/
&lt;span class="pl-c1"&gt;cd&lt;/span&gt; icons
npm i
npm start&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Then open &lt;code&gt;http://localhost:4000&lt;/code&gt; in your browser.&lt;/p&gt;
&lt;h3&gt;
npm scripts&lt;/h3&gt;
&lt;p&gt;Here are some key scripts…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/twbs/icons"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#dribbble-shots"&gt;
  &lt;/a&gt;
  dribbble shots
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#tket-app"&gt;
  &lt;/a&gt;
  T-Ket app
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N1NgFl8k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/2039805/screenshots/16664248/media/59536129d192b460b056c16789282004.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N1NgFl8k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/2039805/screenshots/16664248/media/59536129d192b460b056c16789282004.png" alt="https://cdn.dribbble.com/users/2039805/screenshots/16664248/media/59536129d192b460b056c16789282004.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/16664248-T-Ket-app-Calendar-view"&gt;11Daniyal&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#travel-app"&gt;
  &lt;/a&gt;
  Travel App
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XdXUVb7A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/1684108/screenshots/16668499/media/74d5ea5d1744ac5662580f41b72cb477.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XdXUVb7A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/1684108/screenshots/16668499/media/74d5ea5d1744ac5662580f41b72cb477.jpeg" alt="https://cdn.dribbble.com/users/1684108/screenshots/16668499/media/74d5ea5d1744ac5662580f41b72cb477.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/16668499-Travel-App"&gt;QClay&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scooter-mobile-app"&gt;
  &lt;/a&gt;
  Scooter mobile app
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jEpDqgH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/6081502/screenshots/16668775/media/09c737d38f9f26af35d4ce0bb35c37ba.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jEpDqgH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/6081502/screenshots/16668775/media/09c737d38f9f26af35d4ce0bb35c37ba.jpg" alt="https://cdn.dribbble.com/users/6081502/screenshots/16668775/media/09c737d38f9f26af35d4ce0bb35c37ba.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/16668775-Scooter-mobile-app"&gt;Design Hub&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tweets"&gt;
  &lt;/a&gt;
  Tweets
&lt;/h2&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7BL53ajN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1448690180727230467/pu/img/hqY-EFBVXjubMEae.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--HtAuZn5w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1188024416313196546/zGxQhsWI_normal.jpg" alt="Stefan Judis profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Stefan Judis
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/stefanjudis"&gt;@stefanjudis&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Oh I love that! If you're confused about what &lt;a href="https://twitter.com/hashtag/css"&gt;#css&lt;/a&gt; "adjacent sibling combinators" or a "declaration blocks" are, CSS vocabulary can help!&lt;br&gt;&lt;br&gt;Thanks &lt;a href="https://twitter.com/sakamies"&gt;@sakamies&lt;/a&gt;! 👏&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/I8vlnHpDtP"&gt;apps.workflower.fi/vocabs/css/en&lt;/a&gt;&lt;br&gt;&lt;br&gt;Video alt: Application that highlights CSS code depending on a chosen term. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:41 PM - 14 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1448690491898400768" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1448690491898400768" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1448690491898400768" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vsgZ-JWH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/FBrBKv8WYAItF-D.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--rVrHrktw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1427714836289425414/5iceg0nm_normal.jpg" alt="rauno profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        rauno
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @raunofreiberg
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      How about a token-aware GUI that would edit existing  &lt;a href="https://twitter.com/stitchesjs"&gt;@stitchesjs&lt;/a&gt; components and sync changes back to code? 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:11 PM - 14 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1448682856620953610" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1448682856620953610" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1448682856620953610" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YY78Cb8k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FBu4VD2XIAs-bMQ.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--PUv9KUkw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1308385514744098816/oDXuaci__normal.jpg" alt="Marko ⚡ Denic profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Marko ⚡ Denic
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/denicmarko"&gt;@denicmarko&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      CSS tip:&lt;br&gt;&lt;br&gt;You can change the color of the text input cursor. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      10:12 AM - 15 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1448954897903362053" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1448954897903362053" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1448954897903362053" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
    &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__two-pics"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7r_qlN_4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FBz9iATUUAQ7Szs.png" alt="unknown tweet media content"&gt;
    &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--bJRG8q9G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1415312335061848064/6Em2F0jL_normal.jpg" alt="Jiachi profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jiachi
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/huozhi"&gt;@huozhi&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      By replacing ts-jest with swc-node/jest for swr's jest preset, the testing speed is even doubled on my mac m1 🤯🤯 Amazing speed of rust and kudos to &lt;a href="https://twitter.com/Brooooook_lyn"&gt;@Brooooook_lyn&lt;/a&gt; for leveraging &lt;a href="https://twitter.com/swc_rs"&gt;@swc_rs&lt;/a&gt; to create this awesom library! 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      10:01 AM - 16 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1449314595861004292" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1449314595861004292" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1449314595861004292" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AoRNTubS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1433574506400923680/pu/img/73dH5MZ6vLcCx5Cf.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--iTK9VHSV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1435103134842454016/DfF093MF_normal.jpg" alt="Palash ⚡ profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Palash ⚡
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @palashv2
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Chrome DevTools CSS Shadow Editor is just awesome!&lt;br&gt;&lt;br&gt;Have you used it for your projects? &lt;br&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:15 PM - 16 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1449378345007808520" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1449378345007808520" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1449378345007808520" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#picked-pens"&gt;
  &lt;/a&gt;
  Picked Pens
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#one-div-snow-divtober"&gt;
  &lt;/a&gt;
  one div snow - divtober
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/BadjOJQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/ChallengesCss"&gt;Temani Afif&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#single-div-css-items-that-float"&gt;
  &lt;/a&gt;
  Single div CSS items that float
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lynnandtonic/embed/XWaXBGz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/lynnandtonic"&gt;Lynn Fisher&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading, talk to you next week, and stay safe! 👋&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>{ Zero to Helm }: Part 2 - Architecture</title>
      <author>Stephen Rodriguez</author>
      <pubDate>Sun, 17 Oct 2021 19:58:48 +0000</pubDate>
      <link>https://dev.to/kinagi/-zero-to-helm-part-2-architecture-4am0</link>
      <guid>https://dev.to/kinagi/-zero-to-helm-part-2-architecture-4am0</guid>
      <description>&lt;p&gt;Welcome back to the next chapter of { Zero to Helm }. A blog-series in which I create "byte"-sized pieces of content aimed at mastering Kubernetes.&lt;/p&gt;

&lt;p&gt;In this section, we are going to look to take a surface dive into Kubernetes by inspecting its architecture. Whether you are a fan of minimal version of k8s like &lt;a href="https://k3s.io/"&gt;k3s&lt;/a&gt; or robust cloud-specific versions like &lt;a href="https://aws.amazon.com/eks/"&gt;EKS&lt;/a&gt;, &lt;a href="https://azure.microsoft.com/en-us/services/kubernetes-service/"&gt;AKS&lt;/a&gt;, or &lt;a href="%5Bhttps://cloud.google.com/kubernetes-engine"&gt;GKE&lt;/a&gt; - the information explained here applies to all of them.&lt;/p&gt;

&lt;p&gt;So lets start to breakdown this architecture:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aNLr7-Z8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jzpmhly6byjnicyb9ihb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aNLr7-Z8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jzpmhly6byjnicyb9ihb.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#nodes"&gt;
  &lt;/a&gt;
  Nodes
&lt;/h2&gt;

&lt;p&gt;Kubernetes at its essence is a collection of servers that work together to achieve a single purpose; run your workloads. These servers are referenced as "Nodes", and their responsibility is to run your workloads by placing containers into Pods.&lt;/p&gt;

&lt;p&gt;Since Nodes are servers, they can be anything from physical machines to even virtual ones! But each node is managed by something called a "control plane". Which is a collection of essential services that run on the node in order for Pods to be created, and managed by the node. Those services are the &lt;a href="https://kubernetes.io/docs/reference/generated/kubelet"&gt;kubelet&lt;/a&gt;, a &lt;a href="https://kubernetes.io/docs/setup/production-environment/container-runtimes"&gt;container runtime&lt;/a&gt;, and the &lt;a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kube-proxy/"&gt;kube-proxy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once a node is connected to a Kubernetes master node, it will begin to report vital information like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CPU/Memory availability&lt;/li&gt;
&lt;li&gt;Info about the host/kernel&lt;/li&gt;
&lt;li&gt;Heartbeats&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of this information help the control plane make decisions about where workloads get scheduled/assigned.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#control-plane-communication"&gt;
  &lt;/a&gt;
  Control Plane Communication
&lt;/h2&gt;

&lt;p&gt;When we say “Control Plane” - we are speaking about the essential services that run on the master nodes of your Kubernetes Cluster. Collectively, these services help Kubernetes perform most of its magic for being easily extensible, accessible, and able to run workloads efficiently.&lt;/p&gt;

&lt;p&gt;Now - those magical services are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;kube-apiserver&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Exposes the Kubernetes API that is used by worker nodes, kubectl, and other services to interact with the entire k8s control plane.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;etcd&lt;/em&gt;*&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This service can differ based on your k8s flavour but a simple highly available key/value store is used in k8s to track cluster states such as pod information, workload assignments, etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;kube-scheduler&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Watches for new pods without a node assignment and selects one for them. Various factors are taken into account but the assignment is based on the pod’s manifest and key scheduling information collected from the cluster’s available nodes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;kube-controller-manager&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Runs controller processes like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Node Controller =&amp;gt; Monitors cluster nodes&lt;/li&gt;
&lt;li&gt;Jobs Controller =&amp;gt; Monitors Pods that run one-off tasks&lt;/li&gt;
&lt;/ul&gt;


&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;em&gt;cloud-controller-manager&lt;/em&gt;*&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;This one is a bit of a special one because not every flavour of k8s will include it. But this service typically handles cloud specific control logic like identity permission controls, network rules, and anything else your cloud-hosting provider specifically requires for their flavour of k8s.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More info: &lt;a href="https://kubernetes.io/docs/concepts/overview/components/"&gt;Kubernetes Components | Kubernetes&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;And that’s it! It really is that simple at a high level. There is a lot more additional terminology like Services, Ingress, and Namespaces - but all in good time! The point here is not to overwhelm but rather to encourage individual discovery.&lt;/p&gt;

&lt;p&gt;There are a lot of helpful links throughout here and I highly encourage you to dive deeper and investigate what other flavours of k8s look like! How do they differ? What’s similar…?!&lt;/p&gt;

&lt;p&gt;As always, feel free to give feedback and let me know about your journey with Kubernetes! Until next time, happy coding!&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
      <category>sre</category>
    </item>
    <item>
      <title>Infinite Scroll with HOTWire - Part 2: Adding Stimulus </title>
      <author>Ahmad khattab</author>
      <pubDate>Sun, 17 Oct 2021 19:51:56 +0000</pubDate>
      <link>https://dev.to/rockwell/infinite-scroll-with-hotwire-part-2-adding-stimulus-48o2</link>
      <guid>https://dev.to/rockwell/infinite-scroll-with-hotwire-part-2-adding-stimulus-48o2</guid>
      <description>&lt;p&gt;You can follow along if you missed the first part.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/rockwell" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AUJBo3bf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--21nHLSMN--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/616139/8914a442-3fed-4a22-b02d-bd9e6c3b9dd2.png" alt="rockwell"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/rockwell/infinite-scroll-with-hotwire-part-1-configuration-4n32" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Infinite Scroll with HOTWire Part 1: Configuration&lt;/h2&gt;
      &lt;h3&gt;Ahmad khattab ・ Oct 17 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#rails&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#ruby&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#stimulus&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#adding-stimulus"&gt;
  &lt;/a&gt;
  Adding Stimulus
&lt;/h2&gt;

&lt;p&gt;Now as our data is ready and we can scroll to the bottom of the screen. We are ready to add a stimulus controller that is responsible for the pagination.&lt;/p&gt;

&lt;p&gt;first, create a new file at &lt;code&gt;app/javascript/controllers/pagination_controller.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pagination_controller.js&lt;/span&gt;


&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stimulus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scroll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageValue&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollReachedEnd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_fetchNewPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;_fetchNewPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// fetch new url&lt;/span&gt;
    &lt;span class="c1"&gt;// update new page&lt;/span&gt;
    &lt;span class="c1"&gt;// ensure that we are on the last page&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;scrollReachedEnd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;scrollHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;scrollTop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clientHeight&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;distanceFromBottom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scrollHeight&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;scrollTop&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;clientHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;distanceFromBottom&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// adjust the number 20 yourself&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's a simple controller that attaches a &lt;code&gt;scroll&lt;/code&gt; listener on the element and calls &lt;code&gt;_fetchNewPage&lt;/code&gt; when the scroll has reached the end. Now, let's populate the method body.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/rails/request.js"&gt;request.js&lt;/a&gt; is a minimalistic JavaScript pacakge that is set to replace Rails UJS in the near future. We will be using it to fetch new pages from the server. Let's install the package&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add @rails/request.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#adding-logic-to-the-method-body"&gt;
  &lt;/a&gt;
  Adding logic to the method body
&lt;/h3&gt;

&lt;p&gt;What we want to do is that when the &lt;code&gt;_fetchNewPage&lt;/code&gt; method is called, a) request the server the &lt;code&gt;urlValue&lt;/code&gt; and add the &lt;code&gt;pageValue&lt;/code&gt; as a query param.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;_fetchNewPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;searchParams&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;page&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;responseKind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;turbo-stream&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageValue&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's connect the controller to the dom.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
  &lt;span class="na"&gt;data-controller=&lt;/span&gt;&lt;span class="s"&gt;"pagination"&lt;/span&gt;
  &lt;span class="na"&gt;data-pagination-url-value=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;posts_url&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt; "&lt;/span&gt;
  &lt;span class="na"&gt;data-pagination-page-value=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="vi"&gt;@posts&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://i.giphy.com/media/d7zdaTxxYYpIZWVQnu/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/d7zdaTxxYYpIZWVQnu/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-tubrostream-responses"&gt;
  &lt;/a&gt;
  Adding tubro_stream responses
&lt;/h2&gt;

&lt;p&gt;The requests made by the scroll is of type &lt;code&gt;"text/vnd.turbo-stream.html"&lt;/code&gt;. So, we'll need to handle that type of request.&lt;/p&gt;

&lt;p&gt;create a new file named &lt;code&gt;app/views/posts/index.turbo_stream.erb&lt;/code&gt; and add this code into it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;append&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="vi"&gt;@posts&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;with this, add &lt;code&gt;id="posts"&lt;/code&gt; to the div for turbo to know where to append the new posts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;# posts/index.html.erb
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
  &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"posts"&lt;/span&gt;
  &lt;span class="na"&gt;data-controller=&lt;/span&gt;&lt;span class="s"&gt;"pagination"&lt;/span&gt;
  &lt;span class="na"&gt;data-pagination-url-value=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;posts_path&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt; "&lt;/span&gt;
  &lt;span class="na"&gt;data-pagination-page-value=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="vi"&gt;@posts&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's look at what the controller does now.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/ueCLJjJtJ6fBaj5cIN/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ueCLJjJtJ6fBaj5cIN/giphy.gif"&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-stop"&gt;
  &lt;/a&gt;
  When to stop?
&lt;/h2&gt;

&lt;p&gt;Obviously, an scroll should be infinite while there are records to fetch, if there are no more records we must not fetch anymore records. With our current implementation our code would send infinite requests as long the user is scrolling to the end. Let's change that.&lt;/p&gt;

&lt;p&gt;Inside &lt;code&gt;app/views/products/index.turbo_stream.erb&lt;/code&gt; add this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;append&lt;/span&gt; &lt;span class="s2"&gt;"posts"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="vi"&gt;@posts&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;

  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;out_of_range?&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;data-pagination-target=&lt;/span&gt;&lt;span class="s"&gt;"lastPage"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add a little bit code into our stimulus controller.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollReachedEnd&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasLastPageTarget&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_fetchNewPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;we check, if there is a &lt;code&gt;lastPage&lt;/code&gt; target present, then we stop fetching new page. This would only be true when there are no more pages left.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;out_of_range?&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;data-pagination-target=&lt;/span&gt;&lt;span class="s"&gt;"lastPage"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bonus-add-button-to-load-data-instead-of-infinite-scroll"&gt;
  &lt;/a&gt;
  Bonus, add button to load data instead of infinite scroll
&lt;/h2&gt;

&lt;p&gt;Sometimes, you would like only for when a button pressed to load the data, not when the user reaches end of scrolling. Extending the controller is easy, let's perform just that. Inside &lt;code&gt;pagination_controller&lt;/code&gt; add these&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;


  &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// return and don't attach the scroll event listener&lt;/span&gt;
     &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;paginate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_fetchNewPage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the new &lt;code&gt;scroll&lt;/code&gt; boolean will determine if we should infinite-scroll or not. Change the content of &lt;code&gt;app/views/posts/index.html.erb&lt;/code&gt; to the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
  &lt;span class="na"&gt;data-controller=&lt;/span&gt;&lt;span class="s"&gt;"pagination"&lt;/span&gt;
  &lt;span class="na"&gt;data-pagination-url-value=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;posts_url&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt; "&lt;/span&gt;
  &lt;span class="na"&gt;data-pagination-page-value=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
  &lt;span class="na"&gt;data-pagination-scroll-value=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;
  &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"overflow-y: scroll"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"posts"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="vi"&gt;@posts&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;data-action=&lt;/span&gt;&lt;span class="s"&gt;"click-&amp;gt;pagination#paginate"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Load more
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's look at the behaviour&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/PRznalMcfwSDfvsZ7W/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/PRznalMcfwSDfvsZ7W/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We've first created and configured the dependencies and installed them. After that, we introduced our Stimulus pagination controller to aid us to paginate items. Then, we added a target that indicates we are on the last page, to stop the browser from sending infinite useless requests once we are in the last page. Finally, we've added another way to use the controller, that is, by clicking a button the next page shall load.&lt;/p&gt;

&lt;p&gt;Thanks for your reading, hope it helps you in a way. Happy coding!&lt;/p&gt;

&lt;p&gt;You can also clone the repo &lt;a href="https://github.com/A7madXatab/hotwire-infinite-scroll"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Links&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rails/request.js"&gt;request.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/URL"&gt;MDN URL docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
      <category>hotwire</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Infinite Scroll with HOTWire Part 1: Configuration</title>
      <author>Ahmad khattab</author>
      <pubDate>Sun, 17 Oct 2021 19:51:50 +0000</pubDate>
      <link>https://dev.to/rockwell/infinite-scroll-with-hotwire-part-1-configuration-4n32</link>
      <guid>https://dev.to/rockwell/infinite-scroll-with-hotwire-part-1-configuration-4n32</guid>
      <description>&lt;p&gt;Infinite scroll is a pagination mechanism where whenever the user reaches the end of the scroll area more content is loaded till there are no more content to load.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://hotwired.dev/"&gt;HOTWire&lt;/a&gt; is a new set of tools extracted from Hey by Basecamp. It uses Asynchronous HTML and HTTP (also known as &lt;a href="http://microformats.org/wiki/rest/ahah"&gt;AHAH&lt;/a&gt;) to render partial updates to the DOM without full browser reload. You build your servers with any language of your choice and let Turbo handle the partial updates for you. Which makes your application to have a speed of an SPA while having the benefits of server-rendered partials.&lt;/p&gt;

&lt;p&gt;HOTWire is not a single tool, but three tools that allow you to build super fast apps while not having to write tons of client-side JavaScript to manage the updates. The tools within HOTWire are&lt;/p&gt;

&lt;p&gt;1- Turbo: which is responsible for the navigation in your application and rendering the server responses to update the correct partial in the DOM.&lt;/p&gt;

&lt;p&gt;2- Stimulus: Sometimes we would like to add a little bit of client-side behaviour to our site, the feature is too simple to let Turbo manage it and doesn't require a round trip to the server. There, Stimulus comes into play. You add behaviour to your HTML and sprinkles of JavaScript for this.&lt;/p&gt;

&lt;p&gt;3- Strada: &lt;em&gt;Standardizes the way that web and native parts of a mobile hybrid application talk to each other via HTML bridge attributes&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-the-application"&gt;
  &lt;/a&gt;
  Building the Application
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-installing-dependencies"&gt;
  &lt;/a&gt;
  1- Installing dependencies
&lt;/h3&gt;

&lt;p&gt;The application we are going to build is going to be a simple app with one resource. A &lt;code&gt;Post&lt;/code&gt; resource that we will paginate.&lt;/p&gt;

&lt;p&gt;1- let's create a brand new rails application&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails new hotwire-infinite-scroll
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;2- Install HOTWire gems and configure them&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'hotwire-rails'&lt;/span&gt; &lt;span class="c1"&gt;# add to your Gemfile.rb&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;and hit &lt;code&gt;bundle install&lt;/code&gt; to install the gem.&lt;/p&gt;

&lt;p&gt;To configure the gem simply run this command in the console&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails hotwire:install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will install the dependenceis and configure your &lt;code&gt;app/javascript&lt;/code&gt; directory and imports Stimulus.&lt;/p&gt;

&lt;p&gt;3- To use pagination we will be using the &lt;a href="https://github.com/kaminari/kaminari"&gt;kaminari&lt;/a&gt; gem. Simply add this line to your &lt;code&gt;Gemfile.rb&lt;/code&gt; and hit &lt;code&gt;bundle install&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'kaminari'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#2-seeding-data-and-running-the-server"&gt;
  &lt;/a&gt;
  2- Seeding data and Running the server.
&lt;/h3&gt;

&lt;p&gt;1- To seed the data for testing. We will be using the &lt;a href="https://github.com/faker-ruby/faker"&gt;Faker&lt;/a&gt; library for the seeds. Inside &lt;code&gt;db/seeds.rb&lt;/code&gt; paste in this code&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'faker'&lt;/span&gt;

&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt; &lt;span class="ss"&gt;title: &lt;/span&gt;&lt;span class="no"&gt;Faker&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;body: &lt;/span&gt;&lt;span class="no"&gt;Faker&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Lorem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;paragraph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;sentence_count: &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;2- Last step is to generate a controller for us to view the posts. Let's create a posts controller, run the following command&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will create a &lt;code&gt;PostsController&lt;/code&gt; with the action &lt;code&gt;index&lt;/code&gt; inside &lt;code&gt;app/controllers&lt;/code&gt;, it will also create a view folder inside &lt;code&gt;app/views/posts&lt;/code&gt;. We load the first page of the posts by using the &lt;code&gt;.page&lt;/code&gt; method added by Kaminari.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;
    &lt;span class="vi"&gt;@page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:page&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="vi"&gt;@posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;page&lt;/span&gt; &lt;span class="vi"&gt;@page&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Finally&lt;/strong&gt;, let's run the server. Run&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rails s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;and go to &lt;a href="http://127.0.0.1:3000/posts"&gt;http://127.0.0.1:3000/posts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/oicUqBVk1pdptHwoRc/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/oicUqBVk1pdptHwoRc/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#part-2"&gt;
  &lt;/a&gt;
  Part 2
&lt;/h3&gt;

&lt;p&gt;Follow along with the next part, where we finish this together!.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/rockwell" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AUJBo3bf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--21nHLSMN--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/616139/8914a442-3fed-4a22-b02d-bd9e6c3b9dd2.png" alt="rockwell"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/rockwell/infinite-scroll-with-hotwire-part-2-adding-stimulus-48o2" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Infinite Scroll with HOTWire - Part 2: Adding Stimulus &lt;/h2&gt;
      &lt;h3&gt;Ahmad khattab ・ Oct 17 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#rails&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#ruby&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#hotwire&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;You can also clone the repo &lt;a href="https://github.com/A7madXatab/hotwire-infinite-scroll"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for your reading, hope it helps you in a way. Happy coding!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hotwired.dev/"&gt;HOTWire&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://microformats.org/wiki/rest/ahah"&gt;AHAH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kaminari/kaminari"&gt;kaminari&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/faker-ruby/faker"&gt;Faker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://stevepolito.design/blog/rails-infinite-scrolling-blog-roll/"&gt;create an infinite scrolling blog roll in rails with hotwire
&lt;/a&gt; by &lt;a href="https://twitter.com/stevepolitodsgn"&gt;Steve Polito
&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hotwired/hotwire-rails"&gt;hotwire-rails repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://basecamp.com/"&gt;Basecamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hey.com/"&gt;Hey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://masilotti.com/newsletter/"&gt;HOTWire newsletter&lt;/a&gt; by &lt;a href="https://twitter.com/joemasilotti"&gt;Joe Masilotti&lt;/a&gt; &lt;strong&gt;highly recommend&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
      <category>stimulus</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Write less, test faster with jest-test-gen</title>
      <author>Giulio Dellorbo</author>
      <pubDate>Sun, 17 Oct 2021 19:50:57 +0000</pubDate>
      <link>https://dev.to/egm0121/write-less-test-faster-with-jest-test-gen-3lm0</link>
      <guid>https://dev.to/egm0121/write-less-test-faster-with-jest-test-gen-3lm0</guid>
      <description>&lt;p&gt;Hello everyone 👋&lt;/p&gt;

&lt;p&gt;First time posting here in the dev.to community!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-jesttestgen"&gt;
  &lt;/a&gt;
  What is jest-test-gen
&lt;/h1&gt;

&lt;p&gt;I wanted to introduce a small cli utility &lt;a href="https://www.npmjs.com/package/jest-test-gen"&gt;jest-test-gen&lt;/a&gt; that I wrote to speed up writing Jest unit tests.&lt;/p&gt;

&lt;p&gt;Every time I start writing a new test file for my code some initial boilerplate is always required:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;import all the exports from the source file to be tested&lt;/li&gt;
&lt;li&gt;import the external dependencies used in my source file&lt;/li&gt;
&lt;li&gt;setup jest mocks for the dependencies used in the source code&lt;/li&gt;
&lt;li&gt;create tests blocks for every exported function / class method in my source file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wanted to automate part of this process by parsing the source file and generating an initial test file containing the initial scaffolding, this way I can quickly start writing the actual logic for my tests.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-use-it"&gt;
  &lt;/a&gt;
  How to use it
&lt;/h1&gt;

&lt;p&gt;To generate a test file just install the tool&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm i -g jest-test-gen&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and invoke it passing the path to your source file as the first argument:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;jest-test-gen ~/demoproject/src/services/myServiceClass.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The tool will generate a file named &lt;code&gt;myServiceClass.generated.test.js&lt;/code&gt; in the same folder.&lt;/p&gt;

&lt;p&gt;Try it out and give it a like here or ⭐️ the repo if you find it useful.&lt;/p&gt;

&lt;p&gt;You can find the repo here: &lt;a href="https://github.com/egm0121/jest-test-gen"&gt;jest-test-gen on Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>testing</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Abstract Factory</title>
      <author>GauravRatnawat</author>
      <pubDate>Sun, 17 Oct 2021 19:38:03 +0000</pubDate>
      <link>https://dev.to/gauravratnawat/abstract-factory-haf</link>
      <guid>https://dev.to/gauravratnawat/abstract-factory-haf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#creational-design-pattern"&gt;
  &lt;/a&gt;
  Creational Design Pattern
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=""&gt;Abstract Factory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use"&gt;
  &lt;/a&gt;
  When to use
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;To support families of related or dependent objects.&lt;/li&gt;
&lt;li&gt;To encapsulate platform dependencies to make an application portable.&lt;/li&gt;
&lt;li&gt;To prevent client code from using the 'new' operator.&lt;/li&gt;
&lt;li&gt;To easily swap the underlying platform with minimal changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#intent"&gt;
  &lt;/a&gt;
  Intent
&lt;/h3&gt;

&lt;p&gt;Provide an interface for creating families of related or dependent objects without specifying their concrete classes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;An Abstract Factory class (public)&lt;/li&gt;
&lt;li&gt;Factory Implementations for various familes (protected)&lt;/li&gt;
&lt;li&gt;Interfaces for various products (public)
*Set of product implementations for various families (protected)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  Structure
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ouNNBftr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61ayjyx0haumjg8oqz31.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ouNNBftr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/61ayjyx0haumjg8oqz31.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Define interfaces for different types products/objects. Each family will have all these parts.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.abstractfactory;

public interface Engine {

  public void design();
  public void manufacture();
  public void test();

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.abstractfactory;

public interface Tyre {

  public void design();
  public void manufacture();

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Create sets of implementation subclasses for the above interfaces. Classes are access protected to prohibit instantiations in client modules using the 'new' operator.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.abstractfactory;

class CarEngine implements Engine {

  @Override
  public void design() {
    System.out.println("Designing Car Engine");
  }

  @Override
  public void manufacture() {
    System.out.println("Manufacturing Car Engine");
  }

  @Override
  public void test() {
    System.out.println("Testing Car Engine");
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.abstractfactory;

class CarEngine implements Engine {

  @Override
  public void design() {
    System.out.println("Designing Car Engine");
  }

  @Override
  public void manufacture() {
    System.out.println("Manufacturing Car Engine");
  }

  @Override
  public void test() {
    System.out.println("Testing Car Engine");
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.abstractfactory;

class CarTyre implements Tyre {

  @Override
  public void design() {
    System.out.println("Designing Car Tyre");
  }

  @Override
  public void manufacture() {
    System.out.println("Manufacturing Car Tyre");
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
package com.gaurav.abstractfactory;

class TruckTyre implements Tyre {

  @Override
  public void design() {
    System.out.println("Designing Truck Tyre");
  }

  @Override
  public void manufacture() {
    System.out.println("Manufacturing Truck Tyre");
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Create a Abstract Factory class with factory method 'getFactory()'. Clients can use this method to get an object the required factory. This example uses both Singleton and Factory Method patterns for better design.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.abstractfactory;

public abstract class Factory {

  /* Singleton Factory objects */
  private static Factory carFactory = null;
  private static Factory truckFactory = null;

  public abstract Engine getEngine();
  public abstract Tyre getTyre();

  /*
   * This is the factory method exposed to the client.
   * Client requests for a factory instance by passing the type.
   * Client does not need to know about which &amp;amp; how
   * object is created internally.
   */
  public static Factory getFactory(String vehicleType)
      throws UnknownVehicleException {

    if (vehicleType == null) {
      return null;
    }

    Factory factory = null;
    switch (vehicleType) {
      case "car":
        if (carFactory == null)
          carFactory = new CarFactory();
        factory = carFactory;
        break;
      case "truck":
        if (truckFactory == null)
          truckFactory = new TruckFactory();
        factory = truckFactory;
        break;
      default:
        throw new UnknownVehicleException();
    }

    return factory;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Create Factory implementations. Classes are protected to prohibit direct access in client modules.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.abstractfactory;

class CarFactory extends Factory {

  @Override
  public Engine getEngine() {
    return new CarEngine();
  }

  @Override
  public Tyre getTyre() {
    return new CarTyre();
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
package com.gaurav.abstractfactory;

public class TruckFactory extends Factory {

  TruckFactory() {}

  @Override
  public Engine getEngine() {
    return new TruckEngine();
  }

  @Override
  public Tyre getTyre() {
    return new TruckTyre();
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;The client code. Client is exposed to only the Abstract Factory class and the interfaces.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package com.gaurav.client;

import java.util.Scanner;

import com.gaurav.abstractfactory.Engine;
import com.gaurav.abstractfactory.Factory;
import com.gaurav.abstractfactory.Tyre;
import com.gaurav.abstractfactory.UnknownVehicleException;

public class AbstractFactoryClient {

  public static void main(String[] args) {

    Scanner in = new Scanner(System.in);
    String vehicleType = in.nextLine().toLowerCase();

    /* Get the factory instance */
    Factory factory;
    try {
      factory = Factory.getFactory(vehicleType);

      /* Get the Engine from the factory */
      Engine engine = factory.getEngine();
      engine.design();
      engine.manufacture();
      engine.test();

      /* Get the Tyre from the factory */
      Tyre tyre = factory.getTyre();
      tyre.design();
      tyre.manufacture();

    } catch (UnknownVehicleException e) {
      System.out.println("Invalid vehicle type entered!");
    }

    in.close();
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[input1]
    Car
[output1]
    Designing Car Engine
    Manufacturing Car Engine
    Testing Car Engine
    Designing Car Tyre
    Manufacturing Car Tyre

[input2]
    Bus
[output2]
    Invalid vehicle type entered!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Loosely coupled code.&lt;/li&gt;
&lt;li&gt;Abstract Factory provides a single point of access for all products in a family.&lt;/li&gt;
&lt;li&gt;New product family can be easily supported.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#drawbacks"&gt;
  &lt;/a&gt;
  Drawbacks
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;More layers of abstraction increases complexity.&lt;/li&gt;
&lt;li&gt;If there are any changes to any underlying detail of one factory, the interface might need to be modified for all the factories.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#real-world-examples"&gt;
  &lt;/a&gt;
  Real World Examples
&lt;/h3&gt;

&lt;p&gt;Providing data access to two different data sources (e.g. a SQL Database and a XML file). You have two different data access classes (a gateway to the datastore). Both inherit from a base class that defines the common methods to be implemented (e.g. Load, Save, Delete). Which data source shall be used shouldn't change the way client code retrieves it's data access class. Your Abstract Factory knows which data source shall be used and returns an appropriate instance on request. The factory returns this instance as the base class type.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#software-examples"&gt;
  &lt;/a&gt;
  Software Examples
&lt;/h3&gt;

&lt;p&gt;Dependency Injection&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#java-sdk-examples"&gt;
  &lt;/a&gt;
  Java SDK Examples
&lt;/h4&gt;

&lt;p&gt;javax.xml.parsers.DocumentBuilderFactory newInstance()&lt;br&gt;
javax.xml.transform.TransformerFactory newInstance()&lt;br&gt;
javax.xml.xpath.XPathFactory newInstance()&lt;/p&gt;

</description>
      <category>java</category>
      <category>design</category>
      <category>architecture</category>
      <category>designpattern</category>
    </item>
    <item>
      <title>Amazon Textract with expense analyzing</title>
      <author>Jones Zachariah Noel</author>
      <pubDate>Sun, 17 Oct 2021 19:09:50 +0000</pubDate>
      <link>https://dev.to/aws-builders/amazon-textract-with-expense-analyzing-516b</link>
      <guid>https://dev.to/aws-builders/amazon-textract-with-expense-analyzing-516b</guid>
      <description>&lt;p&gt;&lt;a href="https://aws.amazon.com/textract"&gt;Amazon Textract&lt;/a&gt; now supports receipts and invoices processing which makes expense management systems analyze better with &lt;em&gt;only receipt's or invoice's&lt;/em&gt; image or document. &lt;br&gt;
Read more about the &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/07/amazon-textract-announces-specialized-support-automated-processing-invoices-receipts/"&gt;announcement&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#key-takeaways-from-the-blog"&gt;
  &lt;/a&gt;
  Key takeaways from the blog
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-textract"&gt;What is Textract?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#receipts-and-invoices"&gt;How Textract processes receipts and invoices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#textract-implementation"&gt;Implementing Textract with NodeJS SDK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#what-is-textract"&gt;
  &lt;/a&gt;
  What is Textract? &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/textract"&gt;Amazon Textract&lt;/a&gt; is a fully-managed Machine Learning service which extract textual information from documents and images. The Textract &lt;code&gt;DetectDocumentText&lt;/code&gt; API is capable of detecting and extracting textual data which are handwritten or typed present either as texts, forms or tables in the document or image. &lt;/p&gt;

&lt;p&gt;Common use-cases of Textract are - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data capture from forms.&lt;/li&gt;
&lt;li&gt;Automating certain processes similar to KYC process.
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hGPOi-lo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/Em9AG0nVoAYV-YQ.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--qv16LiyE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1368794503285383171/qoMhip1Z_normal.jpg" alt="Jeff Barr ☁️ (@ 🏠 ) 💉 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jeff Barr ☁️ (@ 🏠 ) 💉
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jeffbarr
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Cool demo video &lt;a href="https://twitter.com/mikegchambers"&gt;@mikegchambers&lt;/a&gt; - Amazon Textract Handwriting Recognition (New) - &lt;a href="https://t.co/MXKDL4p8Pr"&gt;youtube.com/watch?v=Efbgai…&lt;/a&gt; . Be sure to fill in those TPS Reports... 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:55 PM - 16 Nov 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1328351004903948288" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1328351004903948288" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1328351004903948288" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aeVGONp8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E4wFsduWUAIwFaU.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--uxE8Xk6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1322901525476331520/-8TMD1WC_normal.jpg" alt="Danilo Poccia profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Danilo Poccia
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/danilop"&gt;@danilop&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Improve newspaper digitalization efficacy with a generic document segmentation tool using Amazon Textract &lt;a href="https://t.co/ObIlGsEhKs"&gt;buff.ly/3xFEKnp&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/AWS"&gt;#AWS&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/MachineLearning"&gt;#MachineLearning&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:27 PM - 25 Jun 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1408507048111845386" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1408507048111845386" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1408507048111845386" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

And more use-cases available on &lt;a href="https://docs.aws.amazon.com/textract/latest/dg/what-is.html#first-time-user"&gt;Amazon Textract documentation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Textract exposes the following SDK APIs for developers to integrate - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;AnalyzeDocument&lt;/code&gt; (&lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_AnalyzeDocument.html"&gt;documentation&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;AnalyzeExpense&lt;/code&gt; (&lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_AnalyzeExpense.html"&gt;documentation&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DetectDocumentText&lt;/code&gt; (&lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_DetectDocumentText.html"&gt;documentation&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GetDocumentAnalysis&lt;/code&gt; (&lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_GetDocumentAnalysis.html"&gt;documentation&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GetDocumentTextDetection&lt;/code&gt; (&lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_GetDocumentTextDetection.html"&gt;documentation&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;StartDocumentAnalysis&lt;/code&gt; (&lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_StartDocumentAnalysis.html"&gt;documentation&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;StartDocumentTextDetection&lt;/code&gt; (&lt;a href="https://docs.aws.amazon.com/textract/latest/dg/API_StartDocumentTextDetection.html"&gt;documentation&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With Textract, the processing of images or documents can be handled &lt;a href="https://docs.aws.amazon.com/textract/latest/dg/sync.html"&gt;synchronously&lt;/a&gt; or &lt;a href="https://docs.aws.amazon.com/textract/latest/dg/async.html"&gt;asynchronous&lt;/a&gt;.&lt;br&gt;
&lt;code&gt;StartDocumentAnalysis&lt;/code&gt; / &lt;code&gt;GetDocumentAnalysis&lt;/code&gt; and &lt;code&gt;StartDocumentTextDetection&lt;/code&gt; / &lt;code&gt;GetDocumentTextDetection&lt;/code&gt; are the asynchronous implementation of Amazon Textract and whenever the action start (&lt;code&gt;StartDocumentAnalysis&lt;/code&gt; and &lt;code&gt;StartDocumentTextDetection&lt;/code&gt;) is executed, it returns a &lt;code&gt;JobID&lt;/code&gt; which is referred to when getting the data.&lt;/p&gt;

&lt;p&gt;Textract APIs are flexible to take either document/image buffer data or the object stored on S3 to process and extract textual information. &lt;/p&gt;

&lt;p&gt;Python samples are available in - &lt;a href="https://github.com/awsdocs/aws-doc-sdk-examples/tree/main/python/example_code/textract"&gt;GitHub/awsdocs&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/aws-samples"&gt;
        aws-samples
      &lt;/a&gt; / &lt;a href="https://github.com/aws-samples/amazon-textract-code-samples"&gt;
        amazon-textract-code-samples
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Amazon Textract Code Samples
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h2&gt;
Amazon Textract Code Samples&lt;/h2&gt;
&lt;p&gt;This repository contains example code snippets showing how Amazon Textract and other AWS services can be used to get insights from documents.&lt;/p&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;python3 01-detect-text-local.py&lt;/p&gt;
&lt;p&gt;For examples that use S3 bucket, upload sample images to an S3 bucket and update variable "s3BucketName" in the example before running it.&lt;/p&gt;
&lt;h2&gt;
Python Samples&lt;/h2&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/01-detect-text-local.py"&gt;01-detect-text-local.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing processing a document on local machine.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/02-detect-text-s3.py"&gt;02-detect-text-s3.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing processing a document in Amazon S3 bucket.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/03-reading-order.py"&gt;03-reading-order.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing printing document in reading order.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/04-nlp-comprehend.py"&gt;04-nlp-comprehend.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing detecting entities and sentiment.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/05-nlp-medical.py"&gt;05-nlp-medical.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing detecting medical entities.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/06-translate.py"&gt;06-translate.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing translation of documents.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/07-search.py"&gt;07-search.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing document indexing in Elasticsearch.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/08-forms.py"&gt;08-forms.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing form (key/value) processing.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/09-forms-redaction.py"&gt;09-forms-redaction.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing redacting information in document.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/10-tables.py"&gt;10-tables.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing table processing.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/11-tables-expense.py"&gt;11-tables-expense.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing validation of table data.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/aws-samples/amazon-textract-code-samples./python/12-pdf-text.py"&gt;12-pdf-text.py&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Example showing PDF document processing.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
.NET Usage&lt;/h2&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;
&lt;pre&gt;&lt;code&gt;Usage: dotnet run [--switch]
To run this console&lt;/code&gt;&lt;/pre&gt;…&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/aws-samples/amazon-textract-code-samples"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
NodeJS samples are in an open pull request - &lt;br&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/aws-samples/amazon-textract-code-samples/pull/18"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg"&gt;
      &lt;span class="issue-title"&gt;
        Added NodeJS samples
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#18&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/zachjonesnoel"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--BEC0gOey--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/12515425%3Fv%3D4" alt="zachjonesnoel avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/zachjonesnoel"&gt;zachjonesnoel&lt;/a&gt;
        &lt;/strong&gt; posted on &lt;a href="https://github.com/aws-samples/amazon-textract-code-samples/pull/18"&gt;&lt;time&gt;Sep 18, 2021&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;&lt;em&gt;Issue #, if available:&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Description of changes:&lt;/em&gt;
Added NodeJS text detect samples.&lt;/p&gt;
&lt;p&gt;By submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/aws-samples/amazon-textract-code-samples/pull/18"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#how-textract-processes-receipts-and-invoices"&gt;
  &lt;/a&gt;
  How Textract processes receipts and invoices &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Textract &lt;code&gt;AnalyzeExpense&lt;/code&gt; API processes the data and extracts the key information from the document such as &lt;em&gt;Vendor names&lt;/em&gt;, &lt;em&gt;Receipt number&lt;/em&gt; or &lt;em&gt;Invoice number&lt;/em&gt;. &lt;code&gt;AnalyzeExpense&lt;/code&gt; API is available &lt;strong&gt;only in the latest version of SDK&lt;/strong&gt;, as this is one of the new functions available now. So ensure, you have updated your SDK.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Starting today, Amazon Textract adds the following capabilities for receipts and invoices: 1) Identifies Vendor Name - Amazon Textract can find the vendor name on a receipt even if it's only indicated within a logo on the page without an explicit label called “vendor”. It can also find and extract item, quantity, and prices that are not labeled with column headers for line items, 2) Enables consolidation of output from many documents - Textract normalizes keynames and column headers when extracting data from invoices and receipts, into a standard taxonomy. For example, it detects that “invoice no.” “invoice number” and “receipt #” are identical and outputs “INVOICE_RECEIPT_ID,” so that downstream applications can easily compare output from many documents, and 3) Extracts line item details, even when the column headers are missing - Textract extracts line items including items, quantities, and prices of individual goods purchased from an invoice or a receipt. If the table of line items does not include column headers, Textract now infers what the column headers are meant to be based on the table content.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As described in the &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/07/amazon-textract-announces-specialized-support-automated-processing-invoices-receipts/"&gt;announcement&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This makes it easier for systems which are integrating Textract to manage expense analysis with the consolidated information.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#implementing-textract-with-nodejs-sdk"&gt;
  &lt;/a&gt;
  Implementing Textract with NodeJS SDK &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;In this walkthrough, we will be using the &lt;code&gt;AnalyzeExpense&lt;/code&gt; and &lt;code&gt;AnalyzeDocument&lt;/code&gt; API from Textract. &lt;/p&gt;

&lt;p&gt;To get started, you can navigate to &lt;em&gt;Amazon Textract&lt;/em&gt; AWS Console from where you will be able to run Textract on sample documents and view the response pretty-formatted on the console. &lt;/p&gt;

&lt;p&gt;Image used for the demo - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pCxWYwzr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6sb11vrufnvowmhv16nd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pCxWYwzr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6sb11vrufnvowmhv16nd.png" alt="Image used for the demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When using &lt;code&gt;AnalyzeDocument&lt;/code&gt; from the console/ SDK API, you would have to use what type of feature you want to extract. From SDK API you would have to pass the input for &lt;code&gt;FeatureTypes&lt;/code&gt; as &lt;code&gt;TABLES&lt;/code&gt; or &lt;code&gt;FORMS&lt;/code&gt;, if you are trying this from the console, you can additionally extract all the text as &lt;code&gt;RAW TEXT&lt;/code&gt; also.&lt;br&gt;
Raw text - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1vSzhe0n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h870m55u4vvpe3vj7doh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1vSzhe0n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h870m55u4vvpe3vj7doh.png" alt="RAW TEXT"&gt;&lt;/a&gt;&lt;br&gt;
Forms - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BpvF_Zmk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2to2u7uufwxfck0dxqkj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BpvF_Zmk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2to2u7uufwxfck0dxqkj.png" alt="Forms"&gt;&lt;/a&gt;&lt;br&gt;
Tables - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SE9z8l9P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/quwjjls2amtzxa6zepnc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SE9z8l9P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/quwjjls2amtzxa6zepnc.png" alt="Tables"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="na"&gt;S3Object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;Bucket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;xxxxxx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;download.jfif&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;FeatureTypes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;TABLES&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FORMS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;textract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;analyzeDocument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Response available on &lt;a href="https://gist.github.com/zachjonesnoel/c56763bdea593f0ad30e6d9246557401#file-analyzedocumentresponse-json"&gt;GitHub Gist&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For &lt;code&gt;AnalyzeExpense&lt;/code&gt; API, from the console and SDK API, you will get the response with both &lt;code&gt;SummaryFields&lt;/code&gt; and &lt;code&gt;LineItemFields&lt;/code&gt;.&lt;br&gt;
Summary fields - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hry_XvtK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2vs16e31xblixe0gyww.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hry_XvtK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2vs16e31xblixe0gyww.png" alt="SummaryFields"&gt;&lt;/a&gt;&lt;br&gt;
Line item fields&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gdhjKRxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsszs6hc98gvda963upm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gdhjKRxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsszs6hc98gvda963upm.png" alt="LineItemFields"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="na"&gt;S3Object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;Bucket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;xxxxxx&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;download.jfif&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;textract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;analyzeExpense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Response available on &lt;a href="https://gist.github.com/zachjonesnoel/c56763bdea593f0ad30e6d9246557401#file-analyzeexpenseresponse-json"&gt;GitHub Gist&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h4&gt;

&lt;p&gt;Amazon Textract's pricing varies upon the API that is executed as internally it uses &lt;em&gt;OCR technology&lt;/em&gt; to process and extract textual information. Also based on the feature type, it focuses to extract either &lt;code&gt;FORM&lt;/code&gt; or &lt;code&gt;TABLE&lt;/code&gt; data.&lt;br&gt;
Detailed information on pricing is available &lt;a href="https://aws.amazon.com/textract/pricing/"&gt;on Textract pricing page&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;Amazon Textract enables applications to integrate with SDK APIs so that the documents or images with textual data from various representations of text in form of raw text, forms, tables are easily extratable. Now with the expense analysis support, Textract goes a level ahead to consolidate the items and also extract key information from the invoice or receipts. Textract also provides the confidence level / percentage of the extracted text making it a choice for the integrating applications to either consider it or neglect it. &lt;/p&gt;

</description>
      <category>textract</category>
      <category>aws</category>
      <category>machinelearning</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
