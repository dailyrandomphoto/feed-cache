<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>VS Code extensions For Every Front-end Developer</title>
      <author>Jjaawja</author>
      <pubDate>Tue, 17 Aug 2021 07:10:55 +0000</pubDate>
      <link>https://dev.to/jjaawja/vs-code-extensions-for-every-front-end-developer-1bma</link>
      <guid>https://dev.to/jjaawja/vs-code-extensions-for-every-front-end-developer-1bma</guid>
      <description>&lt;p&gt; &lt;span&gt;Hello everyone, my name is suman and I'm a frontend developer. In this blog post, I would like to share 10 VS code extensions that every frontend developer should use. The purpose of using these extensions is to write faster, cleaner, and more consistent code. &lt;/span&gt;&lt;span&gt;Let's Jump in!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;a href="https://www.codelivly.com/10-vs-code-extensions-every-frontend-developer-should-use/"&gt;10 VS Code extensions every Frontend Developer should use&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Project Ideas to Make You a Better Developer</title>
      <author>Tamerlan Gudabayev</author>
      <pubDate>Tue, 17 Aug 2021 07:00:26 +0000</pubDate>
      <link>https://dev.to/tamerlang/project-ideas-to-make-you-a-better-developer-37l3</link>
      <guid>https://dev.to/tamerlang/project-ideas-to-make-you-a-better-developer-37l3</guid>
      <description>&lt;p&gt;There's no secret method in becoming a better developer.&lt;/p&gt;

&lt;p&gt;There's no substitute for hard work.&lt;/p&gt;

&lt;p&gt;You gotta study, and simply grind it out.&lt;/p&gt;

&lt;p&gt;But sometimes you can speed up the process.&lt;/p&gt;

&lt;p&gt;One way is to create "good" projects&lt;/p&gt;

&lt;p&gt;But what are good projects?&lt;/p&gt;

&lt;p&gt;Let's dive in.&lt;/p&gt;

&lt;h2&gt;What makes a good project?&lt;/h2&gt;

&lt;p&gt;All projects are good.&lt;/p&gt;

&lt;p&gt;But, some are better than others.&lt;/p&gt;

&lt;p&gt;How do we judge projects?&lt;/p&gt;

&lt;p&gt;Before I begin listing out the criteria by which I judge projects, I just wanna say that this is very subjective and at the end of the day it totally depends on you, if you think a project is great, then it is great, no arguments needed.&lt;/p&gt;

&lt;p&gt;Now with that done, let's go over what I find important in a project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Tech Stack&lt;/strong&gt; — We can judge a project by the tech stack it's using. That also depends on you, if you wanna learn Java, then simply create projects using Java. I'm not advocating using the latest and greatest tech, but it's good to experiment with different tech stacks and see which ones you enjoy programming in.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Size&lt;/strong&gt; — The bigger the project, the better it is? In most cases it is, big projects force you to think about architecture, file structure, and lots of other things that you might ignore. On the other hand, small projects are good if your focused on learning one specific tech. For example, if you wanna learn web sockets, you would create a super simple chat app, with the basic needs just to learn web sockets.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Challenge&lt;/strong&gt; — An easy project is no fun, you won't learn much. That's why it's important to have a project which is slightly outside of your comfort zone. Make sure it's not too outside of your comfort zone for you to be overwhelmed.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fun&lt;/strong&gt; — In my opinion, a fun project is always a good project. It just motivates you to write code, and simply have fun.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we know how to judge projects, let us answer a very common question that most beginner programmers have.&lt;/p&gt;

&lt;h3&gt;Should my projects be recruiter oriented?&lt;/h3&gt;

&lt;p&gt;This is another common question that junior developers have.&lt;/p&gt;

&lt;p&gt;The simple answer is no.&lt;/p&gt;

&lt;p&gt;Most companies don't look at your personal projects UNLESS they are super outstanding such as a popular open-source project or equivalent.&lt;/p&gt;

&lt;p&gt;What I'm trying to say is that you should create projects because you genuinely want to do them, you might want to learn some new technology, or simply have fun.&lt;/p&gt;

&lt;h2&gt;Projects&lt;/h2&gt;

&lt;p&gt;That the theory is over with, let's move over to more practical advice.&lt;/p&gt;

&lt;p&gt;Here are the projects I recommend every programmer to at least try doing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PS. I probably have missed some other great project ideas, if I did make sure to leave them down in the comments.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Clones (Netflix, Google, Amazon, etc...)&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QNMUfXAs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softwareadventuring.com/wp-content/uploads/2021/08/1-1024x528.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QNMUfXAs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softwareadventuring.com/wp-content/uploads/2021/08/1-1024x528.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You got no project ideas?&lt;/p&gt;

&lt;p&gt;Clone apps?&lt;/p&gt;

&lt;p&gt;What apps?&lt;/p&gt;

&lt;p&gt;Any app., it can be Netflix, Google, Amazon, etc...&lt;/p&gt;

&lt;p&gt;Cloning apps is a great way to learn how these giant apps were made.&lt;/p&gt;

&lt;p&gt;You essentially reverse engineer these apps and learn their trade secrets.&lt;/p&gt;

&lt;h3&gt;Visualizers&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sXO6D1Jp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softwareadventuring.com/wp-content/uploads/2021/08/2-1024x576.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sXO6D1Jp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softwareadventuring.com/wp-content/uploads/2021/08/2-1024x576.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Visualizers have become super popular lately.&lt;/p&gt;

&lt;p&gt;Mainly because it teaches you core CS fundamentals.&lt;/p&gt;

&lt;p&gt;It's also a nice project to put on your resume.&lt;/p&gt;

&lt;p&gt;You can visualize lot's of things, sorting algorithms, shortest path algorithms, etc...&lt;/p&gt;

&lt;p&gt;Bonus points making this much more beautiful&lt;/p&gt;

&lt;h3&gt;Video/Text Chat App&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TNme2ULK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softwareadventuring.com/wp-content/uploads/2021/08/3-1024x683.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TNme2ULK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softwareadventuring.com/wp-content/uploads/2021/08/3-1024x683.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I don't like putting specific projects, but I couldn't skip this one.&lt;/p&gt;

&lt;p&gt;I like this project, it's fun and it teaches you trending topics such as web sockets and WebRTC&lt;/p&gt;

&lt;p&gt;It's also a very cool project to put on your resume.&lt;/p&gt;

&lt;h3&gt;CMS System&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PR8RsUl1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softwareadventuring.com/wp-content/uploads/2021/08/4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PR8RsUl1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softwareadventuring.com/wp-content/uploads/2021/08/4.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a classic.&lt;/p&gt;

&lt;p&gt;CMS systems can be very simple or complex.&lt;/p&gt;

&lt;p&gt;If by any chance your CRM system is useful, you can turn it into a full-fledged SaaS (Software as a Service) making you some side income.&lt;/p&gt;

&lt;h3&gt;Cloud Computing Project&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q14NCjIy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softwareadventuring.com/wp-content/uploads/2021/08/12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q14NCjIy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softwareadventuring.com/wp-content/uploads/2021/08/12.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lot's of companies are moving to cloud providers for their infrastructure needs.&lt;/p&gt;

&lt;p&gt;What better way to learn the cloud, than creating a cloud-based project.&lt;/p&gt;

&lt;p&gt;You can create a small project that uses some sort of cloud service:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Storage: AWS S3&lt;/li&gt;
&lt;li&gt;Database: AWS RDS&lt;/li&gt;
&lt;li&gt;Functions: AWS Lambda&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;PS. You don't have to use AWS, it's simply the most popular one currently. You can check other cloud providers such as Google Cloud and Microsoft Azure.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Games&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PAqMj-O---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softwareadventuring.com/wp-content/uploads/2021/08/5-1024x562.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PAqMj-O---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softwareadventuring.com/wp-content/uploads/2021/08/5-1024x562.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you enjoy playing games, why not make one?&lt;/p&gt;

&lt;p&gt;It might be tough but make sure to pick something that isn't too hard, you won't be making the next witcher.&lt;/p&gt;

&lt;p&gt;You can make a 3D game that will teach you lots about physics, or even a multiplayer game that will teach you about networking.&lt;/p&gt;

&lt;p&gt;You can start off by learning Unity, or my personal favourite Godot.&lt;/p&gt;

&lt;h3&gt;Distributed Systems Project&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eQSnCOhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softwareadventuring.com/wp-content/uploads/2021/08/6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eQSnCOhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softwareadventuring.com/wp-content/uploads/2021/08/6.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one might be a bit hard to do, but it will immensely help you because most companies are moving to a distributed architecture.&lt;/p&gt;

&lt;p&gt;You can create simple microservices that communicate with each other using HTTP or gRPC.&lt;/p&gt;

&lt;p&gt;You can add a reverse proxy, as an API gateway, maybe even a load balancer, and you can host this on the cloud using some cloud provider.&lt;/p&gt;

&lt;h3&gt;Online Code Editor&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KgMVUndW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softwareadventuring.com/wp-content/uploads/2021/08/7-1024x576.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KgMVUndW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softwareadventuring.com/wp-content/uploads/2021/08/7-1024x576.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is another fun and challenging project.&lt;/p&gt;

&lt;p&gt;Personally, I've never done this but would assume that it's no easy feat.&lt;/p&gt;

&lt;p&gt;Your gonna have to be able to work with files, and syntax highlighting.&lt;/p&gt;

&lt;p&gt;Don't forget about running the code, probably gonna use some sort of compiler underneath.&lt;/p&gt;

&lt;h3&gt;Regex Query Tool&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a-ooFkLG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softwareadventuring.com/wp-content/uploads/2021/08/8-1024x538.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a-ooFkLG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softwareadventuring.com/wp-content/uploads/2021/08/8-1024x538.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will probably be a frustrating project due to how annoying regex is.&lt;/p&gt;

&lt;p&gt;Nevertheless, it's a great project, your gonna learn how regex works (finally!!)&lt;/p&gt;

&lt;p&gt;You can add features like having test cases for regex, and even a history&lt;/p&gt;

&lt;h3&gt;File Manager&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TXgJgTOo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softwareadventuring.com/wp-content/uploads/2021/08/9-1024x640.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TXgJgTOo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softwareadventuring.com/wp-content/uploads/2021/08/9-1024x640.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is another fun project to do, it teaches you how the file system works.&lt;/p&gt;

&lt;p&gt;It will also teach you basic data structures because your gonna have to use them to implement some features.&lt;/p&gt;

&lt;h3&gt;Machine Learning Project&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aiorLvS1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softwareadventuring.com/wp-content/uploads/2021/08/10.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aiorLvS1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softwareadventuring.com/wp-content/uploads/2021/08/10.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Machine learning is hot.&lt;/p&gt;

&lt;p&gt;People think it's too hard, but in fact, there are many ready-made libraries that abstract all the hard stuff for us.&lt;/p&gt;

&lt;p&gt;You can create a mask detector app or handwriting detector app.&lt;/p&gt;

&lt;h3&gt;Your Own Framework&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lGXa0u9e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softwareadventuring.com/wp-content/uploads/2021/08/11.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lGXa0u9e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://softwareadventuring.com/wp-content/uploads/2021/08/11.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a great project because it will make you appreciate the frameworks your already using.&lt;/p&gt;

&lt;p&gt;To start you can choose a framework to clone.&lt;/p&gt;

&lt;p&gt;You can start off by cloning basic functionality and slowly start implementing more features.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That was long?&lt;/p&gt;

&lt;p&gt;I sure hope you got an idea for your next project.&lt;/p&gt;

&lt;p&gt;If so, tell me which one your gonna make down in the comments below!&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;h3&gt;The Plug&lt;/h3&gt;

&lt;p&gt;If you want more content like this, follow me on &lt;a href="http://dev.to"&gt;dev.to&lt;/a&gt; or even check out my personal &lt;a href="http://softwareadventuring.com"&gt;blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also publish small snippets of content on Twitter, follow me @&lt;a href="https://twitter.com/tamerlan_dev"&gt;tamerlan_dev&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>career</category>
      <category>fullstack</category>
    </item>
    <item>
      <title>AngularJS vs. Angular 2 vs. Angular 4</title>
      <author>Subin Sabu</author>
      <pubDate>Tue, 17 Aug 2021 06:39:32 +0000</pubDate>
      <link>https://dev.to/subincronj/angularjs-vs-angular-2-vs-angular-4-2ogg</link>
      <guid>https://dev.to/subincronj/angularjs-vs-angular-2-vs-angular-4-2ogg</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;The advances that empower the Internet will in general change, advance and advance at quick velocities, as prerequisites change and engineers fabricate better forms of the product. Angular is a for example, with wide changes in only a couple of years. Google created AngularJS in 2009 and variant 1.0 was delivered in 2012. Angular has since overwhelmed the universe of open-source JavaScript structures, with the excited help and inescapable reception among the two ventures and people. Accordingly, Angular has developed from the AngularJS adaptation 1.0 to Angular variant 2.0 and presently the most recent Angular form 4.0, all in only five years. Read more about an &lt;a href="https://www.cronj.com/angularjs-development-company.html"&gt;AngularJS Development Company&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In spite of the expected advantages of the updates, some in the Angular people group have worries about moving to a more up to date form. Continue to peruse to discover what has changed in Angular and why moving to the most recent variant is a smart thought. &lt;/p&gt;

&lt;p&gt;In this article we will cover the accompanying points that will give you clear comprehension of the contrasts between AngularJS, Angular 2 and Angular 4 and the sky is the limit from there, including: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Sorts of Angular renditions &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Distinction among AngularJs and Angular Versions &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Benefits and hindrances of AngularJs and Angular Versions &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Expert the front-end development and gain inside and out information on Angular ideas with the Angular Certification Training course. Look at now. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#angular-versions"&gt;
  &lt;/a&gt;
  Angular Versions
&lt;/h2&gt;

&lt;p&gt;Before we jump into the distinctions, how about we initially explain each angular adaptation with a depiction: &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#angularjs"&gt;
  &lt;/a&gt;
  AngularJS
&lt;/h3&gt;

&lt;p&gt;is an open-source, JavaScript-based, front-end web application structure for dynamic web application development. It uses HTML as a format language. By expanding HTML ascribes with orders and restricting information to HTML with articulations, AngularJS establishes a climate that is lucid, uncommonly expressive and speedy to create. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#angular-2"&gt;
  &lt;/a&gt;
  Angular 2
&lt;/h3&gt;

&lt;p&gt;is the sweeping term used to allude to Angular 2, Angular 4 and any remaining forms that come after AngularJS. Both Angular 2 and 4 are open-source, TypeScript-based front-end web application stages. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#angular-4"&gt;
  &lt;/a&gt;
  Angular 4
&lt;/h3&gt;

&lt;p&gt;is the most recent adaptation of Angular. Albeit Angular 2 was a finished rework of AngularJS, there are no significant contrasts between Angular 2 and Angular 4. Angular 4 is just an improvement and is in reverse viable with Angular 2. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#distinction-between-angularjs-and-angular-versions"&gt;
  &lt;/a&gt;
  Distinction Between AngularJs and Angular Versions
&lt;/h1&gt;

&lt;p&gt;The following is an examination of AngularJS to Angular, on the grounds that Angular incorporates both rendition 2 and adaptation 4. We look at design, language, articulation linguistic structure, portable help, and directing. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-design"&gt;
  &lt;/a&gt;
  1. Design
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#angularjs"&gt;
  &lt;/a&gt;
  AngularJS
&lt;/h4&gt;

&lt;p&gt;The engineering of AngularJS depends on the model-see regulator (MVC) plan. The model is the focal part that communicates the application's conduct and deals with its information, rationale, and rules. The view produces a yield dependent on the data in the model. The regulator acknowledges input, changes over it into orders and sends the orders to the model and the view. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#angular-2"&gt;
  &lt;/a&gt;
  Angular 2
&lt;/h4&gt;

&lt;p&gt;In Angular 2, regulators and $scope were supplanted by parts and mandates. Parts are mandates with a format. They manage a perspective on the application and rationale on the page. There are two sorts of mandates in Angular 2. These are underlying mandates that adjust the design of the DOM by eliminating and supplanting its components, and attributive orders that change the conduct or presence of a DOM component. &lt;/p&gt;

&lt;p&gt;In Angular 4, the underlying subsidiaries ngIf and ngFor have been improved, and you can utilize if/else plan punctuation in your formats. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-language"&gt;
  &lt;/a&gt;
  2. Language
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#angularjs"&gt;
  &lt;/a&gt;
  AngularJS
&lt;/h4&gt;

&lt;p&gt;AngularJS is written in JavaScript. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#angular-variants"&gt;
  &lt;/a&gt;
  Angular variants
&lt;/h4&gt;

&lt;p&gt;Angular utilizations Microsoft's TypeScript language, which is a superset of ECMAScript 6 (ES6). This enjoys the consolidated benefits of the TypeScript highlights, similar to type affirmations, and the advantages of ES6, as iterators and lambdas. &lt;/p&gt;

&lt;p&gt;Angular 4 is viable with the latest adaptations of TypeScript that have amazing sort checking and object-arranged elements. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-expression-syntax"&gt;
  &lt;/a&gt;
  3. Expression Syntax
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#angularjs"&gt;
  &lt;/a&gt;
  AngularJS
&lt;/h4&gt;

&lt;p&gt;To tie a picture/property or an occasion with AngularJS, you need to recall the right ng mandate. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#angular-adaptations"&gt;
  &lt;/a&gt;
  Angular adaptations
&lt;/h4&gt;

&lt;p&gt;Angular spotlights on "( )" for occasion restricting and "[ ]" for property restricting. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-mobile-support"&gt;
  &lt;/a&gt;
  4. Mobile Support
&lt;/h2&gt;

&lt;p&gt;AngularJS was not worked considering versatile help, however Angular 2 and 4 both element portable help. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-routing"&gt;
  &lt;/a&gt;
  5. Routing
&lt;/h2&gt;

&lt;p&gt;AngularJS utilizes $routeprovider.when() to design steering while Angular utilizations @RouteConfig{(… )}. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h1&gt;

&lt;p&gt;AngularJS was initially produced for designers not developers. Despite the fact that there were a couple of transformative enhancements in its plan, they were adequately not to satisfy designer prerequisites. The later forms, Angular 2 and Angular 4, have been moved up to give a general improvement in execution, particularly in speed and reliance infusion. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-speed"&gt;
  &lt;/a&gt;
  1. Speed
&lt;/h2&gt;

&lt;p&gt;By giving elements like 2-way restricting, AngularJS diminished the development exertion and time. In any case, by making more preparing on the customer side, page load was taking impressive time. Angular2 gives a superior construction to all the more effectively make and keep up with large applications and a superior change recognition component. Angular 4 is the quickest form yet. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-dependency-injection"&gt;
  &lt;/a&gt;
  2. Dependency Injection
&lt;/h2&gt;

&lt;p&gt;Angular executes unidirectional tree-based change discovery and utilizations the Hierarchical Dependency Injection framework. This essentially supports execution for the structure. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#benefits-and-disadvantages-comparison"&gt;
  &lt;/a&gt;
  Benefits and Disadvantages Comparison
&lt;/h1&gt;

&lt;p&gt;Since they are Google items, all Angular forms are reliable and appreciate incredible help from Google engineers and the enormous local area of Angular clients and designers. Nonetheless, each angular rendition enjoys its own benefits and weaknesses. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-angularjs"&gt;
  &lt;/a&gt;
  1. AngularJS
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#advantage"&gt;
  &lt;/a&gt;
  Advantage
&lt;/h3&gt;

&lt;p&gt;It is unit trying prepared. &lt;/p&gt;

&lt;p&gt;It has incredible MVC information restricting that makes application development quick. &lt;/p&gt;

&lt;p&gt;Utilizing HTML as an explanatory language makes it extremely natural. &lt;/p&gt;

&lt;p&gt;It is a thorough answer for quick front-end development since it needn't bother with some other structures or modules. &lt;/p&gt;

&lt;p&gt;AngularJS applications can run on each critical program and progressed cells including iOS and Android-based telephones and tablets. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disadvantage"&gt;
  &lt;/a&gt;
  Disadvantage
&lt;/h3&gt;

&lt;p&gt;It is huge and confounded because of the numerous methods of doing likewise. &lt;/p&gt;

&lt;p&gt;Executions scale inadequately. &lt;/p&gt;

&lt;p&gt;In the event that a client of an AngularJS application incapacitates JavaScript, only the essential page is noticeable. &lt;/p&gt;

&lt;p&gt;There's a slacking UI in case there are in excess of 200 watchers. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-angular-2"&gt;
  &lt;/a&gt;
  2. Angular 2
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#advantage"&gt;
  &lt;/a&gt;
  Advantage
&lt;/h3&gt;

&lt;p&gt;TypeScript permits code improvement utilizing the OOPS idea. &lt;/p&gt;

&lt;p&gt;It is portable situated. &lt;/p&gt;

&lt;p&gt;It has further developed reliance infusion and seclusion. &lt;/p&gt;

&lt;p&gt;It gives more decision to dialects like Dart, TypeScript, ES5, and ES6 for composing codes. &lt;/p&gt;

&lt;p&gt;It offers more straightforward steering. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disadvantage"&gt;
  &lt;/a&gt;
  Disadvantage
&lt;/h3&gt;

&lt;p&gt;It is more confounded to set up contrasted with AngularJS. &lt;/p&gt;

&lt;p&gt;It's wasteful on the off chance that you just need to make straightforward, little web applications. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-angular-4"&gt;
  &lt;/a&gt;
  3. Angular 4
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#advantage"&gt;
  &lt;/a&gt;
  Advantage
&lt;/h3&gt;

&lt;p&gt;It empowers a quick development measure. &lt;/p&gt;

&lt;p&gt;It's great for single-page web applications with a lengthy interface. &lt;/p&gt;

&lt;p&gt;Full TypeScript support helps in building cumbersome applications. &lt;/p&gt;

&lt;p&gt;Tests are not difficult to compose. &lt;/p&gt;

&lt;p&gt;A further developed View Engine creates less code in AOT mode. &lt;/p&gt;

&lt;p&gt;It has a modularized movement bundle. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disadvantage"&gt;
  &lt;/a&gt;
  Disadvantage
&lt;/h3&gt;

&lt;p&gt;It's lethargic while showing tremendous measures of information. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Clearly, AngularJS is as yet valuable or, in all likelihood everybody would have moved to Angular 2 or 4 at this point. Every rendition of Angular has critical advantages, however there is a lot to acquire in being fully informed regarding the most recent variant. Choose the best &lt;a href="https://www.cronj.com/angularjs-development-company.html"&gt;AngularJS Development Services&lt;/a&gt;. Angular is distinctly quicker than AngularJS, has a portable driven methodology, executes better with segments, and empowers smoother movement from prior adaptations. In case you are OK with one adaptation of Angular, changing to another ought to be simple for you—and certainly worth the work.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Block vs. Inline vs. Inline-Block</title>
      <author>Albert Chang</author>
      <pubDate>Tue, 17 Aug 2021 06:36:59 +0000</pubDate>
      <link>https://dev.to/a89529294/block-vs-inline-vs-inline-block-55j4</link>
      <guid>https://dev.to/a89529294/block-vs-inline-vs-inline-block-55j4</guid>
      <description>&lt;h3&gt;
  &lt;a href="#block"&gt;
  &lt;/a&gt;
  Block
&lt;/h3&gt;

&lt;p&gt;elements with &lt;code&gt;display: block;&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It occupies the entire horizontal space of its parent element.&lt;/li&gt;
&lt;li&gt;Always start on a new line.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most elements by default belongs to this category. For a complete list please refer to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements#elements"&gt;MDN list of block elements&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inline"&gt;
  &lt;/a&gt;
  Inline
&lt;/h3&gt;

&lt;p&gt;elements with &lt;code&gt;display: inline;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Does not start on a new line.&lt;/li&gt;
&lt;li&gt;Its width and height are determined by the content.&lt;/li&gt;
&lt;li&gt;Not affected by width, height, margin-top, margin-bottom properties.&lt;/li&gt;
&lt;li&gt;Affected by horizontal padding and margin.&lt;/li&gt;
&lt;li&gt;Affected by padding-top and padding-bottom, but only visually. Other elements will not respect the vertical paddings.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/a89529294/embed/zYwQPdQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;For a complete list of inline elements &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements#elements"&gt;MDN list of inline elements&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inlineblock"&gt;
  &lt;/a&gt;
  Inline-block
&lt;/h3&gt;

&lt;p&gt;elements with &lt;code&gt;display: inline-block&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An inline element that respects margin, width and height.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>[Part 1] Executing batch jobs in a multi-container environment using NodeJS and express.</title>
      <author>Mohammed Ali</author>
      <pubDate>Tue, 17 Aug 2021 06:36:35 +0000</pubDate>
      <link>https://dev.to/alichherawalla/part-1-executing-batch-jobs-in-a-multi-container-environment-using-nodejs-and-express-5h79</link>
      <guid>https://dev.to/alichherawalla/part-1-executing-batch-jobs-in-a-multi-container-environment-using-nodejs-and-express-5h79</guid>
      <description>&lt;p&gt;High internet adoption and penetration have made it necessary for backend applications to be built for scale. Scaling the infrastructure up/down dynamically based on traffic ensures that tech acts as an enabler for the business rather than a barrier. Scaling down in times of low load makes sure that we aren't wasting dollars in idle cycles. Growth should not be limited by tech.&lt;/p&gt;

&lt;p&gt;Most complex applications will require you to write a batch / CRON job at some point in time. &lt;/p&gt;

&lt;p&gt;When working with containerized applications and batch jobs you need to take care of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A job should be executed by only one container. 
If you have a batch job that is scheduled to run at 12 am every day, only one of the deployed containers should run it. Else it could lead to duplication, and/or unintended consequences. For example, a payments company has a batch job to send out payment reminders to customers whose bill is due. If each container runs the job, the user will be spammed with messages.&lt;/li&gt;
&lt;li&gt;The job status and queue shouldn't be tied to containers. 
By design, the orchestrater will spawn or kill containers based on the current load. Decoupling job queuing and status from the container allows the batch jobs to be agnostic of the container that will execute it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To fulfill the above requirements, we will hold the job queue and statuses of the jobs in Redis. The container will get the queue from Redis and will query it to get the status of the job. It will not execute the job if it is already being processed.&lt;/p&gt;

&lt;p&gt;This tutorial assumes that you have a good understanding of &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript"&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nodejs.org/en/docs/"&gt;Nodejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redis.io/"&gt;Redis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this 3-part series, you will&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create an endpoint that schedules a job (Part 1)&lt;/li&gt;
&lt;li&gt;Setup batch jobs to be executed at 12am (Part 2)&lt;/li&gt;
&lt;li&gt;Setup GraphQL subscriptions with Redis support (Part 3)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#starter-project"&gt;
  &lt;/a&gt;
  Starter Project
&lt;/h2&gt;

&lt;p&gt;Please clone the following repository: &lt;a href="https://github.com/wednesday-solutions/node-express-batch-jobs-starter"&gt;https://github.com/wednesday-solutions/node-express-batch-jobs-starter&lt;/a&gt;&lt;a href="https://github.com/wednesday-solutions/postman-tests-starter"&gt;.&lt;/a&gt; It contains a fully functional GraphQL Node express server.&lt;/p&gt;

&lt;p&gt;Note: If you're not familiar with GraphQL please take a few minutes to read the spec here.(&lt;a href="https://graphql.org/"&gt;https://graphql.org/&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup-redis-locally"&gt;
  &lt;/a&gt;
  Setup Redis locally
&lt;/h3&gt;

&lt;p&gt;In this step, we will install and set up Redis locally and make sure that our application is able to connect to it. We will be creating queues using Bull (&lt;a href="https://optimalbits.github.io/bull/"&gt;https://optimalbits.github.io/bull/&lt;/a&gt;) to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;process scheduled jobs&lt;/li&gt;
&lt;li&gt;execute a job at midnight&lt;/li&gt;
&lt;li&gt;publish an automated notification every minute&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Install Redis locally. If you're using a mac you can use homebrew to install it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew update
brew install redis
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Start Redis using the command below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew services start redis
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To install and set up Redis for Windows/Linux systems please take a look at the relevant links&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://flaviocopes.com/redis-installation/"&gt;https://flaviocopes.com/redis-installation/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/divshekhar/how-to-install-redis-on-windows-10-3e99"&gt;https://dev.to/divshekhar/how-to-install-redis-on-windows-10-3e99&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;br&gt;
Install &lt;code&gt;bull&lt;/code&gt; and &lt;code&gt;string-replace-loader&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add bull string-replace-loader
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add this rule to the &lt;strong&gt;webpack.server.config.js&lt;/strong&gt;. Without this bull will not be able to find the &lt;strong&gt;.lua&lt;/strong&gt; files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = (options = {}) =&amp;gt; ({
  mode: options.mode,
  entry: options.entry,
  optimization: options.optimization,
  module: {
    rules: [
      ...,
      {
        test: /node_modules\/bull\/lib\/commands\/index\.js$/,
        use: {
          loader: 'string-replace-loader',
          options: {
            search: '__dirname',
            replace: `"${path.dirname(require.resolve('bull'))}/lib/commands"`
          }
        }
      },
      ...,
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Add the following values in the &lt;code&gt;.env.local&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;REDIS_DOMAIN=localhost
REDIS_PORT=6379
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create the &lt;code&gt;server/utils/queue.js&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch server/utils/queue.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the code below to it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Bull from 'bull';
import moment from 'moment';
const queues = {};

// 1
export const QUEUE_NAMES = {
  SCHEDULE_JOB: 'scheduleJob'
};

// 2
export const QUEUE_PROCESSORS = {
  [QUEUE_NAMES.SCHEDULE_JOB]: (job, done) =&amp;gt; {
    console.log(`${moment()}::Job with id: ${job.id} is being executed.\n`, {
      message: job.data.message
    });
    done();
  }
};
// 3
export const initQueues = () =&amp;gt; {
  console.log('init queues');
  Object.keys(QUEUE_PROCESSORS).forEach(queueName =&amp;gt; {
      // 4
      queues[queueName] = getQueue(queueName);
      // 5
      queues[queueName].process(QUEUE_PROCESSORS[queueName]);
  });
};

export const getQueue = queueName =&amp;gt; {
  if (!queues[queueName]) {
    queues[queueName] = new Bull(queueName, `redis://${process.env.REDIS_DOMAIN}:${process.env.REDIS_PORT}`);
    console.log('created queue: ', queueName, `redis://${process.env.REDIS_DOMAIN}:${process.env.REDIS_PORT}`);
  }
  return queues[queueName];
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Create a constant for queue names&lt;/li&gt;
&lt;li&gt;Associate the processors with the queues.&lt;/li&gt;
&lt;li&gt;Initialize all the queues in the &lt;code&gt;initQueues&lt;/code&gt; method. Iterate over all the keys in queue processors.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;getQueue&lt;/code&gt; will create a queue with &lt;code&gt;queueName&lt;/code&gt; if it's not already present and return it.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;queues[queueName].process(QUEUE_PROCESSORS[queueName]);&lt;/code&gt; will attach the functions in the &lt;code&gt;QUEUE_PROCESSORS&lt;/code&gt; to process jobs from the appropriate queue.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To initialize your queues&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;import &lt;code&gt;initQueues&lt;/code&gt; in the &lt;code&gt;server/index.js&lt;/code&gt; file
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { initQueues } from '@utils/queue';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;invoke &lt;code&gt;initQueues&lt;/code&gt; like so
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...

export const init = () =&amp;gt; {
  ...
  if (!isTestEnv()) {
    app.listen(9000);
    initQueues();
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;setup the database and run the app using &lt;code&gt;./setup-local.sh&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;If the db is already setup and you just need to run the application use &lt;code&gt;yarn start:local&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2QrItdDB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/095r22wj2sv9wbs3idoi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2QrItdDB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/095r22wj2sv9wbs3idoi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should see the above logs in your console. &lt;/p&gt;

&lt;p&gt;Commit your code using the following git commands&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .
git commit -m 'Local redis setup done'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#write-mutation-for-job-scheduling"&gt;
  &lt;/a&gt;
  Write mutation for job scheduling
&lt;/h2&gt;

&lt;p&gt;In this step, we will expose a mutation called &lt;code&gt;scheduleJob.&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a new file for the job scheduler&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir -p server/gql/custom
touch server/gql/custom/scheduleJobMutation.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Copy the snippet below in the newly created file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { GraphQLNonNull, GraphQLObjectType, GraphQLString, GraphQLInt, GraphQLBoolean } from 'graphql';

export const scheduleJob = {
  type: new GraphQLObjectType({
    name: 'ScheduleJob',
    fields: () =&amp;gt; ({
      success: {
        type: GraphQLNonNull(GraphQLBoolean),
        description: 'Returns true if the job was scheduled successfully'
      }
    })
  }),
  args: {
    scheduleIn: {
      type: GraphQLNonNull(GraphQLInt),
      description: 'Milliseconds from now that the job should be scheduled'
    },
    message: {
      type: GraphQLNonNull(GraphQLString),
      description: 'Message that should be consoled in the scheduled job'
    }
  },
  async resolve(source, args, context, info) {
    // since currently there is no logic to schedule the job
    // this will always return false
    return { success: false };
  },
  description: 'Schedule a job that will be executed in ${scheduleIn} milliseconds. This job will console ${message}.'
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This  mutation will accept two input parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;scheduleIn&lt;/code&gt; represents the time in milliseconds that the job is scheduled to execute in from now.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;message&lt;/code&gt; represents the message to be logged when the job is executed.
We will use the value of &lt;code&gt;scheduleIn&lt;/code&gt; to &lt;code&gt;delay&lt;/code&gt; the execution of the job added to the queue. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the job is scheduled successfully the mutation will return &lt;code&gt;{ success: true }&lt;/code&gt; else it will return &lt;code&gt;{ success: false }&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now we need to expose the mutation. We can do this by adding the following code to the &lt;code&gt;gql/mutations.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { scheduleJob } from '@gql/custom/scheduleJobMutation';
...
...

export const addMutations = () =&amp;gt; {
  ...
  ...
  // custom mutations
  mutations.scheduleJob = scheduleJob;
  return mutations;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now start the application using &lt;code&gt;yarn start:local&lt;/code&gt;  . Go to &lt;a href="http://localhost:9000/graphql"&gt;&lt;code&gt;http://localhost:9000/graphql&lt;/code&gt;&lt;/a&gt; in the browser. Click on &lt;code&gt;Docs&lt;/code&gt; on the top right. Search for &lt;code&gt;ScheduleJob&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FMNtgeNL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ycwvqze1vaqhz6ydx3e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FMNtgeNL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ycwvqze1vaqhz6ydx3e.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N0OKgY0w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zuzocdf3ujtndvvzb4r1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N0OKgY0w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zuzocdf3ujtndvvzb4r1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;&lt;br&gt;
Add the following snippet in the left pane.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mutation ScheduleJob {
  scheduleJob(scheduleIn: 2000, message: "This message should be consoled at the scheduled time") {
    success
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hit &lt;strong&gt;Play&lt;/strong&gt; on the top left. You can also hit &lt;strong&gt;CMD + Enter&lt;/strong&gt; to execute the request.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--apO1QhsN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/42pgd9tlmoqsnhxpm5fs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--apO1QhsN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/42pgd9tlmoqsnhxpm5fs.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The API will respond with &lt;code&gt;{ success: false }&lt;/code&gt; since we haven't added the logic for scheduling the job. We'll get to that in a bit&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "data": {
    "scheduleJob": {
      "success": false
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;&lt;br&gt;
Now we will add the logic to schedule the job when the mutation is invoked. Paste the snippet below in the resolve function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import moment from 'moment';
import { getQueue, QUEUE_NAMES } from '@utils/queue';
...
...

async resolve(source, args, context, info) {
    // 1
    return getQueue(QUEUE_NAMES.SCHEDULE_JOB)
      .add({ message: args.message }, { delay: args.scheduleIn })
      .then(job =&amp;gt; {
        // 2
        console.log(`${moment()}::Job with id: ${job.id} scheduled in ${args.scheduleIn} milliseconds`);
        return { success: true };
      })
      .catch(err =&amp;gt; {
        console.log(err);
        return { success: false };
      });
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;We get the queue by its name&lt;/li&gt;
&lt;li&gt;we return &lt;code&gt;{ success: true }&lt;/code&gt; if there are no errors while scheduling. 
Else we return &lt;code&gt;{ success: false }&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xvxQOQNY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7c1g22pztmktp0keosuo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xvxQOQNY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7c1g22pztmktp0keosuo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yay! You've created a mutation that schedules jobs to be executed after a set amount of time. Now test out your newly created scheduler by changing the value of &lt;code&gt;scheduleIn&lt;/code&gt; and &lt;code&gt;message&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Commit your code using the following git commands&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .
git commit -m 'Add mutation to schedule Job'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#where-to-go-from-here"&gt;
  &lt;/a&gt;
  Where to go from here
&lt;/h2&gt;

&lt;p&gt;You now have the ability to schedule jobs so that they are executed in a specific amount of time!&lt;/p&gt;

&lt;p&gt;I hope you enjoyed reading this article as much as I enjoyed writing it. If this peaked your interest stay tuned for the next article in the series where I will take you through how to schedule a CRON job that executes at 12 am every day in a multi-container environment. &lt;/p&gt;

&lt;p&gt;If you have any questions or comments, please join the forum discussion below.&lt;/p&gt;

&lt;p&gt;➤This blog was originally posted on &lt;a href="https://wednesday.is"&gt;https://wednesday.is&lt;/a&gt; To know more about what it’s like to work with Wednesday follow us on: &lt;a href="https://www.instagram.com/wednesday.sol/"&gt;Instagram&lt;/a&gt;|&lt;a href="https://twitter.com/wednesdaysol"&gt;Twitter&lt;/a&gt;|&lt;a href="https://www.linkedin.com/company/wednesday-solutions"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>redis</category>
      <category>javascript</category>
      <category>docker</category>
    </item>
    <item>
      <title>Best Css Library For Developer</title>
      <author>Jjaawja</author>
      <pubDate>Tue, 17 Aug 2021 06:31:24 +0000</pubDate>
      <link>https://dev.to/jjaawja/best-css-library-for-developer-bjp</link>
      <guid>https://dev.to/jjaawja/best-css-library-for-developer-bjp</guid>
      <description>&lt;p&gt;Web Developers used to spend a lot of time creating beautiful CSS. Thanks to the CSS libraries, we now have a better, faster, and more effective way to build responsive websites and web applications.&lt;/p&gt;
&lt;p&gt;Are you still looking for the best CSS libraries? Do you want to know which library you should try? In this article, we have 20 best CSS libraries for your inspiration.&lt;/p&gt;
&lt;h2&gt;
&lt;br&gt;
&lt;a href="https://dev.to/chetan_atrawalkar/20-best-css3-library-for-developers-58p#how-do-css-libraries-work"&gt;&lt;/a&gt;🤔 How do CSS libraries work?&lt;/h2&gt;
&lt;p&gt;CSS library gives web developers a basic structure, which includes grid, interactive UI patterns, web typography, tooltips, buttons, form elements, icons. This structure helps web developers to start quickly and efficiently when they are designing a website or web applications.&lt;/p&gt;
&lt;p&gt;Here we have put together &lt;span&gt;20 best CSS libraries.&lt;/span&gt; We hope you like them, and most importantly, find the best one for your needs.&lt;/p&gt;
&lt;h4&gt;
&lt;br&gt;
&lt;a href="https://dev.to/chetan_atrawalkar/20-best-css3-library-for-developers-58p#lets-go"&gt;&lt;/a&gt;Let's go....🤩&lt;/h4&gt;
&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/20-best-css3-library-for-developers/&amp;amp;ved=2ahUKEwii76qFzaPyAhWvyzgGHX9RA-kQFnoECAMQBQ&amp;amp;usg=AOvVaw2AtoxfMkY_y5JPLB2VuSdV"&gt; Best CSS3 Library For Developers&lt;/a&gt;&lt;/b&gt;.

</description>
    </item>
    <item>
      <title>Learning Python- Intermediate course: Day 9, Complex numbers part 1</title>
      <author>Aatmaj</author>
      <pubDate>Tue, 17 Aug 2021 06:24:47 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-intermediate-course-day-9-complex-numbers-part-1-2pkh</link>
      <guid>https://dev.to/aatmaj/learning-python-intermediate-course-day-9-complex-numbers-part-1-2pkh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-we-will-learn-about-complex-numbers-in-python-by-importing-the-raw-cmath-endraw-module"&gt;
  &lt;/a&gt;
  Today we will learn about complex numbers in Python by importing the &lt;code&gt;cmath&lt;/code&gt; module.
&lt;/h2&gt;




&lt;p&gt;Handling complex numbers in Python is very easy. We can easily do normal stuff like addition and subtraction, etc. without using any functions!. Complex numbers have their use in many applications related to Mathematics or algorithm based problems. They provide an excellent alternative to coordinates or vector systems.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;cmath&lt;/code&gt; module provides useful functions to handle complex numbers and their properties. The good thing is that the module is already inbuilt and preinstalled in Python. So no need to download and install any third party add-ons! The &lt;code&gt;cmath&lt;/code&gt; module is very similer to math module, but has the functionality to handle complex as well as real numbers. You will find the entire documentation &lt;a href="https://docs.python.org/3/library/cmath.html"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In case you want to check out how tedious it is to implement complex numbers in Java, you might like &lt;a href="https://github.com/Aatmaj-Zephyr/Complex-numbers/blob/34c51dbb570c50a93d386d5d6d45e5a3d2e6048d/Complex.java"&gt;this repository&lt;/a&gt;. This repository contains a class "Complex", which is the implementation of complex numbers. You can call the constructor to make complex numbers. This class also contains many useful methods to operate on complex numbers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-complex-numbers"&gt;
  &lt;/a&gt;
  Making complex numbers.
&lt;/h3&gt;

&lt;p&gt;We can make a complex number x+iy by using the following syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;complex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us now create a few complex numbers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cmath&lt;/span&gt; &lt;span class="c1"&gt;# importing "cmath" for complex number operations
&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;complex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;3j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#real-and-imaginary-parts-of-complex-numbers"&gt;
  &lt;/a&gt;
  Real and imaginary parts of Complex numbers.
&lt;/h3&gt;

&lt;p&gt;The real and the imaginary parts of the complex numbers can be obtained by &lt;code&gt;z.real&lt;/code&gt; and &lt;code&gt;z.img&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;real&lt;/span&gt;
&lt;span class="mf"&gt;2.0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imag&lt;/span&gt;
&lt;span class="mf"&gt;3.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us now see a full fledged program&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cmath&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="c1"&gt;# converting x and y into complex number
&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;complex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The real part of complex number is : "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;real&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The imaginary part of complex number is : "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;The real part of complex number is : 5.0
The imaginary part of complex number is : 3.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#operations-on-complex-numbers"&gt;
  &lt;/a&gt;
  Operations on Complex numbers.
&lt;/h3&gt;

&lt;p&gt;Let us now see how to do the usual operations on complex numbers. Those who are unfamiliar with math behind the operations may check &lt;a href="https://www.varsitytutors.com/hotmath/hotmath_help/topics/operations-with-complex-numbers"&gt;this&lt;/a&gt; out&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;complex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;complex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; 
&lt;span class="c1"&gt;# Adding two complex numbers
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;8j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; 
&lt;span class="c1"&gt;# Subtracting two complex numbers.
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="c1"&gt;# Multiplying complex number by a scalar
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;6j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; 
&lt;span class="c1"&gt;# Product of two complex numbers
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;22j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; 
&lt;span class="c1"&gt;# Scalar division of complex number
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;1.25j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; 
&lt;span class="c1"&gt;# Dividing two complex numbers
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5609756097560976&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;0.0487804878048781j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; 
&lt;span class="c1"&gt;# Reciprocal of a complex number.
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.09756097560975611&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.12195121951219513j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
 &lt;span class="c1"&gt;# Squaring a complex number
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;12j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="c1"&gt;# Complex number to a complex power
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.7530458367485594&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.9864287886477446j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; 
&lt;span class="c1"&gt;# Invalid operation of Dividing and rounding off complex numbers.
&lt;/span&gt;&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;stdin&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt;&lt;span class="s"&gt;'t take floor of complex number.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;So friends Tomorrow we will continue with the &lt;code&gt;cmath&lt;/code&gt; module and check out the inbuilt functions like &lt;code&gt;phase()&lt;/code&gt; &lt;code&gt;polar()&lt;/code&gt; and many others!&lt;br&gt;
😎 Please let me know in the comment section below 👇. And don't forget to like the post if you did. 😍 I am open to any suggestions or doubts. 🤠 Just post in the comments below or gmail me. 😉&lt;br&gt;
Thank you all👍&lt;/p&gt;

&lt;p&gt;Also please visit the &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python"&gt;Learning-Python repo&lt;/a&gt; made especially for this course and don't forget to star it too&lt;/p&gt;

</description>
      <category>learningpython</category>
      <category>python</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>GitHub Codespaces GA: Any Good? - Reviewed and Tested</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Tue, 17 Aug 2021 05:44:51 +0000</pubDate>
      <link>https://dev.to/github/github-codespaces-ga-any-good-reviewed-and-tested-3e62</link>
      <guid>https://dev.to/github/github-codespaces-ga-any-good-reviewed-and-tested-3e62</guid>
      <description>&lt;p&gt;GitHub has just released &lt;strong&gt;Codespaces in GA&lt;/strong&gt;, meaning that now it is &lt;strong&gt;available for everyone&lt;/strong&gt; (well, &lt;strong&gt;&lt;em&gt;almost everyone&lt;/em&gt;&lt;/strong&gt;, more on this later) and it's feature complete.&lt;/p&gt;

&lt;p&gt;In this article we will see how it works, what has been changed from the beta version, and all the new available features. And there are &lt;strong&gt;a lot of them&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;At the end, we will answer the question that many people have: &lt;strong&gt;is GitHub Codespaces worth it&lt;/strong&gt; or should you continue developing as you've done until now?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;I'm very excited because I've been waiting for this moment for a long time: GitHub Codespaces is finally GA!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zVm741H_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/achxk434w2qcaig27h45.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zVm741H_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/achxk434w2qcaig27h45.png" alt="Tweet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you've been following this blog or &lt;a href="https://youtube.com/CoderDave"&gt;my YouTube channel&lt;/a&gt; for a while you probably already know that I've covered Codespaces in the past quite a few times already (see this &lt;a href="https://youtube.com/playlist?list=PL-HoEl0ZEUlKDm-ws2KQP8np-4Km7MSda"&gt;YouTube Playlist&lt;/a&gt;), but always on the &lt;strong&gt;beta version&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Today I want to uncover with you all the feature that Codespaces has now that the GA version is available and see if and how the service has improved.&lt;/p&gt;

&lt;p&gt;We will cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What the Codespaces service is&lt;/li&gt;
&lt;li&gt;Availability&lt;/li&gt;
&lt;li&gt;The new creation experience&lt;/li&gt;
&lt;li&gt;Codespaces management&lt;/li&gt;
&lt;li&gt;Usage and new features&lt;/li&gt;
&lt;li&gt;Pricing and billing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And at the end we will answer the question we all have: &lt;strong&gt;&lt;em&gt;is it worthy&lt;/em&gt;&lt;/strong&gt;?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demo&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Car0QZ_YbxQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/Car0QZ_YbxQ"&gt;Link to the video: https://youtu.be/Car0QZ_YbxQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-github-codespaces"&gt;
  &lt;/a&gt;
  What is GitHub Codespaces
&lt;/h3&gt;

&lt;p&gt;So, real quick, what is GitHub Codespaces?&lt;/p&gt;

&lt;p&gt;Codespaces is a service that allow you to create and use &lt;strong&gt;cloud developer environments&lt;/strong&gt; backed by high performance Compute.&lt;/p&gt;

&lt;p&gt;Behind the scenes it uses full &lt;strong&gt;VSCode&lt;/strong&gt;, including  editor, terminal, debugger, version control, settings sync, and the entire ecosystem of extensions. You can even you GitHub Copilot.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qsc4r4FZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qf29hs1x03ec4jchvraz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qsc4r4FZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qf29hs1x03ec4jchvraz.png" alt="Codespaces"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Codespaces works directly in the browser, or you can connect from your PC via a local VSCode instance.&lt;/p&gt;

&lt;p&gt;New environments can be spun up in just seconds, and use &lt;strong&gt;up to 32 cores and 64 Gb of ram&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Codespaces environments are great because they can be &lt;strong&gt;customized and standardized&lt;/strong&gt; with runtimes, hardware specs, extensions, and settings on a user bases and on a &lt;strong&gt;repository bases&lt;/strong&gt;. This means that all the people working on a repository can have the &lt;strong&gt;exact same settings and requirements installed&lt;/strong&gt;, in just seconds.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#availability"&gt;
  &lt;/a&gt;
  Availability
&lt;/h3&gt;

&lt;p&gt;Ok, now we know what Codespaces does. Before we go further, let me address one thing: &lt;strong&gt;&lt;em&gt;the availability&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the opening I've mentioned that Codespaces is now in GA and therefore it's &lt;strong&gt;&lt;em&gt;available to everyone&lt;/em&gt;&lt;/strong&gt;. Unfortunately, &lt;strong&gt;it is not exactly like that&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Codespaces is in fact &lt;strong&gt;available for organizations&lt;/strong&gt; on either a &lt;strong&gt;Team&lt;/strong&gt; plan or GitHub &lt;strong&gt;Enterprise Cloud&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z4f5E6LR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d99mi3xnk5s6mxqq8q7t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z4f5E6LR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d99mi3xnk5s6mxqq8q7t.png" alt="Announcement"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, what about the users that are NOT in organizations or that don't have those plans?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X_rvmwlB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zn5rsdksy9bnsr4703fo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X_rvmwlB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zn5rsdksy9bnsr4703fo.png" alt="Individual Users"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Users that are already in the beta of Codespaces will retain access to it. But it is unclear if new users could access the beta. In general, &lt;strong&gt;seems like Codespaces will not be available to "normal" users&lt;/strong&gt;, at least for now.&lt;/p&gt;

&lt;p&gt;There is however &lt;strong&gt;another cool thing that is now available to everyone&lt;/strong&gt;, including the free users, and I will cover that in the next article/video... Consider following me here on Dev.to and subscribing to &lt;a href="https://youtube.com/CoderDave"&gt;my YouTube channel&lt;/a&gt; if you aren't already, you don't wanna miss that video.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-enable-codespaces"&gt;
  &lt;/a&gt;
  How to Enable Codespaces
&lt;/h3&gt;

&lt;p&gt;Alright, with that out of the way... Let's see how to enable Codespaces.&lt;/p&gt;

&lt;p&gt;Just go to your &lt;em&gt;Organization Settings&lt;/em&gt;, scroll down to &lt;em&gt;Codespaces&lt;/em&gt; and here you have it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vrbwAiv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rygddkc8db1kbi8u0kx5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vrbwAiv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rygddkc8db1kbi8u0kx5.png" alt="Enable Codespaces"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you can enable it for everyone, disable it, or enable Codespaces only for selected users.&lt;/p&gt;

&lt;p&gt;If you see the same message as in the image above, don't despair... GitHub is rolling out Codespaces gradually so you may have to wait just a few more days.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Watch &lt;a href="https://youtu.be/Car0QZ_YbxQ?t=206"&gt;this section of the video&lt;/a&gt; for a full demo of this&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#creation-of-codespaces-environments"&gt;
  &lt;/a&gt;
  Creation of Codespaces Environments
&lt;/h3&gt;

&lt;p&gt;Now that we have Codespaces enabled, let's see how it works and if the creation experience is any different from what it used to be before.&lt;/p&gt;

&lt;p&gt;Just go to any of your repos and click on the "&lt;em&gt;Code &amp;lt; &amp;gt;&lt;/em&gt;" button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z9Qtd5Lv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9l39dbv9bzwtqkjawjsh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z9Qtd5Lv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9l39dbv9bzwtqkjawjsh.png" alt="Creation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you have the new &lt;strong&gt;Codespaces&lt;/strong&gt; tab, in which you can create a new Codespaces Environment.&lt;/p&gt;

&lt;p&gt;If you are in an Organization with Codespaces enabled, you will be asked to select the size of your environment:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tvhs2uMP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hw03tg05ps8by6iwm0qf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tvhs2uMP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hw03tg05ps8by6iwm0qf.png" alt="Environment Size Selection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can pick any size from the minimum of 2 cores, 4 Gb of RAM, and 32 Gb of disk space all the way to the beefier configuration which has 32 corse, 64 Gb of RAM and 128 Gb of disk space (&lt;em&gt;Please note that the 32c/64gb configuration is not generally available, you'd need to contact GitHub support/sales to have it enabled on your Organization&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;If instead you are in the beta access program, the system will &lt;strong&gt;default&lt;/strong&gt; to the configuration with 4 cores, 8 Gb of Ram and 32 Gb of disk space, and you won't be able to change it.&lt;/p&gt;

&lt;p&gt;Apart from that, everything else is the same between the above 2 scenarios.&lt;/p&gt;

&lt;p&gt;And best of all, &lt;strong&gt;the creation of an environment is WAY faster&lt;/strong&gt; than it used to be, now your Codespaces environment is up and running in just &lt;strong&gt;seconds&lt;/strong&gt;!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Watch &lt;a href="https://youtu.be/Car0QZ_YbxQ?t=259"&gt;this section of the video&lt;/a&gt; for a full demo of this&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#codespaces-management"&gt;
  &lt;/a&gt;
  Codespaces Management
&lt;/h3&gt;

&lt;p&gt;You have now 2 ways to manage your Codespaces environments.&lt;/p&gt;

&lt;p&gt;The first and more immediate one is to go back to your repository, click again on "&lt;em&gt;Code &amp;lt; &amp;gt;&lt;/em&gt;" and access your environment from there.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iBpD2wX5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/db9wg47ceci1t1f348kq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iBpD2wX5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/db9wg47ceci1t1f348kq.png" alt="Access"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is not much you can currently do from here, just click to access the Codespaces interface.&lt;/p&gt;

&lt;p&gt;The other thing you can do, and which gives you &lt;strong&gt;full access to the management&lt;/strong&gt;, is either clicking on &lt;em&gt;__Manage all&lt;/em&gt;_ in the same section or go to &lt;em&gt;Profile&lt;/em&gt; &amp;gt; &lt;em&gt;Your Codespaces&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--axL8fu5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jtiu0dpxmk5jbno299hs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--axL8fu5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jtiu0dpxmk5jbno299hs.png" alt="My Codespaces Menu"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will take you to the &lt;strong&gt;Codespaces Management page&lt;/strong&gt; in which you can create a new Codespaces environment, access an existing one, open it in VSCode, export the changes made to a branch (&lt;em&gt;in case you have changes that haven't been committed nor pushed yet&lt;/em&gt;), change the size of your environment, and finally delete an unused one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--86vk2Fyd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9daxuadw4ixawcxiehh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--86vk2Fyd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9daxuadw4ixawcxiehh.png" alt="Management"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Watch &lt;a href="https://youtu.be/Car0QZ_YbxQ?t=479"&gt;this section of the video&lt;/a&gt; for a full demo of this&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#usage-and-new-features"&gt;
  &lt;/a&gt;
  Usage and New Features
&lt;/h3&gt;

&lt;p&gt;Right, let's see if Codespaces is any different while using it and explore the new features that have been introduced.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Watch &lt;a href="https://youtu.be/Car0QZ_YbxQ?t=572"&gt;this section of the video&lt;/a&gt; for a full demo of this&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#pricing-and-billing"&gt;
  &lt;/a&gt;
  Pricing and Billing
&lt;/h3&gt;

&lt;p&gt;Let's now talk about pricing.&lt;/p&gt;

&lt;p&gt;Codespaces is &lt;strong&gt;free to use&lt;/strong&gt; for all organizations on a GitHub Team or GitHub Enterprise Cloud plan &lt;strong&gt;until September 10, 2021&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ET47M4vb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lwzkxexutxsphkh1nw6m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ET47M4vb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lwzkxexutxsphkh1nw6m.png" alt="Free"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, Individual accounts which are part of &lt;strong&gt;the beta access are not currently billed&lt;/strong&gt; for Codespaces usage.&lt;/p&gt;

&lt;p&gt;After September 10, existing Codespaces environments &lt;strong&gt;will be billed for their active compute usage, and for the storage&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zpcMjWN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73neza6la1sxt95bb8d6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zpcMjWN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73neza6la1sxt95bb8d6.png" alt="Codespaces Prices"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the time of writing this video, these above are the prices the different Codespaces units will be billed. For your references, prices are shown in US Dollars.&lt;/p&gt;

&lt;p&gt;Remember that you will be billed for the &lt;strong&gt;CPU usage only when your Codespaces environments are active&lt;/strong&gt; (&lt;em&gt;aka not in the Sleeping state&lt;/em&gt;), and they will be billed by the minute. For the storage, instead, &lt;strong&gt;the space used will be billed for regardless of the state&lt;/strong&gt; of your environment.&lt;/p&gt;

&lt;p&gt;Last thing I want to mention about the billing is that after September 10 you will need to __setup a Spending Limit __on your organization to be able to use Codespaces.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ybNshFAW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qicfayiox3442vu29oe1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ybNshFAW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qicfayiox3442vu29oe1.png" alt="Spending Limit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By default, organizations will have a Codespaces &lt;strong&gt;spending limit of $0&lt;/strong&gt;, which prevents new Codespaces from being created or existing Codespaces from being opened.&lt;/p&gt;

&lt;p&gt;Remember to change that, or your users won't be happy 😁&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-github-codespaces-worth-it"&gt;
  &lt;/a&gt;
  Is GitHub Codespaces Worth It?
&lt;/h3&gt;

&lt;p&gt;Alright, it's now time to answer the &lt;strong&gt;big question&lt;/strong&gt; we have asked at the beginning: with all we have seen and talked about, &lt;strong&gt;&lt;em&gt;is GitHub Codespaces worthy or should I keep working the old way?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My verdict is: &lt;strong&gt;it is worthy&lt;/strong&gt;. We all know that Reconfiguring code editors, IDEs, environments, and installing dependencies suck, and require a lot of time and effort. GitHub Codespaces offers a full cloud development environment, helping you &lt;strong&gt;get started quickly&lt;/strong&gt; without cloning, installing dependencies, or tweaking configurations.&lt;/p&gt;

&lt;p&gt;Is GitHub Codespaces for everyone? Probably not. There are still frameworks and application types that are not fully supported.&lt;/p&gt;

&lt;p&gt;In General, though, I'd encourage you to look into it, &lt;strong&gt;evaluate it for yourself&lt;/strong&gt;, and start thinking about all the ways this service can help you, your team, and your organization being &lt;strong&gt;more productive&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;Alright, that's it for today.&lt;/p&gt;

&lt;p&gt;Let me know in the comment section below your thoughts about the GA of Codespaces, and &lt;strong&gt;if you have any questions&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As I've mentioned, consider following/subscribing if you want to know more about Codespaces because I will have soon other articles and videos about this service and specific use cases.&lt;/p&gt;

&lt;p&gt;You may also want to watch &lt;a href="https://youtu.be/q0wHjFXZe6I"&gt;this video&lt;/a&gt;, in which I explore using GitHub Codespaces from an iPad.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Car0QZ_YbxQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>codespaces</category>
      <category>cloud</category>
      <category>devops</category>
    </item>
    <item>
      <title>VS Code plugins to increase coding speed</title>
      <author>HariKrshnan</author>
      <pubDate>Tue, 17 Aug 2021 05:08:21 +0000</pubDate>
      <link>https://dev.to/harikrshnan/vs-code-plugins-to-increase-coding-speed-4469</link>
      <guid>https://dev.to/harikrshnan/vs-code-plugins-to-increase-coding-speed-4469</guid>
      <description>&lt;p&gt;Hey world, here is the list of plugins that I found helpful for react native developers to increase coding speed.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag"&gt;AutoRename Tag&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
    Since VS code will not rename the paired tag automatically, this plugin will help you solve that issue.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://plugins.jetbrains.com/plugin/12062-vscode-keymap"&gt;Intellij IDEA keymap&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
    If you are an android developer who recently migrated to react, learning new VS code shortcuts will be a tiresome job. And this plugin will be a life saver. It will allow you to use Intellij idea shortcuts in VS code without any further change.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;Git Lens&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
   Git lens plugin will enhance your VS code git capabilities with features like viewing authorship, code comparison and blaming, navigation between repositories, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync"&gt;Settings sync&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
   Next in the list, we have the settings sync to sync all our customizations, keyboard shortcuts, extensions, and other settings so that you don't need to waste your time on setting up your IDE next time. You can use your GitHub account token and gist to upload your file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks"&gt;Bookmarks&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
   Since VS code doesn't have an option to bookmark, this plugin will help you create bookmarks and navigate between them easily.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thanks for your minute :-), &lt;strong&gt;Happy coding!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>vscode</category>
      <category>react</category>
    </item>
    <item>
      <title>😃 Add Emoji Picker To An Input Field In React App [Easy way].</title>
      <author>Chetan Atrawalkar👉CA.</author>
      <pubDate>Tue, 17 Aug 2021 05:05:05 +0000</pubDate>
      <link>https://dev.to/chetan_atrawalkar/add-emoji-picker-to-an-input-field-in-react-app-easy-way-4g4e</link>
      <guid>https://dev.to/chetan_atrawalkar/add-emoji-picker-to-an-input-field-in-react-app-easy-way-4g4e</guid>
      <description>&lt;h3&gt;
  &lt;a href="#simple-and-easiest-way-to-add-an-emoji-picker-to-your-react-app"&gt;
  &lt;/a&gt;
  😯 Simple And Easiest way to add an emoji picker to your React app.
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Emojis&lt;/strong&gt; are now such an essential part of how we communicate that we simply can’t afford to leave them out of our applications. They add an extra dimension to how we express ourselves in our day-to-day interactions that can be otherwise difficult to do with text only🤪.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-add-an-emoji-picker-to-your-react-app"&gt;
  &lt;/a&gt;
  ▶️ How to add an emoji picker to your React App.
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;I’m using &lt;a href="https://cesarwbr.github.io/react-input-emoji/"&gt;react-input-emoji&lt;/a&gt; the best solution from my opinion.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;React InputEmoji&lt;/strong&gt; provides a simple way to have an input element with emoji picker support. Click the picker button next to the input field and select an emoji from the popup window. Done!
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q8lWLGti--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ufnx6g2rejw8nbcpa3da.jpg" alt="emoji"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;💠 Let's Checkout....&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-install"&gt;
  &lt;/a&gt;
  Step 1 :- Install
&lt;/h3&gt;

&lt;p&gt;You can get it on npm.&lt;br&gt;
&lt;strong&gt;&lt;code&gt;npm install react-input-emoji --save&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-2-usage"&gt;
  &lt;/a&gt;
  Step 2 :- Usage
&lt;/h3&gt;

&lt;p&gt;After install import the react-input-emoji component to display your input with emoji.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;InputEmoji&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-input-emoji&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setText&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleOnEnter&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;enter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;InputEmoji&lt;/span&gt;
          &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;cleanOnEnter&lt;/span&gt;
          &lt;span class="na"&gt;onEnter&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleOnEnter&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Type a message"&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output-"&gt;
  &lt;/a&gt;
  Output ⏬.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EvRofwl9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n3vrqg2yqi1sg0q7oa42.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EvRofwl9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n3vrqg2yqi1sg0q7oa42.jpg" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#click-here-for-more-details"&gt;
  &lt;/a&gt;
  &lt;a href="https://cesarwbr.github.io/react-input-emoji/"&gt;Click Here For More Details.&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;🙏Please share your valuable feedback in comment section what think about this.&lt;br&gt;
&lt;strong&gt;Don't forget to like and subscribe Keep Following 😉.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keep-claim-and-just-code-it-"&gt;
  &lt;/a&gt;
  Keep Claim And Just Code It 😎.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#support-with-coffee"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.buymeacoffee.com/chetan.ca"&gt;Support With Coffee ❤️&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>productivity</category>
    </item>
    <item>
      <title>TypeScript 4.4: The Good, The Bad and The Not So Bad</title>
      <author>OpenReplay Tech Blog</author>
      <pubDate>Tue, 17 Aug 2021 04:59:46 +0000</pubDate>
      <link>https://dev.to/asayerio_techblog/typescript-4-4-the-good-the-bad-and-the-not-so-bad-252m</link>
      <guid>https://dev.to/asayerio_techblog/typescript-4-4-the-good-the-bad-and-the-not-so-bad-252m</guid>
      <description>&lt;p&gt;&lt;em&gt;by author &lt;a href="https://blog.openreplay.com/authors/arek-nawo"&gt;Arek Nawo&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;On August 12th, &lt;strong&gt;TypeScript 4.4 Release Candidate&lt;/strong&gt; (RC) &lt;a href="https://devblogs.microsoft.com/typescript/announcing-typescript-4-4-rc/"&gt;was announced&lt;/a&gt;. This means that the changes have been finalized, and an official, stable release is coming shortly after a few additional bug fixes.&lt;/p&gt;

&lt;p&gt;Let’s go through what’s new, how it could impact your development experience, and how to give it a try right now!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#breaking-changes"&gt;
  &lt;/a&gt;
  Breaking changes
&lt;/h2&gt;

&lt;p&gt;We’ll start by summarising the &lt;a href="https://devblogs.microsoft.com/typescript/announcing-typescript-4-4-rc/#breaking-changes"&gt;breaking changes&lt;/a&gt;. In this release, there are a few of them that aren’t major but could still break your code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can no longer initialize &lt;code&gt;abstract&lt;/code&gt; properties inside &lt;code&gt;abstract&lt;/code&gt; classes. You can only define their type.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Promise&lt;/code&gt; checks have been improved. TS will now remind you to include &lt;code&gt;await&lt;/code&gt; when you’re &lt;code&gt;if&lt;/code&gt;-checking the &lt;code&gt;Promise&lt;/code&gt; results in more cases than before to prevent unintended always-truth checks.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;catch&lt;/code&gt; parameters are now &lt;code&gt;unknown&lt;/code&gt; instead of &lt;code&gt;any&lt;/code&gt; by default when either &lt;code&gt;\--strict&lt;/code&gt; or new &lt;code&gt;\--useUnknownInCatchVariables&lt;/code&gt; flag is on.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;this&lt;/code&gt; value is disregarded when calling imported functions to align with ECMAScript Modules specification on all available module systems (ESM, AMD, CommonJS, etc.)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;lib.d.ts&lt;/code&gt; has changed to be in line with current specifications (especially the &lt;code&gt;lib.dom.d.ts&lt;/code&gt; with all changes &lt;a href="https://github.com/microsoft/TypeScript-DOM-lib-generator/issues/1029#issuecomment-869224737"&gt;noted here&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that out of the way, let’s see what big new features you can expect!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#improved-type-guard-detection"&gt;
  &lt;/a&gt;
  Improved type guard detection
&lt;/h2&gt;

&lt;p&gt;Probably the most important feature of TypeScript 4.4 is &lt;em&gt;“control flow analysis of aliased conditions and discriminants”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;That means that from now on, &lt;strong&gt;aliased type guards&lt;/strong&gt;, even with discriminated unions, will be properly analyzed and used for narrowing the given type.&lt;/p&gt;

&lt;p&gt;In previous TS versions, the following wouldn’t work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Error&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toPrecision&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Error&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;isString&lt;/code&gt; condition wasn’t able to let TS know that, when it’s true, the &lt;code&gt;arg&lt;/code&gt; is a &lt;code&gt;string&lt;/code&gt;. As a result, TS gave an error when you used type-specific methods and properties, still thinking that &lt;code&gt;arg&lt;/code&gt;‘s type is &lt;code&gt;string | number&lt;/code&gt;. Only placing the condition in the &lt;code&gt;if&lt;/code&gt; statement directly was properly interpreted.&lt;/p&gt;

&lt;p&gt;With improved control flow analysis, that will no longer be an issue in TS 4.4. Furthermore, TS will also detect proper types when dealing with discriminated unions, even when performing checks on destructed properties!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Shape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;circle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;square&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;sideLength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Shape&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;kind&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isCircle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;kind&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;circle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// shape.kind === "circle" will also work&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isCircle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Circle&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// Square&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sideLength&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Up to a certain depth, TS will also recognize more complex, combined conditions and narrow the type accordingly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isStringOrNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isString&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;isNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isStringOrNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// string | number&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// boolean.&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These improvements are really great! TS developers will now be able to nicely layout and annotate complex conditions without putting everything in their &lt;code&gt;if&lt;/code&gt; statements or using direct type assertions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-versatile-index-signatures"&gt;
  &lt;/a&gt;
  More versatile index signatures
&lt;/h2&gt;

&lt;p&gt;Another great improvements have to do with index signatures. You’ll no longer be limited to just &lt;code&gt;number&lt;/code&gt; and &lt;code&gt;string&lt;/code&gt;. Now, &lt;code&gt;symbol&lt;/code&gt; and template string patterns will also be allowed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Colors&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sym&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;green&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;green&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;red&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;red&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// number&lt;/span&gt;
&lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;da ba dee&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Error&lt;/span&gt;
&lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// Error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;symbol&lt;/code&gt; index signatures are a nice addition. However, in my opinion, &lt;strong&gt;template string pattern&lt;/strong&gt; index signatures are much more interesting! This will let you narrow the index signature to a certain pattern, allowing for complex type definitions like never before!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`data-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;test1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;example&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data-test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;example&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;test2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data-test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;example&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// Error (no "a" and "b")&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;test3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;example&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;example&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// Error ("test" not accepted)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you’ve ever wanted to use index signature but narrow it down from general &lt;code&gt;string&lt;/code&gt;, this update will be huge for you!&lt;/p&gt;

&lt;p&gt;On top of all that, &lt;strong&gt;union index signatures&lt;/strong&gt; will also be allowed. Any combination of &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;symbol&lt;/code&gt;, and string template pattern is acceptable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#open-source-session-replay"&gt;
  &lt;/a&gt;
  Open Source Session Replay
&lt;/h2&gt;

&lt;p&gt;Debugging a web application in production may be challenging and time-consuming. &lt;a href="https://github.com/openreplay/openreplay"&gt;OpenReplay&lt;/a&gt; is an Open-source alternative to FullStory, LogRocket and Hotjar. It allows you to monitor and replay everything your users do and shows how your app behaves for every issue. &lt;br&gt;
It’s like having your browser’s inspector open while looking over your user’s shoulder.&lt;br&gt;
OpenReplay is the only open-source alternative currently available.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MvoFt7Qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/openreplay/openreplay/main/static/replayer.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MvoFt7Qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/openreplay/openreplay/main/static/replayer.png" alt="OpenReplay"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy debugging, for modern frontend teams - &lt;a href="https://github.com/openreplay/openreplay"&gt;Start monitoring your web app for free&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#exact-optional-property-types"&gt;
  &lt;/a&gt;
  Exact optional property types
&lt;/h2&gt;

&lt;p&gt;Apart from &lt;code&gt;\--useUnknownInCatchVariables&lt;/code&gt;, one more flag has been introduced - &lt;code&gt;\--exactOptionalPropertyTypes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With this flag turned on, TS will no longer allow initializing optional properties with &lt;code&gt;undefined&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;example&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Error if --exactOptionalPropertyTypes is turned on&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Such behavior determining whether the property actually is present on the object (with &lt;code&gt;undefined&lt;/code&gt; value or otherwise) is useful in several cases.&lt;/p&gt;

&lt;p&gt;When using, e.g., &lt;code&gt;Object.assign&lt;/code&gt;, or object spread (&lt;code&gt;{ …obj }&lt;/code&gt;), properties with &lt;code&gt;undefined&lt;/code&gt; are actually handled differently compared to truly non-existent properties. Depending on the implementation, the same can be true for your code as well.&lt;/p&gt;

&lt;p&gt;To allow for &lt;code&gt;undefined&lt;/code&gt; with &lt;code&gt;\--exactOptionalPropertyTypes&lt;/code&gt; turned on, you’ll have to explicitly include &lt;code&gt;undefined&lt;/code&gt; in a union type. Without the flag, such behavior is automatic.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;example&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Works correctly (even with --exactOptionalPropertyTypes on)&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because this flag can cause issues to arise in both your code and 3rd-party definitions (e.g., from DefinitelyTyped), it’s not included with &lt;code&gt;\--strict&lt;/code&gt; and thus is opt-in and non-breaking.&lt;/p&gt;

&lt;p&gt;If you feel like that could help in your codebase, turn on this flag, along with &lt;code&gt;\--strictNullChecks&lt;/code&gt; to opt-in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#static-blocks-in-classes"&gt;
  &lt;/a&gt;
  Static blocks in classes
&lt;/h2&gt;

&lt;p&gt;The last big new feature are &lt;code&gt;static&lt;/code&gt; blocks.&lt;/p&gt;

&lt;p&gt;It’s an upcoming ECMAScript feature that’s currently a &lt;a href="https://github.com/tc39/proposal-class-static-block"&gt;stage 3 proposal&lt;/a&gt;. &lt;code&gt;static&lt;/code&gt; blocks allow for a more complex initiation process of &lt;code&gt;static&lt;/code&gt; class members.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Static block&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someCondition&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Although the above was already possible, this feature makes the process simpler and much more elegant by allowing for the initiation block to be right inside the class definition.&lt;/p&gt;

&lt;p&gt;Previously, such logic had to be put outside of the class definition, making it feel separate and cumbersome.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someCondition&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Apart from that, &lt;code&gt;static&lt;/code&gt; blocks also have the advantage of allowing access to private static and instance fields (given how they’re part of the class’ definition), providing an opportunity for sharing their values with other classes or functions available in the same scope.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;exampleFunc&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;accessCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;initial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;exampleFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;accessCount&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;initial&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;exampleFunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;exampleFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#performance-improvements"&gt;
  &lt;/a&gt;
  Performance improvements
&lt;/h2&gt;

&lt;p&gt;Aside from new features and breaking changes, as always, there are a few notable &lt;a href="https://devblogs.microsoft.com/typescript/announcing-typescript-4-4-rc/#perf-improvements"&gt;performance improvements&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Faster declaration emits thanks to additional caching.&lt;/li&gt;
&lt;li&gt;Conditional path normalization reduces the time it takes the compiler to normalize paths it’s working with, thus loading faster.&lt;/li&gt;
&lt;li&gt;Faster path mapping for &lt;code&gt;paths&lt;/code&gt; in &lt;code&gt;tsconfig.json&lt;/code&gt;, thanks to additional caching, brings significant performance improvements.&lt;/li&gt;
&lt;li&gt;Faster incremental builds with &lt;code&gt;\--strict&lt;/code&gt; thanks to fixing a bug causing unnecessary type-checking on every subsequent build.&lt;/li&gt;
&lt;li&gt;Faster source map generation for big outputs&lt;/li&gt;
&lt;li&gt;Faster &lt;code&gt;\--force&lt;/code&gt; builds thanks to reduced unnecessary checks&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#intellisense-improvements"&gt;
  &lt;/a&gt;
  Intellisense improvements
&lt;/h2&gt;

&lt;p&gt;The area that TS is most well-known for - &lt;strong&gt;intellisense&lt;/strong&gt; (aka autocompletion/editor support) has also seen some improvement.&lt;/p&gt;

&lt;p&gt;As TS suggestions get more confident, from 4.4, it’ll automatically issue &lt;strong&gt;spelling suggestions for pure JavaScript&lt;/strong&gt; files without &lt;code&gt;checkJs&lt;/code&gt;, or &lt;code&gt;@ts-check&lt;/code&gt; turned on. These will be non-invasive, &lt;em&gt;“Did you mean…?”&lt;/em&gt; type of suggestions.&lt;/p&gt;

&lt;p&gt;For other visible improvements, TS can now show &lt;strong&gt;inline hints&lt;/strong&gt;, aka “ghost text”. This can apply to everything from parameter names to inferred return types.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u9EYRrvN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7c8reskbm6uuns5fz8b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u9EYRrvN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7c8reskbm6uuns5fz8b.png" alt="TypeScript inline hints"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also improved are &lt;strong&gt;suggested import paths&lt;/strong&gt;. Instead of unruly, relative paths like &lt;code&gt;node_modules/…&lt;/code&gt;, TS will display paths you actually use - like &lt;code&gt;react&lt;/code&gt; instead of &lt;code&gt;node_modules/react/..&lt;/code&gt; or something. A cosmetic, but welcomed change.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7jPBe4Rf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ft1t509n6stn2ze2nwx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7jPBe4Rf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ft1t509n6stn2ze2nwx.png" alt="Improved suggested import path"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-drive"&gt;
  &lt;/a&gt;
  Test drive
&lt;/h2&gt;

&lt;p&gt;With all these great features, you’re likely wondering when you’ll be able to use them.&lt;br&gt;
Your best bet would be to wait until stable release in the &lt;a href="https://devblogs.microsoft.com/typescript/announcing-typescript-4-4-rc/#whats-next"&gt;next few weeks&lt;/a&gt;. This way, you won’t have to deal with unresolved bugs and other issues.&lt;/p&gt;

&lt;p&gt;However, if you want to test drive the RC version right now, you can get it from &lt;a href="http://npmjs.com/package/typescript"&gt;NPM&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install typescript@rc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, if necessary, select it for use in your IDE/code editor of choice.&lt;/p&gt;

&lt;p&gt;Naturally, &lt;strong&gt;VS Code&lt;/strong&gt; would provide you with the best experience, and with &lt;a href="https://code.visualstudio.com/insiders/"&gt;VS Code Insiders&lt;/a&gt;, you’ll get the latest TS version out-of-the-box.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bottom-line"&gt;
  &lt;/a&gt;
  Bottom line
&lt;/h2&gt;

&lt;p&gt;So there you have it! Tons of improvements are coming with TS 4.4, and even more, are already planned.&lt;/p&gt;

&lt;p&gt;If you’re a TS user, this will be a good update for you. It’ll for sure improve your development experience even further than TS already does. And if you’re not already using TS, maybe it’s the right time for you to give it a try?&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Optimizing the Performance of Your Vue Apps Using Web Workers</title>
      <author>OpenReplay Tech Blog</author>
      <pubDate>Tue, 17 Aug 2021 04:58:48 +0000</pubDate>
      <link>https://dev.to/asayerio_techblog/optimizing-the-performance-of-your-vue-apps-using-web-workers-4h0b</link>
      <guid>https://dev.to/asayerio_techblog/optimizing-the-performance-of-your-vue-apps-using-web-workers-4h0b</guid>
      <description>&lt;p&gt;&lt;em&gt;by author &lt;a href="https://blog.openreplay.com/authors/uma-victor"&gt;Uma Victor&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Getting a Vue app to perform faster and smoother is one of the issues Vue.js software developers face. One way to do that is by offloading some heavy-duty work to another thread and allowing the main thread to handle the UI. But we can only do that with the help of web workers.&lt;/p&gt;

&lt;p&gt;In this article, we will talk about web workers, how to offload a task to a web worker and how to optimize our web application by hooking a web worker into it and the app workflow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-first-what-is-a-web-worker"&gt;
  &lt;/a&gt;
  But first, what is a web worker?
&lt;/h2&gt;

&lt;p&gt;Executing scripts on an &lt;code&gt;HTML&lt;/code&gt; page can sometimes be something to worry about as the page can become unresponsive depending on how heavy the javascript operations are. A web worker is javascript that runs in the background, not depending on other scripts, without affecting the page’s performance. Meaning you can go about performing normal operations on your site like clicking and basic navigation without experiencing unresponsiveness on the site.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#starting-project"&gt;
  &lt;/a&gt;
  Starting Project
&lt;/h2&gt;

&lt;p&gt;Let's see how easy it is to offload some of the work that you might be doing today inside your Vue application to a background thread. To do this, we are going to demo this by using the Vue CLI to generate the project, just a barebone project, then we are going to use a web worker to spin up a second thread. And to make that work with a webpack workflow that you might have or that you will have in the project.&lt;/p&gt;

&lt;p&gt;Once we have scaffolded our project with the Vue CLI, we will use the &lt;a href="https://webpack.js.org/loaders/worker-loader/"&gt;worker loader&lt;/a&gt;, to subscribe to a post message. The message will be sent within the threads, and to make things better we will be using &lt;code&gt;Comlink&lt;/code&gt; created by the chrome labs team.&lt;/p&gt;

&lt;p&gt;Let’s get going by first generating our project using the Vue CLI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vue create vueoptimize
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We will be using vue 2 instead of vue 3 for this task. It doesn’t matter which one you choose as it works the same way on both.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-our-application"&gt;
  &lt;/a&gt;
  Setting up our application
&lt;/h2&gt;

&lt;p&gt;Go into the application folder and open up your IDE. &lt;br&gt;
We have our standard vue application now ready, and we will create our demo app with it. But let's clean it up a little bit. We don't need the &lt;code&gt;HelloWorld&lt;/code&gt; component, we will also delete where we imported the &lt;code&gt;HelloWorld&lt;/code&gt; component, now our &lt;code&gt;App.vue&lt;/code&gt; is looking like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, this looks clean. We won't have to touch our &lt;code&gt;main.js&lt;/code&gt;  file as everything is there as it should be. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#service-worker-file"&gt;
  &lt;/a&gt;
  Service Worker file
&lt;/h2&gt;

&lt;p&gt;What we do next is we create a &lt;code&gt;worker.js&lt;/code&gt; file, where we program our workers. In this file, we have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;worker got, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use &lt;code&gt;self&lt;/code&gt; which represents the global of the worker. We then add an event listener that accepts a message argument and a callback function that logs the message we got from our event to the console&lt;br&gt;
Now to be able to use a worker inside our application, we will need to wrap it or we need to instantiate it somehow. So we will create a &lt;code&gt;worker-api.js&lt;/code&gt; file at the root of our application, and our project structure now looks like this.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+-- vueoptimize/
|   +-- Public/
|   +-- src/
|       +-- assets
|       +-- components/
|       +-- App.vue
|       +-- main.js
|   +-- babel.config.js
|   +-- .gitignore
|   +-- package-lock.json
|   +-- package.json
|   +-- README.md
|   +-- worker-api.js
|   +-- worker.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;To make use of the service worker, we need to instantiate it, so we install the worker loader library from &lt;code&gt;npm&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save-dev worker-loader  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our &lt;code&gt;worker-api.js&lt;/code&gt; file, we import the worker loader and instantiate it. Do not worry about the weird syntax for importing the worker loader as it’s the way the worker loader is imported according to the docs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Worker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;worker-loader!./worker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have our worker ready, and we would like to expose a method that sends messages to the worker. So above we can see we created the &lt;code&gt;sendMessage&lt;/code&gt; function and our function forwards the messages that we are getting.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;App.vue&lt;/code&gt; we will import the worker API, that we just exported from our &lt;code&gt;worker-api.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;click&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;postMessage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../worker-api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see above, we create a &lt;code&gt;postMessage&lt;/code&gt; method that uses the worker we imported to send messages. In our template we create an input field with a type of &lt;code&gt;text&lt;/code&gt; and  also a send message button, when clicked will run a &lt;code&gt;postMessage&lt;/code&gt; function in our methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-source-session-replay"&gt;
  &lt;/a&gt;
  Open Source Session Replay
&lt;/h2&gt;

&lt;p&gt;Debugging a web application in production may be challenging and time-consuming. &lt;a href="https://github.com/openreplay/openreplay"&gt;OpenReplay&lt;/a&gt; is an Open-source alternative to FullStory, LogRocket and Hotjar. It allows you to monitor and replay everything your users do and shows how your app behaves for every issue. &lt;br&gt;
It’s like having your browser’s inspector open while looking over your user’s shoulder.&lt;br&gt;
OpenReplay is the only open-source alternative currently available.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MvoFt7Qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/openreplay/openreplay/main/static/replayer.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MvoFt7Qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/openreplay/openreplay/main/static/replayer.png" alt="OpenReplay"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy debugging, for modern frontend teams - &lt;a href="https://github.com/openreplay/openreplay"&gt;Start monitoring your web app for free&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#application-look"&gt;
  &lt;/a&gt;
  Application Look
&lt;/h2&gt;

&lt;p&gt;Now let's see how our application looks. We run our project locally by starting our server&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn serve
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then open up the app at localhost port &lt;code&gt;8080&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FAl28oWE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60bfh9a178cpkudvw2kx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FAl28oWE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60bfh9a178cpkudvw2kx.png" alt="The look of the application so far"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we type in  anything in our input field and press the send message button, the worker will receive our message, and we will receive some data in our console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HzvK5hes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/irfg0ceizqr1qiackqxd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HzvK5hes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/irfg0ceizqr1qiackqxd.png" alt="The worker at work"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is not very useful now, but let’s continue, and do something with this and see where it leads.&lt;br&gt;
Back in our &lt;code&gt;worker.js&lt;/code&gt;, we will send back the data by doing a &lt;code&gt;postMessage&lt;/code&gt; &lt;br&gt;
function from our worker.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;worker got, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see that the data we are sending is just the data we got but in uppercase format.&lt;br&gt;
In our &lt;code&gt;worker-api.js&lt;/code&gt; file, we need to subscribe to the worker also, so we can get the message back. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#rebuild-webpack-pipeline"&gt;
  &lt;/a&gt;
  Rebuild webpack pipeline.
&lt;/h3&gt;

&lt;p&gt;If we add the following code after we instantiate our worker in the &lt;code&gt;worker-api.js&lt;/code&gt; file,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;we got back&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The worker gets rebuilt using the Webpack pipeline. If we type something in the input field now, we will see that we get it back in uppercase. But we still can’t make &lt;code&gt;postMessage&lt;/code&gt; calls back and forth within the main thread. You can build that yourself, but in this tutorial, we are going to use the &lt;code&gt;comlink&lt;/code&gt; package that was created by the Google Chrome team.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-comlink"&gt;
  &lt;/a&gt;
  Install Comlink
&lt;/h2&gt;

&lt;p&gt;According to the official &lt;a href="https://github.com/GoogleChromeLabs/comlink"&gt;Comlink Github&lt;/a&gt; repo and &lt;a href="https://www.npmjs.com/package/comlink"&gt;Comlink&lt;/a&gt; package on npm, Comlink is an abstraction around Web Workers that allows you to easily call back and forth from the main thread to the worker thread. Comlink makes &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API"&gt;WebWorkers&lt;/a&gt; enjoyable. Comlink is a &lt;strong&gt;tiny library (1.1kB)&lt;/strong&gt;, that removes the mental barrier of thinking about &lt;code&gt;postMessage&lt;/code&gt; and hides the fact that you are working with web workers.&lt;/p&gt;

&lt;p&gt;We can install the &lt;code&gt;comlink&lt;/code&gt; package by doing&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save comlink
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we've got that installed, let's hook it up inside the worker first, we have to do it on both the worker and worker-api file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// worker.js file&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Comlink&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;comlink&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;Comlink&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, we comment out the old code we have in this file, then we import the comlink package. We then create an &lt;code&gt;fns&lt;/code&gt; object that contains the functions we will be exposing as its properties. The first function we will expose is the &lt;code&gt;*toUpperCase*&lt;/code&gt; which returns whatever argument we pass it to uppercase.&lt;br&gt;
At the end of the file, we then exposed the &lt;code&gt;fns&lt;/code&gt; object using comlink. Now we will be able to use it in our &lt;code&gt;worker-api.js&lt;/code&gt; file.&lt;br&gt;
In the &lt;code&gt;worker-api.js&lt;/code&gt; file, we also import the comlink package and use it to wrap the worker that we instantiated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Worker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;worker-loader!./worker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Comlink&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;comlink&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Comlink&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Worker&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toUpperCase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we expose the &lt;code&gt;toUpperCase&lt;/code&gt; method in our worker by exporting it. This is the method we exposed with comlink in the worker.js file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-worker-in-our-app"&gt;
  &lt;/a&gt;
  Using the Worker in our App
&lt;/h2&gt;

&lt;p&gt;In our &lt;code&gt;App.vue&lt;/code&gt; file we will test out our worker, so we import the &lt;code&gt;toUpperCase&lt;/code&gt; method from our worker file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Vue logo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./assets/logo.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;click&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;postMessage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../worker-api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;uppercase result&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see from above that we have made the &lt;code&gt;postMessage&lt;/code&gt; function to be asynchronous and we expect a promise back. We assign a result variable to whatever gets returned from our promise and we log it into the console.&lt;br&gt;
If we reload our server and type in something into the input-form and submit, we can see the uppercase version of whatever we type. Now we have established a base for communication between workers. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#offloading-heavy-work"&gt;
  &lt;/a&gt;
  Offloading heavy work
&lt;/h2&gt;

&lt;p&gt;You might be wondering why we have done all this and what are the benefits. We will now try to perform some heavy operations that in a normal case scenario will cause performance issues. First, we want to mimic a normal case scenario where our app is working fine. We can do something like showing the current time as every second passes by.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Vue logo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./assets/logo.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;click&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;postMessage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;doHardWork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;result&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="nx"&gt;doHardWork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;performed hard work&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s create some heavy work in our app. In our &lt;code&gt;app.vue&lt;/code&gt; file above, we created a &lt;code&gt;doHardWork&lt;/code&gt; function in our methods that logs the message “performed hard work” to the console. This operation happens each time we click the send message button and the &lt;code&gt;postMessage&lt;/code&gt; function runs.&lt;br&gt;
We notice that as we click the button repeatedly the time we display freezes for a few seconds before it continues counting by the seconds. This is proof that the operation is affecting the performance of our site.  &lt;/p&gt;

&lt;p&gt;Now that we have confirmed it, let us move the &lt;code&gt;doHardWork&lt;/code&gt; function from our methods to our service worker file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// worker.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Comlink&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;comlink&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;doHardWork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;performed hard work&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;Comlink&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and in our &lt;code&gt;worker-api.js&lt;/code&gt; file, we export the &lt;code&gt;doHardWork&lt;/code&gt; from the worker&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doHardWork&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;doHardWork&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now remove the &lt;code&gt;doHardWork&lt;/code&gt; function from our methods in &lt;code&gt;app.vue&lt;/code&gt;, then import the &lt;code&gt;doHardWork&lt;/code&gt; method from the &lt;code&gt;worker-api.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;doHardWork&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../worker-api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;doHardWork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;result&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if we move back to our browser we notice that no matter how much we press the send message button, our browser doesn’t freeze and the time continues counting as usual. This is because of the heavy work, the calculation of the loop has been carried away into the background thread meaning we are not impacting Vue at all, leaving all the CPU power in the main thread to handle the UI.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/uma-victor1/vueoptimize"&gt;Github code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers"&gt;Using web workers&lt;/a&gt; by MDN&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleChromeLabs/comlink"&gt;Comlink Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://webpack.js.org/loaders/worker-loader/"&gt;Worker loader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We talked about what web workers are and how we can use them to optimize our vue app, we also learned how to offload tasks to our service workers. We discussed how we can hook up our web application to a service worker and leave the main thread to handle only UI related stuff. &lt;/p&gt;

&lt;p&gt;Thank you for reading and if you have a question to ask do not hesitate to send me  a message on &lt;a href="https://twitter.com/umavictor_"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>performance</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
