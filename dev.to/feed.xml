<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Microsoft Azure Data Fundamentals Cheat Sheet</title>
      <author>Rishita Shaw</author>
      <pubDate>Sat, 22 Jan 2022 15:51:07 +0000</pubDate>
      <link>https://dev.to/theseregrets/microsoft-azure-data-fundamentals-cheat-sheet-36kp</link>
      <guid>https://dev.to/theseregrets/microsoft-azure-data-fundamentals-cheat-sheet-36kp</guid>
      <description>&lt;p&gt;&lt;em&gt;Written with the collaborative effort of &lt;a href="http://linkedin.com/in/theseregrets"&gt;Rishita Shaw&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/igotabadidea/"&gt;Kumar Rahul&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This a cheat sheet for Microsoft Certified Exam DP-900: Microsoft Azure Data Fundamentals. &lt;br&gt;
This is not enough for preparation but it's definitely enough for revision.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vakksx1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxkcyp2b9w3kjnposbfv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vakksx1T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxkcyp2b9w3kjnposbfv.png" alt="Dp 900" width="600" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#module-1explore-core-data-concepts"&gt;
  &lt;/a&gt;
  Module 1(Explore core data concepts)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Data&lt;br&gt;
&lt;em&gt;Structured&lt;/em&gt;: relational databases (stored in SQL Server or Azure SQL Database)&lt;br&gt;
&lt;em&gt;Unstructured&lt;/em&gt;: audio and video files, and binary data files (BLOB)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Semistructured: key-value stores and graph databases(key-value database stores data as a single collection without structure or relation) (Azure cosmodb)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Access:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Read-only (management team of large org)&lt;/li&gt;
&lt;li&gt;read/write (customers)&lt;/li&gt;
&lt;li&gt;Ownership (db admin, Data analysts and data managers)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;em&gt;Data processing:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Transactional (oltp): Splitting tables out into separate groups of columns like this is called normalization it can make querying more complex.&lt;/li&gt;
&lt;li&gt;Analytical (oatp): big picture view of the information held in a database&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Relational db&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Non relational db&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A transaction is a sequence of operations that are atomic. This means that either all operations in the sequence must be completed successfully, or if something goes wrong, all operations run so far in the sequence must be undone. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ACID (Atomicity, Consistency, Isolation, Durability) &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Many systems implement relational consistency and isolation by applying locks to data when it is updated. The lock prevents another process from reading the data until the lock is released. The lock is only released when the transaction commits or rolls back.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Distributed db&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;eventual consistency.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Analytical workloads&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Batch processing and streaming&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Batch processing adv and disadv: adv(large vol, scheduled run) - disadv (time delay, minor issues can stop the process)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Diff b/w streaming and batch: data scope, size, performance(latency), analysis&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#module-2explore-roles-and-responsibilities-in-the-world-of-data"&gt;
  &lt;/a&gt;
  Module 2(Explore roles and responsibilities in the world of data)
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Data job role&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Database Administrators&lt;/em&gt; (operational aspects of on-premises and cloud-based database) manage databases, assign permissions to users, implement policies, manage security, storing backup copies of data and restoring data in case of any failures.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Data Engineers&lt;/em&gt; work with data, applying data cleaning routines and ingestion, identifying business rules, and turning data into useful information.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Data Analysts&lt;/em&gt; explore and analyze data to create visualizations and charts to enable organizations to make informed decisions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;TASK AND RESPONSIBILITY&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Db admin:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install, upgrade, db server &amp;amp; tools&lt;/li&gt;
&lt;li&gt;Allocating, controlling, monitoring and modifying storage &lt;/li&gt;
&lt;li&gt;Enrolling users and security&lt;/li&gt;
&lt;li&gt;Backup, restore and archive&lt;/li&gt;
&lt;li&gt;Generate reports&lt;/li&gt;
&lt;li&gt;Tools: SQL Server Management Studio, pgadmin, mysql workbench, azure data studio&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;em&gt;Data eng&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Developing, constructing, testing, acquisition, examining, automating and maintaining db and data&lt;/li&gt;
&lt;li&gt;Deploying sophisticated analytics programs, machine learning, and statistical methods.&lt;/li&gt;
&lt;li&gt;improve data reliability, efficiency, and quality and research&lt;/li&gt;
&lt;li&gt;Tools: Microsoft SQL Server , Azure SQL Database,  Azure Databricks, and Azure HDInsight , cosmodb&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;em&gt;Data Analyst&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating charts and graphs, histograms, geographical maps&lt;/li&gt;
&lt;li&gt;Transforming, improving, and integrating data&lt;/li&gt;
&lt;li&gt;Finding hidden patterns using data and delivering info by creating rich graphical dashboards and reports&lt;/li&gt;
&lt;li&gt;Tools: excel, power bi&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#module-3describe-concepts-of-relational-data"&gt;
  &lt;/a&gt;
  Module 3(Describe concepts of relational data)
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Relational db:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You design a relational db by creating a data model.
&lt;/li&gt;
&lt;li&gt;The primary key indicates the column (or combination of columns) that uniquely identify each row&lt;/li&gt;
&lt;li&gt;Foreign Key  are reference, or link to, the primary key of another table, and are used to maintain the relationships between tables&lt;/li&gt;
&lt;li&gt;All data is tabular. Entities are modeled as tables, each instance of an entity is a row in the table, and each property is defined as a column.&lt;/li&gt;
&lt;li&gt;All rows in the same table have the same set of columns. A table can contain any number of rows.&lt;/li&gt;
&lt;li&gt;Supports sql&lt;/li&gt;
&lt;li&gt;suited for OLTP applications&lt;/li&gt;
&lt;li&gt;Index&lt;/li&gt;
&lt;li&gt;contains a copy of this data in a sorted order, with pointers to the corresponding rows in the table and can create many indexes&lt;/li&gt;
&lt;li&gt;consume additional storage space and additional work can slow down operations and incur charges&lt;/li&gt;
&lt;li&gt;A clustered index physically reorganizes a table by the index key&lt;/li&gt;
&lt;li&gt;View&lt;/li&gt;
&lt;li&gt;virtual table based on the result set of a query
&lt;strong&gt;on-premises hosting vs cloud&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Iaas&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;installing and configuring the software, patching, taking backups, and restoring data&lt;/li&gt;
&lt;li&gt; virtual machine in the cloud&lt;/li&gt;
&lt;li&gt;&lt;p&gt;best for migrations and applications requiring operating system-level access&lt;br&gt;
&lt;strong&gt;PaaS&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Does not expose the underlying operating system and hardware to your applications&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Azure automatically creates the necessary virtual machines, networks, and other devices for your requirement&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Quickly handles this scaling for you,&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#module-4-explore-concepts-of-nonrelational-data"&gt;
  &lt;/a&gt;
  Module 4 (Explore concepts of non-relational data)
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Non relational db:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;enable you to store data in a very flexible manner&lt;/li&gt;
&lt;li&gt;don't impose a schema on data rather focus on the data itself&lt;/li&gt;
&lt;li&gt;store the information for entities in collections or containers&lt;/li&gt;
&lt;li&gt;Each entity should have a unique key value and are usually stored in key-value order&lt;/li&gt;
&lt;li&gt; advanced non-relational systems support indexing (Azure Cosmos DB )&lt;/li&gt;
&lt;li&gt;Semi structured:&lt;/li&gt;
&lt;li&gt;data that contains fields defined on a per-entity basis&lt;/li&gt;
&lt;li&gt;Json, Avro, ORC, and Parquet&lt;/li&gt;
&lt;li&gt;Avro is a row-based format. Each record contains a header(json) that describes the structure of the data(binary) in the record. &lt;/li&gt;
&lt;li&gt;ORC (Optimized Row Columnar format) organizes data into columns, Hive supports SQL-like queries over unstructured data&lt;/li&gt;
&lt;li&gt;Parquet is another columnar data format (row group)&lt;/li&gt;
&lt;li&gt;Unstructured data:&lt;/li&gt;
&lt;li&gt;store video and audio data as block blobs in an Azure Storage account&lt;/li&gt;
&lt;li&gt;A block blob only supports basic read and write operations.&lt;/li&gt;
&lt;li&gt;No sql&lt;/li&gt;
&lt;li&gt;key-value stores: &lt;/li&gt;
&lt;li&gt;key uniquely identifies the item, and the value(opaque) holds the data for the item. &lt;/li&gt;
&lt;li&gt;read and write data very quickly&lt;/li&gt;
&lt;li&gt; excellent choice for data ingestion&lt;/li&gt;
&lt;li&gt;Azure Table storage, cosmo db&lt;/li&gt;
&lt;li&gt;document databases:&lt;/li&gt;
&lt;li&gt;each document has a unique ID, but the fields in the documents are transparent to the dbms&lt;/li&gt;
&lt;li&gt;XML, YAML, JSON, BSON format or plain text&lt;/li&gt;
&lt;li&gt;enables you to query and filter data by using the values in these fields.&lt;/li&gt;
&lt;li&gt;Some create the document key automatically and support indexing to facilitate fast lookup&lt;/li&gt;
&lt;li&gt;Azure Cosmos DB implements a document database approach in its Core (SQL) API.&lt;/li&gt;
&lt;li&gt;column family databases:&lt;/li&gt;
&lt;li&gt; ORC and Parquet files&lt;/li&gt;
&lt;li&gt;denormalized approach to structuring sparse data&lt;/li&gt;
&lt;li&gt;column family database as holding tabular data comprising rows and columns, but you can divide the columns into groups known as column-families&lt;/li&gt;
&lt;li&gt;Apache Cassandra. Azure Cosmos DB supports the column-family approach through the Cassandra API.&lt;/li&gt;
&lt;li&gt;graph databases:&lt;/li&gt;
&lt;li&gt;store entities, but focuses on the relationships between entities&lt;/li&gt;
&lt;li&gt;nodes (entities), and edge (relationships between nodes)&lt;/li&gt;
&lt;li&gt;efficiently perform queries &lt;/li&gt;
&lt;li&gt;Azure Cosmos DB supports graph databases using the Gremlin API&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#module-5-explore-concepts-of-data-analytics-"&gt;
  &lt;/a&gt;
  Module 5: Explore concepts of data analytics :
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Data ingestion &lt;/li&gt;
&lt;li&gt;    Data Processing
&lt;/li&gt;
&lt;li&gt;    ELT and ETL&lt;/li&gt;
&lt;li&gt;    SQL Server Integration Services.and Azure Data Factory: Azure Data Factory is a cloud-based data integration service that allows you to create data-driven workflows for orchestrating data movement and transforming data at scale.&lt;/li&gt;
&lt;li&gt;ETL processes that transform data visually with data flows, or by using compute services such as Azure HDInsight Hadoop, Azure Databricks, and Azure SQL Database.&lt;/li&gt;
&lt;li&gt;Reporting&lt;/li&gt;
&lt;li&gt;Business Intelligence (BI)
&lt;/li&gt;
&lt;li&gt;Benchmarking: Comparison with other companies in the same industry.&lt;/li&gt;
&lt;li&gt;Data Visualization&lt;/li&gt;
&lt;li&gt;Most famous tool in Azure is Power BI for data visualization: you can connect to multiple different sources of data, and combine them into a data model&lt;/li&gt;
&lt;li&gt;Bar and column chart &lt;/li&gt;
&lt;li&gt;Line chart &lt;/li&gt;
&lt;li&gt;Matrix &lt;/li&gt;
&lt;li&gt;Key influencer &lt;/li&gt;
&lt;li&gt;Tree map &lt;/li&gt;
&lt;li&gt;Scatter&lt;/li&gt;
&lt;li&gt;Filed map&lt;/li&gt;
&lt;li&gt;Data analytics:&lt;/li&gt;
&lt;li&gt;Descriptive : what happened . By developing KPIs (Key Performance Indicators), these strategies can help track the success or failure of key objectives&lt;/li&gt;
&lt;li&gt;Diagnostic :why happened &lt;/li&gt;
&lt;li&gt;Predictive : what will happen in the future using neural networks, decision trees, and regression.&lt;/li&gt;
&lt;li&gt;Prescriptive: what action should we take to achieve a goal &lt;/li&gt;
&lt;li&gt;Cognitive: Cognitive analytics helps you to learn what might happen if circumstances change, and how you might handle these situations.It uses several NLP (Natural Language Processing) concepts to make sense of previously untapped data sources, such as call center conversation logs and product reviews.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#module-6-explore-relational-data-services-in-azure"&gt;
  &lt;/a&gt;
  Module 6: Explore relational data services in Azure:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Data base &lt;/li&gt;
&lt;li&gt;Stored procedure: A stored procedure is a block of code that runs inside your database.&lt;/li&gt;
&lt;li&gt;A linked server is a connection from one database server to another. SQL Server can use linked servers to run queries on one server that can include data retrieved from other servers; these are known as distributed queries.&lt;/li&gt;
&lt;li&gt;IAAS: Infrastructure as a service e.g: azure virtual network &lt;/li&gt;
&lt;li&gt;PAAS: Platform-as-a-service e.g: Azure SQL Databases &lt;/li&gt;
&lt;li&gt;SAAS:Software-as-a-Service, e.g office 365&lt;/li&gt;
&lt;li&gt;Azure Data Services: Azure Data Services fall into the PaaS category. These services are a series of DBMSs managed by Microsoft in the cloud. Each data service takes care of the configuration, day-to-day management, software updates, and security of the databases that it hosts. All you do is create your databases under the control of the data service.&lt;/li&gt;
&lt;li&gt;Most famous database service is Azure SQL database&lt;/li&gt;
&lt;li&gt;Azure Database for sql server&lt;/li&gt;
&lt;li&gt;                     MariaDB server &lt;/li&gt;
&lt;li&gt;            Postgre SQL server &lt;/li&gt;
&lt;li&gt;Microsoft also provide services for non relational dbms such as cosmos DB&lt;/li&gt;
&lt;li&gt;Azure Data Services ensure that your databases are available for at least 99.99% of the time.&lt;/li&gt;
&lt;li&gt;There are cost associated with the running database in azure data services&lt;/li&gt;
&lt;li&gt;Can;t shutdown the database and restart it later. This services are always on &lt;/li&gt;
&lt;li&gt;SQL Server on Azure Virtual Machines: SQL Server on Virtual Machines enables you to use full versions of SQL Server in the Cloud without having to manage any on-premises hardware.SQL Server running on an Azure virtual machine effectively replicates the database running on real on-premises hardware. Migrating from the system running on-premises to an Azure virtual machine&lt;/li&gt;
&lt;li&gt;  lift-and-shift refers to the way in which you can move a database directly from an on-premises&lt;/li&gt;
&lt;li&gt;   server to an Azure virtual machine without requiring that you make any changes to it.&lt;/li&gt;
&lt;li&gt;A hybrid deployment is a system where part of the operation runs on-premises, and part in the cloud&lt;/li&gt;
&lt;li&gt;Azure SQL Database :Azure SQL Database is a PaaS offering from Microsoft. You create a managed database server in the cloud, and then deploy your databases on this server.&lt;/li&gt;
&lt;li&gt;Single Database &lt;/li&gt;
&lt;li&gt;Elastic Pool database :This option is similar to Single Database, except that by default multiple databases can share the same resources, such as memory, data storage space, and processing power through multiple-tenancy.&lt;/li&gt;
&lt;li&gt;Managed instance &lt;/li&gt;
&lt;li&gt;Azure SQL Database is often used for:&lt;/li&gt;
&lt;li&gt;Modern cloud applications that need to use the latest stable SQL Server features.&lt;/li&gt;
&lt;li&gt;Applications that require high availability.&lt;/li&gt;
&lt;li&gt;Systems with a variable load, that need the database server to scale up and down quickly.&lt;/li&gt;
&lt;li&gt;SQL Database helps secure your data by providing encryption. For data in motion, it uses Transport Layer Security. For data at rest, it uses Transparent Data Encryption. For data in use, it uses Always Encrypted.&lt;/li&gt;
&lt;li&gt;Azure SQL Database Managed Instance:&lt;/li&gt;
&lt;li&gt;You have complete control over this instance, much as you would for an on-premises server. The Managed instance service automates backups, software patching, database monitoring, and other general tasks, but you have full control over security and resource allocation for your databases.Managed instances depend on other Azure services such as Azure Storage for backups, Azure Event Hubs for telemetry, Azure Active Directory for authentication, Azure Key Vault for Transparent Data Encryption (TDE) and a couple of Azure platform services that provide security and supportability features. The managed instances make connections to these services.&lt;/li&gt;
&lt;li&gt;MySQL:&lt;/li&gt;
&lt;li&gt;MariaDB: compatibility with oracle database, One notable feature of MariaDB is its built-in support for temporal data. A table can hold several versions of data, enabling an application to query the data as it appeared at some point in the past.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-postgresql"&gt;
  &lt;/a&gt;
  - PostgreSQL
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Azure Database for MySQL:&lt;/li&gt;
&lt;li&gt;High availability features built-in.&lt;/li&gt;
&lt;li&gt;Predictable performance.&lt;/li&gt;
&lt;li&gt;Easy scaling that responds quickly to demand.&lt;/li&gt;
&lt;li&gt;Secure data, both at rest and in motion.&lt;/li&gt;
&lt;li&gt;Automatic backups and point-in-time restore for the last 35 days.&lt;/li&gt;
&lt;li&gt;Enterprise-level security and compliance with legislation.&lt;/li&gt;
&lt;li&gt;Azure Database for MariaDB:&lt;/li&gt;
&lt;li&gt;Built-in high availability with no additional cost.&lt;/li&gt;
&lt;li&gt;Predictable performance, using inclusive pay-as-you-go pricing.&lt;/li&gt;
&lt;li&gt;Scaling as needed within seconds.&lt;/li&gt;
&lt;li&gt;Secured protection of sensitive data at rest and in motion.&lt;/li&gt;
&lt;li&gt;Automatic backups and point-in-time-restore for up to 35 days.&lt;/li&gt;
&lt;li&gt;Enterprise-grade security and compliance.&lt;/li&gt;
&lt;li&gt;Azure Database for PostgreSQL: same property as azure database for my sql. &lt;/li&gt;
&lt;li&gt;Azure Database for PostgreSQL single-server: Each tier supports different numbers of CPUs, memory, and storage sizes&lt;/li&gt;
&lt;li&gt;Azure Database for PostgreSQL Hyperscale (Citus): Data is split across nodes&lt;/li&gt;
&lt;li&gt;Use Azure database migration service to migrate on premise Mysql, mariaDB or postgresql to a database running the corresponding data services in Azure&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#module-7-explore-provisioning-and-deployment-in-database-service-in-azure"&gt;
  &lt;/a&gt;
  Module 7: Explore provisioning and deployment in database service in azure:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;What is Provisioning? :&lt;/li&gt;
&lt;li&gt;Provisioning is the act of running a series of tasks that a service provider, such as Azure SQL Database, performs to create and configure a service.&lt;/li&gt;
&lt;li&gt;The act of increasing (or decreasing) the resources used by a service is called scaling.&lt;/li&gt;
&lt;li&gt;Tools to provision services:&lt;/li&gt;
&lt;li&gt;Azure portal: Display list of service specific pages before actual provisioning &lt;/li&gt;
&lt;li&gt;Azure command line interface(CLI): basic command prompt and powershell command we run on windows to automate service creation.&lt;/li&gt;
&lt;li&gt;Azure Powershell&lt;/li&gt;
&lt;li&gt;Azure Resource manager templates: describes the service (or services) that you want to deploy in a text file, in a format known as JSON&lt;/li&gt;
&lt;li&gt;Provisioning in Azure SQL database&lt;/li&gt;
&lt;li&gt;Provisioning PostgreSQL and MySQL:&lt;/li&gt;
&lt;li&gt;  Hyperscale option for postgreSQL supports:&lt;/li&gt;
&lt;li&gt;Horizontal Scaling &lt;/li&gt;
&lt;li&gt;Query parallelization&lt;/li&gt;
&lt;li&gt; Excellent support for multi-tenant applications,&lt;/li&gt;
&lt;li&gt; real time operational analytics, and &lt;/li&gt;
&lt;li&gt;high throughput transactional workloads&lt;/li&gt;
&lt;li&gt;Configuring relational data services&lt;/li&gt;
&lt;li&gt;Configure connectivity and firewall &lt;/li&gt;
&lt;li&gt;Configure connectivity to virtual networks and on-premises computers&lt;/li&gt;
&lt;li&gt;Azure SQL Database communicates over port 1433&lt;/li&gt;
&lt;li&gt;A firewall rule of 0.0.0.0 enables all Azure services to pass through the server-level firewall rule and attempt to connect to a single or pooled database through the server.
&lt;/li&gt;
&lt;li&gt;Configure connectivity from private endpoints.&lt;/li&gt;
&lt;li&gt;Configure Authentication &lt;/li&gt;
&lt;li&gt;Configure access control: who or what can access your resources &lt;/li&gt;
&lt;li&gt;Role assignment consist of three elements:&lt;/li&gt;
&lt;li&gt;Security principle&lt;/li&gt;
&lt;li&gt;Role definition: Collection of permission &lt;/li&gt;
&lt;li&gt;Owner &lt;/li&gt;
&lt;li&gt;Contributor &lt;/li&gt;
&lt;li&gt;Reader &lt;/li&gt;
&lt;li&gt;User access administrator &lt;/li&gt;
&lt;li&gt;Scope : lists set of resources that the access applies to &lt;/li&gt;
&lt;li&gt;You add role assignments to a resource in the Azure portal using the Access control (IAM) page&lt;/li&gt;
&lt;li&gt;Configure advance data security &lt;/li&gt;
&lt;li&gt;Configure Azure SQL Database&lt;/li&gt;
&lt;li&gt;An ACL(access control list) contains a list of resources, and the objects (users, computers, and applications) that are allowed to access those resources&lt;/li&gt;
&lt;li&gt;Connectivity from within Azure&lt;/li&gt;
&lt;li&gt;Connectivity from outside azure &lt;/li&gt;
&lt;li&gt;Configure DoS(Denial of Service) guard: DoSGuard actively tracks failed logins from IP addresses&lt;/li&gt;
&lt;li&gt;Configure Azure  Database for PostgreSQL: Connections to your Azure Database for PostgreSQL server communicate over port 5432&lt;/li&gt;
&lt;li&gt;Configure read replicas : replicate data from an Azure Database for PostgreSQL server to a read-only server&lt;/li&gt;
&lt;li&gt;Configure Azure  Database for MySQL&lt;/li&gt;
&lt;li&gt;Configure server parameter &lt;/li&gt;
&lt;li&gt;Configure read replicas: same as postgreSQL
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#module-8-query-relational-data-in-azure"&gt;
  &lt;/a&gt;
  Module 8: Query relational data in azure:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;SQL: structured query language&lt;/li&gt;
&lt;li&gt;Transact-SQL (T-SQL). This version of SQL is used by Microsoft SQL Server and Azure SQL Database.&lt;/li&gt;
&lt;li&gt;pgSQL. This is the dialect, with extensions implemented in PostgreSQL.&lt;/li&gt;
&lt;li&gt;PL/SQL. This is the dialect used by Oracle. PL/SQL stands for Procedural Language/SQL.&lt;/li&gt;
&lt;li&gt;Data Manipulation Language (DML): SELECT, INSERT, UPDATE, DELETE&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-data-definition-language-ddl-create-alter-drop-rename"&gt;
  &lt;/a&gt;
  - Data Definition Language (DDL):  CREATE, ALTER, DROP, RENAME
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Query relational data in Azure SQL Database&lt;/li&gt;
&lt;li&gt;Retrieve connection information for azure sql DB &lt;/li&gt;
&lt;li&gt;Use the azure portal to query a DB&lt;/li&gt;
&lt;li&gt;Use SQLCMD to query a database&lt;/li&gt;
&lt;li&gt;USe Azure data studio: Azure Data Studio is a graphical utility for creating and running SQL queries from your desktop&lt;/li&gt;
&lt;li&gt;SQL server management studio&lt;/li&gt;
&lt;li&gt;Use SQL Server Data Tools in Visual Studio&lt;/li&gt;
&lt;li&gt;Query relational data in Azure Database for PostgreSQL&lt;/li&gt;
&lt;li&gt;Retrieve connection information for Azure Database for PostgreSQL&lt;/li&gt;
&lt;li&gt;Use psql to query a database&lt;/li&gt;
&lt;li&gt;psql commands include:&lt;/li&gt;
&lt;li&gt;\l to list databases.&lt;/li&gt;
&lt;li&gt;\dt to list the tables in the current database.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-connect-to-postgresql-database-using-azure-data-studio"&gt;
  &lt;/a&gt;
  - Connect to PostgreSQL database using Azure Data Studio
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Query relational data in Azure Database for MySQL&lt;/li&gt;
&lt;li&gt;port : 3306&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#module-9-explore-nonrelational-data-offerings-in-azure"&gt;
  &lt;/a&gt;
  Module 9 (Explore non-relational data offerings in Azure)
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Azure Table Storage:&lt;/li&gt;
&lt;li&gt;items are referred to as rows(must have a key), and fields are known as columns&lt;/li&gt;
&lt;li&gt;store semi-structured data ( schemaless)&lt;/li&gt;
&lt;li&gt;Denormalized data&lt;/li&gt;
&lt;li&gt;splits a table into partitions. Partitioning is a mechanism for grouping related rows, based on a common property or partition key&lt;/li&gt;
&lt;li&gt;Partitions are independent from each other&lt;/li&gt;
&lt;li&gt; you can include the partition key in the search criteria&lt;/li&gt;
&lt;li&gt;Items in the same partition are stored in row key order.&lt;/li&gt;
&lt;li&gt;quickly perform Point queries that identify a single row, and Range queries that fetch a contiguous block of rows in a partition&lt;/li&gt;
&lt;li&gt;The columns in a table can hold numeric, string, or binary data up to 64 KB in size. A table can have up to 252 columns, apart from the partition and row keys. The maximum row size is 1 MB&lt;/li&gt;
&lt;li&gt;Adv&lt;/li&gt;
&lt;li&gt; no need to map and maintain the complex relationships&lt;/li&gt;
&lt;li&gt;Fast operations like insertion deletion query&lt;/li&gt;
&lt;li&gt;Simple to scale&lt;/li&gt;
&lt;li&gt;Storing TBs of structured data capable of serving web scale applications&lt;/li&gt;
&lt;li&gt;Storing datasets that don't require complex joins, foreign keys, or stored procedures&lt;/li&gt;
&lt;li&gt;Capturing event logging and performance monitoring data&lt;/li&gt;
&lt;li&gt;Disadv&lt;/li&gt;
&lt;li&gt;Consistency isn’t guaranteed&lt;/li&gt;
&lt;li&gt;no referential integrity&lt;/li&gt;
&lt;li&gt;difficult to filter and sort on non-key data&lt;/li&gt;
&lt;li&gt;The data for each table is replicated three times within an Azure region. For increased availability&lt;/li&gt;
&lt;li&gt;transparently switch to a working replica while the failed replica is recovered&lt;/li&gt;
&lt;li&gt;configure security and role-based access control&lt;/li&gt;
&lt;li&gt;Azure Blob storage&lt;/li&gt;
&lt;li&gt;unstructured data, or blobs&lt;/li&gt;
&lt;li&gt;you create blobs inside containers&lt;/li&gt;
&lt;li&gt;Block blobs. handled as a set of blocks. used to store discrete, large, binary objects that change infrequently.&lt;/li&gt;
&lt;li&gt;Page blobs. organized as a collection of fixed size 512-byte pages. support random read and write operations, used to implement virtual disk storage for virtual machines&lt;/li&gt;
&lt;li&gt;Append blobs. a block blob optimized to support append operations updating or deleting existing blocks isn't supported&lt;/li&gt;
&lt;li&gt;Acces tiers&lt;/li&gt;
&lt;li&gt;The Hot tier is accessed frequently. data is stored on high-performance media.&lt;/li&gt;
&lt;li&gt;The Cool tier. has lower performance, accessed infrequently.&lt;/li&gt;
&lt;li&gt;The Archive tier. provides the lowest storage cost, but with increased latency for historical data that mustn't be lost, but is required only rarely,  stored in an offline state&lt;/li&gt;
&lt;li&gt; A lifecycle management policy can automatically move a blob from Hot to Cool, and then to the Archive tier, as it ages and is used less frequently&lt;/li&gt;
&lt;li&gt;Serving images or documents directly to a browser&lt;/li&gt;
&lt;li&gt;Storing data for backup and restore, disaster recovery, and archiving, analysis and distributed access&lt;/li&gt;
&lt;li&gt;Versioning&lt;/li&gt;
&lt;li&gt;Soft delete&lt;/li&gt;
&lt;li&gt;Snapshots&lt;/li&gt;
&lt;li&gt;Change Feed&lt;/li&gt;
&lt;li&gt;Azure File storage&lt;/li&gt;
&lt;li&gt;Create and access files shares in the cloud&lt;/li&gt;
&lt;li&gt;exposes file shares using the Server Message Block 3.0 (SMB) protocol&lt;/li&gt;
&lt;li&gt;tools such as the AzCopy utility or azure portal&lt;/li&gt;
&lt;li&gt;Services: standard and premium (greater throughput)&lt;/li&gt;
&lt;li&gt;Migrate existing applications to the cloud (access data using file-based APIs)&lt;/li&gt;
&lt;li&gt;Share server data across on-premises and cloud(leverage the availability, durability, scalability, and geo redundancy built into the Azure storage platform)&lt;/li&gt;
&lt;li&gt;Integrate modern applications with Azure File Storage (rest api)&lt;/li&gt;
&lt;li&gt;Simplify hosting High Availability (HA) workload data&lt;/li&gt;
&lt;li&gt;Azure Cosmos DB&lt;/li&gt;
&lt;li&gt;multi-model NoSQL dbms&lt;/li&gt;
&lt;li&gt;manages data as a partitioned set of documents(collection of fields, identified by a key)&lt;/li&gt;
&lt;li&gt;use JSON&lt;/li&gt;
&lt;li&gt;provides APIs that enable you to access these documents&lt;/li&gt;
&lt;li&gt;SQL API. provides a SQL-like query language over documents&lt;/li&gt;
&lt;li&gt;Table API. use the Azure Table Storage API to store and retrieve documents&lt;/li&gt;
&lt;li&gt;MongoDB API enable a MongoDB application to run unchanged against a Cosmos DB database&lt;/li&gt;
&lt;li&gt;Cassandra API column family database management system provides a Cassandra-like programmatic interface for Cosmos DB&lt;/li&gt;
&lt;li&gt;Gremlin API. implements a graph database interface to Cosmos DB&lt;/li&gt;
&lt;li&gt;Unlike Azure Table storage, documents in a Cosmos DB partition aren't sorted by ID Instead, Cosmos DB maintains a separate index. This index contains not only the document IDs, but also tracks the value of every other field in each document&lt;/li&gt;
&lt;li&gt;all databases are replicated within a single region&lt;/li&gt;
&lt;li&gt;replication is transparent, and failover from a failed replica is automatic&lt;/li&gt;
&lt;li&gt;guarantees less than 10-ms latencies for both reads (indexed) and writes at the 99th percentile, all around the world&lt;/li&gt;
&lt;li&gt;all data in Cosmos DB is encrypted at rest and in motion&lt;/li&gt;
&lt;li&gt;Module 10 (Explore provisioning and deploying non-relational data services in Azure)&lt;/li&gt;
&lt;li&gt;provisioning non-relational data services&lt;/li&gt;
&lt;li&gt;Provisioning is the act of running a series of tasks that a service provider, it is opaque. Parameters initially set can be later modified.&lt;/li&gt;
&lt;li&gt;Tools&lt;/li&gt;
&lt;li&gt;The Azure portal&lt;/li&gt;
&lt;li&gt;The Azure command-line interface (CLI): run command using cloud shell&lt;/li&gt;
&lt;li&gt;Azure PowerShell&lt;/li&gt;
&lt;li&gt;Azure Resource Manager templates (deploy in json)&lt;/li&gt;
&lt;li&gt;Provision Azure Cosmos DB&lt;/li&gt;
&lt;li&gt;Azure CLI, Azure PowerShell, or an Azure Resource Manager template&lt;/li&gt;
&lt;li&gt;Databases and containers are the primary resource(storage space) consumers&lt;/li&gt;
&lt;li&gt;uses the concept of Request Units per second (RU/s) to manage the performance and cost of databases&lt;/li&gt;
&lt;li&gt;If you underprovision (by specifying too few RU/s), Cosmos DB will start throttling performance&lt;/li&gt;
&lt;li&gt;configuring non-relational data services&lt;/li&gt;
&lt;li&gt;You can connect to these services from an on-premises network, the internet, or from within an Azure virtual network&lt;/li&gt;
&lt;li&gt;Azure Private Endpoint is a network interface that connects you privately and securely to a service powered by Azure Private Link&lt;/li&gt;
&lt;li&gt;Private endpoint connections page for a service allows you to specify which private endpoints, if any, are permitted access to your service&lt;/li&gt;
&lt;li&gt;Azure Active Directory (Azure AD) provides superior security and ease of use over access key authorization&lt;/li&gt;
&lt;li&gt;Configure access control&lt;/li&gt;
&lt;li&gt;Azure role-based access control&lt;/li&gt;
&lt;li&gt;Allow one user to manage virtual machines in a subscription and another user to manage virtual networks.&lt;/li&gt;
&lt;li&gt;Allow a database administrator group to manage SQL databases in a subscription.&lt;/li&gt;
&lt;li&gt;Allow a user to manage all resources in a resource group, such as virtual machines, websites, and subnets.&lt;/li&gt;
&lt;li&gt;Allow an application to access all resources in a resource group.&lt;/li&gt;
&lt;li&gt;security principal is an object that represents a user, group, service, or managed identity that is requesting access to Azure resources.&lt;/li&gt;
&lt;li&gt;role definition, often abbreviated to role, is a collection of permissions&lt;/li&gt;
&lt;li&gt;Owner&lt;/li&gt;
&lt;li&gt;Contributor&lt;/li&gt;
&lt;li&gt;Reader&lt;/li&gt;
&lt;li&gt;User Access Administrator&lt;/li&gt;
&lt;li&gt;scope lists the set of resources that the access applies to&lt;/li&gt;
&lt;li&gt;Tools: Access control (IAM) &lt;/li&gt;
&lt;li&gt;Configure consistency in cosmo db&lt;/li&gt;
&lt;li&gt;Eventual. least consistent Changes won't be lost, they'll appear eventually changes could appear out of order. lowest latency and least consistency&lt;/li&gt;
&lt;li&gt;Consistent Prefix. ensures that changes will appear in order, although there may be a delay before they become visible&lt;/li&gt;
&lt;li&gt;Session. If an application makes a number of changes, they'll all be visible to that application, and in order&lt;/li&gt;
&lt;li&gt;Bounded Staleness. There's a lag between writing and then reading the updated data&lt;/li&gt;
&lt;li&gt;Strong: In this case, all writes are only visible to clients after the changes are confirmed as written successfully to all replicas&lt;/li&gt;
&lt;li&gt;Configure shared access signatures&lt;/li&gt;
&lt;li&gt;use shared access signatures (SAS) to grant limited rights to resources in an Azure storage account for a specified time period&lt;/li&gt;
&lt;li&gt;access resources such as blobs and files, without requiring that they're authenticated first&lt;/li&gt;
&lt;li&gt;Module 11(Manage non-relational data stores in Azure)&lt;/li&gt;
&lt;li&gt;data operations in Cosmos DB&lt;/li&gt;
&lt;li&gt;Data Explorer in the Azure portal to run ad-hoc queries&lt;/li&gt;
&lt;li&gt;Cosmos DB Data Migration tool to perform a bulk-load or transfer of data&lt;/li&gt;
&lt;li&gt; Azure Data Factory to import data from another source&lt;/li&gt;
&lt;li&gt;custom application that imports data using the Cosmos DB BulkExecutor library (make use of multiple concurrent threads to batch your data into chunks and load the chunks in parallel)&lt;/li&gt;
&lt;li&gt;Create your own application that uses the functions available through the Cosmos DB SQL API client library&lt;/li&gt;
&lt;li&gt;insufficient throughput capacity configured results in https error 429&lt;/li&gt;
&lt;li&gt;Query Azure Cosmos DB&lt;/li&gt;
&lt;li&gt;The Cosmos DB SQL API supports a dialect of SQL for querying documents using SELECT statements&lt;/li&gt;
&lt;li&gt;Manage Azure File storage&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#module-12-examine-components-of-a-modern-data-warehouse-"&gt;
  &lt;/a&gt;
  Module 12: Examine components of a Modern data warehouse :
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The process of combining all of the local data or gathering data from many different  sources within an organization  is known as data warehousing.&lt;/li&gt;
&lt;li&gt;The process of analyzing streaming data and data from the Internet is known as Big Data analytics. &lt;/li&gt;
&lt;li&gt;Azure Synapse Analytics combines data warehousing with Big Data analytics.&lt;/li&gt;
&lt;li&gt;online analytical processing (OLAP)&lt;/li&gt;
&lt;li&gt;Modern data Warehousing : It contains a mixture of relational and non relational data like media files, social media streams or internet of things.&lt;/li&gt;
&lt;li&gt;Tools we can use: Azure Data Factory, Azure Data Lake Storage, Azure Databricks, Azure Synapse Analytics, and Azure Analysis Services, power BI is used to analyze and visualize the data, generating reports and charts.&lt;/li&gt;
&lt;li&gt;gathers data from many different sources within an organization&lt;/li&gt;
&lt;li&gt; provide answers to complex queries, unlike a traditional relational database&lt;/li&gt;
&lt;li&gt;handle big data&lt;/li&gt;
&lt;li&gt;contain a mixture of relational and non-relational data, including files, social media streams, and Internet of Things (IoT) sensor data&lt;/li&gt;
&lt;li&gt;Combine batch and stream process: upto the second data and historical data are important for a company. Upto the second data is generated by steam process and historical data is generated by batch process.&lt;/li&gt;
&lt;li&gt;Azure Data factory: its a data integration service. Purpose of the azure data factory is to retrieve data from one or more data sources and to convert it into the format that you process.&lt;/li&gt;
&lt;li&gt;Work performed by azure data factory is defined as pipeline of operations &lt;/li&gt;
&lt;li&gt;Azure Data Lake storage:&lt;/li&gt;
&lt;li&gt; It's a repository for Large Quantities of Raw data. &lt;/li&gt;
&lt;li&gt;Data is fast load and processed because its raw &amp;amp; unprocessed.&lt;/li&gt;
&lt;li&gt;A data warehouse holds structured information but a data lake stores raw data.&lt;/li&gt;
&lt;li&gt;It's an extension of Azure Blob storage.It organizes files into directories and sub directories but blob storage only mimics a directory structure.&lt;/li&gt;
&lt;li&gt;It supports POSIX( Portable Opening system interface) and compatible with HDFS (Hadoop distributed file system)&lt;/li&gt;
&lt;li&gt;Azure DataBricks:&lt;/li&gt;
&lt;li&gt;Azure Databricks is an Apache Spark environment running on Azure to provide big data processing, streaming, and machine learning.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-azure-databricks-provides-a-graphical-user-interface-where-you-can-define-and-test-your-processing-step-by-step-before-submitting-it-as-a-set-of-batch-tasks"&gt;
  &lt;/a&gt;
  - Azure Databricks provides a graphical user interface where you can define and test your processing step by step, before submitting it as a set of batch tasks.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Azure Synapse Analytics: &lt;/li&gt;
&lt;li&gt;It's an analytical engine. Design to process large data very quickly.&lt;/li&gt;
&lt;li&gt;Ingest data from external sources  and then transform and aggregate this data into a format suitable for analytics processing.its used to process data which we have read in and processed locally.&lt;/li&gt;
&lt;li&gt;Control node is the brain of architecture, like a front end which interacts with all applications. When we submit a process request it transforms it into smaller requests that run against distinct subsets of the data in parallel.&lt;/li&gt;
&lt;li&gt;We have to submit queries in Transact-SQL statements&lt;/li&gt;
&lt;li&gt;PolyBase enables you to retrieve data from relational and non-relational sources, such as delimited text files, Azure Blob Storage, and Azure Data Lake Storage.&lt;/li&gt;
&lt;li&gt;Azure Analysis Service &lt;/li&gt;
&lt;li&gt;Azure Analysis Services enables you to build tabular models to support online analytical processing (OLAP) queries. You can combine data from various sources (e.g lake , analytics , sql db, cosmos db).&lt;/li&gt;
&lt;li&gt;Difference between Analysis service and synapse analytics:&lt;/li&gt;
&lt;li&gt;Use Azure Synapse Analytics for:&lt;/li&gt;
&lt;li&gt;Very high volumes of data (multi-terabyte to petabyte sized datasets).&lt;/li&gt;
&lt;li&gt;Very complex queries and aggregations.&lt;/li&gt;
&lt;li&gt;Data mining, and data exploration.&lt;/li&gt;
&lt;li&gt;Complex ETL operations. ETL stands for Extract, Transform, and Load, and refers to the way in which you can retrieve raw data from multiple sources, convert this data into a standard format, and store it.&lt;/li&gt;
&lt;li&gt;Low to mid concurrency (128 users or fewer).&lt;/li&gt;
&lt;li&gt;Use Azure Analysis Services for:&lt;/li&gt;
&lt;li&gt;Smaller volumes of data (a few terabytes).&lt;/li&gt;
&lt;li&gt;Multiple sources that can be correlated.&lt;/li&gt;
&lt;li&gt;High read concurrency (thousands of users).&lt;/li&gt;
&lt;li&gt;Detailed analysis, and drilling into data, using functions in Power BI.&lt;/li&gt;
&lt;li&gt;Rapid dashboard development from tabular data.&lt;/li&gt;
&lt;li&gt;Azure HDInsight: Azure HDInsight is a big data processing service that provides the platform for technologies such as Spark in an Azure environment.&lt;/li&gt;
&lt;li&gt;Hadoop is an open source framework that breaks large data processing problems down into smaller chunks.&lt;/li&gt;
&lt;li&gt;Hive is a SQL-like query facility that you can use with an HDInsight cluster to examine data held in a variety of formats.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#module-13-explore-large-scale-data-analytics-"&gt;
  &lt;/a&gt;
  Module 13: Explore large scale data analytics  :
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Ingest data using Azure Data Factory&lt;/li&gt;
&lt;li&gt;HTAP(Hybrid transactional analytical processing): analyze operational data into original location.&lt;/li&gt;
&lt;li&gt;Orchestration is the process of directing and controlling other services, and connecting them together, to allow data to flow between them.&lt;/li&gt;
&lt;li&gt;A linked service provides the information needed for Data Factory to connect to a source or destination&lt;/li&gt;
&lt;li&gt;A dataset in Azure Data Factory represents the data that you want to ingest (input) or store (output). If the data is structured, the data set specifies how data is structured.&lt;/li&gt;
&lt;li&gt;A pipeline is a logical grouping of activities that together perform a task. The activities in a pipeline define actions to perform on your data. It includes a lot of activity like looping data in for each loop , can use if condition to execute the activity conditionally, can map input into different formats as per output is required. A trigger enables you to schedule a pipeline to occur according to a planned schedule&lt;/li&gt;
&lt;li&gt;Ingest data using PolyBase&lt;/li&gt;
&lt;li&gt;Polybase is a feature of SQL server &amp;amp; azure synapse analytics that enables you to run Transact-SQL queries that read data from external data sources.It makes external data appear like tables in a sql db.&lt;/li&gt;
&lt;li&gt;Azure SQL Database does not support PolyBase.&lt;/li&gt;
&lt;li&gt;Ingest data using SQL Server Integration Services&lt;/li&gt;
&lt;li&gt;SQL Server Integration Services (SSIS) is a platform for building enterprise-level data integration and data transformations solutions.It is used to solve complex business problems.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-ssis-can-extract-and-transform-data-from-a-wide-variety-of-sources-such-as-xml-data-files-flat-files-and-relational-data-sources-and-then-load-the-data-into-one-or-more-destinations"&gt;
  &lt;/a&gt;
  - SSIS can extract and transform data from a wide variety of sources such as XML data files, flat files, and relational data sources, and then load the data into one or more destinations.
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#module-14-get-started-building-with-power-bi"&gt;
  &lt;/a&gt;
  Module 14: Get started building with Power BI
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;collection of software services, apps, and connectors that work together to turn your unrelated sources of data into coherent, visually immersive, and interactive insights.&lt;/li&gt;
&lt;li&gt;Power BI Desktop, an online SaaS (Software as a Service)&lt;/li&gt;
&lt;li&gt;Use Power BI&lt;/li&gt;
&lt;li&gt;Bring data into Power BI Desktop, and create a report.&lt;/li&gt;
&lt;li&gt;Publish to the Power BI service, where you can create new visualizations or build dashboards.&lt;/li&gt;
&lt;li&gt;Share dashboards with others, especially people who are on the go.&lt;/li&gt;
&lt;li&gt;View and interact with shared dashboards and reports in Power BI Mobile apps.&lt;/li&gt;
&lt;li&gt;Building blocks of Power BI&lt;/li&gt;
&lt;li&gt;Visualizations&lt;/li&gt;
&lt;li&gt;Datasets&lt;/li&gt;
&lt;li&gt;Reports&lt;/li&gt;
&lt;li&gt;Dashboard&lt;/li&gt;
&lt;li&gt;Tiles&lt;/li&gt;
&lt;li&gt;app is a collection of preset, ready-made visuals and reports that are shared with an entire organization.&lt;/li&gt;
&lt;li&gt;Power BI can just as easily connect to a whole assortment of software services (also called SaaS providers or cloud services): Salesforce, Facebook, Google Analytics, and more.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>azure</category>
      <category>cloud</category>
      <category>tutorial</category>
      <category>career</category>
    </item>
    <item>
      <title>Best Animation Libraries for ReactJS</title>
      <author>Suraj Vishwakarma</author>
      <pubDate>Sat, 22 Jan 2022 15:31:18 +0000</pubDate>
      <link>https://dev.to/surajondev/best-animation-libraries-for-reactjs-2h34</link>
      <guid>https://dev.to/surajondev/best-animation-libraries-for-reactjs-2h34</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;ReactJS is the most popular and loved framework among web developers for developing the frontend. From the launch, it has seen only growth. There are tons of libraries on the web for ReactJS that made React more awesome.&lt;/p&gt;

&lt;p&gt;Today, we are going to look into some of the best animation libraries that will help you to create animation. These libraries are easy to install, learn and create animation.&lt;/p&gt;

&lt;p&gt;So let's get started.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#framer-motion"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.framer.com/motion/"&gt;Framer Motion&lt;/a&gt;
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;A production-ready motion library for React. Utilize the power behind Framer, the best prototyping tool for teams. Proudly open source.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N8QkMDQi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xeef623lsjakkcjm8x5r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N8QkMDQi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xeef623lsjakkcjm8x5r.png" alt="Framer Motion" width="342" height="147"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight batchfile"&gt;&lt;code&gt;&lt;span class="kd"&gt;npm&lt;/span&gt; &lt;span class="kd"&gt;i&lt;/span&gt; &lt;span class="kd"&gt;framer&lt;/span&gt;&lt;span class="na"&gt;-motion
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#imports"&gt;
  &lt;/a&gt;
  Imports
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { motion } from "framer-motion";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;In a &lt;code&gt;motion.div&lt;/code&gt; tag, you define the animation of the component.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;animate&lt;/strong&gt;:You define the properties of the animation here. These are CSS properties.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;transition&lt;/strong&gt;: You define the transition properties here. Such as repeat, duration, etc.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;motion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
        &lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;borderRadius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;circle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#codesandbox-example"&gt;
  &lt;/a&gt;
  CodeSandbox Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/framer-motion-f5ynt"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#react-spring"&gt;
  &lt;/a&gt;
  &lt;a href="https://react-spring.io/"&gt;React Spring&lt;/a&gt;
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;react-spring is a spring-physics based animation library that should cover most of your UI related animation needs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hQAl4yWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rr3fjph26i0zzrgsyxd4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hQAl4yWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rr3fjph26i0zzrgsyxd4.jpg" alt="React Spring" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight batchfile"&gt;&lt;code&gt;&lt;span class="kd"&gt;npm&lt;/span&gt; &lt;span class="kd"&gt;i&lt;/span&gt; &lt;span class="kd"&gt;react&lt;/span&gt;&lt;span class="na"&gt;-spring
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#imports"&gt;
  &lt;/a&gt;
  Imports
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useSpring&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;animated&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-spring&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;We have imported two things useSpring and animated.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;useSpring&lt;/strong&gt;: We define all the properties of the animation and transition here. &lt;code&gt;from&lt;/code&gt; define the initial properties of the element and &lt;code&gt;to&lt;/code&gt; is the final properties.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;animate&lt;/strong&gt;: It is used to define the element for the transition. It works as a component that takes style as the defined animation in useSpring.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSpring&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;animated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;circle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/animated.div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#codesandbox-example"&gt;
  &lt;/a&gt;
  CodeSandbox Example
&lt;/h2&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/react-spring-wp4ni"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#react-motion"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/chenglou/react-motion"&gt;React Motion&lt;/a&gt;
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;A spring that solves your animation problems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FiVgQl85--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ki979me996eqp1bexmr5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FiVgQl85--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ki979me996eqp1bexmr5.png" alt="React Motion" width="880" height="337"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight batchfile"&gt;&lt;code&gt;&lt;span class="kd"&gt;npm&lt;/span&gt; &lt;span class="kd"&gt;i&lt;/span&gt; &lt;span class="kd"&gt;react&lt;/span&gt;&lt;span class="na"&gt;-motion
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#imports"&gt;
  &lt;/a&gt;
  Imports
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Motion&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;spring&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-motion&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Motion&lt;/strong&gt;: Every animation and property is wrapped inside the &lt;code&gt;Motion&lt;/code&gt; component. It contains the default style and animation properties using &lt;code&gt;spring&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Motion&lt;/span&gt;
        &lt;span class="nx"&gt;defaultStyle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
          &lt;span class="na"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
          &lt;span class="na"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;spring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;spring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;interpolatedStyles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
            &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
              &lt;span class="na"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`translateY(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;interpolatedStyles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px)`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;interpolatedStyles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
            &lt;span class="p"&gt;}}&lt;/span&gt;
            &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;circle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Motion&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#codesandbox-example"&gt;
  &lt;/a&gt;
  CodeSandbox Example
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Refersh to play the animation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/react-motion-7wzwj"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#last-note"&gt;
  &lt;/a&gt;
  Last Note
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;These are 3 Animation libraries for ReactJS that I like and use in my project for animation.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I hope you will try to use one of the libraries in your next project. Thanks for reading the post.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>css</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Create Ozark's title animation with Greensock (GSAP)</title>
      <author>Rob OLeary</author>
      <pubDate>Sat, 22 Jan 2022 15:22:50 +0000</pubDate>
      <link>https://dev.to/robole/create-ozarks-title-animation-with-greensock-gsap-166k</link>
      <guid>https://dev.to/robole/create-ozarks-title-animation-with-greensock-gsap-166k</guid>
      <description>&lt;p&gt;To mark the occasion of the TV show &lt;a href="https://en.wikipedia.org/wiki/Ozark_(TV_series)"&gt;Ozark&lt;/a&gt; releasing its fourth season, I created the title sequence as a web animation. For some viewers, a show's title sequence is nothing more than a minute long segment to be skipped past,or used as an opportunity to squeeze in a quick activity before the show starts, but they are missing out in the case of Ozark. The show is known for its dynamic plot and stark imagery, and if you pay close attention to the show's brief title sequence, you can appreciate how it complements the tone of the show.&lt;/p&gt;

&lt;p&gt;It can be interesting to see how the internet dissects these kind of things. The first part of the title sequence is extremely simple: It's just the word "Ozark" in a regular font, a font so bland it led to Redditors to question the motives behind the choice. In a &lt;a href="https://old.reddit.com/r/Ozark/comments/intaqp/does_the_ozark_opening_sequence_font_bother/"&gt;thread entitled "Does the Ozark opening sequence font bother anyone else,"&lt;/a&gt; user &lt;em&gt;Suspicious_Earth&lt;/em&gt; asked the question, "Considering that Ozark is an incredibly well-made show with exceptionally great acting, writing, world-building, and directing...does the fact that the opening title credits use the MOST basic and generic font bother anyone else?" 😀&lt;/p&gt;

&lt;p&gt;I won't go there. The bit I like is the second part of the sequence, which introduces a large circle with 4 symbols forming inside. Upon first watch, the symbols that pop up in the middle of the circle may seem arbitrary, but after watching the episode, you can tie the symbols you see to themes, images, and plot devices of that episode. Some are straightforward and depict something the viewer will literally see later on, while others require some creative thinking to work out.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/robjoeol/embed/yLVZbwQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here is my animation of Season 1 Episode 1's title card. You can click on it to replay if you missed it.&lt;/p&gt;

&lt;p&gt;There is something else about the symbols that you may not have realized. The symbols form the outline of letters, which spell out the name of the show! The big circle is the letter O and inside you have Z A R K! And I recerntly discovered, but I haven't tried, that if you turn on audio subtitles while watching the title sequence on Netflix, it tells you exactly what the symbols are!&lt;/p&gt;

&lt;p&gt;If you want to see an image of the title cards for each episode for the first 2 seasons, along with a plot summary, you can check out this article, &lt;a href="https://decider.com/2017/08/18/netflix-meaning-behind-ozark-symbols/"&gt;Here’s What The Symbols in ‘Ozark’s Hypnotizing Opening Credits Mean&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;Ok, enough chatter, let's look at how to make the animation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The code
&lt;/h2&gt;

&lt;p&gt;I used &lt;a href="https://greensock.com/"&gt;Greensock (GSAP)&lt;/a&gt; for the animation. You could pull it off with CSS too, but I chose GSAP because I wanted an excuse to play with it.&lt;/p&gt;

&lt;p&gt;I drew the image for Season 1, Episode 1 title card as a SVG in Inkscape. When I was happy with its appearance, I inspected the SVG code and removed any &lt;code&gt;transform&lt;/code&gt; styles applied to elements. It can mess up animations when multiple transforms are applied to the same element.&lt;/p&gt;

&lt;p&gt;In theory the animation is quite simple, you are mostly just fading in the elements at different times, and at different rates.&lt;/p&gt;

&lt;p&gt;The outline of the sequence of events is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fade in the circle slowly,&lt;/li&gt;
&lt;li&gt;Begin extending the vertical line,&lt;/li&gt;
&lt;li&gt;Followed quickly by extending the horizontal line,&lt;/li&gt;
&lt;li&gt;After the lines are approxmiately 50% of their complete length, fade in the first symbol,&lt;/li&gt;
&lt;li&gt;When the first symbol has reached about 20% opacity, fade in the second symbol, and follow the same pattern with the next 2 symbols.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It takes some trial and error to find the right duration and eases for each part. GSAP has an &lt;a href="https://greensock.com/ease-visualizer"&gt;ease visulizer&lt;/a&gt; that is helpful to narrow the search down.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xy3rB06b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iug4g7mmmexeqq8uq1o3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xy3rB06b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iug4g7mmmexeqq8uq1o3.png" alt="gsap ease visualizer" width="746" height="691"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will animate the opacity of the circle and symbols, and we will animate &lt;code&gt;transform:scale&lt;/code&gt; for the lines. We animate &lt;code&gt;scaleY&lt;/code&gt; for the vertical line, and &lt;code&gt;scaleX&lt;/code&gt; for the horizontal line.&lt;/p&gt;

&lt;p&gt;This is not intended to be a tutorial on GSAP, you can jump into the &lt;a href="https://greensock.com/get-started/"&gt;Getting Start with GSAP guide&lt;/a&gt; if you are newcomer. However, there are a few bits I will point out that may help you when using GSAP for similar type of animations.&lt;/p&gt;

&lt;p&gt;In CSS, we set the opacity to zero for all our elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#o-letter&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.line&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.symbol&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the lines, we set the initial properties in JavaScript that we want to animate, this ensures you get the most accurate result. In the past, I set these properties in CSS and it can led to erratic results sometimes. This is what they recommend.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;tl1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#vertical-line&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;transformOrigin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;tl1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#horizontal-line&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;transformOrigin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;scaleX&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are create a timeline and use the &lt;a href="https://greensock.com/docs/v3/GSAP/Timeline/to()"&gt;&lt;code&gt;to()&lt;/code&gt; function&lt;/a&gt; to perform the individual animations. I will just focus on the animation of the symbols here as they are the most complicated.&lt;/p&gt;

&lt;p&gt;It is helpful to extract out common values as variables, I found it a bit tricky to get the &lt;code&gt;duration&lt;/code&gt;, &lt;code&gt;ease&lt;/code&gt;, and the overlapping of the animations the way I wanted. So having variables for this is the way to make adjustments simpler.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tl1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TimelineMax&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;symbolRevealDuration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;symbolRevealOverlap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;2.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;symbolEase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;slow(0.7, 0.7, false)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// other stuff for animating circle and lines&lt;/span&gt;

&lt;span class="c1"&gt;// symbols&lt;/span&gt;
&lt;span class="nx"&gt;tl1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#symbol1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;symbolRevealDuration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;symbolEase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="s2"&gt;`-=1.25`&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;tl1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#symbol2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;symbolRevealDuration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;symbolEase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="s2"&gt;`-=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;symbolRevealOverlap&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;tl1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#symbol3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;symbolRevealDuration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;symbolEase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="s2"&gt;`-=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;symbolRevealOverlap&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;tl1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#symbol4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;symbolRevealDuration&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;symbolEase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="s2"&gt;`-=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;symbolRevealOverlap&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see with the &lt;code&gt;to()&lt;/code&gt; function the third parameter is the &lt;code&gt;position&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;position: [ Number | String ]&lt;/p&gt;

&lt;p&gt;(default = "+=0") — controls the insertion point in the timeline (by default, it’s the end of the timeline).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By default, animations are added to the end of the timeline, so that everything is sequenced one-after-the-other. We can use the &lt;code&gt;position&lt;/code&gt; parameter to overlap the revealing of the symbols. For example, for &lt;em&gt;#symbol1&lt;/em&gt; we supply &lt;code&gt;"-=1.25"&lt;/code&gt;, which will begin the animation 1.25 seconds before the end of the timeline. This is what I hit upon that worked the way I wanted.&lt;/p&gt;

&lt;p&gt;You could also use &lt;code&gt;"&amp;lt;+=1"&lt;/code&gt; for the position &lt;code&gt;parameter&lt;/code&gt; to start an animation 1 second past the start of the previous animation. This is probably simpler to understand as sequence of animations. Since, I discovered this notation late, I didn't feel like redoing it (sorry)! These are some of the lessons you learn along the way!&lt;/p&gt;

&lt;p&gt;I put the code on GitHub along with some other title sequences, if you want to grab it: &lt;a href="https://github.com/robole/title-sequences"&gt;https://github.com/robole/title-sequences&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;That's it. I hope you enjoyed this short whistle tour. If you a fan of the show, enjoy the new season!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to use Proof-of-Competence Web3 on-boarding framework</title>
      <author>fangjun</author>
      <pubDate>Sat, 22 Jan 2022 15:16:41 +0000</pubDate>
      <link>https://dev.to/yakult/how-to-use-proof-of-competence-web3-on-boarding-framework-1853</link>
      <guid>https://dev.to/yakult/how-to-use-proof-of-competence-web3-on-boarding-framework-1853</guid>
      <description>&lt;p&gt;Web3 is open, and one's footprints can be verified on-chain. Proof-of-Competence web3 front-end framework (&lt;a href="https://github.com/wslyvh/proof-of-competence"&gt;https://github.com/wslyvh/proof-of-competence&lt;/a&gt;) provides a good start to building DAPPs to help users measure their own web3 activities. &lt;/p&gt;

&lt;p&gt;It is developed by Wesley(&lt;a href="https://twitter.com/wslyvh"&gt;@wslyvh&lt;/a&gt;). He explains it as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Proof of Competence (PoC) is an open, permissionless framework to create on-boarding journeys into the Web3 space. It uses a pluggable task system which can verify that on-chain actions have occurred. This allows to build up reputation or social (DAO) scores that proof an address is familiar with the specified technologies or protocols.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can find Proof of Competence front-end framework at: &lt;a href="https://www.poc.quest"&gt;https://www.poc.quest&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-how-it-works"&gt;
  &lt;/a&gt;
  1. How it works
&lt;/h2&gt;

&lt;p&gt;Users can connect wallet via MetaMask or WalletConnect to Proof-of-Competence(PoC) DAPP to track their own web3 footprint. You get a score for a specific web3 journey. &lt;/p&gt;

&lt;p&gt;PoC is designed with three concepts: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Journey&lt;/strong&gt;, a list of tasks for web3 users, stored in JSON format. It will give user a score according to the activities of his address.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Task&lt;/strong&gt;, a unique task such as having Token/NFT, deployed contract and etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Verifier&lt;/strong&gt;, verify a task using public information(e.g. on-chain, Subgraphs, or public blockchain explorers). To use PoC framework, we need to write verifier for our own task in the  &lt;code&gt;/src/verifers&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PoC framework also provides restful API using Next.js API routers so that we can use the scores via API.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;PoC API&lt;/strong&gt;, restful API using Next.js. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PoC framework uses on-chain data through:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Infura API,&lt;/li&gt;
&lt;li&gt;Alchemy API,&lt;/li&gt;
&lt;li&gt;Etherscan API, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is developed with these Node.js and web3 components: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Next.js&lt;/strong&gt;, the React framework by Vercel. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Chakra UI&lt;/strong&gt;, modular React UI Components.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Ethers.js&lt;/strong&gt;, library to interact with Ethereum.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Web3-react&lt;/strong&gt;, React UI for connecting wallect.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-how-to-install-it-locally"&gt;
  &lt;/a&gt;
  2. How to install it locally
&lt;/h2&gt;

&lt;p&gt;Download the project sourcecode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;git&lt;/span&gt; &lt;span class="nx"&gt;clone&lt;/span&gt; &lt;span class="nx"&gt;git&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;wslyvh&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;proof&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;competence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;git&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are sample journeys, tasks, and verifiers in &lt;code&gt;web/src/&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Go to &lt;code&gt;web&lt;/code&gt; directory and run this Next.js project locally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="nx"&gt;dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can view the DAPP at &lt;code&gt;http://localhost:3000&lt;/code&gt; in your browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-add-your-own-web3-journey-with-tasks"&gt;
  &lt;/a&gt;
  3. Add your own web3 journey with tasks
&lt;/h2&gt;

&lt;p&gt;Let's copy &lt;code&gt;/web/src/journeys/useWeb3.json&lt;/code&gt; to &lt;code&gt;/web/src/journeys/basicWeb3.json&lt;/code&gt; and edit our journey based on it. Basic Web3 User journey has two tasks: have address, have ENS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Basic Web3 User&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Onboarding new developers into the Web3 space&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;website&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://www.ethereum.org/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;twitter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fjun99&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tasks&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Have a wallet address&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You need a wallet address to enter Web3 universe.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;points&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;verifier&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active-address&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ENS: Ethereum Name Service&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Register your ENS name at https://ens.domains/ with a reverse lookup.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;points&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;verifier&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ens-reverse-lookup&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can view our journey at: &lt;a href="http://localhost:3000/basicWeb3"&gt;http://localhost:3000/basicWeb3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are several verifiers in this project and we use &lt;code&gt;active-address&lt;/code&gt;, &lt;code&gt;ens-reverse-lookup&lt;/code&gt;, &lt;code&gt;has-poap&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;active-address&lt;/li&gt;
&lt;li&gt;first-transaction&lt;/li&gt;
&lt;li&gt;ens-reverse-lookup&lt;/li&gt;
&lt;li&gt;has-poap&lt;/li&gt;
&lt;li&gt;has-nft&lt;/li&gt;
&lt;li&gt;deployed-contract&lt;/li&gt;
&lt;li&gt;vote-on-snapshot&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are also several dummy verifiers to start with: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;test-always-false&lt;/li&gt;
&lt;li&gt;test-always-gtrue&lt;/li&gt;
&lt;li&gt;test-random-number&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can get the journey and score from restful API at:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//localhost:3000/api/journey?name=basicWeb3&lt;/span&gt;

&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//localhost:3000/api/journey/score?journey=basicweb3&amp;amp;address=0x00&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : You can also deploy this project online using GitHub &amp;amp; Vercel. Vercel's tutorial: &lt;a href="https://nextjs.org/learn/basics/deploying-nextjs-app"&gt;https://nextjs.org/learn/basics/deploying-nextjs-app&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;We will continue to develop our own task and verifier locally.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-some-preparations-for-development"&gt;
  &lt;/a&gt;
  4. Some preparations for development
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#41-add-raw-envlocal-endraw-"&gt;
  &lt;/a&gt;
  4.1 Add &lt;code&gt;.env.local&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;We will use NEXT.js environment variables to store infura, Alechemy and Etherscan API ID/keys. Variables with prefix &lt;code&gt;NEXT_PUBLIC_&lt;/code&gt; can be accessed from the browser. More details about NEXT.js environment variables at: &lt;a href="https://nextjs.org/docs/basic-features/environment-variables"&gt;https://nextjs.org/docs/basic-features/environment-variables&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add file &lt;code&gt;.env.local&lt;/code&gt;. This file should be added to .gitignore if you opensource your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//.env.local&lt;/span&gt;
&lt;span class="nx"&gt;NEXT_PUBLIC_ALCHEMY_API_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//eth-mainnet.g.alchemy.com/v2/&lt;/span&gt;
&lt;span class="nx"&gt;NEXT_PUBLIC_ALCHEMY_API_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nx"&gt;NEXT_PUBLIC_INFURA_API_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;d7&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nx"&gt;NEXT_PUBLIC_ETHERSCAN_API_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;ab&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#42-notes-on-alchemy-api"&gt;
  &lt;/a&gt;
  4.2 Notes on Alchemy API
&lt;/h3&gt;

&lt;p&gt;We will use Alchemy API to interact with Ethereum mainnet. Documents can be found at: &lt;a href="https://docs.alchemy.com/alchemy/"&gt;https://docs.alchemy.com/alchemy/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Token API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will call &lt;code&gt;alchemy_getTokenBalances&lt;/code&gt; to get ERC20 token balance.&lt;/p&gt;

&lt;p&gt;Reference: &lt;a href="https://docs.alchemy.com/alchemy/enhanced-apis/token-api#alchemy_gettokenbalances"&gt;https://docs.alchemy.com/alchemy/enhanced-apis/token-api#alchemy_gettokenbalances&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chain API / Ethereum API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will call &lt;code&gt;eth_getBalance&lt;/code&gt; to get Ether balance of an address. &lt;/p&gt;

&lt;p&gt;Reference: &lt;a href="https://docs.alchemy.com/alchemy/apis/ethereum/eth_getbalance"&gt;https://docs.alchemy.com/alchemy/apis/ethereum/eth_getbalance&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using Ethereum API, we can interact with the Ethereum RPC directly. &lt;/p&gt;

&lt;p&gt;Another Option is to interact with Ethereruem RPC using &lt;code&gt;ethers.js&lt;/code&gt; through Alechemy endpoint. We will use this option to check if a user owns a specific NFT later.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NFT API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the sample NFT verifier in the project, it calls Alchemy NFT API &lt;code&gt;getNFTs&lt;/code&gt; to get information about the NFTs of an address. &lt;/p&gt;

&lt;p&gt;Two notes here:&lt;/p&gt;

&lt;p&gt;First, NFT API is in the V1 of Alchemy API. We need to change the endpoint from V2 to V1: &lt;code&gt;https://eth-mainnet.g.alchemy.com/your-api-key/v2&lt;/code&gt; should be &lt;code&gt;https://eth-mainnet.g.alchemy.com/your-api-key/v1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Second, NFT API need to apply manually, otherwise your call will return:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Eth NFT API v1 not enabled on this account - please visit &lt;a href="https://alchemyapi.typeform.com/nft-api-access"&gt;https://alchemyapi.typeform.com/nft-api-access&lt;/a&gt; to request access!"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I applied using this form. But I haven't received permission yet. So we will interact directly with an ERC721 contract using &lt;code&gt;ethers.js&lt;/code&gt; in section 7.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-add-a-verifier-to-measure-eth-of-your-address"&gt;
  &lt;/a&gt;
  5. Add a verifier to measure ETH of your address
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#step-1-add-verifier"&gt;
  &lt;/a&gt;
  Step 1: add verifier
&lt;/h3&gt;

&lt;p&gt;Add a verifier called &lt;code&gt;has-ETH&lt;/code&gt;. Let's begin with copy &lt;code&gt;test-always true&lt;/code&gt; directory and change the directory name to &lt;code&gt;has-ETH&lt;/code&gt;. The index.ts in this directory looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Task&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;types&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-add-task-to-the-journey"&gt;
  &lt;/a&gt;
  Step 2: add task to the journey
&lt;/h3&gt;

&lt;p&gt;In &lt;code&gt;web/src/journeys/basicWeb3.json&lt;/code&gt;, add a task:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;has ETH&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Own 0.1+ ETH.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;points&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;verifier&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;has-ETH&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;params&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;amount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Explanation of this task:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Points: 400 points&lt;/li&gt;
&lt;li&gt;Verifier: has-ETH&lt;/li&gt;
&lt;li&gt;params: 0.1. If the user's address has more than 0.1 ETH, the user gets 400 points.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's go to the web page &lt;code&gt;http://localhost:3000/basicWeb3&lt;/code&gt;, you can see that you get 400 points as the verifier always returns &lt;code&gt;true&lt;/code&gt; now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-program-haseth-verifier"&gt;
  &lt;/a&gt;
  Step 3: program has-ETH verifier
&lt;/h3&gt;

&lt;p&gt;Let's program the &lt;code&gt;has-ETH&lt;/code&gt; verifier:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// verifiers/has-ETH/index.ts&lt;/span&gt;
&lt;span class="c1"&gt;// Reminder:add in `.env.local`: NEXT_PUBLIC_ALCHEMY_API_URL, NEXT_PUBLIC_ALCHEMY_API_KEY&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Task&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;types&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;amount&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_ALCHEMY_API_URL&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_ALCHEMY_API_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;  
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jsonrpc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;method&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;eth_getBalance&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;params&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;latest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;
            &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
          &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;e18&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We call &lt;code&gt;eth_getBalance&lt;/code&gt; using Alechmy Etherum API. If result &amp;gt; amount, the verifier returns true.&lt;/p&gt;

&lt;p&gt;In my test address, there is about 0.15 ETH in it. The task is passed and I get 400 points.&lt;/p&gt;

&lt;p&gt;Let's change the amount in the journey to 0.2 ETH. The task is failed and I don't get 400 points.&lt;/p&gt;

&lt;p&gt;TODO NOTE: We program this example quickly and we should consider modifying this verifier so that it can be used in testnet (Ropsten), sidechain (Polygon), L2 (Arbitrum/Optimism) and other EVM. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-add-a-verifier-to-measure-erc20-token"&gt;
  &lt;/a&gt;
  6. Add a verifier to measure ERC20 token
&lt;/h2&gt;

&lt;p&gt;In this section, you will add a verifier &lt;code&gt;has-token-ERC20&lt;/code&gt; to measure ERC20 token in your address. &lt;/p&gt;

&lt;p&gt;Add directory &lt;code&gt;has-token-RRC20&lt;/code&gt; and then edit &lt;code&gt;index.ts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// verifiers/has-token-ERC20/index.ts&lt;/span&gt;
&lt;span class="c1"&gt;// Reminder:add in `.env.local`: NEXT_PUBLIC_ALCHEMY_API_URL, NEXT_PUBLIC_ALCHEMY_API_KEY&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Task&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;types&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;contractAddress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;addressERC20&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;amount&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_ALCHEMY_API_URL&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_ALCHEMY_API_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;  
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;jsonrpc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;method&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;alchemy_getTokenBalances&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;params&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="nx"&gt;contractAddress&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;
            &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
          &lt;span class="p"&gt;})&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tokenBalances&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tokenBalances&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tokenBalance&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;e18&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add a task to measure whether the user's address has ERC20 &lt;code&gt;ENS Token&lt;/code&gt; and the amount should be 10+:&lt;/p&gt;

&lt;p&gt;ENS ERC20 Token contract address: &lt;code&gt;0xC18360217D8F7Ab5e7c516566761Ea12Ce7F9D72&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add a task in &lt;code&gt;basicWeb3.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;has 10+ ENS Token&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Own 10+ ENS ERC20 Token.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;points&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;verifier&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;has-token-ERC20&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;params&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;addressERC20&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0xC18360217D8F7Ab5e7c516566761Ea12Ce7F9D72&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;amount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As I have ENS ERC20 token in my test address, I can pass this task and get 400 points.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-add-a-verifier-to-measure-erc721-nft"&gt;
  &lt;/a&gt;
  7. Add a verifier to measure ERC721 NFT
&lt;/h2&gt;

&lt;p&gt;In this section, you will add a verifier &lt;code&gt;has-nft-ERC721&lt;/code&gt; to check where you have at least one specific ERC721 token in your address.&lt;/p&gt;

&lt;p&gt;We will use &lt;code&gt;ethers.js&lt;/code&gt; to call an ERC721 contract function &lt;code&gt;balanceOf(address)&lt;/code&gt; to check. Add &lt;code&gt;has-nft-ERC721/index.ts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// has-nft-ERC721/index.ts&lt;/span&gt;
&lt;span class="c1"&gt;// Reminder:add in `.env.local`: NEXT_PUBLIC_ALCHEMY_API_URL, NEXT_PUBLIC_ALCHEMY_API_KEY&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Task&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;types&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ethers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AlchemyProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@ethersproject/providers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;contractAddress&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;addressERC721&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;addressERC721&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAddress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;contractAddress&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AlchemyProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chainId&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_ALCHEMY_API_KEY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;contract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ethers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Contract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;contractAddress&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;abi&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;balanceOfNFT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;contract&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;balanceOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;balanceOfNFT&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;abi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;constant&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;inputs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:[{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;internalType&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;address&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;owner&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;address&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;balanceOf&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;outputs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:[{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;internalType&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uint256&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;uint256&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;payable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stateMutability&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;view&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Explanation of what we do in this verifier:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;connect to a ERC721 contract with &lt;code&gt;ethers.Contract( contractAddress , abi , provider )&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;call &lt;code&gt;contract.balanceOf(address)&lt;/code&gt; to get NFT amount of user's address.&lt;/li&gt;
&lt;li&gt;we provide ABI segment of the need contract function (&lt;code&gt;balanceOf()&lt;/code&gt;) in &lt;code&gt;const abi&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add a task in &lt;code&gt;basicWeb3.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Own a ERC721 NFT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Own an ENS NFT(ERC721).&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;points&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;verifier&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;has-nft-ERC721&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;params&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;addressERC721&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85&lt;/code&gt; is the contract address of ENS ERC721 NFT.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-end-of-the-beginning"&gt;
  &lt;/a&gt;
  The End of the beginning
&lt;/h2&gt;

&lt;p&gt;Now, you can begin to add tasks and verifiers to your protocol for on-boarding web3 users.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>web3</category>
      <category>nextjs</category>
      <category>ethersjs</category>
    </item>
    <item>
      <title>A Curated List of Resource to Build Website and Apps Without Code!</title>
      <author>abhiram-ar</author>
      <pubDate>Sat, 22 Jan 2022 14:10:59 +0000</pubDate>
      <link>https://dev.to/ieeemace/a-curated-list-of-resource-to-build-website-and-apps-without-code-607</link>
      <guid>https://dev.to/ieeemace/a-curated-list-of-resource-to-build-website-and-apps-without-code-607</guid>
      <description>&lt;p&gt;Are you a beginner to programming? or do you want to build a website or an App without learning to code or &lt;em&gt;NO CODE&lt;/em&gt;?&lt;/p&gt;

&lt;p&gt;Here are some list of platforms available to build responsive websites and applications&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Web development without Coding&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;1.Bootstrap studio&lt;br&gt;
Link :&lt;a href="https://bootstrapstudio.io/"&gt; https://bootstrapstudio.io/ &lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YEUZtc28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8l3hc6a8k54yxh3ihdh7.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YEUZtc28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8l3hc6a8k54yxh3ihdh7.jpeg" alt="Image description" width="624" height="381"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bootstrap Studio&lt;/strong&gt; is an app for creating beautiful websites. It comes with a large number of built-in components, which you can drag and drop to assemble responsive web pages. It is built on top of the hugely popular Bootstrap framework, and exports clean and semantic HTML. &lt;/p&gt;

&lt;p&gt;If you need a component which doesn't exist in our library, just click the Online tab in the Component Panel. There you will find thousands of components built and shared by the community. You can also upload your own.&lt;/p&gt;

&lt;p&gt;If you have a website that you've developed previously, you can import it. Just drag and drop the HTML, CSS, JS files and images into Bootstrap Studio and they will be added to your project. &lt;/p&gt;

&lt;p&gt;2.Bravostudio&lt;br&gt;
Link :  &lt;a href="https://www.bravostudio.app/"&gt;https://www.bravostudio.app/ &lt;/a&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MsCOQbEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zwxu5utplnnctkv15rdy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MsCOQbEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zwxu5utplnnctkv15rdy.png" alt="Image description" width="415" height="251"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bravo Studio is an app builder  for designers. It makes it  possible to turn Figma  prototypes into native iOS and  Android app instantly without  writing any code  &lt;/p&gt;

&lt;p&gt;3.Quest.ai &lt;br&gt;
Link : &lt;a href="https://www.quest.ai/"&gt;https://www.quest.ai/&lt;/a&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W4glxz_Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vmstt7s9twd1n7tbl5g.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W4glxz_Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vmstt7s9twd1n7tbl5g.jpeg" alt="Image description" width="564" height="366"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Convert your designs into responsive, live websites automatically. Add interactions, motion graphics, video, audio without writing any code. Connect to data and content source and build fully-functioning websites, landing pages, product pages, or business applications easily. With Quest, anyone can build what they envision without being constrained by their engineering bandwidth. &lt;/p&gt;

&lt;p&gt;4.Wix website builder Link :&lt;a href="https://www.wix.com/"&gt; https://www.wix.com/ &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c1j4BEwj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/863a4uoxykomx1lzbh8u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1j4BEwj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/863a4uoxykomx1lzbh8u.png" alt="Image description" width="600" height="353"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wix is totally beginner friendly.Wix is a free web-based website builder based.You can build responsive website just by drag and drop feature,, so you don't need coding skills, . &lt;/p&gt;

&lt;p&gt;Free version has all the tools you need for development.And you have thousands of templates of different category to begin with &lt;/p&gt;

&lt;p&gt;There are many modules that you can add-on in the wix store and you can publish the website for free(though .wix will be added in the domain address in the free version).And there are build in option for search engine optimisation &lt;/p&gt;

&lt;p&gt;5.Webflow&lt;br&gt;
Link :&lt;a href="https://webflow.com/"&gt; https://webflow.com/ &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A6pUPMFv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqibmxv8dscotnurxybb.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A6pUPMFv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqibmxv8dscotnurxybb.jpeg" alt="Image description" width="624" height="351"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With Webflow you can build a prototype that is already a finished product. How cool is that?&lt;/p&gt;

&lt;p&gt;Webflow is a powerful, web-based design tool that gives you the superpower of designing, building, and launching responsive websites without the use of code. It’s an all-star level design platform that allows you to go from the initial idea to ready-to-use products. &lt;/p&gt;

&lt;p&gt;It fills the gap between software like Squarespace, Wix, and the world's most popular CMS WordPress. Webflow's design flexibility, lightning speed performance, and ease- of-use make it quite a success story as I find Webflow referred to as the next-generation tool for building and launching websites by newcomers and professionals across the web. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;App development without Coding&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;In the past you had to be a programmer to make an app, which would likely take weeks, months or even years. Now, however, there are numerous app - building platforms you can use to create an app in minutes. We’ve put &lt;/p&gt;

&lt;p&gt;together some of our favorites for you here. &lt;/p&gt;

&lt;p&gt;1.MIT App Inventor &lt;br&gt;
Link :&lt;a href="https://appinventor.mit.edu/"&gt; https://appinventor.mit.edu/ &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LKrgutR---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fet42upkyzud3dbf7180.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LKrgutR---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fet42upkyzud3dbf7180.jpeg" alt="Image description" width="624" height="351"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MIT App Inventor is &lt;strong&gt;great for beginners&lt;/strong&gt;! ... The layout is visual, and relies on drag and drop which helps users understand the components needed for an app. It also clearly has features of Android programming in Java which makes the transition to written code for Android easier &lt;/p&gt;

&lt;p&gt;2.AppyPie &lt;br&gt;
link: &lt;a href="https://www.appypie.com/app-builder/appmaker"&gt; https://www.appypie.com/app-builder/appmaker &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_DwOU-YC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhkmuelnblw32g0rpa1x.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_DwOU-YC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhkmuelnblw32g0rpa1x.jpeg" alt="Image description" width="624" height="351"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AppyPie has helped more than 3 million creators to build a fully functional mobile app with nothing but visual building blocks.  &lt;/p&gt;

&lt;p&gt;On top of support for Android and iOS, AppyPie also offers full-on PWA (Progressive Web Apps) functionality. So, your mobile app will be viewable in a web browser like a regular website. This pretty much solves two issues at the same time &lt;/p&gt;

&lt;p&gt;3.Adalo &lt;br&gt;
Link &lt;a href="https://www.adalo.com/"&gt;:https://www.adalo.com/ &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/qicS8eZh-cs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hSGars0o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fo1cfxnf9491kytbbp79.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hSGars0o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fo1cfxnf9491kytbbp79.jpeg" alt="Image description" width="624" height="509"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Adalo helps you design new apps ,without any coding skills. You will be capable of completely controlling your design by using drag and drop components. &lt;/p&gt;

&lt;p&gt;With Adalo, you have the freedom to add database configuration and interactions automatically. If you have an existing API, then Adalo will integrate with the same. With a single click, you will be able to launch the true version of your mobile apps on the application stores for Android and iOS. &lt;/p&gt;

&lt;p&gt;In conclusion, know what features you’re looking for in your mobile/Web application. This will help you narrow down the platforms which can &lt;br&gt;
best serve your needs.&lt;/p&gt;

&lt;p&gt;And that concludes our list.&lt;br&gt;
Happy Building!&lt;/p&gt;



&lt;pre&gt;&lt;br&gt;&lt;br&gt;
    ❤️ &lt;a href="https:ieeemace.org"&gt;Website&lt;/a&gt;  |  📷&lt;a href="https://www.instagram.com/ieeemace"&gt;Instagram &lt;/a&gt;  |  💼&lt;a href="https://in.linkedin.com/company/ieeemace"&gt;LinkedIn&lt;/a&gt;   |  🐥&lt;a href="https://twitter.com/ieeemace"&gt;Twitter&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
&lt;/pre&gt;

</description>
      <category>webdev</category>
      <category>app</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to build a REST API using NodeJS</title>
      <author>Kira</author>
      <pubDate>Sat, 22 Jan 2022 14:08:57 +0000</pubDate>
      <link>https://dev.to/kira272921/how-to-build-a-rest-api-using-nodejs-19ai</link>
      <guid>https://dev.to/kira272921/how-to-build-a-rest-api-using-nodejs-19ai</guid>
      <description>&lt;p&gt;👋 Hey everyone, I know it's been a long since I posted a new blog 😅. 👀 So in this blog post we are doing to build a REST API that would serve as a source of motivation for developers using NodeJS and MongoDB. So let's get started 🏄‍♂️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZRDSqzlB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/r3XdvPsAV3kAAAAS/despicable-me-minions.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZRDSqzlB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/r3XdvPsAV3kAAAAS/despicable-me-minions.gif" alt="" width="178" height="90"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-an-api"&gt;
  &lt;/a&gt;
  What's an API? 🤔
&lt;/h1&gt;

&lt;p&gt;API stands for "Application Programming Interface" which is a tool that allows two applications to talk to each other 📞. Let's understand the meaning of API by some real-life examples ✨&lt;/p&gt;

&lt;p&gt;So you have built an amazing e-store application and you wanted other developers to build applications on it. Now you have to build some sort of software that communicates between your web service and the developer's application and that's where API comes in.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sMEPWPXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5mJq34Yb--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://user-images.githubusercontent.com/26124625/104198884-ca1bcf80-544c-11eb-94d1-22548426ad4d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sMEPWPXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5mJq34Yb--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://user-images.githubusercontent.com/26124625/104198884-ca1bcf80-544c-11eb-94d1-22548426ad4d.png" alt="" width="880" height="284"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-a-rest-api"&gt;
  &lt;/a&gt;
  What's a REST API? 🤔
&lt;/h2&gt;

&lt;p&gt;Now as you have let's talk something about "REST APIs". REST stands for &lt;strong&gt;Representational State Transfer&lt;/strong&gt;, it's one of the most popularly known type of API architecture. These types of APIs follow the client-server model, where one program sends a request and the other response with some data.&lt;br&gt;
The requests are HTTP methods such as POST, GET, PUT, DELETE...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zIeIOmJ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8sH5rrSh--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://user-images.githubusercontent.com/26124625/104204412-431e2580-5453-11eb-9827-29a65aa6ff82.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zIeIOmJ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8sH5rrSh--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://user-images.githubusercontent.com/26124625/104204412-431e2580-5453-11eb-9827-29a65aa6ff82.png" alt="" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You would have a more clear understanding of APIs and REST APIs when we build a project 👀. So what are we waiting for, let's dive started into coding 👨‍💻.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#setting-up-the-project-%F0%9F%9B%A0"&gt;
  &lt;/a&gt;
  Setting up the project 🛠
&lt;/h1&gt;

&lt;p&gt;Let's set up our project so that we can start coding 👨‍💻.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Creating a separate folder for our project
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   &lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;dev-credits-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Navigate into the folder
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   &lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;dev-credits-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Initializing the project
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   &lt;span class="nv"&gt;$ &lt;/span&gt;npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Installing the required packages
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;   &lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;mongoose express dotenv cors

   &lt;span class="c"&gt;# or&lt;/span&gt;

   &lt;span class="nv"&gt;$ &lt;/span&gt;yarn add mongoose express dotenv cors
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Express is the framework by which we are going to our REST API&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mongoose is the tool that we are going to use to communicate with our MongoDB database&lt;/p&gt;

&lt;p&gt;4.1. Installing nodemon as a dev dependency&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight shell"&gt;&lt;code&gt; &lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;nodemon &lt;span class="nt"&gt;-D&lt;/span&gt;

 &lt;span class="c"&gt;# or&lt;/span&gt;

 &lt;span class="nv"&gt;$ &lt;/span&gt;yarn add nodemon &lt;span class="nt"&gt;-D&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;ul&gt;
&lt;li&gt;Nodemon is used for automatically restarting the server on file changes detected in the directory. This would be helpful as we would not be restarting the server each time we do changes&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#building-the-rest-api"&gt;
  &lt;/a&gt;
  Building the REST API 👨‍💻
&lt;/h1&gt;

&lt;p&gt;As we have completed the setup for our project, let's get started building the REST API.&lt;/p&gt;

&lt;p&gt;Create a new file named &lt;code&gt;index.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is the boilerplate code for a basic express app&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server is running at port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's breakdown it into and understand each part:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We are requiring the express package into our file so that we can use it&lt;/li&gt;
&lt;li&gt;We are assigning some value to the variable port, the port where our server would be running. You might be thinking why is there a &lt;code&gt;process.env.PORT&lt;/code&gt;? 🤔. It's because during deployment on services such as Heroku the port number might vary, it may not be 3000 so we are telling that if there is a PORT environment variable then use that else use 3000&lt;/li&gt;
&lt;li&gt;The last piece of code is telling to which port the server should listen, in our case it's the &lt;code&gt;PORT&lt;/code&gt; variable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's add a new script named &lt;code&gt;start&lt;/code&gt; to the &lt;code&gt;package.json&lt;/code&gt; file which uses nodemon to automatically restart the server on file changes detected. So after the changes our scripts in &lt;code&gt;package.json&lt;/code&gt; would look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"nodemon index.js"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's start our server by running the &lt;code&gt;npm start&lt;/code&gt; command. The server would be running at &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;. You prompted with an error something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l8ABC1Iz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/XeUfz0l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l8ABC1Iz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/XeUfz0l.png" alt="" width="106" height="48"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is happening because we haven't defined the &lt;code&gt;/&lt;/code&gt; (aka the root route)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#http-methods-explained"&gt;
  &lt;/a&gt;
  HTTP methods explained
&lt;/h2&gt;

&lt;p&gt;Let's take a break from coding and understand what do they do and what's the success and error status so that it would be easy for debugging 😎&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get"&gt;
  &lt;/a&gt;
  GET
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What it does&lt;/strong&gt;: Request data from a specified resource&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Successful response&lt;/strong&gt;: 200 OK&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Error response&lt;/strong&gt;: 404 not found&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#post"&gt;
  &lt;/a&gt;
  POST
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What it does&lt;/strong&gt;: Send data to the server to create a new resource&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Successful response&lt;/strong&gt;: 201 Created&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Error response&lt;/strong&gt;: 404 not found or 409 conflict - if the resource already exists&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#put"&gt;
  &lt;/a&gt;
  PUT
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What it does&lt;/strong&gt;: Send data to the server to update a pre-existing resource&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Successful response&lt;/strong&gt;: 200 OK&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Error response&lt;/strong&gt;: 204 no content, 404 not found or 405 method not allowed&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#delete"&gt;
  &lt;/a&gt;
  DELETE
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What it does&lt;/strong&gt;: Deletes a resource from the server&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Successful response&lt;/strong&gt;: 200 OK&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Error response&lt;/strong&gt;: 404 not found or 405 method not allowed&lt;/p&gt;

&lt;p&gt;Check out &lt;a href="https://http.cat/"&gt;http.cat&lt;/a&gt; for understanding what each HTTP status code means via funny cat images 😹&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-routes-%F0%9F%9B%A3"&gt;
  &lt;/a&gt;
  Adding routes 🛣
&lt;/h2&gt;

&lt;p&gt;Routes are different URL paths of an express app that are associated with different HTTP methods, such as &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's get started by creating &lt;code&gt;/&lt;/code&gt; which sends "Hello, World!"&lt;/p&gt;

&lt;p&gt;Add the below piece of code above the line where we declared the &lt;code&gt;port&lt;/code&gt; variable&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello, World!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's breakdown this piece of code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;get&lt;/code&gt; method specifies the HTTP method for that route. You could use other HTTP methods like &lt;code&gt;post&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;...

&lt;ul&gt;
&lt;li&gt;There is a special routing method &lt;code&gt;all&lt;/code&gt; which is used for the routes which handle all kinds of HTTP methods&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;There is a callback method that is called when the server receives a request from that endpoint with that specified HTTP method&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;🥳 Horray! "Hello, World" is now visible in the &lt;code&gt;/&lt;/code&gt; route&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8KxSFRiJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/Lw35Azu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8KxSFRiJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/Lw35Azu.png" alt="" width="108" height="39"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-mongodb"&gt;
  &lt;/a&gt;
  Setting up MongoDB
&lt;/h2&gt;

&lt;p&gt;Let's get in the MongoDB database now 😎.&lt;/p&gt;

&lt;p&gt;Head over &lt;a href="https://www.mongodb.com/"&gt;MongoDB&lt;/a&gt; and sign up/sign in and create a new project&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ttFBYoRy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/P1PiZ7r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ttFBYoRy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/P1PiZ7r.png" alt="" width="643" height="345"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You could your co-worker into the project if you wanted too.&lt;/p&gt;

&lt;p&gt;After the creation of the project, click on &lt;code&gt;Build a Database&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iOuZ8sco--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/COT14kz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iOuZ8sco--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/COT14kz.png" alt="" width="535" height="367"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You would be shown with a screen something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--26zLrmap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/gLTxjxN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--26zLrmap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/gLTxjxN.png" alt="" width="869" height="541"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's go ahead and choose the free plan 👀&lt;/p&gt;

&lt;p&gt;You would be shown some more options about the cloud provider and the location&lt;/p&gt;

&lt;p&gt;Let's choose the nearest region and move forward.&lt;/p&gt;

&lt;p&gt;You would be asked to create a user. This is required as you would need the username and password to generate a connection URL which is then used to connect MongoDB with your NodeJS app.&lt;/p&gt;

&lt;p&gt;The creation of the cluster would take 1 - 3 minutes. So let's grab a cup of coffee until then ☕. Ahh... it's been successfully created so let's get back to coding 👨‍💻&lt;/p&gt;

&lt;p&gt;Click on &lt;code&gt;Connect&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7FcJ1YKA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/YXMw142.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7FcJ1YKA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/YXMw142.png" alt="" width="571" height="321"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;code&gt;Connect your application&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5nvSh4VX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/26S40MA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5nvSh4VX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/26S40MA.png" alt="" width="707" height="534"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy the connection URL&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9zl7csLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/YqtMG1i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9zl7csLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/YqtMG1i.png" alt="" width="686" height="201"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a &lt;code&gt;.env&lt;/code&gt; file and replace &lt;code&gt;&amp;lt;password&amp;gt;&lt;/code&gt; with the password of the user which you have replaced previously&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MONGODB_URL="mongodb+srv://kira272921:&amp;lt;password&amp;gt;@dev-credits-api.t5tkf.mongodb.net/myFirstDatabase?retryWrites=true&amp;amp;w=majority"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's head back to the good old &lt;code&gt;index.js&lt;/code&gt; file&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connecting-express-app-to-mongodb"&gt;
  &lt;/a&gt;
  Connecting Express app to MongoDB
&lt;/h2&gt;

&lt;p&gt;Let's start by requiring &lt;code&gt;mongoose&lt;/code&gt; and &lt;code&gt;dotenv&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's configure dotenv as well&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's finally add the piece of code which connects our express application to MongoDB&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;mongoose&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MONGODB_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;useNewUrlParser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;useUnifiedTopology&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Connected to MongoDB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;index.js&lt;/code&gt; file show looks something like this now&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;mongoose&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MONGODB_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;useNewUrlParser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;useUnifiedTopology&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Connected to MongoDB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello, World!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server is running at port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🥳 We successfully connected our express app to the MongoDB database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-schema-and-model"&gt;
  &lt;/a&gt;
  Creating Schema and Model 📝
&lt;/h2&gt;

&lt;p&gt;A Schema is the structure of the documents in our database. It tells what fields are required, what's the data type of each field.&lt;/p&gt;

&lt;p&gt;A model provides a programming interface for interacting with the database (read, insert, update, etc).&lt;/p&gt;

&lt;p&gt;Let's create a new folder named &lt;code&gt;model&lt;/code&gt; and inside it let's create a &lt;code&gt;model.js&lt;/code&gt; where we will define our schema&lt;/p&gt;

&lt;p&gt;&lt;code&gt;model/model.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;devCredits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;credits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;devCredits&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;devCredits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's breakdown it down and understand&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We imported the &lt;code&gt;mongoose&lt;/code&gt; package into the &lt;code&gt;model/model.js&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;We created a new schema named &lt;code&gt;devCredits&lt;/code&gt;. The structure has the &lt;code&gt;credits&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt;. Credits are the number of dev credits the person has and the id is the discord id of the user (This API was initially created for a discord bot &lt;a href="https://github.com/Kira272921/dev-credits-bot"&gt;Dev credits bot&lt;/a&gt; so the schema of the database is kinda based on discord 🤷‍♂️)&lt;/li&gt;
&lt;li&gt;We have finally created a model named "devCredits"&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#adding-more-features"&gt;
  &lt;/a&gt;
  Adding more features 😎
&lt;/h2&gt;

&lt;p&gt;Let's add more routes to our REST API. Let's add routes where we can get the total dev credits of a user via their discord ID and give dev credits to other users using another route.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#giving-dev-credits-to-other-devs"&gt;
  &lt;/a&gt;
  Giving dev credits to other devs
&lt;/h3&gt;

&lt;p&gt;Let's import our model which we have just created into the &lt;code&gt;index.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;devCredits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./model/model.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add a new POST route in the &lt;code&gt;index.js&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/post&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;credit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;devCredits&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;credits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;credits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;devCredits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;countDocuments&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;devCredits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOneAndUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;$inc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;credits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;credits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;new&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;devCredit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;devCredit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;credit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;credits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;credits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's understand what exactly is going on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have created a new POST route (&lt;code&gt;/post&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;We validate the data which we receive from the client using our model&lt;/li&gt;
&lt;li&gt;In the next piece of code we are checking if the user (user id) already exists in the database or not

&lt;ul&gt;
&lt;li&gt;If exists then we are going to increment the credits value&lt;/li&gt;
&lt;li&gt;Else we are going to create a new document with the user id and add the credits&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-to-test-the-api"&gt;
  &lt;/a&gt;
  How to test the API?
&lt;/h3&gt;

&lt;p&gt;We have successfully created added a new feature in our API 🥳. But wait how are we going to test it out 🤔&lt;/p&gt;

&lt;p&gt;👀 We are going to use a VSCode extension called &lt;a href="https://marketplace.visualstudio.com/items?itemName=rangav.vscode-thunder-client"&gt;Thunder Client&lt;/a&gt;, which is used for API testing. So let's quickly download it and test our new feature in our API 🥳.&lt;/p&gt;

&lt;p&gt;After the completion of the download, you are going to see a thunder icon in your sidebar 👀&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XA4C5_2i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/xpDcJ9t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XA4C5_2i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/xpDcJ9t.png" alt="" width="58" height="83"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click the thunder icon and you are going to see a section something like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PtUSs9UP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/FEa3FBo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PtUSs9UP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/FEa3FBo.png" alt="" width="238" height="670"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;code&gt;New Request&lt;/code&gt;. You would be prompted to screen something like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MMeZaB9J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/8Df3YZO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MMeZaB9J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/8Df3YZO.png" alt="" width="880" height="516"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's test out our &lt;code&gt;/post&lt;/code&gt; route now 🥳. Change the URL in the input box from &lt;code&gt;https://www.thunderclient.com/welcome&lt;/code&gt; to &lt;code&gt;HTTP:localhost:3000/post&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Change the HTTP method from &lt;code&gt;GET&lt;/code&gt; to &lt;code&gt;POST&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Su16MqTi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/ID9Ieie.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Su16MqTi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/ID9Ieie.png" alt="" width="104" height="223"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Navigate to the &lt;code&gt;Body&lt;/code&gt; tab, this is the section where we are going to write the body of the request.&lt;/p&gt;

&lt;p&gt;I have added my discord ID and gave 100 dev credits to it, &lt;em&gt;cuz why not&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AdWtyBk3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/RUfKWjt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AdWtyBk3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/RUfKWjt.png" alt="" width="351" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's click and hope that it works 🤞&lt;/p&gt;

&lt;p&gt;🥁🥁🥁🥁🥁 and we got an error&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7DI_C3A_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/LP7dnOb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7DI_C3A_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/LP7dnOb.png" alt="" width="535" height="627"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This happened because we didn't have any middleware so let's them quickly&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cors&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: We had installed cors as a separated package, so don't forget to import it as well&lt;/p&gt;

&lt;p&gt;Let's try again now so that it works now 🤞&lt;/p&gt;

&lt;p&gt;🎉 &lt;strong&gt;TADA&lt;/strong&gt;! We have successfully created our first feature in the API which interacts with the MongoDB database&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ksau8RUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/JIJUj9f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ksau8RUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/JIJUj9f.png" alt="" width="505" height="253"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-the-total-dev-credits-of-a-user"&gt;
  &lt;/a&gt;
  Getting the total dev credits of a user
&lt;/h3&gt;

&lt;p&gt;Let's import our model which we have just created into the &lt;code&gt;index.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;devCredits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./model/model.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add a new route in the &lt;code&gt;index.js&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/get/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;devCredits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;__v&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's breakdown this down&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have created a new route with the GET method&lt;/li&gt;
&lt;li&gt;We are finding in the database for the ID given in the parameters&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's test it out again using Thunder Client 👀.&lt;/p&gt;

&lt;p&gt;🎉&lt;strong&gt;TADA&lt;/strong&gt;! It's works&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AkBubxxb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/GBIj7Xk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AkBubxxb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/GBIj7Xk.png" alt="" width="757" height="628"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cleaning-up-the-codebase"&gt;
  &lt;/a&gt;
  Cleaning up the codebase
&lt;/h2&gt;

&lt;p&gt;Let's clean up the codebase a bit 😅.&lt;/p&gt;

&lt;p&gt;Let's create a new folder called &lt;code&gt;routes&lt;/code&gt; and inside it let's create a new file &lt;code&gt;router.js&lt;/code&gt; which contains the routes&lt;/p&gt;

&lt;p&gt;&lt;code&gt;routes/router.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;devCredits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../model/model.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/get/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;devCredits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;__v&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/post&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;credit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;devCredits&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;credits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;credits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;devCredits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;countDocuments&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;devCredits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOneAndUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;$inc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;credits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;credits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;new&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;devCredit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;devCredit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;credit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;credits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;credits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have imported the &lt;code&gt;routes/router.js&lt;/code&gt; file into the &lt;code&gt;index.js&lt;/code&gt; file and used it&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dotenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./routes/router.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cors&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;

&lt;span class="nx"&gt;mongoose&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MONGODB_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;useNewUrlParser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;useUnifiedTopology&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Connected to MongoDB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello, World!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server is running at port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's test it out so that we are sure that our code and we didn't mess up by cleaning up the mess 😆&lt;/p&gt;

&lt;p&gt;🥳 Horray! There isn't any error and the code still works as it was before&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kn0yO8AL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/Jj9ee1L.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kn0yO8AL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/Jj9ee1L.png" alt="" width="759" height="576"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;😅 Doesn't &lt;code&gt;routes/router.js&lt;/code&gt; seem kinda filled up with the logic and make it kinda messy?&lt;/p&gt;

&lt;p&gt;Let's create a new folder named &lt;code&gt;controllers&lt;/code&gt;. In this folder, we will store the logic related to each route.&lt;/p&gt;

&lt;p&gt;Let's get started by creating a new file in the &lt;code&gt;controllers&lt;/code&gt; folder named &lt;code&gt;getCredits.js&lt;/code&gt; and &lt;code&gt;postCredits.js&lt;/code&gt; which contains the logic related to the &lt;code&gt;/get&lt;/code&gt; route and &lt;code&gt;/post&lt;/code&gt; route respectively&lt;/p&gt;

&lt;p&gt;&lt;code&gt;controllers/getCredits.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;devCredits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../model/model.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getCredits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;devCredits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;__v&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getCredits&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;controllers/postCredits.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;devCredits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../model/model.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postCredits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;credit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;devCredits&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;credits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;credits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;devCredits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;countDocuments&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;devCredits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOneAndUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;$inc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;credits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;credits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;new&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;devCredit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;devCredit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;credit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;postCredits&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;routes/router.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;devCredits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../model/model.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getCredits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../controllers/getCredits.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postCredits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../controllers/postCredits.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/get/:id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getCredits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/post&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;postCredits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Phew, that was a lot of work 😹&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-rate-limit"&gt;
  &lt;/a&gt;
  Adding rate limit
&lt;/h2&gt;

&lt;p&gt;You don't want some random guy to just spam your entire database 😆. So let's add a rate limit to our API when restricts the client to perform only a few requests every x minutes&lt;/p&gt;

&lt;p&gt;Let's install &lt;a href="https://www.npmjs.com/package/express-rate-limit"&gt;express-rate-limit&lt;/a&gt; package&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;express-rate-limit

&lt;span class="c"&gt;# or&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;yarn add express-rate-limit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's create a &lt;code&gt;middleware&lt;/code&gt; folder that contains all the middlewares of our API. Create a file named &lt;code&gt;rateLimiter.js&lt;/code&gt; under the &lt;code&gt;middleware&lt;/code&gt; folder&lt;/p&gt;

&lt;p&gt;&lt;code&gt;middleware/rateLimiter.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rateLimit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express-rate-limit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rateLimiter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rateLimit&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;windowMs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// 1 minute&lt;/span&gt;
  &lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bonk 🔨&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rateLimiter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's understand what this piece of code is doing?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We are importing the &lt;code&gt;express-rate-limit&lt;/code&gt; package&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;windowMs&lt;/code&gt; specifies the duration&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;max&lt;/code&gt; specifies the max amount of requests the client can make in the duration specified&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;message&lt;/code&gt; is the message which is shown to the client when he exceeds the max limit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So let's import into the &lt;code&gt;index.js&lt;/code&gt; file and test it out&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rateLimiter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./middleware/rateLimiter.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rateLimiter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;😹 I got bonked by myself&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L1ED_jYe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/zDzExMZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L1ED_jYe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/zDzExMZ.png" alt="" width="561" height="626"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#deploying-our-api-on-heroku"&gt;
  &lt;/a&gt;
  Deploying our API on Heroku
&lt;/h1&gt;

&lt;p&gt;👀 We have successfully built an API but how would other developers use it if it isn't deployed?&lt;/p&gt;

&lt;p&gt;Let's deploy it on Heroku 🚀.&lt;/p&gt;

&lt;p&gt;Get started by initializing a git repository in the directory. Create a new GitHub repository and push your changes into that repository 👀&lt;/p&gt;

&lt;p&gt;Let's create a new file named &lt;code&gt;Procfile&lt;/code&gt; which is just a file that tells Heroku which command is need to be run. Add the below content to the &lt;code&gt;Procfile&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;web: node index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: nodemon doesn't work in the production stage. It only works in the development stage, so we have to use the good old &lt;code&gt;node index.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create an account on &lt;a href="https://herokuapp.com/"&gt;Heroku&lt;/a&gt; and click on &lt;code&gt;Create new app&lt;/code&gt;, give some cool name to your API&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fey4hZwK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/pqdLULG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fey4hZwK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/pqdLULG.png" alt="" width="596" height="319"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Head over to the settings tab and click &lt;code&gt;Reveal Config Vars&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;These are the environment variables&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Ndb2A4x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/aj7mHCD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Ndb2A4x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/aj7mHCD.png" alt="" width="670" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add a new config var with the key as &lt;code&gt;MONGODB_URL&lt;/code&gt; and the value as your MongoDB connection URL&lt;/p&gt;

&lt;p&gt;Head back to the deploy tab and connect the GitHub repository which you have created just before to your Heroku application&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--js_zb-ou--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/eBgS6pU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--js_zb-ou--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/eBgS6pU.png" alt="" width="880" height="90"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click the &lt;code&gt;Deploy branch&lt;/code&gt; button. &lt;strong&gt;TADA&lt;/strong&gt; 🚀 You have successfully created a REST API and deployed it as well :D&lt;/p&gt;

&lt;p&gt;The entire source code for this tutorial will be available on my GitHub &lt;a href="https://github.com/Kira272921/dev-credits-api"&gt;https://github.com/Kira272921/dev-credits-api&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out the API which we built today:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devcredits-api.herokuapp.com/"&gt;https://devcredits-api.herokuapp.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it for this blog folks 🤞. Meet y'all in the next blog post&lt;/p&gt;

</description>
      <category>api</category>
      <category>restapi</category>
      <category>node</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to make stylish login page with CSS only.</title>
      <author>frontend</author>
      <pubDate>Sat, 22 Jan 2022 13:56:42 +0000</pubDate>
      <link>https://dev.to/frontendcodes/how-to-make-stylish-login-page-with-css-only-7dm</link>
      <guid>https://dev.to/frontendcodes/how-to-make-stylish-login-page-with-css-only-7dm</guid>
      <description>&lt;p&gt;I made the login page design with animation on one page. You can use the login page design for free in your projects. All I want from you is to comment. For more Free templates you can check &lt;a href="https://www.front-end.codes/"&gt;front-end.codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OPHMKilx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9lurio3ylkqvfme4qzll.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OPHMKilx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9lurio3ylkqvfme4qzll.gif" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div id="container"&amp;gt;
  &amp;lt;div id="left"&amp;gt;
    &amp;lt;h1 id="welcome"&amp;gt;Welcome&amp;lt;/h1&amp;gt;
    &amp;lt;p id="lorem"&amp;gt;
      Lorem ipsum dolor sit amet, consectetur adipiscing elit.&amp;lt;br&amp;gt;
      Vivamus sodales eros non arcu pellentesque convallis.&amp;lt;br&amp;gt;
      Nunc dignissim lectus in malesuada porta.&amp;lt;br&amp;gt;
      Proin ac erat sed urna congue suscipit.&amp;lt;br&amp;gt;
      Morbi aliquet eget nisl id ornare.
    &amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div id="right"&amp;gt;
    &amp;lt;h1 id="login"&amp;gt;LogIn&amp;lt;/h1&amp;gt;&amp;lt;br&amp;gt;
    &amp;lt;input type="email" id="email" class="client-info"&amp;gt;
    &amp;lt;label for="email"&amp;gt;Email&amp;lt;/label&amp;gt;
    &amp;lt;input type="password" id="password" class="client-info"&amp;gt;
    &amp;lt;label for="password"&amp;gt;Password&amp;lt;/label&amp;gt;
    &amp;lt;input type="submit" id="submit" class="client-info" value="Submit"&amp;gt;
    &amp;lt;button class="social" id="facebook"&amp;gt;connect with facebook&amp;lt;/button&amp;gt;
    &amp;lt;button class="social" id="google"&amp;gt;connect with google&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and add some CSS.For more than &lt;a href="https://front-end.codes/bootstrap-login-form-cards/"&gt;40 CSS &amp;amp; Bootstrap login template&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* {
  margin: 0;
  padding: 0;
  outline: none;
}

:root {
  --main-color: #fff;
  --second-color: #347deb;
  --box-shadow: 0 10px 10px rgba(0, 0, 0, 0.1);
  --facebook-color: rgb(60, 90, 154);
  --google-color: rgb(220, 74, 61);
}

html {
  height: 100%;
}
body {
  background-image: linear-gradient(310deg, #df98fa, #9055ff);
  font-family: sans-serif;
}

#container {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  background-color: var(--main-color);
  width: 1200px;
  height: 800px;
  border-radius: 10px;
  display: grid;
  grid-template-columns: repeat(2, 50%);
  box-shadow: var(--box-shadow);
  transition-duration: 1s;
}

#left, #right {
  margin: auto;
  width: 95%;
  height: 96%;
  border-radius: 10px;
}

#left {
  background-image: url("https://images.unsplash.com/photo-1615400014497-55726234cccb?crop=entropy&amp;amp;cs=srgb&amp;amp;fm=jpg&amp;amp;ixid=MnwxNDU4OXwwfDF8cmFuZG9tfHx8fHx8fHx8MTYxNzg4Njg0Ng&amp;amp;ixlib=rb-1.2.1&amp;amp;q=85");
  background-size: cover;
  background-position: center;
  box-shadow: var(--box-shadow);
}
#welcome, #lorem {
  margin: 20px;
  text-shadow: var(--box-shadow);
}
#welcome {
  font-size: 75px;
  font-weight: 300;
  margin-top: 330px;
  text-shadow: var(--box-shadow);
}

#login {
  padding-top: 35%;
  text-align: center;
  text-transform: uppercase;
  font-weight: 100;
  text-shadow: var(--box-shadow);
}
.client-info {
  display: block;
  margin: 20px auto;
  width: 60%;
  height: 50px;
  border: solid #999 1px;
  border-radius: 5px;
  text-indent: 15px;
  transition: all 200ms;
  box-shadow: var(--box-shadow);
}
.client-info:focus {
  width: 80%;
}
label {
  position: absolute;
  margin: -76px 130px;
    font-size: 12px;
    white-space: nowrap;
    background: #fff;
    padding: 0 5px;
    color: #999;
  transition: all 200ms;
  text-shadow: var(--box-shadow);
}
#email:focus ~ label[for="email"] {
  margin: -76px 70px;
}
#password:focus ~ label[for="password"] {
  margin: -76px 70px;
}
#submit {
  border: none;
  background-color: #9055ff;
  color: white;
  width: 60%;
}
#submit:hover {
  background-color: #df98fa;
}

.social {
  background-color: #fff;
  display: block;
  margin: 10px auto;
  width: 70%;
  height: 50px;
  border: none;
  border-radius: 5px;
  text-transform: uppercase;
  transition-duration: 200ms;
  box-shadow: var(--box-shadow);
  text-shadow: var(--box-shadow);
}
#facebook {
  border: solid var(--facebook-color) 1px;
  color: var(--facebook-color);
}
#facebook:hover {
  background-color: var(--facebook-color);
  color: white;
}
#google {
  border: solid var(--google-color) 1px;
  color: var(--google-color);
}
#google:hover {
  background-color: var(--google-color);
  color: white;
}

@media (max-width: 1250px) {

  #container {
    width: 600px;
    display: block;
  }
  #left {
    display: none;
  }
  #right {
    margin-top: 16px;
    background-image: url("https://images.unsplash.com/photo-1615400014497-55726234cccb?crop=entropy&amp;amp;cs=srgb&amp;amp;fm=jpg&amp;amp;ixid=MnwxNDU4OXwwfDF8cmFuZG9tfHx8fHx8fHx8MTYxNzg4Njg0Ng&amp;amp;ixlib=rb-1.2.1&amp;amp;q=85");
    background-size: cover;
    background-position: center;
    box-shadow: var(--box-shadow);
  }

}

@media (max-height: 850px) {

  #container {
    width: 1000px;
    height: 600px;
  }
  #login {
    padding-top: 20%;
  }
  #welcome {
    margin-top: 240px;
    font-size: 60px;
  }
  #lorem {
    font-size: 15px;
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>css</category>
      <category>tutorial</category>
      <category>opensource</category>
    </item>
    <item>
      <title>7 Killer JavaScript One-Liners that you must know</title>
      <author>Kamran Ahmad</author>
      <pubDate>Sat, 22 Jan 2022 13:50:54 +0000</pubDate>
      <link>https://dev.to/ikamran/7-killer-javascript-one-liners-that-you-must-know-2lla</link>
      <guid>https://dev.to/ikamran/7-killer-javascript-one-liners-that-you-must-know-2lla</guid>
      <description>&lt;p&gt;&lt;strong&gt;1. Generate Random String&lt;/strong&gt; &lt;br&gt;
  if you will ever need a temporary unique id for something. this &lt;br&gt;
  one-liner will generate a random string for you&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const randomString = Math.random().toString(36).slice(2);
console.log(randomString); //output- r0zf1xfqcr (the string will be random )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Extract Domain Name From An Email&lt;/strong&gt;&lt;br&gt;
   you can use the substring() method to extract the domain name &lt;br&gt;
   of the email.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let email = 'xyz@gmail.com';
le getDomain = email.substring(email.indexOf('@') + 1);

console.log(getDomain); // output - gmail.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3. Detect Dark Mode&lt;/strong&gt;&lt;br&gt;
  with this one-liner, you can check if the user is using dark mode ( and then you can update some functionality according to dark mode)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const isDarkMode = window.matchMedia &amp;amp;&amp;amp; window.matchMedia('(prefers-color-scheme: dark)').match;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4. Check if An Element is Focused&lt;/strong&gt;&lt;br&gt;
to detect if the element has the focus in JavaScript, you can use the read-only property activeElement of the Document object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const elem = document.querySelector(' .text-input');

const isFocus = elem == document.activeElemnt;

/* isFocus will be true if elem will have focus, and isFocus will be false if elem will not have focus */
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;5. Check If An Array Is Empty&lt;/strong&gt; &lt;br&gt;
this one-liner will let you know if an array is empty or not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let arr1 = [];
let arr2 = [2, 4, 6, 8, 10];

const arr1IsEmpty = !(Array.isArray(arr1) &amp;amp;&amp;amp; arr1.length &amp;gt;0);
const arr2IsEmpty = !(Array.isArray(arr2) &amp;amp;&amp;amp; arr2.length &amp;gt;0);

console.log(arr1); //output - true
console.log(arr2); // output - false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;6. Redirecting User&lt;/strong&gt;&lt;br&gt;
 you can redirect the user to any specific URL using JavaScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const redirect = url =&amp;gt; location.href = url

/* call redirect (url) whenever you want to redirect the user to a specific url */
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;7. Check If A Variable Is An Array&lt;/strong&gt;&lt;br&gt;
You can check if any Variable is an Array or not using the Array.isArray() method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let fruit = 'apple';
let fruits = ["apple", "banana", "mango", "orange", "grapes"];

const isArray = (arr) =&amp;gt; Array.isArray(arr);

console.log(isArray.(fruit)); //output - false
console.log(isArray.(fruits)), //output- true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>React Admin Dashboard with Recharts</title>
      <author>Kishan Sheth</author>
      <pubDate>Sat, 22 Jan 2022 13:40:11 +0000</pubDate>
      <link>https://dev.to/koolkishan/react-admin-dashboard-with-recharts-1om0</link>
      <guid>https://dev.to/koolkishan/react-admin-dashboard-with-recharts-1om0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#you-can-get-the-template-from-the-link-proivided-in-the-description-of-the-video"&gt;
  &lt;/a&gt;
  You can get the template from the link proivided in the description of the video.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#technologies-used-"&gt;
  &lt;/a&gt;
  Technologies Used :-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;REACT&lt;/li&gt;
&lt;li&gt;SASS&lt;/li&gt;
&lt;li&gt;Styled Components&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#libraries-and-assets-used-"&gt;
  &lt;/a&gt;
  Libraries and Assets Used :-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Styled Components&lt;/li&gt;
&lt;li&gt;React Icons&lt;/li&gt;
&lt;li&gt;Recharts&lt;/li&gt;
&lt;li&gt;Google Fonts&lt;/li&gt;
&lt;li&gt;ScrollReveal&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#to-learn-how-to-create-this-template-watch-the-complete-video-you-can-get-the-template-for-free-from-the-link-provided-in-the-description-of-the-video"&gt;
  &lt;/a&gt;
  To learn how to create this template watch the complete video. You can get the template for free from the link provided in the description of the video.
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/bKhfUrUgWng"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#please-do-like-the-video-and-subscribe-to-the-channel-it-helps-and-motivates-me-to-create-more-content-like-this"&gt;
  &lt;/a&gt;
  Please do like the video and subscribe to the channel. It helps and motivates me to create more content like this.
&lt;/h2&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>What's new in react 18, A Quick Overview</title>
      <author>farajshuaib</author>
      <pubDate>Sat, 22 Jan 2022 13:30:52 +0000</pubDate>
      <link>https://dev.to/farajshuaib/react-18-1h</link>
      <guid>https://dev.to/farajshuaib/react-18-1h</guid>
      <description>&lt;p&gt;ReactJS is an open-source JavaScript library that build to develop high-quality user interfaces for both online and mobile apps. In the JavaScript food chain, it is currently the most popular and widely utilised. React was chosen as the preferred JavaScript framework by developers who took part in StackOverflow’s “2020 Developer Survey.”&lt;/p&gt;

&lt;p&gt;now react team announced the plan for the next version of React, alongside many of its upcoming features. There was also a release timeline, publicly available alpha, and even a Working Group dedicated to discussing and improving React 18.&lt;/p&gt;

&lt;p&gt;Overall, a lot is going on with React, so let’s dive in and explore all the announcements with some additional details!&lt;/p&gt;

&lt;p&gt;Let's see what are the new features&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Automatic Batching&lt;/li&gt;
&lt;li&gt;Start Transition&lt;/li&gt;
&lt;li&gt;New Suspense SSR&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#automatic-batching"&gt;
  &lt;/a&gt;
  Automatic Batching
&lt;/h2&gt;

&lt;p&gt;Let first see what is batching?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Batching is grouping multiple state update into a single render to optimize the performance.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Batching occurs when React groups multiple updates together into a single render state for achieving better computational performance. This also prevented the components from rendering “Half-Finished” states where only one state variable was updated before, causing several bugs at times. However, React would not batch the updates every time and rather perform two independent batches. React 18 will be added with a performance improvement update, where it will automatically batch the updates, irrespective of origin, for both the application and the library code. The updates inside of timeouts, promises, or even native event handlers will be batched the same way as the updates inside of React events. This will add an out-of-the-box improvement to the rendering time and even better performance. With this issue addressed in React 18, it makes the batching process more efficient and consistent.&lt;/p&gt;

&lt;p&gt;Let see this with a code example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState, useLayoutEffect } from "react";
import * as ReactDOM from "react-dom";

function App() {
  const [count, setCount] = useState(0);
  const [flag, setFlag] = useState(false);

  function handleClick() {
    console.log("=== click ===");
    setCount((prevCount) =&amp;gt; prevCount + 1); // Does not re-render yet
    setFlag((prevFlag) =&amp;gt; !prevFlag); // Does not re-render yet
    // React will only re-render once at the end (that's batching!)
  }

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;button onClick={handleClick}&amp;gt;Next&amp;lt;/button&amp;gt;
      &amp;lt;h1 style={{ color: flag ? "blue" : "black" }}&amp;gt;{count}&amp;lt;/h1&amp;gt;
      &amp;lt;LogEvents /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

function LogEvents(props) {
  useLayoutEffect(() =&amp;gt; {
    console.log("Commit");
  });
  console.log("Render");
  return null;
}

const rootElement = document.getElementById("root");
ReactDOM.render(&amp;lt;App /&amp;gt;, rootElement);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see, The &lt;strong&gt;handleClick&lt;/strong&gt; has two setState inside it. But when we click the Next button the component renders only a single time. You can see the log in console.&lt;br&gt;
Batching already exists in React 17, But React used to batch update only for browser events, not for callbacks. Check the below code for more details&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useState, useLayoutEffect } from "react";
import * as ReactDOM from "react-dom";

function App() {
  const [count, setCount] = useState(0);
  const [flag, setFlag] = useState(false);

  function handleClick() {
    console.log("=== click ===");
    fetchSomething().then(() =&amp;gt; {
      // React 17 and earlier does NOT batch these:
      setCount((prevCount) =&amp;gt; prevCount + 1); // Causes a re-render
      setFlag((prevFlaf) =&amp;gt; !prevFlaf); // Causes a re-render
    });
  }

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;button onClick={handleClick}&amp;gt;Next&amp;lt;/button&amp;gt;
      &amp;lt;h1 style={{ color: flag ? "blue" : "black" }}&amp;gt;{count}&amp;lt;/h1&amp;gt;
      &amp;lt;LogEvents /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

function LogEvents(props) {
  useLayoutEffect(() =&amp;gt; {
    console.log("Commit");
  });
  console.log("Render");
  return null;
}

function fetchSomething() {
  return new Promise((resolve) =&amp;gt; setTimeout(resolve, 100));
}

const rootElement = document.getElementById("root");
ReactDOM.render(&amp;lt;App /&amp;gt;, rootElement);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see the component is rendered two times in the console when the Next button is clicked. React does not batch update inside promise, setTimeout or any other events. To overcome this &lt;strong&gt;Automatic Batching&lt;/strong&gt; is added in React 18.&lt;/p&gt;

&lt;p&gt;Automatic Batching performs batch updates in all events. So we get automatically a better performance compared to the older version of React.&lt;br&gt;
So what we need to do for getting this better performance in our app?&lt;br&gt;
Just update your react version to 18 (as of now 18 Alpha) and add createRoot to your ReactDom render like below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ReactDOM.createRoot(rootElement).render(&amp;lt;App /&amp;gt;);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#start-transition"&gt;
  &lt;/a&gt;
  Start Transition
&lt;/h2&gt;

&lt;p&gt;Start Transition classifies the state update into two types&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Urgent Updates&lt;/li&gt;
&lt;li&gt;Transition Updates (Slow Updates)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Start Transition mainly focus on the User Experience of the app. As updates inside transition run in the background slowly.&lt;/p&gt;

&lt;p&gt;During interactions with the user interface for small actions like clicking a button or typing an input, page freezing may occur, disrupting the workflow. In React 18, a new API known as startTransition has been introduced that helps keep the app responsive even during large screen updates. The API substantially improves the user interactions by marking specific movements as “transitions ”. This allows for React to be informed about which updates are important and which are not. Transitions here are interrupted by urgent updates, and the prior irrelevant transitions are dismissed. This enables the UI to ignore secondary updates that might be slower in nature. startTransition moves the updates to the background, consisting of either complex processing or slowed data fetching due to network connectivity.&lt;/p&gt;

&lt;p&gt;You can further understand this through a real-world example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { startTransition } from 'react';
// Urgent: Show what was typed
setInputValue(input);
// Mark any state updates inside as transitions
startTransition(() =&amp;gt; {
  // Transition: Show the results
  setSearchQuery(input);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;setSearchQuery will be interrupted If an urgent update like user interaction events comes in.&lt;/p&gt;

&lt;p&gt;React provide a hook for transition with isPending&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useTransition } from 'react';
const [isPending, startTransition] = useTransition();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;isPending can be used to show the loading state to the user. If the transition is in progress.&lt;/p&gt;

&lt;p&gt;React recommends using Transition for remote data and large data updates in UI.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-suspense-ssr"&gt;
  &lt;/a&gt;
  New Suspense SSR
&lt;/h2&gt;

&lt;p&gt;This feature is for rendering react components in the server. Now suspense supported for server-side rendering also.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;so what's SSR means !&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Server-side rendering, also known as SSR, is a component that lets you generate HTML from React components directly on the server and share the HTML with users. Users can see a preview of the page through SSR even before the javascript bundle presents loads and runs. But sometimes, the javascript on the backend takes a long time to get processed, and the time taken is known as Hydrating Time. React 18 will include architectural improvements to the React SSR’s performance. The new update will allow Streaming HTML directly on the server, i.e., the server sends pieces of components as they get rendered using another component known as Suspense, which decides which parts of the application might take longer to load and what shall be rendered directly. Using a selective hydration method, components that are wrapped with Suspense will not block hydration anymore. Every ready component will start hydrating once the browser gets both its content and javascript code.&lt;/p&gt;

</description>
      <category>react</category>
      <category>reactnative</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to make stylish login page with CSS only.</title>
      <author>frontend</author>
      <pubDate>Sat, 22 Jan 2022 13:30:22 +0000</pubDate>
      <link>https://dev.to/frontendcodes/how-to-make-login-stilish-login-page-with-css-only-2kgc</link>
      <guid>https://dev.to/frontendcodes/how-to-make-login-stilish-login-page-with-css-only-2kgc</guid>
      <description>&lt;p&gt;I made the login page design with animation on one page. You can use the login page design for free in your projects. All I want from you is to comment. For more Free templates you can check &lt;a href="https://www.front-end.codes/"&gt;front-end.codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--carJH6ci--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ol3fgxr5z3zehjpzm4z.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--carJH6ci--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ol3fgxr5z3zehjpzm4z.gif" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div id="container"&amp;gt;
  &amp;lt;div id="left"&amp;gt;
    &amp;lt;h1 id="welcome"&amp;gt;Welcome&amp;lt;/h1&amp;gt;
    &amp;lt;p id="lorem"&amp;gt;
      Lorem ipsum dolor sit amet, consectetur adipiscing elit.&amp;lt;br&amp;gt;
      Vivamus sodales eros non arcu pellentesque convallis.&amp;lt;br&amp;gt;
      Nunc dignissim lectus in malesuada porta.&amp;lt;br&amp;gt;
      Proin ac erat sed urna congue suscipit.&amp;lt;br&amp;gt;
      Morbi aliquet eget nisl id ornare.
    &amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div id="right"&amp;gt;
    &amp;lt;h1 id="login"&amp;gt;LogIn&amp;lt;/h1&amp;gt;&amp;lt;br&amp;gt;
    &amp;lt;input type="email" id="email" class="client-info"&amp;gt;
    &amp;lt;label for="email"&amp;gt;Email&amp;lt;/label&amp;gt;
    &amp;lt;input type="password" id="password" class="client-info"&amp;gt;
    &amp;lt;label for="password"&amp;gt;Password&amp;lt;/label&amp;gt;
    &amp;lt;input type="submit" id="submit" class="client-info" value="Submit"&amp;gt;
    &amp;lt;button class="social" id="facebook"&amp;gt;connect with facebook&amp;lt;/button&amp;gt;
    &amp;lt;button class="social" id="google"&amp;gt;connect with google&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and add some CSS.For more than &lt;a href="https://front-end.codes/bootstrap-login-form-cards/"&gt;40 CSS &amp;amp; Bootstrap login template&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* {
  margin: 0;
  padding: 0;
  outline: none;
}

:root {
  --main-color: #fff;
  --second-color: #347deb;
  --box-shadow: 0 10px 10px rgba(0, 0, 0, 0.1);
  --facebook-color: rgb(60, 90, 154);
  --google-color: rgb(220, 74, 61);
}

html {
  height: 100%;
}
body {
  background-image: linear-gradient(310deg, #df98fa, #9055ff);
  font-family: sans-serif;
}

#container {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  background-color: var(--main-color);
  width: 1200px;
  height: 800px;
  border-radius: 10px;
  display: grid;
  grid-template-columns: repeat(2, 50%);
  box-shadow: var(--box-shadow);
  transition-duration: 1s;
}

#left, #right {
  margin: auto;
  width: 95%;
  height: 96%;
  border-radius: 10px;
}

#left {
  background-image: url("https://images.unsplash.com/photo-1615400014497-55726234cccb?crop=entropy&amp;amp;cs=srgb&amp;amp;fm=jpg&amp;amp;ixid=MnwxNDU4OXwwfDF8cmFuZG9tfHx8fHx8fHx8MTYxNzg4Njg0Ng&amp;amp;ixlib=rb-1.2.1&amp;amp;q=85");
  background-size: cover;
  background-position: center;
  box-shadow: var(--box-shadow);
}
#welcome, #lorem {
  margin: 20px;
  text-shadow: var(--box-shadow);
}
#welcome {
  font-size: 75px;
  font-weight: 300;
  margin-top: 330px;
  text-shadow: var(--box-shadow);
}

#login {
  padding-top: 35%;
  text-align: center;
  text-transform: uppercase;
  font-weight: 100;
  text-shadow: var(--box-shadow);
}
.client-info {
  display: block;
  margin: 20px auto;
  width: 60%;
  height: 50px;
  border: solid #999 1px;
  border-radius: 5px;
  text-indent: 15px;
  transition: all 200ms;
  box-shadow: var(--box-shadow);
}
.client-info:focus {
  width: 80%;
}
label {
  position: absolute;
  margin: -76px 130px;
    font-size: 12px;
    white-space: nowrap;
    background: #fff;
    padding: 0 5px;
    color: #999;
  transition: all 200ms;
  text-shadow: var(--box-shadow);
}
#email:focus ~ label[for="email"] {
  margin: -76px 70px;
}
#password:focus ~ label[for="password"] {
  margin: -76px 70px;
}
#submit {
  border: none;
  background-color: #9055ff;
  color: white;
  width: 60%;
}
#submit:hover {
  background-color: #df98fa;
}

.social {
  background-color: #fff;
  display: block;
  margin: 10px auto;
  width: 70%;
  height: 50px;
  border: none;
  border-radius: 5px;
  text-transform: uppercase;
  transition-duration: 200ms;
  box-shadow: var(--box-shadow);
  text-shadow: var(--box-shadow);
}
#facebook {
  border: solid var(--facebook-color) 1px;
  color: var(--facebook-color);
}
#facebook:hover {
  background-color: var(--facebook-color);
  color: white;
}
#google {
  border: solid var(--google-color) 1px;
  color: var(--google-color);
}
#google:hover {
  background-color: var(--google-color);
  color: white;
}

@media (max-width: 1250px) {

  #container {
    width: 600px;
    display: block;
  }
  #left {
    display: none;
  }
  #right {
    margin-top: 16px;
    background-image: url("https://images.unsplash.com/photo-1615400014497-55726234cccb?crop=entropy&amp;amp;cs=srgb&amp;amp;fm=jpg&amp;amp;ixid=MnwxNDU4OXwwfDF8cmFuZG9tfHx8fHx8fHx8MTYxNzg4Njg0Ng&amp;amp;ixlib=rb-1.2.1&amp;amp;q=85");
    background-size: cover;
    background-position: center;
    box-shadow: var(--box-shadow);
  }

}

@media (max-height: 850px) {

  #container {
    width: 1000px;
    height: 600px;
  }
  #login {
    padding-top: 20%;
  }
  #welcome {
    margin-top: 240px;
    font-size: 60px;
  }
  #lorem {
    font-size: 15px;
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
    </item>
    <item>
      <title>Optimizing TypeORM: Tips from Experience! (Part 1: Don't use save())</title>
      <author>Rishit Bansal</author>
      <pubDate>Sat, 22 Jan 2022 13:09:43 +0000</pubDate>
      <link>https://dev.to/rishit/optimizing-typeorm-tips-from-experience-part-1-dont-use-save-4ke9</link>
      <guid>https://dev.to/rishit/optimizing-typeorm-tips-from-experience-part-1-dont-use-save-4ke9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction-to-the-series"&gt;
  &lt;/a&gt;
  Introduction to the series
&lt;/h2&gt;

&lt;p&gt;As of January 21st 2022 (&lt;a href="https://openbase.com/categories/js/most-popular-nodejs-mysql-orm-libraries"&gt;source&lt;/a&gt;), TypeORM is the &lt;strong&gt;3rd most popular&lt;/strong&gt; Javascript ORM library and certainly the most popular if we're talking about Typescript.&lt;/p&gt;

&lt;p&gt;I have been extensively working with this library for the past two years, using it to serve millions of database queries every single day. In this series, I will list a few tips and pitfalls I learned while working with the project, which helped me catch bugs in production and optimize API calls. I'll try to keep each post short, informative and straightforward so you can quickly use these optimizations in your code.&lt;/p&gt;

&lt;p&gt;In each post, we will go over:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What is the problem?&lt;/li&gt;
&lt;li&gt;Why is it wrong?&lt;/li&gt;
&lt;li&gt;How can you fix it?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#save-vs-insert-update"&gt;
  &lt;/a&gt;
  save() vs insert(), update()
&lt;/h2&gt;

&lt;p&gt;Repositories have the &lt;code&gt;.save()&lt;/code&gt; method, which has a dual function:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It inserts the entity if it doesn't already exist.&lt;/li&gt;
&lt;li&gt;If the entity exists, it attempts to update the existing one.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's observe two example usages of the method:&lt;/p&gt;

&lt;p&gt;Here is a code snippet taken from an API endpoint which registers a new user:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Rishit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test123&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is a snippet from another endpoint which updates the name of an existing user:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Rishit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty handy, right? Well, not so much as this comes at the cost of a performance penalty. The implementation of &lt;code&gt;save()&lt;/code&gt; executes 2 queries instead of a single one:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First, it uses a &lt;code&gt;SELECT&lt;/code&gt; query to search for an existing entity.&lt;/li&gt;
&lt;li&gt;If step 1 returns a record, it uses &lt;code&gt;UPDATE&lt;/code&gt; to update the record. Otherwise, it uses &lt;code&gt;INSERT&lt;/code&gt; to insert a new record.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#why-is-it-bad"&gt;
  &lt;/a&gt;
  Why is it bad?
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;These queries need &lt;strong&gt;two round trips&lt;/strong&gt; to the database, meaning that you have to suffer the network latency due to each of the trips.&lt;/li&gt;
&lt;li&gt;There are specific contexts in your code where you know for a fact that you are certainly inserting / updating and do not require to use &lt;code&gt;save()&lt;/code&gt;'s dual functionality.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;SELECT&lt;/code&gt; query generated by TypeORM includes a subquery, which is highly inefficient for tables with millions of rows.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-do-you-fix-this"&gt;
  &lt;/a&gt;
  How do you fix this?
&lt;/h2&gt;

&lt;p&gt;Look at the context you use your query in, and that should usually let you decide whether you meant to do an &lt;code&gt;insert()&lt;/code&gt; or an &lt;code&gt;update()&lt;/code&gt;. For example, you can refactor the above two snippets to:&lt;/p&gt;

&lt;p&gt;registering a new user:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Rishit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test123&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;updating an existing user:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Rishit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;},{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And just like that, you reduced the database load due to these queries by half: a &lt;strong&gt;2x&lt;/strong&gt; improvement!. The usage of &lt;code&gt;save()&lt;/code&gt; might seem pretty obvious. Still, it's a prevalent practice to use &lt;code&gt;.save()&lt;/code&gt; everywhere in code due to the &lt;a href="https://typeorm.io/#/undefined/updating-in-the-database"&gt;documentation of TypeORM itself&lt;/a&gt; recommending it as the primary mode to update entities.&lt;/p&gt;

&lt;p&gt;That said, &lt;code&gt;save()&lt;/code&gt; does indeed pose a valid use case for code that actually requires the functionality to &lt;code&gt;insert&lt;/code&gt; OR &lt;code&gt;update&lt;/code&gt; depending on if the entity exists or not. However, I am sure that most use cases don't need this feature and intend to either insert or update a record, not both.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>database</category>
      <category>node</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
